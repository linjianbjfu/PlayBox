; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	\boxgit\PlayBox\CommonLib\common\YL_URLEncoder.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0FG@EOHGAEB@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IH@HPGJLCCK@?3Jan?3January?3Feb?3February?3Mar?3Ma@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@HHDGIIFB@0123456789abcdefABCDEF?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EM@KKHJFHNK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1bad_exception@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_exception@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1domain_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gdomain_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1overflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Goverflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1underflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gunderflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1range_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Grange_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_DebugHeapString@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocbyte@_W@std@@YAD_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$codecvt@_WDH@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_DebugHeapAllocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$_DebugHeapAllocator@D@std@@@std@@IAE@V?$_DebugHeapAllocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Getloctxt@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Getloctxt@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@YAHAAV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0IPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?8_WU?$char_traits@_W@std@@@std@@YA_NABV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocbyte@D@std@@YADDABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?9_WU?$char_traits@_W@std@@@std@@YA_NABV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@codecvt_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@_WDH@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@exception@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@A@?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4underflow_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4overflow_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4domain_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4invalid_argument@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$codecvt@_WDH@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4range_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4bad_exception@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7underflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7overflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Stz@?$fpos@H@std@@0HA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$codecvt@_WDH@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_exception@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7range_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7domain_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
CONST	SEGMENT
_urlchr_table DB 02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	02H
	DB	03H
	DB	01H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	03H
	DB	02H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
$SG10877 DB	'0123456789ABCDEF', 00H
	ORG $+3
$SG10878 DB	'0123456789ABCDEF', 00H
	ORG $+3
$SG10891 DB	'0123456789ABCDEF', 00H
	ORG $+3
$SG10892 DB	'0123456789ABCDEF', 00H
	ORG $+3
$SG10905 DB	'0123456789ABCDEF', 00H
	ORG $+3
$SG10906 DB	'0123456789ABCDEF', 00H
CONST	ENDS
PUBLIC	?encode@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; YL_URLEncoder::encode
EXTRN	__imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z:NEAR
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\commonlib\common\yl_urlencoder.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
xdata$x	SEGMENT
$T15093	DD	0ffffffffH
	DD	FLAT:$L15076
	DD	00H
	DD	FLAT:$L15075
$T15082	DD	019930520H
	DD	02H
	DD	FLAT:$T15093
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv90 = -65						; size = 1
$T15077 = -64						; size = 4
_c$10876 = -57						; size = 1
___p$ = -56						; size = 4
___encoded$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_url$ = 12						; size = 4
?encode@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z PROC NEAR ; YL_URLEncoder::encode

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?encode@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 38	 sub	 esp, 56			; 00000038H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  00020	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T15077[ebp], 0

; 114  : 	string __encoded;

  0003b	8b f4		 mov	 esi, esp
  0003d	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 115  : 	const char *__p = url.c_str();

  00054	8b f4		 mov	 esi, esp
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR _url$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	89 45 c8	 mov	 DWORD PTR ___p$[ebp], eax
$L10873:

; 116  : 
; 117  : 	while (*__p) {

  00069	8b 45 c8	 mov	 eax, DWORD PTR ___p$[ebp]
  0006c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0006f	85 c9		 test	 ecx, ecx
  00071	0f 84 a6 00 00
	00		 je	 $L10874

; 118  : 		if (url_char_needs_escaping(__p)) {

  00077	8b 55 c8	 mov	 edx, DWORD PTR ___p$[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?url_char_needs_escaping@@YA_NPBD@Z ; url_char_needs_escaping
  00080	83 c4 04	 add	 esp, 4
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	74 67		 je	 SHORT $L10875

; 119  : 			unsigned char c = *__p++;

  0008a	8b 4d c8	 mov	 ecx, DWORD PTR ___p$[ebp]
  0008d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0008f	88 55 c7	 mov	 BYTE PTR _c$10876[ebp], dl
  00092	8b 45 c8	 mov	 eax, DWORD PTR ___p$[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	89 45 c8	 mov	 DWORD PTR ___p$[ebp], eax

; 120  : 			__encoded.push_back('%');

  0009b	8b f4		 mov	 esi, esp
  0009d	6a 25		 push	 37			; 00000025H
  0009f	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 121  : 			__encoded.push_back(XNUM_TO_DIGIT (c >> 4));

  000af	0f b6 4d c7	 movzx	 ecx, BYTE PTR _c$10876[ebp]
  000b3	c1 f9 04	 sar	 ecx, 4
  000b6	8b f4		 mov	 esi, esp
  000b8	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR $SG10877[ecx]
  000be	52		 push	 edx
  000bf	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  000c8	3b f4		 cmp	 esi, esp
  000ca	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 122  : 			__encoded.push_back(XNUM_TO_DIGIT (c & 0xf));

  000cf	0f b6 45 c7	 movzx	 eax, BYTE PTR _c$10876[ebp]
  000d3	83 e0 0f	 and	 eax, 15			; 0000000fH
  000d6	8b f4		 mov	 esi, esp
  000d8	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR $SG10878[eax]
  000de	51		 push	 ecx
  000df	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 		} else {

  000ef	eb 27		 jmp	 SHORT $L10879
$L10875:

; 124  : 			__encoded.push_back(*__p++);

  000f1	8b 55 c8	 mov	 edx, DWORD PTR ___p$[ebp]
  000f4	8a 02		 mov	 al, BYTE PTR [edx]
  000f6	88 45 bf	 mov	 BYTE PTR tv90[ebp], al
  000f9	8b 4d c8	 mov	 ecx, DWORD PTR ___p$[ebp]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	89 4d c8	 mov	 DWORD PTR ___p$[ebp], ecx
  00102	8b f4		 mov	 esi, esp
  00104	8a 55 bf	 mov	 dl, BYTE PTR tv90[ebp]
  00107	52		 push	 edx
  00108	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  00111	3b f4		 cmp	 esi, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L10879:

; 125  : 		}
; 126  : 	}

  00118	e9 4c ff ff ff	 jmp	 $L10873
$L10874:

; 127  : 
; 128  : 	return __encoded;

  0011d	8b f4		 mov	 esi, esp
  0011f	8d 45 d0	 lea	 eax, DWORD PTR ___encoded$[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0012c	3b f4		 cmp	 esi, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00133	8b 4d c0	 mov	 ecx, DWORD PTR $T15077[ebp]
  00136	83 c9 01	 or	 ecx, 1
  00139	89 4d c0	 mov	 DWORD PTR $T15077[ebp], ecx
  0013c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00140	8b f4		 mov	 esi, esp
  00142	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0014b	3b f4		 cmp	 esi, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00152	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 129  : }

  00155	52		 push	 edx
  00156	8b cd		 mov	 ecx, ebp
  00158	50		 push	 eax
  00159	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15090
  0015f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00164	58		 pop	 eax
  00165	5a		 pop	 edx
  00166	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00169	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00170	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	83 c4 44	 add	 esp, 68			; 00000044H
  0017d	3b ec		 cmp	 ebp, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c3		 ret	 0
$L15090:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $L15089
$L15089:
  00190	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00194	1c 00 00 00	 DD	 28			; 0000001cH
  00198	00 00 00 00	 DD	 $L15084
$L15084:
  0019c	5f		 DB	 95			; 0000005fH
  0019d	5f		 DB	 95			; 0000005fH
  0019e	65		 DB	 101			; 00000065H
  0019f	6e		 DB	 110			; 0000006eH
  001a0	63		 DB	 99			; 00000063H
  001a1	6f		 DB	 111			; 0000006fH
  001a2	64		 DB	 100			; 00000064H
  001a3	65		 DB	 101			; 00000065H
  001a4	64		 DB	 100			; 00000064H
  001a5	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L15075:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15076:
  00012	8b 45 c0	 mov	 eax, DWORD PTR $T15077[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15078
  0001e	83 65 c0 fe	 and	 DWORD PTR $T15077[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15078:
  00034	c3		 ret	 0
__ehhandler$?encode@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15082
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?encode@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ENDP ; YL_URLEncoder::encode
EXTRN	__imp__isxdigit:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
?url_char_needs_escaping@@YA_NPBD@Z PROC NEAR		; url_char_needs_escaping

; 96   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	56		 push	 esi

; 97   : 	if (*p == '%')

  001b4	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  001b7	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001ba	83 f9 25	 cmp	 ecx, 37			; 00000025H
  001bd	75 44		 jne	 SHORT $L10858

; 98   : 	{
; 99   : 		if (isxdigit(*(p + 1)) && isxdigit(*(p + 2)))

  001bf	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  001c2	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  001c6	8b f4		 mov	 esi, esp
  001c8	50		 push	 eax
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  001cf	83 c4 04	 add	 esp, 4
  001d2	3b f4		 cmp	 esi, esp
  001d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d9	85 c0		 test	 eax, eax
  001db	74 22		 je	 SHORT $L10859
  001dd	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  001e0	0f be 51 02	 movsx	 edx, BYTE PTR [ecx+2]
  001e4	8b f4		 mov	 esi, esp
  001e6	52		 push	 edx
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  001ed	83 c4 04	 add	 esp, 4
  001f0	3b f4		 cmp	 esi, esp
  001f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f7	85 c0		 test	 eax, eax
  001f9	74 04		 je	 SHORT $L10859

; 100  : 			return false;

  001fb	32 c0		 xor	 al, al
  001fd	eb 2e		 jmp	 SHORT $L10857
$L10859:

; 101  : 		else
; 102  : 			/* Garbled %.. sequence: encode `%'. */
; 103  : 			return true;

  001ff	b0 01		 mov	 al, 1
  00201	eb 2a		 jmp	 SHORT $L10857
$L10858:

; 104  : 	}
; 105  : 	else if (URL_UNSAFE_CHAR (*p) && !URL_RESERVED_CHAR (*p))

  00203	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00206	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00209	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _urlchr_table[ecx]
  00210	83 e2 02	 and	 edx, 2
  00213	74 16		 je	 SHORT $L10864
  00215	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00218	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0021b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _urlchr_table[ecx]
  00222	83 e2 01	 and	 edx, 1
  00225	75 04		 jne	 SHORT $L10864

; 106  : 		return true;

  00227	b0 01		 mov	 al, 1
  00229	eb 02		 jmp	 SHORT $L10857
$L10864:

; 107  : 	else
; 108  : 		return false;

  0022b	32 c0		 xor	 al, al
$L10857:

; 109  : }

  0022d	5e		 pop	 esi
  0022e	3b ec		 cmp	 ebp, esp
  00230	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
?url_char_needs_escaping@@YA_NPBD@Z ENDP		; url_char_needs_escaping
_TEXT	ENDS
PUBLIC	?encode@YL_URLEncoder@@SAPADPADPBD@Z		; YL_URLEncoder::encode
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_c$10890 = -9						; size = 1
___p1$ = -8						; size = 4
___p$ = -4						; size = 4
_tourl$ = 8						; size = 4
_fromurl$ = 12						; size = 4
?encode@YL_URLEncoder@@SAPADPADPBD@Z PROC NEAR		; YL_URLEncoder::encode

; 132  : {

  00240	55		 push	 ebp
  00241	8b ec		 mov	 ebp, esp
  00243	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00246	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0024d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00254	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 133  : 	const char *__p = fromurl;

  0025b	8b 45 0c	 mov	 eax, DWORD PTR _fromurl$[ebp]
  0025e	89 45 fc	 mov	 DWORD PTR ___p$[ebp], eax

; 134  : 	char *__p1 = tourl;

  00261	8b 4d 08	 mov	 ecx, DWORD PTR _tourl$[ebp]
  00264	89 4d f8	 mov	 DWORD PTR ___p1$[ebp], ecx
$L10887:

; 135  : 
; 136  : 	while (*__p) {

  00267	8b 55 fc	 mov	 edx, DWORD PTR ___p$[ebp]
  0026a	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0026d	85 c0		 test	 eax, eax
  0026f	0f 84 8c 00 00
	00		 je	 $L10888

; 137  : 		if (url_char_needs_escaping(__p)) {

  00275	8b 4d fc	 mov	 ecx, DWORD PTR ___p$[ebp]
  00278	51		 push	 ecx
  00279	e8 00 00 00 00	 call	 ?url_char_needs_escaping@@YA_NPBD@Z ; url_char_needs_escaping
  0027e	83 c4 04	 add	 esp, 4
  00281	0f b6 d0	 movzx	 edx, al
  00284	85 d2		 test	 edx, edx
  00286	74 58		 je	 SHORT $L10889

; 138  : 			unsigned char c = *__p++;

  00288	8b 45 fc	 mov	 eax, DWORD PTR ___p$[ebp]
  0028b	8a 08		 mov	 cl, BYTE PTR [eax]
  0028d	88 4d f7	 mov	 BYTE PTR _c$10890[ebp], cl
  00290	8b 55 fc	 mov	 edx, DWORD PTR ___p$[ebp]
  00293	83 c2 01	 add	 edx, 1
  00296	89 55 fc	 mov	 DWORD PTR ___p$[ebp], edx

; 139  : 			*__p1++ = ('%');

  00299	8b 45 f8	 mov	 eax, DWORD PTR ___p1$[ebp]
  0029c	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0029f	8b 4d f8	 mov	 ecx, DWORD PTR ___p1$[ebp]
  002a2	83 c1 01	 add	 ecx, 1
  002a5	89 4d f8	 mov	 DWORD PTR ___p1$[ebp], ecx

; 140  : 			*__p1++ = XNUM_TO_DIGIT (c >> 4);

  002a8	0f b6 55 f7	 movzx	 edx, BYTE PTR _c$10890[ebp]
  002ac	c1 fa 04	 sar	 edx, 4
  002af	8b 45 f8	 mov	 eax, DWORD PTR ___p1$[ebp]
  002b2	8a 8a 00 00 00
	00		 mov	 cl, BYTE PTR $SG10891[edx]
  002b8	88 08		 mov	 BYTE PTR [eax], cl
  002ba	8b 55 f8	 mov	 edx, DWORD PTR ___p1$[ebp]
  002bd	83 c2 01	 add	 edx, 1
  002c0	89 55 f8	 mov	 DWORD PTR ___p1$[ebp], edx

; 141  : 			*__p1++ = XNUM_TO_DIGIT (c & 0xf);

  002c3	0f b6 45 f7	 movzx	 eax, BYTE PTR _c$10890[ebp]
  002c7	83 e0 0f	 and	 eax, 15			; 0000000fH
  002ca	8b 4d f8	 mov	 ecx, DWORD PTR ___p1$[ebp]
  002cd	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR $SG10892[eax]
  002d3	88 11		 mov	 BYTE PTR [ecx], dl
  002d5	8b 45 f8	 mov	 eax, DWORD PTR ___p1$[ebp]
  002d8	83 c0 01	 add	 eax, 1
  002db	89 45 f8	 mov	 DWORD PTR ___p1$[ebp], eax

; 142  : 		} else {

  002de	eb 1c		 jmp	 SHORT $L10893
$L10889:

; 143  : 			*__p1++ = *__p++;

  002e0	8b 4d f8	 mov	 ecx, DWORD PTR ___p1$[ebp]
  002e3	8b 55 fc	 mov	 edx, DWORD PTR ___p$[ebp]
  002e6	8a 02		 mov	 al, BYTE PTR [edx]
  002e8	88 01		 mov	 BYTE PTR [ecx], al
  002ea	8b 4d f8	 mov	 ecx, DWORD PTR ___p1$[ebp]
  002ed	83 c1 01	 add	 ecx, 1
  002f0	89 4d f8	 mov	 DWORD PTR ___p1$[ebp], ecx
  002f3	8b 55 fc	 mov	 edx, DWORD PTR ___p$[ebp]
  002f6	83 c2 01	 add	 edx, 1
  002f9	89 55 fc	 mov	 DWORD PTR ___p$[ebp], edx
$L10893:

; 144  : 		}
; 145  : 	}

  002fc	e9 66 ff ff ff	 jmp	 $L10887
$L10888:

; 146  : 
; 147  : 	*__p1 = '\0';

  00301	8b 45 f8	 mov	 eax, DWORD PTR ___p1$[ebp]
  00304	c6 00 00	 mov	 BYTE PTR [eax], 0

; 148  : 
; 149  : 	return tourl;

  00307	8b 45 08	 mov	 eax, DWORD PTR _tourl$[ebp]

; 150  : }

  0030a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030d	3b ec		 cmp	 ebp, esp
  0030f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00314	8b e5		 mov	 esp, ebp
  00316	5d		 pop	 ebp
  00317	c3		 ret	 0
?encode@YL_URLEncoder@@SAPADPADPBD@Z ENDP		; YL_URLEncoder::encode
_TEXT	ENDS
PUBLIC	?encodeQuery@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; YL_URLEncoder::encodeQuery
xdata$x	SEGMENT
$T15110	DD	0ffffffffH
	DD	FLAT:$L15100
	DD	00H
	DD	FLAT:$L15099
$T15104	DD	019930520H
	DD	02H
	DD	FLAT:$T15110
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv90 = -65						; size = 1
$T15101 = -64						; size = 4
_c$10904 = -57						; size = 1
___p$ = -56						; size = 4
___encoded$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_query$ = 12						; size = 4
?encodeQuery@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z PROC NEAR ; YL_URLEncoder::encodeQuery

; 153  : {

  00320	55		 push	 ebp
  00321	8b ec		 mov	 ebp, esp
  00323	6a ff		 push	 -1
  00325	68 00 00 00 00	 push	 __ehhandler$?encodeQuery@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  0032a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00330	50		 push	 eax
  00331	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00338	83 ec 38	 sub	 esp, 56			; 00000038H
  0033b	56		 push	 esi
  0033c	57		 push	 edi
  0033d	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  00340	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00345	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0034a	f3 ab		 rep stosd
  0034c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00351	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00354	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T15101[ebp], 0

; 154  : 	string __encoded;

  0035b	8b f4		 mov	 esi, esp
  0035d	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00360	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00366	3b f4		 cmp	 esi, esp
  00368	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 155  : 	const char *__p = query.c_str();

  00374	8b f4		 mov	 esi, esp
  00376	8b 4d 0c	 mov	 ecx, DWORD PTR _query$[ebp]
  00379	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0037f	3b f4		 cmp	 esi, esp
  00381	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00386	89 45 c8	 mov	 DWORD PTR ___p$[ebp], eax
$L10901:

; 156  : 
; 157  : 	while (*__p) {

  00389	8b 45 c8	 mov	 eax, DWORD PTR ___p$[ebp]
  0038c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0038f	85 c9		 test	 ecx, ecx
  00391	0f 84 a6 00 00
	00		 je	 $L10902

; 158  : 		if (query_char_needs_escaping(__p)) {

  00397	8b 55 c8	 mov	 edx, DWORD PTR ___p$[ebp]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 ?query_char_needs_escaping@@YA_NPBD@Z ; query_char_needs_escaping
  003a0	83 c4 04	 add	 esp, 4
  003a3	0f b6 c0	 movzx	 eax, al
  003a6	85 c0		 test	 eax, eax
  003a8	74 67		 je	 SHORT $L10903

; 159  : 			unsigned char c = *__p++;

  003aa	8b 4d c8	 mov	 ecx, DWORD PTR ___p$[ebp]
  003ad	8a 11		 mov	 dl, BYTE PTR [ecx]
  003af	88 55 c7	 mov	 BYTE PTR _c$10904[ebp], dl
  003b2	8b 45 c8	 mov	 eax, DWORD PTR ___p$[ebp]
  003b5	83 c0 01	 add	 eax, 1
  003b8	89 45 c8	 mov	 DWORD PTR ___p$[ebp], eax

; 160  : 			__encoded.push_back('%');

  003bb	8b f4		 mov	 esi, esp
  003bd	6a 25		 push	 37			; 00000025H
  003bf	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  003c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  003c8	3b f4		 cmp	 esi, esp
  003ca	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  : 			__encoded.push_back(XNUM_TO_DIGIT (c >> 4));

  003cf	0f b6 4d c7	 movzx	 ecx, BYTE PTR _c$10904[ebp]
  003d3	c1 f9 04	 sar	 ecx, 4
  003d6	8b f4		 mov	 esi, esp
  003d8	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR $SG10905[ecx]
  003de	52		 push	 edx
  003df	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  003e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  003e8	3b f4		 cmp	 esi, esp
  003ea	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 162  : 			__encoded.push_back(XNUM_TO_DIGIT (c & 0xf));

  003ef	0f b6 45 c7	 movzx	 eax, BYTE PTR _c$10904[ebp]
  003f3	83 e0 0f	 and	 eax, 15			; 0000000fH
  003f6	8b f4		 mov	 esi, esp
  003f8	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR $SG10906[eax]
  003fe	51		 push	 ecx
  003ff	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00402	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  00408	3b f4		 cmp	 esi, esp
  0040a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  : 		} else {

  0040f	eb 27		 jmp	 SHORT $L10907
$L10903:

; 164  : 			__encoded.push_back(*__p++);

  00411	8b 55 c8	 mov	 edx, DWORD PTR ___p$[ebp]
  00414	8a 02		 mov	 al, BYTE PTR [edx]
  00416	88 45 bf	 mov	 BYTE PTR tv90[ebp], al
  00419	8b 4d c8	 mov	 ecx, DWORD PTR ___p$[ebp]
  0041c	83 c1 01	 add	 ecx, 1
  0041f	89 4d c8	 mov	 DWORD PTR ___p$[ebp], ecx
  00422	8b f4		 mov	 esi, esp
  00424	8a 55 bf	 mov	 dl, BYTE PTR tv90[ebp]
  00427	52		 push	 edx
  00428	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  0042b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  00431	3b f4		 cmp	 esi, esp
  00433	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L10907:

; 165  : 		}
; 166  : 	}

  00438	e9 4c ff ff ff	 jmp	 $L10901
$L10902:

; 167  : 
; 168  : 	return __encoded;

  0043d	8b f4		 mov	 esi, esp
  0043f	8d 45 d0	 lea	 eax, DWORD PTR ___encoded$[ebp]
  00442	50		 push	 eax
  00443	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0044c	3b f4		 cmp	 esi, esp
  0044e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00453	8b 4d c0	 mov	 ecx, DWORD PTR $T15101[ebp]
  00456	83 c9 01	 or	 ecx, 1
  00459	89 4d c0	 mov	 DWORD PTR $T15101[ebp], ecx
  0045c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00460	8b f4		 mov	 esi, esp
  00462	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00465	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0046b	3b f4		 cmp	 esi, esp
  0046d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00472	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 169  : }

  00475	52		 push	 edx
  00476	8b cd		 mov	 ecx, ebp
  00478	50		 push	 eax
  00479	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15109
  0047f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00484	58		 pop	 eax
  00485	5a		 pop	 edx
  00486	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00489	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00490	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00493	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00498	5f		 pop	 edi
  00499	5e		 pop	 esi
  0049a	83 c4 44	 add	 esp, 68			; 00000044H
  0049d	3b ec		 cmp	 ebp, esp
  0049f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a4	8b e5		 mov	 esp, ebp
  004a6	5d		 pop	 ebp
  004a7	c3		 ret	 0
$L15109:
  004a8	01 00 00 00	 DD	 1
  004ac	00 00 00 00	 DD	 $L15108
$L15108:
  004b0	d0 ff ff ff	 DD	 -48			; ffffffd0H
  004b4	1c 00 00 00	 DD	 28			; 0000001cH
  004b8	00 00 00 00	 DD	 $L15105
$L15105:
  004bc	5f		 DB	 95			; 0000005fH
  004bd	5f		 DB	 95			; 0000005fH
  004be	65		 DB	 101			; 00000065H
  004bf	6e		 DB	 110			; 0000006eH
  004c0	63		 DB	 99			; 00000063H
  004c1	6f		 DB	 111			; 0000006fH
  004c2	64		 DB	 100			; 00000064H
  004c3	65		 DB	 101			; 00000065H
  004c4	64		 DB	 100			; 00000064H
  004c5	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L15099:
  0003f	8b f4		 mov	 esi, esp
  00041	8d 4d d0	 lea	 ecx, DWORD PTR ___encoded$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15100:
  00051	8b 45 c0	 mov	 eax, DWORD PTR $T15101[ebp]
  00054	83 e0 01	 and	 eax, 1
  00057	0f 84 16 00 00
	00		 je	 $L15102
  0005d	83 65 c0 fe	 and	 DWORD PTR $T15101[ebp], -2 ; fffffffeH
  00061	8b f4		 mov	 esi, esp
  00063	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15102:
  00073	c3		 ret	 0
__ehhandler$?encodeQuery@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z:
  00074	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15104
  00079	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?encodeQuery@YL_URLEncoder@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ENDP ; YL_URLEncoder::encodeQuery
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
?query_char_needs_escaping@@YA_NPBD@Z PROC NEAR		; query_char_needs_escaping

; 78   : {

  004d0	55		 push	 ebp
  004d1	8b ec		 mov	 ebp, esp
  004d3	56		 push	 esi

; 79   : 	if (*p == '%')

  004d4	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  004d7	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004da	83 f9 25	 cmp	 ecx, 37			; 00000025H
  004dd	75 44		 jne	 SHORT $L10846

; 80   : 	{
; 81   : 		if (isxdigit(*(p + 1)) && isxdigit(*(p + 2)))

  004df	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  004e2	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  004e6	8b f4		 mov	 esi, esp
  004e8	50		 push	 eax
  004e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  004ef	83 c4 04	 add	 esp, 4
  004f2	3b f4		 cmp	 esi, esp
  004f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f9	85 c0		 test	 eax, eax
  004fb	74 22		 je	 SHORT $L10847
  004fd	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00500	0f be 51 02	 movsx	 edx, BYTE PTR [ecx+2]
  00504	8b f4		 mov	 esi, esp
  00506	52		 push	 edx
  00507	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  0050d	83 c4 04	 add	 esp, 4
  00510	3b f4		 cmp	 esi, esp
  00512	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00517	85 c0		 test	 eax, eax
  00519	74 04		 je	 SHORT $L10847

; 82   : 			return false;

  0051b	32 c0		 xor	 al, al
  0051d	eb 2e		 jmp	 SHORT $L10845
$L10847:

; 83   : 		else
; 84   : 			/* Garbled %.. sequence: encode `%'. */
; 85   : 			return true;

  0051f	b0 01		 mov	 al, 1
  00521	eb 2a		 jmp	 SHORT $L10845
$L10846:

; 86   : 	}
; 87   : 	else if (URL_UNSAFE_CHAR (*p) || URL_RESERVED_CHAR (*p))

  00523	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00526	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00529	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _urlchr_table[ecx]
  00530	83 e2 02	 and	 edx, 2
  00533	75 12		 jne	 SHORT $L10853
  00535	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00538	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0053b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _urlchr_table[ecx]
  00542	83 e2 01	 and	 edx, 1
  00545	74 04		 je	 SHORT $L10852
$L10853:

; 88   : 		return true;

  00547	b0 01		 mov	 al, 1
  00549	eb 02		 jmp	 SHORT $L10845
$L10852:

; 89   : 	else
; 90   : 		return false;

  0054b	32 c0		 xor	 al, al
$L10845:

; 91   : 
; 92   : }

  0054d	5e		 pop	 esi
  0054e	3b ec		 cmp	 ebp, esp
  00550	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00555	5d		 pop	 ebp
  00556	c3		 ret	 0
?query_char_needs_escaping@@YA_NPBD@Z ENDP		; query_char_needs_escaping
_TEXT	ENDS
PUBLIC	?decode@YL_URLEncoder@@SAPADPAD@Z		; YL_URLEncoder::decode
EXTRN	__imp__toupper:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv147 = -20						; size = 4
tv133 = -16						; size = 4
tv72 = -10						; size = 1
_c$10919 = -9						; size = 1
_h$ = -8						; size = 4
_t$ = -4						; size = 4
_s$ = 8							; size = 4
?decode@YL_URLEncoder@@SAPADPAD@Z PROC NEAR		; YL_URLEncoder::decode

; 172  : {

  00560	55		 push	 ebp
  00561	8b ec		 mov	 ebp, esp
  00563	83 ec 14	 sub	 esp, 20			; 00000014H
  00566	56		 push	 esi
  00567	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0056c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0056f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00572	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00575	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00578	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 173  : 	char *t = s;                  /* t - tortoise */

  0057b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0057e	89 45 fc	 mov	 DWORD PTR _t$[ebp], eax

; 174  : 	char *h = s;                  /* h - hare     */

  00581	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00584	89 4d f8	 mov	 DWORD PTR _h$[ebp], ecx

; 175  : 
; 176  : 	for (; *h; h++, t++)

  00587	eb 12		 jmp	 SHORT $L10913
$L10914:
  00589	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  0058c	83 c2 01	 add	 edx, 1
  0058f	89 55 f8	 mov	 DWORD PTR _h$[ebp], edx
  00592	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp]
  00595	83 c0 01	 add	 eax, 1
  00598	89 45 fc	 mov	 DWORD PTR _t$[ebp], eax
$L10913:
  0059b	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  0059e	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  005a1	85 d2		 test	 edx, edx
  005a3	0f 84 2a 01 00
	00		 je	 $L10915

; 177  : 	{
; 178  : 		if (*h != '%')

  005a9	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  005ac	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  005af	83 f9 25	 cmp	 ecx, 37			; 00000025H
  005b2	74 26		 je	 SHORT $L10916
$copychar$10917:

; 179  : 		{
; 180  : copychar:
; 181  : 			*t = (*h=='+')?' ':*h;

  005b4	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  005b7	0f be 02	 movsx	 eax, BYTE PTR [edx]
  005ba	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  005bd	75 06		 jne	 SHORT $L15113
  005bf	c6 45 f6 20	 mov	 BYTE PTR tv72[ebp], 32	; 00000020H
  005c3	eb 08		 jmp	 SHORT $L15114
$L15113:
  005c5	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  005c8	8a 11		 mov	 dl, BYTE PTR [ecx]
  005ca	88 55 f6	 mov	 BYTE PTR tv72[ebp], dl
$L15114:
  005cd	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp]
  005d0	8a 4d f6	 mov	 cl, BYTE PTR tv72[ebp]
  005d3	88 08		 mov	 BYTE PTR [eax], cl

; 182  : 		}
; 183  : 		else

  005d5	e9 f4 00 00 00	 jmp	 $L10918
$L10916:

; 184  : 		{
; 185  : 			char c;
; 186  : 			/* Do nothing if '%' is not followed by two hex digits. */
; 187  : 			if (!h[1] || !h[2] || !(isxdigit (h[1]) && isxdigit (h[2])))

  005da	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  005dd	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  005e1	85 c0		 test	 eax, eax
  005e3	74 47		 je	 SHORT $L10921
  005e5	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  005e8	0f be 51 02	 movsx	 edx, BYTE PTR [ecx+2]
  005ec	85 d2		 test	 edx, edx
  005ee	74 3c		 je	 SHORT $L10921
  005f0	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  005f3	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  005f7	8b f4		 mov	 esi, esp
  005f9	51		 push	 ecx
  005fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  00600	83 c4 04	 add	 esp, 4
  00603	3b f4		 cmp	 esi, esp
  00605	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0060a	85 c0		 test	 eax, eax
  0060c	74 1e		 je	 SHORT $L10921
  0060e	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  00611	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  00615	8b f4		 mov	 esi, esp
  00617	50		 push	 eax
  00618	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isxdigit
  0061e	83 c4 04	 add	 esp, 4
  00621	3b f4		 cmp	 esi, esp
  00623	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00628	85 c0		 test	 eax, eax
  0062a	75 02		 jne	 SHORT $L10920
$L10921:

; 188  : 				goto copychar;

  0062c	eb 86		 jmp	 SHORT $copychar$10917
$L10920:

; 189  : 			c = X2DIGITS_TO_NUM (h[1], h[2]);

  0062e	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  00631	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00635	83 fa 41	 cmp	 edx, 65			; 00000041H
  00638	7d 0f		 jge	 SHORT $L15115
  0063a	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  0063d	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00641	83 e9 30	 sub	 ecx, 48			; 00000030H
  00644	89 4d f0	 mov	 DWORD PTR tv133[ebp], ecx
  00647	eb 20		 jmp	 SHORT $L15116
$L15115:
  00649	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  0064c	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00650	8b f4		 mov	 esi, esp
  00652	50		 push	 eax
  00653	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00659	83 c4 04	 add	 esp, 4
  0065c	3b f4		 cmp	 esi, esp
  0065e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00663	83 e8 37	 sub	 eax, 55			; 00000037H
  00666	89 45 f0	 mov	 DWORD PTR tv133[ebp], eax
$L15116:
  00669	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  0066c	0f be 51 02	 movsx	 edx, BYTE PTR [ecx+2]
  00670	83 fa 41	 cmp	 edx, 65			; 00000041H
  00673	7d 0f		 jge	 SHORT $L15117
  00675	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  00678	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  0067c	83 e9 30	 sub	 ecx, 48			; 00000030H
  0067f	89 4d ec	 mov	 DWORD PTR tv147[ebp], ecx
  00682	eb 20		 jmp	 SHORT $L15118
$L15117:
  00684	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  00687	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  0068b	8b f4		 mov	 esi, esp
  0068d	50		 push	 eax
  0068e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00694	83 c4 04	 add	 esp, 4
  00697	3b f4		 cmp	 esi, esp
  00699	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0069e	83 e8 37	 sub	 eax, 55			; 00000037H
  006a1	89 45 ec	 mov	 DWORD PTR tv147[ebp], eax
$L15118:
  006a4	8b 4d f0	 mov	 ecx, DWORD PTR tv133[ebp]
  006a7	c1 e1 04	 shl	 ecx, 4
  006aa	03 4d ec	 add	 ecx, DWORD PTR tv147[ebp]
  006ad	88 4d f7	 mov	 BYTE PTR _c$10919[ebp], cl

; 190  : 			/* Don't unescape %00 because there is no way to insert it
; 191  : 			*              into a C string without effectively truncating it. */
; 192  : 			if (c == '\0')

  006b0	0f be 55 f7	 movsx	 edx, BYTE PTR _c$10919[ebp]
  006b4	85 d2		 test	 edx, edx
  006b6	75 05		 jne	 SHORT $L10923

; 193  : 				goto copychar;

  006b8	e9 f7 fe ff ff	 jmp	 $copychar$10917
$L10923:

; 194  : 			*t = c;

  006bd	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp]
  006c0	8a 4d f7	 mov	 cl, BYTE PTR _c$10919[ebp]
  006c3	88 08		 mov	 BYTE PTR [eax], cl

; 195  : 			h += 2;

  006c5	8b 55 f8	 mov	 edx, DWORD PTR _h$[ebp]
  006c8	83 c2 02	 add	 edx, 2
  006cb	89 55 f8	 mov	 DWORD PTR _h$[ebp], edx
$L10918:

; 196  : 		}
; 197  : 	}

  006ce	e9 b6 fe ff ff	 jmp	 $L10914
$L10915:

; 198  : 	*t = '\0';

  006d3	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp]
  006d6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 199  : 
; 200  : 	return s;

  006d9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]

; 201  : }

  006dc	5e		 pop	 esi
  006dd	83 c4 14	 add	 esp, 20			; 00000014H
  006e0	3b ec		 cmp	 ebp, esp
  006e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006e7	8b e5		 mov	 esp, ebp
  006e9	5d		 pop	 ebp
  006ea	c3		 ret	 0
?decode@YL_URLEncoder@@SAPADPAD@Z ENDP			; YL_URLEncoder::decode
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T15128	DD	0ffffffffH
	DD	FLAT:$L15122
	DD	00H
	DD	FLAT:$L15121
$T15126	DD	019930520H
	DD	02H
	DD	FLAT:$T15128
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15123 = -44						; size = 4
$T15120 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15123[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15120[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15123[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15123[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15120[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15121:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15120[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15122:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15123[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15124
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15123[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15124:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15126
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15140	DD	0ffffffffH
	DD	FLAT:$L15134
	DD	00H
	DD	FLAT:$L15133
$T15138	DD	019930520H
	DD	02H
	DD	FLAT:$T15140
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15135 = -44						; size = 4
$T15132 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 31   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15135[ebp], 0

; 32   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15132[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15135[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15135[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15132[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 33   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15133:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15132[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15134:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15135[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15136
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15135[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15136:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15138
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15152	DD	0ffffffffH
	DD	FLAT:$L15146
	DD	00H
	DD	FLAT:$L15145
$T15150	DD	019930520H
	DD	02H
	DD	FLAT:$T15152
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT
tv78 = -52						; size = 4
tv83 = -48						; size = 4
$T15147 = -44						; size = 4
$T15144 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 41   : 	{	// return character + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15147[ebp], 0

; 42   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8a 45 0c	 mov	 al, BYTE PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	6a 01		 push	 1
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T15144[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 d0	 mov	 DWORD PTR tv83[ebp], eax
  0004e	8b 4d d0	 mov	 ecx, DWORD PTR tv83[ebp]
  00051	89 4d cc	 mov	 DWORD PTR tv78[ebp], ecx
  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00060	52		 push	 edx
  00061	8b 4d cc	 mov	 ecx, DWORD PTR tv78[ebp]
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b f4		 mov	 esi, esp
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b 45 d4	 mov	 eax, DWORD PTR $T15147[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 45 d4	 mov	 DWORD PTR $T15147[ebp], eax
  0008d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00091	8b f4		 mov	 esi, esp
  00093	8d 4d d8	 lea	 ecx, DWORD PTR $T15144[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	83 c4 34	 add	 esp, 52			; 00000034H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15145:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15144[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15146:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15147[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15148
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15147[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15148:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15150
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15164	DD	0ffffffffH
	DD	FLAT:$L15158
	DD	00H
	DD	FLAT:$L15157
$T15162	DD	019930520H
	DD	02H
	DD	FLAT:$T15164
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15159 = -44						; size = 4
$T15156 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15159[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15156[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15159[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15159[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15156[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15157:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15156[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15158:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15159[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15160
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15159[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15160:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15162
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15176	DD	0ffffffffH
	DD	FLAT:$L15170
	DD	00H
	DD	FLAT:$L15169
$T15174	DD	019930520H
	DD	02H
	DD	FLAT:$T15176
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15171 = -44						; size = 4
$T15168 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 61   : 	{	// return string + character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15171[ebp], 0

; 62   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15168[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8a 55 10	 mov	 dl, BYTE PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15171[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15171[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15168[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15169:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15168[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15170:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15171[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15172
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15171[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15172:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15174
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15188	DD	0ffffffffH
	DD	FLAT:$L15182
	DD	00H
	DD	FLAT:$L15181
$T15186	DD	019930520H
	DD	02H
	DD	FLAT:$T15188
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15183 = -44						; size = 4
$T15180 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15183[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15180[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15183[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15183[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15180[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15181:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15180[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15182:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15183[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15184
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15183[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15184:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15186
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15200	DD	0ffffffffH
	DD	FLAT:$L15194
	DD	00H
	DD	FLAT:$L15193
$T15198	DD	019930520H
	DD	02H
	DD	FLAT:$T15200
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15195 = -44						; size = 4
$T15192 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 31   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15195[ebp], 0

; 32   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15192[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15195[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15195[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15192[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 33   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15193:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15192[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15194:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15195[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15196
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15195[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15196:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15198
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15212	DD	0ffffffffH
	DD	FLAT:$L15206
	DD	00H
	DD	FLAT:$L15205
$T15210	DD	019930520H
	DD	02H
	DD	FLAT:$T15212
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
_TEXT	SEGMENT
tv78 = -52						; size = 4
tv83 = -48						; size = 4
$T15207 = -44						; size = 4
$T15204 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 2
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 41   : 	{	// return character + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15207[ebp], 0

; 42   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	66 8b 45 0c	 mov	 ax, WORD PTR __Left$[ebp]
  00039	50		 push	 eax
  0003a	6a 01		 push	 1
  0003c	8d 4d d8	 lea	 ecx, DWORD PTR $T15204[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	89 45 d0	 mov	 DWORD PTR tv83[ebp], eax
  0004f	8b 4d d0	 mov	 ecx, DWORD PTR tv83[ebp]
  00052	89 4d cc	 mov	 DWORD PTR tv78[ebp], ecx
  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005c	8b f4		 mov	 esi, esp
  0005e	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00061	52		 push	 edx
  00062	8b 4d cc	 mov	 ecx, DWORD PTR tv78[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b f4		 mov	 esi, esp
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b 45 d4	 mov	 eax, DWORD PTR $T15207[ebp]
  00088	83 c8 01	 or	 eax, 1
  0008b	89 45 d4	 mov	 DWORD PTR $T15207[ebp], eax
  0008e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00092	8b f4		 mov	 esi, esp
  00094	8d 4d d8	 lea	 ecx, DWORD PTR $T15204[ebp]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	83 c4 34	 add	 esp, 52			; 00000034H
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15205:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15204[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15206:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15207[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15208
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15207[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15208:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15210
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15224	DD	0ffffffffH
	DD	FLAT:$L15218
	DD	00H
	DD	FLAT:$L15217
$T15222	DD	019930520H
	DD	02H
	DD	FLAT:$T15224
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15219 = -44						; size = 4
$T15216 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15219[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15216[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T15219[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T15219[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T15216[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15217:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15216[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15218:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15219[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15220
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15219[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15220:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15222
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15236	DD	0ffffffffH
	DD	FLAT:$L15230
	DD	00H
	DD	FLAT:$L15229
$T15234	DD	019930520H
	DD	02H
	DD	FLAT:$T15236
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T15231 = -44						; size = 4
$T15228 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 2
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 61   : 	{	// return string + character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T15231[ebp], 0

; 62   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T15228[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	66 8b 55 10	 mov	 dx, WORD PTR __Right$[ebp]
  0005f	52		 push	 edx
  00060	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b f4		 mov	 esi, esp
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b 45 d4	 mov	 eax, DWORD PTR $T15231[ebp]
  00086	83 c8 01	 or	 eax, 1
  00089	89 45 d4	 mov	 DWORD PTR $T15231[ebp], eax
  0008c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00090	8b f4		 mov	 esi, esp
  00092	8d 4d d8	 lea	 ecx, DWORD PTR $T15228[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	}

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	83 c4 34	 add	 esp, 52			; 00000034H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15229:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T15228[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15230:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T15231[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L15232
  0001e	83 65 d4 fe	 and	 DWORD PTR $T15231[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L15232:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15234
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?to_char_type@?$char_traits@D@std@@SADABH@Z:NEAR
EXTRN	__imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:NEAR
EXTRN	__imp_?eof@?$char_traits@D@std@@SAHXZ:NEAR
EXTRN	__imp_??1locale@std@@QAE@XZ:NEAR
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:NEAR
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:NEAR
EXTRN	__imp_?width@ios_base@std@@QBEHXZ:NEAR
EXTRN	__imp_?width@ios_base@std@@QAEHH@Z:NEAR
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:NEAR
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:NEAR
EXTRN	__imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB:DWORD
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z:NEAR
EXTRN	__imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15256	DD	0ffffffffH
	DD	FLAT:$L15247
	DD	00H
	DD	FLAT:$L15248
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T15258	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L15246
$T15257	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T15258
$T15250	DD	019930520H
	DD	04H
	DD	FLAT:$T15256
	DD	01H
	DD	FLAT:$T15257
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv207 = -128						; size = 1
tv206 = -127						; size = 1
tv205 = -126						; size = 1
tv204 = -125						; size = 1
tv203 = -124						; size = 4
tv202 = -120						; size = 4
tv201 = -116						; size = 4
tv200 = -112						; size = 4
tv199 = -108						; size = 4
tv198 = -104						; size = 4
tv135 = -100						; size = 4
tv197 = -96						; size = 4
tv196 = -92						; size = 4
tv195 = -88						; size = 4
tv194 = -84						; size = 4
tv189 = -80						; size = 4
tv65 = -76						; size = 4
$T15244 = -72						; size = 4
$T15243 = -68						; size = 4
$T15240 = -64						; size = 4
__Meta$13812 = -56					; size = 4
__Size$13809 = -48					; size = 4
__Ctype_fac$13806 = -44					; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 425  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00022	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 426  : 	typedef ctype<_Elem> _Ctype;
; 427  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 428  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 429  : 	typedef typename _Mystr::size_type _Mysizt;
; 430  : 
; 431  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 432  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 433  : 	const typename _Myis::sentry _Ok(_Istr);

  0003c	6a 00		 push	 0
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 434  : 
; 435  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 87 02 00
	00		 je	 $L15245

; 436  : 		{	// state okay, extract characters
; 437  : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00064	8b f4		 mov	 esi, esp
  00066	8d 55 c0	 lea	 edx, DWORD PTR $T15240[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00087	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]
  0008a	89 45 b0	 mov	 DWORD PTR tv189[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00091	8b 4d b0	 mov	 ecx, DWORD PTR tv189[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 d4	 mov	 DWORD PTR __Ctype_fac$13806[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a4	8b f4		 mov	 esi, esp
  000a6	8d 4d c0	 lea	 ecx, DWORD PTR $T15240[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 		_Str.erase();

  000b6	8b f4		 mov	 esi, esp
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 
; 440  : 		_TRY_IO_BEGIN

  000d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 		_Mysizt _Size = 0 < _Istr.width()
; 442  : 			&& (_Mysizt)_Istr.width() < _Str.max_size()
; 443  : 				? (_Mysizt)_Istr.width() : _Str.max_size();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000df	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000e2	8b f4		 mov	 esi, esp
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 ac	 mov	 DWORD PTR tv194[ebp], eax
  000f4	83 7d ac 00	 cmp	 DWORD PTR tv194[ebp], 0
  000f8	7e 61		 jle	 SHORT $L15241
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00102	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00105	8b f4		 mov	 esi, esp
  00107	8b ca		 mov	 ecx, edx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 a8	 mov	 DWORD PTR tv195[ebp], eax
  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 45 a4	 mov	 DWORD PTR tv196[ebp], eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR tv195[ebp]
  00131	3b 45 a4	 cmp	 eax, DWORD PTR tv196[ebp]
  00134	73 25		 jae	 SHORT $L15241
  00136	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0013e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	89 45 a0	 mov	 DWORD PTR tv197[ebp], eax
  00153	8b 45 a0	 mov	 eax, DWORD PTR tv197[ebp]
  00156	89 45 9c	 mov	 DWORD PTR tv135[ebp], eax
  00159	eb 1b		 jmp	 SHORT $L15242
$L15241:
  0015b	8b f4		 mov	 esi, esp
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 45 98	 mov	 DWORD PTR tv198[ebp], eax
  00170	8b 4d 98	 mov	 ecx, DWORD PTR tv198[ebp]
  00173	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$L15242:
  00176	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00179	89 55 d0	 mov	 DWORD PTR __Size$13809[ebp], edx

; 444  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0017c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00184	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00187	8b f4		 mov	 esi, esp
  00189	8b ca		 mov	 ecx, edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00198	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  0019b	8b f4		 mov	 esi, esp
  0019d	8b 4d 94	 mov	 ecx, DWORD PTR tv199[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	89 45 90	 mov	 DWORD PTR tv200[ebp], eax
  001b0	8b 45 90	 mov	 eax, DWORD PTR tv200[ebp]
  001b3	89 45 c8	 mov	 DWORD PTR __Meta$13812[ebp], eax

; 445  : 
; 446  : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001b6	eb 41		 jmp	 SHORT $L13813
$L13814:
  001b8	8b 4d d0	 mov	 ecx, DWORD PTR __Size$13809[ebp]
  001bb	83 e9 01	 sub	 ecx, 1
  001be	89 4d d0	 mov	 DWORD PTR __Size$13809[ebp], ecx
  001c1	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001c4	8b 02		 mov	 eax, DWORD PTR [edx]
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001c9	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  001cc	8b f4		 mov	 esi, esp
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001d4	3b f4		 cmp	 esi, esp
  001d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001db	89 45 8c	 mov	 DWORD PTR tv201[ebp], eax
  001de	8b f4		 mov	 esi, esp
  001e0	8b 4d 8c	 mov	 ecx, DWORD PTR tv201[ebp]
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001e9	3b f4		 cmp	 esi, esp
  001eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f0	89 45 88	 mov	 DWORD PTR tv202[ebp], eax
  001f3	8b 4d 88	 mov	 ecx, DWORD PTR tv202[ebp]
  001f6	89 4d c8	 mov	 DWORD PTR __Meta$13812[ebp], ecx
$L13813:
  001f9	83 7d d0 00	 cmp	 DWORD PTR __Size$13809[ebp], 0
  001fd	0f 86 c0 00 00
	00		 jbe	 $L13815

; 447  : 			if(_Traits::eq_int_type(_Traits::eof(), _Meta))

  00203	8b f4		 mov	 esi, esp
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	89 45 84	 mov	 DWORD PTR tv203[ebp], eax
  00215	8b 55 84	 mov	 edx, DWORD PTR tv203[ebp]
  00218	89 55 bc	 mov	 DWORD PTR $T15243[ebp], edx
  0021b	8b f4		 mov	 esi, esp
  0021d	8d 45 c8	 lea	 eax, DWORD PTR __Meta$13812[ebp]
  00220	50		 push	 eax
  00221	8d 4d bc	 lea	 ecx, DWORD PTR $T15243[ebp]
  00224	51		 push	 ecx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0022b	83 c4 08	 add	 esp, 8
  0022e	3b f4		 cmp	 esi, esp
  00230	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00235	88 45 83	 mov	 BYTE PTR tv204[ebp], al
  00238	0f b6 55 83	 movzx	 edx, BYTE PTR tv204[ebp]
  0023c	85 d2		 test	 edx, edx
  0023e	74 0b		 je	 SHORT $L13817

; 448  : 				{	// end of file, quit
; 449  : 				_State |= ios_base::eofbit;

  00240	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00243	83 c8 01	 or	 eax, 1
  00246	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 450  : 				break;

  00249	eb 78		 jmp	 SHORT $L13815
$L13817:

; 451  : 				}
; 452  : 			else if (_Ctype_fac.is(_Ctype::space,
; 453  : 				_Traits::to_char_type(_Meta)))

  0024b	8b f4		 mov	 esi, esp
  0024d	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$13812[ebp]
  00250	51		 push	 ecx
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00257	83 c4 04	 add	 esp, 4
  0025a	3b f4		 cmp	 esi, esp
  0025c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00261	88 45 82	 mov	 BYTE PTR tv205[ebp], al
  00264	8b f4		 mov	 esi, esp
  00266	8a 55 82	 mov	 dl, BYTE PTR tv205[ebp]
  00269	52		 push	 edx
  0026a	6a 48		 push	 72			; 00000048H
  0026c	8b 4d d4	 mov	 ecx, DWORD PTR __Ctype_fac$13806[ebp]
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	88 45 81	 mov	 BYTE PTR tv206[ebp], al
  0027f	0f b6 45 81	 movzx	 eax, BYTE PTR tv206[ebp]
  00283	85 c0		 test	 eax, eax
  00285	74 02		 je	 SHORT $L13819

; 454  : 				break;	// whitespace, quit

  00287	eb 3a		 jmp	 SHORT $L13815
$L13819:

; 455  : 			else
; 456  : 				{	// add character to string
; 457  : 				_Str.append(1, _Traits::to_char_type(_Meta));

  00289	8b f4		 mov	 esi, esp
  0028b	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$13812[ebp]
  0028e	51		 push	 ecx
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00295	83 c4 04	 add	 esp, 4
  00298	3b f4		 cmp	 esi, esp
  0029a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029f	88 45 80	 mov	 BYTE PTR tv207[ebp], al
  002a2	8b f4		 mov	 esi, esp
  002a4	8a 55 80	 mov	 dl, BYTE PTR tv207[ebp]
  002a7	52		 push	 edx
  002a8	6a 01		 push	 1
  002aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
  002b3	3b f4		 cmp	 esi, esp
  002b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 				_Changed = true;

  002ba	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 459  : 				}

  002be	e9 f5 fe ff ff	 jmp	 $L13814
$L13815:
  002c3	eb 26		 jmp	 SHORT $L15245
$L15246:

; 460  : 		_CATCH_IO_(_Istr)

  002c5	8b f4		 mov	 esi, esp
  002c7	6a 01		 push	 1
  002c9	6a 04		 push	 4
  002cb	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d0	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002d3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d6	8b ca		 mov	 ecx, edx
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002de	3b f4		 cmp	 esi, esp
  002e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e5	b8 00 00 00 00	 mov	 eax, $L15245
  002ea	c3		 ret	 0
$L15245:
  002eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 461  : 		}
; 462  : 
; 463  : 	_Istr.width(0);

  002f2	8b f4		 mov	 esi, esp
  002f4	6a 00		 push	 0
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b ca		 mov	 ecx, edx
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	if (!_Changed)

  00310	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00314	85 c0		 test	 eax, eax
  00316	75 09		 jne	 SHORT $L13821

; 465  : 		_State |= ios_base::failbit;

  00318	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0031b	83 c9 02	 or	 ecx, 2
  0031e	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L13821:

; 466  : 	_Istr.setstate(_State);

  00321	8b f4		 mov	 esi, esp
  00323	6a 00		 push	 0
  00325	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00328	52		 push	 edx
  00329	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0032c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00331	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00334	8b ca		 mov	 ecx, edx
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0033c	3b f4		 cmp	 esi, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	return (_Istr);

  00343	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00346	89 45 b8	 mov	 DWORD PTR $T15244[ebp], eax
  00349	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00350	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00353	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00358	8b 45 b8	 mov	 eax, DWORD PTR $T15244[ebp]

; 468  : 	}

  0035b	52		 push	 edx
  0035c	8b cd		 mov	 ecx, ebp
  0035e	50		 push	 eax
  0035f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15255
  00365	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0036a	58		 pop	 eax
  0036b	5a		 pop	 edx
  0036c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0036f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00376	5f		 pop	 edi
  00377	5e		 pop	 esi
  00378	5b		 pop	 ebx
  00379	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0037f	3b ec		 cmp	 ebp, esp
  00381	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00386	8b e5		 mov	 esp, ebp
  00388	5d		 pop	 ebp
  00389	c3		 ret	 0
$L15255:
  0038a	02 00 00 00	 DD	 2
  0038e	00 00 00 00	 DD	 $L15254
$L15254:
  00392	dc ff ff ff	 DD	 -36			; ffffffdcH
  00396	08 00 00 00	 DD	 8
  0039a	00 00 00 00	 DD	 $L15251
  0039e	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003a2	04 00 00 00	 DD	 4
  003a6	00 00 00 00	 DD	 $L15252
$L15252:
  003aa	5f		 DB	 95			; 0000005fH
  003ab	4d		 DB	 77			; 0000004dH
  003ac	65		 DB	 101			; 00000065H
  003ad	74		 DB	 116			; 00000074H
  003ae	61		 DB	 97			; 00000061H
  003af	00		 DB	 0
$L15251:
  003b0	5f		 DB	 95			; 0000005fH
  003b1	4f		 DB	 79			; 0000004fH
  003b2	6b		 DB	 107			; 0000006bH
  003b3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15247:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
$L15248:
  00008	8b f4		 mov	 esi, esp
  0000a	8d 4d c0	 lea	 ecx, DWORD PTR $T15240[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  00013	3b f4		 cmp	 esi, esp
  00015	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15250
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\istream
xdata$x	SEGMENT
$T15268	DD	0ffffffffH
	DD	FLAT:$L15264
$T15266	DD	019930520H
	DD	01H
	DD	FLAT:$T15268
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 72   : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00037	8b f4		 mov	 esi, esp
  00039	8a 4d 0c	 mov	 cl, BYTE PTR __Noskip$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 74   : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00069	5e		 pop	 esi
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15264:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15266
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 77   : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 79   : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 58   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 			if (_Myistr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L12172

; 60   : 				_Myistr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L12172:

; 61   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 52   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : 			if (_Myistr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L13145

; 54   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13145:

; 55   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@@
PUBLIC	__CTA2?AVbad_cast@@
PUBLIC	??_R0?AVbad_cast@@@8				; bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_??0bad_cast@@QAE@PBD@Z:NEAR
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:NEAR
EXTRN	__imp_?_Incref@facet@locale@std@@QAEXXZ:NEAR
EXTRN	__imp_?_Register@facet@locale@std@@QAEXXZ:NEAR
EXTRN	__imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z:NEAR
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:NEAR
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:NEAR
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??0bad_cast@@QAE@ABV0@@Z:NEAR			; bad_cast::bad_cast
EXTRN	??1bad_cast@@UAE@XZ:NEAR			; bad_cast::~bad_cast
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z:NEAR
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15286	DD	0ffffffffH
	DD	FLAT:$L15278
$T15280	DD	019930520H
	DD	01H
	DD	FLAT:$T15286
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT
__TI2?AVbad_cast@@ DD 00H
	DD	FLAT:??1bad_cast@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@@
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@@@8 DD FLAT:??_7type_info@@6B@		; bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T15277 = -64						; size = 4
$T15275 = -60						; size = 12
__Pfmod$13735 = -48					; size = 4
__Pf$ = -44						; size = 4
__Id$ = -40						; size = 4
__Psave$ = -32						; size = 4
__Lock$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC NEAR ; std::use_facet<std::ctype<char> >, COMDAT

; 315  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00020	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 316  : 	_Lockit _Lock(_LOCK_LOCALE);	// the thread lock, make get atomic

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 317  : 	const locale::facet *_Psave =
; 318  : 		_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0004c	89 45 e0	 mov	 DWORD PTR __Psave$[ebp], eax

; 319  : 
; 320  : 	size_t _Id = _Facet::id;

  0004f	8b f4		 mov	 esi, esp
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	89 45 d8	 mov	 DWORD PTR __Id$[ebp], eax

; 321  : 	const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00067	8b f4		 mov	 esi, esp
  00069	8b 4d d8	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR __Pf$[ebp], eax

; 322  : 
; 323  : 	if (_Pf != 0)

  00080	83 7d d4 00	 cmp	 DWORD PTR __Pf$[ebp], 0
  00084	74 05		 je	 SHORT $L13718

; 324  : 		;	// got facet from locale
; 325  : 	else if (_Psave != 0)

  00086	e9 86 00 00 00	 jmp	 $L13719
$L13718:
  0008b	83 7d e0 00	 cmp	 DWORD PTR __Psave$[ebp], 0
  0008f	74 08		 je	 SHORT $L13720

; 326  : 		_Pf = _Psave;	// lazy facet already allocated

  00091	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  00094	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 327  : 	else if (_Facet::_Getcat(&_Psave) == (size_t)(-1))

  00097	eb 78		 jmp	 SHORT $L13719
$L13720:
  00099	8b f4		 mov	 esi, esp
  0009b	8d 45 e0	 lea	 eax, DWORD PTR __Psave$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 25		 jne	 SHORT $L13723

; 328  : 
; 329  :  #if _HAS_EXCEPTIONS
; 330  : 		throw bad_cast();	// lazy disallowed

  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  000bb	8d 4d c4	 lea	 ecx, DWORD PTR $T15275[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@@QAE@PBD@Z
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:__TI2?AVbad_cast@@
  000d0	8d 4d c4	 lea	 ecx, DWORD PTR $T15275[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$L13723:

; 331  : 
; 332  :  #else /* _HAS_EXCEPTIONS */
; 333  : 		abort();	// lazy disallowed
; 334  :  #endif /* _HAS_EXCEPTIONS */
; 335  : 
; 336  : 	else
; 337  : 		{	// queue up lazy facet for destruction
; 338  : 		_Pf = _Psave;

  000d9	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  000dc	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 339  : 		_Facetptr<_Facet>::_Psave = _Psave;

  000df	8b 45 e0	 mov	 eax, DWORD PTR __Psave$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 340  : 
; 341  : 		locale::facet *_Pfmod = (_Facet *)_Psave;

  000e7	8b 4d e0	 mov	 ecx, DWORD PTR __Psave$[ebp]
  000ea	89 4d d0	 mov	 DWORD PTR __Pfmod$13735[ebp], ecx

; 342  : 		_Pfmod->_Incref();

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$13735[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Pfmod->_Register();

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$13735[ebp]
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Register@facet@locale@std@@QAEXXZ
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13719:

; 344  : 		}
; 345  : 
; 346  : 	return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00111	8b 55 d4	 mov	 edx, DWORD PTR __Pf$[ebp]
  00114	89 55 c0	 mov	 DWORD PTR $T15277[ebp], edx
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 45 c0	 mov	 eax, DWORD PTR $T15277[ebp]
$L15274:

; 347  : 	}

  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15285
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	83 c4 40	 add	 esp, 64			; 00000040H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$L15285:
  0015e	02 00 00 00	 DD	 2
  00162	00 00 00 00	 DD	 $L15284
$L15284:
  00166	ec ff ff ff	 DD	 -20			; ffffffecH
  0016a	04 00 00 00	 DD	 4
  0016e	00 00 00 00	 DD	 $L15281
  00172	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00176	04 00 00 00	 DD	 4
  0017a	00 00 00 00	 DD	 $L15282
$L15282:
  0017e	5f		 DB	 95			; 0000005fH
  0017f	50		 DB	 80			; 00000050H
  00180	73		 DB	 115			; 00000073H
  00181	61		 DB	 97			; 00000061H
  00182	76		 DB	 118			; 00000076H
  00183	65		 DB	 101			; 00000065H
  00184	00		 DB	 0
$L15281:
  00185	5f		 DB	 95			; 0000005fH
  00186	4c		 DB	 76			; 0000004cH
  00187	6f		 DB	 111			; 0000006fH
  00188	63		 DB	 99			; 00000063H
  00189	6b		 DB	 107			; 0000006bH
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15278:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15280
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 528  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 529  : 	return (getline(_Istr, _Str, _Istr.widen('\n')));

  00004	8b f4		 mov	 esi, esp
  00006	6a 0a		 push	 10			; 0000000aH
  00008	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00010	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00013	8b ca		 mov	 ecx, edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	50		 push	 eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	}

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?to_int_type@?$char_traits@D@std@@SAHABD@Z:NEAR
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15305	DD	0ffffffffH
	DD	FLAT:$L15296
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T15307	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L15295
$T15306	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T15307
$T15298	DD	019930520H
	DD	03H
	DD	FLAT:$T15305
	DD	01H
	DD	FLAT:$T15306
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv175 = -113						; size = 1
tv174 = -112						; size = 4
tv173 = -108						; size = 4
tv172 = -104						; size = 4
tv171 = -98						; size = 1
tv170 = -97						; size = 1
tv169 = -96						; size = 4
tv168 = -92						; size = 4
tv167 = -88						; size = 4
tv166 = -84						; size = 4
tv165 = -80						; size = 4
tv65 = -76						; size = 4
$T15293 = -72						; size = 4
$T15292 = -68						; size = 4
__Meta$13832 = -60					; size = 4
__Metadelim$13831 = -48					; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC NEAR ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 477  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 64	 sub	 esp, 100		; 00000064H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00022	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 478  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 479  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 480  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 481  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003c	6a 01		 push	 1
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 482  : 
; 483  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 f6 01 00
	00		 je	 $L15294

; 484  : 		{	// state okay, extract characters
; 485  : 		_TRY_IO_BEGIN

  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 486  : 		_Str.erase();

  00068	8b f4		 mov	 esi, esp
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  : 		const typename _Traits::int_type _Metadelim =
; 488  : 			_Traits::to_int_type(_Delim);

  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_int_type@?$char_traits@D@std@@SAHABD@Z
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0009e	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  000a1	89 55 d0	 mov	 DWORD PTR __Metadelim$13831[ebp], edx

; 489  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a4	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000ac	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000af	8b f4		 mov	 esi, esp
  000b1	8b ca		 mov	 ecx, edx
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	89 45 b0	 mov	 DWORD PTR tv165[ebp], eax
  000c3	8b f4		 mov	 esi, esp
  000c5	8b 4d b0	 mov	 ecx, DWORD PTR tv165[ebp]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	89 45 ac	 mov	 DWORD PTR tv166[ebp], eax
  000d8	8b 45 ac	 mov	 eax, DWORD PTR tv166[ebp]
  000db	89 45 c4	 mov	 DWORD PTR __Meta$13832[ebp], eax

; 490  : 
; 491  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000de	eb 38		 jmp	 SHORT $L13833
$L13834:
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e8	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000eb	8b f4		 mov	 esi, esp
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	89 45 a8	 mov	 DWORD PTR tv167[ebp], eax
  000fd	8b f4		 mov	 esi, esp
  000ff	8b 4d a8	 mov	 ecx, DWORD PTR tv167[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  00108	3b f4		 cmp	 esi, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	89 45 a4	 mov	 DWORD PTR tv168[ebp], eax
  00112	8b 45 a4	 mov	 eax, DWORD PTR tv168[ebp]
  00115	89 45 c4	 mov	 DWORD PTR __Meta$13832[ebp], eax
$L13833:

; 492  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00118	8b f4		 mov	 esi, esp
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	89 45 a0	 mov	 DWORD PTR tv169[ebp], eax
  0012a	8b 4d a0	 mov	 ecx, DWORD PTR tv169[ebp]
  0012d	89 4d bc	 mov	 DWORD PTR $T15292[ebp], ecx
  00130	8b f4		 mov	 esi, esp
  00132	8d 55 c4	 lea	 edx, DWORD PTR __Meta$13832[ebp]
  00135	52		 push	 edx
  00136	8d 45 bc	 lea	 eax, DWORD PTR $T15292[ebp]
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00140	83 c4 08	 add	 esp, 8
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	88 45 9f	 mov	 BYTE PTR tv170[ebp], al
  0014d	0f b6 4d 9f	 movzx	 ecx, BYTE PTR tv170[ebp]
  00151	85 c9		 test	 ecx, ecx
  00153	74 0e		 je	 SHORT $L13837

; 493  : 				{	// end of file, quit
; 494  : 				_State |= ios_base::eofbit;

  00155	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00158	83 ca 01	 or	 edx, 1
  0015b	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 495  : 				break;

  0015e	e9 d1 00 00 00	 jmp	 $L13835
$L13837:

; 496  : 				}
; 497  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  00163	8b f4		 mov	 esi, esp
  00165	8d 45 d0	 lea	 eax, DWORD PTR __Metadelim$13831[ebp]
  00168	50		 push	 eax
  00169	8d 4d c4	 lea	 ecx, DWORD PTR __Meta$13832[ebp]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00173	83 c4 08	 add	 esp, 8
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	88 45 9e	 mov	 BYTE PTR tv171[ebp], al
  00180	0f b6 55 9e	 movzx	 edx, BYTE PTR tv171[ebp]
  00184	85 d2		 test	 edx, edx
  00186	74 37		 je	 SHORT $L13839

; 498  : 				{	// got a delimiter, discard it and quit
; 499  : 				_Changed = true;

  00188	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 500  : 				_Istr.rdbuf()->sbumpc();

  0018c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0018f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00191	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00194	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00197	8b f4		 mov	 esi, esp
  00199	8b ca		 mov	 ecx, edx
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a1	3b f4		 cmp	 esi, esp
  001a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a8	89 45 98	 mov	 DWORD PTR tv172[ebp], eax
  001ab	8b f4		 mov	 esi, esp
  001ad	8b 4d 98	 mov	 ecx, DWORD PTR tv172[ebp]
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  : 				break;

  001bd	eb 75		 jmp	 SHORT $L13835
$L13839:

; 502  : 				}
; 503  : 			else if (_Str.max_size() <= _Str.size())

  001bf	8b f4		 mov	 esi, esp
  001c1	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  001ca	3b f4		 cmp	 esi, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d1	89 45 94	 mov	 DWORD PTR tv173[ebp], eax
  001d4	8b f4		 mov	 esi, esp
  001d6	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  001df	3b f4		 cmp	 esi, esp
  001e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e6	89 45 90	 mov	 DWORD PTR tv174[ebp], eax
  001e9	8b 45 94	 mov	 eax, DWORD PTR tv173[ebp]
  001ec	3b 45 90	 cmp	 eax, DWORD PTR tv174[ebp]
  001ef	77 0b		 ja	 SHORT $L13841

; 504  : 				{	// string too large, quit
; 505  : 				_State |= ios_base::failbit;

  001f1	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  001f4	83 c9 02	 or	 ecx, 2
  001f7	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 506  : 				break;

  001fa	eb 38		 jmp	 SHORT $L13835
$L13841:

; 507  : 				}
; 508  : 			else
; 509  : 				{	// got a character, add it to string
; 510  : 				_Str += _Traits::to_char_type(_Meta);

  001fc	8b f4		 mov	 esi, esp
  001fe	8d 55 c4	 lea	 edx, DWORD PTR __Meta$13832[ebp]
  00201	52		 push	 edx
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00208	83 c4 04	 add	 esp, 4
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	88 45 8f	 mov	 BYTE PTR tv175[ebp], al
  00215	8b f4		 mov	 esi, esp
  00217	8a 45 8f	 mov	 al, BYTE PTR tv175[ebp]
  0021a	50		 push	 eax
  0021b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
  00224	3b f4		 cmp	 esi, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 511  : 				_Changed = true;

  0022b	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 512  : 				}

  0022f	e9 ac fe ff ff	 jmp	 $L13834
$L13835:
  00234	eb 24		 jmp	 SHORT $L15294
$L15295:

; 513  : 		_CATCH_IO_(_Istr)

  00236	8b f4		 mov	 esi, esp
  00238	6a 01		 push	 1
  0023a	6a 04		 push	 4
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0023f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00241	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00244	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0024d	3b f4		 cmp	 esi, esp
  0024f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00254	b8 00 00 00 00	 mov	 eax, $L15294
  00259	c3		 ret	 0
$L15294:
  0025a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 514  : 		}
; 515  : 
; 516  : 	if (!_Changed)

  00261	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00265	85 c0		 test	 eax, eax
  00267	75 09		 jne	 SHORT $L13843

; 517  : 		_State |= ios_base::failbit;

  00269	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0026c	83 c9 02	 or	 ecx, 2
  0026f	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L13843:

; 518  : 	_Istr.setstate(_State);

  00272	8b f4		 mov	 esi, esp
  00274	6a 00		 push	 0
  00276	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00279	52		 push	 edx
  0027a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0027d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00282	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00285	8b ca		 mov	 ecx, edx
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0028d	3b f4		 cmp	 esi, esp
  0028f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  : 	return (_Istr);

  00294	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00297	89 45 b8	 mov	 DWORD PTR $T15293[ebp], eax
  0029a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002a1	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  002a9	8b 45 b8	 mov	 eax, DWORD PTR $T15293[ebp]

; 520  : 	}

  002ac	52		 push	 edx
  002ad	8b cd		 mov	 ecx, ebp
  002af	50		 push	 eax
  002b0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15304
  002b6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002bb	58		 pop	 eax
  002bc	5a		 pop	 edx
  002bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002c7	5f		 pop	 edi
  002c8	5e		 pop	 esi
  002c9	5b		 pop	 ebx
  002ca	83 c4 74	 add	 esp, 116		; 00000074H
  002cd	3b ec		 cmp	 ebp, esp
  002cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d4	8b e5		 mov	 esp, ebp
  002d6	5d		 pop	 ebp
  002d7	c3		 ret	 0
$L15304:
  002d8	03 00 00 00	 DD	 3
  002dc	00 00 00 00	 DD	 $L15303
$L15303:
  002e0	dc ff ff ff	 DD	 -36			; ffffffdcH
  002e4	08 00 00 00	 DD	 8
  002e8	00 00 00 00	 DD	 $L15299
  002ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002f0	04 00 00 00	 DD	 4
  002f4	00 00 00 00	 DD	 $L15300
  002f8	c4 ff ff ff	 DD	 -60			; ffffffc4H
  002fc	04 00 00 00	 DD	 4
  00300	00 00 00 00	 DD	 $L15301
$L15301:
  00304	5f		 DB	 95			; 0000005fH
  00305	4d		 DB	 77			; 0000004dH
  00306	65		 DB	 101			; 00000065H
  00307	74		 DB	 116			; 00000074H
  00308	61		 DB	 97			; 00000061H
  00309	00		 DB	 0
$L15300:
  0030a	5f		 DB	 95			; 0000005fH
  0030b	4d		 DB	 77			; 0000004dH
  0030c	65		 DB	 101			; 00000065H
  0030d	74		 DB	 116			; 00000074H
  0030e	61		 DB	 97			; 00000061H
  0030f	64		 DB	 100			; 00000064H
  00310	65		 DB	 101			; 00000065H
  00311	6c		 DB	 108			; 0000006cH
  00312	69		 DB	 105			; 00000069H
  00313	6d		 DB	 109			; 0000006dH
  00314	00		 DB	 0
$L15299:
  00315	5f		 DB	 95			; 0000005fH
  00316	4f		 DB	 79			; 0000004fH
  00317	6b		 DB	 107			; 0000006bH
  00318	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15296:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15298
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
EXTRN	__imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z:NEAR
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:NEAR
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:NEAR
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15329	DD	0ffffffffH
	DD	FLAT:$L15322
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T15331	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L15321
$T15330	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T15331
$T15324	DD	019930520H
	DD	03H
	DD	FLAT:$T15329
	DD	01H
	DD	FLAT:$T15330
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv221 = -137						; size = 1
tv220 = -136						; size = 4
tv219 = -132						; size = 4
tv218 = -128						; size = 4
tv217 = -122						; size = 1
tv216 = -121						; size = 1
tv215 = -120						; size = 4
tv214 = -116						; size = 4
tv213 = -112						; size = 4
tv212 = -108						; size = 4
tv211 = -101						; size = 1
tv210 = -100						; size = 4
tv209 = -96						; size = 4
tv208 = -92						; size = 4
tv207 = -85						; size = 1
tv83 = -84						; size = 4
tv81 = -80						; size = 4
$T15319 = -76						; size = 4
$T15318 = -72						; size = 4
$T15317 = -68						; size = 4
$T15316 = -64						; size = 4
$T15315 = -60						; size = 4
$T15314 = -56						; size = 4
$T15313 = -52						; size = 4
__Count$13866 = -48					; size = 4
__Ok$ = -40						; size = 8
__Pad$ = -28						; size = 4
__Size$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 538  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 7c	 sub	 esp, 124		; 0000007cH
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00025	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 539  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 540  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 541  : 	typedef typename _Mystr::size_type _Mysizt;
; 542  : 
; 543  : 	ios_base::iostate _State = ios_base::goodbit;

  00034	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 544  : 	_Mysizt _Size = _Str.size();

  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	89 45 e8	 mov	 DWORD PTR __Size$[ebp], eax

; 545  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 546  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  00050	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00058	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0005b	8b f4		 mov	 esi, esp
  0005d	8b ca		 mov	 ecx, edx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	85 c0		 test	 eax, eax
  0006e	7e 45		 jle	 SHORT $L15311
  00070	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00078	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0007b	8b f4		 mov	 esi, esp
  0007d	8b ca		 mov	 ecx, edx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	3b 45 e8	 cmp	 eax, DWORD PTR __Size$[ebp]
  0008f	76 24		 jbe	 SHORT $L15311
  00091	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00099	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009c	8b f4		 mov	 esi, esp
  0009e	8b ca		 mov	 ecx, edx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	2b 45 e8	 sub	 eax, DWORD PTR __Size$[ebp]
  000b0	89 45 b0	 mov	 DWORD PTR tv81[ebp], eax
  000b3	eb 07		 jmp	 SHORT $L15312
$L15311:
  000b5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L15312:
  000bc	8b 45 b0	 mov	 eax, DWORD PTR tv81[ebp]
  000bf	89 45 e4	 mov	 DWORD PTR __Pad$[ebp], eax

; 547  : 	const typename _Myos::sentry _Ok(_Ostr);

  000c2	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000c5	51		 push	 ecx
  000c6	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000c9	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 548  : 
; 549  : 	if (!_Ok)

  000d5	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000dd	0f b6 d0	 movzx	 edx, al
  000e0	85 d2		 test	 edx, edx
  000e2	75 0e		 jne	 SHORT $L13855

; 550  : 		_State |= ios_base::badbit;

  000e4	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000e7	83 c8 04	 or	 eax, 4
  000ea	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 551  : 	else

  000ed	e9 d8 02 00 00	 jmp	 $L15320
$L13855:

; 552  : 		{	// state okay, insert characters
; 553  : 	_TRY_IO_BEGIN

  000f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 554  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f6	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000fe	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00101	8b f4		 mov	 esi, esp
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	89 45 ac	 mov	 DWORD PTR tv83[ebp], eax
  00113	8b 45 ac	 mov	 eax, DWORD PTR tv83[ebp]
  00116	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011e	0f 84 bb 00 00
	00		 je	 $L13858

; 555  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00124	eb 09		 jmp	 SHORT $L13859
$L13860:
  00126	8b 4d e4	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00129	83 e9 01	 sub	 ecx, 1
  0012c	89 4d e4	 mov	 DWORD PTR __Pad$[ebp], ecx
$L13859:
  0012f	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00133	0f 86 a6 00 00
	00		 jbe	 $L13858

; 556  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 557  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00139	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0013c	8b 02		 mov	 eax, DWORD PTR [edx]
  0013e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00141	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00144	8b f4		 mov	 esi, esp
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0014c	3b f4		 cmp	 esi, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	88 45 ab	 mov	 BYTE PTR tv207[ebp], al
  00156	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00159	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0015e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00161	8b f4		 mov	 esi, esp
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00169	3b f4		 cmp	 esi, esp
  0016b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00170	89 45 a4	 mov	 DWORD PTR tv208[ebp], eax
  00173	8b f4		 mov	 esi, esp
  00175	8a 45 ab	 mov	 al, BYTE PTR tv207[ebp]
  00178	50		 push	 eax
  00179	8b 4d a4	 mov	 ecx, DWORD PTR tv208[ebp]
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	89 45 a0	 mov	 DWORD PTR tv209[ebp], eax
  0018c	8b 4d a0	 mov	 ecx, DWORD PTR tv209[ebp]
  0018f	89 4d cc	 mov	 DWORD PTR $T15313[ebp], ecx
  00192	8b f4		 mov	 esi, esp
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  0019a	3b f4		 cmp	 esi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	89 45 9c	 mov	 DWORD PTR tv210[ebp], eax
  001a4	8b 55 9c	 mov	 edx, DWORD PTR tv210[ebp]
  001a7	89 55 c8	 mov	 DWORD PTR $T15314[ebp], edx
  001aa	8b f4		 mov	 esi, esp
  001ac	8d 45 cc	 lea	 eax, DWORD PTR $T15313[ebp]
  001af	50		 push	 eax
  001b0	8d 4d c8	 lea	 ecx, DWORD PTR $T15314[ebp]
  001b3	51		 push	 ecx
  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  001ba	83 c4 08	 add	 esp, 8
  001bd	3b f4		 cmp	 esi, esp
  001bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c4	88 45 9b	 mov	 BYTE PTR tv211[ebp], al
  001c7	0f b6 55 9b	 movzx	 edx, BYTE PTR tv211[ebp]
  001cb	85 d2		 test	 edx, edx
  001cd	74 0b		 je	 SHORT $L13864

; 558  : 					{	// insertion failed, quit
; 559  : 					_State |= ios_base::badbit;

  001cf	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001d2	83 c8 04	 or	 eax, 4
  001d5	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 560  : 					break;

  001d8	eb 05		 jmp	 SHORT $L13858
$L13864:

; 561  : 					}
; 562  : 
; 563  : 		if (_State == ios_base::goodbit)

  001da	e9 47 ff ff ff	 jmp	 $L13860
$L13858:
  001df	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e3	0f 85 c2 00 00
	00		 jne	 $L13865

; 564  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001e9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Count$13866[ebp], 0
  001f0	eb 09		 jmp	 SHORT $L13867
$L13868:
  001f2	8b 4d d0	 mov	 ecx, DWORD PTR __Count$13866[ebp]
  001f5	83 c1 01	 add	 ecx, 1
  001f8	89 4d d0	 mov	 DWORD PTR __Count$13866[ebp], ecx
$L13867:
  001fb	8b 55 d0	 mov	 edx, DWORD PTR __Count$13866[ebp]
  001fe	3b 55 e8	 cmp	 edx, DWORD PTR __Size$[ebp]
  00201	0f 83 a4 00 00
	00		 jae	 $L13865

; 565  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 566  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  00207	8b f4		 mov	 esi, esp
  00209	8b 45 d0	 mov	 eax, DWORD PTR __Count$13866[ebp]
  0020c	50		 push	 eax
  0020d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
  00216	3b f4		 cmp	 esi, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021d	89 45 94	 mov	 DWORD PTR tv212[ebp], eax
  00220	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00223	8b 11		 mov	 edx, DWORD PTR [ecx]
  00225	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00228	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0022b	8b f4		 mov	 esi, esp
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00233	3b f4		 cmp	 esi, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	89 45 90	 mov	 DWORD PTR tv213[ebp], eax
  0023d	8b f4		 mov	 esi, esp
  0023f	8b 45 94	 mov	 eax, DWORD PTR tv212[ebp]
  00242	8a 08		 mov	 cl, BYTE PTR [eax]
  00244	51		 push	 ecx
  00245	8b 4d 90	 mov	 ecx, DWORD PTR tv213[ebp]
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00255	89 45 8c	 mov	 DWORD PTR tv214[ebp], eax
  00258	8b 55 8c	 mov	 edx, DWORD PTR tv214[ebp]
  0025b	89 55 c4	 mov	 DWORD PTR $T15315[ebp], edx
  0025e	8b f4		 mov	 esi, esp
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00266	3b f4		 cmp	 esi, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	89 45 88	 mov	 DWORD PTR tv215[ebp], eax
  00270	8b 45 88	 mov	 eax, DWORD PTR tv215[ebp]
  00273	89 45 c0	 mov	 DWORD PTR $T15316[ebp], eax
  00276	8b f4		 mov	 esi, esp
  00278	8d 4d c4	 lea	 ecx, DWORD PTR $T15315[ebp]
  0027b	51		 push	 ecx
  0027c	8d 55 c0	 lea	 edx, DWORD PTR $T15316[ebp]
  0027f	52		 push	 edx
  00280	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00286	83 c4 08	 add	 esp, 8
  00289	3b f4		 cmp	 esi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	88 45 87	 mov	 BYTE PTR tv216[ebp], al
  00293	0f b6 45 87	 movzx	 eax, BYTE PTR tv216[ebp]
  00297	85 c0		 test	 eax, eax
  00299	74 0b		 je	 SHORT $L13872

; 567  : 					{	// insertion failed, quit
; 568  : 					_State |= ios_base::badbit;

  0029b	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0029e	83 c9 04	 or	 ecx, 4
  002a1	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 569  : 					break;

  002a4	eb 05		 jmp	 SHORT $L13865
$L13872:

; 570  : 					}
; 571  : 
; 572  : 		if (_State == ios_base::goodbit)

  002a6	e9 47 ff ff ff	 jmp	 $L13868
$L13865:
  002ab	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  002af	0f 85 d1 00 00
	00		 jne	 $L13873

; 573  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002b5	eb 09		 jmp	 SHORT $L13874
$L13875:
  002b7	8b 55 e4	 mov	 edx, DWORD PTR __Pad$[ebp]
  002ba	83 ea 01	 sub	 edx, 1
  002bd	89 55 e4	 mov	 DWORD PTR __Pad$[ebp], edx
$L13874:
  002c0	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002c4	0f 86 bc 00 00
	00		 jbe	 $L13873

; 574  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 575  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  002ca	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d5	8b f4		 mov	 esi, esp
  002d7	8b ca		 mov	 ecx, edx
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002df	3b f4		 cmp	 esi, esp
  002e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e6	88 45 86	 mov	 BYTE PTR tv217[ebp], al
  002e9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ee	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f4	8b f4		 mov	 esi, esp
  002f6	8b ca		 mov	 ecx, edx
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002fe	3b f4		 cmp	 esi, esp
  00300	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00305	89 45 80	 mov	 DWORD PTR tv218[ebp], eax
  00308	8b f4		 mov	 esi, esp
  0030a	8a 45 86	 mov	 al, BYTE PTR tv217[ebp]
  0030d	50		 push	 eax
  0030e	8b 4d 80	 mov	 ecx, DWORD PTR tv218[ebp]
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00317	3b f4		 cmp	 esi, esp
  00319	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031e	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv219[ebp], eax
  00324	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv219[ebp]
  0032a	89 4d bc	 mov	 DWORD PTR $T15317[ebp], ecx
  0032d	8b f4		 mov	 esi, esp
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00335	3b f4		 cmp	 esi, esp
  00337	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033c	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], eax
  00342	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv220[ebp]
  00348	89 55 b8	 mov	 DWORD PTR $T15318[ebp], edx
  0034b	8b f4		 mov	 esi, esp
  0034d	8d 45 bc	 lea	 eax, DWORD PTR $T15317[ebp]
  00350	50		 push	 eax
  00351	8d 4d b8	 lea	 ecx, DWORD PTR $T15318[ebp]
  00354	51		 push	 ecx
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0035b	83 c4 08	 add	 esp, 8
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	88 85 77 ff ff
	ff		 mov	 BYTE PTR tv221[ebp], al
  0036b	0f b6 95 77 ff
	ff ff		 movzx	 edx, BYTE PTR tv221[ebp]
  00372	85 d2		 test	 edx, edx
  00374	74 0b		 je	 SHORT $L13879

; 576  : 					{	// insertion failed, quit
; 577  : 					_State |= ios_base::badbit;

  00376	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00379	83 c8 04	 or	 eax, 4
  0037c	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 578  : 					break;

  0037f	eb 05		 jmp	 SHORT $L13873
$L13879:

; 579  : 					}
; 580  : 		_Ostr.width(0);

  00381	e9 31 ff ff ff	 jmp	 $L13875
$L13873:
  00386	8b f4		 mov	 esi, esp
  00388	6a 00		 push	 0
  0038a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0038d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00392	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00395	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  0039b	3b f4		 cmp	 esi, esp
  0039d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a2	eb 26		 jmp	 SHORT $L15320
$L15321:

; 581  : 		_CATCH_IO_(_Ostr)

  003a4	8b f4		 mov	 esi, esp
  003a6	6a 01		 push	 1
  003a8	6a 04		 push	 4
  003aa	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  003af	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003b5	8b ca		 mov	 ecx, edx
  003b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003bd	3b f4		 cmp	 esi, esp
  003bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c4	b8 00 00 00 00	 mov	 eax, $L15320
  003c9	c3		 ret	 0
$L15320:
  003ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 		}
; 583  : 
; 584  : 	_Ostr.setstate(_State);

  003d1	8b f4		 mov	 esi, esp
  003d3	6a 00		 push	 0
  003d5	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  003d8	50		 push	 eax
  003d9	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  003de	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e1	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ea	3b f4		 cmp	 esi, esp
  003ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 585  : 	return (_Ostr);

  003f1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f4	89 45 b4	 mov	 DWORD PTR $T15319[ebp], eax
  003f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003fe	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00401	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00406	8b 45 b4	 mov	 eax, DWORD PTR $T15319[ebp]

; 586  : 	}

  00409	52		 push	 edx
  0040a	8b cd		 mov	 ecx, ebp
  0040c	50		 push	 eax
  0040d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15328
  00413	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00418	58		 pop	 eax
  00419	5a		 pop	 edx
  0041a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00424	5f		 pop	 edi
  00425	5e		 pop	 esi
  00426	5b		 pop	 ebx
  00427	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0042d	3b ec		 cmp	 ebp, esp
  0042f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00434	8b e5		 mov	 esp, ebp
  00436	5d		 pop	 ebp
  00437	c3		 ret	 0
$L15328:
  00438	01 00 00 00	 DD	 1
  0043c	00 00 00 00	 DD	 $L15327
$L15327:
  00440	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00444	08 00 00 00	 DD	 8
  00448	00 00 00 00	 DD	 $L15325
$L15325:
  0044c	5f		 DB	 95			; 0000005fH
  0044d	4f		 DB	 79			; 0000004fH
  0044e	6b		 DB	 107			; 0000006bH
  0044f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15322:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15324
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:NEAR
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:NEAR
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\ostream
xdata$x	SEGMENT
$T15339	DD	0ffffffffH
	DD	FLAT:$L15335
$T15337	DD	019930520H
	DD	01H
	DD	FLAT:$T15339
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $L13154
  00058	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00060	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00063	8b f4		 mov	 esi, esp
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	85 c0		 test	 eax, eax
  00074	74 2d		 je	 SHORT $L13154

; 90   : 				_Ostr.tie()->flush();

  00076	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0007e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00081	8b f4		 mov	 esi, esp
  00083	8b ca		 mov	 ecx, edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b f4		 mov	 esi, esp
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13154:

; 91   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ab	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ae	8b f4		 mov	 esi, esp
  000b0	8b ca		 mov	 ecx, edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 92   : 			}

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d9	5e		 pop	 esi
  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15335:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15337
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:NEAR
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15347	DD	0ffffffffH
	DD	FLAT:$L15343
$T15345	DD	019930520H
	DD	01H
	DD	FLAT:$T15347
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 
; 97   :  #if _HAS_EXCEPTIONS
; 98   : 			if (!uncaught_exception())

  0002b	8b f4		 mov	 esi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L13156

; 99   : 				this->_Myostr._Osfx();

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13156:

; 100  : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006e	5e		 pop	 esi
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15343:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15345
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 108  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 110  : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 68   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 69   : 			if (_Myostr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L13434

; 70   : 				_Myostr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13434:

; 71   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 74   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			if (_Myostr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L13437

; 76   : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13437:

; 77   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z:NEAR
EXTRN	__imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z:NEAR
EXTRN	__imp_?eof@?$char_traits@_W@std@@SAGXZ:NEAR
EXTRN	__imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z:NEAR
EXTRN	__imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ:NEAR
EXTRN	__imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB:DWORD
EXTRN	__imp_?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z:NEAR
EXTRN	__imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z:NEAR
EXTRN	__imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?is@?$ctype@_W@std@@QBE_NF_W@Z:NEAR
EXTRN	__imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
EXTRN	__imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T15370	DD	0ffffffffH
	DD	FLAT:$L15361
	DD	00H
	DD	FLAT:$L15362
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T15372	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L15360
$T15371	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T15372
$T15364	DD	019930520H
	DD	04H
	DD	FLAT:$T15370
	DD	01H
	DD	FLAT:$T15371
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
tv207 = -128						; size = 2
tv206 = -125						; size = 1
tv205 = -124						; size = 2
tv204 = -121						; size = 1
tv203 = -120						; size = 2
tv202 = -118						; size = 2
tv201 = -116						; size = 4
tv200 = -110						; size = 2
tv199 = -108						; size = 4
tv198 = -104						; size = 4
tv135 = -100						; size = 4
tv197 = -96						; size = 4
tv196 = -92						; size = 4
tv195 = -88						; size = 4
tv194 = -84						; size = 4
tv189 = -80						; size = 4
tv65 = -76						; size = 4
$T15358 = -72						; size = 4
$T15357 = -66						; size = 2
$T15354 = -64						; size = 4
__Meta$13896 = -56					; size = 2
__Size$13893 = -48					; size = 4
__Ctype_fac$13890 = -44					; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 425  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00022	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 426  : 	typedef ctype<_Elem> _Ctype;
; 427  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 428  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 429  : 	typedef typename _Mystr::size_type _Mysizt;
; 430  : 
; 431  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 432  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 433  : 	const typename _Myis::sentry _Ok(_Istr);

  0003c	6a 00		 push	 0
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 434  : 
; 435  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 94 02 00
	00		 je	 $L15359

; 436  : 		{	// state okay, extract characters
; 437  : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00064	8b f4		 mov	 esi, esp
  00066	8d 55 c0	 lea	 edx, DWORD PTR $T15354[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00087	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]
  0008a	89 45 b0	 mov	 DWORD PTR tv189[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00091	8b 4d b0	 mov	 ecx, DWORD PTR tv189[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 d4	 mov	 DWORD PTR __Ctype_fac$13890[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a4	8b f4		 mov	 esi, esp
  000a6	8d 4d c0	 lea	 ecx, DWORD PTR $T15354[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 		_Str.erase();

  000b6	8b f4		 mov	 esi, esp
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 
; 440  : 		_TRY_IO_BEGIN

  000d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 		_Mysizt _Size = 0 < _Istr.width()
; 442  : 			&& (_Mysizt)_Istr.width() < _Str.max_size()
; 443  : 				? (_Mysizt)_Istr.width() : _Str.max_size();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000df	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000e2	8b f4		 mov	 esi, esp
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 ac	 mov	 DWORD PTR tv194[ebp], eax
  000f4	83 7d ac 00	 cmp	 DWORD PTR tv194[ebp], 0
  000f8	7e 61		 jle	 SHORT $L15355
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00102	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00105	8b f4		 mov	 esi, esp
  00107	8b ca		 mov	 ecx, edx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 a8	 mov	 DWORD PTR tv195[ebp], eax
  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 45 a4	 mov	 DWORD PTR tv196[ebp], eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR tv195[ebp]
  00131	3b 45 a4	 cmp	 eax, DWORD PTR tv196[ebp]
  00134	73 25		 jae	 SHORT $L15355
  00136	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0013e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	89 45 a0	 mov	 DWORD PTR tv197[ebp], eax
  00153	8b 45 a0	 mov	 eax, DWORD PTR tv197[ebp]
  00156	89 45 9c	 mov	 DWORD PTR tv135[ebp], eax
  00159	eb 1b		 jmp	 SHORT $L15356
$L15355:
  0015b	8b f4		 mov	 esi, esp
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 45 98	 mov	 DWORD PTR tv198[ebp], eax
  00170	8b 4d 98	 mov	 ecx, DWORD PTR tv198[ebp]
  00173	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$L15356:
  00176	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00179	89 55 d0	 mov	 DWORD PTR __Size$13893[ebp], edx

; 444  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0017c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00184	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00187	8b f4		 mov	 esi, esp
  00189	8b ca		 mov	 ecx, edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00198	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  0019b	8b f4		 mov	 esi, esp
  0019d	8b 4d 94	 mov	 ecx, DWORD PTR tv199[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	66 89 45 92	 mov	 WORD PTR tv200[ebp], ax
  001b1	66 8b 45 92	 mov	 ax, WORD PTR tv200[ebp]
  001b5	66 89 45 c8	 mov	 WORD PTR __Meta$13896[ebp], ax

; 445  : 
; 446  : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001b9	eb 44		 jmp	 SHORT $L13897
$L13898:
  001bb	8b 4d d0	 mov	 ecx, DWORD PTR __Size$13893[ebp]
  001be	83 e9 01	 sub	 ecx, 1
  001c1	89 4d d0	 mov	 DWORD PTR __Size$13893[ebp], ecx
  001c4	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001c7	8b 02		 mov	 eax, DWORD PTR [edx]
  001c9	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001cc	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  001d7	3b f4		 cmp	 esi, esp
  001d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001de	89 45 8c	 mov	 DWORD PTR tv201[ebp], eax
  001e1	8b f4		 mov	 esi, esp
  001e3	8b 4d 8c	 mov	 ecx, DWORD PTR tv201[ebp]
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f3	66 89 45 8a	 mov	 WORD PTR tv202[ebp], ax
  001f7	66 8b 4d 8a	 mov	 cx, WORD PTR tv202[ebp]
  001fb	66 89 4d c8	 mov	 WORD PTR __Meta$13896[ebp], cx
$L13897:
  001ff	83 7d d0 00	 cmp	 DWORD PTR __Size$13893[ebp], 0
  00203	0f 86 c7 00 00
	00		 jbe	 $L13899

; 447  : 			if(_Traits::eq_int_type(_Traits::eof(), _Meta))

  00209	8b f4		 mov	 esi, esp
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00218	66 89 45 88	 mov	 WORD PTR tv203[ebp], ax
  0021c	66 8b 55 88	 mov	 dx, WORD PTR tv203[ebp]
  00220	66 89 55 be	 mov	 WORD PTR $T15357[ebp], dx
  00224	8b f4		 mov	 esi, esp
  00226	8d 45 c8	 lea	 eax, DWORD PTR __Meta$13896[ebp]
  00229	50		 push	 eax
  0022a	8d 4d be	 lea	 ecx, DWORD PTR $T15357[ebp]
  0022d	51		 push	 ecx
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00234	83 c4 08	 add	 esp, 8
  00237	3b f4		 cmp	 esi, esp
  00239	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023e	88 45 87	 mov	 BYTE PTR tv204[ebp], al
  00241	0f b6 55 87	 movzx	 edx, BYTE PTR tv204[ebp]
  00245	85 d2		 test	 edx, edx
  00247	74 0b		 je	 SHORT $L13901

; 448  : 				{	// end of file, quit
; 449  : 				_State |= ios_base::eofbit;

  00249	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0024c	83 c8 01	 or	 eax, 1
  0024f	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 450  : 				break;

  00252	eb 7c		 jmp	 SHORT $L13899
$L13901:

; 451  : 				}
; 452  : 			else if (_Ctype_fac.is(_Ctype::space,
; 453  : 				_Traits::to_char_type(_Meta)))

  00254	8b f4		 mov	 esi, esp
  00256	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$13896[ebp]
  00259	51		 push	 ecx
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  00260	83 c4 04	 add	 esp, 4
  00263	3b f4		 cmp	 esi, esp
  00265	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026a	66 89 45 84	 mov	 WORD PTR tv205[ebp], ax
  0026e	8b f4		 mov	 esi, esp
  00270	66 8b 55 84	 mov	 dx, WORD PTR tv205[ebp]
  00274	52		 push	 edx
  00275	6a 48		 push	 72			; 00000048H
  00277	8b 4d d4	 mov	 ecx, DWORD PTR __Ctype_fac$13890[ebp]
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@_W@std@@QBE_NF_W@Z
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	88 45 83	 mov	 BYTE PTR tv206[ebp], al
  0028a	0f b6 45 83	 movzx	 eax, BYTE PTR tv206[ebp]
  0028e	85 c0		 test	 eax, eax
  00290	74 02		 je	 SHORT $L13903

; 454  : 				break;	// whitespace, quit

  00292	eb 3c		 jmp	 SHORT $L13899
$L13903:

; 455  : 			else
; 456  : 				{	// add character to string
; 457  : 				_Str.append(1, _Traits::to_char_type(_Meta));

  00294	8b f4		 mov	 esi, esp
  00296	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$13896[ebp]
  00299	51		 push	 ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  002a0	83 c4 04	 add	 esp, 4
  002a3	3b f4		 cmp	 esi, esp
  002a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002aa	66 89 45 80	 mov	 WORD PTR tv207[ebp], ax
  002ae	8b f4		 mov	 esi, esp
  002b0	66 8b 55 80	 mov	 dx, WORD PTR tv207[ebp]
  002b4	52		 push	 edx
  002b5	6a 01		 push	 1
  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
  002c0	3b f4		 cmp	 esi, esp
  002c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 				_Changed = true;

  002c7	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 459  : 				}

  002cb	e9 eb fe ff ff	 jmp	 $L13898
$L13899:
  002d0	eb 26		 jmp	 SHORT $L15359
$L15360:

; 460  : 		_CATCH_IO_(_Istr)

  002d2	8b f4		 mov	 esi, esp
  002d4	6a 01		 push	 1
  002d6	6a 04		 push	 4
  002d8	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002db	8b 08		 mov	 ecx, DWORD PTR [eax]
  002dd	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002e0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	b8 00 00 00 00	 mov	 eax, $L15359
  002f7	c3		 ret	 0
$L15359:
  002f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 461  : 		}
; 462  : 
; 463  : 	_Istr.width(0);

  002ff	8b f4		 mov	 esi, esp
  00301	6a 00		 push	 0
  00303	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00306	8b 08		 mov	 ecx, DWORD PTR [eax]
  00308	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0030b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0030e	8b ca		 mov	 ecx, edx
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  00316	3b f4		 cmp	 esi, esp
  00318	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	if (!_Changed)

  0031d	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00321	85 c0		 test	 eax, eax
  00323	75 09		 jne	 SHORT $L13905

; 465  : 		_State |= ios_base::failbit;

  00325	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  00328	83 c9 02	 or	 ecx, 2
  0032b	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L13905:

; 466  : 	_Istr.setstate(_State);

  0032e	8b f4		 mov	 esi, esp
  00330	6a 00		 push	 0
  00332	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00335	52		 push	 edx
  00336	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0033e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00341	8b ca		 mov	 ecx, edx
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  00349	3b f4		 cmp	 esi, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	return (_Istr);

  00350	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00353	89 45 b8	 mov	 DWORD PTR $T15358[ebp], eax
  00356	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0035d	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00360	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00365	8b 45 b8	 mov	 eax, DWORD PTR $T15358[ebp]

; 468  : 	}

  00368	52		 push	 edx
  00369	8b cd		 mov	 ecx, ebp
  0036b	50		 push	 eax
  0036c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15369
  00372	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00377	58		 pop	 eax
  00378	5a		 pop	 edx
  00379	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00383	5f		 pop	 edi
  00384	5e		 pop	 esi
  00385	5b		 pop	 ebx
  00386	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0038c	3b ec		 cmp	 ebp, esp
  0038e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00393	8b e5		 mov	 esp, ebp
  00395	5d		 pop	 ebp
  00396	c3		 ret	 0
$L15369:
  00397	02 00 00 00	 DD	 2
  0039b	00 00 00 00	 DD	 $L15368
$L15368:
  0039f	dc ff ff ff	 DD	 -36			; ffffffdcH
  003a3	08 00 00 00	 DD	 8
  003a7	00 00 00 00	 DD	 $L15365
  003ab	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003af	02 00 00 00	 DD	 2
  003b3	00 00 00 00	 DD	 $L15366
$L15366:
  003b7	5f		 DB	 95			; 0000005fH
  003b8	4d		 DB	 77			; 0000004dH
  003b9	65		 DB	 101			; 00000065H
  003ba	74		 DB	 116			; 00000074H
  003bb	61		 DB	 97			; 00000061H
  003bc	00		 DB	 0
$L15365:
  003bd	5f		 DB	 95			; 0000005fH
  003be	4f		 DB	 79			; 0000004fH
  003bf	6b		 DB	 107			; 0000006bH
  003c0	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15361:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
$L15362:
  00008	8b f4		 mov	 esi, esp
  0000a	8d 4d c0	 lea	 ecx, DWORD PTR $T15354[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  00013	3b f4		 cmp	 esi, esp
  00015	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15364
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\istream
xdata$x	SEGMENT
$T15382	DD	0ffffffffH
	DD	FLAT:$L15378
$T15380	DD	019930520H
	DD	01H
	DD	FLAT:$T15382
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 72   : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00037	8b f4		 mov	 esi, esp
  00039	8a 4d 0c	 mov	 cl, BYTE PTR __Noskip$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 74   : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00069	5e		 pop	 esi
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15378:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15380
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 77   : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 79   : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 58   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 			if (_Myistr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L12179

; 60   : 				_Myistr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L12179:

; 61   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 52   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : 			if (_Myistr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L13148

; 54   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13148:

; 55   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
EXTRN	__imp_?id@?$ctype@_W@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z:NEAR
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15399	DD	0ffffffffH
	DD	FLAT:$L15391
$T15393	DD	019930520H
	DD	01H
	DD	FLAT:$T15399
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T15390 = -64						; size = 4
$T15389 = -60						; size = 12
__Pfmod$13763 = -48					; size = 4
__Pf$ = -44						; size = 4
__Id$ = -40						; size = 4
__Psave$ = -32						; size = 4
__Lock$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC NEAR ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 315  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00020	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 316  : 	_Lockit _Lock(_LOCK_LOCALE);	// the thread lock, make get atomic

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 317  : 	const locale::facet *_Psave =
; 318  : 		_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0004c	89 45 e0	 mov	 DWORD PTR __Psave$[ebp], eax

; 319  : 
; 320  : 	size_t _Id = _Facet::id;

  0004f	8b f4		 mov	 esi, esp
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@_W@std@@2V0locale@2@A
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	89 45 d8	 mov	 DWORD PTR __Id$[ebp], eax

; 321  : 	const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00067	8b f4		 mov	 esi, esp
  00069	8b 4d d8	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR __Pf$[ebp], eax

; 322  : 
; 323  : 	if (_Pf != 0)

  00080	83 7d d4 00	 cmp	 DWORD PTR __Pf$[ebp], 0
  00084	74 05		 je	 SHORT $L13754

; 324  : 		;	// got facet from locale
; 325  : 	else if (_Psave != 0)

  00086	e9 86 00 00 00	 jmp	 $L13755
$L13754:
  0008b	83 7d e0 00	 cmp	 DWORD PTR __Psave$[ebp], 0
  0008f	74 08		 je	 SHORT $L13756

; 326  : 		_Pf = _Psave;	// lazy facet already allocated

  00091	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  00094	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 327  : 	else if (_Facet::_Getcat(&_Psave) == (size_t)(-1))

  00097	eb 78		 jmp	 SHORT $L13755
$L13756:
  00099	8b f4		 mov	 esi, esp
  0009b	8d 45 e0	 lea	 eax, DWORD PTR __Psave$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 25		 jne	 SHORT $L13759

; 328  : 
; 329  :  #if _HAS_EXCEPTIONS
; 330  : 		throw bad_cast();	// lazy disallowed

  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  000bb	8d 4d c4	 lea	 ecx, DWORD PTR $T15389[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@@QAE@PBD@Z
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:__TI2?AVbad_cast@@
  000d0	8d 4d c4	 lea	 ecx, DWORD PTR $T15389[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$L13759:

; 331  : 
; 332  :  #else /* _HAS_EXCEPTIONS */
; 333  : 		abort();	// lazy disallowed
; 334  :  #endif /* _HAS_EXCEPTIONS */
; 335  : 
; 336  : 	else
; 337  : 		{	// queue up lazy facet for destruction
; 338  : 		_Pf = _Psave;

  000d9	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  000dc	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 339  : 		_Facetptr<_Facet>::_Psave = _Psave;

  000df	8b 45 e0	 mov	 eax, DWORD PTR __Psave$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<wchar_t> >::_Psave

; 340  : 
; 341  : 		locale::facet *_Pfmod = (_Facet *)_Psave;

  000e7	8b 4d e0	 mov	 ecx, DWORD PTR __Psave$[ebp]
  000ea	89 4d d0	 mov	 DWORD PTR __Pfmod$13763[ebp], ecx

; 342  : 		_Pfmod->_Incref();

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$13763[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Pfmod->_Register();

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$13763[ebp]
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Register@facet@locale@std@@QAEXXZ
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13755:

; 344  : 		}
; 345  : 
; 346  : 	return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00111	8b 55 d4	 mov	 edx, DWORD PTR __Pf$[ebp]
  00114	89 55 c0	 mov	 DWORD PTR $T15390[ebp], edx
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 45 c0	 mov	 eax, DWORD PTR $T15390[ebp]
$L15388:

; 347  : 	}

  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15398
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	83 c4 40	 add	 esp, 64			; 00000040H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$L15398:
  0015e	02 00 00 00	 DD	 2
  00162	00 00 00 00	 DD	 $L15397
$L15397:
  00166	ec ff ff ff	 DD	 -20			; ffffffecH
  0016a	04 00 00 00	 DD	 4
  0016e	00 00 00 00	 DD	 $L15394
  00172	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00176	04 00 00 00	 DD	 4
  0017a	00 00 00 00	 DD	 $L15395
$L15395:
  0017e	5f		 DB	 95			; 0000005fH
  0017f	50		 DB	 80			; 00000050H
  00180	73		 DB	 115			; 00000073H
  00181	61		 DB	 97			; 00000061H
  00182	76		 DB	 118			; 00000076H
  00183	65		 DB	 101			; 00000065H
  00184	00		 DB	 0
$L15394:
  00185	5f		 DB	 95			; 0000005fH
  00186	4c		 DB	 76			; 0000004cH
  00187	6f		 DB	 111			; 0000006fH
  00188	63		 DB	 99			; 00000063H
  00189	6b		 DB	 107			; 0000006bH
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15391:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15393
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 528  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 529  : 	return (getline(_Istr, _Str, _Istr.widen('\n')));

  00004	8b f4		 mov	 esi, esp
  00006	6a 0a		 push	 10			; 0000000aH
  00008	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00010	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00013	8b ca		 mov	 ecx, edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	50		 push	 eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	}

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z:NEAR
EXTRN	__imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15418	DD	0ffffffffH
	DD	FLAT:$L15409
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T15420	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L15408
$T15419	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T15420
$T15411	DD	019930520H
	DD	03H
	DD	FLAT:$T15418
	DD	01H
	DD	FLAT:$T15419
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
_TEXT	SEGMENT
tv175 = -110						; size = 2
tv174 = -108						; size = 4
tv173 = -104						; size = 4
tv172 = -100						; size = 4
tv171 = -94						; size = 1
tv170 = -93						; size = 1
tv169 = -92						; size = 2
tv168 = -90						; size = 2
tv167 = -88						; size = 4
tv166 = -82						; size = 2
tv165 = -80						; size = 4
tv65 = -74						; size = 2
$T15406 = -72						; size = 4
$T15405 = -66						; size = 2
__Meta$13916 = -60					; size = 2
__Metadelim$13915 = -48					; size = 2
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 2
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z PROC NEAR ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 477  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 60	 sub	 esp, 96			; 00000060H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  00022	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 478  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 479  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 480  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 481  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003c	6a 01		 push	 1
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 482  : 
; 483  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 04 02 00
	00		 je	 $L15407

; 484  : 		{	// state okay, extract characters
; 485  : 		_TRY_IO_BEGIN

  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 486  : 		_Str.erase();

  00068	8b f4		 mov	 esi, esp
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  : 		const typename _Traits::int_type _Metadelim =
; 488  : 			_Traits::to_int_type(_Delim);

  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	66 89 45 b6	 mov	 WORD PTR tv65[ebp], ax
  0009f	66 8b 55 b6	 mov	 dx, WORD PTR tv65[ebp]
  000a3	66 89 55 d0	 mov	 WORD PTR __Metadelim$13915[ebp], dx

; 489  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a7	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ac	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000af	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b2	8b f4		 mov	 esi, esp
  000b4	8b ca		 mov	 ecx, edx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	89 45 b0	 mov	 DWORD PTR tv165[ebp], eax
  000c6	8b f4		 mov	 esi, esp
  000c8	8b 4d b0	 mov	 ecx, DWORD PTR tv165[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	66 89 45 ae	 mov	 WORD PTR tv166[ebp], ax
  000dc	66 8b 45 ae	 mov	 ax, WORD PTR tv166[ebp]
  000e0	66 89 45 c4	 mov	 WORD PTR __Meta$13916[ebp], ax

; 490  : 
; 491  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000e4	eb 3b		 jmp	 SHORT $L13917
$L13918:
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000ee	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	89 45 a8	 mov	 DWORD PTR tv167[ebp], eax
  00103	8b f4		 mov	 esi, esp
  00105	8b 4d a8	 mov	 ecx, DWORD PTR tv167[ebp]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  0010e	3b f4		 cmp	 esi, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	66 89 45 a6	 mov	 WORD PTR tv168[ebp], ax
  00119	66 8b 45 a6	 mov	 ax, WORD PTR tv168[ebp]
  0011d	66 89 45 c4	 mov	 WORD PTR __Meta$13916[ebp], ax
$L13917:

; 492  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00121	8b f4		 mov	 esi, esp
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	66 89 45 a4	 mov	 WORD PTR tv169[ebp], ax
  00134	66 8b 4d a4	 mov	 cx, WORD PTR tv169[ebp]
  00138	66 89 4d be	 mov	 WORD PTR $T15405[ebp], cx
  0013c	8b f4		 mov	 esi, esp
  0013e	8d 55 c4	 lea	 edx, DWORD PTR __Meta$13916[ebp]
  00141	52		 push	 edx
  00142	8d 45 be	 lea	 eax, DWORD PTR $T15405[ebp]
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  0014c	83 c4 08	 add	 esp, 8
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	88 45 a3	 mov	 BYTE PTR tv170[ebp], al
  00159	0f b6 4d a3	 movzx	 ecx, BYTE PTR tv170[ebp]
  0015d	85 c9		 test	 ecx, ecx
  0015f	74 0e		 je	 SHORT $L13921

; 493  : 				{	// end of file, quit
; 494  : 				_State |= ios_base::eofbit;

  00161	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00164	83 ca 01	 or	 edx, 1
  00167	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 495  : 				break;

  0016a	e9 d3 00 00 00	 jmp	 $L13919
$L13921:

; 496  : 				}
; 497  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0016f	8b f4		 mov	 esi, esp
  00171	8d 45 d0	 lea	 eax, DWORD PTR __Metadelim$13915[ebp]
  00174	50		 push	 eax
  00175	8d 4d c4	 lea	 ecx, DWORD PTR __Meta$13916[ebp]
  00178	51		 push	 ecx
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  0017f	83 c4 08	 add	 esp, 8
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	88 45 a2	 mov	 BYTE PTR tv171[ebp], al
  0018c	0f b6 55 a2	 movzx	 edx, BYTE PTR tv171[ebp]
  00190	85 d2		 test	 edx, edx
  00192	74 37		 je	 SHORT $L13923

; 498  : 				{	// got a delimiter, discard it and quit
; 499  : 				_Changed = true;

  00194	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 500  : 				_Istr.rdbuf()->sbumpc();

  00198	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0019b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a3	8b f4		 mov	 esi, esp
  001a5	8b ca		 mov	 ecx, edx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  001ad	3b f4		 cmp	 esi, esp
  001af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b4	89 45 9c	 mov	 DWORD PTR tv172[ebp], eax
  001b7	8b f4		 mov	 esi, esp
  001b9	8b 4d 9c	 mov	 ecx, DWORD PTR tv172[ebp]
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  : 				break;

  001c9	eb 77		 jmp	 SHORT $L13919
$L13923:

; 502  : 				}
; 503  : 			else if (_Str.max_size() <= _Str.size())

  001cb	8b f4		 mov	 esi, esp
  001cd	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  001d6	3b f4		 cmp	 esi, esp
  001d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001dd	89 45 98	 mov	 DWORD PTR tv173[ebp], eax
  001e0	8b f4		 mov	 esi, esp
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  001eb	3b f4		 cmp	 esi, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	89 45 94	 mov	 DWORD PTR tv174[ebp], eax
  001f5	8b 45 98	 mov	 eax, DWORD PTR tv173[ebp]
  001f8	3b 45 94	 cmp	 eax, DWORD PTR tv174[ebp]
  001fb	77 0b		 ja	 SHORT $L13925

; 504  : 				{	// string too large, quit
; 505  : 				_State |= ios_base::failbit;

  001fd	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  00200	83 c9 02	 or	 ecx, 2
  00203	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 506  : 				break;

  00206	eb 3a		 jmp	 SHORT $L13919
$L13925:

; 507  : 				}
; 508  : 			else
; 509  : 				{	// got a character, add it to string
; 510  : 				_Str += _Traits::to_char_type(_Meta);

  00208	8b f4		 mov	 esi, esp
  0020a	8d 55 c4	 lea	 edx, DWORD PTR __Meta$13916[ebp]
  0020d	52		 push	 edx
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  00214	83 c4 04	 add	 esp, 4
  00217	3b f4		 cmp	 esi, esp
  00219	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021e	66 89 45 92	 mov	 WORD PTR tv175[ebp], ax
  00222	8b f4		 mov	 esi, esp
  00224	66 8b 45 92	 mov	 ax, WORD PTR tv175[ebp]
  00228	50		 push	 eax
  00229	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
  00232	3b f4		 cmp	 esi, esp
  00234	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 511  : 				_Changed = true;

  00239	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 512  : 				}

  0023d	e9 a4 fe ff ff	 jmp	 $L13918
$L13919:
  00242	eb 24		 jmp	 SHORT $L15407
$L15408:

; 513  : 		_CATCH_IO_(_Istr)

  00244	8b f4		 mov	 esi, esp
  00246	6a 01		 push	 1
  00248	6a 04		 push	 4
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0024d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024f	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00252	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  0025b	3b f4		 cmp	 esi, esp
  0025d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00262	b8 00 00 00 00	 mov	 eax, $L15407
  00267	c3		 ret	 0
$L15407:
  00268	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 514  : 		}
; 515  : 
; 516  : 	if (!_Changed)

  0026f	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00273	85 c0		 test	 eax, eax
  00275	75 09		 jne	 SHORT $L13927

; 517  : 		_State |= ios_base::failbit;

  00277	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0027a	83 c9 02	 or	 ecx, 2
  0027d	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L13927:

; 518  : 	_Istr.setstate(_State);

  00280	8b f4		 mov	 esi, esp
  00282	6a 00		 push	 0
  00284	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00287	52		 push	 edx
  00288	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0028b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00290	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00293	8b ca		 mov	 ecx, edx
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  0029b	3b f4		 cmp	 esi, esp
  0029d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  : 	return (_Istr);

  002a2	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002a5	89 45 b8	 mov	 DWORD PTR $T15406[ebp], eax
  002a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002af	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002b2	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  002b7	8b 45 b8	 mov	 eax, DWORD PTR $T15406[ebp]

; 520  : 	}

  002ba	52		 push	 edx
  002bb	8b cd		 mov	 ecx, ebp
  002bd	50		 push	 eax
  002be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15417
  002c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002c9	58		 pop	 eax
  002ca	5a		 pop	 edx
  002cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	5b		 pop	 ebx
  002d8	83 c4 70	 add	 esp, 112		; 00000070H
  002db	3b ec		 cmp	 ebp, esp
  002dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c3		 ret	 0
$L15417:
  002e6	03 00 00 00	 DD	 3
  002ea	00 00 00 00	 DD	 $L15416
$L15416:
  002ee	dc ff ff ff	 DD	 -36			; ffffffdcH
  002f2	08 00 00 00	 DD	 8
  002f6	00 00 00 00	 DD	 $L15412
  002fa	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002fe	02 00 00 00	 DD	 2
  00302	00 00 00 00	 DD	 $L15413
  00306	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0030a	02 00 00 00	 DD	 2
  0030e	00 00 00 00	 DD	 $L15414
$L15414:
  00312	5f		 DB	 95			; 0000005fH
  00313	4d		 DB	 77			; 0000004dH
  00314	65		 DB	 101			; 00000065H
  00315	74		 DB	 116			; 00000074H
  00316	61		 DB	 97			; 00000061H
  00317	00		 DB	 0
$L15413:
  00318	5f		 DB	 95			; 0000005fH
  00319	4d		 DB	 77			; 0000004dH
  0031a	65		 DB	 101			; 00000065H
  0031b	74		 DB	 116			; 00000074H
  0031c	61		 DB	 97			; 00000061H
  0031d	64		 DB	 100			; 00000064H
  0031e	65		 DB	 101			; 00000065H
  0031f	6c		 DB	 108			; 0000006cH
  00320	69		 DB	 105			; 00000069H
  00321	6d		 DB	 109			; 0000006dH
  00322	00		 DB	 0
$L15412:
  00323	5f		 DB	 95			; 0000005fH
  00324	4f		 DB	 79			; 0000004fH
  00325	6b		 DB	 107			; 0000006bH
  00326	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15409:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
__ehhandler$??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15411
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ENDP ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
EXTRN	__imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ:NEAR
EXTRN	__imp_??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z:NEAR
EXTRN	__imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15442	DD	0ffffffffH
	DD	FLAT:$L15435
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T15444	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L15434
$T15443	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T15444
$T15437	DD	019930520H
	DD	03H
	DD	FLAT:$T15442
	DD	01H
	DD	FLAT:$T15443
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
tv221 = -113						; size = 1
tv220 = -112						; size = 2
tv219 = -110						; size = 2
tv218 = -108						; size = 4
tv217 = -104						; size = 2
tv216 = -101						; size = 1
tv215 = -100						; size = 2
tv214 = -98						; size = 2
tv213 = -96						; size = 4
tv212 = -92						; size = 4
tv211 = -85						; size = 1
tv210 = -84						; size = 2
tv209 = -82						; size = 2
tv208 = -80						; size = 4
tv207 = -74						; size = 2
tv83 = -72						; size = 4
tv81 = -68						; size = 4
$T15432 = -64						; size = 4
$T15431 = -60						; size = 2
$T15430 = -58						; size = 2
$T15429 = -56						; size = 2
$T15428 = -54						; size = 2
$T15427 = -52						; size = 2
$T15426 = -50						; size = 2
__Count$13950 = -48					; size = 4
__Ok$ = -40						; size = 8
__Pad$ = -28						; size = 4
__Size$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 538  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 64	 sub	 esp, 100		; 00000064H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00022	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 539  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 540  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 541  : 	typedef typename _Mystr::size_type _Mysizt;
; 542  : 
; 543  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 544  : 	_Mysizt _Size = _Str.size();

  00038	8b f4		 mov	 esi, esp
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 e8	 mov	 DWORD PTR __Size$[ebp], eax

; 545  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 546  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00055	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00058	8b f4		 mov	 esi, esp
  0005a	8b ca		 mov	 ecx, edx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	85 c0		 test	 eax, eax
  0006b	7e 45		 jle	 SHORT $L15424
  0006d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00075	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00078	8b f4		 mov	 esi, esp
  0007a	8b ca		 mov	 ecx, edx
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	3b 45 e8	 cmp	 eax, DWORD PTR __Size$[ebp]
  0008c	76 24		 jbe	 SHORT $L15424
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00096	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00099	8b f4		 mov	 esi, esp
  0009b	8b ca		 mov	 ecx, edx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	2b 45 e8	 sub	 eax, DWORD PTR __Size$[ebp]
  000ad	89 45 bc	 mov	 DWORD PTR tv81[ebp], eax
  000b0	eb 07		 jmp	 SHORT $L15425
$L15424:
  000b2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L15425:
  000b9	8b 45 bc	 mov	 eax, DWORD PTR tv81[ebp]
  000bc	89 45 e4	 mov	 DWORD PTR __Pad$[ebp], eax

; 547  : 	const typename _Myos::sentry _Ok(_Ostr);

  000bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000c2	51		 push	 ecx
  000c3	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000c6	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 548  : 
; 549  : 	if (!_Ok)

  000d2	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d5	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  000da	0f b6 d0	 movzx	 edx, al
  000dd	85 d2		 test	 edx, edx
  000df	75 0e		 jne	 SHORT $L13939

; 550  : 		_State |= ios_base::badbit;

  000e1	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000e4	83 c8 04	 or	 eax, 4
  000e7	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 551  : 	else

  000ea	e9 dd 02 00 00	 jmp	 $L15433
$L13939:

; 552  : 		{	// state okay, insert characters
; 553  : 	_TRY_IO_BEGIN

  000ef	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 554  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000fb	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000fe	8b f4		 mov	 esi, esp
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00106	3b f4		 cmp	 esi, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	89 45 b8	 mov	 DWORD PTR tv83[ebp], eax
  00110	8b 45 b8	 mov	 eax, DWORD PTR tv83[ebp]
  00113	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00118	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011b	0f 84 c3 00 00
	00		 je	 $L13942

; 555  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00121	eb 09		 jmp	 SHORT $L13943
$L13944:
  00123	8b 4d e4	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00126	83 e9 01	 sub	 ecx, 1
  00129	89 4d e4	 mov	 DWORD PTR __Pad$[ebp], ecx
$L13943:
  0012c	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00130	0f 86 ae 00 00
	00		 jbe	 $L13942

; 556  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 557  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00136	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00139	8b 02		 mov	 eax, DWORD PTR [edx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0013e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	66 89 45 b6	 mov	 WORD PTR tv207[ebp], ax
  00154	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0015c	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0015f	8b f4		 mov	 esi, esp
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	89 45 b0	 mov	 DWORD PTR tv208[ebp], eax
  00171	8b f4		 mov	 esi, esp
  00173	66 8b 45 b6	 mov	 ax, WORD PTR tv207[ebp]
  00177	50		 push	 eax
  00178	8b 4d b0	 mov	 ecx, DWORD PTR tv208[ebp]
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00181	3b f4		 cmp	 esi, esp
  00183	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00188	66 89 45 ae	 mov	 WORD PTR tv209[ebp], ax
  0018c	66 8b 4d ae	 mov	 cx, WORD PTR tv209[ebp]
  00190	66 89 4d ce	 mov	 WORD PTR $T15426[ebp], cx
  00194	8b f4		 mov	 esi, esp
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	66 89 45 ac	 mov	 WORD PTR tv210[ebp], ax
  001a7	66 8b 55 ac	 mov	 dx, WORD PTR tv210[ebp]
  001ab	66 89 55 cc	 mov	 WORD PTR $T15427[ebp], dx
  001af	8b f4		 mov	 esi, esp
  001b1	8d 45 ce	 lea	 eax, DWORD PTR $T15426[ebp]
  001b4	50		 push	 eax
  001b5	8d 4d cc	 lea	 ecx, DWORD PTR $T15427[ebp]
  001b8	51		 push	 ecx
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  001bf	83 c4 08	 add	 esp, 8
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c9	88 45 ab	 mov	 BYTE PTR tv211[ebp], al
  001cc	0f b6 55 ab	 movzx	 edx, BYTE PTR tv211[ebp]
  001d0	85 d2		 test	 edx, edx
  001d2	74 0b		 je	 SHORT $L13948

; 558  : 					{	// insertion failed, quit
; 559  : 					_State |= ios_base::badbit;

  001d4	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001d7	83 c8 04	 or	 eax, 4
  001da	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 560  : 					break;

  001dd	eb 05		 jmp	 SHORT $L13942
$L13948:

; 561  : 					}
; 562  : 
; 563  : 		if (_State == ios_base::goodbit)

  001df	e9 3f ff ff ff	 jmp	 $L13944
$L13942:
  001e4	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e8	0f 85 c9 00 00
	00		 jne	 $L13949

; 564  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001ee	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Count$13950[ebp], 0
  001f5	eb 09		 jmp	 SHORT $L13951
$L13952:
  001f7	8b 4d d0	 mov	 ecx, DWORD PTR __Count$13950[ebp]
  001fa	83 c1 01	 add	 ecx, 1
  001fd	89 4d d0	 mov	 DWORD PTR __Count$13950[ebp], ecx
$L13951:
  00200	8b 55 d0	 mov	 edx, DWORD PTR __Count$13950[ebp]
  00203	3b 55 e8	 cmp	 edx, DWORD PTR __Size$[ebp]
  00206	0f 83 ab 00 00
	00		 jae	 $L13949

; 565  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 566  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  0020c	8b f4		 mov	 esi, esp
  0020e	8b 45 d0	 mov	 eax, DWORD PTR __Count$13950[ebp]
  00211	50		 push	 eax
  00212	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
  0021b	3b f4		 cmp	 esi, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	89 45 a4	 mov	 DWORD PTR tv212[ebp], eax
  00225	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00228	8b 11		 mov	 edx, DWORD PTR [ecx]
  0022a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0022d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00230	8b f4		 mov	 esi, esp
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00238	3b f4		 cmp	 esi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023f	89 45 a0	 mov	 DWORD PTR tv213[ebp], eax
  00242	8b f4		 mov	 esi, esp
  00244	8b 45 a4	 mov	 eax, DWORD PTR tv212[ebp]
  00247	66 8b 08	 mov	 cx, WORD PTR [eax]
  0024a	51		 push	 ecx
  0024b	8b 4d a0	 mov	 ecx, DWORD PTR tv213[ebp]
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00254	3b f4		 cmp	 esi, esp
  00256	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025b	66 89 45 9e	 mov	 WORD PTR tv214[ebp], ax
  0025f	66 8b 55 9e	 mov	 dx, WORD PTR tv214[ebp]
  00263	66 89 55 ca	 mov	 WORD PTR $T15428[ebp], dx
  00267	8b f4		 mov	 esi, esp
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  0026f	3b f4		 cmp	 esi, esp
  00271	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00276	66 89 45 9c	 mov	 WORD PTR tv215[ebp], ax
  0027a	66 8b 45 9c	 mov	 ax, WORD PTR tv215[ebp]
  0027e	66 89 45 c8	 mov	 WORD PTR $T15429[ebp], ax
  00282	8b f4		 mov	 esi, esp
  00284	8d 4d ca	 lea	 ecx, DWORD PTR $T15428[ebp]
  00287	51		 push	 ecx
  00288	8d 55 c8	 lea	 edx, DWORD PTR $T15429[ebp]
  0028b	52		 push	 edx
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00292	83 c4 08	 add	 esp, 8
  00295	3b f4		 cmp	 esi, esp
  00297	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029c	88 45 9b	 mov	 BYTE PTR tv216[ebp], al
  0029f	0f b6 45 9b	 movzx	 eax, BYTE PTR tv216[ebp]
  002a3	85 c0		 test	 eax, eax
  002a5	74 0b		 je	 SHORT $L13956

; 567  : 					{	// insertion failed, quit
; 568  : 					_State |= ios_base::badbit;

  002a7	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  002aa	83 c9 04	 or	 ecx, 4
  002ad	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 569  : 					break;

  002b0	eb 05		 jmp	 SHORT $L13949
$L13956:

; 570  : 					}
; 571  : 
; 572  : 		if (_State == ios_base::goodbit)

  002b2	e9 40 ff ff ff	 jmp	 $L13952
$L13949:
  002b7	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  002bb	0f 85 c7 00 00
	00		 jne	 $L13957

; 573  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002c1	eb 09		 jmp	 SHORT $L13958
$L13959:
  002c3	8b 55 e4	 mov	 edx, DWORD PTR __Pad$[ebp]
  002c6	83 ea 01	 sub	 edx, 1
  002c9	89 55 e4	 mov	 DWORD PTR __Pad$[ebp], edx
$L13958:
  002cc	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002d0	0f 86 b2 00 00
	00		 jbe	 $L13957

; 574  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 575  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  002d6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e1	8b f4		 mov	 esi, esp
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	66 89 45 98	 mov	 WORD PTR tv217[ebp], ax
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b f4		 mov	 esi, esp
  00303	8b ca		 mov	 ecx, edx
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  0030b	3b f4		 cmp	 esi, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	89 45 94	 mov	 DWORD PTR tv218[ebp], eax
  00315	8b f4		 mov	 esi, esp
  00317	66 8b 45 98	 mov	 ax, WORD PTR tv217[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 94	 mov	 ecx, DWORD PTR tv218[ebp]
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00325	3b f4		 cmp	 esi, esp
  00327	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032c	66 89 45 92	 mov	 WORD PTR tv219[ebp], ax
  00330	66 8b 4d 92	 mov	 cx, WORD PTR tv219[ebp]
  00334	66 89 4d c6	 mov	 WORD PTR $T15430[ebp], cx
  00338	8b f4		 mov	 esi, esp
  0033a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00340	3b f4		 cmp	 esi, esp
  00342	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00347	66 89 45 90	 mov	 WORD PTR tv220[ebp], ax
  0034b	66 8b 55 90	 mov	 dx, WORD PTR tv220[ebp]
  0034f	66 89 55 c4	 mov	 WORD PTR $T15431[ebp], dx
  00353	8b f4		 mov	 esi, esp
  00355	8d 45 c6	 lea	 eax, DWORD PTR $T15430[ebp]
  00358	50		 push	 eax
  00359	8d 4d c4	 lea	 ecx, DWORD PTR $T15431[ebp]
  0035c	51		 push	 ecx
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00363	83 c4 08	 add	 esp, 8
  00366	3b f4		 cmp	 esi, esp
  00368	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036d	88 45 8f	 mov	 BYTE PTR tv221[ebp], al
  00370	0f b6 55 8f	 movzx	 edx, BYTE PTR tv221[ebp]
  00374	85 d2		 test	 edx, edx
  00376	74 0b		 je	 SHORT $L13963

; 576  : 					{	// insertion failed, quit
; 577  : 					_State |= ios_base::badbit;

  00378	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0037b	83 c8 04	 or	 eax, 4
  0037e	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 578  : 					break;

  00381	eb 05		 jmp	 SHORT $L13957
$L13963:

; 579  : 					}
; 580  : 		_Ostr.width(0);

  00383	e9 3b ff ff ff	 jmp	 $L13959
$L13957:
  00388	8b f4		 mov	 esi, esp
  0038a	6a 00		 push	 0
  0038c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0038f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00391	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00394	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00397	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  0039d	3b f4		 cmp	 esi, esp
  0039f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a4	eb 26		 jmp	 SHORT $L15433
$L15434:

; 581  : 		_CATCH_IO_(_Ostr)

  003a6	8b f4		 mov	 esi, esp
  003a8	6a 01		 push	 1
  003aa	6a 04		 push	 4
  003ac	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003af	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003b7	8b ca		 mov	 ecx, edx
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  003bf	3b f4		 cmp	 esi, esp
  003c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c6	b8 00 00 00 00	 mov	 eax, $L15433
  003cb	c3		 ret	 0
$L15433:
  003cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 		}
; 583  : 
; 584  : 	_Ostr.setstate(_State);

  003d3	8b f4		 mov	 esi, esp
  003d5	6a 00		 push	 0
  003d7	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  003da	50		 push	 eax
  003db	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003de	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  003ec	3b f4		 cmp	 esi, esp
  003ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 585  : 	return (_Ostr);

  003f3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f6	89 45 c0	 mov	 DWORD PTR $T15432[ebp], eax
  003f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00400	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00403	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00408	8b 45 c0	 mov	 eax, DWORD PTR $T15432[ebp]

; 586  : 	}

  0040b	52		 push	 edx
  0040c	8b cd		 mov	 ecx, ebp
  0040e	50		 push	 eax
  0040f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L15441
  00415	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0041a	58		 pop	 eax
  0041b	5a		 pop	 edx
  0041c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00426	5f		 pop	 edi
  00427	5e		 pop	 esi
  00428	5b		 pop	 ebx
  00429	83 c4 74	 add	 esp, 116		; 00000074H
  0042c	3b ec		 cmp	 ebp, esp
  0042e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c3		 ret	 0
$L15441:
  00437	01 00 00 00	 DD	 1
  0043b	00 00 00 00	 DD	 $L15440
$L15440:
  0043f	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00443	08 00 00 00	 DD	 8
  00447	00 00 00 00	 DD	 $L15438
$L15438:
  0044b	5f		 DB	 95			; 0000005fH
  0044c	4f		 DB	 79			; 0000004fH
  0044d	6b		 DB	 107			; 0000006bH
  0044e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15435:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15437
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ:NEAR
EXTRN	__imp_?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\ostream
xdata$x	SEGMENT
$T15452	DD	0ffffffffH
	DD	FLAT:$L15448
$T15450	DD	019930520H
	DD	01H
	DD	FLAT:$T15452
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $L13162
  00058	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00060	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00063	8b f4		 mov	 esi, esp
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	85 c0		 test	 eax, eax
  00074	74 2d		 je	 SHORT $L13162

; 90   : 				_Ostr.tie()->flush();

  00076	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0007e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00081	8b f4		 mov	 esi, esp
  00083	8b ca		 mov	 ecx, edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b f4		 mov	 esi, esp
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13162:

; 91   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ab	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ae	8b f4		 mov	 esi, esp
  000b0	8b ca		 mov	 ecx, edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 92   : 			}

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d9	5e		 pop	 esi
  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15448:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15450
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T15460	DD	0ffffffffH
	DD	FLAT:$L15456
$T15458	DD	019930520H
	DD	01H
	DD	FLAT:$T15460
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 
; 97   :  #if _HAS_EXCEPTIONS
; 98   : 			if (!uncaught_exception())

  0002b	8b f4		 mov	 esi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L13164

; 99   : 				this->_Myostr._Osfx();

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13164:

; 100  : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006e	5e		 pop	 esi
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L15456:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T15458
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 108  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 110  : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 68   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 69   : 			if (_Myostr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L13440

; 70   : 				_Myostr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13440:

; 71   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 74   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			if (_Myostr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L13443

; 76   : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L13443:

; 77   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
END
