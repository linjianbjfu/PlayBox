; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\tray\Subclass.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??_GCSubclassWnd@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSubclassWndMap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CSubclassWndMap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWndMap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@8CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@8CMapPtrToPtr@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWndMap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMapPtrToPtr@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCSubclassWndMap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCSubclassWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CSubclassWndMap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CSubclassWnd@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??_7CSubclassWndMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSubclassWnd@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B ; CSubclassWnd::classCSubclassWnd
EXTRN	?GetThisClass@CWnd@@SGPAUCRuntimeClass@@XZ:NEAR	; CWnd::GetThisClass
_DATA	SEGMENT
_THIS_FILE DB	'.\src\Gui\tray\Subclass.cpp', 00H
_DATA	ENDS
CONST	SEGMENT
$SG187073 DB	'CSubclassWnd', 00H
CONST	ENDS
;	COMDAT ?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B DD FLAT:$SG187073 ; CSubclassWnd::classCSubclassWnd
	DD	010H
	DD	0ffffH
	DD	00H
	DD	FLAT:?GetThisClass@CWnd@@SGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ ; CSubclassWnd::GetThisClass
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\subclass.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ PROC NEAR ; CSubclassWnd::GetThisClass

; 39   : IMPLEMENT_DYNAMIC(CSubclassWnd, CWnd);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B ; CSubclassWnd::classCSubclassWnd
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ ENDP	; CSubclassWnd::GetThisClass
_TEXT	ENDS
PUBLIC	?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ ; CSubclassWnd::GetRuntimeClass
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ PROC NEAR ; CSubclassWnd::GetRuntimeClass
; _this$ = ecx

; 39   : IMPLEMENT_DYNAMIC(CSubclassWnd, CWnd);

  00010	55		 push	 ebp
  00011	8b ec		 mov	 ebp, esp
  00013	51		 push	 ecx
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B ; CSubclassWnd::classCSubclassWnd
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ ENDP ; CSubclassWnd::GetRuntimeClass
_TEXT	ENDS
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??0CSubclassWnd@@QAE@XZ				; CSubclassWnd::CSubclassWnd
PUBLIC	?AssertValid@CSubclassWnd@@UBEXXZ		; CSubclassWnd::AssertValid
PUBLIC	?Dump@CSubclassWnd@@UBEXAAVCDumpContext@@@Z	; CSubclassWnd::Dump
PUBLIC	?WindowProc@CSubclassWnd@@MAEJIIJ@Z		; CSubclassWnd::WindowProc
PUBLIC	??_7CSubclassWnd@@6B@				; CSubclassWnd::`vftable'
PUBLIC	??_GCSubclassWnd@@UAEPAXI@Z			; CSubclassWnd::`scalar deleting destructor'
PUBLIC	??_R4CSubclassWnd@@6B@				; CSubclassWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSubclassWnd@@@8			; CSubclassWnd `RTTI Type Descriptor'
PUBLIC	??_R3CSubclassWnd@@8				; CSubclassWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSubclassWnd@@8				; CSubclassWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CSubclassWnd@@8			; CSubclassWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	??0CObject@@IAE@XZ:NEAR				; CObject::CObject
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:NEAR	; CObject::Serialize
EXTRN	??_ECSubclassWnd@@UAEPAXI@Z:NEAR		; CSubclassWnd::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7CSubclassWnd@@6B@
CONST	SEGMENT
??_7CSubclassWnd@@6B@ DD FLAT:??_R4CSubclassWnd@@6B@	; CSubclassWnd::`vftable'
	DD	FLAT:?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECSubclassWnd@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CSubclassWnd@@UBEXXZ
	DD	FLAT:?Dump@CSubclassWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?WindowProc@CSubclassWnd@@MAEJIIJ@Z
CONST	ENDS
;	COMDAT ??_R4CSubclassWnd@@6B@
rdata$r	SEGMENT
??_R4CSubclassWnd@@6B@ DD 00H				; CSubclassWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSubclassWnd@@@8
	DD	FLAT:??_R3CSubclassWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSubclassWnd@@@8
_DATA	SEGMENT
??_R0?AVCSubclassWnd@@@8 DD FLAT:??_7type_info@@6B@	; CSubclassWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSubclassWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CSubclassWnd@@8
rdata$r	SEGMENT
??_R3CSubclassWnd@@8 DD 00H				; CSubclassWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSubclassWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWnd@@8
rdata$r	SEGMENT
??_R2CSubclassWnd@@8 DD FLAT:??_R1A@?0A@A@CSubclassWnd@@8 ; CSubclassWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CSubclassWnd@@8 DD FLAT:??_R0?AVCSubclassWnd@@@8 ; CSubclassWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
	ORG $-22
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSubclassWnd@@QAE@XZ PROC NEAR			; CSubclassWnd::CSubclassWnd
; _this$ = ecx

; 42   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	51		 push	 ecx
  00034	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0003b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWnd@@6B@

; 43   : 	m_pNext = NULL;

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 44   : 	m_pOldWndProc = NULL;	

  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 45   : 	m_hWnd  = NULL;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 46   : }

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	83 c4 04	 add	 esp, 4
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??0CSubclassWnd@@QAE@XZ ENDP				; CSubclassWnd::CSubclassWnd
_TEXT	ENDS
PUBLIC	??1CSubclassWnd@@UAE@XZ				; CSubclassWnd::~CSubclassWnd
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCSubclassWnd@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSubclassWnd@@UAEPAXI@Z PROC NEAR			; CSubclassWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CSubclassWnd@@UAE@XZ	; CSubclassWnd::~CSubclassWnd
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187088
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187088:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GCSubclassWnd@@UAEPAXI@Z ENDP			; CSubclassWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z	; CSubclassWnd::HookWindow
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??1CObject@@UAE@XZ:NEAR				; CObject::~CObject
xdata$x	SEGMENT
$T187667 DD	0ffffffffH
	DD	FLAT:$L187660
$T187664 DD	019930520H
	DD	01H
	DD	FLAT:$T187667
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSubclassWnd@@UAE@XZ PROC NEAR			; CSubclassWnd::~CSubclassWnd
; _this$ = ecx

; 49   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	6a ff		 push	 -1
  00085	68 00 00 00 00	 push	 __ehhandler$??1CSubclassWnd@@UAE@XZ
  0008a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00090	50		 push	 eax
  00091	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00098	51		 push	 ecx
  00099	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  000a0	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  000a3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWnd@@6B@
  000ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 50   : 	if (m_hWnd) 

  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000ba	74 0a		 je	 SHORT $L187091

; 51   : 		HookWindow((HWND)NULL);		// unhook window

  000bc	6a 00		 push	 0
  000be	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ; CSubclassWnd::HookWindow
$L187091:

; 52   : }

  000c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000df	83 c4 10	 add	 esp, 16			; 00000010H
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L187660:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CSubclassWnd@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T187664
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CSubclassWnd@@UAE@XZ ENDP				; CSubclassWnd::~CSubclassWnd
PUBLIC	?GetHookMap@CSubclassWndMap@@SAAAV1@XZ		; CSubclassWndMap::GetHookMap
PUBLIC	?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z ; CSubclassWndMap::Add
PUBLIC	?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z ; CSubclassWndMap::Remove
EXTRN	__imp__IsWindow@4:NEAR
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:NEAR ; AfxAssertValidObject
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z PROC NEAR	; CSubclassWnd::HookWindow
; _this$ = ecx

; 60   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	51		 push	 ecx
  000f4	56		 push	 esi
  000f5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  000fc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 	ASSERT_VALID(this);

  000ff	6a 3d		 push	 61			; 0000003dH
  00101	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00106	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 62   : 	if (hwnd) {

  0010f	83 7d 08 00	 cmp	 DWORD PTR _hwnd$[ebp], 0
  00113	74 58		 je	 SHORT $L187098

; 63   : 		// Hook the window
; 64   : 		ASSERT(m_hWnd==NULL);

  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0011c	74 11		 je	 SHORT $L187670
  0011e	6a 40		 push	 64			; 00000040H
  00120	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00125	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0012a	85 c0		 test	 eax, eax
  0012c	74 01		 je	 SHORT $L187670
  0012e	cc		 int	 3
$L187670:

; 65   : 		ASSERT(::IsWindow(hwnd));

  0012f	8b f4		 mov	 esi, esp
  00131	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00134	50		 push	 eax
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0013b	3b f4		 cmp	 esi, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	85 c0		 test	 eax, eax
  00144	75 11		 jne	 SHORT $L187671
  00146	6a 41		 push	 65			; 00000041H
  00148	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0014d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00152	85 c0		 test	 eax, eax
  00154	74 01		 je	 SHORT $L187671
  00156	cc		 int	 3
$L187671:

; 66   : 		theHookMap.Add(hwnd, this);			// Add to map of hooks

  00157	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	52		 push	 edx
  0015b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  00164	8b c8		 mov	 ecx, eax
  00166	e8 00 00 00 00	 call	 ?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z ; CSubclassWndMap::Add

; 67   : 
; 68   : 	} else if (m_hWnd) {

  0016b	eb 23		 jmp	 SHORT $L187101
$L187098:
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00174	74 1a		 je	 SHORT $L187101

; 69   : 		// Unhook the window
; 70   : 		theHookMap.Remove(this);				// Remove from map

  00176	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  0017f	8b c8		 mov	 ecx, eax
  00181	e8 00 00 00 00	 call	 ?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z ; CSubclassWndMap::Remove

; 71   : 		m_pOldWndProc = NULL;

  00186	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00189	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L187101:

; 72   : 	}
; 73   : 	m_hWnd = hwnd;

  00190	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00193	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00196	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 74   : 	return TRUE;

  00199	b8 01 00 00 00	 mov	 eax, 1

; 75   : }

  0019e	5e		 pop	 esi
  0019f	83 c4 04	 add	 esp, 4
  001a2	3b ec		 cmp	 ebp, esp
  001a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 04 00	 ret	 4
?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ENDP	; CSubclassWnd::HookWindow
_TEXT	ENDS
EXTRN	__imp__CallWindowProcA@20:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv92 = -8						; size = 4
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
_wp$ = 12						; size = 4
_lp$ = 16						; size = 4
?WindowProc@CSubclassWnd@@MAEJIIJ@Z PROC NEAR		; CSubclassWnd::WindowProc
; _this$ = ecx

; 86   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	83 ec 08	 sub	 esp, 8
  001b6	56		 push	 esi
  001b7	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  001be	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  001c5	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   : //	ASSERT_VALID(this);  // removed for speed
; 88   : 	ASSERT(m_pOldWndProc);

  001c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001cf	75 11		 jne	 SHORT $L187673
  001d1	6a 58		 push	 88			; 00000058H
  001d3	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  001d8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001dd	85 c0		 test	 eax, eax
  001df	74 01		 je	 SHORT $L187673
  001e1	cc		 int	 3
$L187673:

; 89   : 	return m_pNext ? m_pNext->WindowProc(msg, wp, lp) :	
; 90   : 		::CallWindowProc(m_pOldWndProc, m_hWnd, msg, wp, lp);

  001e2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e5	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  001e9	74 2d		 je	 SHORT $L187674
  001eb	8b f4		 mov	 esi, esp
  001ed	8b 45 10	 mov	 eax, DWORD PTR _lp$[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d 0c	 mov	 ecx, DWORD PTR _wp$[ebp]
  001f4	51		 push	 ecx
  001f5	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  001f8	52		 push	 edx
  001f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00202	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00205	8b 11		 mov	 edx, DWORD PTR [ecx]
  00207	8b c8		 mov	 ecx, eax
  00209	ff 52 14	 call	 DWORD PTR [edx+20]
  0020c	3b f4		 cmp	 esi, esp
  0020e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00213	89 45 f8	 mov	 DWORD PTR tv92[ebp], eax
  00216	eb 2c		 jmp	 SHORT $L187675
$L187674:
  00218	8b f4		 mov	 esi, esp
  0021a	8b 45 10	 mov	 eax, DWORD PTR _lp$[ebp]
  0021d	50		 push	 eax
  0021e	8b 4d 0c	 mov	 ecx, DWORD PTR _wp$[ebp]
  00221	51		 push	 ecx
  00222	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  00225	52		 push	 edx
  00226	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00229	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0022c	51		 push	 ecx
  0022d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00230	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00233	50		 push	 eax
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  0023a	3b f4		 cmp	 esi, esp
  0023c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00241	89 45 f8	 mov	 DWORD PTR tv92[ebp], eax
$L187675:
  00244	8b 45 f8	 mov	 eax, DWORD PTR tv92[ebp]

; 91   : }

  00247	5e		 pop	 esi
  00248	83 c4 08	 add	 esp, 8
  0024b	3b ec		 cmp	 ebp, esp
  0024d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00252	8b e5		 mov	 esp, ebp
  00254	5d		 pop	 ebp
  00255	c2 0c 00	 ret	 12			; 0000000cH
?WindowProc@CSubclassWnd@@MAEJIIJ@Z ENDP		; CSubclassWnd::WindowProc
_TEXT	ENDS
PUBLIC	?Default@CSubclassWnd@@IAEJXZ			; CSubclassWnd::Default
EXTRN	?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ:NEAR ; AfxGetThreadState
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_curMsg$ = -8						; size = 4
_this$ = -4						; size = 4
?Default@CSubclassWnd@@IAEJXZ PROC NEAR			; CSubclassWnd::Default
; _this$ = ecx

; 98   : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	83 ec 08	 sub	 esp, 8
  00266	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0026d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00274	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	// MFC stores current MSG in thread state
; 100  : 	MSG& curMsg = AfxGetThreadState()->m_lastSentMsg;

  00277	e8 00 00 00 00	 call	 ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ ; AfxGetThreadState
  0027c	83 c0 5c	 add	 eax, 92			; 0000005cH
  0027f	89 45 f8	 mov	 DWORD PTR _curMsg$[ebp], eax

; 101  : 	// Note: must explicitly call CSubclassWnd::WindowProc to avoid infinte
; 102  : 	// recursion on virtual function
; 103  : 	return CSubclassWnd::WindowProc(curMsg.message, curMsg.wParam, curMsg.lParam);

  00282	8b 45 f8	 mov	 eax, DWORD PTR _curMsg$[ebp]
  00285	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00288	51		 push	 ecx
  00289	8b 55 f8	 mov	 edx, DWORD PTR _curMsg$[ebp]
  0028c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0028f	50		 push	 eax
  00290	8b 4d f8	 mov	 ecx, DWORD PTR _curMsg$[ebp]
  00293	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00296	52		 push	 edx
  00297	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	e8 00 00 00 00	 call	 ?WindowProc@CSubclassWnd@@MAEJIIJ@Z ; CSubclassWnd::WindowProc

; 104  : }

  0029f	83 c4 08	 add	 esp, 8
  002a2	3b ec		 cmp	 ebp, esp
  002a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a9	8b e5		 mov	 esp, ebp
  002ab	5d		 pop	 ebp
  002ac	c3		 ret	 0
?Default@CSubclassWnd@@IAEJXZ ENDP			; CSubclassWnd::Default
_TEXT	ENDS
PUBLIC	?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
EXTRN	?AssertValid@CObject@@UBEXXZ:NEAR		; CObject::AssertValid
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?AssertValid@CSubclassWnd@@UBEXXZ PROC NEAR		; CSubclassWnd::AssertValid
; _this$ = ecx

; 108  : {

  002b0	55		 push	 ebp
  002b1	8b ec		 mov	 ebp, esp
  002b3	83 ec 08	 sub	 esp, 8
  002b6	56		 push	 esi
  002b7	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  002be	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  002c5	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 	CSubclassWnd* p = NULL;

  002c8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0

; 110  : 	CObject::AssertValid();

  002cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d2	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 111  : 	ASSERT(m_hWnd==NULL || ::IsWindow(m_hWnd));

  002d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002da	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  002de	74 2b		 je	 SHORT $L187678
  002e0	8b f4		 mov	 esi, esp
  002e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002e8	52		 push	 edx
  002e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  002ef	3b f4		 cmp	 esi, esp
  002f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f6	85 c0		 test	 eax, eax
  002f8	75 11		 jne	 SHORT $L187678
  002fa	6a 6f		 push	 111			; 0000006fH
  002fc	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00301	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00306	85 c0		 test	 eax, eax
  00308	74 01		 je	 SHORT $L187678
  0030a	cc		 int	 3
$L187678:

; 112  : 	if (m_hWnd) {

  0030b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030e	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00312	74 4a		 je	 SHORT $L187116

; 113  : 		for (p = theHookMap.Lookup(m_hWnd); p; p=p->m_pNext) {

  00314	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00317	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  00320	8b c8		 mov	 ecx, eax
  00322	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  00327	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  0032a	eb 09		 jmp	 SHORT $L187120
$L187121:
  0032c	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0032f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00332	89 55 f8	 mov	 DWORD PTR _p$[ebp], edx
$L187120:
  00335	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  00339	74 0c		 je	 SHORT $L187122

; 114  : 			if (p==this)

  0033b	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0033e	3b 45 fc	 cmp	 eax, DWORD PTR _this$[ebp]
  00341	75 02		 jne	 SHORT $L187123

; 115  : 				break;

  00343	eb 02		 jmp	 SHORT $L187122
$L187123:

; 116  : 		}

  00345	eb e5		 jmp	 SHORT $L187121
$L187122:

; 117  : 		ASSERT(p); // should have found it!

  00347	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0034b	75 11		 jne	 SHORT $L187116
  0034d	6a 75		 push	 117			; 00000075H
  0034f	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00354	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00359	85 c0		 test	 eax, eax
  0035b	74 01		 je	 SHORT $L187116
  0035d	cc		 int	 3
$L187116:

; 118  : 	}
; 119  : }

  0035e	5e		 pop	 esi
  0035f	83 c4 08	 add	 esp, 8
  00362	3b ec		 cmp	 ebp, esp
  00364	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00369	8b e5		 mov	 esp, ebp
  0036b	5d		 pop	 ebp
  0036c	c3		 ret	 0
?AssertValid@CSubclassWnd@@UBEXXZ ENDP			; CSubclassWnd::AssertValid
_TEXT	ENDS
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:NEAR	; CObject::Dump
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@CSubclassWnd@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CSubclassWnd::Dump
; _this$ = ecx

; 122  : {

  00370	55		 push	 ebp
  00371	8b ec		 mov	 ebp, esp
  00373	51		 push	 ecx
  00374	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0037b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	CObject::Dump(dc);

  0037e	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00381	50		 push	 eax
  00382	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00385	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 124  : }

  0038a	83 c4 04	 add	 esp, 4
  0038d	3b ec		 cmp	 ebp, esp
  0038f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00394	8b e5		 mov	 esp, ebp
  00396	5d		 pop	 ebp
  00397	c2 04 00	 ret	 4
?Dump@CSubclassWnd@@UBEXAAVCDumpContext@@@Z ENDP	; CSubclassWnd::Dump
_TEXT	ENDS
PUBLIC	?HookWndProc@@YGJPAUHWND__@@IIJ@Z		; HookWndProc
PUBLIC	?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z	; CSubclassWndMap::RemoveAll
EXTRN	@_RTC_CheckStackVars@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_wndproc$187141 = -52					; size = 4
_lr$ = -48						; size = 4
_pSubclassWnd$ = -44					; size = 4
_oldMsg$ = -36						; size = 28
_curMsg$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_msg$ = 12						; size = 4
_wp$ = 16						; size = 4
_lp$ = 20						; size = 4
?HookWndProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR		; HookWndProc

; 134  : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	83 ec 34	 sub	 esp, 52			; 00000034H
  003a6	56		 push	 esi
  003a7	57		 push	 edi
  003a8	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  003ab	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  003b0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  003b5	f3 ab		 rep stosd

; 135  : #ifdef _USRDLL
; 136  : 	// If this is a DLL, need to set up MFC state
; 137  : 	AFX_MANAGE_STATE(AfxGetStaticModuleState());
; 138  : #endif
; 139  : 
; 140  : 	// Set up MFC message state just in case anyone wants it
; 141  : 	// This is just like AfxCallWindowProc, but we can't use that because
; 142  : 	// a CSubclassWnd is not a CWnd.
; 143  : 	//
; 144  : 	MSG& curMsg = AfxGetThreadState()->m_lastSentMsg;

  003b7	e8 00 00 00 00	 call	 ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ ; AfxGetThreadState
  003bc	83 c0 5c	 add	 eax, 92			; 0000005cH
  003bf	89 45 fc	 mov	 DWORD PTR _curMsg$[ebp], eax

; 145  : 	MSG  oldMsg = curMsg;   // save for nesting

  003c2	8b 75 fc	 mov	 esi, DWORD PTR _curMsg$[ebp]
  003c5	b9 07 00 00 00	 mov	 ecx, 7
  003ca	8d 7d dc	 lea	 edi, DWORD PTR _oldMsg$[ebp]
  003cd	f3 a5		 rep movsd

; 146  : 	curMsg.hwnd		= hwnd;

  003cf	8b 45 fc	 mov	 eax, DWORD PTR _curMsg$[ebp]
  003d2	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  003d5	89 08		 mov	 DWORD PTR [eax], ecx

; 147  : 	curMsg.message = msg;

  003d7	8b 55 fc	 mov	 edx, DWORD PTR _curMsg$[ebp]
  003da	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  003dd	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 148  : 	curMsg.wParam  = wp;

  003e0	8b 4d fc	 mov	 ecx, DWORD PTR _curMsg$[ebp]
  003e3	8b 55 10	 mov	 edx, DWORD PTR _wp$[ebp]
  003e6	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 149  : 	curMsg.lParam  = lp;

  003e9	8b 45 fc	 mov	 eax, DWORD PTR _curMsg$[ebp]
  003ec	8b 4d 14	 mov	 ecx, DWORD PTR _lp$[ebp]
  003ef	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 150  : 
; 151  : 	// Get hook object for this window. Get from hook map
; 152  : 	CSubclassWnd* pSubclassWnd = theHookMap.Lookup(hwnd);

  003f2	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  003f5	52		 push	 edx
  003f6	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  003fb	8b c8		 mov	 ecx, eax
  003fd	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  00402	89 45 d4	 mov	 DWORD PTR _pSubclassWnd$[ebp], eax

; 153  : 	ASSERT(pSubclassWnd);

  00405	83 7d d4 00	 cmp	 DWORD PTR _pSubclassWnd$[ebp], 0
  00409	75 14		 jne	 SHORT $L187682
  0040b	68 99 00 00 00	 push	 153			; 00000099H
  00410	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00415	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0041a	85 c0		 test	 eax, eax
  0041c	74 01		 je	 SHORT $L187682
  0041e	cc		 int	 3
$L187682:

; 154  : 
; 155  : 	LRESULT lr;
; 156  : 	if (msg==WM_NCDESTROY) {

  0041f	81 7d 0c 82 00
	00 00		 cmp	 DWORD PTR _msg$[ebp], 130 ; 00000082H
  00426	75 41		 jne	 SHORT $L187140

; 157  : 		// Window is being destroyed: unhook all hooks (for this window)
; 158  : 		// and pass msg to orginal window proc
; 159  : 		//
; 160  : 		WNDPROC wndproc = pSubclassWnd->m_pOldWndProc;

  00428	8b 4d d4	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  0042b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0042e	89 55 cc	 mov	 DWORD PTR _wndproc$187141[ebp], edx

; 161  : 		theHookMap.RemoveAll(hwnd);

  00431	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00434	50		 push	 eax
  00435	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  0043a	8b c8		 mov	 ecx, eax
  0043c	e8 00 00 00 00	 call	 ?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z ; CSubclassWndMap::RemoveAll

; 162  : 		lr = ::CallWindowProc(wndproc, hwnd, msg, wp, lp);

  00441	8b f4		 mov	 esi, esp
  00443	8b 4d 14	 mov	 ecx, DWORD PTR _lp$[ebp]
  00446	51		 push	 ecx
  00447	8b 55 10	 mov	 edx, DWORD PTR _wp$[ebp]
  0044a	52		 push	 edx
  0044b	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  0044e	50		 push	 eax
  0044f	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00452	51		 push	 ecx
  00453	8b 55 cc	 mov	 edx, DWORD PTR _wndproc$187141[ebp]
  00456	52		 push	 edx
  00457	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  0045d	3b f4		 cmp	 esi, esp
  0045f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00464	89 45 d0	 mov	 DWORD PTR _lr$[ebp], eax

; 163  : 
; 164  : 	} else {

  00467	eb 23		 jmp	 SHORT $L187142
$L187140:

; 165  : 		// pass to msg hook
; 166  : 		lr = pSubclassWnd->WindowProc(msg, wp, lp);

  00469	8b f4		 mov	 esi, esp
  0046b	8b 45 14	 mov	 eax, DWORD PTR _lp$[ebp]
  0046e	50		 push	 eax
  0046f	8b 4d 10	 mov	 ecx, DWORD PTR _wp$[ebp]
  00472	51		 push	 ecx
  00473	8b 55 0c	 mov	 edx, DWORD PTR _msg$[ebp]
  00476	52		 push	 edx
  00477	8b 45 d4	 mov	 eax, DWORD PTR _pSubclassWnd$[ebp]
  0047a	8b 10		 mov	 edx, DWORD PTR [eax]
  0047c	8b 4d d4	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  0047f	ff 52 14	 call	 DWORD PTR [edx+20]
  00482	3b f4		 cmp	 esi, esp
  00484	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00489	89 45 d0	 mov	 DWORD PTR _lr$[ebp], eax
$L187142:

; 167  : 	}
; 168  : 	curMsg = oldMsg;			// pop state

  0048c	b9 07 00 00 00	 mov	 ecx, 7
  00491	8d 75 dc	 lea	 esi, DWORD PTR _oldMsg$[ebp]
  00494	8b 7d fc	 mov	 edi, DWORD PTR _curMsg$[ebp]
  00497	f3 a5		 rep movsd

; 169  : 	return lr;

  00499	8b 45 d0	 mov	 eax, DWORD PTR _lr$[ebp]

; 170  : }

  0049c	52		 push	 edx
  0049d	8b cd		 mov	 ecx, ebp
  0049f	50		 push	 eax
  004a0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187685
  004a6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004ab	58		 pop	 eax
  004ac	5a		 pop	 edx
  004ad	5f		 pop	 edi
  004ae	5e		 pop	 esi
  004af	83 c4 34	 add	 esp, 52			; 00000034H
  004b2	3b ec		 cmp	 ebp, esp
  004b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004b9	8b e5		 mov	 esp, ebp
  004bb	5d		 pop	 ebp
  004bc	c2 10 00	 ret	 16			; 00000010H
$L187685:
  004bf	01 00 00 00	 DD	 1
  004c3	00 00 00 00	 DD	 $L187684
$L187684:
  004c7	dc ff ff ff	 DD	 -36			; ffffffdcH
  004cb	1c 00 00 00	 DD	 28			; 0000001cH
  004cf	00 00 00 00	 DD	 $L187683
$L187683:
  004d3	6f		 DB	 111			; 0000006fH
  004d4	6c		 DB	 108			; 0000006cH
  004d5	64		 DB	 100			; 00000064H
  004d6	4d		 DB	 77			; 0000004dH
  004d7	73		 DB	 115			; 00000073H
  004d8	67		 DB	 103			; 00000067H
  004d9	00		 DB	 0
?HookWndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; HookWndProc
_TEXT	ENDS
PUBLIC	??0CSubclassWndMap@@QAE@XZ			; CSubclassWndMap::CSubclassWndMap
PUBLIC	??_7CSubclassWndMap@@6B@			; CSubclassWndMap::`vftable'
PUBLIC	??_GCSubclassWndMap@@UAEPAXI@Z			; CSubclassWndMap::`scalar deleting destructor'
PUBLIC	??_R4CSubclassWndMap@@6B@			; CSubclassWndMap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSubclassWndMap@@@8			; CSubclassWndMap `RTTI Type Descriptor'
PUBLIC	??_R3CSubclassWndMap@@8				; CSubclassWndMap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSubclassWndMap@@8				; CSubclassWndMap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CSubclassWndMap@@8			; CSubclassWndMap::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@8CMapPtrToPtr@@8			; CMapPtrToPtr::`RTTI Base Class Descriptor at (0,-1,0,9)'
PUBLIC	??_R0?AVCMapPtrToPtr@@@8			; CMapPtrToPtr `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@8CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,9)'
EXTRN	?Dump@CMapPtrToPtr@@UBEXAAVCDumpContext@@@Z:NEAR ; CMapPtrToPtr::Dump
EXTRN	?AssertValid@CMapPtrToPtr@@UBEXXZ:NEAR		; CMapPtrToPtr::AssertValid
EXTRN	??_ECSubclassWndMap@@UAEPAXI@Z:NEAR		; CSubclassWndMap::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CMapPtrToPtr@@UBEPAUCRuntimeClass@@XZ:NEAR ; CMapPtrToPtr::GetRuntimeClass
EXTRN	??0CMapPtrToPtr@@QAE@H@Z:NEAR			; CMapPtrToPtr::CMapPtrToPtr
;	COMDAT ??_7CSubclassWndMap@@6B@
CONST	SEGMENT
??_7CSubclassWndMap@@6B@ DD FLAT:??_R4CSubclassWndMap@@6B@ ; CSubclassWndMap::`vftable'
	DD	FLAT:?GetRuntimeClass@CMapPtrToPtr@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECSubclassWndMap@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CMapPtrToPtr@@UBEXXZ
	DD	FLAT:?Dump@CMapPtrToPtr@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CSubclassWndMap@@6B@
rdata$r	SEGMENT
??_R4CSubclassWndMap@@6B@ DD 00H			; CSubclassWndMap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSubclassWndMap@@@8
	DD	FLAT:??_R3CSubclassWndMap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSubclassWndMap@@@8
_DATA	SEGMENT
??_R0?AVCSubclassWndMap@@@8 DD FLAT:??_7type_info@@6B@	; CSubclassWndMap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSubclassWndMap@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CSubclassWndMap@@8
rdata$r	SEGMENT
??_R3CSubclassWndMap@@8 DD 00H				; CSubclassWndMap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CSubclassWndMap@@8
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWndMap@@8
rdata$r	SEGMENT
??_R2CSubclassWndMap@@8 DD FLAT:??_R1A@?0A@A@CSubclassWndMap@@8 ; CSubclassWndMap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@8CMapPtrToPtr@@8
	DD	FLAT:??_R1A@?0A@8CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWndMap@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CSubclassWndMap@@8 DD FLAT:??_R0?AVCSubclassWndMap@@@8 ; CSubclassWndMap::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@8CMapPtrToPtr@@8
rdata$r	SEGMENT
??_R1A@?0A@8CMapPtrToPtr@@8 DD FLAT:??_R0?AVCMapPtrToPtr@@@8 ; CMapPtrToPtr::`RTTI Base Class Descriptor at (0,-1,0,9)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	09H
rdata$r	ENDS
;	COMDAT ??_R0?AVCMapPtrToPtr@@@8
_DATA	SEGMENT
??_R0?AVCMapPtrToPtr@@@8 DD FLAT:??_7type_info@@6B@	; CMapPtrToPtr `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMapPtrToPtr@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@8CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@8CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,9)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	09H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSubclassWndMap@@QAE@XZ PROC NEAR			; CSubclassWndMap::CSubclassWndMap
; _this$ = ecx

; 176  : {

  004e0	55		 push	 ebp
  004e1	8b ec		 mov	 ebp, esp
  004e3	51		 push	 ecx
  004e4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  004eb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  004ee	6a 0a		 push	 10			; 0000000aH
  004f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f3	e8 00 00 00 00	 call	 ??0CMapPtrToPtr@@QAE@H@Z ; CMapPtrToPtr::CMapPtrToPtr
  004f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004fb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWndMap@@6B@

; 177  : }

  00501	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00504	83 c4 04	 add	 esp, 4
  00507	3b ec		 cmp	 ebp, esp
  00509	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0050e	8b e5		 mov	 esp, ebp
  00510	5d		 pop	 ebp
  00511	c3		 ret	 0
??0CSubclassWndMap@@QAE@XZ ENDP				; CSubclassWndMap::CSubclassWndMap
_TEXT	ENDS
PUBLIC	??1CSubclassWndMap@@UAE@XZ			; CSubclassWndMap::~CSubclassWndMap
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCSubclassWndMap@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSubclassWndMap@@UAEPAXI@Z PROC NEAR		; CSubclassWndMap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CSubclassWndMap@@UAE@XZ ; CSubclassWndMap::~CSubclassWndMap
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187149
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187149:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GCSubclassWndMap@@UAEPAXI@Z ENDP			; CSubclassWndMap::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CMapPtrToPtr@@UAE@XZ:NEAR			; CMapPtrToPtr::~CMapPtrToPtr
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSubclassWndMap@@UAE@XZ PROC NEAR			; CSubclassWndMap::~CSubclassWndMap
; _this$ = ecx

; 180  : {

  00520	55		 push	 ebp
  00521	8b ec		 mov	 ebp, esp
  00523	51		 push	 ecx
  00524	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0052b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0052e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00531	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWndMap@@6B@

; 181  : // This assert bombs when posting WM_QUIT, so I've deleted it.
; 182  : //	ASSERT(IsEmpty());	// all hooks should be removed!	
; 183  : }

  00537	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0053a	e8 00 00 00 00	 call	 ??1CMapPtrToPtr@@UAE@XZ	; CMapPtrToPtr::~CMapPtrToPtr
  0053f	83 c4 04	 add	 esp, 4
  00542	3b ec		 cmp	 ebp, esp
  00544	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00549	8b e5		 mov	 esp, ebp
  0054b	5d		 pop	 ebp
  0054c	c3		 ret	 0
??1CSubclassWndMap@@UAE@XZ ENDP				; CSubclassWndMap::~CSubclassWndMap
_TEXT	ENDS
EXTRN	_atexit:NEAR
;	COMDAT ?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
_BSS	SEGMENT
?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A DB 01cH DUP (?) ; `CSubclassWndMap::GetHookMap'::`2'::theMap
_BSS	ENDS
;	COMDAT ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
_BSS	SEGMENT
?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA DD 01H DUP (?) ; `CSubclassWndMap::GetHookMap'::`2'::$S5
_BSS	ENDS
xdata$x	SEGMENT
$T187697 DD	0ffffffffH
	DD	FLAT:$L187693
$T187695 DD	019930520H
	DD	01H
	DD	FLAT:$T187697
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?GetHookMap@CSubclassWndMap@@SAAAV1@XZ PROC NEAR	; CSubclassWndMap::GetHookMap

; 189  : {

  00550	55		 push	 ebp
  00551	8b ec		 mov	 ebp, esp
  00553	6a ff		 push	 -1
  00555	68 00 00 00 00	 push	 __ehhandler$?GetHookMap@CSubclassWndMap@@SAAAV1@XZ
  0055a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00560	50		 push	 eax
  00561	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp

; 190  : 	// By creating theMap here, C++ doesn't instantiate it until/unless
; 191  : 	// it's ever used! This is a good trick to use in C++, to
; 192  : 	// instantiate/initialize a static object the first time it's used.
; 193  : 	//
; 194  : 	static CSubclassWndMap theMap;

  00568	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
  0056d	83 e0 01	 and	 eax, 1
  00570	75 34		 jne	 SHORT $L187159
  00572	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
  00578	83 c9 01	 or	 ecx, 1
  0057b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA, ecx
  00581	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00588	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
  0058d	e8 00 00 00 00	 call	 ??0CSubclassWndMap@@QAE@XZ ; CSubclassWndMap::CSubclassWndMap
  00592	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00597	e8 00 00 00 00	 call	 _atexit
  0059c	83 c4 04	 add	 esp, 4
  0059f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
$L187159:

; 195  : 	return theMap;

  005a6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A

; 196  : }

  005ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  005b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  005b8	3b ec		 cmp	 ebp, esp
  005ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005bf	8b e5		 mov	 esp, ebp
  005c1	5d		 pop	 ebp
  005c2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L187693:
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
  00017	83 e0 fe	 and	 eax, -2			; fffffffeH
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA, eax
  0001f	c3		 ret	 0
__ehhandler$?GetHookMap@CSubclassWndMap@@SAAAV1@XZ:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T187695
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ENDP		; CSubclassWndMap::GetHookMap
; Function compile flags: /Odt /RTCsu
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
  00008	e8 00 00 00 00	 call	 ??1CSubclassWndMap@@UAE@XZ ; CSubclassWndMap::~CSubclassWndMap
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_$E6	ENDP
text$yd	ENDS
EXTRN	__imp__SetWindowLongA@12:NEAR
EXTRN	?SetAt@CMapPtrToPtr@@QAEXPAX0@Z:NEAR		; CMapPtrToPtr::SetAt
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_pSubclassWnd$ = 12					; size = 4
?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z PROC NEAR ; CSubclassWndMap::Add
; _this$ = ecx

; 202  : {

  005d0	55		 push	 ebp
  005d1	8b ec		 mov	 ebp, esp
  005d3	51		 push	 ecx
  005d4	56		 push	 esi
  005d5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  005dc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	ASSERT(hwnd && ::IsWindow(hwnd));

  005df	83 7d 08 00	 cmp	 DWORD PTR _hwnd$[ebp], 0
  005e3	74 17		 je	 SHORT $L187700
  005e5	8b f4		 mov	 esi, esp
  005e7	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  005ea	50		 push	 eax
  005eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  005f1	3b f4		 cmp	 esi, esp
  005f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005f8	85 c0		 test	 eax, eax
  005fa	75 14		 jne	 SHORT $L187701
$L187700:
  005fc	68 cb 00 00 00	 push	 203			; 000000cbH
  00601	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00606	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0060b	85 c0		 test	 eax, eax
  0060d	74 01		 je	 SHORT $L187701
  0060f	cc		 int	 3
$L187701:

; 204  : 
; 205  : 	// Add to front of list
; 206  : 	pSubclassWnd->m_pNext = Lookup(hwnd);

  00610	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00613	52		 push	 edx
  00614	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00617	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  0061c	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  0061f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 207  : 	SetAt(hwnd, pSubclassWnd);

  00622	8b 55 0c	 mov	 edx, DWORD PTR _pSubclassWnd$[ebp]
  00625	52		 push	 edx
  00626	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00629	50		 push	 eax
  0062a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0062d	e8 00 00 00 00	 call	 ?SetAt@CMapPtrToPtr@@QAEXPAX0@Z ; CMapPtrToPtr::SetAt

; 208  : 	
; 209  : 	if (pSubclassWnd->m_pNext==NULL) {

  00632	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00635	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00639	75 22		 jne	 SHORT $L187168

; 210  : 		// If this is the first hook added, subclass the window
; 211  : #pragma warning( disable: 4311 4312)	
; 212  : 		pSubclassWnd->m_pOldWndProc = 
; 213  : 			(WNDPROC)SetWindowLong(hwnd, GWL_WNDPROC, (DWORD)HookWndProc);

  0063b	8b f4		 mov	 esi, esp
  0063d	68 00 00 00 00	 push	 OFFSET FLAT:?HookWndProc@@YGJPAUHWND__@@IIJ@Z ; HookWndProc
  00642	6a fc		 push	 -4			; fffffffcH
  00644	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00647	52		 push	 edx
  00648	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  0064e	3b f4		 cmp	 esi, esp
  00650	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00655	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00658	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 214  : #pragma warning( default: 4311 4312)	
; 215  : 	} else {

  0065b	eb 0f		 jmp	 SHORT $L187171
$L187168:

; 216  : 		// just copy wndproc from next hook
; 217  : 		pSubclassWnd->m_pOldWndProc = pSubclassWnd->m_pNext->m_pOldWndProc;

  0065d	8b 55 0c	 mov	 edx, DWORD PTR _pSubclassWnd$[ebp]
  00660	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00663	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00666	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00669	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$L187171:

; 218  : 	}
; 219  : 	ASSERT(pSubclassWnd->m_pOldWndProc);

  0066c	8b 45 0c	 mov	 eax, DWORD PTR _pSubclassWnd$[ebp]
  0066f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00673	75 14		 jne	 SHORT $L187166
  00675	68 db 00 00 00	 push	 219			; 000000dbH
  0067a	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0067f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00684	85 c0		 test	 eax, eax
  00686	74 01		 je	 SHORT $L187166
  00688	cc		 int	 3
$L187166:

; 220  : }

  00689	5e		 pop	 esi
  0068a	83 c4 04	 add	 esp, 4
  0068d	3b ec		 cmp	 ebp, esp
  0068f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00694	8b e5		 mov	 esp, ebp
  00696	5d		 pop	 ebp
  00697	c2 08 00	 ret	 8
?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z ENDP ; CSubclassWndMap::Add
_TEXT	ENDS
EXTRN	?RemoveKey@CMapPtrToPtr@@QAEHPAX@Z:NEAR		; CMapPtrToPtr::RemoveKey
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pHook$ = -12						; size = 4
_hwnd$ = -8						; size = 4
_this$ = -4						; size = 4
_pUnHook$ = 8						; size = 4
?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z PROC NEAR ; CSubclassWndMap::Remove
; _this$ = ecx

; 226  : {

  006a0	55		 push	 ebp
  006a1	8b ec		 mov	 ebp, esp
  006a3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  006a6	56		 push	 esi
  006a7	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  006ae	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  006b5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  006bc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 227  : 	HWND hwnd = pUnHook->m_hWnd;

  006bf	8b 45 08	 mov	 eax, DWORD PTR _pUnHook$[ebp]
  006c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006c5	89 4d f8	 mov	 DWORD PTR _hwnd$[ebp], ecx

; 228  : 	ASSERT(hwnd && ::IsWindow(hwnd));

  006c8	83 7d f8 00	 cmp	 DWORD PTR _hwnd$[ebp], 0
  006cc	74 17		 je	 SHORT $L187704
  006ce	8b f4		 mov	 esi, esp
  006d0	8b 55 f8	 mov	 edx, DWORD PTR _hwnd$[ebp]
  006d3	52		 push	 edx
  006d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  006da	3b f4		 cmp	 esi, esp
  006dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006e1	85 c0		 test	 eax, eax
  006e3	75 14		 jne	 SHORT $L187705
$L187704:
  006e5	68 e4 00 00 00	 push	 228			; 000000e4H
  006ea	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  006ef	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  006f4	85 c0		 test	 eax, eax
  006f6	74 01		 je	 SHORT $L187705
  006f8	cc		 int	 3
$L187705:

; 229  : 
; 230  : 	CSubclassWnd* pHook = Lookup(hwnd);

  006f9	8b 4d f8	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  006fc	51		 push	 ecx
  006fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00700	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  00705	89 45 f4	 mov	 DWORD PTR _pHook$[ebp], eax

; 231  : 	ASSERT(pHook);

  00708	83 7d f4 00	 cmp	 DWORD PTR _pHook$[ebp], 0
  0070c	75 14		 jne	 SHORT $L187706
  0070e	68 e7 00 00 00	 push	 231			; 000000e7H
  00713	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00718	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0071d	85 c0		 test	 eax, eax
  0071f	74 01		 je	 SHORT $L187706
  00721	cc		 int	 3
$L187706:

; 232  : 	if (pHook==pUnHook) {

  00722	8b 45 f4	 mov	 eax, DWORD PTR _pHook$[ebp]
  00725	3b 45 08	 cmp	 eax, DWORD PTR _pUnHook$[ebp]
  00728	75 48		 jne	 SHORT $L187187

; 233  : 		// hook to remove is the one in the hash table: replace w/next
; 234  : 		if (pHook->m_pNext)

  0072a	8b 4d f4	 mov	 ecx, DWORD PTR _pHook$[ebp]
  0072d	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00731	74 15		 je	 SHORT $L187182

; 235  : 			SetAt(hwnd, pHook->m_pNext);

  00733	8b 55 f4	 mov	 edx, DWORD PTR _pHook$[ebp]
  00736	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00739	50		 push	 eax
  0073a	8b 4d f8	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0073d	51		 push	 ecx
  0073e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00741	e8 00 00 00 00	 call	 ?SetAt@CMapPtrToPtr@@QAEXPAX0@Z ; CMapPtrToPtr::SetAt

; 236  : 		else {

  00746	eb 28		 jmp	 SHORT $L187183
$L187182:

; 237  : 			// This is the last hook for this window: restore wnd proc
; 238  : 			RemoveKey(hwnd);

  00748	8b 55 f8	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0074b	52		 push	 edx
  0074c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0074f	e8 00 00 00 00	 call	 ?RemoveKey@CMapPtrToPtr@@QAEHPAX@Z ; CMapPtrToPtr::RemoveKey

; 239  : #pragma warning( disable: 4311)	
; 240  : 			SetWindowLong(hwnd, GWL_WNDPROC, (DWORD)pHook->m_pOldWndProc);

  00754	8b f4		 mov	 esi, esp
  00756	8b 45 f4	 mov	 eax, DWORD PTR _pHook$[ebp]
  00759	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0075c	51		 push	 ecx
  0075d	6a fc		 push	 -4			; fffffffcH
  0075f	8b 55 f8	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00762	52		 push	 edx
  00763	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00769	3b f4		 cmp	 esi, esp
  0076b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187183:

; 241  : #pragma warning( default: 4311)	
; 242  : 		}
; 243  : 	} else {

  00770	eb 47		 jmp	 SHORT $L187176
$L187187:

; 244  : 		// Hook to remove is in the middle: just remove from linked list
; 245  : 		while (pHook->m_pNext!=pUnHook)

  00772	8b 45 f4	 mov	 eax, DWORD PTR _pHook$[ebp]
  00775	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00778	3b 4d 08	 cmp	 ecx, DWORD PTR _pUnHook$[ebp]
  0077b	74 0b		 je	 SHORT $L187188

; 246  : 			pHook = pHook->m_pNext;

  0077d	8b 55 f4	 mov	 edx, DWORD PTR _pHook$[ebp]
  00780	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00783	89 45 f4	 mov	 DWORD PTR _pHook$[ebp], eax
  00786	eb ea		 jmp	 SHORT $L187187
$L187188:

; 247  : 		ASSERT(pHook && pHook->m_pNext==pUnHook);

  00788	83 7d f4 00	 cmp	 DWORD PTR _pHook$[ebp], 0
  0078c	74 0b		 je	 SHORT $L187707
  0078e	8b 4d f4	 mov	 ecx, DWORD PTR _pHook$[ebp]
  00791	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00794	3b 55 08	 cmp	 edx, DWORD PTR _pUnHook$[ebp]
  00797	74 14		 je	 SHORT $L187708
$L187707:
  00799	68 f7 00 00 00	 push	 247			; 000000f7H
  0079e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  007a3	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  007a8	85 c0		 test	 eax, eax
  007aa	74 01		 je	 SHORT $L187708
  007ac	cc		 int	 3
$L187708:

; 248  : 		pHook->m_pNext = pUnHook->m_pNext;

  007ad	8b 4d f4	 mov	 ecx, DWORD PTR _pHook$[ebp]
  007b0	8b 55 08	 mov	 edx, DWORD PTR _pUnHook$[ebp]
  007b3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  007b6	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L187176:

; 249  : 	}
; 250  : }

  007b9	5e		 pop	 esi
  007ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  007bd	3b ec		 cmp	 ebp, esp
  007bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007c4	8b e5		 mov	 esp, ebp
  007c6	5d		 pop	 ebp
  007c7	c2 04 00	 ret	 4
?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z ENDP	; CSubclassWndMap::Remove
; Function compile flags: /Odt /RTCsu
_pSubclassWnd$ = -8					; size = 4
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z PROC NEAR	; CSubclassWndMap::RemoveAll
; _this$ = ecx

; 256  : {

  007d0	55		 push	 ebp
  007d1	8b ec		 mov	 ebp, esp
  007d3	83 ec 08	 sub	 esp, 8
  007d6	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  007dd	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  007e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$L187196:

; 257  : 	CSubclassWnd* pSubclassWnd;
; 258  : 	while ((pSubclassWnd = Lookup(hwnd))!=NULL)

  007e7	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  007ea	50		 push	 eax
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ee	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  007f3	89 45 f8	 mov	 DWORD PTR _pSubclassWnd$[ebp], eax
  007f6	83 7d f8 00	 cmp	 DWORD PTR _pSubclassWnd$[ebp], 0
  007fa	74 0c		 je	 SHORT $L187193

; 259  : 		pSubclassWnd->HookWindow((HWND)NULL);	// (unhook)

  007fc	6a 00		 push	 0
  007fe	8b 4d f8	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00801	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ; CSubclassWnd::HookWindow
  00806	eb df		 jmp	 SHORT $L187196
$L187193:

; 260  : }

  00808	83 c4 08	 add	 esp, 8
  0080b	3b ec		 cmp	 ebp, esp
  0080d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00812	8b e5		 mov	 esp, ebp
  00814	5d		 pop	 ebp
  00815	c2 04 00	 ret	 4
?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z ENDP	; CSubclassWndMap::RemoveAll
_TEXT	ENDS
EXTRN	?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z:NEAR ; CObject::IsKindOf
EXTRN	?Lookup@CMapPtrToPtr@@QBEHPAXAAPAX@Z:NEAR	; CMapPtrToPtr::Lookup
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pFound$ = -12						; size = 4
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z PROC NEAR ; CSubclassWndMap::Lookup
; _this$ = ecx

; 266  : {

  00820	55		 push	 ebp
  00821	8b ec		 mov	 ebp, esp
  00823	83 ec 10	 sub	 esp, 16			; 00000010H
  00826	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0082b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0082e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00831	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00834	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00837	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 	CSubclassWnd* pFound = NULL;

  0083a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pFound$[ebp], 0

; 268  : 	if (!CMapPtrToPtr::Lookup(hwnd, (void*&)pFound))

  00841	8d 45 f4	 lea	 eax, DWORD PTR _pFound$[ebp]
  00844	50		 push	 eax
  00845	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00848	51		 push	 ecx
  00849	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0084c	e8 00 00 00 00	 call	 ?Lookup@CMapPtrToPtr@@QBEHPAXAAPAX@Z ; CMapPtrToPtr::Lookup
  00851	85 c0		 test	 eax, eax
  00853	75 04		 jne	 SHORT $L187205

; 269  : 		return NULL;

  00855	33 c0		 xor	 eax, eax
  00857	eb 29		 jmp	 SHORT $L187202
$L187205:

; 270  : 	ASSERT_KINDOF(CSubclassWnd, pFound);

  00859	e8 00 00 00 00	 call	 ?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ ; CSubclassWnd::GetThisClass
  0085e	50		 push	 eax
  0085f	8b 4d f4	 mov	 ecx, DWORD PTR _pFound$[ebp]
  00862	e8 00 00 00 00	 call	 ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ; CObject::IsKindOf
  00867	85 c0		 test	 eax, eax
  00869	75 14		 jne	 SHORT $L187711
  0086b	68 0e 01 00 00	 push	 270			; 0000010eH
  00870	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00875	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0087a	85 c0		 test	 eax, eax
  0087c	74 01		 je	 SHORT $L187711
  0087e	cc		 int	 3
$L187711:

; 271  : 	return pFound;

  0087f	8b 45 f4	 mov	 eax, DWORD PTR _pFound$[ebp]
$L187202:

; 272  : }

  00882	52		 push	 edx
  00883	8b cd		 mov	 ecx, ebp
  00885	50		 push	 eax
  00886	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187714
  0088c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00891	58		 pop	 eax
  00892	5a		 pop	 edx
  00893	83 c4 10	 add	 esp, 16			; 00000010H
  00896	3b ec		 cmp	 ebp, esp
  00898	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0089d	8b e5		 mov	 esp, ebp
  0089f	5d		 pop	 ebp
  008a0	c2 04 00	 ret	 4
$L187714:
  008a3	01 00 00 00	 DD	 1
  008a7	00 00 00 00	 DD	 $L187713
$L187713:
  008ab	f4 ff ff ff	 DD	 -12			; fffffff4H
  008af	04 00 00 00	 DD	 4
  008b3	00 00 00 00	 DD	 $L187712
$L187712:
  008b7	70		 DB	 112			; 00000070H
  008b8	46		 DB	 70			; 00000046H
  008b9	6f		 DB	 111			; 0000006fH
  008ba	75		 DB	 117			; 00000075H
  008bb	6e		 DB	 110			; 0000006eH
  008bc	64		 DB	 100			; 00000064H
  008bd	00		 DB	 0
?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ENDP ; CSubclassWndMap::Lookup
_TEXT	ENDS
END
