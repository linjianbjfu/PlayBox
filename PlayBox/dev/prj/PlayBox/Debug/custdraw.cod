; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\CommonControl\SkinScroll\custdraw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?fCustomDraw@@3HA				; fCustomDraw
PUBLIC	?hdcSkin@@3PAUHDC__@@A				; hdcSkin
PUBLIC	?hSkinBmp@@3PAUHBITMAP__@@A			; hSkinBmp
PUBLIC	?hpen@@3PAUHPEN__@@A				; hpen
PUBLIC	?oldpen@@3PAUHPEN__@@A				; oldpen
PUBLIC	?whitepen@@3PAUHPEN__@@A			; whitepen
PUBLIC	?hfont@@3PAUHFONT__@@A				; hfont
PUBLIC	?hemf@@3PAUHENHMETAFILE__@@A			; hemf
PUBLIC	?cdt_horz_normal@@3PAUCustomDrawTable@@A	; cdt_horz_normal
PUBLIC	?cdt_horz_hot@@3PAUCustomDrawTable@@A		; cdt_horz_hot
PUBLIC	?cdt_horz_active@@3PAUCustomDrawTable@@A	; cdt_horz_active
PUBLIC	?cdt_vert_normal@@3PAUCustomDrawTable@@A	; cdt_vert_normal
PUBLIC	?cdt_vert_hot@@3PAUCustomDrawTable@@A		; cdt_vert_hot
PUBLIC	?cdt_vert_active@@3PAUCustomDrawTable@@A	; cdt_vert_active
_BSS	SEGMENT
?hdcSkin@@3PAUHDC__@@A DD 01H DUP (?)			; hdcSkin
?hSkinBmp@@3PAUHBITMAP__@@A DD 01H DUP (?)		; hSkinBmp
?hpen@@3PAUHPEN__@@A DD 01H DUP (?)			; hpen
?oldpen@@3PAUHPEN__@@A DD 01H DUP (?)			; oldpen
?whitepen@@3PAUHPEN__@@A DD 01H DUP (?)			; whitepen
?hfont@@3PAUHFONT__@@A DD 01H DUP (?)			; hfont
?hemf@@3PAUHENHMETAFILE__@@A DD 01H DUP (?)		; hemf
_BSS	ENDS
_DATA	SEGMENT
?fCustomDraw@@3HA DD 01H				; fCustomDraw
_DATA	ENDS
CONST	SEGMENT
$SG187167 DB	'c:\skin01.bmp', 00H
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?cdt_horz_normal@@3PAUCustomDrawTable@@A DD 00H		; cdt_horz_normal
	DD	00H
	DD	012H
	DD	012H
	DD	00H
	DD	013H
	DD	012H
	DD	012H
	DD	00H
	DD	053H
	DD	01H
	DD	012H
	DD	00H
	DD	053H
	DD	01H
	DD	012H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	036H
	DD	00H
	DD	09H
	DD	012H
	DD	03fH
	DD	00H
	DD	01H
	DD	012H
	DD	03fH
	DD	00H
	DD	09H
	DD	012H
?cdt_horz_hot@@3PAUCustomDrawTable@@A DD 012H		; cdt_horz_hot
	DD	00H
	DD	012H
	DD	012H
	DD	012H
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	036H
	DD	013H
	DD	09H
	DD	012H
	DD	03fH
	DD	013H
	DD	01H
	DD	012H
	DD	03fH
	DD	013H
	DD	09H
	DD	012H
?cdt_horz_active@@3PAUCustomDrawTable@@A DD 024H	; cdt_horz_active
	DD	00H
	DD	012H
	DD	012H
	DD	024H
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	036H
	DD	026H
	DD	09H
	DD	012H
	DD	03fH
	DD	026H
	DD	01H
	DD	012H
	DD	03fH
	DD	026H
	DD	09H
	DD	012H
?cdt_vert_normal@@3PAUCustomDrawTable@@A DD 048H	; cdt_vert_normal
	DD	00H
	DD	012H
	DD	012H
	DD	048H
	DD	013H
	DD	012H
	DD	012H
	DD	00H
	DD	070H
	DD	012H
	DD	01H
	DD	00H
	DD	070H
	DD	012H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	07eH
	DD	00H
	DD	012H
	DD	09H
	DD	07eH
	DD	09H
	DD	012H
	DD	01H
	DD	07eH
	DD	09H
	DD	012H
	DD	09H
?cdt_vert_hot@@3PAUCustomDrawTable@@A DD 05aH		; cdt_vert_hot
	DD	00H
	DD	012H
	DD	012H
	DD	05aH
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	07eH
	DD	013H
	DD	012H
	DD	09H
	DD	07eH
	DD	01cH
	DD	012H
	DD	01H
	DD	07eH
	DD	01cH
	DD	012H
	DD	09H
?cdt_vert_active@@3PAUCustomDrawTable@@A DD 06cH	; cdt_vert_active
	DD	00H
	DD	012H
	DD	012H
	DD	06cH
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	07eH
	DD	026H
	DD	012H
	DD	09H
	DD	07eH
	DD	02fH
	DD	012H
	DD	01H
	DD	07eH
	DD	02fH
	DD	012H
	DD	09H
_DATA	ENDS
CONST	SEGMENT
	ORG $+2
$SG187206 DB	'ScrollBarCornerColor', 00H
CONST	ENDS
PUBLIC	_InitTest
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	__imp__LoadImageA@24:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\commoncontrol\skinscroll\custdraw.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_InitTest PROC NEAR

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 24   : 	hdcSkin  = CreateCompatibleDC(0);

  00004	8b f4		 mov	 esi, esp
  00006	6a 00		 push	 0
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  0000e	3b f4		 cmp	 esi, esp
  00010	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?hdcSkin@@3PAUHDC__@@A, eax ; hdcSkin

; 25   : 	hSkinBmp = (HBITMAP)LoadImage(0, "c:\\skin01.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

  0001a	8b f4		 mov	 esi, esp
  0001c	68 10 20 00 00	 push	 8208			; 00002010H
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	68 00 00 00 00	 push	 OFFSET FLAT:$SG187167
  0002c	6a 00		 push	 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadImageA@24
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	a3 00 00 00 00	 mov	 DWORD PTR ?hSkinBmp@@3PAUHBITMAP__@@A, eax ; hSkinBmp

; 26   : 	SelectObject(hdcSkin, hSkinBmp);

  00040	8b f4		 mov	 esi, esp
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSkinBmp@@3PAUHBITMAP__@@A ; hSkinBmp
  00047	50		 push	 eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hdcSkin@@3PAUHDC__@@A ; hdcSkin
  0004e	51		 push	 ecx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 27   : 
; 28   : //	DeleteEnhMetaFile(hemf);
; 29   : }

  0005c	5e		 pop	 esi
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_InitTest ENDP
_TEXT	ENDS
PUBLIC	?HandleCustomDraw@@YAJIPAUNMCSBCUSTOMDRAW@@PAVCDibBitmap@@1@Z ; HandleCustomDraw
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:NEAR	; CDC::FillSolidRect
EXTRN	?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z:NEAR	; CDibBitmap::Draw
EXTRN	?GetWidth@CDibBitmap@@QAEHXZ:NEAR		; CDibBitmap::GetWidth
EXTRN	?GetHeight@CDibBitmap@@QAEHXZ:NEAR		; CDibBitmap::GetHeight
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv87 = -52						; size = 4
tv82 = -48						; size = 4
_delta$187232 = -44					; size = 4
_h$187231 = -40						; size = 4
_w$187230 = -36						; size = 4
_delta$187219 = -32					; size = 4
_h$187218 = -28						; size = 4
_w$187217 = -24						; size = 4
_clr$187205 = -20					; size = 4
_rc$187204 = -16					; size = 4
_pDC$ = -12						; size = 4
_code$ = -8						; size = 4
_rc$ = -4						; size = 4
_ctrlid$ = 8						; size = 4
_nm$ = 12						; size = 4
_bmpV$ = 16						; size = 4
_bmpH$ = 20						; size = 4
?HandleCustomDraw@@YAJIPAUNMCSBCUSTOMDRAW@@PAVCDibBitmap@@1@Z PROC NEAR ; HandleCustomDraw

; 129  : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	83 ec 34	 sub	 esp, 52			; 00000034H
  00076	56		 push	 esi
  00077	57		 push	 edi
  00078	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0007b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00080	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00085	f3 ab		 rep stosd

; 130  : 	RECT *rc;
; 131  : 	//CustomDrawTable *cdt;
; 132  : 	UINT code = NM_CUSTOMDRAW;

  00087	c7 45 f8 f4 ff
	ff ff		 mov	 DWORD PTR _code$[ebp], -12 ; fffffff4H

; 133  : 
; 134  : 	CDC* pDC = CDC::FromHandle(nm->hdc);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  00091	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  0009a	89 45 f4	 mov	 DWORD PTR _pDC$[ebp], eax

; 135  : 
; 136  : 	UNREFERENCED_PARAMETER(ctrlid);
; 137  : 
; 138  : 	if(bmpV == NULL || bmpH == NULL)

  0009d	83 7d 10 00	 cmp	 DWORD PTR _bmpV$[ebp], 0
  000a1	74 06		 je	 SHORT $L187196
  000a3	83 7d 14 00	 cmp	 DWORD PTR _bmpH$[ebp], 0
  000a7	75 07		 jne	 SHORT $L187195
$L187196:

; 139  : 		return CDRF_DODEFAULT;

  000a9	33 c0		 xor	 eax, eax
  000ab	e9 17 05 00 00	 jmp	 $L187191
$L187195:

; 140  : 
; 141  : 	// inserted buttons do not use PREPAINT etc..
; 142  : 	if(nm->nBar == SB_INSBUT)

  000b0	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  000b3	83 7a 2c fe	 cmp	 DWORD PTR [edx+44], -2	; fffffffeH
  000b7	75 0a		 jne	 SHORT $L187197

; 143  : 	{
; 144  : 		//CoolSB_DrawProc(nm->hdc, nm->uItem, nm->uState, &nm->rect);
; 145  : 		return CDRF_SKIPDEFAULT;

  000b9	b8 04 00 00 00	 mov	 eax, 4
  000be	e9 04 05 00 00	 jmp	 $L187191
$L187197:

; 146  : 	}
; 147  : 	
; 148  : 	if(!fCustomDraw) return CDRF_DODEFAULT;

  000c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fCustomDraw@@3HA, 0 ; fCustomDraw
  000ca	75 07		 jne	 SHORT $L187198
  000cc	33 c0		 xor	 eax, eax
  000ce	e9 f4 04 00 00	 jmp	 $L187191
$L187198:

; 149  : 
; 150  : 	if(nm->dwDrawStage == CDDS_PREPAINT)

  000d3	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  000d6	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  000da	75 1a		 jne	 SHORT $L187202

; 151  : 	{
; 152  : 		if(fCustomDraw)

  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fCustomDraw@@3HA, 0 ; fCustomDraw
  000e3	74 0a		 je	 SHORT $L187200

; 153  : 			return CDRF_SKIPDEFAULT;

  000e5	b8 04 00 00 00	 mov	 eax, 4
  000ea	e9 d8 04 00 00	 jmp	 $L187191
$L187200:

; 154  : 		else
; 155  : 			return CDRF_DODEFAULT;

  000ef	33 c0		 xor	 eax, eax
  000f1	e9 d1 04 00 00	 jmp	 $L187191
$L187202:

; 156  : 	}
; 157  : 
; 158  : 
; 159  : 	if(nm->dwDrawStage == CDDS_POSTPAINT)
; 160  : 	{
; 161  : 		
; 162  : 	}
; 163  : 
; 164  : 	//the sizing gripper in the bottom-right corner
; 165  : 	if(nm->nBar == SB_BOTH)	

  000f6	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  000f9	83 7a 2c 03	 cmp	 DWORD PTR [edx+44], 3
  000fd	75 6b		 jne	 SHORT $L187203

; 166  : 	{
; 167  : 		RECT *rc = &nm->rect;

  000ff	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  00102	83 c0 14	 add	 eax, 20			; 00000014H
  00105	89 45 f0	 mov	 DWORD PTR _rc$187204[ebp], eax

; 168  : 		//StretchBlt(nm->hdc, rc->left, rc->top, rc->right-rc->left, rc->bottom-rc->top,
; 169  : 		//	hdcSkin, 100, 100, 18, 18, SRCCOPY);
; 170  : 		COLORREF clr = ::AfxGetUIManager()->UIGetSkinMgr()->GetColor("ScrollBarCornerColor");

  00108	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  0010d	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  00110	8b f4		 mov	 esi, esp
  00112	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  00115	8b 11		 mov	 edx, DWORD PTR [ecx]
  00117	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0011a	ff 52 28	 call	 DWORD PTR [edx+40]
  0011d	3b f4		 cmp	 esi, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	89 45 cc	 mov	 DWORD PTR tv87[ebp], eax
  00127	8b f4		 mov	 esi, esp
  00129	68 00 00 00 00	 push	 OFFSET FLAT:$SG187206
  0012e	8b 45 cc	 mov	 eax, DWORD PTR tv87[ebp]
  00131	8b 10		 mov	 edx, DWORD PTR [eax]
  00133	8b 4d cc	 mov	 ecx, DWORD PTR tv87[ebp]
  00136	ff 52 08	 call	 DWORD PTR [edx+8]
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	89 45 ec	 mov	 DWORD PTR _clr$187205[ebp], eax

; 171  : 		if(clr == 0)

  00143	83 7d ec 00	 cmp	 DWORD PTR _clr$187205[ebp], 0
  00147	75 07		 jne	 SHORT $L187207

; 172  : 			clr = RGB(255,255,255);

  00149	c7 45 ec ff ff
	ff 00		 mov	 DWORD PTR _clr$187205[ebp], 16777215 ; 00ffffffH
$L187207:

; 173  : 		pDC->FillSolidRect(	rc, clr);

  00150	8b 45 ec	 mov	 eax, DWORD PTR _clr$187205[ebp]
  00153	50		 push	 eax
  00154	8b 4d f0	 mov	 ecx, DWORD PTR _rc$187204[ebp]
  00157	51		 push	 ecx
  00158	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0015b	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 174  : 		return CDRF_SKIPDEFAULT;

  00160	b8 04 00 00 00	 mov	 eax, 4
  00165	e9 5d 04 00 00	 jmp	 $L187191
$L187203:

; 175  : 	}
; 176  : 
; 177  : 	rc = &nm->rect;

  0016a	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  0016d	83 c2 14	 add	 edx, 20			; 00000014H
  00170	89 55 fc	 mov	 DWORD PTR _rc$[ebp], edx

; 178  : 	if(rc->left == 0 && rc->right == 0)

  00173	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00176	83 38 00	 cmp	 DWORD PTR [eax], 0
  00179	75 13		 jne	 SHORT $L187214
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0017e	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00182	75 0a		 jne	 SHORT $L187214

; 179  : 		return CDRF_SKIPDEFAULT;

  00184	b8 04 00 00 00	 mov	 eax, 4
  00189	e9 39 04 00 00	 jmp	 $L187191
$L187214:

; 180  : 
; 181  : 	else if(nm->nBar == SB_HORZ)

  0018e	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  00191	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00195	0f 85 01 02 00
	00		 jne	 $L187216

; 182  : 	{
; 183  : 		int w = bmpH->GetWidth() / 3;

  0019b	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  0019e	e8 00 00 00 00	 call	 ?GetWidth@CDibBitmap@@QAEHXZ ; CDibBitmap::GetWidth
  001a3	99		 cdq
  001a4	b9 03 00 00 00	 mov	 ecx, 3
  001a9	f7 f9		 idiv	 ecx
  001ab	89 45 e8	 mov	 DWORD PTR _w$187217[ebp], eax

; 184  : 		int h = bmpH->GetHeight() / 6;

  001ae	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  001b1	e8 00 00 00 00	 call	 ?GetHeight@CDibBitmap@@QAEHXZ ; CDibBitmap::GetHeight
  001b6	99		 cdq
  001b7	b9 06 00 00 00	 mov	 ecx, 6
  001bc	f7 f9		 idiv	 ecx
  001be	89 45 e4	 mov	 DWORD PTR _h$187218[ebp], eax

; 185  : 		int delta = 0;

  001c1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _delta$187219[ebp], 0

; 186  : 		rc = &nm->rect;

  001c8	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  001cb	83 c2 14	 add	 edx, 20			; 00000014H
  001ce	89 55 fc	 mov	 DWORD PTR _rc$[ebp], edx

; 187  : 
; 188  : 		if(nm->uState == CDIS_HOT)	

  001d1	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  001d4	83 78 28 40	 cmp	 DWORD PTR [eax+40], 64	; 00000040H
  001d8	75 08		 jne	 SHORT $L187220

; 189  : 			delta = w;

  001da	8b 4d e8	 mov	 ecx, DWORD PTR _w$187217[ebp]
  001dd	89 4d e0	 mov	 DWORD PTR _delta$187219[ebp], ecx

; 190  : 		else if(nm->uState == CDIS_SELECTED) 

  001e0	eb 11		 jmp	 SHORT $L187221
$L187220:
  001e2	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  001e5	83 7a 28 01	 cmp	 DWORD PTR [edx+40], 1
  001e9	75 08		 jne	 SHORT $L187221

; 191  : 			delta = w * 2;

  001eb	8b 45 e8	 mov	 eax, DWORD PTR _w$187217[ebp]
  001ee	d1 e0		 shl	 eax, 1
  001f0	89 45 e0	 mov	 DWORD PTR _delta$187219[ebp], eax
$L187221:

; 192  : 		
; 193  : 		if(nm->uItem == HTSCROLL_THUMB)

  001f3	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  001f6	83 79 24 05	 cmp	 DWORD PTR [ecx+36], 5
  001fa	0f 85 b7 00 00
	00		 jne	 $L187223

; 194  : 		{
; 195  : 			bmpH->Draw(pDC, rc->left, rc->top, 2 ,h, delta, h * 4, 2, h);

  00200	8b 55 e4	 mov	 edx, DWORD PTR _h$187218[ebp]
  00203	52		 push	 edx
  00204	6a 02		 push	 2
  00206	8b 45 e4	 mov	 eax, DWORD PTR _h$187218[ebp]
  00209	c1 e0 02	 shl	 eax, 2
  0020c	50		 push	 eax
  0020d	8b 4d e0	 mov	 ecx, DWORD PTR _delta$187219[ebp]
  00210	51		 push	 ecx
  00211	8b 55 e4	 mov	 edx, DWORD PTR _h$187218[ebp]
  00214	52		 push	 edx
  00215	6a 02		 push	 2
  00217	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  0021a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0021d	51		 push	 ecx
  0021e	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00221	8b 02		 mov	 eax, DWORD PTR [edx]
  00223	50		 push	 eax
  00224	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00227	51		 push	 ecx
  00228	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  0022b	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 196  : 			bmpH->Draw(pDC, rc->left + 2, rc->top, (rc->right-rc->left)-4, rc->bottom-rc->top, delta, h*6, 1, h);

  00230	8b 55 e4	 mov	 edx, DWORD PTR _h$187218[ebp]
  00233	52		 push	 edx
  00234	6a 01		 push	 1
  00236	8b 45 e4	 mov	 eax, DWORD PTR _h$187218[ebp]
  00239	6b c0 06	 imul	 eax, 6
  0023c	50		 push	 eax
  0023d	8b 4d e0	 mov	 ecx, DWORD PTR _delta$187219[ebp]
  00240	51		 push	 ecx
  00241	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00244	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00247	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0024a	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0024d	51		 push	 ecx
  0024e	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00251	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00254	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00257	2b 08		 sub	 ecx, DWORD PTR [eax]
  00259	83 e9 04	 sub	 ecx, 4
  0025c	51		 push	 ecx
  0025d	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00260	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00263	50		 push	 eax
  00264	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00267	8b 11		 mov	 edx, DWORD PTR [ecx]
  00269	83 c2 02	 add	 edx, 2
  0026c	52		 push	 edx
  0026d	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00270	50		 push	 eax
  00271	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  00274	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 197  : 			bmpH->Draw(pDC, rc->right-2, rc->top, 2, h, delta, h * 5, 2,h);

  00279	8b 4d e4	 mov	 ecx, DWORD PTR _h$187218[ebp]
  0027c	51		 push	 ecx
  0027d	6a 02		 push	 2
  0027f	8b 55 e4	 mov	 edx, DWORD PTR _h$187218[ebp]
  00282	6b d2 05	 imul	 edx, 5
  00285	52		 push	 edx
  00286	8b 45 e0	 mov	 eax, DWORD PTR _delta$187219[ebp]
  00289	50		 push	 eax
  0028a	8b 4d e4	 mov	 ecx, DWORD PTR _h$187218[ebp]
  0028d	51		 push	 ecx
  0028e	6a 02		 push	 2
  00290	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00293	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00296	50		 push	 eax
  00297	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0029a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0029d	83 ea 02	 sub	 edx, 2
  002a0	52		 push	 edx
  002a1	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  002a4	50		 push	 eax
  002a5	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  002a8	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 198  : 			return CDRF_SKIPDEFAULT;

  002ad	b8 04 00 00 00	 mov	 eax, 4
  002b2	e9 10 03 00 00	 jmp	 $L187191
$L187223:

; 199  : 		}
; 200  : 		if(nm->uItem == HTSCROLL_LEFT)

  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  002ba	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  002be	75 3b		 jne	 SHORT $L187224

; 201  : 		{
; 202  : 			bmpH->Draw(pDC, rc->left, rc->top, w,h, delta, h, w, h);

  002c0	8b 55 e4	 mov	 edx, DWORD PTR _h$187218[ebp]
  002c3	52		 push	 edx
  002c4	8b 45 e8	 mov	 eax, DWORD PTR _w$187217[ebp]
  002c7	50		 push	 eax
  002c8	8b 4d e4	 mov	 ecx, DWORD PTR _h$187218[ebp]
  002cb	51		 push	 ecx
  002cc	8b 55 e0	 mov	 edx, DWORD PTR _delta$187219[ebp]
  002cf	52		 push	 edx
  002d0	8b 45 e4	 mov	 eax, DWORD PTR _h$187218[ebp]
  002d3	50		 push	 eax
  002d4	8b 4d e8	 mov	 ecx, DWORD PTR _w$187217[ebp]
  002d7	51		 push	 ecx
  002d8	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  002db	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002de	50		 push	 eax
  002df	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  002e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e4	52		 push	 edx
  002e5	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  002e8	50		 push	 eax
  002e9	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  002ec	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 203  : 			return CDRF_SKIPDEFAULT;

  002f1	b8 04 00 00 00	 mov	 eax, 4
  002f6	e9 cc 02 00 00	 jmp	 $L187191
$L187224:

; 204  : 		}
; 205  : 		if(nm->uItem == HTSCROLL_RIGHT)

  002fb	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  002fe	83 79 24 01	 cmp	 DWORD PTR [ecx+36], 1
  00302	75 3d		 jne	 SHORT $L187225

; 206  : 		{
; 207  : 			bmpH->Draw(pDC, rc->left, rc->top, w ,h, delta, h * 2, w, h);

  00304	8b 55 e4	 mov	 edx, DWORD PTR _h$187218[ebp]
  00307	52		 push	 edx
  00308	8b 45 e8	 mov	 eax, DWORD PTR _w$187217[ebp]
  0030b	50		 push	 eax
  0030c	8b 4d e4	 mov	 ecx, DWORD PTR _h$187218[ebp]
  0030f	d1 e1		 shl	 ecx, 1
  00311	51		 push	 ecx
  00312	8b 55 e0	 mov	 edx, DWORD PTR _delta$187219[ebp]
  00315	52		 push	 edx
  00316	8b 45 e4	 mov	 eax, DWORD PTR _h$187218[ebp]
  00319	50		 push	 eax
  0031a	8b 4d e8	 mov	 ecx, DWORD PTR _w$187217[ebp]
  0031d	51		 push	 ecx
  0031e	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00321	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00324	50		 push	 eax
  00325	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00328	8b 11		 mov	 edx, DWORD PTR [ecx]
  0032a	52		 push	 edx
  0032b	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  0032e	50		 push	 eax
  0032f	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  00332	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 208  : 			return CDRF_SKIPDEFAULT;

  00337	b8 04 00 00 00	 mov	 eax, 4
  0033c	e9 86 02 00 00	 jmp	 $L187191
$L187225:

; 209  : 		}
; 210  : 		if(nm->uItem == HTSCROLL_PAGELEFT || nm->uItem == HTSCROLL_PAGERIGHT)

  00341	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  00344	83 79 24 02	 cmp	 DWORD PTR [ecx+36], 2
  00348	74 09		 je	 SHORT $L187227
  0034a	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  0034d	83 7a 24 03	 cmp	 DWORD PTR [edx+36], 3
  00351	75 44		 jne	 SHORT $L187226
$L187227:

; 211  : 		{
; 212  : 			bmpH->Draw(pDC, rc->left, rc->top, rc->right - rc->left ,h, w, h*3, 1, h);

  00353	8b 45 e4	 mov	 eax, DWORD PTR _h$187218[ebp]
  00356	50		 push	 eax
  00357	6a 01		 push	 1
  00359	8b 4d e4	 mov	 ecx, DWORD PTR _h$187218[ebp]
  0035c	6b c9 03	 imul	 ecx, 3
  0035f	51		 push	 ecx
  00360	8b 55 e8	 mov	 edx, DWORD PTR _w$187217[ebp]
  00363	52		 push	 edx
  00364	8b 45 e4	 mov	 eax, DWORD PTR _h$187218[ebp]
  00367	50		 push	 eax
  00368	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0036b	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0036e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00371	2b 02		 sub	 eax, DWORD PTR [edx]
  00373	50		 push	 eax
  00374	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00377	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0037a	52		 push	 edx
  0037b	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  0037e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00380	51		 push	 ecx
  00381	8b 55 f4	 mov	 edx, DWORD PTR _pDC$[ebp]
  00384	52		 push	 edx
  00385	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  00388	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 213  : 			return CDRF_SKIPDEFAULT;

  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	e9 30 02 00 00	 jmp	 $L187191
$L187226:

; 214  : 		}
; 215  : 
; 216  : 	}
; 217  : 	else if(nm->nBar == SB_VERT)

  00397	e9 26 02 00 00	 jmp	 $L187215
$L187216:
  0039c	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  0039f	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  003a3	0f 85 05 02 00
	00		 jne	 $L187229

; 218  : 	{
; 219  : 		rc = &nm->rect;

  003a9	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  003ac	83 c1 14	 add	 ecx, 20			; 00000014H
  003af	89 4d fc	 mov	 DWORD PTR _rc$[ebp], ecx

; 220  : 		int w = bmpV->GetWidth() / 6;

  003b2	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  003b5	e8 00 00 00 00	 call	 ?GetWidth@CDibBitmap@@QAEHXZ ; CDibBitmap::GetWidth
  003ba	99		 cdq
  003bb	b9 06 00 00 00	 mov	 ecx, 6
  003c0	f7 f9		 idiv	 ecx
  003c2	89 45 dc	 mov	 DWORD PTR _w$187230[ebp], eax

; 221  : 		int h = bmpV->GetHeight() / 3;

  003c5	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  003c8	e8 00 00 00 00	 call	 ?GetHeight@CDibBitmap@@QAEHXZ ; CDibBitmap::GetHeight
  003cd	99		 cdq
  003ce	b9 03 00 00 00	 mov	 ecx, 3
  003d3	f7 f9		 idiv	 ecx
  003d5	89 45 d8	 mov	 DWORD PTR _h$187231[ebp], eax

; 222  : 		int delta = 0;

  003d8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _delta$187232[ebp], 0

; 223  : 		if(nm->uState == CDIS_HOT)		

  003df	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  003e2	83 7a 28 40	 cmp	 DWORD PTR [edx+40], 64	; 00000040H
  003e6	75 08		 jne	 SHORT $L187233

; 224  : 			delta = h;

  003e8	8b 45 d8	 mov	 eax, DWORD PTR _h$187231[ebp]
  003eb	89 45 d4	 mov	 DWORD PTR _delta$187232[ebp], eax

; 225  : 		else if(nm->uState == CDIS_SELECTED)  

  003ee	eb 11		 jmp	 SHORT $L187234
$L187233:
  003f0	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  003f3	83 79 28 01	 cmp	 DWORD PTR [ecx+40], 1
  003f7	75 08		 jne	 SHORT $L187234

; 226  : 			delta = h * 2;

  003f9	8b 55 d8	 mov	 edx, DWORD PTR _h$187231[ebp]
  003fc	d1 e2		 shl	 edx, 1
  003fe	89 55 d4	 mov	 DWORD PTR _delta$187232[ebp], edx
$L187234:

; 227  : 
; 228  : 		if(nm->uItem == HTSCROLL_THUMB)

  00401	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  00404	83 78 24 05	 cmp	 DWORD PTR [eax+36], 5
  00408	0f 85 bf 00 00
	00		 jne	 $L187236

; 229  : 		{
; 230  : 			bmpV->Draw(pDC, rc->left, rc->top, w , 2, w * 3, 2 + delta, w, 2);

  0040e	6a 02		 push	 2
  00410	8b 4d dc	 mov	 ecx, DWORD PTR _w$187230[ebp]
  00413	51		 push	 ecx
  00414	8b 55 d4	 mov	 edx, DWORD PTR _delta$187232[ebp]
  00417	83 c2 02	 add	 edx, 2
  0041a	52		 push	 edx
  0041b	8b 45 dc	 mov	 eax, DWORD PTR _w$187230[ebp]
  0041e	6b c0 03	 imul	 eax, 3
  00421	50		 push	 eax
  00422	6a 02		 push	 2
  00424	8b 4d dc	 mov	 ecx, DWORD PTR _w$187230[ebp]
  00427	51		 push	 ecx
  00428	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0042b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0042e	50		 push	 eax
  0042f	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00432	8b 11		 mov	 edx, DWORD PTR [ecx]
  00434	52		 push	 edx
  00435	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00438	50		 push	 eax
  00439	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  0043c	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 231  : 			bmpV->Draw(pDC, rc->left, rc->top + 2, (rc->right-rc->left), rc->bottom-rc->top - 4, w * 5, 1 + delta, w, 1);

  00441	6a 01		 push	 1
  00443	8b 4d dc	 mov	 ecx, DWORD PTR _w$187230[ebp]
  00446	51		 push	 ecx
  00447	8b 55 d4	 mov	 edx, DWORD PTR _delta$187232[ebp]
  0044a	83 c2 01	 add	 edx, 1
  0044d	52		 push	 edx
  0044e	8b 45 dc	 mov	 eax, DWORD PTR _w$187230[ebp]
  00451	6b c0 05	 imul	 eax, 5
  00454	50		 push	 eax
  00455	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00458	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0045b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0045e	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00461	83 e8 04	 sub	 eax, 4
  00464	50		 push	 eax
  00465	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00468	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0046b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0046e	2b 02		 sub	 eax, DWORD PTR [edx]
  00470	50		 push	 eax
  00471	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00474	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00477	83 c2 02	 add	 edx, 2
  0047a	52		 push	 edx
  0047b	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  0047e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00480	51		 push	 ecx
  00481	8b 55 f4	 mov	 edx, DWORD PTR _pDC$[ebp]
  00484	52		 push	 edx
  00485	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  00488	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 232  : 			bmpV->Draw(pDC, rc->left, rc->bottom-2, w, 2, w * 4, 2 + delta, w,2);

  0048d	6a 02		 push	 2
  0048f	8b 45 dc	 mov	 eax, DWORD PTR _w$187230[ebp]
  00492	50		 push	 eax
  00493	8b 4d d4	 mov	 ecx, DWORD PTR _delta$187232[ebp]
  00496	83 c1 02	 add	 ecx, 2
  00499	51		 push	 ecx
  0049a	8b 55 dc	 mov	 edx, DWORD PTR _w$187230[ebp]
  0049d	c1 e2 02	 shl	 edx, 2
  004a0	52		 push	 edx
  004a1	6a 02		 push	 2
  004a3	8b 45 dc	 mov	 eax, DWORD PTR _w$187230[ebp]
  004a6	50		 push	 eax
  004a7	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  004aa	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  004ad	83 ea 02	 sub	 edx, 2
  004b0	52		 push	 edx
  004b1	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  004b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004b6	51		 push	 ecx
  004b7	8b 55 f4	 mov	 edx, DWORD PTR _pDC$[ebp]
  004ba	52		 push	 edx
  004bb	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  004be	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 233  : 			return CDRF_SKIPDEFAULT;

  004c3	b8 04 00 00 00	 mov	 eax, 4
  004c8	e9 fa 00 00 00	 jmp	 $L187191
$L187236:

; 234  : 		}
; 235  : 		if(nm->uItem == HTSCROLL_UP)

  004cd	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  004d0	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  004d4	75 3c		 jne	 SHORT $L187237

; 236  : 		{
; 237  : 			bmpV->Draw(pDC, rc->left, rc->top, w ,h, 0, h + delta, w, h);

  004d6	8b 4d d8	 mov	 ecx, DWORD PTR _h$187231[ebp]
  004d9	51		 push	 ecx
  004da	8b 55 dc	 mov	 edx, DWORD PTR _w$187230[ebp]
  004dd	52		 push	 edx
  004de	8b 45 d8	 mov	 eax, DWORD PTR _h$187231[ebp]
  004e1	03 45 d4	 add	 eax, DWORD PTR _delta$187232[ebp]
  004e4	50		 push	 eax
  004e5	6a 00		 push	 0
  004e7	8b 4d d8	 mov	 ecx, DWORD PTR _h$187231[ebp]
  004ea	51		 push	 ecx
  004eb	8b 55 dc	 mov	 edx, DWORD PTR _w$187230[ebp]
  004ee	52		 push	 edx
  004ef	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  004f2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004f5	51		 push	 ecx
  004f6	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  004f9	8b 02		 mov	 eax, DWORD PTR [edx]
  004fb	50		 push	 eax
  004fc	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  004ff	51		 push	 ecx
  00500	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  00503	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 238  : 			return CDRF_SKIPDEFAULT;

  00508	b8 04 00 00 00	 mov	 eax, 4
  0050d	e9 b5 00 00 00	 jmp	 $L187191
$L187237:

; 239  : 		}
; 240  : 		if(nm->uItem == HTSCROLL_DOWN)

  00512	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  00515	83 7a 24 01	 cmp	 DWORD PTR [edx+36], 1
  00519	75 3b		 jne	 SHORT $L187238

; 241  : 		{
; 242  : 			bmpV->Draw(pDC, rc->left, rc->top, w, h, w * 1, h + delta, w, h);

  0051b	8b 45 d8	 mov	 eax, DWORD PTR _h$187231[ebp]
  0051e	50		 push	 eax
  0051f	8b 4d dc	 mov	 ecx, DWORD PTR _w$187230[ebp]
  00522	51		 push	 ecx
  00523	8b 55 d8	 mov	 edx, DWORD PTR _h$187231[ebp]
  00526	03 55 d4	 add	 edx, DWORD PTR _delta$187232[ebp]
  00529	52		 push	 edx
  0052a	8b 45 dc	 mov	 eax, DWORD PTR _w$187230[ebp]
  0052d	50		 push	 eax
  0052e	8b 4d d8	 mov	 ecx, DWORD PTR _h$187231[ebp]
  00531	51		 push	 ecx
  00532	8b 55 dc	 mov	 edx, DWORD PTR _w$187230[ebp]
  00535	52		 push	 edx
  00536	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00539	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0053c	51		 push	 ecx
  0053d	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00540	8b 02		 mov	 eax, DWORD PTR [edx]
  00542	50		 push	 eax
  00543	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00546	51		 push	 ecx
  00547	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  0054a	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 243  : 			return CDRF_SKIPDEFAULT;

  0054f	b8 04 00 00 00	 mov	 eax, 4
  00554	eb 71		 jmp	 SHORT $L187191
$L187238:

; 244  : 		}
; 245  : 		if(nm->uItem == HTSCROLL_PAGEGUP || nm->uItem == HTSCROLL_PAGEGDOWN)

  00556	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  00559	83 7a 24 02	 cmp	 DWORD PTR [edx+36], 2
  0055d	74 09		 je	 SHORT $L187240
  0055f	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  00562	83 78 24 03	 cmp	 DWORD PTR [eax+36], 3
  00566	75 44		 jne	 SHORT $L187239
$L187240:

; 246  : 		{
; 247  : 			bmpV->Draw(pDC, rc->left, rc->top, w, rc->bottom - rc->top , w * 2, 1 + delta, w, 1);

  00568	6a 01		 push	 1
  0056a	8b 4d dc	 mov	 ecx, DWORD PTR _w$187230[ebp]
  0056d	51		 push	 ecx
  0056e	8b 55 d4	 mov	 edx, DWORD PTR _delta$187232[ebp]
  00571	83 c2 01	 add	 edx, 1
  00574	52		 push	 edx
  00575	8b 45 dc	 mov	 eax, DWORD PTR _w$187230[ebp]
  00578	d1 e0		 shl	 eax, 1
  0057a	50		 push	 eax
  0057b	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0057e	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00581	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00584	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00587	50		 push	 eax
  00588	8b 4d dc	 mov	 ecx, DWORD PTR _w$187230[ebp]
  0058b	51		 push	 ecx
  0058c	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0058f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00592	50		 push	 eax
  00593	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00596	8b 11		 mov	 edx, DWORD PTR [ecx]
  00598	52		 push	 edx
  00599	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  0059c	50		 push	 eax
  0059d	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  005a0	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 248  : 			return CDRF_SKIPDEFAULT;

  005a5	b8 04 00 00 00	 mov	 eax, 4
  005aa	eb 1b		 jmp	 SHORT $L187191
$L187239:

; 249  : 		}
; 250  : 	}
; 251  : 	//INSERTED BUTTONS are handled here...
; 252  : 	else if(nm->nBar == SB_INSBUT)

  005ac	eb 14		 jmp	 SHORT $L187215
$L187229:
  005ae	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  005b1	83 79 2c fe	 cmp	 DWORD PTR [ecx+44], -2	; fffffffeH
  005b5	75 07		 jne	 SHORT $L187242

; 253  : 	{
; 254  : 		//CoolSB_DrawProc(nm->hdc, nm->uItem, nm->uState, &nm->rect);
; 255  : 		return CDRF_SKIPDEFAULT;

  005b7	b8 04 00 00 00	 mov	 eax, 4
  005bc	eb 09		 jmp	 SHORT $L187191
$L187242:

; 256  : 	}
; 257  : 	else
; 258  : 	{
; 259  : 		return CDRF_DODEFAULT;

  005be	33 c0		 xor	 eax, eax
  005c0	eb 05		 jmp	 SHORT $L187191
$L187215:

; 260  : 	}
; 261  : 
; 262  : 	return CDRF_SKIPDEFAULT;

  005c2	b8 04 00 00 00	 mov	 eax, 4
$L187191:

; 263  : 
; 264  : }

  005c7	5f		 pop	 edi
  005c8	5e		 pop	 esi
  005c9	83 c4 34	 add	 esp, 52			; 00000034H
  005cc	3b ec		 cmp	 ebp, esp
  005ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005d3	8b e5		 mov	 esp, ebp
  005d5	5d		 pop	 ebp
  005d6	c3		 ret	 0
?HandleCustomDraw@@YAJIPAUNMCSBCUSTOMDRAW@@PAVCDibBitmap@@1@Z ENDP ; HandleCustomDraw
_TEXT	ENDS
END
