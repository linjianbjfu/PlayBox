; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\CommonControl\SkinScroll\coolsblib.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG76851 DB	01H DUP (?)
	ALIGN	4

_pEnableScrollBar DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_szPropStr DB	'CoolSBSubclassPtr', 00H
	ORG $+2
$SG76852 DB	'tooltips_class32', 00H
_DATA	ENDS
PUBLIC	_GetScrollWndFromHwnd
EXTRN	__imp__GetPropA@8:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\commoncontrol\skinscroll\coolsblib.c
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_GetScrollWndFromHwnd PROC NEAR

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 44   : 	return (SCROLLWND *)GetProp(hwnd, szPropStr);

  00004	8b f4		 mov	 esi, esp
  00006	68 00 00 00 00	 push	 OFFSET FLAT:_szPropStr
  0000b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPropA@8
  00015	3b f4		 cmp	 esi, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 45   : }

  0001c	5e		 pop	 esi
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_GetScrollWndFromHwnd ENDP
_TEXT	ENDS
PUBLIC	_GetScrollBarFromHwnd
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sw$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_GetScrollBarFromHwnd PROC NEAR

; 48   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	51		 push	 ecx
  00034	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 49   : 	SCROLLWND *sw = GetScrollWndFromHwnd(hwnd);

  0003b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 fc	 mov	 DWORD PTR _sw$[ebp], eax

; 50   : 	
; 51   : 	if(!sw) return 0;

  0004a	83 7d fc 00	 cmp	 DWORD PTR _sw$[ebp], 0
  0004e	75 04		 jne	 SHORT $L76763
  00050	33 c0		 xor	 eax, eax
  00052	eb 20		 jmp	 SHORT $L76761
$L76763:

; 52   : 	
; 53   : 	if(nBar == SB_HORZ)

  00054	83 7d 0c 00	 cmp	 DWORD PTR _nBar$[ebp], 0
  00058	75 08		 jne	 SHORT $L76764

; 54   : 		return &sw->sbarHorz;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  0005d	83 c0 08	 add	 eax, 8
  00060	eb 12		 jmp	 SHORT $L76761
$L76764:

; 55   : 	else if(nBar == SB_VERT)

  00062	83 7d 0c 01	 cmp	 DWORD PTR _nBar$[ebp], 1
  00066	75 0a		 jne	 SHORT $L76766

; 56   : 		return &sw->sbarVert;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  0006b	05 54 03 00 00	 add	 eax, 852		; 00000354H
  00070	eb 02		 jmp	 SHORT $L76761
$L76766:

; 57   : 	else
; 58   : 		return 0;

  00072	33 c0		 xor	 eax, eax
$L76761:

; 59   : }

  00074	83 c4 04	 add	 esp, 4
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_GetScrollBarFromHwnd ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_IsCoolScrollEnabled@4
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_CoolSB_IsCoolScrollEnabled@4 PROC NEAR

; 62   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp

; 63   : 	if(GetScrollWndFromHwnd(hwnd))

  00093	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  0009c	83 c4 04	 add	 esp, 4
  0009f	85 c0		 test	 eax, eax
  000a1	74 07		 je	 SHORT $L76771

; 64   : 		return TRUE;

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	eb 02		 jmp	 SHORT $L76770
$L76771:

; 65   : 	else
; 66   : 		return FALSE;

  000aa	33 c0		 xor	 eax, eax
$L76770:

; 67   : }

  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
_CoolSB_IsCoolScrollEnabled@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetESBProc@4
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_proc$ = 8						; size = 4
_CoolSB_SetESBProc@4 PROC NEAR

; 84   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp

; 85   : 	pEnableScrollBar = proc;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _proc$[ebp]
  000c6	a3 00 00 00 00	 mov	 DWORD PTR _pEnableScrollBar, eax

; 86   : }

  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
_CoolSB_SetESBProc@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetDefaultMinThumbSize@0
EXTRN	__imp__GetVersion@0:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_dwVersion$ = -4					; size = 4
_CoolSB_GetDefaultMinThumbSize@0 PROC NEAR

; 126  : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	51		 push	 ecx
  000d4	56		 push	 esi
  000d5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 127  : 	DWORD dwVersion = GetVersion();

  000dc	8b f4		 mov	 esi, esp
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersion@0
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000eb	89 45 fc	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 128  : 
; 129  : 	// set the minimum thumb size for a scrollbar. This
; 130  : 	// differs between NT4 and 2000, so need to check to see
; 131  : 	// which platform we are running under
; 132  : 	if(dwVersion < 0x80000000)              // Windows NT/2000

  000ee	81 7d fc 00 00
	00 80		 cmp	 DWORD PTR _dwVersion$[ebp], -2147483648 ; 80000000H
  000f5	73 27		 jae	 SHORT $L76802

; 133  : 	{
; 134  : 		if(LOBYTE(LOWORD(dwVersion)) >= 5)

  000f7	8b 45 fc	 mov	 eax, DWORD PTR _dwVersion$[ebp]
  000fa	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000ff	0f b7 c8	 movzx	 ecx, ax
  00102	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00108	0f b6 d1	 movzx	 edx, cl
  0010b	83 fa 05	 cmp	 edx, 5
  0010e	7c 07		 jl	 SHORT $L76807

; 135  : 			return MINTHUMBSIZE_2000;

  00110	b8 06 00 00 00	 mov	 eax, 6
  00115	eb 0c		 jmp	 SHORT $L76800
$L76807:

; 136  : 		else
; 137  : 			return MINTHUMBSIZE_NT4;

  00117	b8 08 00 00 00	 mov	 eax, 8
  0011c	eb 05		 jmp	 SHORT $L76800
$L76802:

; 138  : 	}
; 139  : 	else
; 140  : 	{
; 141  : 		return MINTHUMBSIZE_NT4;

  0011e	b8 08 00 00 00	 mov	 eax, 8
$L76800:

; 142  : 	}
; 143  : }

  00123	5e		 pop	 esi
  00124	83 c4 04	 add	 esp, 4
  00127	3b ec		 cmp	 ebp, esp
  00129	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_CoolSB_GetDefaultMinThumbSize@0 ENDP
_TEXT	ENDS
PUBLIC	_InitializeCoolSB@4
PUBLIC	_CoolSB_SetMinThumbSize@12
EXTRN	__imp__GetScrollInfo@12:NEAR
EXTRN	__imp__EnableScrollBar@12:NEAR
EXTRN	__imp__SetPropA@12:NEAR
EXTRN	__imp__GetClientRect@8:NEAR
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__CreateWindowExA@48:NEAR
EXTRN	__imp__GetWindowLongA@8:NEAR
EXTRN	__imp__SetWindowLongA@12:NEAR
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	__imp__InitCommonControlsEx@4:NEAR
EXTRN	__imp__GetModuleHandleA@4:NEAR
EXTRN	__imp__HeapAlloc@12:NEAR
EXTRN	_CoolSBWndProc@16:NEAR
EXTRN	__imp__GetProcessHeap@0:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_dwCurStyle$ = -104					; size = 4
_rect$ = -96						; size = 16
_ti$ = -72						; size = 44
_ice$ = -20						; size = 8
_si$ = -8						; size = 4
_sw$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_InitializeCoolSB@4 PROC NEAR

; 168  : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	83 ec 68	 sub	 esp, 104		; 00000068H
  00146	56		 push	 esi
  00147	57		 push	 edi
  00148	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  0014b	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00150	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00155	f3 ab		 rep stosd

; 169  : 	SCROLLWND *sw;
; 170  : 	SCROLLINFO *si;
; 171  : 	INITCOMMONCONTROLSEX ice;
; 172  : 	TOOLINFO ti;
; 173  : 	RECT rect;
; 174  : 	DWORD dwCurStyle;
; 175  : 	//BOOL fDisabled;
; 176  : 
; 177  : 	if(pEnableScrollBar == 0)

  00157	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pEnableScrollBar, 0
  0015e	75 0a		 jne	 SHORT $L76832

; 178  : 		pEnableScrollBar = EnableScrollBar;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__EnableScrollBar@12
  00165	a3 00 00 00 00	 mov	 DWORD PTR _pEnableScrollBar, eax
$L76832:

; 179  : 
; 180  : 	GetClientRect(hwnd, &rect);

  0016a	8b f4		 mov	 esi, esp
  0016c	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  0016f	51		 push	 ecx
  00170	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00173	52		 push	 edx
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  0017a	3b f4		 cmp	 esi, esp
  0017c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 181  : 
; 182  : 	//if we have already initialized Cool Scrollbars for this window,
; 183  : 	//then stop the user from doing it again
; 184  : 	if(GetScrollWndFromHwnd(hwnd) != 0)

  00181	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  0018a	83 c4 04	 add	 esp, 4
  0018d	85 c0		 test	 eax, eax
  0018f	74 07		 je	 SHORT $L76833

; 185  : 	{
; 186  : 		return FALSE;

  00191	33 c0		 xor	 eax, eax
  00193	e9 b5 02 00 00	 jmp	 $L76825
$L76833:

; 187  : 	}
; 188  : 
; 189  : 	//allocate a private scrollbar structure which we 
; 190  : 	//will use to keep track of the scrollbar data
; 191  : 	sw = (SCROLLWND *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(SCROLLWND));

  00198	8b f4		 mov	 esi, esp
  0019a	68 c0 06 00 00	 push	 1728			; 000006c0H
  0019f	6a 08		 push	 8
  001a1	8b fc		 mov	 edi, esp
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  001a9	3b fc		 cmp	 edi, esp
  001ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b0	50		 push	 eax
  001b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  001b7	3b f4		 cmp	 esi, esp
  001b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001be	89 45 fc	 mov	 DWORD PTR _sw$[ebp], eax

; 192  : 
; 193  : 	si = &sw->sbarHorz.scrollInfo;

  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _sw$[ebp]
  001c4	83 c1 10	 add	 ecx, 16			; 00000010H
  001c7	89 4d f8	 mov	 DWORD PTR _si$[ebp], ecx

; 194  : 	si->cbSize = sizeof(SCROLLINFO);

  001ca	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp]
  001cd	c7 02 1c 00 00
	00		 mov	 DWORD PTR [edx], 28	; 0000001cH

; 195  : 	si->fMask  = SIF_ALL;

  001d3	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp]
  001d6	c7 40 04 17 00
	00 00		 mov	 DWORD PTR [eax+4], 23	; 00000017H

; 196  : 	GetScrollInfo(hwnd, SB_HORZ, si);

  001dd	8b f4		 mov	 esi, esp
  001df	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp]
  001e2	51		 push	 ecx
  001e3	6a 00		 push	 0
  001e5	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  001e8	52		 push	 edx
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12
  001ef	3b f4		 cmp	 esi, esp
  001f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 197  : 
; 198  : 	si = &sw->sbarVert.scrollInfo;

  001f6	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  001f9	05 5c 03 00 00	 add	 eax, 860		; 0000035cH
  001fe	89 45 f8	 mov	 DWORD PTR _si$[ebp], eax

; 199  : 	si->cbSize = sizeof(SCROLLINFO);

  00201	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp]
  00204	c7 01 1c 00 00
	00		 mov	 DWORD PTR [ecx], 28	; 0000001cH

; 200  : 	si->fMask  = SIF_ALL;

  0020a	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp]
  0020d	c7 42 04 17 00
	00 00		 mov	 DWORD PTR [edx+4], 23	; 00000017H

; 201  : 	GetScrollInfo(hwnd, SB_VERT, si);

  00214	8b f4		 mov	 esi, esp
  00216	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp]
  00219	50		 push	 eax
  0021a	6a 01		 push	 1
  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0021f	51		 push	 ecx
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 202  : 
; 203  : 	//check to see if the window has left-aligned scrollbars
; 204  : 	if(GetWindowLong(hwnd, GWL_EXSTYLE) & WS_EX_LEFTSCROLLBAR)

  0022d	8b f4		 mov	 esi, esp
  0022f	6a ec		 push	 -20			; ffffffecH
  00231	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00234	52		 push	 edx
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0023b	3b f4		 cmp	 esi, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00242	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00247	74 0f		 je	 SHORT $L76838

; 205  : 		sw->fLeftScrollbar = TRUE;

  00249	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  0024c	c7 80 a4 06 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+1700], 1

; 206  : 	else

  00256	eb 0d		 jmp	 SHORT $L76839
$L76838:

; 207  : 		sw->fLeftScrollbar = FALSE;

  00258	8b 4d fc	 mov	 ecx, DWORD PTR _sw$[ebp]
  0025b	c7 81 a4 06 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1700], 0
$L76839:

; 208  : 
; 209  : 	dwCurStyle = GetWindowLong(hwnd, GWL_STYLE);

  00265	8b f4		 mov	 esi, esp
  00267	6a f0		 push	 -16			; fffffff0H
  00269	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0026c	52		 push	 edx
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00273	3b f4		 cmp	 esi, esp
  00275	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027a	89 45 98	 mov	 DWORD PTR _dwCurStyle$[ebp], eax

; 210  : 
; 211  : 	SetProp(hwnd, szPropStr, (HANDLE)sw);

  0027d	8b f4		 mov	 esi, esp
  0027f	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  00282	50		 push	 eax
  00283	68 00 00 00 00	 push	 OFFSET FLAT:_szPropStr
  00288	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0028b	51		 push	 ecx
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetPropA@12
  00292	3b f4		 cmp	 esi, esp
  00294	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 212  : 
; 213  : 	//try to enable the scrollbar arrows - if the return value is
; 214  : 	//non-zero, then the scrollbars were previously disabled
; 215  : 	//fDisabled = pEnableScrollBar(hwnd, SB_HORZ, ESB_ENABLE_BOTH);
; 216  : 
; 217  : 	//scrollbars will automatically get enabled, even if
; 218  : 	//they aren't to start with....sorry, but there isn't an
; 219  : 	//easy alternative.
; 220  : 	if(dwCurStyle & WS_HSCROLL)

  00299	8b 55 98	 mov	 edx, DWORD PTR _dwCurStyle$[ebp]
  0029c	81 e2 00 00 10
	00		 and	 edx, 1048576		; 00100000H
  002a2	74 0a		 je	 SHORT $L76841

; 221  : 		sw->sbarHorz.fScrollFlags = CSBS_VISIBLE;

  002a4	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  002a7	c7 40 08 08 00
	00 00		 mov	 DWORD PTR [eax+8], 8
$L76841:

; 222  : 
; 223  : 	if(dwCurStyle & WS_VSCROLL)

  002ae	8b 4d 98	 mov	 ecx, DWORD PTR _dwCurStyle$[ebp]
  002b1	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  002b7	74 0d		 je	 SHORT $L76842

; 224  : 		sw->sbarVert.fScrollFlags = CSBS_VISIBLE;

  002b9	8b 55 fc	 mov	 edx, DWORD PTR _sw$[ebp]
  002bc	c7 82 54 03 00
	00 08 00 00 00	 mov	 DWORD PTR [edx+852], 8
$L76842:

; 225  : 
; 226  : 	//need to be able to distinguish between horizontal and vertical
; 227  : 	//scrollbars in some instances
; 228  : 	sw->sbarHorz.nBarType	     = SB_HORZ;

  002c6	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  002c9	c7 80 48 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+840], 0

; 229  : 	sw->sbarVert.nBarType	     = SB_VERT;

  002d3	8b 4d fc	 mov	 ecx, DWORD PTR _sw$[ebp]
  002d6	c7 81 94 06 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1684], 1

; 230  : 
; 231  : 	sw->sbarHorz.fFlatScrollbar  = CSBS_NORMAL;

  002e0	8b 55 fc	 mov	 edx, DWORD PTR _sw$[ebp]
  002e3	c7 82 4c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+844], 0

; 232  : 	sw->sbarVert.fFlatScrollbar  = CSBS_NORMAL;

  002ed	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  002f0	c7 80 98 06 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1688], 0

; 233  : 
; 234  : 	//set the default arrow sizes for the scrollbars
; 235  : 	sw->sbarHorz.nArrowLength	 = SYSTEM_METRIC;

  002fa	8b 4d fc	 mov	 ecx, DWORD PTR _sw$[ebp]
  002fd	c7 41 2c ff ff
	ff ff		 mov	 DWORD PTR [ecx+44], -1

; 236  : 	sw->sbarHorz.nArrowWidth	 = SYSTEM_METRIC;

  00304	8b 55 fc	 mov	 edx, DWORD PTR _sw$[ebp]
  00307	c7 42 30 ff ff
	ff ff		 mov	 DWORD PTR [edx+48], -1

; 237  : 	sw->sbarVert.nArrowLength	 = SYSTEM_METRIC;

  0030e	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  00311	c7 80 78 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+888], -1

; 238  : 	sw->sbarVert.nArrowWidth	 = SYSTEM_METRIC;

  0031b	8b 4d fc	 mov	 ecx, DWORD PTR _sw$[ebp]
  0031e	c7 81 7c 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+892], -1

; 239  : 
; 240  : 	sw->bPreventStyleChange		 = FALSE;

  00328	8b 55 fc	 mov	 edx, DWORD PTR _sw$[ebp]
  0032b	c7 82 bc 06 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1724], 0

; 241  : #pragma warning( disable: 4311 4312)		
; 242  : 	sw->oldproc = (WNDPROC)SetWindowLong(hwnd, GWL_WNDPROC, (LONG)CoolSBWndProc);

  00335	8b f4		 mov	 esi, esp
  00337	68 00 00 00 00	 push	 OFFSET FLAT:_CoolSBWndProc@16
  0033c	6a fc		 push	 -4			; fffffffcH
  0033e	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00341	50		 push	 eax
  00342	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00348	3b f4		 cmp	 esi, esp
  0034a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034f	8b 4d fc	 mov	 ecx, DWORD PTR _sw$[ebp]
  00352	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 243  : #pragma warning( default: 4311 4312)	
; 244  : 	CoolSB_SetMinThumbSize(hwnd, SB_BOTH, CoolSB_GetDefaultMinThumbSize());

  00355	e8 00 00 00 00	 call	 _CoolSB_GetDefaultMinThumbSize@0
  0035a	50		 push	 eax
  0035b	6a 03		 push	 3
  0035d	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00360	52		 push	 edx
  00361	e8 00 00 00 00	 call	 _CoolSB_SetMinThumbSize@12

; 245  : 
; 246  : #ifdef COOLSB_TOOLTIPS
; 247  : 	ice.dwSize = sizeof(ice);

  00366	c7 45 ec 08 00
	00 00		 mov	 DWORD PTR _ice$[ebp], 8

; 248  : 	ice.dwICC  = ICC_BAR_CLASSES;

  0036d	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _ice$[ebp+4], 4

; 249  : 	InitCommonControlsEx(&ice);

  00374	8b f4		 mov	 esi, esp
  00376	8d 45 ec	 lea	 eax, DWORD PTR _ice$[ebp]
  00379	50		 push	 eax
  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitCommonControlsEx@4
  00380	3b f4		 cmp	 esi, esp
  00382	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 250  : 
; 251  : 	sw->hwndToolTip = CreateWindowEx(WS_EX_TOPMOST | WS_EX_TOOLWINDOW, TOOLTIPS_CLASS, _T(""),
; 252  :                             WS_POPUP | TTS_NOPREFIX | TTS_ALWAYSTIP,
; 253  :                             CW_USEDEFAULT, CW_USEDEFAULT,
; 254  :                             CW_USEDEFAULT, CW_USEDEFAULT,
; 255  :                             hwnd, NULL, GetModuleHandle(0),
; 256  :                             NULL);

  00387	8b f4		 mov	 esi, esp
  00389	6a 00		 push	 0
  0038b	8b fc		 mov	 edi, esp
  0038d	6a 00		 push	 0
  0038f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00395	3b fc		 cmp	 edi, esp
  00397	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039c	50		 push	 eax
  0039d	6a 00		 push	 0
  0039f	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  003a2	51		 push	 ecx
  003a3	68 00 00 00 80	 push	 -2147483648		; 80000000H
  003a8	68 00 00 00 80	 push	 -2147483648		; 80000000H
  003ad	68 00 00 00 80	 push	 -2147483648		; 80000000H
  003b2	68 00 00 00 80	 push	 -2147483648		; 80000000H
  003b7	68 03 00 00 80	 push	 -2147483645		; 80000003H
  003bc	68 00 00 00 00	 push	 OFFSET FLAT:$SG76851
  003c1	68 00 00 00 00	 push	 OFFSET FLAT:$SG76852
  003c6	68 88 00 00 00	 push	 136			; 00000088H
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	8b 55 fc	 mov	 edx, DWORD PTR _sw$[ebp]
  003db	89 82 a8 06 00
	00		 mov	 DWORD PTR [edx+1704], eax

; 257  : 
; 258  : 	ti.cbSize = sizeof(TOOLINFO);

  003e1	c7 45 b8 2c 00
	00 00		 mov	 DWORD PTR _ti$[ebp], 44	; 0000002cH

; 259  : 	ti.uFlags = TTF_IDISHWND;

  003e8	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _ti$[ebp+4], 1

; 260  : 	ti.hwnd   = hwnd;

  003ef	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  003f2	89 45 c0	 mov	 DWORD PTR _ti$[ebp+8], eax

; 261  : #pragma warning( disable: 4311)	
; 262  : 	ti.uId    = (UINT)hwnd;

  003f5	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  003f8	89 4d c4	 mov	 DWORD PTR _ti$[ebp+12], ecx

; 263  : #pragma warning( default: 4311)	
; 264  : 	ti.lpszText = LPSTR_TEXTCALLBACK;

  003fb	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _ti$[ebp+36], -1

; 265  : 	ti.hinst   = GetModuleHandle(0);

  00402	8b f4		 mov	 esi, esp
  00404	6a 00		 push	 0
  00406	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0040c	3b f4		 cmp	 esi, esp
  0040e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00413	89 45 d8	 mov	 DWORD PTR _ti$[ebp+32], eax

; 266  : 
; 267  : 	SendMessage(sw->hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

  00416	8b f4		 mov	 esi, esp
  00418	8d 55 b8	 lea	 edx, DWORD PTR _ti$[ebp]
  0041b	52		 push	 edx
  0041c	6a 00		 push	 0
  0041e	68 04 04 00 00	 push	 1028			; 00000404H
  00423	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  00426	8b 88 a8 06 00
	00		 mov	 ecx, DWORD PTR [eax+1704]
  0042c	51		 push	 ecx
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 268  : 	
; 269  : #else
; 270  : 
; 271  : 	UNREFERENCED_PARAMETER(ice);
; 272  : 	UNREFERENCED_PARAMETER(ti);
; 273  : 	sw->hwndToolTip = 0;
; 274  : 
; 275  : #endif
; 276  : 	
; 277  : 	//send the window a frame changed message to update the scrollbars
; 278  : 	RedrawNonClient(hwnd, TRUE);

  0043a	6a 01		 push	 1
  0043c	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0043f	52		 push	 edx
  00440	e8 00 00 00 00	 call	 _RedrawNonClient
  00445	83 c4 08	 add	 esp, 8

; 279  : 
; 280  : 	return TRUE;

  00448	b8 01 00 00 00	 mov	 eax, 1
$L76825:

; 281  : }

  0044d	52		 push	 edx
  0044e	8b cd		 mov	 ecx, ebp
  00450	50		 push	 eax
  00451	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L77299
  00457	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045c	58		 pop	 eax
  0045d	5a		 pop	 edx
  0045e	5f		 pop	 edi
  0045f	5e		 pop	 esi
  00460	83 c4 68	 add	 esp, 104		; 00000068H
  00463	3b ec		 cmp	 ebp, esp
  00465	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0046a	8b e5		 mov	 esp, ebp
  0046c	5d		 pop	 ebp
  0046d	c2 04 00	 ret	 4
$L77299:
  00470	03 00 00 00	 DD	 3
  00474	00 00 00 00	 DD	 $L77298
$L77298:
  00478	ec ff ff ff	 DD	 -20			; ffffffecH
  0047c	08 00 00 00	 DD	 8
  00480	00 00 00 00	 DD	 $L77295
  00484	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00488	2c 00 00 00	 DD	 44			; 0000002cH
  0048c	00 00 00 00	 DD	 $L77296
  00490	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00494	10 00 00 00	 DD	 16			; 00000010H
  00498	00 00 00 00	 DD	 $L77297
$L77297:
  0049c	72		 DB	 114			; 00000072H
  0049d	65		 DB	 101			; 00000065H
  0049e	63		 DB	 99			; 00000063H
  0049f	74		 DB	 116			; 00000074H
  004a0	00		 DB	 0
$L77296:
  004a1	74		 DB	 116			; 00000074H
  004a2	69		 DB	 105			; 00000069H
  004a3	00		 DB	 0
$L77295:
  004a4	69		 DB	 105			; 00000069H
  004a5	63		 DB	 99			; 00000063H
  004a6	65		 DB	 101			; 00000065H
  004a7	00		 DB	 0
_InitializeCoolSB@4 ENDP
_TEXT	ENDS
EXTRN	__imp__SetWindowPos@28:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_fFrameChanged$ = 12					; size = 4
_RedrawNonClient PROC NEAR

; 91   : {

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	56		 push	 esi

; 92   : 	if(fFrameChanged == FALSE)

  004b4	83 7d 0c 00	 cmp	 DWORD PTR _fFrameChanged$[ebp], 0
  004b8	75 1e		 jne	 SHORT $L76795

; 93   : 	{
; 94   : 		/*
; 95   : 		RECT rect;
; 96   : 		HRGN hrgn1, hrgn2;
; 97   : 		
; 98   : 		SCROLLWND *sw = GetScrollWndFromHwnd(hwnd);
; 99   : 		
; 100  : 		GetScrollRect(sw, SB_HORZ, hwnd, &rect);
; 101  : 		hrgn1 = CreateRectRgnIndirect(&rect);
; 102  : 		
; 103  : 		GetScrollRect(sw, SB_VERT, hwnd, &rect);
; 104  : 		hrgn2 = CreateRectRgnIndirect(&rect);
; 105  : 		
; 106  : 		CombineRgn(hrgn1, hrgn2, hrgn1, RGN_OR);
; 107  : 		
; 108  : 		SendMessage(hwnd, WM_NCPAINT, (WPARAM)hrgn1, 0);
; 109  : 		
; 110  : 		DeleteObject(hrgn1);
; 111  : 		DeleteObject(hrgn2);*/
; 112  : 
; 113  : 		SendMessage(hwnd, WM_NCPAINT, (WPARAM)1, 0);

  004ba	8b f4		 mov	 esi, esp
  004bc	6a 00		 push	 0
  004be	6a 01		 push	 1
  004c0	68 85 00 00 00	 push	 133			; 00000085H
  004c5	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  004c8	50		 push	 eax
  004c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  004cf	3b f4		 cmp	 esi, esp
  004d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  : 	}
; 115  : 	else

  004d6	eb 1f		 jmp	 SHORT $L76794
$L76795:

; 116  : 	{
; 117  : 		SetWindowPos(hwnd, 0, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_NOACTIVATE
; 118  : 			| SWP_FRAMECHANGED | SWP_DRAWFRAME);

  004d8	8b f4		 mov	 esi, esp
  004da	6a 37		 push	 55			; 00000037H
  004dc	6a 00		 push	 0
  004de	6a 00		 push	 0
  004e0	6a 00		 push	 0
  004e2	6a 00		 push	 0
  004e4	6a 00		 push	 0
  004e6	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  004e9	51		 push	 ecx
  004ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
  004f0	3b f4		 cmp	 esi, esp
  004f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L76794:

; 119  : 	}
; 120  : }

  004f7	5e		 pop	 esi
  004f8	3b ec		 cmp	 ebp, esp
  004fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ff	5d		 pop	 ebp
  00500	c3		 ret	 0
_RedrawNonClient ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_EnableScrollBar@12
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_bFailed$ = -12						; size = 4
_oldstate$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_wArrows$ = 16						; size = 4
_CoolSB_EnableScrollBar@12 PROC NEAR

; 284  : {

  00510	55		 push	 ebp
  00511	8b ec		 mov	 ebp, esp
  00513	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00516	56		 push	 esi
  00517	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0051e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00525	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 285  : 	SCROLLBAR *sbar;
; 286  : 	UINT oldstate;
; 287  : 	BOOL bFailed = FALSE;

  0052c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 0

; 288  : 
; 289  : 	if(!CoolSB_IsCoolScrollEnabled(hwnd))

  00533	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 _CoolSB_IsCoolScrollEnabled@4
  0053c	85 c0		 test	 eax, eax
  0053e	75 20		 jne	 SHORT $L76867

; 290  : 		return EnableScrollBar(hwnd, wSBflags, wArrows);

  00540	8b f4		 mov	 esi, esp
  00542	8b 4d 10	 mov	 ecx, DWORD PTR _wArrows$[ebp]
  00545	51		 push	 ecx
  00546	8b 55 0c	 mov	 edx, DWORD PTR _wSBflags$[ebp]
  00549	52		 push	 edx
  0054a	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0054d	50		 push	 eax
  0054e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableScrollBar@12
  00554	3b f4		 cmp	 esi, esp
  00556	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0055b	e9 a1 00 00 00	 jmp	 $L76863
$L76867:

; 291  : 
; 292  : 	if((wSBflags == SB_HORZ || wSBflags == SB_BOTH) && 
; 293  : 		(sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  00560	83 7d 0c 00	 cmp	 DWORD PTR _wSBflags$[ebp], 0
  00564	74 06		 je	 SHORT $L76869
  00566	83 7d 0c 03	 cmp	 DWORD PTR _wSBflags$[ebp], 3
  0056a	75 40		 jne	 SHORT $L76868
$L76869:
  0056c	6a 00		 push	 0
  0056e	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00571	51		 push	 ecx
  00572	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00577	83 c4 08	 add	 esp, 8
  0057a	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0057d	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00581	74 29		 je	 SHORT $L76868

; 294  : 	{
; 295  : 		oldstate = sbar->fScrollFlags;

  00583	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00586	8b 02		 mov	 eax, DWORD PTR [edx]
  00588	89 45 f8	 mov	 DWORD PTR _oldstate$[ebp], eax

; 296  : 		
; 297  : 		//clear any existing state, and OR in the disabled flags
; 298  : 		sbar->fScrollFlags = (sbar->fScrollFlags & ~ESB_DISABLE_BOTH) | wArrows;

  0058b	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0058e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00590	83 e2 fc	 and	 edx, -4			; fffffffcH
  00593	0b 55 10	 or	 edx, DWORD PTR _wArrows$[ebp]
  00596	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  00599	89 10		 mov	 DWORD PTR [eax], edx

; 299  : 
; 300  : 		if(oldstate == sbar->fScrollFlags)

  0059b	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0059e	8b 55 f8	 mov	 edx, DWORD PTR _oldstate$[ebp]
  005a1	3b 11		 cmp	 edx, DWORD PTR [ecx]
  005a3	75 07		 jne	 SHORT $L76868

; 301  : 			bFailed = TRUE;

  005a5	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$L76868:

; 302  : 
; 303  : 	}
; 304  : 
; 305  : 	if((wSBflags == SB_VERT || wSBflags == SB_BOTH) && 
; 306  : 		(sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  005ac	83 7d 0c 01	 cmp	 DWORD PTR _wSBflags$[ebp], 1
  005b0	74 06		 je	 SHORT $L76872
  005b2	83 7d 0c 03	 cmp	 DWORD PTR _wSBflags$[ebp], 3
  005b6	75 40		 jne	 SHORT $L76871
$L76872:
  005b8	6a 01		 push	 1
  005ba	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  005bd	50		 push	 eax
  005be	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  005c3	83 c4 08	 add	 esp, 8
  005c6	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  005c9	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  005cd	74 29		 je	 SHORT $L76871

; 307  : 	{
; 308  : 		oldstate = sbar->fScrollFlags;

  005cf	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  005d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  005d4	89 55 f8	 mov	 DWORD PTR _oldstate$[ebp], edx

; 309  : 		
; 310  : 		//clear any existing state, and OR in the disabled flags
; 311  : 		sbar->fScrollFlags = (sbar->fScrollFlags & ~ESB_DISABLE_BOTH) | wArrows;

  005d7	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  005da	8b 08		 mov	 ecx, DWORD PTR [eax]
  005dc	83 e1 fc	 and	 ecx, -4			; fffffffcH
  005df	0b 4d 10	 or	 ecx, DWORD PTR _wArrows$[ebp]
  005e2	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  005e5	89 0a		 mov	 DWORD PTR [edx], ecx

; 312  : 
; 313  : 		if(oldstate == sbar->fScrollFlags)

  005e7	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  005ea	8b 4d f8	 mov	 ecx, DWORD PTR _oldstate$[ebp]
  005ed	3b 08		 cmp	 ecx, DWORD PTR [eax]
  005ef	75 07		 jne	 SHORT $L76871

; 314  : 			bFailed = TRUE;

  005f1	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$L76871:

; 315  : 	}
; 316  : 
; 317  : 	return !bFailed;

  005f8	33 c0		 xor	 eax, eax
  005fa	83 7d f4 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  005fe	0f 94 c0	 sete	 al
$L76863:

; 318  : }

  00601	5e		 pop	 esi
  00602	83 c4 0c	 add	 esp, 12			; 0000000cH
  00605	3b ec		 cmp	 ebp, esp
  00607	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0060c	8b e5		 mov	 esp, ebp
  0060e	5d		 pop	 ebp
  0060f	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_EnableScrollBar@12 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollBarInfo@4
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_CoolSB_GetScrollBarInfo@4 PROC NEAR

; 321  : {

  00620	55		 push	 ebp
  00621	8b ec		 mov	 ebp, esp

; 322  : //	SCROLLBARINFO sbi; not defined in winuser.h
; 323  : 	return FALSE;	

  00623	33 c0		 xor	 eax, eax

; 324  : }

  00625	5d		 pop	 ebp
  00626	c2 04 00	 ret	 4
_CoolSB_GetScrollBarInfo@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollInfo@12
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_copied$ = -8						; size = 4
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_fnBar$ = 12						; size = 4
_lpsi$ = 16						; size = 4
_CoolSB_GetScrollInfo@12 PROC NEAR

; 327  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	83 ec 08	 sub	 esp, 8
  00636	56		 push	 esi
  00637	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0063e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 328  : 	SCROLLINFO *mysi;
; 329  : 	BOOL copied = FALSE;

  00645	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 0

; 330  : 	
; 331  : 	if(!lpsi)

  0064c	83 7d 10 00	 cmp	 DWORD PTR _lpsi$[ebp], 0
  00650	75 07		 jne	 SHORT $L76887

; 332  : 		return FALSE;

  00652	33 c0		 xor	 eax, eax
  00654	e9 c0 00 00 00	 jmp	 $L76884
$L76887:

; 333  : 
; 334  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, fnBar)))

  00659	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  0065c	50		 push	 eax
  0065d	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00660	51		 push	 ecx
  00661	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00666	83 c4 08	 add	 esp, 8
  00669	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  0066c	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  00670	75 20		 jne	 SHORT $L76888

; 335  : 	{
; 336  : 		return GetScrollInfo(hwnd, fnBar, lpsi);

  00672	8b f4		 mov	 esi, esp
  00674	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00677	52		 push	 edx
  00678	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  0067b	50		 push	 eax
  0067c	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0067f	51		 push	 ecx
  00680	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12
  00686	3b f4		 cmp	 esi, esp
  00688	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0068d	e9 87 00 00 00	 jmp	 $L76884
$L76888:

; 337  : 	}
; 338  : 	
; 339  : 	if(lpsi->fMask & SIF_PAGE)

  00692	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00695	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00698	83 e0 02	 and	 eax, 2
  0069b	74 13		 je	 SHORT $L76889

; 340  : 	{
; 341  : 		lpsi->nPage = mysi->nPage;

  0069d	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  006a0	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  006a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006a6	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 342  : 		copied = TRUE;

  006a9	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76889:

; 343  : 	}
; 344  : 
; 345  : 	if(lpsi->fMask & SIF_POS)

  006b0	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  006b3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  006b6	83 e2 04	 and	 edx, 4
  006b9	74 13		 je	 SHORT $L76890

; 346  : 	{
; 347  : 		lpsi->nPos = mysi->nPos;

  006bb	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  006be	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  006c1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  006c4	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 348  : 		copied = TRUE;

  006c7	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76890:

; 349  : 	}
; 350  : 
; 351  : 	if(lpsi->fMask & SIF_TRACKPOS)

  006ce	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  006d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006d4	83 e1 10	 and	 ecx, 16			; 00000010H
  006d7	74 13		 je	 SHORT $L76891

; 352  : 	{
; 353  : 		lpsi->nTrackPos = mysi->nTrackPos;

  006d9	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  006dc	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  006df	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006e2	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 354  : 		copied = TRUE;

  006e5	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76891:

; 355  : 	}
; 356  : 
; 357  : 	if(lpsi->fMask & SIF_RANGE)

  006ec	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  006ef	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  006f2	83 e0 01	 and	 eax, 1
  006f5	74 1f		 je	 SHORT $L76892

; 358  : 	{
; 359  : 		lpsi->nMin = mysi->nMin;

  006f7	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  006fa	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  006fd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00700	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 360  : 		lpsi->nMax = mysi->nMax;

  00703	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  00706	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00709	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0070c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 361  : 		copied = TRUE;

  0070f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76892:

; 362  : 	}
; 363  : 
; 364  : 	return copied;

  00716	8b 45 f8	 mov	 eax, DWORD PTR _copied$[ebp]
$L76884:

; 365  : }

  00719	5e		 pop	 esi
  0071a	83 c4 08	 add	 esp, 8
  0071d	3b ec		 cmp	 ebp, esp
  0071f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00724	8b e5		 mov	 esp, ebp
  00726	5d		 pop	 ebp
  00727	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_GetScrollInfo@12 ENDP
; Function compile flags: /Odt /RTCsu
_sb$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_fnBar$ = 12						; size = 4
_GetScrollInfoFromHwnd PROC NEAR

; 146  : {

  00730	55		 push	 ebp
  00731	8b ec		 mov	 ebp, esp
  00733	51		 push	 ecx
  00734	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 147  : 	SCROLLBAR *sb = GetScrollBarFromHwnd(hwnd, fnBar);

  0073b	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  0073e	50		 push	 eax
  0073f	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00742	51		 push	 ecx
  00743	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00748	83 c4 08	 add	 esp, 8
  0074b	89 45 fc	 mov	 DWORD PTR _sb$[ebp], eax

; 148  : 
; 149  : 	if(sb == 0)

  0074e	83 7d fc 00	 cmp	 DWORD PTR _sb$[ebp], 0
  00752	75 04		 jne	 SHORT $L76817

; 150  : 		return FALSE;

  00754	33 c0		 xor	 eax, eax
  00756	eb 1e		 jmp	 SHORT $L76815
$L76817:

; 151  : 
; 152  : 	if(fnBar == SB_HORZ)

  00758	83 7d 0c 00	 cmp	 DWORD PTR _fnBar$[ebp], 0
  0075c	75 08		 jne	 SHORT $L76818

; 153  : 	{
; 154  : 		return &sb->scrollInfo;

  0075e	8b 45 fc	 mov	 eax, DWORD PTR _sb$[ebp]
  00761	83 c0 08	 add	 eax, 8
  00764	eb 10		 jmp	 SHORT $L76815
$L76818:

; 155  : 	}
; 156  : 	else if(fnBar == SB_VERT)

  00766	83 7d 0c 01	 cmp	 DWORD PTR _fnBar$[ebp], 1
  0076a	75 08		 jne	 SHORT $L76820

; 157  : 	{
; 158  : 		return &sb->scrollInfo;

  0076c	8b 45 fc	 mov	 eax, DWORD PTR _sb$[ebp]
  0076f	83 c0 08	 add	 eax, 8
  00772	eb 02		 jmp	 SHORT $L76815
$L76820:

; 159  : 	}
; 160  : 	else
; 161  : 		return NULL;

  00774	33 c0		 xor	 eax, eax
$L76815:

; 162  : }

  00776	83 c4 04	 add	 esp, 4
  00779	3b ec		 cmp	 ebp, esp
  0077b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00780	8b e5		 mov	 esp, ebp
  00782	5d		 pop	 ebp
  00783	c3		 ret	 0
_GetScrollInfoFromHwnd ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollPos@8
EXTRN	__imp__GetScrollPos@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_CoolSB_GetScrollPos@8 PROC NEAR

; 368  : {

  00790	55		 push	 ebp
  00791	8b ec		 mov	 ebp, esp
  00793	51		 push	 ecx
  00794	56		 push	 esi
  00795	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 369  : 	SCROLLINFO *mysi;
; 370  : 	
; 371  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  0079c	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  0079f	50		 push	 eax
  007a0	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  007a3	51		 push	 ecx
  007a4	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  007a9	83 c4 08	 add	 esp, 8
  007ac	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  007af	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  007b3	75 19		 jne	 SHORT $L76899

; 372  : 		return GetScrollPos(hwnd, nBar);

  007b5	8b f4		 mov	 esi, esp
  007b7	8b 55 0c	 mov	 edx, DWORD PTR _nBar$[ebp]
  007ba	52		 push	 edx
  007bb	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  007be	50		 push	 eax
  007bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollPos@8
  007c5	3b f4		 cmp	 esi, esp
  007c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007cc	eb 06		 jmp	 SHORT $L76897
$L76899:

; 373  : 
; 374  : 	return mysi->nPos;

  007ce	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  007d1	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
$L76897:

; 375  : }

  007d4	5e		 pop	 esi
  007d5	83 c4 04	 add	 esp, 4
  007d8	3b ec		 cmp	 ebp, esp
  007da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007df	8b e5		 mov	 esp, ebp
  007e1	5d		 pop	 ebp
  007e2	c2 08 00	 ret	 8
_CoolSB_GetScrollPos@8 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollRange@16
EXTRN	__imp__GetScrollRange@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_lpMinPos$ = 16						; size = 4
_lpMaxPos$ = 20						; size = 4
_CoolSB_GetScrollRange@16 PROC NEAR

; 378  : {

  007f0	55		 push	 ebp
  007f1	8b ec		 mov	 ebp, esp
  007f3	51		 push	 ecx
  007f4	56		 push	 esi
  007f5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 379  : 	SCROLLINFO *mysi;
; 380  : 	
; 381  : 	if(!lpMinPos || !lpMaxPos)

  007fc	83 7d 10 00	 cmp	 DWORD PTR _lpMinPos$[ebp], 0
  00800	74 06		 je	 SHORT $L76911
  00802	83 7d 14 00	 cmp	 DWORD PTR _lpMaxPos$[ebp], 0
  00806	75 04		 jne	 SHORT $L76910
$L76911:

; 382  : 		return FALSE;

  00808	33 c0		 xor	 eax, eax
  0080a	eb 55		 jmp	 SHORT $L76908
$L76910:

; 383  : 
; 384  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  0080c	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  0080f	50		 push	 eax
  00810	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00813	51		 push	 ecx
  00814	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00819	83 c4 08	 add	 esp, 8
  0081c	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  0081f	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  00823	75 21		 jne	 SHORT $L76912

; 385  : 		return GetScrollRange(hwnd, nBar, lpMinPos, lpMaxPos);

  00825	8b f4		 mov	 esi, esp
  00827	8b 55 14	 mov	 edx, DWORD PTR _lpMaxPos$[ebp]
  0082a	52		 push	 edx
  0082b	8b 45 10	 mov	 eax, DWORD PTR _lpMinPos$[ebp]
  0082e	50		 push	 eax
  0082f	8b 4d 0c	 mov	 ecx, DWORD PTR _nBar$[ebp]
  00832	51		 push	 ecx
  00833	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00836	52		 push	 edx
  00837	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollRange@16
  0083d	3b f4		 cmp	 esi, esp
  0083f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00844	eb 1b		 jmp	 SHORT $L76908
$L76912:

; 386  : 
; 387  : 	*lpMinPos = mysi->nMin;

  00846	8b 45 10	 mov	 eax, DWORD PTR _lpMinPos$[ebp]
  00849	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0084c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0084f	89 10		 mov	 DWORD PTR [eax], edx

; 388  : 	*lpMaxPos = mysi->nMax;

  00851	8b 45 14	 mov	 eax, DWORD PTR _lpMaxPos$[ebp]
  00854	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00857	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0085a	89 10		 mov	 DWORD PTR [eax], edx

; 389  : 
; 390  : 	return TRUE;

  0085c	b8 01 00 00 00	 mov	 eax, 1
$L76908:

; 391  : }

  00861	5e		 pop	 esi
  00862	83 c4 04	 add	 esp, 4
  00865	3b ec		 cmp	 ebp, esp
  00867	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0086c	8b e5		 mov	 esp, ebp
  0086e	5d		 pop	 ebp
  0086f	c2 10 00	 ret	 16			; 00000010H
_CoolSB_GetScrollRange@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetScrollInfo@16
PUBLIC	_CoolSB_ShowScrollBar@12
EXTRN	_CoolSB_IsThumbTracking@4:NEAR
EXTRN	__imp__SetScrollInfo@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv159 = -44						; size = 4
tv161 = -40						; size = 4
tv149 = -36						; size = 4
tv140 = -32						; size = 4
tv130 = -28						; size = 4
tv129 = -24						; size = 4
tv92 = -20						; size = 4
_t$76929 = -16						; size = 4
_fRecalcFrame$ = -12					; size = 4
_sbar$ = -8						; size = 4
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_fnBar$ = 12						; size = 4
_lpsi$ = 16						; size = 4
_fRedraw$ = 20						; size = 4
_CoolSB_SetScrollInfo@16 PROC NEAR

; 394  : {

  00880	55		 push	 ebp
  00881	8b ec		 mov	 ebp, esp
  00883	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00886	56		 push	 esi
  00887	57		 push	 edi
  00888	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0088b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00890	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00895	f3 ab		 rep stosd

; 395  : 	SCROLLINFO *mysi;
; 396  : 	SCROLLBAR *sbar;
; 397  : 	BOOL       fRecalcFrame = FALSE;

  00897	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 0

; 398  : 
; 399  : 	if(!lpsi)

  0089e	83 7d 10 00	 cmp	 DWORD PTR _lpsi$[ebp], 0
  008a2	75 07		 jne	 SHORT $L76925

; 400  : 		return FALSE;

  008a4	33 c0		 xor	 eax, eax
  008a6	e9 62 02 00 00	 jmp	 $L76921
$L76925:

; 401  : 
; 402  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, fnBar)))

  008ab	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  008ae	50		 push	 eax
  008af	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  008b2	51		 push	 ecx
  008b3	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  008b8	83 c4 08	 add	 esp, 8
  008bb	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  008be	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  008c2	75 24		 jne	 SHORT $L76926

; 403  : 		return SetScrollInfo(hwnd, fnBar, lpsi, fRedraw);

  008c4	8b f4		 mov	 esi, esp
  008c6	8b 55 14	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  008c9	52		 push	 edx
  008ca	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  008cd	50		 push	 eax
  008ce	8b 4d 0c	 mov	 ecx, DWORD PTR _fnBar$[ebp]
  008d1	51		 push	 ecx
  008d2	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  008d5	52		 push	 edx
  008d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollInfo@16
  008dc	3b f4		 cmp	 esi, esp
  008de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008e3	e9 25 02 00 00	 jmp	 $L76921
$L76926:

; 404  : 
; 405  : 	//if(CoolSB_IsThumbTracking(hwnd))
; 406  : 	//	return mysi->nPos;
; 407  : 
; 408  : 	if(lpsi->fMask & SIF_RANGE)

  008e8	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  008eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008ee	83 e1 01	 and	 ecx, 1
  008f1	74 18		 je	 SHORT $L76927

; 409  : 	{
; 410  : 		mysi->nMin = lpsi->nMin;

  008f3	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  008f6	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  008f9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  008fc	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 411  : 		mysi->nMax = lpsi->nMax;

  008ff	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00902	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00905	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00908	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L76927:

; 412  : 	}
; 413  : 
; 414  : 	//The nPage member must specify a value from 0 to nMax - nMin +1. 
; 415  : 	if(lpsi->fMask & SIF_PAGE)

  0090b	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  0090e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00911	83 e0 02	 and	 eax, 2
  00914	74 67		 je	 SHORT $L76928

; 416  : 	{
; 417  : 		UINT t = (UINT)(mysi->nMax - mysi->nMin + 1);

  00916	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00919	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  0091c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0091f	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00922	83 c0 01	 add	 eax, 1
  00925	89 45 f0	 mov	 DWORD PTR _t$76929[ebp], eax

; 418  : 		mysi->nPage = min(max(0, lpsi->nPage), t);

  00928	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  0092b	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0092f	73 09		 jae	 SHORT $L77309
  00931	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
  00938	eb 09		 jmp	 SHORT $L77310
$L77309:
  0093a	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  0093d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00940	89 45 ec	 mov	 DWORD PTR tv92[ebp], eax
$L77310:
  00943	8b 4d ec	 mov	 ecx, DWORD PTR tv92[ebp]
  00946	3b 4d f0	 cmp	 ecx, DWORD PTR _t$76929[ebp]
  00949	73 23		 jae	 SHORT $L77313
  0094b	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  0094e	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00952	73 09		 jae	 SHORT $L77311
  00954	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
  0095b	eb 09		 jmp	 SHORT $L77312
$L77311:
  0095d	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00960	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00963	89 4d e8	 mov	 DWORD PTR tv129[ebp], ecx
$L77312:
  00966	8b 55 e8	 mov	 edx, DWORD PTR tv129[ebp]
  00969	89 55 e4	 mov	 DWORD PTR tv130[ebp], edx
  0096c	eb 06		 jmp	 SHORT $L77314
$L77313:
  0096e	8b 45 f0	 mov	 eax, DWORD PTR _t$76929[ebp]
  00971	89 45 e4	 mov	 DWORD PTR tv130[ebp], eax
$L77314:
  00974	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00977	8b 55 e4	 mov	 edx, DWORD PTR tv130[ebp]
  0097a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$L76928:

; 419  : 	}
; 420  : 
; 421  : 	//The nPos member must specify a value between nMin and nMax - max(nPage - 1, 0).
; 422  : 	if(lpsi->fMask & SIF_POS)

  0097d	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00980	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00983	83 e1 04	 and	 ecx, 4
  00986	0f 84 9c 00 00
	00		 je	 $L76931

; 423  : 	{
; 424  : 		mysi->nPos = max(lpsi->nPos, mysi->nMin);

  0098c	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  0098f	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00992	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00995	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00998	7e 0b		 jle	 SHORT $L77315
  0099a	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  0099d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  009a0	89 45 e0	 mov	 DWORD PTR tv140[ebp], eax
  009a3	eb 09		 jmp	 SHORT $L77316
$L77315:
  009a5	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  009a8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  009ab	89 55 e0	 mov	 DWORD PTR tv140[ebp], edx
$L77316:
  009ae	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  009b1	8b 4d e0	 mov	 ecx, DWORD PTR tv140[ebp]
  009b4	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 425  : 		mysi->nPos = min((UINT)mysi->nPos, mysi->nMax - max(mysi->nPage - 1, 0));

  009b7	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  009ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  009bd	83 e8 01	 sub	 eax, 1
  009c0	74 0e		 je	 SHORT $L77317
  009c2	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  009c5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009c8	83 ea 01	 sub	 edx, 1
  009cb	89 55 dc	 mov	 DWORD PTR tv149[ebp], edx
  009ce	eb 07		 jmp	 SHORT $L77318
$L77317:
  009d0	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$L77318:
  009d7	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  009da	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  009dd	2b 4d dc	 sub	 ecx, DWORD PTR tv149[ebp]
  009e0	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  009e3	39 4a 14	 cmp	 DWORD PTR [edx+20], ecx
  009e6	73 0b		 jae	 SHORT $L77321
  009e8	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  009eb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  009ee	89 4d d8	 mov	 DWORD PTR tv161[ebp], ecx
  009f1	eb 2c		 jmp	 SHORT $L77322
$L77321:
  009f3	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  009f6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  009f9	83 e8 01	 sub	 eax, 1
  009fc	74 0e		 je	 SHORT $L77319
  009fe	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00a01	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00a04	83 ea 01	 sub	 edx, 1
  00a07	89 55 d4	 mov	 DWORD PTR tv159[ebp], edx
  00a0a	eb 07		 jmp	 SHORT $L77320
$L77319:
  00a0c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L77320:
  00a13	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00a16	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a19	2b 4d d4	 sub	 ecx, DWORD PTR tv159[ebp]
  00a1c	89 4d d8	 mov	 DWORD PTR tv161[ebp], ecx
$L77322:
  00a1f	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00a22	8b 45 d8	 mov	 eax, DWORD PTR tv161[ebp]
  00a25	89 42 14	 mov	 DWORD PTR [edx+20], eax
$L76931:

; 426  : 	}
; 427  : 
; 428  : 	sbar = GetScrollBarFromHwnd(hwnd, fnBar);

  00a28	8b 4d 0c	 mov	 ecx, DWORD PTR _fnBar$[ebp]
  00a2b	51		 push	 ecx
  00a2c	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00a2f	52		 push	 edx
  00a30	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00a35	83 c4 08	 add	 esp, 8
  00a38	89 45 f8	 mov	 DWORD PTR _sbar$[ebp], eax

; 429  : 
; 430  : 	if((lpsi->fMask & SIF_DISABLENOSCROLL) || (sbar->fScrollFlags & CSBS_THUMBALWAYS))

  00a3b	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00a3e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00a41	83 e1 08	 and	 ecx, 8
  00a44	75 0a		 jne	 SHORT $L76935
  00a46	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00a49	8b 02		 mov	 eax, DWORD PTR [edx]
  00a4b	83 e0 04	 and	 eax, 4
  00a4e	74 21		 je	 SHORT $L76934
$L76935:

; 431  : 	{
; 432  : 		if(!sbar->fScrollVisible)

  00a50	8b 4d f8	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00a53	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00a57	75 16		 jne	 SHORT $L76936

; 433  : 		{
; 434  : 			CoolSB_ShowScrollBar(hwnd, fnBar, TRUE);

  00a59	6a 01		 push	 1
  00a5b	8b 55 0c	 mov	 edx, DWORD PTR _fnBar$[ebp]
  00a5e	52		 push	 edx
  00a5f	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00a62	50		 push	 eax
  00a63	e8 00 00 00 00	 call	 _CoolSB_ShowScrollBar@12

; 435  : 			fRecalcFrame = TRUE;

  00a68	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 1
$L76936:

; 436  : 		}
; 437  : 	}
; 438  : 	else

  00a6f	eb 73		 jmp	 SHORT $L76937
$L76934:

; 439  : 	{
; 440  : 		if(    mysi->nPage >  (UINT)mysi->nMax 
; 441  : 			|| mysi->nPage == (UINT)mysi->nMax && mysi->nMax == 0
; 442  : 			|| mysi->nMax  <= mysi->nMin)

  00a71	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00a74	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00a77	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00a7a	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00a7d	77 25		 ja	 SHORT $L76941
  00a7f	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00a82	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00a85	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00a88	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00a8b	75 09		 jne	 SHORT $L76942
  00a8d	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00a90	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00a94	74 0e		 je	 SHORT $L76941
$L76942:
  00a96	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00a99	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00a9c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00a9f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00aa2	7f 21		 jg	 SHORT $L76940
$L76941:

; 443  : 		{
; 444  : 			if(sbar->fScrollVisible)

  00aa4	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00aa7	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00aab	74 16		 je	 SHORT $L76943

; 445  : 			{
; 446  : 				CoolSB_ShowScrollBar(hwnd, fnBar, FALSE);

  00aad	6a 00		 push	 0
  00aaf	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  00ab2	50		 push	 eax
  00ab3	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00ab6	51		 push	 ecx
  00ab7	e8 00 00 00 00	 call	 _CoolSB_ShowScrollBar@12

; 447  : 				fRecalcFrame = TRUE;

  00abc	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 1
$L76943:

; 448  : 			}
; 449  : 		}
; 450  : 		else

  00ac3	eb 1f		 jmp	 SHORT $L76937
$L76940:

; 451  : 		{
; 452  : 			if(!sbar->fScrollVisible)

  00ac5	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00ac8	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00acc	75 16		 jne	 SHORT $L76937

; 453  : 			{
; 454  : 				CoolSB_ShowScrollBar(hwnd, fnBar, TRUE);

  00ace	6a 01		 push	 1
  00ad0	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  00ad3	50		 push	 eax
  00ad4	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00ad7	51		 push	 ecx
  00ad8	e8 00 00 00 00	 call	 _CoolSB_ShowScrollBar@12

; 455  : 				fRecalcFrame = TRUE;

  00add	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 1
$L76937:

; 456  : 			}
; 457  : 
; 458  : 		}
; 459  : 
; 460  : 	}
; 461  : 
; 462  : 	if(fRedraw && !CoolSB_IsThumbTracking(hwnd))

  00ae4	83 7d 14 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  00ae8	74 1d		 je	 SHORT $L76946
  00aea	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00aed	52		 push	 edx
  00aee	e8 00 00 00 00	 call	 _CoolSB_IsThumbTracking@4
  00af3	85 c0		 test	 eax, eax
  00af5	75 10		 jne	 SHORT $L76946

; 463  : 		RedrawNonClient(hwnd, fRecalcFrame);

  00af7	8b 45 f4	 mov	 eax, DWORD PTR _fRecalcFrame$[ebp]
  00afa	50		 push	 eax
  00afb	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00afe	51		 push	 ecx
  00aff	e8 00 00 00 00	 call	 _RedrawNonClient
  00b04	83 c4 08	 add	 esp, 8
$L76946:

; 464  : 	
; 465  : 	return mysi->nPos;

  00b07	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00b0a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
$L76921:

; 466  : }

  00b0d	5f		 pop	 edi
  00b0e	5e		 pop	 esi
  00b0f	83 c4 2c	 add	 esp, 44			; 0000002cH
  00b12	3b ec		 cmp	 ebp, esp
  00b14	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b19	8b e5		 mov	 esp, ebp
  00b1b	5d		 pop	 ebp
  00b1c	c2 10 00	 ret	 16			; 00000010H
_CoolSB_SetScrollInfo@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetScrollPos@16
EXTRN	__imp__SetScrollPos@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv129 = -24						; size = 4
tv131 = -20						; size = 4
tv87 = -16						; size = 4
tv78 = -12						; size = 4
_oldpos$ = -8						; size = 4
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_nPos$ = 16						; size = 4
_fRedraw$ = 20						; size = 4
_CoolSB_SetScrollPos@16 PROC NEAR

; 470  : {

  00b20	55		 push	 ebp
  00b21	8b ec		 mov	 ebp, esp
  00b23	83 ec 18	 sub	 esp, 24			; 00000018H
  00b26	56		 push	 esi
  00b27	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00b2c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00b2f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00b32	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00b35	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00b38	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00b3b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 471  : 	SCROLLINFO *mysi;
; 472  : 	int oldpos;
; 473  : 	
; 474  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  00b3e	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  00b41	50		 push	 eax
  00b42	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00b45	51		 push	 ecx
  00b46	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00b4b	83 c4 08	 add	 esp, 8
  00b4e	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  00b51	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  00b55	75 24		 jne	 SHORT $L76958

; 475  : 	{
; 476  : 		return SetScrollPos(hwnd, nBar, nPos, fRedraw);

  00b57	8b f4		 mov	 esi, esp
  00b59	8b 55 14	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  00b5c	52		 push	 edx
  00b5d	8b 45 10	 mov	 eax, DWORD PTR _nPos$[ebp]
  00b60	50		 push	 eax
  00b61	8b 4d 0c	 mov	 ecx, DWORD PTR _nBar$[ebp]
  00b64	51		 push	 ecx
  00b65	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00b68	52		 push	 edx
  00b69	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16
  00b6f	3b f4		 cmp	 esi, esp
  00b71	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b76	e9 c3 00 00 00	 jmp	 $L76955
$L76958:

; 477  : 	}
; 478  : 
; 479  : 	//this is what should happen, but real scrollbars don't work like this..
; 480  : 	//if(CoolSB_IsThumbTracking(hwnd))
; 481  : 	//	return mysi->nPos;
; 482  : 
; 483  : 	//validate and set the scollbar position
; 484  : 	oldpos = mysi->nPos;

  00b7b	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00b7e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00b81	89 4d f8	 mov	 DWORD PTR _oldpos$[ebp], ecx

; 485  : 	mysi->nPos = max(nPos, mysi->nMin);

  00b84	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00b87	8b 45 10	 mov	 eax, DWORD PTR _nPos$[ebp]
  00b8a	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00b8d	7e 08		 jle	 SHORT $L77324
  00b8f	8b 4d 10	 mov	 ecx, DWORD PTR _nPos$[ebp]
  00b92	89 4d f4	 mov	 DWORD PTR tv78[ebp], ecx
  00b95	eb 09		 jmp	 SHORT $L77325
$L77324:
  00b97	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00b9a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b9d	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
$L77325:
  00ba0	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00ba3	8b 55 f4	 mov	 edx, DWORD PTR tv78[ebp]
  00ba6	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 486  : 	mysi->nPos = min((UINT)mysi->nPos, mysi->nMax - max(mysi->nPage - 1, 0));

  00ba9	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00bac	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00baf	83 e9 01	 sub	 ecx, 1
  00bb2	74 0e		 je	 SHORT $L77326
  00bb4	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00bb7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00bba	83 e8 01	 sub	 eax, 1
  00bbd	89 45 f0	 mov	 DWORD PTR tv87[ebp], eax
  00bc0	eb 07		 jmp	 SHORT $L77327
$L77326:
  00bc2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L77327:
  00bc9	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00bcc	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00bcf	2b 55 f0	 sub	 edx, DWORD PTR tv87[ebp]
  00bd2	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00bd5	39 50 14	 cmp	 DWORD PTR [eax+20], edx
  00bd8	73 0b		 jae	 SHORT $L77330
  00bda	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00bdd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00be0	89 55 ec	 mov	 DWORD PTR tv131[ebp], edx
  00be3	eb 2c		 jmp	 SHORT $L77331
$L77330:
  00be5	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00be8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00beb	83 e9 01	 sub	 ecx, 1
  00bee	74 0e		 je	 SHORT $L77328
  00bf0	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00bf3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00bf6	83 e8 01	 sub	 eax, 1
  00bf9	89 45 e8	 mov	 DWORD PTR tv129[ebp], eax
  00bfc	eb 07		 jmp	 SHORT $L77329
$L77328:
  00bfe	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$L77329:
  00c05	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00c08	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00c0b	2b 55 e8	 sub	 edx, DWORD PTR tv129[ebp]
  00c0e	89 55 ec	 mov	 DWORD PTR tv131[ebp], edx
$L77331:
  00c11	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00c14	8b 4d ec	 mov	 ecx, DWORD PTR tv131[ebp]
  00c17	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 487  : 
; 488  : 	if(fRedraw && !CoolSB_IsThumbTracking(hwnd))

  00c1a	83 7d 14 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  00c1e	74 1b		 je	 SHORT $L76961
  00c20	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00c23	52		 push	 edx
  00c24	e8 00 00 00 00	 call	 _CoolSB_IsThumbTracking@4
  00c29	85 c0		 test	 eax, eax
  00c2b	75 0e		 jne	 SHORT $L76961

; 489  : 		RedrawNonClient(hwnd, FALSE);

  00c2d	6a 00		 push	 0
  00c2f	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00c32	50		 push	 eax
  00c33	e8 00 00 00 00	 call	 _RedrawNonClient
  00c38	83 c4 08	 add	 esp, 8
$L76961:

; 490  : 
; 491  : 	return oldpos;

  00c3b	8b 45 f8	 mov	 eax, DWORD PTR _oldpos$[ebp]
$L76955:

; 492  : }

  00c3e	5e		 pop	 esi
  00c3f	83 c4 18	 add	 esp, 24			; 00000018H
  00c42	3b ec		 cmp	 ebp, esp
  00c44	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c49	8b e5		 mov	 esp, ebp
  00c4b	5d		 pop	 ebp
  00c4c	c2 10 00	 ret	 16			; 00000010H
_CoolSB_SetScrollPos@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetScrollRange@20
EXTRN	__imp__SetScrollRange@20:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_nMinPos$ = 16						; size = 4
_nMaxPos$ = 20						; size = 4
_fRedraw$ = 24						; size = 4
_CoolSB_SetScrollRange@20 PROC NEAR

; 495  : {

  00c50	55		 push	 ebp
  00c51	8b ec		 mov	 ebp, esp
  00c53	51		 push	 ecx
  00c54	56		 push	 esi
  00c55	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 496  : 	SCROLLINFO *mysi;
; 497  : 	
; 498  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  00c5c	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  00c5f	50		 push	 eax
  00c60	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00c63	51		 push	 ecx
  00c64	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00c69	83 c4 08	 add	 esp, 8
  00c6c	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  00c6f	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  00c73	75 25		 jne	 SHORT $L76974

; 499  : 		return SetScrollRange(hwnd, nBar, nMinPos, nMaxPos, fRedraw);

  00c75	8b f4		 mov	 esi, esp
  00c77	8b 55 18	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  00c7a	52		 push	 edx
  00c7b	8b 45 14	 mov	 eax, DWORD PTR _nMaxPos$[ebp]
  00c7e	50		 push	 eax
  00c7f	8b 4d 10	 mov	 ecx, DWORD PTR _nMinPos$[ebp]
  00c82	51		 push	 ecx
  00c83	8b 55 0c	 mov	 edx, DWORD PTR _nBar$[ebp]
  00c86	52		 push	 edx
  00c87	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00c8a	50		 push	 eax
  00c8b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20
  00c91	3b f4		 cmp	 esi, esp
  00c93	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c98	eb 40		 jmp	 SHORT $L76972
$L76974:

; 500  : 
; 501  : 	if(CoolSB_IsThumbTracking(hwnd))

  00c9a	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00c9d	51		 push	 ecx
  00c9e	e8 00 00 00 00	 call	 _CoolSB_IsThumbTracking@4
  00ca3	85 c0		 test	 eax, eax
  00ca5	74 08		 je	 SHORT $L76975

; 502  : 		return mysi->nPos;

  00ca7	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00caa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00cad	eb 2b		 jmp	 SHORT $L76972
$L76975:

; 503  : 
; 504  : 	//hide the scrollbar if nMin == nMax
; 505  : 	//nMax-nMin must not be greater than MAXLONG
; 506  : 	mysi->nMin = nMinPos;

  00caf	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00cb2	8b 4d 10	 mov	 ecx, DWORD PTR _nMinPos$[ebp]
  00cb5	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 507  : 	mysi->nMax = nMaxPos;

  00cb8	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00cbb	8b 45 14	 mov	 eax, DWORD PTR _nMaxPos$[ebp]
  00cbe	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 508  : 	
; 509  : 	if(fRedraw)

  00cc1	83 7d 18 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  00cc5	74 0e		 je	 SHORT $L76976

; 510  : 		RedrawNonClient(hwnd, FALSE);

  00cc7	6a 00		 push	 0
  00cc9	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00ccc	51		 push	 ecx
  00ccd	e8 00 00 00 00	 call	 _RedrawNonClient
  00cd2	83 c4 08	 add	 esp, 8
$L76976:

; 511  : 
; 512  : 	return TRUE;

  00cd5	b8 01 00 00 00	 mov	 eax, 1
$L76972:

; 513  : }

  00cda	5e		 pop	 esi
  00cdb	83 c4 04	 add	 esp, 4
  00cde	3b ec		 cmp	 ebp, esp
  00ce0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ce5	8b e5		 mov	 esp, ebp
  00ce7	5d		 pop	 ebp
  00ce8	c2 14 00	 ret	 20			; 00000014H
_CoolSB_SetScrollRange@20 ENDP
_TEXT	ENDS
EXTRN	__imp__ShowScrollBar@12:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_dwStyle$ = -12						; size = 4
_bFailed$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_fShow$ = 16						; size = 4
_CoolSB_ShowScrollBar@12 PROC NEAR

; 519  : {

  00cf0	55		 push	 ebp
  00cf1	8b ec		 mov	 ebp, esp
  00cf3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00cf6	56		 push	 esi
  00cf7	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  00cfe	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00d05	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 520  : 	SCROLLBAR *sbar;
; 521  : 	BOOL bFailed = FALSE;

  00d0c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 0

; 522  : 	DWORD dwStyle = GetWindowLong(hwnd, GWL_STYLE);

  00d13	8b f4		 mov	 esi, esp
  00d15	6a f0		 push	 -16			; fffffff0H
  00d17	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00d1a	50		 push	 eax
  00d1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00d21	3b f4		 cmp	 esi, esp
  00d23	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d28	89 45 f4	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 523  : 
; 524  : 	if(!CoolSB_IsCoolScrollEnabled(hwnd))

  00d2b	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00d2e	51		 push	 ecx
  00d2f	e8 00 00 00 00	 call	 _CoolSB_IsCoolScrollEnabled@4
  00d34	85 c0		 test	 eax, eax
  00d36	75 20		 jne	 SHORT $L76987

; 525  : 		return ShowScrollBar(hwnd, wBar, fShow);

  00d38	8b f4		 mov	 esi, esp
  00d3a	8b 55 10	 mov	 edx, DWORD PTR _fShow$[ebp]
  00d3d	52		 push	 edx
  00d3e	8b 45 0c	 mov	 eax, DWORD PTR _wBar$[ebp]
  00d41	50		 push	 eax
  00d42	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00d45	51		 push	 ecx
  00d46	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowScrollBar@12
  00d4c	3b f4		 cmp	 esi, esp
  00d4e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d53	e9 4f 01 00 00	 jmp	 $L76983
$L76987:

; 526  : 
; 527  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 528  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  00d58	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  00d5c	74 0a		 je	 SHORT $L76989
  00d5e	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  00d62	0f 85 80 00 00
	00		 jne	 $L76988
$L76989:
  00d68	6a 00		 push	 0
  00d6a	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00d6d	52		 push	 edx
  00d6e	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00d73	83 c4 08	 add	 esp, 8
  00d76	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  00d79	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00d7d	74 69		 je	 SHORT $L76988

; 529  : 	{
; 530  : 		sbar->fScrollFlags  =  sbar->fScrollFlags & ~CSBS_VISIBLE;

  00d7f	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  00d82	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d84	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00d87	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00d8a	89 0a		 mov	 DWORD PTR [edx], ecx

; 531  : 		sbar->fScrollFlags |= (fShow == TRUE ? CSBS_VISIBLE : 0);

  00d8c	33 c0		 xor	 eax, eax
  00d8e	83 7d 10 01	 cmp	 DWORD PTR _fShow$[ebp], 1
  00d92	0f 95 c0	 setne	 al
  00d95	48		 dec	 eax
  00d96	83 e0 08	 and	 eax, 8
  00d99	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00d9c	0b 01		 or	 eax, DWORD PTR [ecx]
  00d9e	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00da1	89 02		 mov	 DWORD PTR [edx], eax

; 532  : 		//bFailed = TRUE;
; 533  : 
; 534  : 		if(fShow)	SetWindowLong(hwnd, GWL_STYLE, dwStyle | WS_HSCROLL);

  00da3	83 7d 10 00	 cmp	 DWORD PTR _fShow$[ebp], 0
  00da7	74 20		 je	 SHORT $L76990
  00da9	8b 45 f4	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00dac	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  00db1	8b f4		 mov	 esi, esp
  00db3	50		 push	 eax
  00db4	6a f0		 push	 -16			; fffffff0H
  00db6	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00db9	51		 push	 ecx
  00dba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00dc0	3b f4		 cmp	 esi, esp
  00dc2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 535  : 		else		SetWindowLong(hwnd, GWL_STYLE, dwStyle & ~WS_HSCROLL);

  00dc7	eb 1f		 jmp	 SHORT $L76988
$L76990:
  00dc9	8b 55 f4	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00dcc	81 e2 ff ff ef
	ff		 and	 edx, -1048577		; ffefffffH
  00dd2	8b f4		 mov	 esi, esp
  00dd4	52		 push	 edx
  00dd5	6a f0		 push	 -16			; fffffff0H
  00dd7	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00dda	50		 push	 eax
  00ddb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00de1	3b f4		 cmp	 esi, esp
  00de3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L76988:

; 536  : 	}
; 537  : 
; 538  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 539  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  00de8	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  00dec	74 0a		 je	 SHORT $L76993
  00dee	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  00df2	0f 85 81 00 00
	00		 jne	 $L76992
$L76993:
  00df8	6a 01		 push	 1
  00dfa	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00dfd	51		 push	 ecx
  00dfe	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00e03	83 c4 08	 add	 esp, 8
  00e06	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  00e09	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00e0d	74 6a		 je	 SHORT $L76992

; 540  : 	{
; 541  : 		sbar->fScrollFlags  =  sbar->fScrollFlags & ~CSBS_VISIBLE;

  00e0f	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00e12	8b 02		 mov	 eax, DWORD PTR [edx]
  00e14	83 e0 f7	 and	 eax, -9			; fffffff7H
  00e17	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00e1a	89 01		 mov	 DWORD PTR [ecx], eax

; 542  : 		sbar->fScrollFlags |= (fShow == TRUE ? CSBS_VISIBLE : 0);

  00e1c	33 d2		 xor	 edx, edx
  00e1e	83 7d 10 01	 cmp	 DWORD PTR _fShow$[ebp], 1
  00e22	0f 95 c2	 setne	 dl
  00e25	4a		 dec	 edx
  00e26	83 e2 08	 and	 edx, 8
  00e29	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  00e2c	0b 10		 or	 edx, DWORD PTR [eax]
  00e2e	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00e31	89 11		 mov	 DWORD PTR [ecx], edx

; 543  : 		//bFailed = TRUE;
; 544  : 
; 545  : 		if(fShow)	SetWindowLong(hwnd, GWL_STYLE, dwStyle | WS_VSCROLL);

  00e33	83 7d 10 00	 cmp	 DWORD PTR _fShow$[ebp], 0
  00e37	74 21		 je	 SHORT $L76994
  00e39	8b 55 f4	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00e3c	81 ca 00 00 20
	00		 or	 edx, 2097152		; 00200000H
  00e42	8b f4		 mov	 esi, esp
  00e44	52		 push	 edx
  00e45	6a f0		 push	 -16			; fffffff0H
  00e47	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00e4a	50		 push	 eax
  00e4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00e51	3b f4		 cmp	 esi, esp
  00e53	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 546  : 		else		SetWindowLong(hwnd, GWL_STYLE, dwStyle & ~WS_VSCROLL);

  00e58	eb 1f		 jmp	 SHORT $L76992
$L76994:
  00e5a	8b 4d f4	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  00e5d	81 e1 ff ff df
	ff		 and	 ecx, -2097153		; ffdfffffH
  00e63	8b f4		 mov	 esi, esp
  00e65	51		 push	 ecx
  00e66	6a f0		 push	 -16			; fffffff0H
  00e68	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00e6b	52		 push	 edx
  00e6c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00e72	3b f4		 cmp	 esi, esp
  00e74	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L76992:

; 547  : 	}
; 548  : 
; 549  : 	if(bFailed)

  00e79	83 7d f8 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00e7d	74 04		 je	 SHORT $L76996

; 550  : 	{
; 551  : 		return FALSE;

  00e7f	33 c0		 xor	 eax, eax
  00e81	eb 24		 jmp	 SHORT $L76983
$L76996:

; 552  : 	}
; 553  : 	else
; 554  : 	{
; 555  : 		//DWORD style = GetWindowLong(hwnd, GWL_STYLE);
; 556  : 		//style |= WS_VSCROLL;
; 557  : 		
; 558  : 		//if(s
; 559  : 		//SetWindowLong(hwnd, GWL_STYLE, style);
; 560  : 
; 561  : 		SetWindowPos(hwnd, 0, 0, 0, 0, 0, 
; 562  : 			SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | 
; 563  : 			SWP_NOACTIVATE | SWP_FRAMECHANGED);

  00e83	8b f4		 mov	 esi, esp
  00e85	6a 37		 push	 55			; 00000037H
  00e87	6a 00		 push	 0
  00e89	6a 00		 push	 0
  00e8b	6a 00		 push	 0
  00e8d	6a 00		 push	 0
  00e8f	6a 00		 push	 0
  00e91	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00e94	50		 push	 eax
  00e95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
  00e9b	3b f4		 cmp	 esi, esp
  00e9d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 564  : 		
; 565  : 		return TRUE;

  00ea2	b8 01 00 00 00	 mov	 eax, 1
$L76983:

; 566  : 	}
; 567  : }

  00ea7	5e		 pop	 esi
  00ea8	83 c4 0c	 add	 esp, 12			; 0000000cH
  00eab	3b ec		 cmp	 ebp, esp
  00ead	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eb2	8b e5		 mov	 esp, ebp
  00eb4	5d		 pop	 ebp
  00eb5	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_ShowScrollBar@12 ENDP
_TEXT	ENDS
PUBLIC	_UninitializeCoolSB@4
EXTRN	__imp__RemovePropA@8:NEAR
EXTRN	__imp__HeapFree@12:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sw$ = -8						; size = 4
_i$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_UninitializeCoolSB@4 PROC NEAR

; 573  : {

  00ec0	55		 push	 ebp
  00ec1	8b ec		 mov	 ebp, esp
  00ec3	83 ec 08	 sub	 esp, 8
  00ec6	56		 push	 esi
  00ec7	57		 push	 edi
  00ec8	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00ecf	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 574  : 	int i = 0;

  00ed6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 575  : 	SCROLLWND *sw = GetScrollWndFromHwnd(hwnd);

  00edd	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00ee0	50		 push	 eax
  00ee1	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  00ee6	83 c4 04	 add	 esp, 4
  00ee9	89 45 f8	 mov	 DWORD PTR _sw$[ebp], eax

; 576  : 	if(!sw) return E_FAIL;

  00eec	83 7d f8 00	 cmp	 DWORD PTR _sw$[ebp], 0
  00ef0	75 07		 jne	 SHORT $L77003
  00ef2	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00ef7	eb 69		 jmp	 SHORT $L77000
$L77003:

; 577  : 
; 578  : 	//restore the window procedure with the original one
; 579  : #pragma warning( disable: 4311)	
; 580  : 	SetWindowLong(hwnd, GWL_WNDPROC, (LONG)sw->oldproc);

  00ef9	8b f4		 mov	 esi, esp
  00efb	8b 4d f8	 mov	 ecx, DWORD PTR _sw$[ebp]
  00efe	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00f01	52		 push	 edx
  00f02	6a fc		 push	 -4			; fffffffcH
  00f04	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00f07	50		 push	 eax
  00f08	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00f0e	3b f4		 cmp	 esi, esp
  00f10	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 581  : #pragma warning( default: 4311)	
; 582  : 	RemoveProp(hwnd, szPropStr);

  00f15	8b f4		 mov	 esi, esp
  00f17	68 00 00 00 00	 push	 OFFSET FLAT:_szPropStr
  00f1c	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00f1f	51		 push	 ecx
  00f20	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RemovePropA@8
  00f26	3b f4		 cmp	 esi, esp
  00f28	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 583  : 	//SetWindowLong(hwnd, GWL_USERDATA, 0);
; 584  : 
; 585  : 	//finally, release the memory needed for the cool scrollbars
; 586  : 	HeapFree(GetProcessHeap(), 0, sw);

  00f2d	8b f4		 mov	 esi, esp
  00f2f	8b 55 f8	 mov	 edx, DWORD PTR _sw$[ebp]
  00f32	52		 push	 edx
  00f33	6a 00		 push	 0
  00f35	8b fc		 mov	 edi, esp
  00f37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00f3d	3b fc		 cmp	 edi, esp
  00f3f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f44	50		 push	 eax
  00f45	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
  00f4b	3b f4		 cmp	 esi, esp
  00f4d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 587  : 
; 588  :     //Force WM_NCCALCSIZE and WM_NCPAINT so the original scrollbars can kick in
; 589  :     RedrawNonClient(hwnd, TRUE);

  00f52	6a 01		 push	 1
  00f54	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00f57	50		 push	 eax
  00f58	e8 00 00 00 00	 call	 _RedrawNonClient
  00f5d	83 c4 08	 add	 esp, 8

; 590  : 
; 591  : 	return S_OK;

  00f60	33 c0		 xor	 eax, eax
$L77000:

; 592  : }

  00f62	5f		 pop	 edi
  00f63	5e		 pop	 esi
  00f64	83 c4 08	 add	 esp, 8
  00f67	3b ec		 cmp	 ebp, esp
  00f69	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f6e	8b e5		 mov	 esp, ebp
  00f70	5d		 pop	 ebp
  00f71	c2 04 00	 ret	 4
_UninitializeCoolSB@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_InsertButton@16
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_sbut$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_nPos$ = 16						; size = 4
_psb$ = 20						; size = 4
_CoolSB_InsertButton@16 PROC NEAR

; 610  : {

  00f80	55		 push	 ebp
  00f81	8b ec		 mov	 ebp, esp
  00f83	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00f86	56		 push	 esi
  00f87	57		 push	 edi
  00f88	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  00f8f	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00f96	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 611  : 	SCROLLBAR *sbar;
; 612  : 	SCROLLBUT *sbut;
; 613  : 	UINT i;
; 614  : 
; 615  : 	if(!psb) return FALSE;

  00f9d	83 7d 14 00	 cmp	 DWORD PTR _psb$[ebp], 0
  00fa1	75 07		 jne	 SHORT $L77019
  00fa3	33 c0		 xor	 eax, eax
  00fa5	e9 5c 02 00 00	 jmp	 $L77015
$L77019:

; 616  : 
; 617  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  00faa	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  00fad	50		 push	 eax
  00fae	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00fb1	51		 push	 ecx
  00fb2	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00fb7	83 c4 08	 add	 esp, 8
  00fba	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  00fbd	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00fc1	75 07		 jne	 SHORT $L77020

; 618  : 		return FALSE;

  00fc3	33 c0		 xor	 eax, eax
  00fc5	e9 3c 02 00 00	 jmp	 $L77015
$L77020:

; 619  : 	
; 620  : 	//check that we havn't reached the maximum allowed buttons yet
; 621  : 	if(sbar->nButtons == MAX_COOLSB_BUTS)

  00fca	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00fcd	83 ba 2c 03 00
	00 10		 cmp	 DWORD PTR [edx+812], 16	; 00000010H
  00fd4	75 07		 jne	 SHORT $L77021

; 622  : 		return FALSE;

  00fd6	33 c0		 xor	 eax, eax
  00fd8	e9 29 02 00 00	 jmp	 $L77015
$L77021:

; 623  : 
; 624  : 	//insert at end
; 625  : 	if(nPos == -1)

  00fdd	83 7d 10 ff	 cmp	 DWORD PTR _nPos$[ebp], -1
  00fe1	75 18		 jne	 SHORT $L77022

; 626  : 	{
; 627  : 		sbut = &sbar->sbButtons[sbar->nButtons];

  00fe3	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  00fe6	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  00fec	6b c9 30	 imul	 ecx, 48			; 00000030H
  00fef	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00ff2	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  00ff6	89 45 f8	 mov	 DWORD PTR _sbut$[ebp], eax

; 628  : 	}
; 629  : 	//otherwise, need to make room
; 630  : 	else if((int)nPos < 0 || (int)nPos > (UINT)sbar->nButtons)

  00ff9	eb 70		 jmp	 SHORT $L77023
$L77022:
  00ffb	83 7d 10 00	 cmp	 DWORD PTR _nPos$[ebp], 0
  00fff	7c 0e		 jl	 SHORT $L77028
  01001	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  01004	8b 55 10	 mov	 edx, DWORD PTR _nPos$[ebp]
  01007	3b 91 2c 03 00
	00		 cmp	 edx, DWORD PTR [ecx+812]
  0100d	76 07		 jbe	 SHORT $L77027
$L77028:

; 631  : 	{
; 632  : 		return FALSE;

  0100f	33 c0		 xor	 eax, eax
  01011	e9 f0 01 00 00	 jmp	 $L77015
$L77027:

; 633  : 	}
; 634  : 	else
; 635  : 	{
; 636  : 		//insert space for the button at the specified position
; 637  : 		for(i = sbar->nButtons; i > nPos; i--)

  01016	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  01019	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  0101f	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
  01022	eb 09		 jmp	 SHORT $L77030
$L77031:
  01024	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01027	83 ea 01	 sub	 edx, 1
  0102a	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L77030:
  0102d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01030	3b 45 10	 cmp	 eax, DWORD PTR _nPos$[ebp]
  01033	76 26		 jbe	 SHORT $L77032

; 638  : 		{
; 639  : 			sbar->sbButtons[i] = sbar->sbButtons[i-1];

  01035	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01038	83 e9 01	 sub	 ecx, 1
  0103b	6b c9 30	 imul	 ecx, 48			; 00000030H
  0103e	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01041	8d 74 0a 2c	 lea	 esi, DWORD PTR [edx+ecx+44]
  01045	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01048	6b c0 30	 imul	 eax, 48			; 00000030H
  0104b	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0104e	8d 7c 01 2c	 lea	 edi, DWORD PTR [ecx+eax+44]
  01052	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01057	f3 a5		 rep movsd

; 640  : 		}

  01059	eb c9		 jmp	 SHORT $L77031
$L77032:

; 641  : 
; 642  : 		sbut = &sbar->sbButtons[nPos];

  0105b	8b 55 10	 mov	 edx, DWORD PTR _nPos$[ebp]
  0105e	6b d2 30	 imul	 edx, 48			; 00000030H
  01061	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  01064	8d 4c 10 2c	 lea	 ecx, DWORD PTR [eax+edx+44]
  01068	89 4d f8	 mov	 DWORD PTR _sbut$[ebp], ecx
$L77023:

; 643  : 	}
; 644  : 
; 645  : 	//only set the button's properties if they are
; 646  : 	//specified by the SCROLLBUT->fMask. 
; 647  : 	//Otherwise, use a default property value
; 648  : 
; 649  : 	if(psb->fMask & SBBF_TYPE)

  0106b	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0106e	8b 02		 mov	 eax, DWORD PTR [edx]
  01070	83 e0 01	 and	 eax, 1
  01073	74 0e		 je	 SHORT $L77033

; 650  : 		sbut->uButType   = psb->uButType;

  01075	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01078	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0107b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0107e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 651  : 	else

  01081	eb 0a		 jmp	 SHORT $L77034
$L77033:

; 652  : 		sbut->uButType	 = SBBT_PUSHBUTTON;

  01083	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01086	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1
$L77034:

; 653  : 
; 654  : 	if(psb->fMask & SBBF_STATE)

  0108d	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  01090	8b 02		 mov	 eax, DWORD PTR [edx]
  01092	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01097	74 0e		 je	 SHORT $L77035

; 655  : 		sbut->uState	 = psb->uState;

  01099	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  0109c	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0109f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  010a2	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 656  : 	else

  010a5	eb 0a		 jmp	 SHORT $L77036
$L77035:

; 657  : 		sbut->uState	 = 0;

  010a7	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  010aa	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L77036:

; 658  : 
; 659  : 	if(psb->fMask & SBBF_ID)

  010b1	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  010b4	8b 02		 mov	 eax, DWORD PTR [edx]
  010b6	83 e0 02	 and	 eax, 2
  010b9	74 0e		 je	 SHORT $L77037

; 660  : 		sbut->uCmdId     = psb->uCmdId;

  010bb	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  010be	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  010c1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  010c4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 661  : 	else

  010c7	eb 0a		 jmp	 SHORT $L77038
$L77037:

; 662  : 		sbut->uCmdId	 = 0;

  010c9	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  010cc	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L77038:

; 663  : 
; 664  : 	if(psb->fMask & SBBF_SIZE)

  010d3	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  010d6	8b 02		 mov	 eax, DWORD PTR [edx]
  010d8	83 e0 08	 and	 eax, 8
  010db	74 0e		 je	 SHORT $L77039

; 665  : 		sbut->nSize		 = psb->nSize;

  010dd	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  010e0	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  010e3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  010e6	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 666  : 	else

  010e9	eb 0a		 jmp	 SHORT $L77040
$L77039:

; 667  : 		sbut->nSize		 = -1;

  010eb	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  010ee	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
$L77040:

; 668  : 
; 669  : 	if(psb->fMask & SBBF_PLACEMENT)

  010f5	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  010f8	8b 02		 mov	 eax, DWORD PTR [edx]
  010fa	83 e0 04	 and	 eax, 4
  010fd	74 0e		 je	 SHORT $L77041

; 670  : 		sbut->uPlacement = psb->uPlacement;

  010ff	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01102	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  01105	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01108	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 671  : 	else

  0110b	eb 0a		 jmp	 SHORT $L77042
$L77041:

; 672  : 		sbut->uPlacement = SBBP_LEFT;

  0110d	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01110	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1
$L77042:

; 673  : 
; 674  : 	if(psb->fMask & SBBF_BITMAP)

  01117	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0111a	8b 02		 mov	 eax, DWORD PTR [edx]
  0111c	83 e0 10	 and	 eax, 16			; 00000010H
  0111f	74 0e		 je	 SHORT $L77043

; 675  : 		sbut->hBmp		 = psb->hBmp;

  01121	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01124	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  01127	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0112a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 676  : 	else

  0112d	eb 0a		 jmp	 SHORT $L77044
$L77043:

; 677  : 		sbut->hBmp		 = 0;

  0112f	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01132	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
$L77044:

; 678  : 
; 679  : 	if(psb->fMask & SBBF_ENHMETAFILE)

  01139	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0113c	8b 02		 mov	 eax, DWORD PTR [edx]
  0113e	83 e0 20	 and	 eax, 32			; 00000020H
  01141	74 0e		 je	 SHORT $L77045

; 680  : 		sbut->hEmf		 = psb->hEmf;

  01143	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01146	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  01149	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0114c	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 681  : 	else

  0114f	eb 0a		 jmp	 SHORT $L77046
$L77045:

; 682  : 		sbut->hEmf		 = 0;

  01151	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01154	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$L77046:

; 683  : 
; 684  : 	if(psb->fMask & SBBF_CURSOR)

  0115b	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0115e	8b 02		 mov	 eax, DWORD PTR [edx]
  01160	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01165	74 0e		 je	 SHORT $L77047

; 685  : 		sbut->hCurs = psb->hCurs;

  01167	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  0116a	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  0116d	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  01170	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 686  : 	else

  01173	eb 0a		 jmp	 SHORT $L77048
$L77047:

; 687  : 		sbut->hCurs = 0;

  01175	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01178	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
$L77048:

; 688  : 
; 689  : 	/*
; 690  : 		We don't use the callback function anymore. The uButType
; 691  : 		member must now specify SBBT_OWNERDRAW, and a WM_NOTIFY will
; 692  : 		be sent when a button must be drawn
; 693  : 	if((psb->fMask & SBBF_OWNERDRAW) && ((psb->uButType & SBBT_MASK) == SBBT_OWNERDRAW))
; 694  : 		pDrawProc	 = psb->pDrawProc;
; 695  : 	else
; 696  : 		pDrawProc	 = 0;*/
; 697  : 
; 698  : 	sbar->nButtons++;

  0117f	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01182	8b 82 2c 03 00
	00		 mov	 eax, DWORD PTR [edx+812]
  01188	83 c0 01	 add	 eax, 1
  0118b	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0118e	89 81 2c 03 00
	00		 mov	 DWORD PTR [ecx+812], eax

; 699  : 	sbut->nSizeReserved = sbut->nSize;

  01194	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  01197	8b 45 f8	 mov	 eax, DWORD PTR _sbut$[ebp]
  0119a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0119d	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 700  : 
; 701  : 	//MAKE SURE that any resizable buttons are only to the left / above
; 702  : 	//a scrollbar. We don't support resize operations to the right of a scrollbar
; 703  : 	if((sbut->uButType & SBBM_RESIZABLE) &&	sbut->uPlacement == SBBP_RIGHT)

  011a0	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  011a3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  011a6	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  011ab	74 1a		 je	 SHORT $L77049
  011ad	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  011b0	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  011b4	75 11		 jne	 SHORT $L77049

; 704  : 		sbut->uButType &= ~SBBM_RESIZABLE;

  011b6	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  011b9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  011bc	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  011c1	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  011c4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L77049:

; 705  : 
; 706  : 	if(psb->fMask & SBBF_BUTMINMAX)

  011c7	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  011ca	8b 02		 mov	 eax, DWORD PTR [edx]
  011cc	25 00 01 00 00	 and	 eax, 256		; 00000100H
  011d1	74 1a		 je	 SHORT $L77050

; 707  : 	{
; 708  : 		sbut->nMinSize = psb->nMinSize;

  011d3	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  011d6	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  011d9	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  011dc	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 709  : 		sbut->nMaxSize = psb->nMaxSize;

  011df	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  011e2	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  011e5	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  011e8	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 710  : 	}
; 711  : 	else

  011eb	eb 14		 jmp	 SHORT $L77051
$L77050:

; 712  : 	{
; 713  : 		sbut->nMinSize = 0;

  011ed	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  011f0	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 714  : 		sbut->nMaxSize = -1;

  011f7	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  011fa	c7 42 2c ff ff
	ff ff		 mov	 DWORD PTR [edx+44], -1
$L77051:

; 715  : 	}
; 716  : 
; 717  : 	return TRUE;

  01201	b8 01 00 00 00	 mov	 eax, 1
$L77015:

; 718  : }

  01206	5f		 pop	 edi
  01207	5e		 pop	 esi
  01208	83 c4 0c	 add	 esp, 12			; 0000000cH
  0120b	3b ec		 cmp	 ebp, esp
  0120d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01212	8b e5		 mov	 esp, ebp
  01214	5d		 pop	 ebp
  01215	c2 10 00	 ret	 16			; 00000010H
_CoolSB_InsertButton@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_ModifyButton@20
EXTRN	__RTC_UninitUse:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T77337 = -9						; size = 1
_sbut$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_uItem$ = 16						; size = 4
_fByCmd$ = 20						; size = 4
_psb$ = 24						; size = 4
_CoolSB_ModifyButton@20 PROC NEAR

; 740  : {

  01220	55		 push	 ebp
  01221	8b ec		 mov	 ebp, esp
  01223	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01226	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0122d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  01234	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0123b	c6 45 f7 00	 mov	 BYTE PTR $T77337[ebp], 0

; 741  : 	SCROLLBAR *sbar;
; 742  : 	SCROLLBUT *sbut;
; 743  : 
; 744  : 	if(!psb) return FALSE;

  0123f	83 7d 18 00	 cmp	 DWORD PTR _psb$[ebp], 0
  01243	75 07		 jne	 SHORT $L77076
  01245	33 c0		 xor	 eax, eax
  01247	e9 30 02 00 00	 jmp	 $L77073
$L77076:

; 745  : 
; 746  : 	//find if this window is CoolScroll enabled
; 747  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  0124c	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  0124f	50		 push	 eax
  01250	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  01253	51		 push	 ecx
  01254	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01259	83 c4 08	 add	 esp, 8
  0125c	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0125f	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01263	75 07		 jne	 SHORT $L77077

; 748  : 		return FALSE;

  01265	33 c0		 xor	 eax, eax
  01267	e9 10 02 00 00	 jmp	 $L77073
$L77077:

; 749  : 
; 750  : 	//find the button to modify, depending on if we
; 751  : 	//are modifying by position or command id
; 752  : 	if(fByCmd == FALSE)

  0126c	83 7d 14 00	 cmp	 DWORD PTR _fByCmd$[ebp], 0
  01270	75 31		 jne	 SHORT $L77078

; 753  : 	{
; 754  : 		//button from position
; 755  : 		if((int)uItem < 0 || (int)uItem >= (UINT)sbar->nButtons)

  01272	83 7d 10 00	 cmp	 DWORD PTR _uItem$[ebp], 0
  01276	7c 0e		 jl	 SHORT $L77083
  01278	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0127b	8b 45 10	 mov	 eax, DWORD PTR _uItem$[ebp]
  0127e	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  01284	72 07		 jb	 SHORT $L77082
$L77083:

; 756  : 			return FALSE;

  01286	33 c0		 xor	 eax, eax
  01288	e9 ef 01 00 00	 jmp	 $L77073
$L77082:

; 757  : 		else
; 758  : 			sbut = &sbar->sbButtons[uItem];

  0128d	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  01290	6b c9 30	 imul	 ecx, 48			; 00000030H
  01293	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01296	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  0129a	c6 45 f7 01	 mov	 BYTE PTR $T77337[ebp], 1
  0129e	89 45 f8	 mov	 DWORD PTR _sbut$[ebp], eax

; 759  : 	}
; 760  : 	else if(fByCmd == TRUE)

  012a1	eb 3d		 jmp	 SHORT $L77085
$L77078:
  012a3	83 7d 14 01	 cmp	 DWORD PTR _fByCmd$[ebp], 1
  012a7	75 37		 jne	 SHORT $L77085

; 761  : 	{
; 762  : 		//button from command identifier
; 763  : 		if(!(sbut = GetButtonFromId(sbar, uItem)))

  012a9	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  012ac	51		 push	 ecx
  012ad	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  012b0	52		 push	 edx
  012b1	e8 00 00 00 00	 call	 _GetButtonFromId
  012b6	83 c4 08	 add	 esp, 8
  012b9	c6 45 f7 01	 mov	 BYTE PTR $T77337[ebp], 1
  012bd	89 45 f8	 mov	 DWORD PTR _sbut$[ebp], eax
  012c0	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  012c4	75 0d		 jne	 SHORT $L77338
  012c6	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  012cb	e8 00 00 00 00	 call	 __RTC_UninitUse
  012d0	83 c4 04	 add	 esp, 4
$L77338:
  012d3	83 7d f8 00	 cmp	 DWORD PTR _sbut$[ebp], 0
  012d7	75 07		 jne	 SHORT $L77085

; 764  : 			return FALSE;

  012d9	33 c0		 xor	 eax, eax
  012db	e9 9c 01 00 00	 jmp	 $L77073
$L77085:

; 765  : 	}
; 766  : 
; 767  : 	if(psb->fMask & SBBF_TYPE)			sbut->uButType   = psb->uButType;

  012e0	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  012e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e5	83 e1 01	 and	 ecx, 1
  012e8	74 1f		 je	 SHORT $L77088
  012ea	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  012ee	75 0d		 jne	 SHORT $L77341
  012f0	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  012f5	e8 00 00 00 00	 call	 __RTC_UninitUse
  012fa	83 c4 04	 add	 esp, 4
$L77341:
  012fd	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  01300	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  01303	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01306	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L77088:

; 768  : 	if(psb->fMask & SBBF_STATE)			sbut->uState	 = psb->uState;

  01309	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  0130c	8b 02		 mov	 eax, DWORD PTR [edx]
  0130e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01313	74 1f		 je	 SHORT $L77089
  01315	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  01319	75 0d		 jne	 SHORT $L77342
  0131b	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  01320	e8 00 00 00 00	 call	 __RTC_UninitUse
  01325	83 c4 04	 add	 esp, 4
$L77342:
  01328	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  0132b	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  0132e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01331	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L77089:

; 769  : 	if(psb->fMask & SBBF_ID)			sbut->uCmdId     = psb->uCmdId;

  01334	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  01337	8b 11		 mov	 edx, DWORD PTR [ecx]
  01339	83 e2 02	 and	 edx, 2
  0133c	74 1f		 je	 SHORT $L77090
  0133e	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  01342	75 0d		 jne	 SHORT $L77343
  01344	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  01349	e8 00 00 00 00	 call	 __RTC_UninitUse
  0134e	83 c4 04	 add	 esp, 4
$L77343:
  01351	8b 45 f8	 mov	 eax, DWORD PTR _sbut$[ebp]
  01354	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  01357	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0135a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L77090:

; 770  : 	if(psb->fMask & SBBF_SIZE)			sbut->nSize		 = psb->nSize;

  0135d	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  01360	8b 08		 mov	 ecx, DWORD PTR [eax]
  01362	83 e1 08	 and	 ecx, 8
  01365	74 1f		 je	 SHORT $L77091
  01367	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  0136b	75 0d		 jne	 SHORT $L77344
  0136d	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  01372	e8 00 00 00 00	 call	 __RTC_UninitUse
  01377	83 c4 04	 add	 esp, 4
$L77344:
  0137a	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  0137d	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  01380	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01383	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$L77091:

; 771  : 	if(psb->fMask & SBBF_PLACEMENT)		sbut->uPlacement = psb->uPlacement;

  01386	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  01389	8b 02		 mov	 eax, DWORD PTR [edx]
  0138b	83 e0 04	 and	 eax, 4
  0138e	74 1f		 je	 SHORT $L77092
  01390	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  01394	75 0d		 jne	 SHORT $L77345
  01396	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  0139b	e8 00 00 00 00	 call	 __RTC_UninitUse
  013a0	83 c4 04	 add	 esp, 4
$L77345:
  013a3	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  013a6	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  013a9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  013ac	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$L77092:

; 772  : 	if(psb->fMask & SBBF_BITMAP)		sbut->hBmp		 = psb->hBmp;

  013af	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  013b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  013b4	83 e2 10	 and	 edx, 16			; 00000010H
  013b7	74 1f		 je	 SHORT $L77093
  013b9	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  013bd	75 0d		 jne	 SHORT $L77346
  013bf	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  013c4	e8 00 00 00 00	 call	 __RTC_UninitUse
  013c9	83 c4 04	 add	 esp, 4
$L77346:
  013cc	8b 45 f8	 mov	 eax, DWORD PTR _sbut$[ebp]
  013cf	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  013d2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  013d5	89 50 18	 mov	 DWORD PTR [eax+24], edx
$L77093:

; 773  : 	if(psb->fMask & SBBF_ENHMETAFILE)	sbut->hEmf		 = psb->hEmf;

  013d8	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  013db	8b 08		 mov	 ecx, DWORD PTR [eax]
  013dd	83 e1 20	 and	 ecx, 32			; 00000020H
  013e0	74 1f		 je	 SHORT $L77094
  013e2	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  013e6	75 0d		 jne	 SHORT $L77347
  013e8	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  013ed	e8 00 00 00 00	 call	 __RTC_UninitUse
  013f2	83 c4 04	 add	 esp, 4
$L77347:
  013f5	8b 55 f8	 mov	 edx, DWORD PTR _sbut$[ebp]
  013f8	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  013fb	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  013fe	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$L77094:

; 774  : 	if(psb->fMask & SBBF_CURSOR)		sbut->hCurs		 = psb->hCurs;

  01401	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  01404	8b 02		 mov	 eax, DWORD PTR [edx]
  01406	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0140b	74 1f		 je	 SHORT $L77095
  0140d	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  01411	75 0d		 jne	 SHORT $L77348
  01413	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  01418	e8 00 00 00 00	 call	 __RTC_UninitUse
  0141d	83 c4 04	 add	 esp, 4
$L77348:
  01420	8b 4d f8	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01423	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  01426	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  01429	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$L77095:

; 775  : 	
; 776  : 	if(psb->fMask & SBBF_BUTMINMAX)

  0142c	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  0142f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01431	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  01437	74 3e		 je	 SHORT $L77096

; 777  : 	{
; 778  : 		sbut->nMinSize = psb->nMinSize;

  01439	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  0143d	75 0d		 jne	 SHORT $L77349
  0143f	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  01444	e8 00 00 00 00	 call	 __RTC_UninitUse
  01449	83 c4 04	 add	 esp, 4
$L77349:
  0144c	8b 45 f8	 mov	 eax, DWORD PTR _sbut$[ebp]
  0144f	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  01452	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  01455	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 779  : 		sbut->nMaxSize = psb->nMaxSize;

  01458	80 7d f7 00	 cmp	 BYTE PTR $T77337[ebp], 0
  0145c	75 0d		 jne	 SHORT $L77350
  0145e	68 00 00 00 00	 push	 OFFSET FLAT:$L77339
  01463	e8 00 00 00 00	 call	 __RTC_UninitUse
  01468	83 c4 04	 add	 esp, 4
$L77350:
  0146b	8b 45 f8	 mov	 eax, DWORD PTR _sbut$[ebp]
  0146e	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  01471	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  01474	89 50 2c	 mov	 DWORD PTR [eax+44], edx
$L77096:

; 780  : 	}
; 781  : 
; 782  : 	return TRUE;

  01477	b8 01 00 00 00	 mov	 eax, 1
$L77073:

; 783  : }

  0147c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0147f	3b ec		 cmp	 ebp, esp
  01481	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01486	8b e5		 mov	 esp, ebp
  01488	5d		 pop	 ebp
  01489	c2 14 00	 ret	 20			; 00000014H
$L77351:
$L77339:
  0148c	73		 DB	 115			; 00000073H
  0148d	62		 DB	 98			; 00000062H
  0148e	75		 DB	 117			; 00000075H
  0148f	74		 DB	 116			; 00000074H
  01490	00		 DB	 0
_CoolSB_ModifyButton@20 ENDP
; Function compile flags: /Odt /RTCsu
_i$ = -4						; size = 4
_sbar$ = 8						; size = 4
_uCmdId$ = 12						; size = 4
_GetButtonFromId PROC NEAR

; 721  : {

  014a0	55		 push	 ebp
  014a1	8b ec		 mov	 ebp, esp
  014a3	51		 push	 ecx
  014a4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 722  : 	int i;
; 723  : 	for(i = 0; i < sbar->nButtons; i++)

  014ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  014b2	eb 09		 jmp	 SHORT $L77059
$L77060:
  014b4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  014b7	83 c0 01	 add	 eax, 1
  014ba	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L77059:
  014bd	8b 4d 08	 mov	 ecx, DWORD PTR _sbar$[ebp]
  014c0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  014c3	3b 91 2c 03 00
	00		 cmp	 edx, DWORD PTR [ecx+812]
  014c9	7d 23		 jge	 SHORT $L77061

; 724  : 	{
; 725  : 		if(sbar->sbButtons[i].uCmdId == uCmdId)

  014cb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  014ce	6b c0 30	 imul	 eax, 48			; 00000030H
  014d1	8b 4d 08	 mov	 ecx, DWORD PTR _sbar$[ebp]
  014d4	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  014d8	3b 55 0c	 cmp	 edx, DWORD PTR _uCmdId$[ebp]
  014db	75 0f		 jne	 SHORT $L77062

; 726  : 			return &sbar->sbButtons[i];

  014dd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  014e0	6b c0 30	 imul	 eax, 48			; 00000030H
  014e3	8b 4d 08	 mov	 ecx, DWORD PTR _sbar$[ebp]
  014e6	8d 44 01 2c	 lea	 eax, DWORD PTR [ecx+eax+44]
  014ea	eb 04		 jmp	 SHORT $L77057
$L77062:

; 727  : 	}

  014ec	eb c6		 jmp	 SHORT $L77060
$L77061:

; 728  : 
; 729  : 	return 0;

  014ee	33 c0		 xor	 eax, eax
$L77057:

; 730  : }

  014f0	8b e5		 mov	 esp, ebp
  014f2	5d		 pop	 ebp
  014f3	c3		 ret	 0
_GetButtonFromId ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_RemoveButton@16
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sbar$ = -8						; size = 4
_i$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_uItem$ = 16						; size = 4
_fByCmd$ = 20						; size = 4
_CoolSB_RemoveButton@16 PROC NEAR

; 786  : {

  01500	55		 push	 ebp
  01501	8b ec		 mov	 ebp, esp
  01503	83 ec 08	 sub	 esp, 8
  01506	56		 push	 esi
  01507	57		 push	 edi
  01508	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0150f	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 787  : 	int i;
; 788  : 	SCROLLBAR *sbar;
; 789  : 
; 790  : 	//find if this window is CoolScroll enabled
; 791  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  01516	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  01519	50		 push	 eax
  0151a	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0151d	51		 push	 ecx
  0151e	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01523	83 c4 08	 add	 esp, 8
  01526	89 45 f8	 mov	 DWORD PTR _sbar$[ebp], eax
  01529	83 7d f8 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  0152d	75 07		 jne	 SHORT $L77108

; 792  : 		return FALSE;

  0152f	33 c0		 xor	 eax, eax
  01531	e9 e5 00 00 00	 jmp	 $L77105
$L77108:

; 793  : 
; 794  : 	//find the button to modify, depending on if we
; 795  : 	//are modifying by position or command id
; 796  : 	if(fByCmd == FALSE && ((int)uItem < 0 || (int)uItem >= (UINT)sbar->nButtons))

  01536	83 7d 14 00	 cmp	 DWORD PTR _fByCmd$[ebp], 0
  0153a	75 1b		 jne	 SHORT $L77112
  0153c	83 7d 10 00	 cmp	 DWORD PTR _uItem$[ebp], 0
  01540	7c 0e		 jl	 SHORT $L77113
  01542	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  01545	8b 45 10	 mov	 eax, DWORD PTR _uItem$[ebp]
  01548	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  0154e	72 07		 jb	 SHORT $L77112
$L77113:

; 797  : 	{
; 798  : 		return FALSE;

  01550	33 c0		 xor	 eax, eax
  01552	e9 c4 00 00 00	 jmp	 $L77105
$L77112:

; 799  : 	}
; 800  : 	else if(fByCmd == TRUE)

  01557	83 7d 14 01	 cmp	 DWORD PTR _fByCmd$[ebp], 1
  0155b	75 4e		 jne	 SHORT $L77114

; 801  : 	{
; 802  : 		//find the button with the specified command id
; 803  : 		for(i = 0; i < sbar->nButtons; i++)

  0155d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01564	eb 09		 jmp	 SHORT $L77116
$L77117:
  01566	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01569	83 c1 01	 add	 ecx, 1
  0156c	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L77116:
  0156f	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  01572	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01575	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  0157b	7d 1c		 jge	 SHORT $L77118

; 804  : 		{
; 805  : 			if(sbar->sbButtons[i].uCmdId == uItem)

  0157d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01580	6b c9 30	 imul	 ecx, 48			; 00000030H
  01583	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  01586	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  0158a	3b 45 10	 cmp	 eax, DWORD PTR _uItem$[ebp]
  0158d	75 08		 jne	 SHORT $L77119

; 806  : 			{
; 807  : 				//change the id to an index
; 808  : 				uItem = i;

  0158f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01592	89 4d 10	 mov	 DWORD PTR _uItem$[ebp], ecx

; 809  : 				break;

  01595	eb 02		 jmp	 SHORT $L77118
$L77119:

; 810  : 			}
; 811  : 		}

  01597	eb cd		 jmp	 SHORT $L77117
$L77118:

; 812  : 
; 813  : 		//if we failed to find the button...
; 814  : 		if(i == sbar->nButtons) return FALSE;

  01599	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  0159c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0159f	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  015a5	75 04		 jne	 SHORT $L77114
  015a7	33 c0		 xor	 eax, eax
  015a9	eb 70		 jmp	 SHORT $L77105
$L77114:

; 815  : 	}
; 816  : 
; 817  : 	//remove the button!
; 818  : 	for(i = uItem; i < sbar->nButtons - 1; i++)

  015ab	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  015ae	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  015b1	eb 09		 jmp	 SHORT $L77121
$L77122:
  015b3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  015b6	83 c2 01	 add	 edx, 1
  015b9	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L77121:
  015bc	8b 45 f8	 mov	 eax, DWORD PTR _sbar$[ebp]
  015bf	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  015c5	83 e9 01	 sub	 ecx, 1
  015c8	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  015cb	7d 26		 jge	 SHORT $L77123

; 819  : 	{
; 820  : 		sbar->sbButtons[i] = sbar->sbButtons[i+1];

  015cd	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  015d0	83 c2 01	 add	 edx, 1
  015d3	6b d2 30	 imul	 edx, 48			; 00000030H
  015d6	8b 45 f8	 mov	 eax, DWORD PTR _sbar$[ebp]
  015d9	8d 74 10 2c	 lea	 esi, DWORD PTR [eax+edx+44]
  015dd	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  015e0	6b c9 30	 imul	 ecx, 48			; 00000030H
  015e3	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  015e6	8d 7c 0a 2c	 lea	 edi, DWORD PTR [edx+ecx+44]
  015ea	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  015ef	f3 a5		 rep movsd

; 821  : 	}

  015f1	eb c0		 jmp	 SHORT $L77122
$L77123:

; 822  : 
; 823  : 	sbar->nButtons--;

  015f3	8b 45 f8	 mov	 eax, DWORD PTR _sbar$[ebp]
  015f6	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  015fc	83 e9 01	 sub	 ecx, 1
  015ff	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  01602	89 8a 2c 03 00
	00		 mov	 DWORD PTR [edx+812], ecx

; 824  : 	
; 825  : 	RedrawNonClient(hwnd, TRUE);

  01608	6a 01		 push	 1
  0160a	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0160d	50		 push	 eax
  0160e	e8 00 00 00 00	 call	 _RedrawNonClient
  01613	83 c4 08	 add	 esp, 8

; 826  : 
; 827  : 	return TRUE;

  01616	b8 01 00 00 00	 mov	 eax, 1
$L77105:

; 828  : }

  0161b	5f		 pop	 edi
  0161c	5e		 pop	 esi
  0161d	83 c4 08	 add	 esp, 8
  01620	3b ec		 cmp	 ebp, esp
  01622	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01627	8b e5		 mov	 esp, ebp
  01629	5d		 pop	 ebp
  0162a	c2 10 00	 ret	 16			; 00000010H
_CoolSB_RemoveButton@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetButton@20
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T77355 = -9						; size = 1
_sbut$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_uItem$ = 16						; size = 4
_fByCmd$ = 20						; size = 4
_psb$ = 24						; size = 4
_CoolSB_GetButton@20 PROC NEAR

; 834  : {

  01630	55		 push	 ebp
  01631	8b ec		 mov	 ebp, esp
  01633	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01636	56		 push	 esi
  01637	57		 push	 edi
  01638	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0163f	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  01646	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0164d	c6 45 f7 00	 mov	 BYTE PTR $T77355[ebp], 0

; 835  : 	SCROLLBAR *sbar;
; 836  : 	SCROLLBUT *sbut;
; 837  : 
; 838  : 	if(!psb) return FALSE;

  01651	83 7d 18 00	 cmp	 DWORD PTR _psb$[ebp], 0
  01655	75 07		 jne	 SHORT $L77137
  01657	33 c0		 xor	 eax, eax
  01659	e9 b0 00 00 00	 jmp	 $L77134
$L77137:

; 839  : 
; 840  : 	//find if this window is CoolScroll enabled
; 841  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  0165e	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  01661	50		 push	 eax
  01662	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  01665	51		 push	 ecx
  01666	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  0166b	83 c4 08	 add	 esp, 8
  0166e	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01671	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01675	75 07		 jne	 SHORT $L77138

; 842  : 		return FALSE;

  01677	33 c0		 xor	 eax, eax
  01679	e9 90 00 00 00	 jmp	 $L77134
$L77138:

; 843  : 
; 844  : 	//find the button to modify, depending on if we
; 845  : 	//are modifying by position or command id
; 846  : 	if(fByCmd == FALSE)

  0167e	83 7d 14 00	 cmp	 DWORD PTR _fByCmd$[ebp], 0
  01682	75 2e		 jne	 SHORT $L77139

; 847  : 	{
; 848  : 		//button from position
; 849  : 		if((int)uItem < 0 || (int)uItem >= (UINT)sbar->nButtons)

  01684	83 7d 10 00	 cmp	 DWORD PTR _uItem$[ebp], 0
  01688	7c 0e		 jl	 SHORT $L77144
  0168a	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0168d	8b 45 10	 mov	 eax, DWORD PTR _uItem$[ebp]
  01690	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  01696	72 04		 jb	 SHORT $L77143
$L77144:

; 850  : 			return FALSE;

  01698	33 c0		 xor	 eax, eax
  0169a	eb 72		 jmp	 SHORT $L77134
$L77143:

; 851  : 		else
; 852  : 			sbut = &sbar->sbButtons[uItem];

  0169c	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  0169f	6b c9 30	 imul	 ecx, 48			; 00000030H
  016a2	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  016a5	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  016a9	c6 45 f7 01	 mov	 BYTE PTR $T77355[ebp], 1
  016ad	89 45 f8	 mov	 DWORD PTR _sbut$[ebp], eax

; 853  : 	}
; 854  : 	else if(fByCmd == TRUE)

  016b0	eb 3a		 jmp	 SHORT $L77146
$L77139:
  016b2	83 7d 14 01	 cmp	 DWORD PTR _fByCmd$[ebp], 1
  016b6	75 34		 jne	 SHORT $L77146

; 855  : 	{
; 856  : 		//button from command identifier
; 857  : 		if(!(sbut = GetButtonFromId(sbar, uItem)))

  016b8	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  016bb	51		 push	 ecx
  016bc	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  016bf	52		 push	 edx
  016c0	e8 00 00 00 00	 call	 _GetButtonFromId
  016c5	83 c4 08	 add	 esp, 8
  016c8	c6 45 f7 01	 mov	 BYTE PTR $T77355[ebp], 1
  016cc	89 45 f8	 mov	 DWORD PTR _sbut$[ebp], eax
  016cf	80 7d f7 00	 cmp	 BYTE PTR $T77355[ebp], 0
  016d3	75 0d		 jne	 SHORT $L77356
  016d5	68 00 00 00 00	 push	 OFFSET FLAT:$L77357
  016da	e8 00 00 00 00	 call	 __RTC_UninitUse
  016df	83 c4 04	 add	 esp, 4
$L77356:
  016e2	83 7d f8 00	 cmp	 DWORD PTR _sbut$[ebp], 0
  016e6	75 04		 jne	 SHORT $L77146

; 858  : 			return FALSE;

  016e8	33 c0		 xor	 eax, eax
  016ea	eb 22		 jmp	 SHORT $L77134
$L77146:

; 859  : 	}
; 860  : 
; 861  : 	//copy them across
; 862  : 	*psb = *sbut;

  016ec	80 7d f7 00	 cmp	 BYTE PTR $T77355[ebp], 0
  016f0	75 0d		 jne	 SHORT $L77358
  016f2	68 00 00 00 00	 push	 OFFSET FLAT:$L77357
  016f7	e8 00 00 00 00	 call	 __RTC_UninitUse
  016fc	83 c4 04	 add	 esp, 4
$L77358:
  016ff	8b 75 f8	 mov	 esi, DWORD PTR _sbut$[ebp]
  01702	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01707	8b 7d 18	 mov	 edi, DWORD PTR _psb$[ebp]
  0170a	f3 a5		 rep movsd

; 863  : 
; 864  : 	return FALSE; 

  0170c	33 c0		 xor	 eax, eax
$L77134:

; 865  : }

  0170e	5f		 pop	 edi
  0170f	5e		 pop	 esi
  01710	83 c4 0c	 add	 esp, 12			; 0000000cH
  01713	3b ec		 cmp	 ebp, esp
  01715	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0171a	8b e5		 mov	 esp, ebp
  0171c	5d		 pop	 ebp
  0171d	c2 14 00	 ret	 20			; 00000014H
$L77359:
$L77357:
  01720	73		 DB	 115			; 00000073H
  01721	62		 DB	 98			; 00000062H
  01722	75		 DB	 117			; 00000075H
  01723	74		 DB	 116			; 00000074H
  01724	00		 DB	 0
_CoolSB_GetButton@20 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetSize@16
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_nLength$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_CoolSB_SetSize@16 PROC NEAR

; 880  : {

  01730	55		 push	 ebp
  01731	8b ec		 mov	 ebp, esp
  01733	51		 push	 ecx
  01734	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 881  : 	SCROLLBAR *sbar;
; 882  : 	
; 883  : 	if(nLength == 0 || nWidth == 0)

  0173b	83 7d 10 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0173f	74 06		 je	 SHORT $L77160
  01741	83 7d 14 00	 cmp	 DWORD PTR _nWidth$[ebp], 0
  01745	75 07		 jne	 SHORT $L77159
$L77160:

; 884  : 		return FALSE;

  01747	33 c0		 xor	 eax, eax
  01749	e9 bd 00 00 00	 jmp	 $L77157
$L77159:

; 885  : 
; 886  : 	if(nLength < -8 || nWidth < -8)

  0174e	83 7d 10 f8	 cmp	 DWORD PTR _nLength$[ebp], -8 ; fffffff8H
  01752	7c 06		 jl	 SHORT $L77162
  01754	83 7d 14 f8	 cmp	 DWORD PTR _nWidth$[ebp], -8 ; fffffff8H
  01758	7d 07		 jge	 SHORT $L77161
$L77162:

; 887  : 		return FALSE;

  0175a	33 c0		 xor	 eax, eax
  0175c	e9 aa 00 00 00	 jmp	 $L77157
$L77161:

; 888  : 
; 889  : 	if(nLength > 256 || nWidth > 256)

  01761	81 7d 10 00 01
	00 00		 cmp	 DWORD PTR _nLength$[ebp], 256 ; 00000100H
  01768	7f 09		 jg	 SHORT $L77164
  0176a	81 7d 14 00 01
	00 00		 cmp	 DWORD PTR _nWidth$[ebp], 256 ; 00000100H
  01771	7e 07		 jle	 SHORT $L77163
$L77164:

; 890  : 		return FALSE;

  01773	33 c0		 xor	 eax, eax
  01775	e9 91 00 00 00	 jmp	 $L77157
$L77163:

; 891  : 
; 892  : 	if(!GetScrollWndFromHwnd(hwnd))

  0177a	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0177d	50		 push	 eax
  0177e	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  01783	83 c4 04	 add	 esp, 4
  01786	85 c0		 test	 eax, eax
  01788	75 04		 jne	 SHORT $L77165

; 893  : 		return FALSE;

  0178a	33 c0		 xor	 eax, eax
  0178c	eb 7d		 jmp	 SHORT $L77157
$L77165:

; 894  : 
; 895  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 896  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  0178e	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  01792	74 06		 je	 SHORT $L77167
  01794	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01798	75 29		 jne	 SHORT $L77166
$L77167:
  0179a	6a 00		 push	 0
  0179c	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0179f	51		 push	 ecx
  017a0	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  017a5	83 c4 08	 add	 esp, 8
  017a8	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  017ab	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  017af	74 12		 je	 SHORT $L77166

; 897  : 	{
; 898  : 		sbar->nArrowLength = nLength;

  017b1	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  017b4	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  017b7	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 899  : 		sbar->nArrowWidth  = nWidth;

  017ba	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  017bd	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  017c0	89 51 28	 mov	 DWORD PTR [ecx+40], edx
$L77166:

; 900  : 	}
; 901  : 
; 902  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 903  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  017c3	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  017c7	74 06		 je	 SHORT $L77169
  017c9	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  017cd	75 29		 jne	 SHORT $L77168
$L77169:
  017cf	6a 01		 push	 1
  017d1	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  017d4	50		 push	 eax
  017d5	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  017da	83 c4 08	 add	 esp, 8
  017dd	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  017e0	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  017e4	74 12		 je	 SHORT $L77168

; 904  : 	{
; 905  : 		sbar->nArrowLength = nLength;

  017e6	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  017e9	8b 55 10	 mov	 edx, DWORD PTR _nLength$[ebp]
  017ec	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 906  : 		sbar->nArrowWidth  = nWidth;

  017ef	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  017f2	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  017f5	89 48 28	 mov	 DWORD PTR [eax+40], ecx
$L77168:

; 907  : 	}
; 908  : 
; 909  : 	RedrawNonClient(hwnd, TRUE);

  017f8	6a 01		 push	 1
  017fa	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  017fd	52		 push	 edx
  017fe	e8 00 00 00 00	 call	 _RedrawNonClient
  01803	83 c4 08	 add	 esp, 8

; 910  : 
; 911  : 	return TRUE;

  01806	b8 01 00 00 00	 mov	 eax, 1
$L77157:

; 912  : }

  0180b	83 c4 04	 add	 esp, 4
  0180e	3b ec		 cmp	 ebp, esp
  01810	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01815	8b e5		 mov	 esp, ebp
  01817	5d		 pop	 ebp
  01818	c2 10 00	 ret	 16			; 00000010H
_CoolSB_SetSize@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetStyle@12
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_nStyle$ = 16						; size = 4
_CoolSB_SetStyle@12 PROC NEAR

; 921  : {

  01820	55		 push	 ebp
  01821	8b ec		 mov	 ebp, esp
  01823	51		 push	 ecx
  01824	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 922  : 	SCROLLBAR *sbar;
; 923  : 
; 924  : 	if(!GetScrollWndFromHwnd(hwnd))

  0182b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0182e	50		 push	 eax
  0182f	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  01834	83 c4 04	 add	 esp, 4
  01837	85 c0		 test	 eax, eax
  01839	75 04		 jne	 SHORT $L77178

; 925  : 		return FALSE;

  0183b	33 c0		 xor	 eax, eax
  0183d	eb 71		 jmp	 SHORT $L77176
$L77178:

; 926  : 
; 927  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 928  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  0183f	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  01843	74 06		 je	 SHORT $L77180
  01845	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01849	75 23		 jne	 SHORT $L77179
$L77180:
  0184b	6a 00		 push	 0
  0184d	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  01850	51		 push	 ecx
  01851	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01856	83 c4 08	 add	 esp, 8
  01859	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0185c	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01860	74 0c		 je	 SHORT $L77179

; 929  : 	{
; 930  : 		sbar->fFlatScrollbar = nStyle;

  01862	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01865	8b 45 10	 mov	 eax, DWORD PTR _nStyle$[ebp]
  01868	89 82 44 03 00
	00		 mov	 DWORD PTR [edx+836], eax
$L77179:

; 931  : 	}
; 932  : 
; 933  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 934  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  0186e	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  01872	74 06		 je	 SHORT $L77182
  01874	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01878	75 23		 jne	 SHORT $L77181
$L77182:
  0187a	6a 01		 push	 1
  0187c	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0187f	51		 push	 ecx
  01880	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01885	83 c4 08	 add	 esp, 8
  01888	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0188b	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  0188f	74 0c		 je	 SHORT $L77181

; 935  : 	{
; 936  : 		sbar->fFlatScrollbar = nStyle;

  01891	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01894	8b 45 10	 mov	 eax, DWORD PTR _nStyle$[ebp]
  01897	89 82 44 03 00
	00		 mov	 DWORD PTR [edx+836], eax
$L77181:

; 937  : 	}
; 938  : 
; 939  : 	RedrawNonClient(hwnd, FALSE);

  0189d	6a 00		 push	 0
  0189f	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  018a2	51		 push	 ecx
  018a3	e8 00 00 00 00	 call	 _RedrawNonClient
  018a8	83 c4 08	 add	 esp, 8

; 940  : 
; 941  : 	return TRUE;

  018ab	b8 01 00 00 00	 mov	 eax, 1
$L77176:

; 942  : }

  018b0	83 c4 04	 add	 esp, 4
  018b3	3b ec		 cmp	 ebp, esp
  018b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018ba	8b e5		 mov	 esp, ebp
  018bc	5d		 pop	 ebp
  018bd	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_SetStyle@12 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetThumbAlways@12
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_fThumbAlways$ = 16					; size = 4
_CoolSB_SetThumbAlways@12 PROC NEAR

; 950  : {

  018c0	55		 push	 ebp
  018c1	8b ec		 mov	 ebp, esp
  018c3	51		 push	 ecx
  018c4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 951  : 	SCROLLBAR *sbar;
; 952  : 
; 953  : 	if(!GetScrollWndFromHwnd(hwnd))

  018cb	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  018ce	50		 push	 eax
  018cf	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  018d4	83 c4 04	 add	 esp, 4
  018d7	85 c0		 test	 eax, eax
  018d9	75 07		 jne	 SHORT $L77191

; 954  : 		return FALSE;

  018db	33 c0		 xor	 eax, eax
  018dd	e9 9d 00 00 00	 jmp	 $L77189
$L77191:

; 955  : 
; 956  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 957  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  018e2	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  018e6	74 06		 je	 SHORT $L77193
  018e8	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  018ec	75 39		 jne	 SHORT $L77192
$L77193:
  018ee	6a 00		 push	 0
  018f0	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  018f3	51		 push	 ecx
  018f4	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  018f9	83 c4 08	 add	 esp, 8
  018fc	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  018ff	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01903	74 22		 je	 SHORT $L77192

; 958  : 	{
; 959  : 		if(fThumbAlways)

  01905	83 7d 10 00	 cmp	 DWORD PTR _fThumbAlways$[ebp], 0
  01909	74 0f		 je	 SHORT $L77194

; 960  : 			sbar->fScrollFlags |=  CSBS_THUMBALWAYS;

  0190b	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0190e	8b 02		 mov	 eax, DWORD PTR [edx]
  01910	83 c8 04	 or	 eax, 4
  01913	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  01916	89 01		 mov	 DWORD PTR [ecx], eax

; 961  : 		else

  01918	eb 0d		 jmp	 SHORT $L77192
$L77194:

; 962  : 			sbar->fScrollFlags &= ~CSBS_THUMBALWAYS;

  0191a	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0191d	8b 02		 mov	 eax, DWORD PTR [edx]
  0191f	83 e0 fb	 and	 eax, -5			; fffffffbH
  01922	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  01925	89 01		 mov	 DWORD PTR [ecx], eax
$L77192:

; 963  : 	}
; 964  : 
; 965  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 966  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  01927	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  0192b	74 06		 je	 SHORT $L77197
  0192d	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01931	75 39		 jne	 SHORT $L77196
$L77197:
  01933	6a 01		 push	 1
  01935	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  01938	52		 push	 edx
  01939	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  0193e	83 c4 08	 add	 esp, 8
  01941	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01944	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01948	74 22		 je	 SHORT $L77196

; 967  : 	{
; 968  : 		if(fThumbAlways)

  0194a	83 7d 10 00	 cmp	 DWORD PTR _fThumbAlways$[ebp], 0
  0194e	74 0f		 je	 SHORT $L77198

; 969  : 			sbar->fScrollFlags |=  CSBS_THUMBALWAYS;

  01950	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  01953	8b 08		 mov	 ecx, DWORD PTR [eax]
  01955	83 c9 04	 or	 ecx, 4
  01958	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0195b	89 0a		 mov	 DWORD PTR [edx], ecx

; 970  : 		else

  0195d	eb 0d		 jmp	 SHORT $L77196
$L77198:

; 971  : 			sbar->fScrollFlags &= ~CSBS_THUMBALWAYS;

  0195f	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  01962	8b 08		 mov	 ecx, DWORD PTR [eax]
  01964	83 e1 fb	 and	 ecx, -5			; fffffffbH
  01967	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0196a	89 0a		 mov	 DWORD PTR [edx], ecx
$L77196:

; 972  : 	}
; 973  : 
; 974  : 	RedrawNonClient(hwnd, FALSE);

  0196c	6a 00		 push	 0
  0196e	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  01971	50		 push	 eax
  01972	e8 00 00 00 00	 call	 _RedrawNonClient
  01977	83 c4 08	 add	 esp, 8

; 975  : 
; 976  : 	return TRUE;

  0197a	b8 01 00 00 00	 mov	 eax, 1
$L77189:

; 977  : }

  0197f	83 c4 04	 add	 esp, 4
  01982	3b ec		 cmp	 ebp, esp
  01984	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01989	8b e5		 mov	 esp, ebp
  0198b	5d		 pop	 ebp
  0198c	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_SetThumbAlways@12 ENDP
; Function compile flags: /Odt /RTCsu
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_size$ = 16						; size = 4
_CoolSB_SetMinThumbSize@12 PROC NEAR

; 983  : {

  01990	55		 push	 ebp
  01991	8b ec		 mov	 ebp, esp
  01993	51		 push	 ecx
  01994	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 984  : 	SCROLLBAR *sbar;
; 985  : 
; 986  : 	if(!GetScrollWndFromHwnd(hwnd))

  0199b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0199e	50		 push	 eax
  0199f	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  019a4	83 c4 04	 add	 esp, 4
  019a7	85 c0		 test	 eax, eax
  019a9	75 04		 jne	 SHORT $L77208

; 987  : 		return FALSE;

  019ab	33 c0		 xor	 eax, eax
  019ad	eb 71		 jmp	 SHORT $L77206
$L77208:

; 988  : 
; 989  : 	if(size == -1)

  019af	83 7d 10 ff	 cmp	 DWORD PTR _size$[ebp], -1
  019b3	75 08		 jne	 SHORT $L77209

; 990  : 		size = CoolSB_GetDefaultMinThumbSize();

  019b5	e8 00 00 00 00	 call	 _CoolSB_GetDefaultMinThumbSize@0
  019ba	89 45 10	 mov	 DWORD PTR _size$[ebp], eax
$L77209:

; 991  : 
; 992  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 993  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  019bd	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  019c1	74 06		 je	 SHORT $L77211
  019c3	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  019c7	75 23		 jne	 SHORT $L77210
$L77211:
  019c9	6a 00		 push	 0
  019cb	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  019ce	51		 push	 ecx
  019cf	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  019d4	83 c4 08	 add	 esp, 8
  019d7	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  019da	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  019de	74 0c		 je	 SHORT $L77210

; 994  : 	{
; 995  : 		sbar->nMinThumbSize = size;

  019e0	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  019e3	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  019e6	89 82 48 03 00
	00		 mov	 DWORD PTR [edx+840], eax
$L77210:

; 996  : 	}
; 997  : 
; 998  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 999  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  019ec	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  019f0	74 06		 je	 SHORT $L77213
  019f2	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  019f6	75 23		 jne	 SHORT $L77212
$L77213:
  019f8	6a 01		 push	 1
  019fa	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  019fd	51		 push	 ecx
  019fe	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01a03	83 c4 08	 add	 esp, 8
  01a06	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01a09	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01a0d	74 0c		 je	 SHORT $L77212

; 1000 : 	{
; 1001 : 		sbar->nMinThumbSize = size;

  01a0f	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01a12	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  01a15	89 82 48 03 00
	00		 mov	 DWORD PTR [edx+840], eax
$L77212:

; 1002 : 	}
; 1003 : 
; 1004 : 	return TRUE;

  01a1b	b8 01 00 00 00	 mov	 eax, 1
$L77206:

; 1005 : }

  01a20	83 c4 04	 add	 esp, 4
  01a23	3b ec		 cmp	 ebp, esp
  01a25	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a2a	8b e5		 mov	 esp, ebp
  01a2c	5d		 pop	 ebp
  01a2d	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_SetMinThumbSize@12 ENDP
_TEXT	ENDS
END
