; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\tray\TrayIconPosition.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??_GCTrayIconPosition@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CTrayIconPosition@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CTrayIconPosition@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CTrayIconPosition@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCTrayIconPosition@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CTrayIconPosition@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTrayIconPosition@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_THIS_FILE DB	'.\src\Gui\tray\TrayIconPosition.cpp', 00H
_DATA	ENDS
CONST	SEGMENT
$SG187170 DB	'TrayNotifyWnd', 00H
	ORG $+2
$SG187179 DB	'ToolbarWindow32', 00H
$SG187187 DB	'Shell_TrayWnd', 00H
CONST	ENDS
PUBLIC	??_R4CTrayIconPosition@@6B@			; CTrayIconPosition::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTrayIconPosition@@@8			; CTrayIconPosition `RTTI Type Descriptor'
PUBLIC	??_R3CTrayIconPosition@@8			; CTrayIconPosition::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTrayIconPosition@@8			; CTrayIconPosition::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CTrayIconPosition@@8		; CTrayIconPosition::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CTrayIconPosition@@QAE@XZ			; CTrayIconPosition::CTrayIconPosition
PUBLIC	??_7CTrayIconPosition@@6B@			; CTrayIconPosition::`vftable'
PUBLIC	??_GCTrayIconPosition@@UAEPAXI@Z		; CTrayIconPosition::`scalar deleting destructor'
EXTRN	??0CTime@ATL@@QAE@XZ:NEAR			; ATL::CTime::CTime
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	??0CPoint@@QAE@XZ:NEAR				; CPoint::CPoint
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	??0CRect@@QAE@XZ:NEAR				; CRect::CRect
EXTRN	??_ECTrayIconPosition@@UAEPAXI@Z:NEAR		; CTrayIconPosition::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\trayiconposition.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT ??_7CTrayIconPosition@@6B@
CONST	SEGMENT
??_7CTrayIconPosition@@6B@ DD FLAT:??_R4CTrayIconPosition@@6B@ ; CTrayIconPosition::`vftable'
	DD	FLAT:??_ECTrayIconPosition@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CTrayIconPosition@@6B@
rdata$r	SEGMENT
??_R4CTrayIconPosition@@6B@ DD 00H			; CTrayIconPosition::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTrayIconPosition@@@8
	DD	FLAT:??_R3CTrayIconPosition@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTrayIconPosition@@@8
_DATA	SEGMENT
??_R0?AVCTrayIconPosition@@@8 DD FLAT:??_7type_info@@6B@ ; CTrayIconPosition `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTrayIconPosition@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CTrayIconPosition@@8
rdata$r	SEGMENT
??_R3CTrayIconPosition@@8 DD 00H			; CTrayIconPosition::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTrayIconPosition@@8
rdata$r	ENDS
;	COMDAT ??_R2CTrayIconPosition@@8
rdata$r	SEGMENT
??_R2CTrayIconPosition@@8 DD FLAT:??_R1A@?0A@A@CTrayIconPosition@@8 ; CTrayIconPosition::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CTrayIconPosition@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CTrayIconPosition@@8 DD FLAT:??_R0?AVCTrayIconPosition@@@8 ; CTrayIconPosition::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTrayIconPosition@@QAE@XZ PROC NEAR			; CTrayIconPosition::CTrayIconPosition
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTrayIconPosition@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00029	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@XZ	; ATL::CTime::CTime
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 24	 add	 ecx, 36			; 00000024H
  00034	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint

; 23   : 	m_hWndOfIconOwner = NULL;

  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 24   : 	m_iTrayIconID = -1;

  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	c7 42 2c ff ff
	ff ff		 mov	 DWORD PTR [edx+44], -1

; 25   : 	m_prDefaultPrecision = High;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	c7 40 18 03 00
	00 00		 mov	 DWORD PTR [eax+24], 3

; 26   : 	m_iPrecisions[0] = 60; //seconds for low precision mode

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	c7 41 34 3c 00
	00 00		 mov	 DWORD PTR [ecx+52], 60	; 0000003cH

; 27   : 	m_iPrecisions[1] = 30; //seconds for medium precision mode

  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 42 38 1e 00
	00 00		 mov	 DWORD PTR [edx+56], 30	; 0000001eH

; 28   : 	m_iPrecisions[2] = 10; //seconds for high precision mode

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	c7 40 3c 0a 00
	00 00		 mov	 DWORD PTR [eax+60], 10	; 0000000aH

; 29   : 
; 30   : 	m_osVer.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);

  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	c7 41 40 94 00
	00 00		 mov	 DWORD PTR [ecx+64], 148	; 00000094H

; 31   : 	GetVersionEx( &m_osVer );

  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	83 c2 40	 add	 edx, 64			; 00000040H
  00085	8b f4		 mov	 esi, esp
  00087	52		 push	 edx
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : }

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	5e		 pop	 esi
  00099	83 c4 04	 add	 esp, 4
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
??0CTrayIconPosition@@QAE@XZ ENDP			; CTrayIconPosition::CTrayIconPosition
_TEXT	ENDS
PUBLIC	??1CTrayIconPosition@@UAE@XZ			; CTrayIconPosition::~CTrayIconPosition
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCTrayIconPosition@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTrayIconPosition@@UAEPAXI@Z PROC NEAR		; CTrayIconPosition::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CTrayIconPosition@@UAE@XZ ; CTrayIconPosition::~CTrayIconPosition
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L187097
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L187097:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GCTrayIconPosition@@UAEPAXI@Z ENDP			; CTrayIconPosition::`scalar deleting destructor'
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CTrayIconPosition@@UAE@XZ PROC NEAR			; CTrayIconPosition::~CTrayIconPosition
; _this$ = ecx

; 35   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	51		 push	 ecx
  000b4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  000bb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  000be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTrayIconPosition@@6B@

; 36   : 
; 37   : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
??1CTrayIconPosition@@UAE@XZ ENDP			; CTrayIconPosition::~CTrayIconPosition
_TEXT	ENDS
PUBLIC	?InitializePositionTracking@CTrayIconPosition@@QAEXPAUHWND__@@H@Z ; CTrayIconPosition::InitializePositionTracking
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hwndOfIconOwner$ = 8					; size = 4
_iIconID$ = 12						; size = 4
?InitializePositionTracking@CTrayIconPosition@@QAEXPAUHWND__@@H@Z PROC NEAR ; CTrayIconPosition::InitializePositionTracking
; _this$ = ecx

; 40   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	51		 push	 ecx
  000d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  000db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	m_hWndOfIconOwner = hwndOfIconOwner;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _hwndOfIconOwner$[ebp]
  000e4	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 42   : 	m_iTrayIconID = iIconID;

  000e7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	8b 45 0c	 mov	 eax, DWORD PTR _iIconID$[ebp]
  000ed	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 43   : }

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
?InitializePositionTracking@CTrayIconPosition@@QAEXPAUHWND__@@H@Z ENDP ; CTrayIconPosition::InitializePositionTracking
_TEXT	ENDS
PUBLIC	?FindOutPositionOfIcon@CTrayIconPosition@@IAEHPAUHICON__@@@Z ; CTrayIconPosition::FindOutPositionOfIcon
PUBLIC	?GetTrayIconPositionVisualScan@CTrayIconPosition@@IAEHAAVCPoint@@W4Precision@1@@Z ; CTrayIconPosition::GetTrayIconPositionVisualScan
PUBLIC	?GetTrayWndRect@CTrayIconPosition@@KA?AVCRect@@XZ ; CTrayIconPosition::GetTrayWndRect
EXTRN	?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ:NEAR	; ATL::CTimeSpan::GetTotalSeconds
EXTRN	?GetTickCount@CTime@ATL@@SG?AV12@XZ:NEAR	; ATL::CTime::GetTickCount
EXTRN	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z:NEAR	; ATL::CTime::operator-
EXTRN	?AfxGetApp@@YGPAVCWinApp@@XZ:NEAR		; AfxGetApp
EXTRN	?CenterPoint@CRect@@QBE?AVCPoint@@XZ:NEAR	; CRect::CenterPoint
EXTRN	?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z:NEAR	; CWinApp::LoadIconA
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T187736 = -72						; size = 8
$T187735 = -64						; size = 8
$T187734 = -56						; size = 8
$T187733 = -48						; size = 16
$T187732 = -32						; size = 8
$T187731 = -24						; size = 8
_bUpdateRequired$ = -16					; size = 4
_prec$ = -12						; size = 4
_iTotalSec$ = -8					; size = 4
_this$ = -4						; size = 4
_a_ptPoint$ = 8						; size = 4
_a_ePrec$ = 12						; size = 4
?GetTrayIconPositionVisualScan@CTrayIconPosition@@IAEHAAVCPoint@@W4Precision@1@@Z PROC NEAR ; CTrayIconPosition::GetTrayIconPositionVisualScan
; _this$ = ecx

; 46   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 48	 sub	 esp, 72			; 00000048H
  00106	57		 push	 edi
  00107	51		 push	 ecx
  00108	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0010b	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00110	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00115	f3 ab		 rep stosd
  00117	59		 pop	 ecx
  00118	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	//let's find the time from last tray icon position calculation
; 48   : 	int iTotalSec = (m_tLastUpdate - CTime::GetCurrentTime()).GetTotalSeconds();

  0011b	8d 45 e8	 lea	 eax, DWORD PTR $T187731[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  00124	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00127	51		 push	 ecx
  00128	8b 10		 mov	 edx, DWORD PTR [eax]
  0012a	52		 push	 edx
  0012b	8d 45 e0	 lea	 eax, DWORD PTR $T187732[ebp]
  0012e	50		 push	 eax
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00135	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-
  0013a	8b c8		 mov	 ecx, eax
  0013c	e8 00 00 00 00	 call	 ?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTotalSeconds
  00141	89 45 f8	 mov	 DWORD PTR _iTotalSec$[ebp], eax

; 49   : 	if(iTotalSec < 0)

  00144	83 7d f8 00	 cmp	 DWORD PTR _iTotalSec$[ebp], 0
  00148	7d 08		 jge	 SHORT $L187114

; 50   : 	{
; 51   : 		iTotalSec = -iTotalSec;

  0014a	8b 4d f8	 mov	 ecx, DWORD PTR _iTotalSec$[ebp]
  0014d	f7 d9		 neg	 ecx
  0014f	89 4d f8	 mov	 DWORD PTR _iTotalSec$[ebp], ecx
$L187114:

; 52   : 	}
; 53   : 
; 54   : 	Precision prec;
; 55   : 	if(a_ePrec == Default)

  00152	83 7d 0c 00	 cmp	 DWORD PTR _a_ePrec$[ebp], 0
  00156	75 0b		 jne	 SHORT $L187116

; 56   : 	{
; 57   : 		prec = m_prDefaultPrecision;

  00158	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0015e	89 45 f4	 mov	 DWORD PTR _prec$[ebp], eax

; 58   : 	}
; 59   : 	else

  00161	eb 06		 jmp	 SHORT $L187117
$L187116:

; 60   : 	{
; 61   : 		prec = a_ePrec;

  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _a_ePrec$[ebp]
  00166	89 4d f4	 mov	 DWORD PTR _prec$[ebp], ecx
$L187117:

; 62   : 	}
; 63   : 
; 64   : 	BOOL bUpdateRequired = FALSE;

  00169	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bUpdateRequired$[ebp], 0

; 65   : 	if(prec == Low && iTotalSec > m_iPrecisions[0]	  ||
; 66   : 	   prec == Medium && iTotalSec > m_iPrecisions[1] ||
; 67   : 	   prec == High && iTotalSec > m_iPrecisions[2]	    )

  00170	83 7d f4 01	 cmp	 DWORD PTR _prec$[ebp], 1
  00174	75 0b		 jne	 SHORT $L187121
  00176	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00179	8b 45 f8	 mov	 eax, DWORD PTR _iTotalSec$[ebp]
  0017c	3b 42 34	 cmp	 eax, DWORD PTR [edx+52]
  0017f	7f 22		 jg	 SHORT $L187120
$L187121:
  00181	83 7d f4 02	 cmp	 DWORD PTR _prec$[ebp], 2
  00185	75 0b		 jne	 SHORT $L187122
  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	8b 55 f8	 mov	 edx, DWORD PTR _iTotalSec$[ebp]
  0018d	3b 51 38	 cmp	 edx, DWORD PTR [ecx+56]
  00190	7f 11		 jg	 SHORT $L187120
$L187122:
  00192	83 7d f4 03	 cmp	 DWORD PTR _prec$[ebp], 3
  00196	75 12		 jne	 SHORT $L187119
  00198	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	8b 4d f8	 mov	 ecx, DWORD PTR _iTotalSec$[ebp]
  0019e	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  001a1	7e 07		 jle	 SHORT $L187119
$L187120:

; 68   : 	   {
; 69   : 		bUpdateRequired = TRUE;

  001a3	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bUpdateRequired$[ebp], 1
$L187119:

; 70   : 	   }
; 71   : 
; 72   : 	if(bUpdateRequired)

  001aa	83 7d f0 00	 cmp	 DWORD PTR _bUpdateRequired$[ebp], 0
  001ae	0f 84 d4 00 00
	00		 je	 $L187123

; 73   : 	{
; 74   : 		m_rtRectangleOfTheTray = GetTrayWndRect();

  001b4	8d 55 d0	 lea	 edx, DWORD PTR $T187733[ebp]
  001b7	52		 push	 edx
  001b8	e8 00 00 00 00	 call	 ?GetTrayWndRect@CTrayIconPosition@@KA?AVCRect@@XZ ; CTrayIconPosition::GetTrayWndRect
  001bd	83 c4 04	 add	 esp, 4
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	83 c1 08	 add	 ecx, 8
  001c6	8b 10		 mov	 edx, DWORD PTR [eax]
  001c8	89 11		 mov	 DWORD PTR [ecx], edx
  001ca	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001cd	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001d0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001d3	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  001d6	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001d9	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 75   : 		
; 76   : 		if(FindOutPositionOfIcon(AfxGetApp()->LoadIcon(IDI_BLANK_BLACK)) == TRUE)

  001dc	68 e2 01 00 00	 push	 482			; 000001e2H
  001e1	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  001e6	8b c8		 mov	 ecx, eax
  001e8	e8 00 00 00 00	 call	 ?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z ; CWinApp::LoadIconA
  001ed	50		 push	 eax
  001ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f1	e8 00 00 00 00	 call	 ?FindOutPositionOfIcon@CTrayIconPosition@@IAEHPAUHICON__@@@Z ; CTrayIconPosition::FindOutPositionOfIcon
  001f6	83 f8 01	 cmp	 eax, 1
  001f9	75 2f		 jne	 SHORT $L187125

; 77   : 		{
; 78   : 			//we were able to find position of icon in tray - that's GREAT!
; 79   : 			m_tLastUpdate = CTime::GetCurrentTime();

  001fb	8d 4d c8	 lea	 ecx, DWORD PTR $T187734[ebp]
  001fe	51		 push	 ecx
  001ff	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  00204	8b 10		 mov	 edx, DWORD PTR [eax]
  00206	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00209	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020c	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
  0020f	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 80   : 			a_ptPoint = m_ptPosition;

  00212	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00215	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00218	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  0021b	8b 55 08	 mov	 edx, DWORD PTR _a_ptPoint$[ebp]
  0021e	89 02		 mov	 DWORD PTR [edx], eax
  00220	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 81   : 			return TRUE;

  00223	b8 01 00 00 00	 mov	 eax, 1
  00228	eb 74		 jmp	 SHORT $L187110
$L187125:

; 82   : 		}
; 83   : 		else
; 84   : 		{
; 85   : 			//We were unable to locate our icon - this is not a tragedy - usually there is a solution:
; 86   : 
; 87   : 			if(m_osVer.dwPlatformId == VER_PLATFORM_WIN32_NT && m_osVer.dwMajorVersion >= 5)

  0022a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022d	83 78 50 02	 cmp	 DWORD PTR [eax+80], 2
  00231	75 35		 jne	 SHORT $L187128
  00233	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00236	83 79 44 05	 cmp	 DWORD PTR [ecx+68], 5
  0023a	72 2c		 jb	 SHORT $L187128

; 88   : 			{
; 89   : 				//We're under Win XP
; 90   : 				//It's quite possible that icon is hidden now let's return Left-Center point of tray - it's most likely WinXP hide-tray-icons button.
; 91   : 				a_ptPoint = m_rtRectangleOfTheTray.CenterPoint();

  0023c	8d 55 c0	 lea	 edx, DWORD PTR $T187735[ebp]
  0023f	52		 push	 edx
  00240	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00243	83 c1 08	 add	 ecx, 8
  00246	e8 00 00 00 00	 call	 ?CenterPoint@CRect@@QBE?AVCPoint@@XZ ; CRect::CenterPoint
  0024b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00250	8b 45 08	 mov	 eax, DWORD PTR _a_ptPoint$[ebp]
  00253	89 08		 mov	 DWORD PTR [eax], ecx
  00255	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 92   : 				a_ptPoint.x = m_rtRectangleOfTheTray.left + 6;

  00258	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0025e	83 c2 06	 add	 edx, 6
  00261	8b 45 08	 mov	 eax, DWORD PTR _a_ptPoint$[ebp]
  00264	89 10		 mov	 DWORD PTR [eax], edx

; 93   : 			}
; 94   : 			else

  00266	eb 1c		 jmp	 SHORT $L187130
$L187128:

; 95   : 			{
; 96   : 				//we're not under XP - I have no idea why but we were unable to locate our icon - let's retunr center of the tray area
; 97   : 				a_ptPoint = m_rtRectangleOfTheTray.CenterPoint();

  00268	8d 4d b8	 lea	 ecx, DWORD PTR $T187736[ebp]
  0026b	51		 push	 ecx
  0026c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026f	83 c1 08	 add	 ecx, 8
  00272	e8 00 00 00 00	 call	 ?CenterPoint@CRect@@QBE?AVCPoint@@XZ ; CRect::CenterPoint
  00277	8b 10		 mov	 edx, DWORD PTR [eax]
  00279	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _a_ptPoint$[ebp]
  0027f	89 11		 mov	 DWORD PTR [ecx], edx
  00281	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$L187130:

; 98   : 			}
; 99   : 			return FALSE;

  00284	33 c0		 xor	 eax, eax
  00286	eb 16		 jmp	 SHORT $L187110
$L187123:

; 100  : 		}
; 101  : 		
; 102  : 	}
; 103  : 	else
; 104  : 	{
; 105  : 		a_ptPoint = m_ptPosition;

  00288	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0028b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0028e	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00291	8b 55 08	 mov	 edx, DWORD PTR _a_ptPoint$[ebp]
  00294	89 02		 mov	 DWORD PTR [edx], eax
  00296	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 106  : 	}
; 107  : 
; 108  : 	return TRUE;

  00299	b8 01 00 00 00	 mov	 eax, 1
$L187110:

; 109  : }

  0029e	5f		 pop	 edi
  0029f	83 c4 48	 add	 esp, 72			; 00000048H
  002a2	3b ec		 cmp	 ebp, esp
  002a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a9	8b e5		 mov	 esp, ebp
  002ab	5d		 pop	 ebp
  002ac	c2 08 00	 ret	 8
?GetTrayIconPositionVisualScan@CTrayIconPosition@@IAEHAAVCPoint@@W4Precision@1@@Z ENDP ; CTrayIconPosition::GetTrayIconPositionVisualScan
_TEXT	ENDS
PUBLIC	?GetTrayIconPosition@CTrayIconPosition@@QAEHAAVCPoint@@W4TrackType@1@W4Precision@1@@Z ; CTrayIconPosition::GetTrayIconPosition
PUBLIC	?FindOutPositionOfIconDirectly@CTrayIconPosition@@KAHQAUHWND__@@HAAVCRect@@@Z ; CTrayIconPosition::FindOutPositionOfIconDirectly
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv69 = -48						; size = 4
_bOK$187154 = -44					; size = 4
_bOK$187152 = -40					; size = 4
_rcDirectRect$ = -32					; size = 16
_iOffsetY$ = -12					; size = 4
_iOffsetX$ = -8						; size = 4
_this$ = -4						; size = 4
_a_ptPoint$ = 8						; size = 4
_a_eTrackType$ = 12					; size = 4
_a_ePrec$ = 16						; size = 4
?GetTrayIconPosition@CTrayIconPosition@@QAEHAAVCPoint@@W4TrackType@1@W4Precision@1@@Z PROC NEAR ; CTrayIconPosition::GetTrayIconPosition
; _this$ = ecx

; 112  : {

  002b0	55		 push	 ebp
  002b1	8b ec		 mov	 ebp, esp
  002b3	83 ec 30	 sub	 esp, 48			; 00000030H
  002b6	57		 push	 edi
  002b7	51		 push	 ecx
  002b8	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  002bb	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002c0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  002c5	f3 ab		 rep stosd
  002c7	59		 pop	 ecx
  002c8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	if(m_hWndOfIconOwner == NULL || m_iTrayIconID == -1)

  002cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ce	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  002d2	74 09		 je	 SHORT $L187140
  002d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d7	83 79 2c ff	 cmp	 DWORD PTR [ecx+44], -1
  002db	75 08		 jne	 SHORT $L187139
$L187140:

; 114  : 	{
; 115  : 		return -1;

  002dd	83 c8 ff	 or	 eax, -1
  002e0	e9 3d 01 00 00	 jmp	 $L187138
$L187139:

; 116  : 	}
; 117  : 	
; 118  : 	//remove it if you need exact point of left/top corner of the icon
; 119  : 	const int iOffsetX = 4;

  002e5	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _iOffsetX$[ebp], 4

; 120  : 	const int iOffsetY = 6;

  002ec	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _iOffsetY$[ebp], 6

; 121  : 
; 122  : 	CRect rcDirectRect;

  002f3	8d 4d e0	 lea	 ecx, DWORD PTR _rcDirectRect$[ebp]
  002f6	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 123  : 	
; 124  : 	switch (a_eTrackType) 

  002fb	8b 55 0c	 mov	 edx, DWORD PTR _a_eTrackType$[ebp]
  002fe	89 55 d0	 mov	 DWORD PTR tv69[ebp], edx
  00301	83 7d d0 03	 cmp	 DWORD PTR tv69[ebp], 3
  00305	0f 87 fd 00 00
	00		 ja	 $L187156
  0030b	8b 45 d0	 mov	 eax, DWORD PTR tv69[ebp]
  0030e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L187743[eax*4]
$L187148:

; 125  : 	{
; 126  : 	case UseBothTechniquesDirectPrefered:
; 127  : 		if( FindOutPositionOfIconDirectly(m_hWndOfIconOwner, m_iTrayIconID, rcDirectRect) == FALSE )

  00315	8d 4d e0	 lea	 ecx, DWORD PTR _rcDirectRect$[ebp]
  00318	51		 push	 ecx
  00319	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0031c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0031f	50		 push	 eax
  00320	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00323	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00326	52		 push	 edx
  00327	e8 00 00 00 00	 call	 ?FindOutPositionOfIconDirectly@CTrayIconPosition@@KAHQAUHWND__@@HAAVCRect@@@Z ; CTrayIconPosition::FindOutPositionOfIconDirectly
  0032c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0032f	85 c0		 test	 eax, eax
  00331	75 15		 jne	 SHORT $L187149

; 128  : 		{
; 129  : 			return GetTrayIconPositionVisualScan(a_ptPoint, a_ePrec);

  00333	8b 45 10	 mov	 eax, DWORD PTR _a_ePrec$[ebp]
  00336	50		 push	 eax
  00337	8b 4d 08	 mov	 ecx, DWORD PTR _a_ptPoint$[ebp]
  0033a	51		 push	 ecx
  0033b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	e8 00 00 00 00	 call	 ?GetTrayIconPositionVisualScan@CTrayIconPosition@@IAEHAAVCPoint@@W4Precision@1@@Z ; CTrayIconPosition::GetTrayIconPositionVisualScan
  00343	e9 da 00 00 00	 jmp	 $L187138
$L187149:

; 130  : 		}
; 131  : 		
; 132  : 		a_ptPoint.x = rcDirectRect.left + iOffsetX;

  00348	8b 55 e0	 mov	 edx, DWORD PTR _rcDirectRect$[ebp]
  0034b	83 c2 04	 add	 edx, 4
  0034e	8b 45 08	 mov	 eax, DWORD PTR _a_ptPoint$[ebp]
  00351	89 10		 mov	 DWORD PTR [eax], edx

; 133  : 		a_ptPoint.y = rcDirectRect.top  + iOffsetY;

  00353	8b 4d e4	 mov	 ecx, DWORD PTR _rcDirectRect$[ebp+4]
  00356	83 c1 06	 add	 ecx, 6
  00359	8b 55 08	 mov	 edx, DWORD PTR _a_ptPoint$[ebp]
  0035c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 134  : 		return TRUE;

  0035f	b8 01 00 00 00	 mov	 eax, 1
  00364	e9 b9 00 00 00	 jmp	 $L187138
$L187150:

; 135  : 
; 136  : 	case UseBothTechniquesVisualScanPrefered:
; 137  : 		if( GetTrayIconPositionVisualScan(a_ptPoint, a_ePrec) == FALSE )

  00369	8b 45 10	 mov	 eax, DWORD PTR _a_ePrec$[ebp]
  0036c	50		 push	 eax
  0036d	8b 4d 08	 mov	 ecx, DWORD PTR _a_ptPoint$[ebp]
  00370	51		 push	 ecx
  00371	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00374	e8 00 00 00 00	 call	 ?GetTrayIconPositionVisualScan@CTrayIconPosition@@IAEHAAVCPoint@@W4Precision@1@@Z ; CTrayIconPosition::GetTrayIconPositionVisualScan
  00379	85 c0		 test	 eax, eax
  0037b	75 39		 jne	 SHORT $L187151

; 138  : 		{
; 139  : 			BOOL bOK = FindOutPositionOfIconDirectly(m_hWndOfIconOwner, m_iTrayIconID, rcDirectRect);

  0037d	8d 55 e0	 lea	 edx, DWORD PTR _rcDirectRect$[ebp]
  00380	52		 push	 edx
  00381	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00384	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00387	51		 push	 ecx
  00388	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0038b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 ?FindOutPositionOfIconDirectly@CTrayIconPosition@@KAHQAUHWND__@@HAAVCRect@@@Z ; CTrayIconPosition::FindOutPositionOfIconDirectly
  00394	83 c4 0c	 add	 esp, 12			; 0000000cH
  00397	89 45 d8	 mov	 DWORD PTR _bOK$187152[ebp], eax

; 140  : 
; 141  : 			a_ptPoint.x = rcDirectRect.left + iOffsetX;

  0039a	8b 4d e0	 mov	 ecx, DWORD PTR _rcDirectRect$[ebp]
  0039d	83 c1 04	 add	 ecx, 4
  003a0	8b 55 08	 mov	 edx, DWORD PTR _a_ptPoint$[ebp]
  003a3	89 0a		 mov	 DWORD PTR [edx], ecx

; 142  : 			a_ptPoint.y = rcDirectRect.top  + iOffsetY;

  003a5	8b 45 e4	 mov	 eax, DWORD PTR _rcDirectRect$[ebp+4]
  003a8	83 c0 06	 add	 eax, 6
  003ab	8b 4d 08	 mov	 ecx, DWORD PTR _a_ptPoint$[ebp]
  003ae	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 143  : 			return bOK;

  003b1	8b 45 d8	 mov	 eax, DWORD PTR _bOK$187152[ebp]
  003b4	eb 6c		 jmp	 SHORT $L187138
$L187151:

; 144  : 		}
; 145  : 		return TRUE;

  003b6	b8 01 00 00 00	 mov	 eax, 1
  003bb	eb 65		 jmp	 SHORT $L187138
$L187153:

; 146  : 
; 147  : 	case UseDirectOnly:
; 148  : 		{
; 149  : 			BOOL bOK = FindOutPositionOfIconDirectly(m_hWndOfIconOwner, m_iTrayIconID, rcDirectRect);

  003bd	8d 55 e0	 lea	 edx, DWORD PTR _rcDirectRect$[ebp]
  003c0	52		 push	 edx
  003c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003c4	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  003c7	51		 push	 ecx
  003c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003cb	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ?FindOutPositionOfIconDirectly@CTrayIconPosition@@KAHQAUHWND__@@HAAVCRect@@@Z ; CTrayIconPosition::FindOutPositionOfIconDirectly
  003d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d7	89 45 d4	 mov	 DWORD PTR _bOK$187154[ebp], eax

; 150  : 
; 151  : 			a_ptPoint.x = rcDirectRect.left + iOffsetX;

  003da	8b 4d e0	 mov	 ecx, DWORD PTR _rcDirectRect$[ebp]
  003dd	83 c1 04	 add	 ecx, 4
  003e0	8b 55 08	 mov	 edx, DWORD PTR _a_ptPoint$[ebp]
  003e3	89 0a		 mov	 DWORD PTR [edx], ecx

; 152  : 			a_ptPoint.y = rcDirectRect.top  + iOffsetY;

  003e5	8b 45 e4	 mov	 eax, DWORD PTR _rcDirectRect$[ebp+4]
  003e8	83 c0 06	 add	 eax, 6
  003eb	8b 4d 08	 mov	 ecx, DWORD PTR _a_ptPoint$[ebp]
  003ee	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 153  : 			return bOK;

  003f1	8b 45 d4	 mov	 eax, DWORD PTR _bOK$187154[ebp]
  003f4	eb 2c		 jmp	 SHORT $L187138
$L187155:

; 154  : 		}
; 155  : 
; 156  : 	case UseVisualScanOnly:
; 157  : 		return GetTrayIconPositionVisualScan(a_ptPoint, a_ePrec);

  003f6	8b 55 10	 mov	 edx, DWORD PTR _a_ePrec$[ebp]
  003f9	52		 push	 edx
  003fa	8b 45 08	 mov	 eax, DWORD PTR _a_ptPoint$[ebp]
  003fd	50		 push	 eax
  003fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00401	e8 00 00 00 00	 call	 ?GetTrayIconPositionVisualScan@CTrayIconPosition@@IAEHAAVCPoint@@W4Precision@1@@Z ; CTrayIconPosition::GetTrayIconPositionVisualScan
  00406	eb 1a		 jmp	 SHORT $L187138
$L187156:

; 158  : 		
; 159  : 	default:
; 160  : 		ASSERT(0);

  00408	33 c9		 xor	 ecx, ecx
  0040a	75 14		 jne	 SHORT $L187145
  0040c	68 a0 00 00 00	 push	 160			; 000000a0H
  00411	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00416	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0041b	85 c0		 test	 eax, eax
  0041d	74 01		 je	 SHORT $L187145
  0041f	cc		 int	 3
$L187145:

; 161  : 		break;
; 162  : 	}
; 163  : 	
; 164  : 
; 165  : 	return FALSE;

  00420	33 c0		 xor	 eax, eax
$L187138:

; 166  : }

  00422	52		 push	 edx
  00423	8b cd		 mov	 ecx, ebp
  00425	50		 push	 eax
  00426	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187741
  0042c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00431	58		 pop	 eax
  00432	5a		 pop	 edx
  00433	5f		 pop	 edi
  00434	83 c4 30	 add	 esp, 48			; 00000030H
  00437	3b ec		 cmp	 ebp, esp
  00439	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0043e	8b e5		 mov	 esp, ebp
  00440	5d		 pop	 ebp
  00441	c2 0c 00	 ret	 12			; 0000000cH
$L187741:
  00444	01 00 00 00	 DD	 1
  00448	00 00 00 00	 DD	 $L187740
$L187740:
  0044c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00450	10 00 00 00	 DD	 16			; 00000010H
  00454	00 00 00 00	 DD	 $L187739
$L187739:
  00458	72		 DB	 114			; 00000072H
  00459	63		 DB	 99			; 00000063H
  0045a	44		 DB	 68			; 00000044H
  0045b	69		 DB	 105			; 00000069H
  0045c	72		 DB	 114			; 00000072H
  0045d	65		 DB	 101			; 00000065H
  0045e	63		 DB	 99			; 00000063H
  0045f	74		 DB	 116			; 00000074H
  00460	52		 DB	 82			; 00000052H
  00461	65		 DB	 101			; 00000065H
  00462	63		 DB	 99			; 00000063H
  00463	74		 DB	 116			; 00000074H
  00464	00		 DB	 0
$L187743:
  00465	00 00 00 00	 DD	 $L187148
  00469	00 00 00 00	 DD	 $L187150
  0046d	00 00 00 00	 DD	 $L187153
  00471	00 00 00 00	 DD	 $L187155
?GetTrayIconPosition@CTrayIconPosition@@QAEHAAVCPoint@@W4TrackType@1@W4Precision@1@@Z ENDP ; CTrayIconPosition::GetTrayIconPosition
_TEXT	ENDS
PUBLIC	?SetPrecisionTimeOuts@CTrayIconPosition@@QAEXHHH@Z ; CTrayIconPosition::SetPrecisionTimeOuts
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iLowSec$ = 8						; size = 4
_iMedSec$ = 12						; size = 4
_iHighSec$ = 16						; size = 4
?SetPrecisionTimeOuts@CTrayIconPosition@@QAEXHHH@Z PROC NEAR ; CTrayIconPosition::SetPrecisionTimeOuts
; _this$ = ecx

; 182  : {

  00480	55		 push	 ebp
  00481	8b ec		 mov	 ebp, esp
  00483	51		 push	 ecx
  00484	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0048b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  : 	m_iPrecisions[0] = iLowSec;

  0048e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00491	8b 4d 08	 mov	 ecx, DWORD PTR _iLowSec$[ebp]
  00494	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 184  : 	m_iPrecisions[1] = iMedSec;

  00497	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0049a	8b 45 0c	 mov	 eax, DWORD PTR _iMedSec$[ebp]
  0049d	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 185  : 	m_iPrecisions[2] = iHighSec;

  004a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a3	8b 55 10	 mov	 edx, DWORD PTR _iHighSec$[ebp]
  004a6	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 186  : }

  004a9	8b e5		 mov	 esp, ebp
  004ab	5d		 pop	 ebp
  004ac	c2 0c 00	 ret	 12			; 0000000cH
?SetPrecisionTimeOuts@CTrayIconPosition@@QAEXHHH@Z ENDP	; CTrayIconPosition::SetPrecisionTimeOuts
_TEXT	ENDS
PUBLIC	__tcscmp
PUBLIC	?FindTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z ; CTrayIconPosition::FindTrayWnd
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__GetClassNameA@12:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pWnd$187171 = -272					; size = 4
_szClassName$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
?FindTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z PROC NEAR ; CTrayIconPosition::FindTrayWnd

; 194  : {    

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  004b9	56		 push	 esi
  004ba	57		 push	 edi
  004bb	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  004c1	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  004c6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  004cb	f3 ab		 rep stosd
  004cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  004d2	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 195  : 	TCHAR szClassName[256];
; 196  :     GetClassName(hwnd, szClassName, 255);    // Did we find the Main System Tray? If so, then get its size and quit

  004d5	8b f4		 mov	 esi, esp
  004d7	68 ff 00 00 00	 push	 255			; 000000ffH
  004dc	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szClassName$[ebp]
  004e2	50		 push	 eax
  004e3	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  004e6	51		 push	 ecx
  004e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassNameA@12
  004ed	3b f4		 cmp	 esi, esp
  004ef	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 197  : 	if (_tcscmp(szClassName, _T("TrayNotifyWnd")) == 0)    

  004f4	68 00 00 00 00	 push	 OFFSET FLAT:$SG187170
  004f9	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szClassName$[ebp]
  004ff	52		 push	 edx
  00500	e8 00 00 00 00	 call	 __tcscmp
  00505	83 c4 08	 add	 esp, 8
  00508	85 c0		 test	 eax, eax
  0050a	75 18		 jne	 SHORT $L187169

; 198  : 	{        
; 199  : 		HWND* pWnd = (HWND*)lParam;

  0050c	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  0050f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _pWnd$187171[ebp], eax

; 200  : 		*pWnd = hwnd;

  00515	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$187171[ebp]
  0051b	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0051e	89 11		 mov	 DWORD PTR [ecx], edx

; 201  :         return FALSE;    

  00520	33 c0		 xor	 eax, eax
  00522	eb 05		 jmp	 SHORT $L187167
$L187169:

; 202  : 	}    
; 203  : 	
; 204  : 	//Oryginal code I found on Internet were seeking here for system clock and it was assumming that clock is on the right side of tray.
; 205  : 	//After that calculated size of tray was adjusted by removing space occupied by clock.
; 206  : 	//This is not a good idea - some clocks are ABOVE or somewhere else on the screen. I found that is far safer to just ignore clock space.
; 207  : 	
; 208  : 	return TRUE;

  00524	b8 01 00 00 00	 mov	 eax, 1
$L187167:

; 209  : }

  00529	52		 push	 edx
  0052a	8b cd		 mov	 ecx, ebp
  0052c	50		 push	 eax
  0052d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187751
  00533	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00538	58		 pop	 eax
  00539	5a		 pop	 edx
  0053a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0053d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00542	5f		 pop	 edi
  00543	5e		 pop	 esi
  00544	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  0054a	3b ec		 cmp	 ebp, esp
  0054c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00551	8b e5		 mov	 esp, ebp
  00553	5d		 pop	 ebp
  00554	c2 08 00	 ret	 8
$L187751:
  00557	01 00 00 00	 DD	 1
  0055b	00 00 00 00	 DD	 $L187750
$L187750:
  0055f	f8 fe ff ff	 DD	 -264			; fffffef8H
  00563	00 01 00 00	 DD	 256			; 00000100H
  00567	00 00 00 00	 DD	 $L187747
$L187747:
  0056b	73		 DB	 115			; 00000073H
  0056c	7a		 DB	 122			; 0000007aH
  0056d	43		 DB	 67			; 00000043H
  0056e	6c		 DB	 108			; 0000006cH
  0056f	61		 DB	 97			; 00000061H
  00570	73		 DB	 115			; 00000073H
  00571	73		 DB	 115			; 00000073H
  00572	4e		 DB	 78			; 0000004eH
  00573	61		 DB	 97			; 00000061H
  00574	6d		 DB	 109			; 0000006dH
  00575	65		 DB	 101			; 00000065H
  00576	00		 DB	 0
?FindTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z ENDP	; CTrayIconPosition::FindTrayWnd
_TEXT	ENDS
PUBLIC	?FindToolBarInTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z ; CTrayIconPosition::FindToolBarInTrayWnd
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pWnd$187180 = -272					; size = 4
_szClassName$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
?FindToolBarInTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z PROC NEAR ; CTrayIconPosition::FindToolBarInTrayWnd

; 212  : {    

  00580	55		 push	 ebp
  00581	8b ec		 mov	 ebp, esp
  00583	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00589	56		 push	 esi
  0058a	57		 push	 edi
  0058b	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00591	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00596	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0059b	f3 ab		 rep stosd
  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  005a2	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 213  : 	TCHAR szClassName[256];
; 214  :     GetClassName(hwnd, szClassName, 255);    // Did we find the Main System Tray? If so, then get its size and quit

  005a5	8b f4		 mov	 esi, esp
  005a7	68 ff 00 00 00	 push	 255			; 000000ffH
  005ac	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szClassName$[ebp]
  005b2	50		 push	 eax
  005b3	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  005b6	51		 push	 ecx
  005b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassNameA@12
  005bd	3b f4		 cmp	 esi, esp
  005bf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 215  : 	if (_tcscmp(szClassName, _T("ToolbarWindow32")) == 0)    

  005c4	68 00 00 00 00	 push	 OFFSET FLAT:$SG187179
  005c9	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szClassName$[ebp]
  005cf	52		 push	 edx
  005d0	e8 00 00 00 00	 call	 __tcscmp
  005d5	83 c4 08	 add	 esp, 8
  005d8	85 c0		 test	 eax, eax
  005da	75 18		 jne	 SHORT $L187178

; 216  : 	{        
; 217  : 		HWND* pWnd = (HWND*)lParam;

  005dc	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  005df	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _pWnd$187180[ebp], eax

; 218  : 		*pWnd = hwnd;

  005e5	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$187180[ebp]
  005eb	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  005ee	89 11		 mov	 DWORD PTR [ecx], edx

; 219  :         return FALSE;    

  005f0	33 c0		 xor	 eax, eax
  005f2	eb 05		 jmp	 SHORT $L187176
$L187178:

; 220  : 	}    
; 221  : 	return TRUE;

  005f4	b8 01 00 00 00	 mov	 eax, 1
$L187176:

; 222  : }

  005f9	52		 push	 edx
  005fa	8b cd		 mov	 ecx, ebp
  005fc	50		 push	 eax
  005fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187758
  00603	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00608	58		 pop	 eax
  00609	5a		 pop	 edx
  0060a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0060d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00612	5f		 pop	 edi
  00613	5e		 pop	 esi
  00614	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  0061a	3b ec		 cmp	 ebp, esp
  0061c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00621	8b e5		 mov	 esp, ebp
  00623	5d		 pop	 ebp
  00624	c2 08 00	 ret	 8
$L187758:
  00627	01 00 00 00	 DD	 1
  0062b	00 00 00 00	 DD	 $L187757
$L187757:
  0062f	f8 fe ff ff	 DD	 -264			; fffffef8H
  00633	00 01 00 00	 DD	 256			; 00000100H
  00637	00 00 00 00	 DD	 $L187755
$L187755:
  0063b	73		 DB	 115			; 00000073H
  0063c	7a		 DB	 122			; 0000007aH
  0063d	43		 DB	 67			; 00000043H
  0063e	6c		 DB	 108			; 0000006cH
  0063f	61		 DB	 97			; 00000061H
  00640	73		 DB	 115			; 00000073H
  00641	73		 DB	 115			; 00000073H
  00642	4e		 DB	 78			; 0000004eH
  00643	61		 DB	 97			; 00000061H
  00644	6d		 DB	 109			; 0000006dH
  00645	65		 DB	 101			; 00000065H
  00646	00		 DB	 0
?FindToolBarInTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z ENDP ; CTrayIconPosition::FindToolBarInTrayWnd
_TEXT	ENDS
PUBLIC	?GetTrayNotifyWnd@CTrayIconPosition@@KAPAUHWND__@@H@Z ; CTrayIconPosition::GetTrayNotifyWnd
EXTRN	__imp__IsWindow@4:NEAR
EXTRN	__imp__EnumChildWindows@12:NEAR
EXTRN	__imp__FindWindowA@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_hWndToolBarWnd$187191 = -24				; size = 4
_hWndShellTrayWnd$ = -16				; size = 4
_hWndTrayNotifyWnd$ = -8				; size = 4
_a_bSeekForEmbedToolbar$ = 8				; size = 4
?GetTrayNotifyWnd@CTrayIconPosition@@KAPAUHWND__@@H@Z PROC NEAR ; CTrayIconPosition::GetTrayNotifyWnd

; 227  : {

  00650	55		 push	 ebp
  00651	8b ec		 mov	 ebp, esp
  00653	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00656	56		 push	 esi
  00657	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0065c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0065f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00662	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00665	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00668	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0066b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0066e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 228  : 	HWND hWndTrayNotifyWnd = NULL;

  00671	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hWndTrayNotifyWnd$[ebp], 0

; 229  : 	
; 230  :     HWND hWndShellTrayWnd = FindWindow(_T("Shell_TrayWnd"), NULL);

  00678	8b f4		 mov	 esi, esp
  0067a	6a 00		 push	 0
  0067c	68 00 00 00 00	 push	 OFFSET FLAT:$SG187187
  00681	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindWindowA@8
  00687	3b f4		 cmp	 esi, esp
  00689	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0068e	89 45 f0	 mov	 DWORD PTR _hWndShellTrayWnd$[ebp], eax

; 231  :     if (hWndShellTrayWnd)    

  00691	83 7d f0 00	 cmp	 DWORD PTR _hWndShellTrayWnd$[ebp], 0
  00695	74 6c		 je	 SHORT $L187188

; 232  : 	{        
; 233  : 		EnumChildWindows(hWndShellTrayWnd, CTrayIconPosition::FindTrayWnd, (LPARAM)&hWndTrayNotifyWnd);   

  00697	8b f4		 mov	 esi, esp
  00699	8d 45 f8	 lea	 eax, DWORD PTR _hWndTrayNotifyWnd$[ebp]
  0069c	50		 push	 eax
  0069d	68 00 00 00 00	 push	 OFFSET FLAT:?FindTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z ; CTrayIconPosition::FindTrayWnd
  006a2	8b 4d f0	 mov	 ecx, DWORD PTR _hWndShellTrayWnd$[ebp]
  006a5	51		 push	 ecx
  006a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
  006ac	3b f4		 cmp	 esi, esp
  006ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 234  : 		
; 235  : 		if(hWndTrayNotifyWnd && IsWindow(hWndTrayNotifyWnd))

  006b3	83 7d f8 00	 cmp	 DWORD PTR _hWndTrayNotifyWnd$[ebp], 0
  006b7	74 45		 je	 SHORT $L187190
  006b9	8b f4		 mov	 esi, esp
  006bb	8b 55 f8	 mov	 edx, DWORD PTR _hWndTrayNotifyWnd$[ebp]
  006be	52		 push	 edx
  006bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  006c5	3b f4		 cmp	 esi, esp
  006c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006cc	85 c0		 test	 eax, eax
  006ce	74 2e		 je	 SHORT $L187190

; 236  : 		{
; 237  : 			HWND hWndToolBarWnd = NULL;

  006d0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hWndToolBarWnd$187191[ebp], 0

; 238  : 			EnumChildWindows(hWndTrayNotifyWnd, CTrayIconPosition::FindToolBarInTrayWnd, (LPARAM)&hWndToolBarWnd);   

  006d7	8b f4		 mov	 esi, esp
  006d9	8d 45 e8	 lea	 eax, DWORD PTR _hWndToolBarWnd$187191[ebp]
  006dc	50		 push	 eax
  006dd	68 00 00 00 00	 push	 OFFSET FLAT:?FindToolBarInTrayWnd@CTrayIconPosition@@KGHPAUHWND__@@J@Z ; CTrayIconPosition::FindToolBarInTrayWnd
  006e2	8b 4d f8	 mov	 ecx, DWORD PTR _hWndTrayNotifyWnd$[ebp]
  006e5	51		 push	 ecx
  006e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
  006ec	3b f4		 cmp	 esi, esp
  006ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 239  : 			if(hWndToolBarWnd)

  006f3	83 7d e8 00	 cmp	 DWORD PTR _hWndToolBarWnd$187191[ebp], 0
  006f7	74 05		 je	 SHORT $L187190

; 240  : 			{
; 241  : 				return hWndToolBarWnd;

  006f9	8b 45 e8	 mov	 eax, DWORD PTR _hWndToolBarWnd$187191[ebp]
  006fc	eb 08		 jmp	 SHORT $L187184
$L187190:

; 242  : 			}
; 243  : 		}
; 244  : 
; 245  : 		return hWndTrayNotifyWnd;

  006fe	8b 45 f8	 mov	 eax, DWORD PTR _hWndTrayNotifyWnd$[ebp]
  00701	eb 03		 jmp	 SHORT $L187184
$L187188:

; 246  : 	}  
; 247  : 
; 248  : 	return hWndShellTrayWnd;

  00703	8b 45 f0	 mov	 eax, DWORD PTR _hWndShellTrayWnd$[ebp]
$L187184:

; 249  : }

  00706	52		 push	 edx
  00707	8b cd		 mov	 ecx, ebp
  00709	50		 push	 eax
  0070a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187763
  00710	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00715	58		 pop	 eax
  00716	5a		 pop	 edx
  00717	5e		 pop	 esi
  00718	83 c4 1c	 add	 esp, 28			; 0000001cH
  0071b	3b ec		 cmp	 ebp, esp
  0071d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00722	8b e5		 mov	 esp, ebp
  00724	5d		 pop	 ebp
  00725	c3		 ret	 0
$L187763:
  00726	02 00 00 00	 DD	 2
  0072a	00 00 00 00	 DD	 $L187762
$L187762:
  0072e	f8 ff ff ff	 DD	 -8			; fffffff8H
  00732	04 00 00 00	 DD	 4
  00736	00 00 00 00	 DD	 $L187760
  0073a	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0073e	04 00 00 00	 DD	 4
  00742	00 00 00 00	 DD	 $L187761
$L187761:
  00746	68		 DB	 104			; 00000068H
  00747	57		 DB	 87			; 00000057H
  00748	6e		 DB	 110			; 0000006eH
  00749	64		 DB	 100			; 00000064H
  0074a	54		 DB	 84			; 00000054H
  0074b	6f		 DB	 111			; 0000006fH
  0074c	6f		 DB	 111			; 0000006fH
  0074d	6c		 DB	 108			; 0000006cH
  0074e	42		 DB	 66			; 00000042H
  0074f	61		 DB	 97			; 00000061H
  00750	72		 DB	 114			; 00000072H
  00751	57		 DB	 87			; 00000057H
  00752	6e		 DB	 110			; 0000006eH
  00753	64		 DB	 100			; 00000064H
  00754	00		 DB	 0
$L187760:
  00755	68		 DB	 104			; 00000068H
  00756	57		 DB	 87			; 00000057H
  00757	6e		 DB	 110			; 0000006eH
  00758	64		 DB	 100			; 00000064H
  00759	54		 DB	 84			; 00000054H
  0075a	72		 DB	 114			; 00000072H
  0075b	61		 DB	 97			; 00000061H
  0075c	79		 DB	 121			; 00000079H
  0075d	4e		 DB	 78			; 0000004eH
  0075e	6f		 DB	 111			; 0000006fH
  0075f	74		 DB	 116			; 00000074H
  00760	69		 DB	 105			; 00000069H
  00761	66		 DB	 102			; 00000066H
  00762	79		 DB	 121			; 00000079H
  00763	57		 DB	 87			; 00000057H
  00764	6e		 DB	 110			; 0000006eH
  00765	64		 DB	 100			; 00000064H
  00766	00		 DB	 0
?GetTrayNotifyWnd@CTrayIconPosition@@KAPAUHWND__@@H@Z ENDP ; CTrayIconPosition::GetTrayNotifyWnd
_TEXT	ENDS
EXTRN	??0CRect@@QAE@HHHH@Z:NEAR			; CRect::CRect
EXTRN	?SetRect@CRect@@QAEXHHHH@Z:NEAR			; CRect::SetRect
EXTRN	__imp__GetWindowRect@8:NEAR
EXTRN	__imp__GetSystemMetrics@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_nHeight$ = -36						; size = 4
_nWidth$ = -32						; size = 4
_hWndTrayWnd$ = -28					; size = 4
_rect$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
?GetTrayWndRect@CTrayIconPosition@@KA?AVCRect@@XZ PROC NEAR ; CTrayIconPosition::GetTrayWndRect

; 252  : {    

  00770	55		 push	 ebp
  00771	8b ec		 mov	 ebp, esp
  00773	83 ec 24	 sub	 esp, 36			; 00000024H
  00776	56		 push	 esi
  00777	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0077c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0077f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00782	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00785	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00788	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0078b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0078e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00791	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00794	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 253  : 	CRect rect(0,0,0,0);

  00797	6a 00		 push	 0
  00799	6a 00		 push	 0
  0079b	6a 00		 push	 0
  0079d	6a 00		 push	 0
  0079f	8d 4d ec	 lea	 ecx, DWORD PTR _rect$[ebp]
  007a2	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 254  : 	
; 255  : 	HWND hWndTrayWnd = GetTrayNotifyWnd(FALSE);

  007a7	6a 00		 push	 0
  007a9	e8 00 00 00 00	 call	 ?GetTrayNotifyWnd@CTrayIconPosition@@KAPAUHWND__@@H@Z ; CTrayIconPosition::GetTrayNotifyWnd
  007ae	83 c4 04	 add	 esp, 4
  007b1	89 45 e4	 mov	 DWORD PTR _hWndTrayWnd$[ebp], eax

; 256  : 	if(hWndTrayWnd)

  007b4	83 7d e4 00	 cmp	 DWORD PTR _hWndTrayWnd$[ebp], 0
  007b8	74 36		 je	 SHORT $L187199

; 257  : 	{
; 258  : 		GetWindowRect(hWndTrayWnd, &rect);

  007ba	8b f4		 mov	 esi, esp
  007bc	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  007bf	50		 push	 eax
  007c0	8b 4d e4	 mov	 ecx, DWORD PTR _hWndTrayWnd$[ebp]
  007c3	51		 push	 ecx
  007c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  007ca	3b f4		 cmp	 esi, esp
  007cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 259  : 		return rect;

  007d1	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  007d4	8b 45 ec	 mov	 eax, DWORD PTR _rect$[ebp]
  007d7	89 02		 mov	 DWORD PTR [edx], eax
  007d9	8b 4d f0	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  007dc	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  007df	8b 45 f4	 mov	 eax, DWORD PTR _rect$[ebp+8]
  007e2	89 42 08	 mov	 DWORD PTR [edx+8], eax
  007e5	8b 4d f8	 mov	 ecx, DWORD PTR _rect$[ebp+12]
  007e8	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  007eb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  007ee	eb 63		 jmp	 SHORT $L187196
$L187199:

; 260  : 	}
; 261  : 
; 262  : 	int nWidth  = GetSystemMetrics(SM_CXSCREEN);

  007f0	8b f4		 mov	 esi, esp
  007f2	6a 00		 push	 0
  007f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  007fa	3b f4		 cmp	 esi, esp
  007fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00801	89 45 e0	 mov	 DWORD PTR _nWidth$[ebp], eax

; 263  :     int nHeight = GetSystemMetrics(SM_CYSCREEN);

  00804	8b f4		 mov	 esi, esp
  00806	6a 01		 push	 1
  00808	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0080e	3b f4		 cmp	 esi, esp
  00810	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00815	89 45 dc	 mov	 DWORD PTR _nHeight$[ebp], eax

; 264  :     rect.SetRect(nWidth-40, nHeight-20, nWidth, nHeight);

  00818	8b 55 dc	 mov	 edx, DWORD PTR _nHeight$[ebp]
  0081b	52		 push	 edx
  0081c	8b 45 e0	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0081f	50		 push	 eax
  00820	8b 4d dc	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00823	83 e9 14	 sub	 ecx, 20			; 00000014H
  00826	51		 push	 ecx
  00827	8b 55 e0	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0082a	83 ea 28	 sub	 edx, 40			; 00000028H
  0082d	52		 push	 edx
  0082e	8d 4d ec	 lea	 ecx, DWORD PTR _rect$[ebp]
  00831	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 265  : 
; 266  : 	return rect;

  00836	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00839	8b 4d ec	 mov	 ecx, DWORD PTR _rect$[ebp]
  0083c	89 08		 mov	 DWORD PTR [eax], ecx
  0083e	8b 55 f0	 mov	 edx, DWORD PTR _rect$[ebp+4]
  00841	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00844	8b 4d f4	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  00847	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0084a	8b 55 f8	 mov	 edx, DWORD PTR _rect$[ebp+12]
  0084d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00850	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L187196:

; 267  : }

  00853	52		 push	 edx
  00854	8b cd		 mov	 ecx, ebp
  00856	50		 push	 eax
  00857	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187767
  0085d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00862	58		 pop	 eax
  00863	5a		 pop	 edx
  00864	5e		 pop	 esi
  00865	83 c4 24	 add	 esp, 36			; 00000024H
  00868	3b ec		 cmp	 ebp, esp
  0086a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0086f	8b e5		 mov	 esp, ebp
  00871	5d		 pop	 ebp
  00872	c3		 ret	 0
$L187767:
  00873	01 00 00 00	 DD	 1
  00877	00 00 00 00	 DD	 $L187766
$L187766:
  0087b	ec ff ff ff	 DD	 -20			; ffffffecH
  0087f	10 00 00 00	 DD	 16			; 00000010H
  00883	00 00 00 00	 DD	 $L187765
$L187765:
  00887	72		 DB	 114			; 00000072H
  00888	65		 DB	 101			; 00000065H
  00889	63		 DB	 99			; 00000063H
  0088a	74		 DB	 116			; 00000074H
  0088b	00		 DB	 0
?GetTrayWndRect@CTrayIconPosition@@KA?AVCRect@@XZ ENDP	; CTrayIconPosition::GetTrayWndRect
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__VirtualAllocEx@20:NEAR
EXTRN	__imp__VirtualFreeEx@16:NEAR
EXTRN	__imp__OpenProcess@12:NEAR
EXTRN	??4CRect@@QAEXABUtagRECT@@@Z:NEAR		; CRect::operator=
EXTRN	__imp__ReadProcessMemory@20:NEAR
EXTRN	__imp__MapWindowPoints@16:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	__imp__GetWindowThreadProcessId@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T187770 = -144						; size = 16
_rcPosition$187239 = -124				; size = 16
_iIconId$187234 = -104					; size = 4
_hWndOfIconOwner$187232 = -100				; size = 4
_dwExtraData$187229 = -92				; size = 8
_buttonData$187224 = -76				; size = 20
_dwBytesRead$187223 = -48				; size = 4
_iButton$187219 = -40					; size = 4
_bIconFound$ = -36					; size = 4
_lpData$ = -32						; size = 4
_iButtonsCount$ = -28					; size = 4
_hTrayProc$ = -24					; size = 4
_dwTrayProcessID$ = -16					; size = 4
_hWndTray$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_a_hWndOwner$ = 8					; size = 4
_a_iButtonID$ = 12					; size = 4
_a_rcIcon$ = 16						; size = 4
?FindOutPositionOfIconDirectly@CTrayIconPosition@@KAHQAUHWND__@@HAAVCRect@@@Z PROC NEAR ; CTrayIconPosition::FindOutPositionOfIconDirectly

; 274  : {

  00890	55		 push	 ebp
  00891	8b ec		 mov	 ebp, esp
  00893	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00899	56		 push	 esi
  0089a	57		 push	 edi
  0089b	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  008a1	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  008a6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  008ab	f3 ab		 rep stosd
  008ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  008b2	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 275  : 	//first of all let's find a Tool bar control embed in Tray window
; 276  : 	HWND hWndTray = GetTrayNotifyWnd(TRUE);

  008b5	6a 01		 push	 1
  008b7	e8 00 00 00 00	 call	 ?GetTrayNotifyWnd@CTrayIconPosition@@KAPAUHWND__@@H@Z ; CTrayIconPosition::GetTrayNotifyWnd
  008bc	83 c4 04	 add	 esp, 4
  008bf	89 45 f8	 mov	 DWORD PTR _hWndTray$[ebp], eax

; 277  :     if (hWndTray == NULL)    

  008c2	83 7d f8 00	 cmp	 DWORD PTR _hWndTray$[ebp], 0
  008c6	75 07		 jne	 SHORT $L187208

; 278  : 	{
; 279  : 		return FALSE;

  008c8	33 c0		 xor	 eax, eax
  008ca	e9 8b 02 00 00	 jmp	 $L187206
$L187208:

; 280  : 	}
; 281  : 
; 282  : 	//now we have to get an ID of the parent process for system tray
; 283  : 	DWORD dwTrayProcessID = -1;

  008cf	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _dwTrayProcessID$[ebp], -1

; 284  : 	GetWindowThreadProcessId(hWndTray, &dwTrayProcessID);

  008d6	8b f4		 mov	 esi, esp
  008d8	8d 45 f0	 lea	 eax, DWORD PTR _dwTrayProcessID$[ebp]
  008db	50		 push	 eax
  008dc	8b 4d f8	 mov	 ecx, DWORD PTR _hWndTray$[ebp]
  008df	51		 push	 ecx
  008e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowThreadProcessId@8
  008e6	3b f4		 cmp	 esi, esp
  008e8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 285  : 	if(dwTrayProcessID <= 0)

  008ed	83 7d f0 00	 cmp	 DWORD PTR _dwTrayProcessID$[ebp], 0
  008f1	77 07		 ja	 SHORT $L187210

; 286  : 	{
; 287  : 		return FALSE;

  008f3	33 c0		 xor	 eax, eax
  008f5	e9 60 02 00 00	 jmp	 $L187206
$L187210:

; 288  : 	}
; 289  : 
; 290  : 	HANDLE hTrayProc = OpenProcess(PROCESS_ALL_ACCESS, 0, dwTrayProcessID);

  008fa	8b f4		 mov	 esi, esp
  008fc	8b 55 f0	 mov	 edx, DWORD PTR _dwTrayProcessID$[ebp]
  008ff	52		 push	 edx
  00900	6a 00		 push	 0
  00902	68 ff 0f 1f 00	 push	 2035711			; 001f0fffH
  00907	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenProcess@12
  0090d	3b f4		 cmp	 esi, esp
  0090f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00914	89 45 e8	 mov	 DWORD PTR _hTrayProc$[ebp], eax

; 291  : 	if(hTrayProc == NULL)

  00917	83 7d e8 00	 cmp	 DWORD PTR _hTrayProc$[ebp], 0
  0091b	75 07		 jne	 SHORT $L187212

; 292  : 	{
; 293  : 		return FALSE;

  0091d	33 c0		 xor	 eax, eax
  0091f	e9 36 02 00 00	 jmp	 $L187206
$L187212:

; 294  : 	}
; 295  :  
; 296  : 	//now we check how many buttons is there - should be more than 0
; 297  : 	int iButtonsCount = SendMessage(hWndTray, TB_BUTTONCOUNT, 0, 0);

  00924	8b f4		 mov	 esi, esp
  00926	6a 00		 push	 0
  00928	6a 00		 push	 0
  0092a	68 18 04 00 00	 push	 1048			; 00000418H
  0092f	8b 45 f8	 mov	 eax, DWORD PTR _hWndTray$[ebp]
  00932	50		 push	 eax
  00933	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00939	3b f4		 cmp	 esi, esp
  0093b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00940	89 45 e4	 mov	 DWORD PTR _iButtonsCount$[ebp], eax

; 298  : 
; 299  : 	//We want to get data from another process - it's not possible to just send messages like TB_GETBUTTON with a localy
; 300  : 	//allocated buffer for return data. Pointer to localy allocated data has no usefull meaning in a context of another
; 301  : 	//process (since Win95) - so we need to allocate some memory inside Tray process.
; 302  : 	//We allocate sizeof(TBBUTTON) bytes of memory - because TBBUTTON is the biggest structure we will fetch. But this buffer
; 303  : 	//will be also used to get smaller pieces of data like RECT structures.
; 304  : 	LPVOID lpData = VirtualAllocEx(hTrayProc, NULL, sizeof(TBBUTTON), MEM_COMMIT, PAGE_READWRITE);

  00943	8b f4		 mov	 esi, esp
  00945	6a 04		 push	 4
  00947	68 00 10 00 00	 push	 4096			; 00001000H
  0094c	6a 14		 push	 20			; 00000014H
  0094e	6a 00		 push	 0
  00950	8b 4d e8	 mov	 ecx, DWORD PTR _hTrayProc$[ebp]
  00953	51		 push	 ecx
  00954	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAllocEx@20
  0095a	3b f4		 cmp	 esi, esp
  0095c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00961	89 45 e0	 mov	 DWORD PTR _lpData$[ebp], eax

; 305  : 	if( lpData == NULL || iButtonsCount < 1 )

  00964	83 7d e0 00	 cmp	 DWORD PTR _lpData$[ebp], 0
  00968	74 06		 je	 SHORT $L187217
  0096a	83 7d e4 01	 cmp	 DWORD PTR _iButtonsCount$[ebp], 1
  0096e	7d 1a		 jge	 SHORT $L187216
$L187217:

; 306  : 	{
; 307  : 		CloseHandle(hTrayProc);

  00970	8b f4		 mov	 esi, esp
  00972	8b 55 e8	 mov	 edx, DWORD PTR _hTrayProc$[ebp]
  00975	52		 push	 edx
  00976	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0097c	3b f4		 cmp	 esi, esp
  0097e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 308  : 		return FALSE;

  00983	33 c0		 xor	 eax, eax
  00985	e9 d0 01 00 00	 jmp	 $L187206
$L187216:

; 309  : 	}
; 310  : 
; 311  : 	BOOL bIconFound = FALSE;

  0098a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bIconFound$[ebp], 0

; 312  : 
; 313  : 	for(int iButton=0; iButton<iButtonsCount; iButton++)

  00991	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _iButton$187219[ebp], 0
  00998	eb 09		 jmp	 SHORT $L187220
$L187221:
  0099a	8b 45 d8	 mov	 eax, DWORD PTR _iButton$187219[ebp]
  0099d	83 c0 01	 add	 eax, 1
  009a0	89 45 d8	 mov	 DWORD PTR _iButton$187219[ebp], eax
$L187220:
  009a3	8b 4d d8	 mov	 ecx, DWORD PTR _iButton$187219[ebp]
  009a6	3b 4d e4	 cmp	 ecx, DWORD PTR _iButtonsCount$[ebp]
  009a9	0f 8d 49 01 00
	00		 jge	 $L187222

; 314  : 	{
; 315  : 		//first let's read TBUTTON information about each button in a task bar of tray
; 316  : 
; 317  : 		DWORD dwBytesRead = -1;

  009af	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _dwBytesRead$187223[ebp], -1

; 318  : 		TBBUTTON buttonData;
; 319  : 		SendMessage(hWndTray, TB_GETBUTTON, iButton, (LPARAM)lpData);

  009b6	8b f4		 mov	 esi, esp
  009b8	8b 55 e0	 mov	 edx, DWORD PTR _lpData$[ebp]
  009bb	52		 push	 edx
  009bc	8b 45 d8	 mov	 eax, DWORD PTR _iButton$187219[ebp]
  009bf	50		 push	 eax
  009c0	68 17 04 00 00	 push	 1047			; 00000417H
  009c5	8b 4d f8	 mov	 ecx, DWORD PTR _hWndTray$[ebp]
  009c8	51		 push	 ecx
  009c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  009cf	3b f4		 cmp	 esi, esp
  009d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 320  : 		ReadProcessMemory(hTrayProc, lpData, &buttonData, sizeof(TBBUTTON), &dwBytesRead);

  009d6	8b f4		 mov	 esi, esp
  009d8	8d 55 d0	 lea	 edx, DWORD PTR _dwBytesRead$187223[ebp]
  009db	52		 push	 edx
  009dc	6a 14		 push	 20			; 00000014H
  009de	8d 45 b4	 lea	 eax, DWORD PTR _buttonData$187224[ebp]
  009e1	50		 push	 eax
  009e2	8b 4d e0	 mov	 ecx, DWORD PTR _lpData$[ebp]
  009e5	51		 push	 ecx
  009e6	8b 55 e8	 mov	 edx, DWORD PTR _hTrayProc$[ebp]
  009e9	52		 push	 edx
  009ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadProcessMemory@20
  009f0	3b f4		 cmp	 esi, esp
  009f2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 321  : 		if(dwBytesRead < sizeof(TBBUTTON))

  009f7	83 7d d0 14	 cmp	 DWORD PTR _dwBytesRead$187223[ebp], 20 ; 00000014H
  009fb	73 02		 jae	 SHORT $L187228

; 322  : 		{
; 323  : 			continue;

  009fd	eb 9b		 jmp	 SHORT $L187221
$L187228:

; 324  : 		}
; 325  : 
; 326  : 		//now let's read extra data associated with each button: there will be a HWND of the window that created an icon and icon ID
; 327  : 		DWORD dwExtraData[2] = { 0,0 };

  009ff	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _dwExtraData$187229[ebp], 0
  00a06	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _dwExtraData$187229[ebp+4], 0

; 328  : 		ReadProcessMemory(hTrayProc, (LPVOID)buttonData.dwData, dwExtraData, sizeof(dwExtraData), &dwBytesRead);

  00a0d	8b f4		 mov	 esi, esp
  00a0f	8d 45 d0	 lea	 eax, DWORD PTR _dwBytesRead$187223[ebp]
  00a12	50		 push	 eax
  00a13	6a 08		 push	 8
  00a15	8d 4d a4	 lea	 ecx, DWORD PTR _dwExtraData$187229[ebp]
  00a18	51		 push	 ecx
  00a19	8b 55 c0	 mov	 edx, DWORD PTR _buttonData$187224[ebp+12]
  00a1c	52		 push	 edx
  00a1d	8b 45 e8	 mov	 eax, DWORD PTR _hTrayProc$[ebp]
  00a20	50		 push	 eax
  00a21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadProcessMemory@20
  00a27	3b f4		 cmp	 esi, esp
  00a29	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 329  : 		if(dwBytesRead < sizeof(dwExtraData))

  00a2e	83 7d d0 08	 cmp	 DWORD PTR _dwBytesRead$187223[ebp], 8
  00a32	73 05		 jae	 SHORT $L187231

; 330  : 		{
; 331  : 			continue;

  00a34	e9 61 ff ff ff	 jmp	 $L187221
$L187231:

; 332  : 		}
; 333  : 
; 334  : 		HWND hWndOfIconOwner = (HWND) dwExtraData[0];

  00a39	8b 4d a4	 mov	 ecx, DWORD PTR _dwExtraData$187229[ebp]
  00a3c	89 4d 9c	 mov	 DWORD PTR _hWndOfIconOwner$187232[ebp], ecx

; 335  : 		int  iIconId		 = (int)  dwExtraData[1];

  00a3f	8b 55 a8	 mov	 edx, DWORD PTR _dwExtraData$187229[ebp+4]
  00a42	89 55 98	 mov	 DWORD PTR _iIconId$187234[ebp], edx

; 336  : 		
; 337  : 		if(hWndOfIconOwner != a_hWndOwner || iIconId != a_iButtonID)

  00a45	8b 45 9c	 mov	 eax, DWORD PTR _hWndOfIconOwner$187232[ebp]
  00a48	3b 45 08	 cmp	 eax, DWORD PTR _a_hWndOwner$[ebp]
  00a4b	75 08		 jne	 SHORT $L187237
  00a4d	8b 4d 98	 mov	 ecx, DWORD PTR _iIconId$187234[ebp]
  00a50	3b 4d 0c	 cmp	 ecx, DWORD PTR _a_iButtonID$[ebp]
  00a53	74 05		 je	 SHORT $L187236
$L187237:

; 338  : 		{
; 339  : 			continue;

  00a55	e9 40 ff ff ff	 jmp	 $L187221
$L187236:

; 340  : 		}
; 341  : 		
; 342  : 		//we found our icon - in WinXP it could be hidden - let's check it:
; 343  : 		if( buttonData.fsState & TBSTATE_HIDDEN )

  00a5a	0f b6 55 bc	 movzx	 edx, BYTE PTR _buttonData$187224[ebp+8]
  00a5e	83 e2 08	 and	 edx, 8
  00a61	74 05		 je	 SHORT $L187238

; 344  : 		{
; 345  : 			break;

  00a63	e9 90 00 00 00	 jmp	 $L187222
$L187238:

; 346  : 		}
; 347  : 
; 348  : 		//now just ask a tool bar of rectangle of our icon
; 349  : 		RECT rcPosition = {0,0};

  00a68	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _rcPosition$187239[ebp], 0
  00a6f	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _rcPosition$187239[ebp+4], 0
  00a76	33 c0		 xor	 eax, eax
  00a78	89 45 8c	 mov	 DWORD PTR _rcPosition$187239[ebp+8], eax
  00a7b	89 45 90	 mov	 DWORD PTR _rcPosition$187239[ebp+12], eax

; 350  : 		SendMessage(hWndTray, TB_GETITEMRECT, iButton, (LPARAM)lpData);

  00a7e	8b f4		 mov	 esi, esp
  00a80	8b 4d e0	 mov	 ecx, DWORD PTR _lpData$[ebp]
  00a83	51		 push	 ecx
  00a84	8b 55 d8	 mov	 edx, DWORD PTR _iButton$187219[ebp]
  00a87	52		 push	 edx
  00a88	68 1d 04 00 00	 push	 1053			; 0000041dH
  00a8d	8b 45 f8	 mov	 eax, DWORD PTR _hWndTray$[ebp]
  00a90	50		 push	 eax
  00a91	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a97	3b f4		 cmp	 esi, esp
  00a99	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 351  : 		ReadProcessMemory(hTrayProc, lpData, &rcPosition, sizeof(RECT), &dwBytesRead);

  00a9e	8b f4		 mov	 esi, esp
  00aa0	8d 4d d0	 lea	 ecx, DWORD PTR _dwBytesRead$187223[ebp]
  00aa3	51		 push	 ecx
  00aa4	6a 10		 push	 16			; 00000010H
  00aa6	8d 55 84	 lea	 edx, DWORD PTR _rcPosition$187239[ebp]
  00aa9	52		 push	 edx
  00aaa	8b 45 e0	 mov	 eax, DWORD PTR _lpData$[ebp]
  00aad	50		 push	 eax
  00aae	8b 4d e8	 mov	 ecx, DWORD PTR _hTrayProc$[ebp]
  00ab1	51		 push	 ecx
  00ab2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadProcessMemory@20
  00ab8	3b f4		 cmp	 esi, esp
  00aba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : 
; 353  : 		if(dwBytesRead < sizeof(RECT))

  00abf	83 7d d0 10	 cmp	 DWORD PTR _dwBytesRead$187223[ebp], 16 ; 00000010H
  00ac3	73 05		 jae	 SHORT $L187243

; 354  : 		{
; 355  : 			continue;

  00ac5	e9 d0 fe ff ff	 jmp	 $L187221
$L187243:

; 356  : 		}
; 357  : 
; 358  : 		MapWindowPoints(hWndTray, NULL, (LPPOINT)&rcPosition, 2);

  00aca	8b f4		 mov	 esi, esp
  00acc	6a 02		 push	 2
  00ace	8d 55 84	 lea	 edx, DWORD PTR _rcPosition$187239[ebp]
  00ad1	52		 push	 edx
  00ad2	6a 00		 push	 0
  00ad4	8b 45 f8	 mov	 eax, DWORD PTR _hWndTray$[ebp]
  00ad7	50		 push	 eax
  00ad8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapWindowPoints@16
  00ade	3b f4		 cmp	 esi, esp
  00ae0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 359  : 		a_rcIcon = rcPosition;

  00ae5	8d 4d 84	 lea	 ecx, DWORD PTR _rcPosition$187239[ebp]
  00ae8	51		 push	 ecx
  00ae9	8b 4d 10	 mov	 ecx, DWORD PTR _a_rcIcon$[ebp]
  00aec	e8 00 00 00 00	 call	 ??4CRect@@QAEXABUtagRECT@@@Z ; CRect::operator=

; 360  : 		
; 361  : 		bIconFound = TRUE;

  00af1	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bIconFound$[ebp], 1
$L187222:

; 362  : 		break;
; 363  : 	}
; 364  : 
; 365  : 	if(bIconFound == FALSE)

  00af8	83 7d dc 00	 cmp	 DWORD PTR _bIconFound$[ebp], 0
  00afc	75 28		 jne	 SHORT $L187245

; 366  : 	{
; 367  : 		a_rcIcon = GetTrayWndRect(); //we failed to detect position of icon - let's return fail safe cooridinates of system tray

  00afe	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T187770[ebp]
  00b04	52		 push	 edx
  00b05	e8 00 00 00 00	 call	 ?GetTrayWndRect@CTrayIconPosition@@KA?AVCRect@@XZ ; CTrayIconPosition::GetTrayWndRect
  00b0a	83 c4 04	 add	 esp, 4
  00b0d	8b 4d 10	 mov	 ecx, DWORD PTR _a_rcIcon$[ebp]
  00b10	8b 10		 mov	 edx, DWORD PTR [eax]
  00b12	89 11		 mov	 DWORD PTR [ecx], edx
  00b14	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00b17	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00b1a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00b1d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00b20	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00b23	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L187245:

; 368  : 	}
; 369  : 
; 370  : 	VirtualFreeEx(hTrayProc, lpData, NULL, MEM_RELEASE);

  00b26	8b f4		 mov	 esi, esp
  00b28	68 00 80 00 00	 push	 32768			; 00008000H
  00b2d	6a 00		 push	 0
  00b2f	8b 4d e0	 mov	 ecx, DWORD PTR _lpData$[ebp]
  00b32	51		 push	 ecx
  00b33	8b 55 e8	 mov	 edx, DWORD PTR _hTrayProc$[ebp]
  00b36	52		 push	 edx
  00b37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFreeEx@16
  00b3d	3b f4		 cmp	 esi, esp
  00b3f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 371  : 	CloseHandle(hTrayProc);

  00b44	8b f4		 mov	 esi, esp
  00b46	8b 45 e8	 mov	 eax, DWORD PTR _hTrayProc$[ebp]
  00b49	50		 push	 eax
  00b4a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00b50	3b f4		 cmp	 esi, esp
  00b52	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 372  : 
; 373  : 	return bIconFound;	

  00b57	8b 45 dc	 mov	 eax, DWORD PTR _bIconFound$[ebp]
$L187206:

; 374  : }

  00b5a	52		 push	 edx
  00b5b	8b cd		 mov	 ecx, ebp
  00b5d	50		 push	 eax
  00b5e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187778
  00b64	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b69	58		 pop	 eax
  00b6a	5a		 pop	 edx
  00b6b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b6e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b73	5f		 pop	 edi
  00b74	5e		 pop	 esi
  00b75	81 c4 90 00 00
	00		 add	 esp, 144		; 00000090H
  00b7b	3b ec		 cmp	 ebp, esp
  00b7d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b82	8b e5		 mov	 esp, ebp
  00b84	5d		 pop	 ebp
  00b85	c3		 ret	 0
$L187778:
  00b86	05 00 00 00	 DD	 5
  00b8a	00 00 00 00	 DD	 $L187777
$L187777:
  00b8e	f0 ff ff ff	 DD	 -16			; fffffff0H
  00b92	04 00 00 00	 DD	 4
  00b96	00 00 00 00	 DD	 $L187771
  00b9a	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00b9e	04 00 00 00	 DD	 4
  00ba2	00 00 00 00	 DD	 $L187772
  00ba6	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00baa	14 00 00 00	 DD	 20			; 00000014H
  00bae	00 00 00 00	 DD	 $L187773
  00bb2	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00bb6	08 00 00 00	 DD	 8
  00bba	00 00 00 00	 DD	 $L187774
  00bbe	84 ff ff ff	 DD	 -124			; ffffff84H
  00bc2	10 00 00 00	 DD	 16			; 00000010H
  00bc6	00 00 00 00	 DD	 $L187775
$L187775:
  00bca	72		 DB	 114			; 00000072H
  00bcb	63		 DB	 99			; 00000063H
  00bcc	50		 DB	 80			; 00000050H
  00bcd	6f		 DB	 111			; 0000006fH
  00bce	73		 DB	 115			; 00000073H
  00bcf	69		 DB	 105			; 00000069H
  00bd0	74		 DB	 116			; 00000074H
  00bd1	69		 DB	 105			; 00000069H
  00bd2	6f		 DB	 111			; 0000006fH
  00bd3	6e		 DB	 110			; 0000006eH
  00bd4	00		 DB	 0
$L187774:
  00bd5	64		 DB	 100			; 00000064H
  00bd6	77		 DB	 119			; 00000077H
  00bd7	45		 DB	 69			; 00000045H
  00bd8	78		 DB	 120			; 00000078H
  00bd9	74		 DB	 116			; 00000074H
  00bda	72		 DB	 114			; 00000072H
  00bdb	61		 DB	 97			; 00000061H
  00bdc	44		 DB	 68			; 00000044H
  00bdd	61		 DB	 97			; 00000061H
  00bde	74		 DB	 116			; 00000074H
  00bdf	61		 DB	 97			; 00000061H
  00be0	00		 DB	 0
$L187773:
  00be1	62		 DB	 98			; 00000062H
  00be2	75		 DB	 117			; 00000075H
  00be3	74		 DB	 116			; 00000074H
  00be4	74		 DB	 116			; 00000074H
  00be5	6f		 DB	 111			; 0000006fH
  00be6	6e		 DB	 110			; 0000006eH
  00be7	44		 DB	 68			; 00000044H
  00be8	61		 DB	 97			; 00000061H
  00be9	74		 DB	 116			; 00000074H
  00bea	61		 DB	 97			; 00000061H
  00beb	00		 DB	 0
$L187772:
  00bec	64		 DB	 100			; 00000064H
  00bed	77		 DB	 119			; 00000077H
  00bee	42		 DB	 66			; 00000042H
  00bef	79		 DB	 121			; 00000079H
  00bf0	74		 DB	 116			; 00000074H
  00bf1	65		 DB	 101			; 00000065H
  00bf2	73		 DB	 115			; 00000073H
  00bf3	52		 DB	 82			; 00000052H
  00bf4	65		 DB	 101			; 00000065H
  00bf5	61		 DB	 97			; 00000061H
  00bf6	64		 DB	 100			; 00000064H
  00bf7	00		 DB	 0
$L187771:
  00bf8	64		 DB	 100			; 00000064H
  00bf9	77		 DB	 119			; 00000077H
  00bfa	54		 DB	 84			; 00000054H
  00bfb	72		 DB	 114			; 00000072H
  00bfc	61		 DB	 97			; 00000061H
  00bfd	79		 DB	 121			; 00000079H
  00bfe	50		 DB	 80			; 00000050H
  00bff	72		 DB	 114			; 00000072H
  00c00	6f		 DB	 111			; 0000006fH
  00c01	63		 DB	 99			; 00000063H
  00c02	65		 DB	 101			; 00000065H
  00c03	73		 DB	 115			; 00000073H
  00c04	73		 DB	 115			; 00000073H
  00c05	49		 DB	 73			; 00000049H
  00c06	44		 DB	 68			; 00000044H
  00c07	00		 DB	 0
?FindOutPositionOfIconDirectly@CTrayIconPosition@@KAHQAUHWND__@@HAAVCRect@@@Z ENDP ; CTrayIconPosition::FindOutPositionOfIconDirectly
_TEXT	ENDS
EXTRN	__imp___mbscmp:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcscmp PROC NEAR					; COMDAT

; 854  : __inline int _tcscmp(_CPC _s1,_CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbscmp
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcscmp ENDP
_TEXT	ENDS
PUBLIC	?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z ; CTrayIconPosition::CheckIfColorIsBlackOrNearBlack
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__ReleaseDC@8:NEAR
EXTRN	__imp__Shell_NotifyIconA@8:NEAR
EXTRN	__imp__GetPixel@12:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\trayiconposition.cpp
_TEXT	SEGMENT
_crPixel3$187270 = -536					; size = 4
_crPixel2$187269 = -532					; size = 4
_crPixel$187268 = -528					; size = 4
_ix$187264 = -524					; size = 4
_iNoOfPixelsInLine$187263 = -520			; size = 4
_iy$187259 = -516					; size = 4
_hdcScreen$ = -512					; size = 4
_bWeFoundIt$ = -508					; size = 4
_nid$ = -500						; size = 488
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_icon$ = 8						; size = 4
?FindOutPositionOfIcon@CTrayIconPosition@@IAEHPAUHICON__@@@Z PROC NEAR ; CTrayIconPosition::FindOutPositionOfIcon
; _this$ = ecx

; 387  : {

  00c10	55		 push	 ebp
  00c11	8b ec		 mov	 ebp, esp
  00c13	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  00c19	56		 push	 esi
  00c1a	57		 push	 edi
  00c1b	51		 push	 ecx
  00c1c	8d bd e8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-536]
  00c22	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  00c27	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00c2c	f3 ab		 rep stosd
  00c2e	59		 pop	 ecx
  00c2f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00c34	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00c37	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 388  : 	//First: let's set a BLANK icon in the tray.
; 389  : 	NOTIFYICONDATA nid; 
; 390  : 	nid.cbSize = sizeof(nid); 

  00c3a	c7 85 0c fe ff
	ff e8 01 00 00	 mov	 DWORD PTR _nid$[ebp], 488 ; 000001e8H

; 391  : 	nid.hWnd = m_hWndOfIconOwner; 

  00c44	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c47	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00c4a	89 8d 10 fe ff
	ff		 mov	 DWORD PTR _nid$[ebp+4], ecx

; 392  : 	nid.uID = m_iTrayIconID; 

  00c50	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c53	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00c56	89 85 14 fe ff
	ff		 mov	 DWORD PTR _nid$[ebp+8], eax

; 393  : 	nid.uFlags = NIF_ICON; 

  00c5c	c7 85 18 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _nid$[ebp+12], 2

; 394  : 	nid.hIcon = icon;

  00c66	8b 4d 08	 mov	 ecx, DWORD PTR _icon$[ebp]
  00c69	89 8d 20 fe ff
	ff		 mov	 DWORD PTR _nid$[ebp+20], ecx

; 395  : 	Shell_NotifyIcon(NIM_MODIFY, &nid);

  00c6f	8b f4		 mov	 esi, esp
  00c71	8d 95 0c fe ff
	ff		 lea	 edx, DWORD PTR _nid$[ebp]
  00c77	52		 push	 edx
  00c78	6a 01		 push	 1
  00c7a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Shell_NotifyIconA@8
  00c80	3b f4		 cmp	 esi, esp
  00c82	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 396  : 	BOOL bWeFoundIt = FALSE;

  00c87	c7 85 04 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bWeFoundIt$[ebp], 0

; 397  : 	
; 398  : 	HDC hdcScreen = GetDC(NULL);

  00c91	8b f4		 mov	 esi, esp
  00c93	6a 00		 push	 0
  00c95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00c9b	3b f4		 cmp	 esi, esp
  00c9d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ca2	89 85 00 fe ff
	ff		 mov	 DWORD PTR _hdcScreen$[ebp], eax

; 399  : 	
; 400  : 	//since tray window can be strethed verticaly let's scan this area in few steps starting from the bottom to the top.
; 401  : 	for(int iy = m_rtRectangleOfTheTray.bottom-3; iy > m_rtRectangleOfTheTray.top; iy--)

  00ca8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cab	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00cae	83 e9 03	 sub	 ecx, 3
  00cb1	89 8d fc fd ff
	ff		 mov	 DWORD PTR _iy$187259[ebp], ecx
  00cb7	eb 0f		 jmp	 SHORT $L187260
$L187261:
  00cb9	8b 95 fc fd ff
	ff		 mov	 edx, DWORD PTR _iy$187259[ebp]
  00cbf	83 ea 01	 sub	 edx, 1
  00cc2	89 95 fc fd ff
	ff		 mov	 DWORD PTR _iy$187259[ebp], edx
$L187260:
  00cc8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ccb	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _iy$187259[ebp]
  00cd1	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00cd4	0f 8e 59 01 00
	00		 jle	 $L187262

; 402  : 	{
; 403  : 		int iNoOfPixelsInLine=0;

  00cda	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _iNoOfPixelsInLine$187263[ebp], 0

; 404  : 		for(int ix=m_rtRectangleOfTheTray.left;ix<m_rtRectangleOfTheTray.right;ix++)

  00ce4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ce7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00cea	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _ix$187264[ebp], eax
  00cf0	eb 0f		 jmp	 SHORT $L187265
$L187266:
  00cf2	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _ix$187264[ebp]
  00cf8	83 c1 01	 add	 ecx, 1
  00cfb	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _ix$187264[ebp], ecx
$L187265:
  00d01	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d04	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _ix$187264[ebp]
  00d0a	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00d0d	0f 8d 10 01 00
	00		 jge	 $L187267

; 405  : 		{
; 406  : 			COLORREF crPixel = GetPixel(hdcScreen, ix, iy);

  00d13	8b f4		 mov	 esi, esp
  00d15	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _iy$187259[ebp]
  00d1b	51		 push	 ecx
  00d1c	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _ix$187264[ebp]
  00d22	52		 push	 edx
  00d23	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _hdcScreen$[ebp]
  00d29	50		 push	 eax
  00d2a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPixel@12
  00d30	3b f4		 cmp	 esi, esp
  00d32	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d37	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _crPixel$187268[ebp], eax

; 407  : 			COLORREF crPixel2 = GetPixel(hdcScreen, ix, iy-2);

  00d3d	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _iy$187259[ebp]
  00d43	83 e9 02	 sub	 ecx, 2
  00d46	8b f4		 mov	 esi, esp
  00d48	51		 push	 ecx
  00d49	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _ix$187264[ebp]
  00d4f	52		 push	 edx
  00d50	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _hdcScreen$[ebp]
  00d56	50		 push	 eax
  00d57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPixel@12
  00d5d	3b f4		 cmp	 esi, esp
  00d5f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d64	89 85 ec fd ff
	ff		 mov	 DWORD PTR _crPixel2$187269[ebp], eax

; 408  : 			COLORREF crPixel3 = GetPixel(hdcScreen, ix, iy+2);

  00d6a	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _iy$187259[ebp]
  00d70	83 c1 02	 add	 ecx, 2
  00d73	8b f4		 mov	 esi, esp
  00d75	51		 push	 ecx
  00d76	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _ix$187264[ebp]
  00d7c	52		 push	 edx
  00d7d	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _hdcScreen$[ebp]
  00d83	50		 push	 eax
  00d84	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPixel@12
  00d8a	3b f4		 cmp	 esi, esp
  00d8c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d91	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _crPixel3$187270[ebp], eax

; 409  : 			if(CheckIfColorIsBlackOrNearBlack(crPixel)  && CheckIfColorIsBlackOrNearBlack(crPixel2)  && CheckIfColorIsBlackOrNearBlack(crPixel3))

  00d97	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _crPixel$187268[ebp]
  00d9d	51		 push	 ecx
  00d9e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00da1	e8 00 00 00 00	 call	 ?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z ; CTrayIconPosition::CheckIfColorIsBlackOrNearBlack
  00da6	85 c0		 test	 eax, eax
  00da8	74 37		 je	 SHORT $L187271
  00daa	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _crPixel2$187269[ebp]
  00db0	52		 push	 edx
  00db1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00db4	e8 00 00 00 00	 call	 ?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z ; CTrayIconPosition::CheckIfColorIsBlackOrNearBlack
  00db9	85 c0		 test	 eax, eax
  00dbb	74 24		 je	 SHORT $L187271
  00dbd	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _crPixel3$187270[ebp]
  00dc3	50		 push	 eax
  00dc4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dc7	e8 00 00 00 00	 call	 ?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z ; CTrayIconPosition::CheckIfColorIsBlackOrNearBlack
  00dcc	85 c0		 test	 eax, eax
  00dce	74 11		 je	 SHORT $L187271

; 410  : 			{
; 411  : 				iNoOfPixelsInLine++;

  00dd0	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _iNoOfPixelsInLine$187263[ebp]
  00dd6	83 c1 01	 add	 ecx, 1
  00dd9	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _iNoOfPixelsInLine$187263[ebp], ecx

; 412  : 			}
; 413  : 			else

  00ddf	eb 0a		 jmp	 SHORT $L187272
$L187271:

; 414  : 			{
; 415  : 				iNoOfPixelsInLine = 0;

  00de1	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _iNoOfPixelsInLine$187263[ebp], 0
$L187272:

; 416  : 			}
; 417  : 			
; 418  : 			if(iNoOfPixelsInLine > 8)

  00deb	83 bd f8 fd ff
	ff 08		 cmp	 DWORD PTR _iNoOfPixelsInLine$187263[ebp], 8
  00df2	7e 2a		 jle	 SHORT $L187273

; 419  : 			{
; 420  : 				//well I think we found it!
; 421  : 				m_ptPosition.x = ix-1;

  00df4	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _ix$187264[ebp]
  00dfa	83 ea 01	 sub	 edx, 1
  00dfd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e00	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 422  : 				m_ptPosition.y = iy-6;

  00e03	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _iy$187259[ebp]
  00e09	83 e9 06	 sub	 ecx, 6
  00e0c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e0f	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 423  : 				bWeFoundIt = TRUE;

  00e12	c7 85 04 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _bWeFoundIt$[ebp], 1

; 424  : 				break;

  00e1c	eb 05		 jmp	 SHORT $L187267
$L187273:

; 425  : 			}
; 426  : 		}

  00e1e	e9 cf fe ff ff	 jmp	 $L187266
$L187267:

; 427  : 		
; 428  : 		if(bWeFoundIt)

  00e23	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _bWeFoundIt$[ebp], 0
  00e2a	74 02		 je	 SHORT $L187274

; 429  : 		{
; 430  : 			break;

  00e2c	eb 05		 jmp	 SHORT $L187262
$L187274:

; 431  : 		}
; 432  : 	}

  00e2e	e9 86 fe ff ff	 jmp	 $L187261
$L187262:

; 433  : 
; 434  : 	ReleaseDC(NULL, hdcScreen);

  00e33	8b f4		 mov	 esi, esp
  00e35	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _hdcScreen$[ebp]
  00e3b	50		 push	 eax
  00e3c	6a 00		 push	 0
  00e3e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  00e44	3b f4		 cmp	 esi, esp
  00e46	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 435  : 	return bWeFoundIt;

  00e4b	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _bWeFoundIt$[ebp]

; 436  : }

  00e51	52		 push	 edx
  00e52	8b cd		 mov	 ecx, ebp
  00e54	50		 push	 eax
  00e55	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187785
  00e5b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00e60	58		 pop	 eax
  00e61	5a		 pop	 edx
  00e62	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e65	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e6a	5f		 pop	 edi
  00e6b	5e		 pop	 esi
  00e6c	81 c4 18 02 00
	00		 add	 esp, 536		; 00000218H
  00e72	3b ec		 cmp	 ebp, esp
  00e74	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e79	8b e5		 mov	 esp, ebp
  00e7b	5d		 pop	 ebp
  00e7c	c2 04 00	 ret	 4
$L187785:
  00e7f	01 00 00 00	 DD	 1
  00e83	00 00 00 00	 DD	 $L187784
$L187784:
  00e87	0c fe ff ff	 DD	 -500			; fffffe0cH
  00e8b	e8 01 00 00	 DD	 488			; 000001e8H
  00e8f	00 00 00 00	 DD	 $L187782
$L187782:
  00e93	6e		 DB	 110			; 0000006eH
  00e94	69		 DB	 105			; 00000069H
  00e95	64		 DB	 100			; 00000064H
  00e96	00		 DB	 0
?FindOutPositionOfIcon@CTrayIconPosition@@IAEHPAUHICON__@@@Z ENDP ; CTrayIconPosition::FindOutPositionOfIcon
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crColor$ = 8						; size = 4
?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z PROC NEAR ; CTrayIconPosition::CheckIfColorIsBlackOrNearBlack, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	//code improved by Harald according to
; 381  : 	//http://www.codeproject.com/shell/ctrayiconposition.asp?forumid=14631&select=786426&df=100#xx786426xx
; 382  : 
; 383  : 	return !(((DWORD)crColor)&0xFCFCFC);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _crColor$[ebp]
  00011	25 fc fc fc 00	 and	 eax, 16579836		; 00fcfcfcH
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 384  : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?CheckIfColorIsBlackOrNearBlack@CTrayIconPosition@@IAEHK@Z ENDP ; CTrayIconPosition::CheckIfColorIsBlackOrNearBlack
_TEXT	ENDS
PUBLIC	?RestoreTrayIcon@CTrayIconPosition@@QAEXPAUHICON__@@@Z ; CTrayIconPosition::RestoreTrayIcon
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_nid$ = -500						; size = 488
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_icon$ = 8						; size = 4
?RestoreTrayIcon@CTrayIconPosition@@QAEXPAUHICON__@@@Z PROC NEAR ; CTrayIconPosition::RestoreTrayIcon
; _this$ = ecx

; 439  : {

  00ea0	55		 push	 ebp
  00ea1	8b ec		 mov	 ebp, esp
  00ea3	81 ec f8 01 00
	00		 sub	 esp, 504		; 000001f8H
  00ea9	56		 push	 esi
  00eaa	57		 push	 edi
  00eab	51		 push	 ecx
  00eac	8d bd 08 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-504]
  00eb2	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00eb7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00ebc	f3 ab		 rep stosd
  00ebe	59		 pop	 ecx
  00ebf	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00ec4	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00ec7	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 440  : 	  NOTIFYICONDATA nid; 
; 441  : 	  nid.cbSize = sizeof(nid); 

  00eca	c7 85 0c fe ff
	ff e8 01 00 00	 mov	 DWORD PTR _nid$[ebp], 488 ; 000001e8H

; 442  : 	  nid.hWnd = m_hWndOfIconOwner; 

  00ed4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ed7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00eda	89 8d 10 fe ff
	ff		 mov	 DWORD PTR _nid$[ebp+4], ecx

; 443  : 	  nid.uID = m_iTrayIconID; 

  00ee0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ee3	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00ee6	89 85 14 fe ff
	ff		 mov	 DWORD PTR _nid$[ebp+8], eax

; 444  : 	  nid.uFlags = NIF_ICON; 

  00eec	c7 85 18 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _nid$[ebp+12], 2

; 445  : 	  nid.hIcon = icon;

  00ef6	8b 4d 08	 mov	 ecx, DWORD PTR _icon$[ebp]
  00ef9	89 8d 20 fe ff
	ff		 mov	 DWORD PTR _nid$[ebp+20], ecx

; 446  : 	  Shell_NotifyIcon(NIM_MODIFY, &nid);	

  00eff	8b f4		 mov	 esi, esp
  00f01	8d 95 0c fe ff
	ff		 lea	 edx, DWORD PTR _nid$[ebp]
  00f07	52		 push	 edx
  00f08	6a 01		 push	 1
  00f0a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Shell_NotifyIconA@8
  00f10	3b f4		 cmp	 esi, esp
  00f12	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 447  : }

  00f17	52		 push	 edx
  00f18	8b cd		 mov	 ecx, ebp
  00f1a	50		 push	 eax
  00f1b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187792
  00f21	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00f26	58		 pop	 eax
  00f27	5a		 pop	 edx
  00f28	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f2b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f30	5f		 pop	 edi
  00f31	5e		 pop	 esi
  00f32	81 c4 f8 01 00
	00		 add	 esp, 504		; 000001f8H
  00f38	3b ec		 cmp	 ebp, esp
  00f3a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f3f	8b e5		 mov	 esp, ebp
  00f41	5d		 pop	 ebp
  00f42	c2 04 00	 ret	 4
$L187792:
  00f45	01 00 00 00	 DD	 1
  00f49	00 00 00 00	 DD	 $L187791
$L187791:
  00f4d	0c fe ff ff	 DD	 -500			; fffffe0cH
  00f51	e8 01 00 00	 DD	 488			; 000001e8H
  00f55	00 00 00 00	 DD	 $L187789
$L187789:
  00f59	6e		 DB	 110			; 0000006eH
  00f5a	69		 DB	 105			; 00000069H
  00f5b	64		 DB	 100			; 00000064H
  00f5c	00		 DB	 0
?RestoreTrayIcon@CTrayIconPosition@@QAEXPAUHICON__@@@Z ENDP ; CTrayIconPosition::RestoreTrayIcon
_TEXT	ENDS
PUBLIC	?Invalidate@CTrayIconPosition@@QAEXXZ		; CTrayIconPosition::Invalidate
EXTRN	??0CTime@ATL@@QAE@HHHHHHH@Z:NEAR		; ATL::CTime::CTime
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T187794 = -12						; size = 8
_this$ = -4						; size = 4
?Invalidate@CTrayIconPosition@@QAEXXZ PROC NEAR		; CTrayIconPosition::Invalidate
; _this$ = ecx

; 450  : {

  00f60	55		 push	 ebp
  00f61	8b ec		 mov	 ebp, esp
  00f63	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00f66	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  00f6d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00f74	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00f7b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 451  : 	m_tLastUpdate = CTime(2000,1,1,1,1,1);

  00f7e	6a ff		 push	 -1
  00f80	6a 01		 push	 1
  00f82	6a 01		 push	 1
  00f84	6a 01		 push	 1
  00f86	6a 01		 push	 1
  00f88	6a 01		 push	 1
  00f8a	68 d0 07 00 00	 push	 2000			; 000007d0H
  00f8f	8d 4d f4	 lea	 ecx, DWORD PTR $T187794[ebp]
  00f92	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime
  00f97	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f99	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00f9c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f9f	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00fa2	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 452  : }

  00fa5	83 c4 0c	 add	 esp, 12			; 0000000cH
  00fa8	3b ec		 cmp	 ebp, esp
  00faa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00faf	8b e5		 mov	 esp, ebp
  00fb1	5d		 pop	 ebp
  00fb2	c3		 ret	 0
?Invalidate@CTrayIconPosition@@QAEXXZ ENDP		; CTrayIconPosition::Invalidate
_TEXT	ENDS
END
