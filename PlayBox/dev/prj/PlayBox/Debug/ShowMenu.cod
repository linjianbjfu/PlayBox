; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\ShowMenu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?SetMenuDrawMode@BCMenu@@SAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@HAAH@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@HAAH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG187792 DB	'MenuText', 00H
	ORG $+3
$SG187793 DB	'MenuBk', 00H
	ORG $+1
$SG187794 DB	'MenuLeftBk', 00H
	ORG $+1
$SG187795 DB	'MenuSelBk', 00H
	ORG $+2
$SG187841 DB	'-', 00H
	ORG $+2
$SG187860 DB	'&', 00H
	ORG $+2
$SG187882 DB	'&', 00H
	ORG $+2
$SG188049 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188063 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188079 DB	'with ', 00H
	ORG $+2
$SG188080 DB	' elements', 00H
	ORG $+2
$SG188082 DB	0aH, 00H
	ORG $+2
$SG188089 DB	0aH, 00H
	ORG $+6
$SG188097 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188099 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188102 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188104 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188106 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188109 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188132 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188134 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188149 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188156 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188192 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188196 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188206 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188223 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188248 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
CONST	ENDS
PUBLIC	??0CShowMenu@@QAE@PAVCWnd@@KK@Z			; CShowMenu::CShowMenu
PUBLIC	?SetMenuDrawMode@BCMenu@@SAXI@Z			; BCMenu::SetMenuDrawMode
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	__except_list:DWORD
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0BCMenu@@QAE@XZ:NEAR				; BCMenu::BCMenu
EXTRN	??1BCMenu@@UAE@XZ:NEAR				; BCMenu::~BCMenu
EXTRN	?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z:NEAR	; BCMenu::GetSubMenu
EXTRN	?SetMenuItemBkColor@BCMenu@@QAEXK@Z:NEAR	; BCMenu::SetMenuItemBkColor
EXTRN	?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z:NEAR	; BCMenu::SetMenuItemBitmapBkColor
EXTRN	?SetTextColor@BCMenu@@QAEXK@Z:NEAR		; BCMenu::SetTextColor
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\showmenu.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
xdata$x	SEGMENT
$T188606 DD	0ffffffffH
	DD	FLAT:$L188598
$T188602 DD	019930520H
	DD	01H
	DD	FLAT:$T188606
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv69 = -24						; size = 4
_pSkinMgr$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pParent$ = 8						; size = 4
_dwMenuID$ = 12						; size = 4
_dwSubItem$ = 16					; size = 4
??0CShowMenu@@QAE@PAVCWnd@@KK@Z PROC NEAR		; CShowMenu::CShowMenu
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CShowMenu@@QAE@PAVCWnd@@KK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	56		 push	 esi
  0001c	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00023	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0002a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00031	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 6    : 
; 7    : 	ISkinMgr* pSkinMgr = AfxGetUIManager()->UIGetSkinMgr();

  00043	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  00048	89 45 e8	 mov	 DWORD PTR tv69[ebp], eax
  0004b	8b 45 e8	 mov	 eax, DWORD PTR tv69[ebp]
  0004e	8b 10		 mov	 edx, DWORD PTR [eax]
  00050	8b f4		 mov	 esi, esp
  00052	8b 4d e8	 mov	 ecx, DWORD PTR tv69[ebp]
  00055	ff 52 28	 call	 DWORD PTR [edx+40]
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	89 45 ec	 mov	 DWORD PTR _pSkinMgr$[ebp], eax

; 8    : 	
; 9    : 	m_bcMenu.SetTextColor( pSkinMgr->GetColor( "MenuText") );

  00062	8b f4		 mov	 esi, esp
  00064	68 00 00 00 00	 push	 OFFSET FLAT:$SG187792
  00069	8b 45 ec	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  00071	ff 52 08	 call	 DWORD PTR [edx+8]
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	50		 push	 eax
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?SetTextColor@BCMenu@@QAEXK@Z ; BCMenu::SetTextColor

; 10   : 	m_bcMenu.SetMenuItemBkColor( pSkinMgr->GetColor( "MenuBk") );

  00084	8b f4		 mov	 esi, esp
  00086	68 00 00 00 00	 push	 OFFSET FLAT:$SG187793
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  0008e	8b 10		 mov	 edx, DWORD PTR [eax]
  00090	8b 4d ec	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  00093	ff 52 08	 call	 DWORD PTR [edx+8]
  00096	3b f4		 cmp	 esi, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	50		 push	 eax
  0009e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 11   : 	m_bcMenu.SetMenuItemBitmapBkColor(pSkinMgr->GetColor( "MenuLeftBk"));

  000a6	8b f4		 mov	 esi, esp
  000a8	68 00 00 00 00	 push	 OFFSET FLAT:$SG187794
  000ad	8b 45 ec	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  000b0	8b 10		 mov	 edx, DWORD PTR [eax]
  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  000b5	ff 52 08	 call	 DWORD PTR [edx+8]
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	50		 push	 eax
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor

; 12   : 	m_bcMenu.m_menuItemSelectBKColor  = pSkinMgr->GetColor( "MenuSelBk");

  000c8	8b f4		 mov	 esi, esp
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:$SG187795
  000cf	8b 45 ec	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  000d2	8b 10		 mov	 edx, DWORD PTR [eax]
  000d4	8b 4d ec	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  000d7	ff 52 08	 call	 DWORD PTR [edx+8]
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 13   : 	m_pWnd = pParent;

  000e7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	8b 45 08	 mov	 eax, DWORD PTR _pParent$[ebp]
  000ed	89 42 68	 mov	 DWORD PTR [edx+104], eax

; 14   : 	m_bcMenu.SetMenuDrawMode(1);

  000f0	6a 01		 push	 1
  000f2	e8 00 00 00 00	 call	 ?SetMenuDrawMode@BCMenu@@SAXI@Z ; BCMenu::SetMenuDrawMode
  000f7	83 c4 04	 add	 esp, 4

; 15   : 	m_bcMenu.LoadMenu(dwMenuID);

  000fa	8b f4		 mov	 esi, esp
  000fc	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMenuID$[ebp]
  000ff	51		 push	 ecx
  00100	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	ff 50 1c	 call	 DWORD PTR [eax+28]
  0010b	3b f4		 cmp	 esi, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 	m_pMenu	= (BCMenu*)(m_bcMenu.GetSubMenu(dwSubItem));

  00112	8b 4d 10	 mov	 ecx, DWORD PTR _dwSubItem$[ebp]
  00115	51		 push	 ecx
  00116	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0011e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00121	89 42 64	 mov	 DWORD PTR [edx+100], eax

; 17   : }

  00124	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00138	5e		 pop	 esi
  00139	83 c4 18	 add	 esp, 24			; 00000018H
  0013c	3b ec		 cmp	 ebp, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L188598:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1BCMenu@@UAE@XZ	; BCMenu::~BCMenu
__ehhandler$??0CShowMenu@@QAE@PAVCWnd@@KK@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188602
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CShowMenu@@QAE@PAVCWnd@@KK@Z ENDP			; CShowMenu::CShowMenu
EXTRN	?original_drawmode@BCMenu@@1IA:DWORD		; BCMenu::original_drawmode
EXTRN	?xp_drawmode@BCMenu@@1IA:DWORD			; BCMenu::xp_drawmode
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ?SetMenuDrawMode@BCMenu@@SAXI@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?SetMenuDrawMode@BCMenu@@SAXI@Z PROC NEAR		; BCMenu::SetMenuDrawMode, COMDAT

; 197  : 	static void SetMenuDrawMode(UINT mode){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 		BCMenu::original_drawmode=mode;

  00003	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?original_drawmode@BCMenu@@1IA, eax ; BCMenu::original_drawmode

; 199  : 		BCMenu::xp_drawmode=mode;

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0000e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?xp_drawmode@BCMenu@@1IA, ecx ; BCMenu::xp_drawmode

; 200  : 	};

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?SetMenuDrawMode@BCMenu@@SAXI@Z ENDP			; BCMenu::SetMenuDrawMode
_TEXT	ENDS
PUBLIC	?CreatePopupMenu@CShowMenu@@QAEXXZ		; CShowMenu::CreatePopupMenu
EXTRN	?CreatePopupMenu@CMenu@@QAEHXZ:NEAR		; CMenu::CreatePopupMenu
EXTRN	??2CObject@@SGPAXI@Z:NEAR			; CObject::operator new
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
xdata$x	SEGMENT
$T188618 DD	0ffffffffH
	DD	FLAT:$L188614
$T188616 DD	019930520H
	DD	01H
	DD	FLAT:$T188618
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\showmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -28						; size = 4
$T188611 = -24						; size = 4
$T188610 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreatePopupMenu@CShowMenu@@QAEXXZ PROC NEAR		; CShowMenu::CreatePopupMenu
; _this$ = ecx

; 20   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	6a ff		 push	 -1
  00155	68 00 00 00 00	 push	 __ehhandler$?CreatePopupMenu@CShowMenu@@QAEXXZ
  0015a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00160	50		 push	 eax
  00161	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00168	83 ec 10	 sub	 esp, 16			; 00000010H
  0016b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00170	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00173	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00176	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00179	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0017c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	m_pMenu = new BCMenu();

  0017f	6a 64		 push	 100			; 00000064H
  00181	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00186	89 45 e8	 mov	 DWORD PTR $T188611[ebp], eax
  00189	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00190	83 7d e8 00	 cmp	 DWORD PTR $T188611[ebp], 0
  00194	74 0d		 je	 SHORT $L188612
  00196	8b 4d e8	 mov	 ecx, DWORD PTR $T188611[ebp]
  00199	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  0019e	89 45 e4	 mov	 DWORD PTR tv72[ebp], eax
  001a1	eb 07		 jmp	 SHORT $L188613
$L188612:
  001a3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L188613:
  001aa	8b 45 e4	 mov	 eax, DWORD PTR tv72[ebp]
  001ad	89 45 ec	 mov	 DWORD PTR $T188610[ebp], eax
  001b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ba	8b 55 ec	 mov	 edx, DWORD PTR $T188610[ebp]
  001bd	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 22   : 	m_pMenu->CreatePopupMenu();

  001c0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001c3	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  001c6	e8 00 00 00 00	 call	 ?CreatePopupMenu@CMenu@@QAEHXZ ; CMenu::CreatePopupMenu

; 23   : }

  001cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001d5	83 c4 1c	 add	 esp, 28			; 0000001cH
  001d8	3b ec		 cmp	 ebp, esp
  001da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L188614:
  00012	8b 45 e8	 mov	 eax, DWORD PTR $T188611[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0001b	c3		 ret	 0
__ehhandler$?CreatePopupMenu@CShowMenu@@QAEXXZ:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188616
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CreatePopupMenu@CShowMenu@@QAEXXZ ENDP			; CShowMenu::CreatePopupMenu
PUBLIC	?DeletePopupItem@CShowMenu@@QAEXH@Z		; CShowMenu::DeletePopupItem
EXTRN	?DeleteMenu@BCMenu@@QAEHII@Z:NEAR		; BCMenu::DeleteMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?DeletePopupItem@CShowMenu@@QAEXH@Z PROC NEAR		; CShowMenu::DeletePopupItem
; _this$ = ecx

; 26   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	51		 push	 ecx
  001f4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  001fb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	m_pMenu->DeleteMenu(pos,MF_BYPOSITION);

  001fe	68 00 04 00 00	 push	 1024			; 00000400H
  00203	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00206	50		 push	 eax
  00207	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020a	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  0020d	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 28   : }

  00212	83 c4 04	 add	 esp, 4
  00215	3b ec		 cmp	 ebp, esp
  00217	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c2 04 00	 ret	 4
?DeletePopupItem@CShowMenu@@QAEXH@Z ENDP		; CShowMenu::DeletePopupItem
_TEXT	ENDS
PUBLIC	?DeleteItem@CShowMenu@@QAEXK@Z			; CShowMenu::DeleteItem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMenuItemID$ = 8					; size = 4
?DeleteItem@CShowMenu@@QAEXK@Z PROC NEAR		; CShowMenu::DeleteItem
; _this$ = ecx

; 30   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	51		 push	 ecx
  00234	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0023b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	m_pMenu->DeleteMenu( dwMenuItemID,MF_BYCOMMAND);

  0023e	6a 00		 push	 0
  00240	8b 45 08	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  00243	50		 push	 eax
  00244	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00247	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  0024a	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 32   : }

  0024f	83 c4 04	 add	 esp, 4
  00252	3b ec		 cmp	 ebp, esp
  00254	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 04 00	 ret	 4
?DeleteItem@CShowMenu@@QAEXK@Z ENDP			; CShowMenu::DeleteItem
_TEXT	ENDS
PUBLIC	?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z	; CShowMenu::DeleteItem
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z:NEAR ; BCMenu::DeleteMenu
EXTRN	?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:NEAR ; BCMenu::GetMenuText
xdata$x	SEGMENT
$T188630 DD	0ffffffffH
	DD	FLAT:$L188622
$T188624 DD	019930520H
	DD	01H
	DD	FLAT:$T188630
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_str$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwMenuItemID$ = 8					; size = 4
_sPos$ = 12						; size = 4
?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z PROC NEAR ; CShowMenu::DeleteItem
; _this$ = ecx

; 34   : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp
  00263	6a ff		 push	 -1
  00265	68 00 00 00 00	 push	 __ehhandler$?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z
  0026a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00270	50		 push	 eax
  00271	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00278	83 ec 10	 sub	 esp, 16			; 00000010H
  0027b	56		 push	 esi
  0027c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00281	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00284	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00287	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0028a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0028d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	CString str;

  00290	8b f4		 mov	 esi, esp
  00292	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0029b	3b f4		 cmp	 esi, esp
  0029d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 36   : 	m_pMenu->GetMenuText(dwMenuItemID, str, MF_BYCOMMAND);

  002a9	6a 00		 push	 0
  002ab	8d 45 e8	 lea	 eax, DWORD PTR _str$[ebp]
  002ae	50		 push	 eax
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _dwMenuItemID$[ebp]
  002b2	51		 push	 ecx
  002b3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002b6	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  002b9	e8 00 00 00 00	 call	 ?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText

; 37   : 	m_pMenu->DeleteMenu((char*)(LPCSTR)str, sPos);

  002be	8b 45 0c	 mov	 eax, DWORD PTR _sPos$[ebp]
  002c1	50		 push	 eax
  002c2	8b f4		 mov	 esi, esp
  002c4	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  002c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002cd	3b f4		 cmp	 esi, esp
  002cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d4	50		 push	 eax
  002d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002d8	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  002db	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ; BCMenu::DeleteMenu

; 38   : }

  002e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002e7	8b f4		 mov	 esi, esp
  002e9	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  002ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002f2	3b f4		 cmp	 esi, esp
  002f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f9	52		 push	 edx
  002fa	8b cd		 mov	 ecx, ebp
  002fc	50		 push	 eax
  002fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188628
  00303	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00308	58		 pop	 eax
  00309	5a		 pop	 edx
  0030a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0030d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00314	5e		 pop	 esi
  00315	83 c4 1c	 add	 esp, 28			; 0000001cH
  00318	3b ec		 cmp	 ebp, esp
  0031a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031f	8b e5		 mov	 esp, ebp
  00321	5d		 pop	 ebp
  00322	c2 08 00	 ret	 8
$L188628:
  00325	01 00 00 00	 DD	 1
  00329	00 00 00 00	 DD	 $L188627
$L188627:
  0032d	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00331	04 00 00 00	 DD	 4
  00335	00 00 00 00	 DD	 $L188625
$L188625:
  00339	73		 DB	 115			; 00000073H
  0033a	74		 DB	 116			; 00000074H
  0033b	72		 DB	 114			; 00000072H
  0033c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188622:
  00026	8b f4		 mov	 esi, esp
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00031	3b f4		 cmp	 esi, esp
  00033	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z:
  00038	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188624
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z ENDP	; CShowMenu::DeleteItem
PUBLIC	?DeleteItem@CShowMenu@@QAEXPBD@Z		; CShowMenu::DeleteItem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
?DeleteItem@CShowMenu@@QAEXPBD@Z PROC NEAR		; CShowMenu::DeleteItem
; _this$ = ecx

; 40   : {

  00340	55		 push	 ebp
  00341	8b ec		 mov	 ebp, esp
  00343	51		 push	 ecx
  00344	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0034b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	m_pMenu->DeleteMenu((char*)pText);

  0034e	6a 00		 push	 0
  00350	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  00353	50		 push	 eax
  00354	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  0035a	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ; BCMenu::DeleteMenu

; 42   : }

  0035f	83 c4 04	 add	 esp, 4
  00362	3b ec		 cmp	 ebp, esp
  00364	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00369	8b e5		 mov	 esp, ebp
  0036b	5d		 pop	 ebp
  0036c	c2 04 00	 ret	 4
?DeleteItem@CShowMenu@@QAEXPBD@Z ENDP			; CShowMenu::DeleteItem
_TEXT	ENDS
PUBLIC	?DisableItem@CShowMenu@@QAEXK@Z			; CShowMenu::DisableItem
EXTRN	?EnableMenuItem@CMenu@@QAEIII@Z:NEAR		; CMenu::EnableMenuItem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMenuItemID$ = 8					; size = 4
?DisableItem@CShowMenu@@QAEXK@Z PROC NEAR		; CShowMenu::DisableItem
; _this$ = ecx

; 44   : {

  00370	55		 push	 ebp
  00371	8b ec		 mov	 ebp, esp
  00373	51		 push	 ecx
  00374	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0037b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	m_pMenu->EnableMenuItem(dwMenuItemID, MF_GRAYED);

  0037e	6a 01		 push	 1
  00380	8b 45 08	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  00383	50		 push	 eax
  00384	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00387	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  0038a	e8 00 00 00 00	 call	 ?EnableMenuItem@CMenu@@QAEIII@Z ; CMenu::EnableMenuItem

; 46   : }

  0038f	83 c4 04	 add	 esp, 4
  00392	3b ec		 cmp	 ebp, esp
  00394	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00399	8b e5		 mov	 esp, ebp
  0039b	5d		 pop	 ebp
  0039c	c2 04 00	 ret	 4
?DisableItem@CShowMenu@@QAEXK@Z ENDP			; CShowMenu::DisableItem
_TEXT	ENDS
PUBLIC	?CheckItem@CShowMenu@@QAEXK@Z			; CShowMenu::CheckItem
EXTRN	?CheckMenuItem@CMenu@@QAEIII@Z:NEAR		; CMenu::CheckMenuItem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMenuItemID$ = 8					; size = 4
?CheckItem@CShowMenu@@QAEXK@Z PROC NEAR			; CShowMenu::CheckItem
; _this$ = ecx

; 49   : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	51		 push	 ecx
  003a4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  003ab	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	m_pMenu->CheckMenuItem( dwMenuItemID,MF_BYCOMMAND|MF_CHECKED);

  003ae	6a 08		 push	 8
  003b0	8b 45 08	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  003b3	50		 push	 eax
  003b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b7	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  003ba	e8 00 00 00 00	 call	 ?CheckMenuItem@CMenu@@QAEIII@Z ; CMenu::CheckMenuItem

; 51   : }

  003bf	83 c4 04	 add	 esp, 4
  003c2	3b ec		 cmp	 ebp, esp
  003c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c9	8b e5		 mov	 esp, ebp
  003cb	5d		 pop	 ebp
  003cc	c2 04 00	 ret	 4
?CheckItem@CShowMenu@@QAEXK@Z ENDP			; CShowMenu::CheckItem
_TEXT	ENDS
PUBLIC	?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z		; CShowMenu::ShowMenu
EXTRN	?TrackPopupMenu@CMenu@@QAEHIHHPAVCWnd@@PBUtagRECT@@@Z:NEAR ; CMenu::TrackPopupMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_point$ = 8						; size = 4
?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z PROC NEAR	; CShowMenu::ShowMenu
; _this$ = ecx

; 54   : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	51		 push	 ecx
  003d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  003db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	m_pMenu->TrackPopupMenu(TPM_LEFTALIGN|TPM_RIGHTBUTTON,point.x,point.y,m_pWnd);

  003de	6a 00		 push	 0
  003e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e3	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  003e6	51		 push	 ecx
  003e7	8b 55 08	 mov	 edx, DWORD PTR _point$[ebp]
  003ea	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003ed	50		 push	 eax
  003ee	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  003f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f3	52		 push	 edx
  003f4	6a 02		 push	 2
  003f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f9	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  003fc	e8 00 00 00 00	 call	 ?TrackPopupMenu@CMenu@@QAEHIHHPAVCWnd@@PBUtagRECT@@@Z ; CMenu::TrackPopupMenu

; 56   : }

  00401	83 c4 04	 add	 esp, 4
  00404	3b ec		 cmp	 ebp, esp
  00406	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0040b	8b e5		 mov	 esp, ebp
  0040d	5d		 pop	 ebp
  0040e	c2 04 00	 ret	 4
?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z ENDP		; CShowMenu::ShowMenu
_TEXT	ENDS
PUBLIC	?InsertSeperator@CShowMenu@@QAEXH@Z		; CShowMenu::InsertSeperator
EXTRN	?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z:NEAR		; BCMenu::InsertMenuA
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?InsertSeperator@CShowMenu@@QAEXH@Z PROC NEAR		; CShowMenu::InsertSeperator
; _this$ = ecx

; 59   : {

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	51		 push	 ecx
  00424	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0042b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 60   : 	m_pMenu->InsertMenu( pos,MF_BYPOSITION|MF_SEPARATOR,0,"-");

  0042e	6a ff		 push	 -1
  00430	68 00 00 00 00	 push	 OFFSET FLAT:$SG187841
  00435	6a 00		 push	 0
  00437	68 00 0c 00 00	 push	 3072			; 00000c00H
  0043c	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0043f	50		 push	 eax
  00440	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00443	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00446	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 61   : }

  0044b	83 c4 04	 add	 esp, 4
  0044e	3b ec		 cmp	 ebp, esp
  00450	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00455	8b e5		 mov	 esp, ebp
  00457	5d		 pop	 ebp
  00458	c2 04 00	 ret	 4
?InsertSeperator@CShowMenu@@QAEXH@Z ENDP		; CShowMenu::InsertSeperator
_TEXT	ENDS
PUBLIC	?InsertMenuA@CShowMenu@@QAEXHKPBD@Z		; CShowMenu::InsertMenuA
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB:DWORD
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z:NEAR
EXTRN	__imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z:NEAR
xdata$x	SEGMENT
$T188658 DD	0ffffffffH
	DD	FLAT:$L188641
	DD	00H
	DD	FLAT:$L188642
	DD	01H
	DD	FLAT:$L188643
	DD	02H
	DD	FLAT:$L188644
	DD	03H
	DD	FLAT:$L188645
	DD	04H
	DD	FLAT:$L188646
$T188648 DD	019930520H
	DD	06H
	DD	FLAT:$T188658
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv160 = -240						; size = 4
tv170 = -236						; size = 4
tv158 = -232						; size = 4
tv167 = -228						; size = 4
tv156 = -224						; size = 4
tv164 = -220						; size = 4
$T188640 = -216						; size = 28
$T188639 = -188						; size = 28
$T188638 = -160						; size = 28
_strRight$187855 = -128					; size = 28
_strLeft$187853 = -92					; size = 28
_iPos$ = -60						; size = 4
_strInput$ = -52					; size = 28
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pos$ = 8						; size = 4
_dwMenuItemID$ = 12					; size = 4
_pszMenuStr$ = 16					; size = 4
?InsertMenuA@CShowMenu@@QAEXHKPBD@Z PROC NEAR		; CShowMenu::InsertMenuA
; _this$ = ecx

; 64   : {

  00460	55		 push	 ebp
  00461	8b ec		 mov	 ebp, esp
  00463	6a ff		 push	 -1
  00465	68 00 00 00 00	 push	 __ehhandler$?InsertMenuA@CShowMenu@@QAEXHKPBD@Z
  0046a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00470	50		 push	 eax
  00471	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00478	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  0047e	56		 push	 esi
  0047f	57		 push	 edi
  00480	51		 push	 ecx
  00481	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00487	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  0048c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00491	f3 ab		 rep stosd
  00493	59		 pop	 ecx
  00494	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00499	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0049c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	string strInput = pszMenuStr;

  0049f	8b f4		 mov	 esi, esp
  004a1	8b 45 10	 mov	 eax, DWORD PTR _pszMenuStr$[ebp]
  004a4	50		 push	 eax
  004a5	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  004a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  004ae	3b f4		 cmp	 esi, esp
  004b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 66   : 	
; 67   : 	int iPos  = -1;

  004bc	c7 45 c4 ff ff
	ff ff		 mov	 DWORD PTR _iPos$[ebp], -1
$L187851:

; 68   : 	
; 69   : 	while( (iPos = strInput.find('&',iPos+1)) != string::npos )

  004c3	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  004c6	83 c1 01	 add	 ecx, 1
  004c9	8b f4		 mov	 esi, esp
  004cb	51		 push	 ecx
  004cc	6a 26		 push	 38			; 00000026H
  004ce	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  004d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
  004d7	3b f4		 cmp	 esi, esp
  004d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004de	89 45 c4	 mov	 DWORD PTR _iPos$[ebp], eax
  004e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  004e7	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  004ea	3b 02		 cmp	 eax, DWORD PTR [edx]
  004ec	0f 84 85 01 00
	00		 je	 $L187852

; 70   : 	{
; 71   : 		string strLeft = strInput.substr(0,iPos);

  004f2	8b f4		 mov	 esi, esp
  004f4	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  004f7	51		 push	 ecx
  004f8	6a 00		 push	 0
  004fa	8d 55 a4	 lea	 edx, DWORD PTR _strLeft$187853[ebp]
  004fd	52		 push	 edx
  004fe	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00501	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00507	3b f4		 cmp	 esi, esp
  00509	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0050e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 72   : 		string strRight = strInput.substr(iPos,strInput.length()-iPos+1);

  00512	8b f4		 mov	 esi, esp
  00514	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00517	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  0051d	3b f4		 cmp	 esi, esp
  0051f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00524	2b 45 c4	 sub	 eax, DWORD PTR _iPos$[ebp]
  00527	83 c0 01	 add	 eax, 1
  0052a	8b f4		 mov	 esi, esp
  0052c	50		 push	 eax
  0052d	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  00530	50		 push	 eax
  00531	8d 4d 80	 lea	 ecx, DWORD PTR _strRight$187855[ebp]
  00534	51		 push	 ecx
  00535	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00538	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  0053e	3b f4		 cmp	 esi, esp
  00540	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00545	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 73   : 		iPos++;

  00549	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  0054c	83 c2 01	 add	 edx, 1
  0054f	89 55 c4	 mov	 DWORD PTR _iPos$[ebp], edx

; 74   : 
; 75   : 		strInput = strLeft + string("&") + strRight;

  00552	8b f4		 mov	 esi, esp
  00554	68 00 00 00 00	 push	 OFFSET FLAT:$SG187860
  00559	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T188638[ebp]
  0055f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00565	3b f4		 cmp	 esi, esp
  00567	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0056c	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
  00572	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv164[ebp]
  00578	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv156[ebp], eax
  0057e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00582	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv156[ebp]
  00588	51		 push	 ecx
  00589	8d 55 a4	 lea	 edx, DWORD PTR _strLeft$187853[ebp]
  0058c	52		 push	 edx
  0058d	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR $T188639[ebp]
  00593	50		 push	 eax
  00594	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00599	83 c4 0c	 add	 esp, 12			; 0000000cH
  0059c	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  005a2	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv167[ebp]
  005a8	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv158[ebp], ecx
  005ae	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  005b2	8d 55 80	 lea	 edx, DWORD PTR _strRight$187855[ebp]
  005b5	52		 push	 edx
  005b6	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  005bc	50		 push	 eax
  005bd	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T188640[ebp]
  005c3	51		 push	 ecx
  005c4	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  005c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  005cc	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv170[ebp], eax
  005d2	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv170[ebp]
  005d8	89 95 10 ff ff
	ff		 mov	 DWORD PTR tv160[ebp], edx
  005de	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  005e2	8b f4		 mov	 esi, esp
  005e4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv160[ebp]
  005ea	50		 push	 eax
  005eb	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  005ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  005f4	3b f4		 cmp	 esi, esp
  005f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005fb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  005ff	8b f4		 mov	 esi, esp
  00601	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T188640[ebp]
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0060d	3b f4		 cmp	 esi, esp
  0060f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00614	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00618	8b f4		 mov	 esi, esp
  0061a	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T188639[ebp]
  00620	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00626	3b f4		 cmp	 esi, esp
  00628	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0062d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00631	8b f4		 mov	 esi, esp
  00633	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T188638[ebp]
  00639	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0063f	3b f4		 cmp	 esi, esp
  00641	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 76   : 	}

  00646	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0064a	8b f4		 mov	 esi, esp
  0064c	8d 4d 80	 lea	 ecx, DWORD PTR _strRight$187855[ebp]
  0064f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00655	3b f4		 cmp	 esi, esp
  00657	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0065c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00660	8b f4		 mov	 esi, esp
  00662	8d 4d a4	 lea	 ecx, DWORD PTR _strLeft$187853[ebp]
  00665	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0066b	3b f4		 cmp	 esi, esp
  0066d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00672	e9 4c fe ff ff	 jmp	 $L187851
$L187852:

; 77   : 
; 78   : 	m_pMenu->InsertMenu(pos,MF_BYPOSITION|MF_STRING,dwMenuItemID,strInput.c_str());

  00677	6a ff		 push	 -1
  00679	8b f4		 mov	 esi, esp
  0067b	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0067e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00684	3b f4		 cmp	 esi, esp
  00686	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0068b	50		 push	 eax
  0068c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMenuItemID$[ebp]
  0068f	51		 push	 ecx
  00690	68 00 04 00 00	 push	 1024			; 00000400H
  00695	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00698	52		 push	 edx
  00699	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0069c	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0069f	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 79   : }

  006a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006ab	8b f4		 mov	 esi, esp
  006ad	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  006b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  006b6	3b f4		 cmp	 esi, esp
  006b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006bd	52		 push	 edx
  006be	8b cd		 mov	 ecx, ebp
  006c0	50		 push	 eax
  006c1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188656
  006c7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  006cc	58		 pop	 eax
  006cd	5a		 pop	 edx
  006ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  006d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006e0	5f		 pop	 edi
  006e1	5e		 pop	 esi
  006e2	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  006e8	3b ec		 cmp	 ebp, esp
  006ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006ef	8b e5		 mov	 esp, ebp
  006f1	5d		 pop	 ebp
  006f2	c2 0c 00	 ret	 12			; 0000000cH
$L188656:
  006f5	03 00 00 00	 DD	 3
  006f9	00 00 00 00	 DD	 $L188655
$L188655:
  006fd	cc ff ff ff	 DD	 -52			; ffffffccH
  00701	1c 00 00 00	 DD	 28			; 0000001cH
  00705	00 00 00 00	 DD	 $L188649
  00709	a4 ff ff ff	 DD	 -92			; ffffffa4H
  0070d	1c 00 00 00	 DD	 28			; 0000001cH
  00711	00 00 00 00	 DD	 $L188650
  00715	80 ff ff ff	 DD	 -128			; ffffff80H
  00719	1c 00 00 00	 DD	 28			; 0000001cH
  0071d	00 00 00 00	 DD	 $L188651
$L188651:
  00721	73		 DB	 115			; 00000073H
  00722	74		 DB	 116			; 00000074H
  00723	72		 DB	 114			; 00000072H
  00724	52		 DB	 82			; 00000052H
  00725	69		 DB	 105			; 00000069H
  00726	67		 DB	 103			; 00000067H
  00727	68		 DB	 104			; 00000068H
  00728	74		 DB	 116			; 00000074H
  00729	00		 DB	 0
$L188650:
  0072a	73		 DB	 115			; 00000073H
  0072b	74		 DB	 116			; 00000074H
  0072c	72		 DB	 114			; 00000072H
  0072d	4c		 DB	 76			; 0000004cH
  0072e	65		 DB	 101			; 00000065H
  0072f	66		 DB	 102			; 00000066H
  00730	74		 DB	 116			; 00000074H
  00731	00		 DB	 0
$L188649:
  00732	73		 DB	 115			; 00000073H
  00733	74		 DB	 116			; 00000074H
  00734	72		 DB	 114			; 00000072H
  00735	49		 DB	 73			; 00000049H
  00736	6e		 DB	 110			; 0000006eH
  00737	70		 DB	 112			; 00000070H
  00738	75		 DB	 117			; 00000075H
  00739	74		 DB	 116			; 00000074H
  0073a	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188641:
  00042	8b f4		 mov	 esi, esp
  00044	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188642:
  00054	8b f4		 mov	 esi, esp
  00056	8d 4d a4	 lea	 ecx, DWORD PTR _strLeft$187853[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188643:
  00066	8b f4		 mov	 esi, esp
  00068	8d 4d 80	 lea	 ecx, DWORD PTR _strRight$187855[ebp]
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00071	3b f4		 cmp	 esi, esp
  00073	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188644:
  00078	8b f4		 mov	 esi, esp
  0007a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T188638[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00086	3b f4		 cmp	 esi, esp
  00088	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188645:
  0008d	8b f4		 mov	 esi, esp
  0008f	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T188639[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188646:
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T188640[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?InsertMenuA@CShowMenu@@QAEXHKPBD@Z:
  000b7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188648
  000bc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertMenuA@CShowMenu@@QAEXHKPBD@Z ENDP		; CShowMenu::InsertMenuA
PUBLIC	?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z		; CShowMenu::InsertMenuA
xdata$x	SEGMENT
$T188679 DD	0ffffffffH
	DD	FLAT:$L188664
	DD	00H
	DD	FLAT:$L188665
	DD	01H
	DD	FLAT:$L188666
	DD	02H
	DD	FLAT:$L188667
	DD	03H
	DD	FLAT:$L188668
	DD	04H
	DD	FLAT:$L188669
$T188671 DD	019930520H
	DD	06H
	DD	FLAT:$T188679
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv163 = -244						; size = 4
tv173 = -240						; size = 4
tv161 = -236						; size = 4
tv170 = -232						; size = 4
tv159 = -228						; size = 4
tv167 = -224						; size = 4
$T188663 = -220						; size = 28
$T188662 = -192						; size = 28
$T188661 = -164						; size = 28
_strRight$187877 = -132					; size = 28
_strLeft$187875 = -96					; size = 28
_iPos$ = -64						; size = 4
_strInput$ = -56					; size = 28
_pSubMenu$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_subpos$ = 8						; size = 4
_pos$ = 12						; size = 4
_dwMenuItemID$ = 16					; size = 4
_pszMenuStr$ = 20					; size = 4
?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z PROC NEAR		; CShowMenu::InsertMenuA
; _this$ = ecx

; 82   : {

  00740	55		 push	 ebp
  00741	8b ec		 mov	 ebp, esp
  00743	6a ff		 push	 -1
  00745	68 00 00 00 00	 push	 __ehhandler$?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z
  0074a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00750	50		 push	 eax
  00751	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00758	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0075e	56		 push	 esi
  0075f	57		 push	 edi
  00760	51		 push	 ecx
  00761	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00767	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0076c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00771	f3 ab		 rep stosd
  00773	59		 pop	 ecx
  00774	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00779	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0077c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	BCMenu* pSubMenu = (BCMenu*)m_pMenu->GetSubMenu(subpos);

  0077f	8b 45 08	 mov	 eax, DWORD PTR _subpos$[ebp]
  00782	50		 push	 eax
  00783	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00786	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00789	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0078e	89 45 e8	 mov	 DWORD PTR _pSubMenu$[ebp], eax

; 84   : 
; 85   : 	string strInput = pszMenuStr;

  00791	8b f4		 mov	 esi, esp
  00793	8b 55 14	 mov	 edx, DWORD PTR _pszMenuStr$[ebp]
  00796	52		 push	 edx
  00797	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0079a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  007a0	3b f4		 cmp	 esi, esp
  007a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 86   : 
; 87   : 	int iPos  = -1;

  007ae	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _iPos$[ebp], -1
$L187873:

; 88   : 
; 89   : 	while( (iPos = strInput.find('&',iPos+1)) != string::npos )

  007b5	8b 45 c0	 mov	 eax, DWORD PTR _iPos$[ebp]
  007b8	83 c0 01	 add	 eax, 1
  007bb	8b f4		 mov	 esi, esp
  007bd	50		 push	 eax
  007be	6a 26		 push	 38			; 00000026H
  007c0	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  007c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
  007c9	3b f4		 cmp	 esi, esp
  007cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007d0	89 45 c0	 mov	 DWORD PTR _iPos$[ebp], eax
  007d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  007d9	8b 55 c0	 mov	 edx, DWORD PTR _iPos$[ebp]
  007dc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  007de	0f 84 8e 01 00
	00		 je	 $L187874

; 90   : 	{
; 91   : 		string strLeft = strInput.substr(0,iPos);

  007e4	8b f4		 mov	 esi, esp
  007e6	8b 45 c0	 mov	 eax, DWORD PTR _iPos$[ebp]
  007e9	50		 push	 eax
  007ea	6a 00		 push	 0
  007ec	8d 4d a0	 lea	 ecx, DWORD PTR _strLeft$187875[ebp]
  007ef	51		 push	 ecx
  007f0	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  007f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  007f9	3b f4		 cmp	 esi, esp
  007fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00800	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 92   : 		string strRight = strInput.substr(iPos,strInput.length()-iPos+1);

  00804	8b f4		 mov	 esi, esp
  00806	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00809	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  0080f	3b f4		 cmp	 esi, esp
  00811	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00816	2b 45 c0	 sub	 eax, DWORD PTR _iPos$[ebp]
  00819	83 c0 01	 add	 eax, 1
  0081c	8b f4		 mov	 esi, esp
  0081e	50		 push	 eax
  0081f	8b 55 c0	 mov	 edx, DWORD PTR _iPos$[ebp]
  00822	52		 push	 edx
  00823	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _strRight$187877[ebp]
  00829	50		 push	 eax
  0082a	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0082d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00833	3b f4		 cmp	 esi, esp
  00835	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0083a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 93   : 		iPos++;

  0083e	8b 4d c0	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00841	83 c1 01	 add	 ecx, 1
  00844	89 4d c0	 mov	 DWORD PTR _iPos$[ebp], ecx

; 94   : 
; 95   : 		strInput = strLeft + string("&") + strRight;

  00847	8b f4		 mov	 esi, esp
  00849	68 00 00 00 00	 push	 OFFSET FLAT:$SG187882
  0084e	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T188661[ebp]
  00854	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0085a	3b f4		 cmp	 esi, esp
  0085c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00861	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  00867	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv167[ebp]
  0086d	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv159[ebp], edx
  00873	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00877	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv159[ebp]
  0087d	50		 push	 eax
  0087e	8d 4d a0	 lea	 ecx, DWORD PTR _strLeft$187875[ebp]
  00881	51		 push	 ecx
  00882	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR $T188662[ebp]
  00888	52		 push	 edx
  00889	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0088e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00891	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv170[ebp], eax
  00897	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv170[ebp]
  0089d	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv161[ebp], eax
  008a3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  008a7	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _strRight$187877[ebp]
  008ad	51		 push	 ecx
  008ae	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv161[ebp]
  008b4	52		 push	 edx
  008b5	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T188663[ebp]
  008bb	50		 push	 eax
  008bc	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  008c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  008c4	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv173[ebp], eax
  008ca	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv173[ebp]
  008d0	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv163[ebp], ecx
  008d6	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  008da	8b f4		 mov	 esi, esp
  008dc	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv163[ebp]
  008e2	52		 push	 edx
  008e3	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  008e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  008ec	3b f4		 cmp	 esi, esp
  008ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008f3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  008f7	8b f4		 mov	 esi, esp
  008f9	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T188663[ebp]
  008ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00905	3b f4		 cmp	 esi, esp
  00907	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0090c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00910	8b f4		 mov	 esi, esp
  00912	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T188662[ebp]
  00918	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0091e	3b f4		 cmp	 esi, esp
  00920	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00925	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00929	8b f4		 mov	 esi, esp
  0092b	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T188661[ebp]
  00931	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00937	3b f4		 cmp	 esi, esp
  00939	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 96   : 	}

  0093e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00942	8b f4		 mov	 esi, esp
  00944	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _strRight$187877[ebp]
  0094a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00950	3b f4		 cmp	 esi, esp
  00952	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00957	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0095b	8b f4		 mov	 esi, esp
  0095d	8d 4d a0	 lea	 ecx, DWORD PTR _strLeft$187875[ebp]
  00960	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00966	3b f4		 cmp	 esi, esp
  00968	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0096d	e9 43 fe ff ff	 jmp	 $L187873
$L187874:

; 97   : 
; 98   : 	pSubMenu->InsertMenu( pos,MF_BYPOSITION|MF_STRING,dwMenuItemID,strInput.c_str() );

  00972	6a ff		 push	 -1
  00974	8b f4		 mov	 esi, esp
  00976	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00979	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0097f	3b f4		 cmp	 esi, esp
  00981	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00986	50		 push	 eax
  00987	8b 45 10	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  0098a	50		 push	 eax
  0098b	68 00 04 00 00	 push	 1024			; 00000400H
  00990	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  00993	51		 push	 ecx
  00994	8b 4d e8	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  00997	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 99   : }

  0099c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  009a3	8b f4		 mov	 esi, esp
  009a5	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  009a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  009ae	3b f4		 cmp	 esi, esp
  009b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009b5	52		 push	 edx
  009b6	8b cd		 mov	 ecx, ebp
  009b8	50		 push	 eax
  009b9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188678
  009bf	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009c4	58		 pop	 eax
  009c5	5a		 pop	 edx
  009c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  009c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  009d0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009d8	5f		 pop	 edi
  009d9	5e		 pop	 esi
  009da	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  009e0	3b ec		 cmp	 ebp, esp
  009e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009e7	8b e5		 mov	 esp, ebp
  009e9	5d		 pop	 ebp
  009ea	c2 10 00	 ret	 16			; 00000010H
$L188678:
  009ed	03 00 00 00	 DD	 3
  009f1	00 00 00 00	 DD	 $L188677
$L188677:
  009f5	c8 ff ff ff	 DD	 -56			; ffffffc8H
  009f9	1c 00 00 00	 DD	 28			; 0000001cH
  009fd	00 00 00 00	 DD	 $L188672
  00a01	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00a05	1c 00 00 00	 DD	 28			; 0000001cH
  00a09	00 00 00 00	 DD	 $L188673
  00a0d	7c ff ff ff	 DD	 -132			; ffffff7cH
  00a11	1c 00 00 00	 DD	 28			; 0000001cH
  00a15	00 00 00 00	 DD	 $L188674
$L188674:
  00a19	73		 DB	 115			; 00000073H
  00a1a	74		 DB	 116			; 00000074H
  00a1b	72		 DB	 114			; 00000072H
  00a1c	52		 DB	 82			; 00000052H
  00a1d	69		 DB	 105			; 00000069H
  00a1e	67		 DB	 103			; 00000067H
  00a1f	68		 DB	 104			; 00000068H
  00a20	74		 DB	 116			; 00000074H
  00a21	00		 DB	 0
$L188673:
  00a22	73		 DB	 115			; 00000073H
  00a23	74		 DB	 116			; 00000074H
  00a24	72		 DB	 114			; 00000072H
  00a25	4c		 DB	 76			; 0000004cH
  00a26	65		 DB	 101			; 00000065H
  00a27	66		 DB	 102			; 00000066H
  00a28	74		 DB	 116			; 00000074H
  00a29	00		 DB	 0
$L188672:
  00a2a	73		 DB	 115			; 00000073H
  00a2b	74		 DB	 116			; 00000074H
  00a2c	72		 DB	 114			; 00000072H
  00a2d	49		 DB	 73			; 00000049H
  00a2e	6e		 DB	 110			; 0000006eH
  00a2f	70		 DB	 112			; 00000070H
  00a30	75		 DB	 117			; 00000075H
  00a31	74		 DB	 116			; 00000074H
  00a32	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188664:
  000c1	8b f4		 mov	 esi, esp
  000c3	8d 4d c8	 lea	 ecx, DWORD PTR _strInput$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000cc	3b f4		 cmp	 esi, esp
  000ce	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188665:
  000d3	8b f4		 mov	 esi, esp
  000d5	8d 4d a0	 lea	 ecx, DWORD PTR _strLeft$187875[ebp]
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000de	3b f4		 cmp	 esi, esp
  000e0	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188666:
  000e5	8b f4		 mov	 esi, esp
  000e7	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _strRight$187877[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188667:
  000fa	8b f4		 mov	 esi, esp
  000fc	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T188661[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00108	3b f4		 cmp	 esi, esp
  0010a	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188668:
  0010f	8b f4		 mov	 esi, esp
  00111	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T188662[ebp]
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0011d	3b f4		 cmp	 esi, esp
  0011f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188669:
  00124	8b f4		 mov	 esi, esp
  00126	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T188663[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00132	3b f4		 cmp	 esi, esp
  00134	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z:
  00139	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188671
  0013e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z ENDP		; CShowMenu::InsertMenuA
PUBLIC	?InsertMenuA@CShowMenu@@QAEXHHI@Z		; CShowMenu::InsertMenuA
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pSubMenu$ = -8						; size = 4
_this$ = -4						; size = 4
_subpos$ = 8						; size = 4
_pos$ = 12						; size = 4
_nFlag$ = 16						; size = 4
?InsertMenuA@CShowMenu@@QAEXHHI@Z PROC NEAR		; CShowMenu::InsertMenuA
; _this$ = ecx

; 102  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	83 ec 08	 sub	 esp, 8
  00a46	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00a4d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00a54	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	BCMenu* pSubMenu = (BCMenu*)m_pMenu->GetSubMenu(subpos);

  00a57	8b 45 08	 mov	 eax, DWORD PTR _subpos$[ebp]
  00a5a	50		 push	 eax
  00a5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5e	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00a61	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  00a66	89 45 f8	 mov	 DWORD PTR _pSubMenu$[ebp], eax

; 104  : 	pSubMenu->InsertMenu( pos, nFlag );

  00a69	6a ff		 push	 -1
  00a6b	6a 00		 push	 0
  00a6d	6a 00		 push	 0
  00a6f	8b 55 10	 mov	 edx, DWORD PTR _nFlag$[ebp]
  00a72	52		 push	 edx
  00a73	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00a76	50		 push	 eax
  00a77	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  00a7a	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 105  : }

  00a7f	83 c4 08	 add	 esp, 8
  00a82	3b ec		 cmp	 ebp, esp
  00a84	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a89	8b e5		 mov	 esp, ebp
  00a8b	5d		 pop	 ebp
  00a8c	c2 0c 00	 ret	 12			; 0000000cH
?InsertMenuA@CShowMenu@@QAEXHHI@Z ENDP			; CShowMenu::InsertMenuA
_TEXT	ENDS
PUBLIC	?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z ; CShowMenu::MeasureItem
EXTRN	?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z:NEAR		; BCMenu::IsMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpMeasureItemStruct$ = 8				; size = 4
?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z PROC NEAR ; CShowMenu::MeasureItem
; _this$ = ecx

; 108  : {

  00a90	55		 push	 ebp
  00a91	8b ec		 mov	 ebp, esp
  00a93	51		 push	 ecx
  00a94	56		 push	 esi
  00a95	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00a9c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 	if( BCMenu::IsMenu((HMENU)lpMeasureItemStruct->itemID ) )

  00a9f	8b 45 08	 mov	 eax, DWORD PTR _lpMeasureItemStruct$[ebp]
  00aa2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00aa5	51		 push	 ecx
  00aa6	e8 00 00 00 00	 call	 ?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z ; BCMenu::IsMenu
  00aab	83 c4 04	 add	 esp, 4
  00aae	85 c0		 test	 eax, eax
  00ab0	74 24		 je	 SHORT $L187896

; 110  : 	{
; 111  : 		m_pMenu->MeasureItem( lpMeasureItemStruct );

  00ab2	8b f4		 mov	 esi, esp
  00ab4	8b 55 08	 mov	 edx, DWORD PTR _lpMeasureItemStruct$[ebp]
  00ab7	52		 push	 edx
  00ab8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00abb	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00abe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ac1	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00ac4	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ac6	8b c8		 mov	 ecx, eax
  00ac8	ff 52 18	 call	 DWORD PTR [edx+24]
  00acb	3b f4		 cmp	 esi, esp
  00acd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 112  : 		return true;

  00ad2	b0 01		 mov	 al, 1
  00ad4	eb 02		 jmp	 SHORT $L187894
$L187896:

; 113  : 	}
; 114  : 	return false;

  00ad6	32 c0		 xor	 al, al
$L187894:

; 115  : }

  00ad8	5e		 pop	 esi
  00ad9	83 c4 04	 add	 esp, 4
  00adc	3b ec		 cmp	 ebp, esp
  00ade	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ae3	8b e5		 mov	 esp, ebp
  00ae5	5d		 pop	 ebp
  00ae6	c2 04 00	 ret	 4
?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z ENDP ; CShowMenu::MeasureItem
_TEXT	ENDS
PUBLIC	?InsertPopupMenu@CShowMenu@@QAEXHIPBD@Z		; CShowMenu::InsertPopupMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_hMenu$ = 12						; size = 4
_pszMenuStr$ = 16					; size = 4
?InsertPopupMenu@CShowMenu@@QAEXHIPBD@Z PROC NEAR	; CShowMenu::InsertPopupMenu
; _this$ = ecx

; 118  : {

  00af0	55		 push	 ebp
  00af1	8b ec		 mov	 ebp, esp
  00af3	51		 push	 ecx
  00af4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00afb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	m_pMenu->InsertMenu(pos,MF_POPUP|MF_BYPOSITION|MF_STRING,(UINT)hMenu,pszMenuStr);

  00afe	6a ff		 push	 -1
  00b00	8b 45 10	 mov	 eax, DWORD PTR _pszMenuStr$[ebp]
  00b03	50		 push	 eax
  00b04	8b 4d 0c	 mov	 ecx, DWORD PTR _hMenu$[ebp]
  00b07	51		 push	 ecx
  00b08	68 10 04 00 00	 push	 1040			; 00000410H
  00b0d	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00b10	52		 push	 edx
  00b11	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b14	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00b17	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 120  : }

  00b1c	83 c4 04	 add	 esp, 4
  00b1f	3b ec		 cmp	 ebp, esp
  00b21	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b26	8b e5		 mov	 esp, ebp
  00b28	5d		 pop	 ebp
  00b29	c2 0c 00	 ret	 12			; 0000000cH
?InsertPopupMenu@CShowMenu@@QAEXHIPBD@Z ENDP		; CShowMenu::InsertPopupMenu
_TEXT	ENDS
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T188692 DD	0ffffffffH
	DD	FLAT:$L188686
	DD	00H
	DD	FLAT:$L188685
$T188690 DD	019930520H
	DD	02H
	DD	FLAT:$T188692
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T188687 = -44						; size = 4
$T188684 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T188687[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T188684[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T188687[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T188687[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T188684[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L188685:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T188684[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188686:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T188687[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L188688
  0001e	83 65 d4 fe	 and	 DWORD PTR $T188687[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188688:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188690
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
END
