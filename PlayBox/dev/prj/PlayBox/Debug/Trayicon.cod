; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\tray\Trayicon.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MDHCGOCC@m_pMemMgr?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FF@PEBLHPJJ@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@KICONMKH@pData?9?$DOpStringMgr?5?$DN?$DN?5this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@HPMMCKHL@?$CI?$CIWORD?$CJ?$CI?$CIDWORD_PTR?$CJ?$CIpsz?$CJ?5?$DO?$DO?516?$CJ?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMenuXPItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenuXPItem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenuXPItem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenuXPText@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenuXPText@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenuXPSeparator@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenuXPSeparator@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenuXPSideBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenuXPSideBar@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenuXPButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenuXPButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CShowMenu@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlStringMgr@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CAtlStringMgr@ATL@@UAEPAUCStringData@2@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CAtlStringMgr@ATL@@UAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@CAtlStringMgr@ATL@@UAEPAUCStringData@2@PAU32@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNilString@CAtlStringMgr@ATL@@UAEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CAtlStringMgr@ATL@@UAEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAtlStringMgr@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareStringW@?$ChTraitsOS@_W@ATL@@KGHKKPB_WH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExW@?$ChTraitsOS@_W@ATL@@KGHKKPB_WHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiW@?$ChTraitsOS@_W@ATL@@KGHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerW@?$ChTraitsOS@_W@ATL@@KGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperW@?$ChTraitsOS@_W@ATL@@KGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strchr@?$ChTraitsOS@_W@ATL@@SAPB_WPB_W_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strrchr@?$ChTraitsOS@_W@ATL@@SAPB_WPB_W_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_strrev@?$ChTraitsOS@_W@ATL@@SAPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strstr@?$ChTraitsOS@_W@ATL@@SAPB_WPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strspn@?$ChTraitsOS@_W@ATL@@SAHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strcspn@?$ChTraitsOS@_W@ATL@@SAHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strpbrk@?$ChTraitsOS@_W@ATL@@SAPB_WPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsOS@_W@ATL@@SAPB_WPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT ??_GCTrayIcon@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTrayHook@CTrayIcon@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTrayHook@CTrayIcon@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTrayHook@CTrayIcon@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCShowMenu@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@HAAH@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$AtlAlignUp@H@ATL@@YGHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CMenuXPSeparator@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CAtlStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CMenuXPText@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CMenuXPItem@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CTrayHook@CTrayIcon@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CTrayIcon@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CMenuXPButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CMenuXPSideBar@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CMenuXPSeparator@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CAtlStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CMenuXPText@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CMenuXPItem@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CTrayHook@CTrayIcon@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CTrayIcon@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CMenuXPButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CMenuXPSideBar@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenuXPSeparator@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IAtlStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUIAtlStringMgr@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CAtlStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenuXPText@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CTrayHook@CTrayIcon@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CTrayIcon@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenuXPButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenuXPItem@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenuXPSideBar@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCMenuXPSeparator@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCAtlStringMgr@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMenuXPText@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCSubclassWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCTrayHook@CTrayIcon@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCTrayIcon@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMenuXPButton@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMenuXPItem@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMenuXPSideBar@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CMenuXPSeparator@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CAtlStringMgr@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CMenuXPText@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CMenuXPItem@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CTrayHook@CTrayIcon@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CTrayIcon@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CMenuXPButton@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CMenuXPSideBar@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@HAAH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTrayHook@CTrayIcon@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTrayIcon@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?classCTrayIcon@CTrayIcon@@2UCRuntimeClass@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09BBJEMDLA@nRet?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_strthunks@ATL@@3U_AtlStringThunks@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPB_WHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiWThunk@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiWFake@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?SetManager@CNilStringData@ATL@@QAEXPAUIAtlStringMgr@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@MLJMCNFJ@pStringMgr?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CNilStringData@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CAtlStringMgr@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMenuXPButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMenuXPSideBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMenuXPSeparator@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMenuXPText@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMenuXPItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
PUBLIC	?_strthunks@ATL@@3U_AtlStringThunks@1@A		; ATL::_strthunks
PUBLIC	?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z ; ATL::GetEnvironmentVariableWThunk
PUBLIC	?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z	; ATL::CompareStringWThunk
PUBLIC	?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z	; ATL::GetStringTypeExWThunk
PUBLIC	?lstrcmpiWThunk@ATL@@YGHPB_W0@Z			; ATL::lstrcmpiWThunk
PUBLIC	?classCTrayIcon@CTrayIcon@@2UCRuntimeClass@@B	; CTrayIcon::classCTrayIcon
PUBLIC	?CharLowerWThunk@ATL@@YGPA_WPA_W@Z		; ATL::CharLowerWThunk
PUBLIC	?CharUpperWThunk@ATL@@YGPA_WPA_W@Z		; ATL::CharUpperWThunk
EXTRN	?GetThisClass@CCmdTarget@@SGPAUCRuntimeClass@@XZ:NEAR ; CCmdTarget::GetThisClass
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitATL@_WV?$ChTraitsCRT@_W@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,ATL::StrTraitATL<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
CONST	ENDS
CONST	SEGMENT
$SG190120 DB	'TaskbarCreated', 00H
	ORG $+1
$SG190122 DB	'CTrayIcon', 00H
CONST	ENDS
;	COMDAT ?classCTrayIcon@CTrayIcon@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCTrayIcon@CTrayIcon@@2UCRuntimeClass@@B DD FLAT:$SG190122 ; CTrayIcon::classCTrayIcon
	DD	030cH
	DD	0ffffH
	DD	00H
	DD	FLAT:?GetThisClass@CCmdTarget@@SGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
CONST	SEGMENT
	ORG $+2
$SG190156 DB	'.\src\Gui\tray\Trayicon.cpp', 00H
$SG190158 DB	'.\src\Gui\tray\Trayicon.cpp', 00H
$SG190177 DB	'%s', 00H
$SG190197 DB	00H
$SG190367 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190381 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190397 DB	'with ', 00H
	ORG $+2
$SG190398 DB	' elements', 00H
	ORG $+2
$SG190400 DB	0aH, 00H
	ORG $+2
$SG190407 DB	0aH, 00H
	ORG $+6
$SG190415 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190417 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190420 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190422 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190424 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190427 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190451 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190453 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190468 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190475 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190511 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190515 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190525 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190542 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190567 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT ?_strthunks@ATL@@3U_AtlStringThunks@1@A
_DATA	SEGMENT
?_strthunks@ATL@@3U_AtlStringThunks@1@A DD FLAT:?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z ; ATL::_strthunks
	DD	FLAT:?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z
	DD	FLAT:?lstrcmpiWThunk@ATL@@YGHPB_W0@Z
	DD	FLAT:?CharLowerWThunk@ATL@@YGPA_WPA_W@Z
	DD	FLAT:?CharUpperWThunk@ATL@@YGPA_WPA_W@Z
	DD	FLAT:?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z
_DATA	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
;	COMDAT rtc$IMZ
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00011	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00025	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0002f	8b f4		 mov	 esi, esp
  00031	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00045	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0004c	75 15		 jne	 SHORT $L24163
  0004e	83 bd 68 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00055	72 0c		 jb	 SHORT $L24163

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00057	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00061	eb 0a		 jmp	 SHORT $L24164
$L24163:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00063	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24164:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0006d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00079	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  0007e	8b f4		 mov	 esi, esp
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191192
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$L191192:
  000b9	01 00 00 00	 DD	 1
  000bd	00 00 00 00	 DD	 $L191191
$L191191:
  000c1	64 ff ff ff	 DD	 -156			; ffffff64H
  000c5	94 00 00 00	 DD	 148			; 00000094H
  000c9	00 00 00 00	 DD	 $L191188
$L191188:
  000cd	76		 DB	 118			; 00000076H
  000ce	65		 DB	 101			; 00000065H
  000cf	72		 DB	 114			; 00000072H
  000d0	00		 DB	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24151 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	89 45 f4	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00045	8b f4		 mov	 esi, esp
  00047	6a 07		 push	 7
  00049	8d 45 e8	 lea	 eax, DWORD PTR _szACP$[ebp]
  0004c	50		 push	 eax
  0004d	68 04 10 00 00	 push	 4100			; 00001004H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  00055	51		 push	 ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	74 34		 je	 SHORT $L24150

; 111  : 	{
; 112  : 		char* pch = szACP;

  00067	8d 55 e8	 lea	 edx, DWORD PTR _szACP$[ebp]
  0006a	89 55 e0	 mov	 DWORD PTR _pch$24151[ebp], edx
$L24153:

; 113  : 		while (*pch != '\0')

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00070	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00073	85 c9		 test	 ecx, ecx
  00075	74 24		 je	 SHORT $L24150

; 114  : 		{
; 115  : 			nACP *= 10;

  00077	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  0007a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0007d	89 55 f8	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00080	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  00089	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0008d	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _pch$24151[ebp]
  00093	83 c1 01	 add	 ecx, 1
  00096	89 4d e0	 mov	 DWORD PTR _pch$24151[ebp], ecx

; 117  : 		}

  00099	eb d2		 jmp	 SHORT $L24153
$L24150:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0009f	75 12		 jne	 SHORT $L24155

; 121  : 		nACP = ::GetACP();

  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
$L24155:

; 122  : 
; 123  : 	return nACP;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191203
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	5e		 pop	 esi
  000d0	83 c4 20	 add	 esp, 32			; 00000020H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$L191203:
  000de	01 00 00 00	 DD	 1
  000e2	00 00 00 00	 DD	 $L191202
$L191202:
  000e6	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ea	07 00 00 00	 DD	 7
  000ee	00 00 00 00	 DD	 $L191200
$L191200:
  000f2	73		 DB	 115			; 00000073H
  000f3	7a		 DB	 122			; 0000007aH
  000f4	41		 DB	 65			; 00000041H
  000f5	43		 DB	 67			; 00000043H
  000f6	50		 DB	 80			; 00000050H
  000f7	00		 DB	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?GetThisClass@CTrayIcon@@SGPAUCRuntimeClass@@XZ	; CTrayIcon::GetThisClass
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\trayicon.cpp
_TEXT	SEGMENT
?GetThisClass@CTrayIcon@@SGPAUCRuntimeClass@@XZ PROC NEAR ; CTrayIcon::GetThisClass

; 26   : IMPLEMENT_DYNAMIC(CTrayIcon, CCmdTarget)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classCTrayIcon@CTrayIcon@@2UCRuntimeClass@@B ; CTrayIcon::classCTrayIcon
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisClass@CTrayIcon@@SGPAUCRuntimeClass@@XZ ENDP	; CTrayIcon::GetThisClass
_TEXT	ENDS
PUBLIC	?GetRuntimeClass@CTrayIcon@@UBEPAUCRuntimeClass@@XZ ; CTrayIcon::GetRuntimeClass
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRuntimeClass@CTrayIcon@@UBEPAUCRuntimeClass@@XZ PROC NEAR ; CTrayIcon::GetRuntimeClass
; _this$ = ecx

; 26   : IMPLEMENT_DYNAMIC(CTrayIcon, CCmdTarget)

  00010	55		 push	 ebp
  00011	8b ec		 mov	 ebp, esp
  00013	51		 push	 ecx
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classCTrayIcon@CTrayIcon@@2UCRuntimeClass@@B ; CTrayIcon::classCTrayIcon
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?GetRuntimeClass@CTrayIcon@@UBEPAUCRuntimeClass@@XZ ENDP ; CTrayIcon::GetRuntimeClass
_TEXT	ENDS
PUBLIC	??_R4CTrayIcon@@6B@				; CTrayIcon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTrayIcon@@@8				; CTrayIcon `RTTI Type Descriptor'
PUBLIC	??_R3CTrayIcon@@8				; CTrayIcon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTrayIcon@@8				; CTrayIcon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CTrayIcon@@8			; CTrayIcon::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??0CTrayIcon@@QAE@I@Z				; CTrayIcon::CTrayIcon
PUBLIC	?OnTrayNotify@CTrayIcon@@UAEJIJ@Z		; CTrayIcon::OnTrayNotify
PUBLIC	?OnTaskBarCreate@CTrayIcon@@UAEJIJ@Z		; CTrayIcon::OnTaskBarCreate
PUBLIC	??0CTrayHook@CTrayIcon@@QAE@XZ			; CTrayIcon::CTrayHook::CTrayHook
PUBLIC	??1CTrayHook@CTrayIcon@@UAE@XZ			; CTrayIcon::CTrayHook::~CTrayHook
PUBLIC	??_7CTrayIcon@@6B@				; CTrayIcon::`vftable'
PUBLIC	??_GCTrayIcon@@UAEPAXI@Z			; CTrayIcon::`scalar deleting destructor'
EXTRN	??0CCmdTarget@@QAE@XZ:NEAR			; CCmdTarget::CCmdTarget
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?OnFinalRelease@CCmdTarget@@UAEXXZ:NEAR		; CCmdTarget::OnFinalRelease
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	??1CCmdTarget@@UAE@XZ:NEAR			; CCmdTarget::~CCmdTarget
EXTRN	?Dump@CCmdTarget@@UBEXAAVCDumpContext@@@Z:NEAR	; CCmdTarget::Dump
EXTRN	?AssertValid@CCmdTarget@@UBEXXZ:NEAR		; CCmdTarget::AssertValid
EXTRN	?GetMessageMap@CCmdTarget@@MBEPBUAFX_MSGMAP@@XZ:NEAR ; CCmdTarget::GetMessageMap
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CCmdTarget::GetInterfaceMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	?AfxLoadString@@YGHIPADI@Z:NEAR			; AfxLoadString
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:NEAR	; CObject::Serialize
EXTRN	??0CTrayIconPosition@@QAE@XZ:NEAR		; CTrayIconPosition::CTrayIconPosition
EXTRN	??1CTrayIconPosition@@UAE@XZ:NEAR		; CTrayIconPosition::~CTrayIconPosition
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	_memset:NEAR
EXTRN	??_ECTrayIcon@@UAEPAXI@Z:NEAR			; CTrayIcon::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
xdata$x	SEGMENT
$T191218 DD	0ffffffffH
	DD	FLAT:$L191208
	DD	00H
	DD	FLAT:$L191209
	DD	01H
	DD	FLAT:$L191210
	DD	02H
	DD	FLAT:$L191211
$T191215 DD	019930520H
	DD	04H
	DD	FLAT:$T191218
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CTrayIcon@@6B@
CONST	SEGMENT
??_7CTrayIcon@@6B@ DD FLAT:??_R4CTrayIcon@@6B@		; CTrayIcon::`vftable'
	DD	FLAT:?GetRuntimeClass@CTrayIcon@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECTrayIcon@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CCmdTarget@@UBEXXZ
	DD	FLAT:?Dump@CCmdTarget@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CCmdTarget@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CCmdTarget@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?OnTrayNotify@CTrayIcon@@UAEJIJ@Z
	DD	FLAT:?OnTaskBarCreate@CTrayIcon@@UAEJIJ@Z
CONST	ENDS
;	COMDAT ??_R4CTrayIcon@@6B@
rdata$r	SEGMENT
??_R4CTrayIcon@@6B@ DD 00H				; CTrayIcon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTrayIcon@@@8
	DD	FLAT:??_R3CTrayIcon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTrayIcon@@@8
_DATA	SEGMENT
??_R0?AVCTrayIcon@@@8 DD FLAT:??_7type_info@@6B@	; CTrayIcon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTrayIcon@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CTrayIcon@@8
rdata$r	SEGMENT
??_R3CTrayIcon@@8 DD 00H				; CTrayIcon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CTrayIcon@@8
rdata$r	ENDS
;	COMDAT ??_R2CTrayIcon@@8
rdata$r	SEGMENT
??_R2CTrayIcon@@8 DD FLAT:??_R1A@?0A@A@CTrayIcon@@8	; CTrayIcon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CTrayIcon@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CTrayIcon@@8 DD FLAT:??_R0?AVCTrayIcon@@@8	; CTrayIcon::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_uID$ = 8						; size = 4
??0CTrayIcon@@QAE@I@Z PROC NEAR				; CTrayIcon::CTrayIcon
; _this$ = ecx

; 29   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	6a ff		 push	 -1
  00035	68 00 00 00 00	 push	 __ehhandler$??0CTrayIcon@@QAE@I@Z
  0003a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00040	50		 push	 eax
  00041	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00048	51		 push	 ecx
  00049	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00050	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ??0CCmdTarget@@QAE@XZ	; CCmdTarget::CCmdTarget
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTrayIcon@@6B@
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	83 c1 24	 add	 ecx, 36			; 00000024H
  00071	e8 00 00 00 00	 call	 ??0CTrayIconPosition@@QAE@XZ ; CTrayIconPosition::CTrayIconPosition
  00076	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 e0 02 00
	00		 add	 ecx, 736		; 000002e0H
  00083	e8 00 00 00 00	 call	 ??0CTrayHook@CTrayIcon@@QAE@XZ
  00088	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0008c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	81 c1 f4 02 00
	00		 add	 ecx, 756		; 000002f4H
  00095	e8 00 00 00 00	 call	 ??0CTrayHook@CTrayIcon@@QAE@XZ
  0009a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 30   : 	// Initialize NOTIFYICONDATA
; 31   : 	memset(&m_nid, 0 , sizeof(m_nid));

  0009e	68 e8 01 00 00	 push	 488			; 000001e8H
  000a3	6a 00		 push	 0
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _memset
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 	m_nid.cbSize = sizeof(m_nid);

  000b7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	c7 82 f8 00 00
	00 e8 01 00 00	 mov	 DWORD PTR [edx+248], 488 ; 000001e8H

; 33   : 	m_nid.uID = uID;	// never changes after construction

  000c4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _uID$[ebp]
  000ca	89 88 00 01 00
	00		 mov	 DWORD PTR [eax+256], ecx

; 34   : 
; 35   : 	m_notifyHook.m_pTrayIcon = this; // notification window hook

  000d0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	89 82 f0 02 00
	00		 mov	 DWORD PTR [edx+752], eax

; 36   : 	m_parentHook.m_pTrayIcon = this;	// parent window hook

  000dc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	89 91 04 03 00
	00		 mov	 DWORD PTR [ecx+772], edx

; 37   : 	m_bDbClicked = false;

  000e8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	c6 80 08 03 00
	00 00		 mov	 BYTE PTR [eax+776], 0

; 38   : 	m_bRClick = false;

  000f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	c6 81 09 03 00
	00 00		 mov	 BYTE PTR [ecx+777], 0

; 39   : 	m_pMenu = NULL;

  000fc	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 40   : 	// Use resource string as tip if there is one
; 41   : 	AfxLoadString(uID, m_nid.szTip, sizeof(m_nid.szTip));	

  00106	68 80 00 00 00	 push	 128			; 00000080H
  0010b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	05 10 01 00 00	 add	 eax, 272		; 00000110H
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _uID$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ?AfxLoadString@@YGHIPADI@Z ; AfxLoadString

; 42   : }

  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00127	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L191208:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCmdTarget@@UAE@XZ	; CCmdTarget::~CCmdTarget
$L191209:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 24	 add	 ecx, 36			; 00000024H
  0000e	e9 00 00 00 00	 jmp	 ??1CTrayIconPosition@@UAE@XZ ; CTrayIconPosition::~CTrayIconPosition
$L191210:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 e0 02 00
	00		 add	 ecx, 736		; 000002e0H
  0001c	e9 00 00 00 00	 jmp	 ??1CTrayHook@CTrayIcon@@UAE@XZ
$L191211:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 f4 02 00
	00		 add	 ecx, 756		; 000002f4H
  0002a	e9 00 00 00 00	 jmp	 ??1CTrayHook@CTrayIcon@@UAE@XZ
__ehhandler$??0CTrayIcon@@QAE@I@Z:
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191215
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTrayIcon@@QAE@I@Z ENDP				; CTrayIcon::CTrayIcon
PUBLIC	??1CTrayIcon@@UAE@XZ				; CTrayIcon::~CTrayIcon
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCTrayIcon@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTrayIcon@@UAEPAXI@Z PROC NEAR			; CTrayIcon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CTrayIcon@@UAE@XZ	; CTrayIcon::~CTrayIcon
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L190138
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L190138:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GCTrayIcon@@UAEPAXI@Z ENDP				; CTrayIcon::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_R4CTrayHook@CTrayIcon@@6B@			; CTrayIcon::CTrayHook::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTrayHook@CTrayIcon@@@8			; CTrayIcon::CTrayHook `RTTI Type Descriptor'
PUBLIC	??_R3CTrayHook@CTrayIcon@@8			; CTrayIcon::CTrayHook::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTrayHook@CTrayIcon@@8			; CTrayIcon::CTrayHook::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CTrayHook@CTrayIcon@@8		; CTrayIcon::CTrayHook::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@CSubclassWnd@@8			; CSubclassWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCSubclassWnd@@@8			; CSubclassWnd `RTTI Type Descriptor'
PUBLIC	?WindowProc@CTrayHook@CTrayIcon@@EAEJIIJ@Z	; CTrayIcon::CTrayHook::WindowProc
PUBLIC	??_7CTrayHook@CTrayIcon@@6B@			; CTrayIcon::CTrayHook::`vftable'
PUBLIC	??_GCTrayHook@CTrayIcon@@UAEPAXI@Z		; CTrayIcon::CTrayHook::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ:NEAR ; CSubclassWnd::GetRuntimeClass
EXTRN	??0CSubclassWnd@@QAE@XZ:NEAR			; CSubclassWnd::CSubclassWnd
EXTRN	?AssertValid@CSubclassWnd@@UBEXXZ:NEAR		; CSubclassWnd::AssertValid
EXTRN	?Dump@CSubclassWnd@@UBEXAAVCDumpContext@@@Z:NEAR ; CSubclassWnd::Dump
EXTRN	??_ECTrayHook@CTrayIcon@@UAEPAXI@Z:NEAR		; CTrayIcon::CTrayHook::`vector deleting destructor'
;	COMDAT ??_7CTrayHook@CTrayIcon@@6B@
CONST	SEGMENT
??_7CTrayHook@CTrayIcon@@6B@ DD FLAT:??_R4CTrayHook@CTrayIcon@@6B@ ; CTrayIcon::CTrayHook::`vftable'
	DD	FLAT:?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECTrayHook@CTrayIcon@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CSubclassWnd@@UBEXXZ
	DD	FLAT:?Dump@CSubclassWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?WindowProc@CTrayHook@CTrayIcon@@EAEJIIJ@Z
CONST	ENDS
;	COMDAT ??_R4CTrayHook@CTrayIcon@@6B@
rdata$r	SEGMENT
??_R4CTrayHook@CTrayIcon@@6B@ DD 00H			; CTrayIcon::CTrayHook::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTrayHook@CTrayIcon@@@8
	DD	FLAT:??_R3CTrayHook@CTrayIcon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTrayHook@CTrayIcon@@@8
_DATA	SEGMENT
??_R0?AVCTrayHook@CTrayIcon@@@8 DD FLAT:??_7type_info@@6B@ ; CTrayIcon::CTrayHook `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTrayHook@CTrayIcon@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CTrayHook@CTrayIcon@@8
rdata$r	SEGMENT
??_R3CTrayHook@CTrayIcon@@8 DD 00H			; CTrayIcon::CTrayHook::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CTrayHook@CTrayIcon@@8
rdata$r	ENDS
;	COMDAT ??_R2CTrayHook@CTrayIcon@@8
rdata$r	SEGMENT
??_R2CTrayHook@CTrayIcon@@8 DD FLAT:??_R1A@?0A@A@CTrayHook@CTrayIcon@@8 ; CTrayIcon::CTrayHook::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CSubclassWnd@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CTrayHook@CTrayIcon@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CTrayHook@CTrayIcon@@8 DD FLAT:??_R0?AVCTrayHook@CTrayIcon@@@8 ; CTrayIcon::CTrayHook::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CSubclassWnd@@8 DD FLAT:??_R0?AVCSubclassWnd@@@8 ; CSubclassWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCSubclassWnd@@@8
_DATA	SEGMENT
??_R0?AVCSubclassWnd@@@8 DD FLAT:??_7type_info@@6B@	; CSubclassWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSubclassWnd@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??0CTrayHook@CTrayIcon@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTrayHook@CTrayIcon@@QAE@XZ PROC NEAR		; CTrayIcon::CTrayHook::CTrayHook, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CSubclassWnd@@QAE@XZ	; CSubclassWnd::CSubclassWnd
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTrayHook@CTrayIcon@@6B@
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??0CTrayHook@CTrayIcon@@QAE@XZ ENDP			; CTrayIcon::CTrayHook::CTrayHook
_TEXT	ENDS
EXTRN	??1CSubclassWnd@@UAE@XZ:NEAR			; CSubclassWnd::~CSubclassWnd
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1CTrayHook@CTrayIcon@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CTrayHook@CTrayIcon@@UAE@XZ PROC NEAR		; CTrayIcon::CTrayHook::~CTrayHook, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CSubclassWnd@@UAE@XZ	; CSubclassWnd::~CSubclassWnd
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1CTrayHook@CTrayIcon@@UAE@XZ ENDP			; CTrayIcon::CTrayHook::~CTrayHook
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCTrayHook@CTrayIcon@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTrayHook@CTrayIcon@@UAEPAXI@Z PROC NEAR		; CTrayIcon::CTrayHook::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CTrayHook@CTrayIcon@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L190146
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L190146:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GCTrayHook@CTrayIcon@@UAEPAXI@Z ENDP			; CTrayIcon::CTrayHook::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetIcon@CTrayIcon@@QAEHI@Z			; CTrayIcon::SetIcon
xdata$x	SEGMENT
$T191234 DD	0ffffffffH
	DD	FLAT:$L191227
	DD	00H
	DD	FLAT:$L191228
	DD	01H
	DD	FLAT:$L191229
	DD	02H
	DD	FLAT:$L191230
$T191232 DD	019930520H
	DD	04H
	DD	FLAT:$T191234
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTrayIcon@@UAE@XZ PROC NEAR				; CTrayIcon::~CTrayIcon
; _this$ = ecx

; 45   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	6a ff		 push	 -1
  00155	68 00 00 00 00	 push	 __ehhandler$??1CTrayIcon@@UAE@XZ
  0015a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00160	50		 push	 eax
  00161	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00168	51		 push	 ecx
  00169	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00170	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00173	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00176	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTrayIcon@@6B@
  0017c	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 46   : 	SetIcon(0); // remove icon from system tray

  00183	6a 00		 push	 0
  00185	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	e8 00 00 00 00	 call	 ?SetIcon@CTrayIcon@@QAEHI@Z ; CTrayIcon::SetIcon

; 47   : }

  0018d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00191	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	81 c1 f4 02 00
	00		 add	 ecx, 756		; 000002f4H
  0019a	e8 00 00 00 00	 call	 ??1CTrayHook@CTrayIcon@@UAE@XZ
  0019f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a6	81 c1 e0 02 00
	00		 add	 ecx, 736		; 000002e0H
  001ac	e8 00 00 00 00	 call	 ??1CTrayHook@CTrayIcon@@UAE@XZ
  001b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	83 c1 24	 add	 ecx, 36			; 00000024H
  001bb	e8 00 00 00 00	 call	 ??1CTrayIconPosition@@UAE@XZ ; CTrayIconPosition::~CTrayIconPosition
  001c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	e8 00 00 00 00	 call	 ??1CCmdTarget@@UAE@XZ	; CCmdTarget::~CCmdTarget
  001cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001d9	83 c4 10	 add	 esp, 16			; 00000010H
  001dc	3b ec		 cmp	 ebp, esp
  001de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L191227:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1CCmdTarget@@UAE@XZ	; CCmdTarget::~CCmdTarget
$L191228:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 24	 add	 ecx, 36			; 00000024H
  00047	e9 00 00 00 00	 jmp	 ??1CTrayIconPosition@@UAE@XZ ; CTrayIconPosition::~CTrayIconPosition
$L191229:
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	81 c1 e0 02 00
	00		 add	 ecx, 736		; 000002e0H
  00055	e9 00 00 00 00	 jmp	 ??1CTrayHook@CTrayIcon@@UAE@XZ
$L191230:
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	81 c1 f4 02 00
	00		 add	 ecx, 756		; 000002f4H
  00063	e9 00 00 00 00	 jmp	 ??1CTrayHook@CTrayIcon@@UAE@XZ
__ehhandler$??1CTrayIcon@@UAE@XZ:
  00068	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191232
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CTrayIcon@@UAE@XZ ENDP				; CTrayIcon::~CTrayIcon
PUBLIC	?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z	; CSubclassWnd::HookWindow
PUBLIC	?SetNotificationWnd@CTrayIcon@@QAEXPAVCWnd@@I@Z	; CTrayIcon::SetNotificationWnd
EXTRN	__imp__IsWindow@4:NEAR
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
EXTRN	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ:NEAR	; CWnd::GetSafeHwnd
EXTRN	?GetTopLevelParent@CWnd@@QBEPAV1@XZ:NEAR	; CWnd::GetTopLevelParent
EXTRN	?InitializePositionTracking@CTrayIconPosition@@QAEXPAUHWND__@@H@Z:NEAR ; CTrayIconPosition::InitializePositionTracking
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv91 = -12						; size = 4
_pParentWnd$ = -8					; size = 4
_this$ = -4						; size = 4
_pNotifyWnd$ = 8					; size = 4
_uCbMsg$ = 12						; size = 4
?SetNotificationWnd@CTrayIcon@@QAEXPAVCWnd@@I@Z PROC NEAR ; CTrayIcon::SetNotificationWnd
; _this$ = ecx

; 53   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001f6	56		 push	 esi
  001f7	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  001fe	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00205	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0020c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	// If the following assert fails, you're probably
; 55   : 	// calling me before you created your window. Oops.
; 56   : 	ASSERT(pNotifyWnd==NULL || ::IsWindow(pNotifyWnd->GetSafeHwnd()));

  0020f	83 7d 08 00	 cmp	 DWORD PTR _pNotifyWnd$[ebp], 0
  00213	74 2d		 je	 SHORT $L191236
  00215	8b 4d 08	 mov	 ecx, DWORD PTR _pNotifyWnd$[ebp]
  00218	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  0021d	8b f4		 mov	 esi, esp
  0021f	50		 push	 eax
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022d	85 c0		 test	 eax, eax
  0022f	75 11		 jne	 SHORT $L191236
  00231	6a 38		 push	 56			; 00000038H
  00233	68 00 00 00 00	 push	 OFFSET FLAT:$SG190156
  00238	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0023d	85 c0		 test	 eax, eax
  0023f	74 01		 je	 SHORT $L191236
  00241	cc		 int	 3
$L191236:

; 57   : 	m_nid.hWnd = pNotifyWnd->GetSafeHwnd();

  00242	8b 4d 08	 mov	 ecx, DWORD PTR _pNotifyWnd$[ebp]
  00245	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  0024a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	89 81 fc 00 00
	00		 mov	 DWORD PTR [ecx+252], eax

; 58   : 
; 59   : 	ASSERT(uCbMsg==0 || uCbMsg>=WM_USER);

  00253	83 7d 0c 00	 cmp	 DWORD PTR _uCbMsg$[ebp], 0
  00257	74 1a		 je	 SHORT $L191237
  00259	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _uCbMsg$[ebp], 1024 ; 00000400H
  00260	73 11		 jae	 SHORT $L191237
  00262	6a 3b		 push	 59			; 0000003bH
  00264	68 00 00 00 00	 push	 OFFSET FLAT:$SG190158
  00269	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0026e	85 c0		 test	 eax, eax
  00270	74 01		 je	 SHORT $L191237
  00272	cc		 int	 3
$L191237:

; 60   : 	m_nid.uCallbackMessage = uCbMsg;

  00273	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00276	8b 4d 0c	 mov	 ecx, DWORD PTR _uCbMsg$[ebp]
  00279	89 88 08 01 00
	00		 mov	 DWORD PTR [eax+264], ecx

; 61   : 
; 62   : 	CWnd* pParentWnd = pNotifyWnd ? pNotifyWnd->GetTopLevelParent() : NULL;

  0027f	83 7d 08 00	 cmp	 DWORD PTR _pNotifyWnd$[ebp], 0
  00283	74 0d		 je	 SHORT $L191238
  00285	8b 4d 08	 mov	 ecx, DWORD PTR _pNotifyWnd$[ebp]
  00288	e8 00 00 00 00	 call	 ?GetTopLevelParent@CWnd@@QBEPAV1@XZ ; CWnd::GetTopLevelParent
  0028d	89 45 f4	 mov	 DWORD PTR tv91[ebp], eax
  00290	eb 07		 jmp	 SHORT $L191239
$L191238:
  00292	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$L191239:
  00299	8b 55 f4	 mov	 edx, DWORD PTR tv91[ebp]
  0029c	89 55 f8	 mov	 DWORD PTR _pParentWnd$[ebp], edx

; 63   : 
; 64   : 	// Install window hooks. Must be different because
; 65   : 	// taskbar creation message only goes to top-level parent.
; 66   : 	m_notifyHook.HookWindow(pNotifyWnd);

  0029f	8b 45 08	 mov	 eax, DWORD PTR _pNotifyWnd$[ebp]
  002a2	50		 push	 eax
  002a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a6	81 c1 e0 02 00
	00		 add	 ecx, 736		; 000002e0H
  002ac	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z ; CSubclassWnd::HookWindow

; 67   : 	if (pParentWnd!=pNotifyWnd)

  002b1	8b 4d f8	 mov	 ecx, DWORD PTR _pParentWnd$[ebp]
  002b4	3b 4d 08	 cmp	 ecx, DWORD PTR _pNotifyWnd$[ebp]
  002b7	74 12		 je	 SHORT $L190160

; 68   : 		m_parentHook.HookWindow(pParentWnd);

  002b9	8b 55 f8	 mov	 edx, DWORD PTR _pParentWnd$[ebp]
  002bc	52		 push	 edx
  002bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c0	81 c1 f4 02 00
	00		 add	 ecx, 756		; 000002f4H
  002c6	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z ; CSubclassWnd::HookWindow
$L190160:

; 69   : 	m_tipPosition.InitializePositionTracking(m_nid.hWnd,m_nid.uID);

  002cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ce	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  002d4	51		 push	 ecx
  002d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002d8	8b 82 fc 00 00
	00		 mov	 eax, DWORD PTR [edx+252]
  002de	50		 push	 eax
  002df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e2	83 c1 24	 add	 ecx, 36			; 00000024H
  002e5	e8 00 00 00 00	 call	 ?InitializePositionTracking@CTrayIconPosition@@QAEXPAUHWND__@@H@Z ; CTrayIconPosition::InitializePositionTracking

; 70   : }

  002ea	5e		 pop	 esi
  002eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ee	3b ec		 cmp	 ebp, esp
  002f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 08 00	 ret	 8
?SetNotificationWnd@CTrayIcon@@QAEXPAVCWnd@@I@Z ENDP	; CTrayIcon::SetNotificationWnd
_TEXT	ENDS
EXTRN	?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z:NEAR ; CSubclassWnd::HookWindow
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\subclass.h
;	COMDAT ?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pWnd$ = 8						; size = 4
?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z PROC NEAR	; CSubclassWnd::HookWindow, COMDAT
; _this$ = ecx

; 38   : 	BOOL	HookWindow(CWnd* pWnd)	{ return HookWindow(pWnd->GetSafeHwnd()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ; CSubclassWnd::HookWindow
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?HookWindow@CSubclassWnd@@QAEHPAVCWnd@@@Z ENDP		; CSubclassWnd::HookWindow
_TEXT	ENDS
PUBLIC	?SetIcon@CTrayIcon@@QAEHPAUHICON__@@PBD@Z	; CTrayIcon::SetIcon
EXTRN	?AfxGetApp@@YGPAVCWinApp@@XZ:NEAR		; AfxGetApp
EXTRN	?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z:NEAR	; CWinApp::LoadIconA
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\trayicon.cpp
_TEXT	SEGMENT
_hicon$ = -8						; size = 4
_this$ = -4						; size = 4
_uID$ = 8						; size = 4
?SetIcon@CTrayIcon@@QAEHI@Z PROC NEAR			; CTrayIcon::SetIcon
; _this$ = ecx

; 78   : { 

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	83 ec 08	 sub	 esp, 8
  00306	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0030d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00314	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   : 	HICON hicon=NULL;

  00317	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hicon$[ebp], 0

; 80   : 	if (uID) {

  0031e	83 7d 08 00	 cmp	 DWORD PTR _uID$[ebp], 0
  00322	74 2a		 je	 SHORT $L190166

; 81   : 		AfxLoadString(uID, m_nid.szTip, sizeof(m_nid.szTip));

  00324	68 80 00 00 00	 push	 128			; 00000080H
  00329	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0032c	05 10 01 00 00	 add	 eax, 272		; 00000110H
  00331	50		 push	 eax
  00332	8b 4d 08	 mov	 ecx, DWORD PTR _uID$[ebp]
  00335	51		 push	 ecx
  00336	e8 00 00 00 00	 call	 ?AfxLoadString@@YGHIPADI@Z ; AfxLoadString

; 82   : 		hicon = AfxGetApp()->LoadIcon(uID);

  0033b	8b 55 08	 mov	 edx, DWORD PTR _uID$[ebp]
  0033e	52		 push	 edx
  0033f	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  00344	8b c8		 mov	 ecx, eax
  00346	e8 00 00 00 00	 call	 ?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z ; CWinApp::LoadIconA
  0034b	89 45 f8	 mov	 DWORD PTR _hicon$[ebp], eax
$L190166:

; 83   : 	}
; 84   : 	return SetIcon(hicon, NULL);

  0034e	6a 00		 push	 0
  00350	8b 45 f8	 mov	 eax, DWORD PTR _hicon$[ebp]
  00353	50		 push	 eax
  00354	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	e8 00 00 00 00	 call	 ?SetIcon@CTrayIcon@@QAEHPAUHICON__@@PBD@Z ; CTrayIcon::SetIcon

; 85   : }

  0035c	83 c4 08	 add	 esp, 8
  0035f	3b ec		 cmp	 ebp, esp
  00361	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00366	8b e5		 mov	 esp, ebp
  00368	5d		 pop	 ebp
  00369	c2 04 00	 ret	 4
?SetIcon@CTrayIcon@@QAEHI@Z ENDP			; CTrayIcon::SetIcon
_TEXT	ENDS
EXTRN	__imp___snprintf:NEAR
EXTRN	__imp__Shell_NotifyIconA@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_bRet$ = -12						; size = 4
_msg$ = -8						; size = 4
_this$ = -4						; size = 4
_hicon$ = 8						; size = 4
_lpTip$ = 12						; size = 4
?SetIcon@CTrayIcon@@QAEHPAUHICON__@@PBD@Z PROC NEAR	; CTrayIcon::SetIcon
; _this$ = ecx

; 91   : {

  00370	55		 push	 ebp
  00371	8b ec		 mov	 ebp, esp
  00373	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00376	56		 push	 esi
  00377	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0037e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00385	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0038c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 	UINT msg;
; 93   : 	m_nid.uFlags = 0;

  0038f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00392	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0

; 94   : 
; 95   : 	// Set the icon
; 96   : 	if (hicon) {

  0039c	83 7d 08 00	 cmp	 DWORD PTR _hicon$[ebp], 0
  003a0	74 35		 je	 SHORT $L190173

; 97   : 		// Add or replace icon in system tray
; 98   : 		msg = m_nid.hIcon ? NIM_MODIFY : NIM_ADD;

  003a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a5	33 d2		 xor	 edx, edx
  003a7	83 b9 0c 01 00
	00 00		 cmp	 DWORD PTR [ecx+268], 0
  003ae	0f 95 c2	 setne	 dl
  003b1	89 55 f8	 mov	 DWORD PTR _msg$[ebp], edx

; 99   : 		m_nid.hIcon = hicon;

  003b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003b7	8b 4d 08	 mov	 ecx, DWORD PTR _hicon$[ebp]
  003ba	89 88 0c 01 00
	00		 mov	 DWORD PTR [eax+268], ecx

; 100  : 		m_nid.uFlags |= NIF_ICON;

  003c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003c3	8b 82 04 01 00
	00		 mov	 eax, DWORD PTR [edx+260]
  003c9	83 c8 02	 or	 eax, 2
  003cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003cf	89 81 04 01 00
	00		 mov	 DWORD PTR [ecx+260], eax

; 101  : 	} else { // remove icon from tray

  003d5	eb 1d		 jmp	 SHORT $L190174
$L190173:

; 102  : 		if (m_nid.hIcon==NULL)

  003d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003da	83 ba 0c 01 00
	00 00		 cmp	 DWORD PTR [edx+268], 0
  003e1	75 0a		 jne	 SHORT $L190175

; 103  : 			return TRUE;		// already deleted

  003e3	b8 01 00 00 00	 mov	 eax, 1
  003e8	e9 ca 00 00 00	 jmp	 $L190171
$L190175:

; 104  : 		msg = NIM_DELETE;

  003ed	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _msg$[ebp], 2
$L190174:

; 105  : 	}
; 106  : 
; 107  : 	// Use the tip, if any
; 108  : 	if (lpTip)

  003f4	83 7d 0c 00	 cmp	 DWORD PTR _lpTip$[ebp], 0
  003f8	74 31		 je	 SHORT $L190176

; 109  : 	{
; 110  : 		_snprintf(m_nid.szTip,countof(m_nid.szTip)-1,"%s",lpTip);

  003fa	8b f4		 mov	 esi, esp
  003fc	8b 45 0c	 mov	 eax, DWORD PTR _lpTip$[ebp]
  003ff	50		 push	 eax
  00400	68 00 00 00 00	 push	 OFFSET FLAT:$SG190177
  00405	6a 7f		 push	 127			; 0000007fH
  00407	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040a	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00410	51		 push	 ecx
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00417	83 c4 10	 add	 esp, 16			; 00000010H
  0041a	3b f4		 cmp	 esi, esp
  0041c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 111  : 		m_nid.szTip[ countof(m_nid.szTip)-1 ] = '\0';

  00421	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00424	c6 82 8f 01 00
	00 00		 mov	 BYTE PTR [edx+399], 0
$L190176:

; 112  : //		_tcsncpy(m_nid.szTip, lpTip, countof(m_nid.szTip));
; 113  : 	}
; 114  : 	if (m_nid.szTip[0])

  0042b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042e	0f be 88 10 01
	00 00		 movsx	 ecx, BYTE PTR [eax+272]
  00435	85 c9		 test	 ecx, ecx
  00437	74 15		 je	 SHORT $L190178

; 115  : 		m_nid.uFlags |= NIF_TIP;

  00439	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0043c	8b 82 04 01 00
	00		 mov	 eax, DWORD PTR [edx+260]
  00442	83 c8 04	 or	 eax, 4
  00445	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00448	89 81 04 01 00
	00		 mov	 DWORD PTR [ecx+260], eax
$L190178:

; 116  : 
; 117  : 	// Use callback if any
; 118  : 	if (m_nid.uCallbackMessage && m_nid.hWnd)

  0044e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00451	83 ba 08 01 00
	00 00		 cmp	 DWORD PTR [edx+264], 0
  00458	74 21		 je	 SHORT $L190179
  0045a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0045d	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [eax+252], 0
  00464	74 15		 je	 SHORT $L190179

; 119  : 		m_nid.uFlags |= NIF_MESSAGE;

  00466	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00469	8b 91 04 01 00
	00		 mov	 edx, DWORD PTR [ecx+260]
  0046f	83 ca 01	 or	 edx, 1
  00472	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00475	89 90 04 01 00
	00		 mov	 DWORD PTR [eax+260], edx
$L190179:

; 120  : 
; 121  : 	// Do it
; 122  : 	BOOL bRet = Shell_NotifyIcon(msg, &m_nid);

  0047b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047e	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00484	8b f4		 mov	 esi, esp
  00486	51		 push	 ecx
  00487	8b 55 f8	 mov	 edx, DWORD PTR _msg$[ebp]
  0048a	52		 push	 edx
  0048b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Shell_NotifyIconA@8
  00491	3b f4		 cmp	 esi, esp
  00493	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00498	89 45 f4	 mov	 DWORD PTR _bRet$[ebp], eax

; 123  : 	if (msg==NIM_DELETE || !bRet)

  0049b	83 7d f8 02	 cmp	 DWORD PTR _msg$[ebp], 2
  0049f	74 06		 je	 SHORT $L190182
  004a1	83 7d f4 00	 cmp	 DWORD PTR _bRet$[ebp], 0
  004a5	75 0d		 jne	 SHORT $L190181
$L190182:

; 124  : 		m_nid.hIcon = NULL;	// failed

  004a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004aa	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0
$L190181:

; 125  : 	return bRet;

  004b4	8b 45 f4	 mov	 eax, DWORD PTR _bRet$[ebp]
$L190171:

; 126  : }

  004b7	5e		 pop	 esi
  004b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  004bb	3b ec		 cmp	 ebp, esp
  004bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004c2	8b e5		 mov	 esp, ebp
  004c4	5d		 pop	 ebp
  004c5	c2 08 00	 ret	 8
?SetIcon@CTrayIcon@@QAEHPAUHICON__@@PBD@Z ENDP		; CTrayIcon::SetIcon
_TEXT	ENDS
PUBLIC	?ShowTrayIconBalloon@CTrayIcon@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0I@Z ; CTrayIcon::ShowTrayIconBalloon
EXTRN	?unSHOW_CLOSE_BUTTON@CBalloonHelp@@2IB:DWORD	; CBalloonHelp::unSHOW_CLOSE_BUTTON
EXTRN	?unSHOW_TOPMOST@CBalloonHelp@@2IB:DWORD		; CBalloonHelp::unSHOW_TOPMOST
EXTRN	?unDISABLE_XP_SHADOW@CBalloonHelp@@2IB:DWORD	; CBalloonHelp::unDISABLE_XP_SHADOW
EXTRN	?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z:NEAR ; CBalloonHelp::LaunchBalloon
EXTRN	??0CPoint@@QAE@XZ:NEAR				; CPoint::CPoint
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:NEAR	; CWnd::FromHandle
EXTRN	?GetTrayIconPosition@CTrayIconPosition@@QAEHAAVCPoint@@W4TrackType@1@W4Precision@1@@Z:NEAR ; CTrayIconPosition::GetTrayIconPosition
EXTRN	?RestoreTrayIcon@CTrayIconPosition@@QAEXPAUHICON__@@@Z:NEAR ; CTrayIconPosition::RestoreTrayIcon
EXTRN	__imp__GetDesktopWindow@0:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T191254 DD	0ffffffffH
	DD	FLAT:$L191245
	DD	00H
	DD	FLAT:$L191246
	DD	01H
	DD	FLAT:$L191247
$T191249 DD	019930520H
	DD	03H
	DD	FLAT:$T191254
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv147 = -52						; size = 4
tv154 = -48						; size = 4
$T191244 = -44						; size = 4
_bIconFound$ = -40					; size = 4
_ptIcon$ = -32						; size = 8
_eTrackType$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strTitle$ = 8						; size = 4
_str$ = 12						; size = 4
_unTimeOut$ = 16					; size = 4
?ShowTrayIconBalloon@CTrayIcon@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0I@Z PROC NEAR ; CTrayIcon::ShowTrayIconBalloon
; _this$ = ecx

; 129  : {

  004d0	55		 push	 ebp
  004d1	8b ec		 mov	 ebp, esp
  004d3	6a ff		 push	 -1
  004d5	68 00 00 00 00	 push	 __ehhandler$?ShowTrayIconBalloon@CTrayIcon@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0I@Z
  004da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  004e0	50		 push	 eax
  004e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  004e8	83 ec 28	 sub	 esp, 40			; 00000028H
  004eb	56		 push	 esi
  004ec	57		 push	 edi
  004ed	51		 push	 ecx
  004ee	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  004f1	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004f6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  004fb	f3 ab		 rep stosd
  004fd	59		 pop	 ecx
  004fe	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00501	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 130  : 	CTrayIconPosition::TrackType eTrackType = CTrayIconPosition::UseBothTechniquesDirectPrefered;

  00508	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _eTrackType$[ebp], 0

; 131  : 	//use m_tipPosition.Invalidate(); if you want to avoid few-seconds postion cashing (visual scan mode only)
; 132  : 	CPoint ptIcon;

  0050f	8d 4d e0	 lea	 ecx, DWORD PTR _ptIcon$[ebp]
  00512	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint

; 133  : 	BOOL bIconFound = m_tipPosition.GetTrayIconPosition(ptIcon, eTrackType);

  00517	6a 00		 push	 0
  00519	8b 45 ec	 mov	 eax, DWORD PTR _eTrackType$[ebp]
  0051c	50		 push	 eax
  0051d	8d 4d e0	 lea	 ecx, DWORD PTR _ptIcon$[ebp]
  00520	51		 push	 ecx
  00521	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00524	83 c1 24	 add	 ecx, 36			; 00000024H
  00527	e8 00 00 00 00	 call	 ?GetTrayIconPosition@CTrayIconPosition@@QAEHAAVCPoint@@W4TrackType@1@W4Precision@1@@Z ; CTrayIconPosition::GetTrayIconPosition
  0052c	89 45 d8	 mov	 DWORD PTR _bIconFound$[ebp], eax

; 134  : 
; 135  : 	if(bIconFound == -1)	

  0052f	83 7d d8 ff	 cmp	 DWORD PTR _bIconFound$[ebp], -1
  00533	75 34		 jne	 SHORT $L190192

; 136  : 		return;

  00535	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00539	8b f4		 mov	 esi, esp
  0053b	8d 4d 08	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  0053e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00544	3b f4		 cmp	 esi, esp
  00546	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0054b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00552	8b f4		 mov	 esi, esp
  00554	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00557	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0055d	3b f4		 cmp	 esi, esp
  0055f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00564	e9 c1 00 00 00	 jmp	 $L190188
$L190192:

; 137  : 
; 138  : 	m_tipPosition.RestoreTrayIcon(AfxGetApp()->LoadIcon(m_nid.uID));

  00569	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0056c	8b 82 00 01 00
	00		 mov	 eax, DWORD PTR [edx+256]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  00578	8b c8		 mov	 ecx, eax
  0057a	e8 00 00 00 00	 call	 ?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z ; CWinApp::LoadIconA
  0057f	50		 push	 eax
  00580	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00583	83 c1 24	 add	 ecx, 36			; 00000024H
  00586	e8 00 00 00 00	 call	 ?RestoreTrayIcon@CTrayIconPosition@@QAEXPAUHICON__@@@Z ; CTrayIconPosition::RestoreTrayIcon

; 139  : 	CBalloonHelp::LaunchBalloon( strTitle, str, ptIcon, 
; 140  : 		IDI_INFORMATION, CBalloonHelp::unSHOW_CLOSE_BUTTON|CBalloonHelp::unDISABLE_XP_SHADOW|CBalloonHelp::unSHOW_TOPMOST,
; 141  : 		CWnd::FromHandle(::GetDesktopWindow()), "", unTimeOut );

  0058b	8b 4d 10	 mov	 ecx, DWORD PTR _unTimeOut$[ebp]
  0058e	51		 push	 ecx
  0058f	51		 push	 ecx
  00590	8b cc		 mov	 ecx, esp
  00592	89 65 d4	 mov	 DWORD PTR $T191244[ebp], esp
  00595	8b f4		 mov	 esi, esp
  00597	68 00 00 00 00	 push	 OFFSET FLAT:$SG190197
  0059c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  005a2	3b f4		 cmp	 esi, esp
  005a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005a9	89 45 d0	 mov	 DWORD PTR tv154[ebp], eax
  005ac	8b 55 d0	 mov	 edx, DWORD PTR tv154[ebp]
  005af	89 55 cc	 mov	 DWORD PTR tv147[ebp], edx
  005b2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  005b6	8b f4		 mov	 esi, esp
  005b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDesktopWindow@0
  005be	3b f4		 cmp	 esi, esp
  005c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005c5	50		 push	 eax
  005c6	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  005cb	50		 push	 eax
  005cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?unSHOW_CLOSE_BUTTON@CBalloonHelp@@2IB ; CBalloonHelp::unSHOW_CLOSE_BUTTON
  005d1	0b 05 00 00 00
	00		 or	 eax, DWORD PTR ?unDISABLE_XP_SHADOW@CBalloonHelp@@2IB ; CBalloonHelp::unDISABLE_XP_SHADOW
  005d7	0b 05 00 00 00
	00		 or	 eax, DWORD PTR ?unSHOW_TOPMOST@CBalloonHelp@@2IB ; CBalloonHelp::unSHOW_TOPMOST
  005dd	50		 push	 eax
  005de	68 04 7f 00 00	 push	 32516			; 00007f04H
  005e3	8d 4d e0	 lea	 ecx, DWORD PTR _ptIcon$[ebp]
  005e6	51		 push	 ecx
  005e7	8d 55 0c	 lea	 edx, DWORD PTR _str$[ebp]
  005ea	52		 push	 edx
  005eb	8d 45 08	 lea	 eax, DWORD PTR _strTitle$[ebp]
  005ee	50		 push	 eax
  005ef	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  005f3	e8 00 00 00 00	 call	 ?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z ; CBalloonHelp::LaunchBalloon
  005f8	83 c4 20	 add	 esp, 32			; 00000020H

; 142  : }

  005fb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005ff	8b f4		 mov	 esi, esp
  00601	8d 4d 08	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  00604	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0060a	3b f4		 cmp	 esi, esp
  0060c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00611	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00618	8b f4		 mov	 esi, esp
  0061a	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  0061d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00623	3b f4		 cmp	 esi, esp
  00625	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L190188:
  0062a	52		 push	 edx
  0062b	8b cd		 mov	 ecx, ebp
  0062d	50		 push	 eax
  0062e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191253
  00634	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00639	58		 pop	 eax
  0063a	5a		 pop	 edx
  0063b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0063e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00645	5f		 pop	 edi
  00646	5e		 pop	 esi
  00647	83 c4 34	 add	 esp, 52			; 00000034H
  0064a	3b ec		 cmp	 ebp, esp
  0064c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00651	8b e5		 mov	 esp, ebp
  00653	5d		 pop	 ebp
  00654	c2 0c 00	 ret	 12			; 0000000cH
$L191253:
  00657	01 00 00 00	 DD	 1
  0065b	00 00 00 00	 DD	 $L191252
$L191252:
  0065f	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00663	08 00 00 00	 DD	 8
  00667	00 00 00 00	 DD	 $L191250
$L191250:
  0066b	70		 DB	 112			; 00000070H
  0066c	74		 DB	 116			; 00000074H
  0066d	49		 DB	 73			; 00000049H
  0066e	63		 DB	 99			; 00000063H
  0066f	6f		 DB	 111			; 0000006fH
  00670	6e		 DB	 110			; 0000006eH
  00671	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191245:
  00072	8b f4		 mov	 esi, esp
  00074	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191246:
  00084	8b f4		 mov	 esi, esp
  00086	8d 4d 08	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0008f	3b f4		 cmp	 esi, esp
  00091	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191247:
  00096	8b f4		 mov	 esi, esp
  00098	8b 4d d4	 mov	 ecx, DWORD PTR $T191244[ebp]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a1	3b f4		 cmp	 esi, esp
  000a3	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?ShowTrayIconBalloon@CTrayIcon@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0I@Z:
  000a8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191249
  000ad	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ShowTrayIconBalloon@CTrayIcon@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0I@Z ENDP ; CTrayIcon::ShowTrayIconBalloon
EXTRN	?WindowProc@CSubclassWnd@@MAEJIIJ@Z:NEAR	; CSubclassWnd::WindowProc
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
_wp$ = 12						; size = 4
_lp$ = 16						; size = 4
?WindowProc@CTrayHook@CTrayIcon@@EAEJIIJ@Z PROC NEAR	; CTrayIcon::CTrayHook::WindowProc
; _this$ = ecx

; 148  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp
  00683	51		 push	 ecx
  00684	56		 push	 esi
  00685	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0068c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 149  : 	if (msg==m_pTrayIcon->m_nid.uCallbackMessage &&
; 150  : 		 m_hWnd==m_pTrayIcon->m_nid.hWnd) {

  0068f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00692	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00695	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  00698	3b 91 08 01 00
	00		 cmp	 edx, DWORD PTR [ecx+264]
  0069e	75 3a		 jne	 SHORT $L190204
  006a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006a3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006a9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  006ac	3b 81 fc 00 00
	00		 cmp	 eax, DWORD PTR [ecx+252]
  006b2	75 26		 jne	 SHORT $L190204

; 151  : 
; 152  : 		m_pTrayIcon->OnTrayNotify(wp, lp);

  006b4	8b f4		 mov	 esi, esp
  006b6	8b 4d 10	 mov	 ecx, DWORD PTR _lp$[ebp]
  006b9	51		 push	 ecx
  006ba	8b 55 0c	 mov	 edx, DWORD PTR _wp$[ebp]
  006bd	52		 push	 edx
  006be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006c1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006c7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  006cc	8b c8		 mov	 ecx, eax
  006ce	ff 52 58	 call	 DWORD PTR [edx+88]
  006d1	3b f4		 cmp	 esi, esp
  006d3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 153  : 
; 154  : 	} else if (msg==WM_TASKBARCREATED) {

  006d8	eb 2f		 jmp	 SHORT $L190205
$L190204:
  006da	8b 45 08	 mov	 eax, DWORD PTR _msg$[ebp]
  006dd	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _WM_TASKBARCREATED
  006e3	75 24		 jne	 SHORT $L190205

; 155  : 		m_pTrayIcon->OnTaskBarCreate(wp, lp);

  006e5	8b f4		 mov	 esi, esp
  006e7	8b 4d 10	 mov	 ecx, DWORD PTR _lp$[ebp]
  006ea	51		 push	 ecx
  006eb	8b 55 0c	 mov	 edx, DWORD PTR _wp$[ebp]
  006ee	52		 push	 edx
  006ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006f2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  006f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006f8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  006fd	8b c8		 mov	 ecx, eax
  006ff	ff 52 5c	 call	 DWORD PTR [edx+92]
  00702	3b f4		 cmp	 esi, esp
  00704	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L190205:

; 156  : 	}
; 157  : 	return CSubclassWnd::WindowProc(msg, wp, lp);

  00709	8b 45 10	 mov	 eax, DWORD PTR _lp$[ebp]
  0070c	50		 push	 eax
  0070d	8b 4d 0c	 mov	 ecx, DWORD PTR _wp$[ebp]
  00710	51		 push	 ecx
  00711	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  00714	52		 push	 edx
  00715	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00718	e8 00 00 00 00	 call	 ?WindowProc@CSubclassWnd@@MAEJIIJ@Z ; CSubclassWnd::WindowProc

; 158  : }

  0071d	5e		 pop	 esi
  0071e	83 c4 04	 add	 esp, 4
  00721	3b ec		 cmp	 ebp, esp
  00723	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00728	8b e5		 mov	 esp, ebp
  0072a	5d		 pop	 ebp
  0072b	c2 0c 00	 ret	 12			; 0000000cH
?WindowProc@CTrayHook@CTrayIcon@@EAEJIIJ@Z ENDP		; CTrayIcon::CTrayHook::WindowProc
_TEXT	ENDS
EXTRN	__imp__GetDoubleClickTime@0:NEAR
EXTRN	__imp__SetTimer@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wID$ = 8						; size = 4
_lEvent$ = 12						; size = 4
?OnTrayNotify@CTrayIcon@@UAEJIJ@Z PROC NEAR		; CTrayIcon::OnTrayNotify
; _this$ = ecx

; 165  : {

  00730	55		 push	 ebp
  00731	8b ec		 mov	 ebp, esp
  00733	51		 push	 ecx
  00734	56		 push	 esi
  00735	57		 push	 edi
  00736	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0073d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 
; 167  : 	if (wID!=m_nid.uID ||
; 168  : 		(lEvent!=WM_RBUTTONUP && lEvent != WM_LBUTTONUP && lEvent!=WM_LBUTTONDBLCLK && lEvent != WM_LBUTTONDOWN))

  00740	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00743	8b 4d 08	 mov	 ecx, DWORD PTR _wID$[ebp]
  00746	3b 88 00 01 00
	00		 cmp	 ecx, DWORD PTR [eax+256]
  0074c	75 24		 jne	 SHORT $L190213
  0074e	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 517 ; 00000205H
  00755	74 22		 je	 SHORT $L190212
  00757	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 514 ; 00000202H
  0075e	74 19		 je	 SHORT $L190212
  00760	81 7d 0c 03 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 515 ; 00000203H
  00767	74 10		 je	 SHORT $L190212
  00769	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 513 ; 00000201H
  00770	74 07		 je	 SHORT $L190212
$L190213:

; 169  : 		return 0;

  00772	33 c0		 xor	 eax, eax
  00774	e9 b8 00 00 00	 jmp	 $L190211
$L190212:

; 170  : 
; 171  : 	if(lEvent == WM_LBUTTONDBLCLK)

  00779	81 7d 0c 03 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 515 ; 00000203H
  00780	75 0c		 jne	 SHORT $L190214

; 172  : 	{
; 173  : 		m_bDbClicked = true;

  00782	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00785	c6 82 08 03 00
	00 01		 mov	 BYTE PTR [edx+776], 1

; 174  : 	}
; 175  : 	else

  0078c	eb 0a		 jmp	 SHORT $L190215
$L190214:

; 176  : 	{
; 177  : 		m_bDbClicked = false;

  0078e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00791	c6 80 08 03 00
	00 00		 mov	 BYTE PTR [eax+776], 0
$L190215:

; 178  : 	}
; 179  : 
; 180  : 	if ( (lEvent == WM_RBUTTONUP) ) {

  00798	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 517 ; 00000205H
  0079f	75 42		 jne	 SHORT $L190216

; 181  : 		m_bRClick = true;

  007a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a4	c6 81 09 03 00
	00 01		 mov	 BYTE PTR [ecx+777], 1

; 182  : 		::SetTimer(m_nid.hWnd , TIMER_FOR_TRAY ,GetDoubleClickTime() / 3  ,NULL); 

  007ab	8b f4		 mov	 esi, esp
  007ad	6a 00		 push	 0
  007af	8b fc		 mov	 edi, esp
  007b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDoubleClickTime@0
  007b7	3b fc		 cmp	 edi, esp
  007b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007be	33 d2		 xor	 edx, edx
  007c0	b9 03 00 00 00	 mov	 ecx, 3
  007c5	f7 f1		 div	 ecx
  007c7	50		 push	 eax
  007c8	6a 0b		 push	 11			; 0000000bH
  007ca	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007cd	8b 82 fc 00 00
	00		 mov	 eax, DWORD PTR [edx+252]
  007d3	50		 push	 eax
  007d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  007da	3b f4		 cmp	 esi, esp
  007dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  : 	
; 184  : 	}
; 185  : 	else if(lEvent == WM_LBUTTONUP)

  007e1	eb 49		 jmp	 SHORT $L190217
$L190216:
  007e3	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _lEvent$[ebp], 514 ; 00000202H
  007ea	75 40		 jne	 SHORT $L190217

; 186  : 	{
; 187  : 		m_bRClick = false;

  007ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ef	c6 81 09 03 00
	00 00		 mov	 BYTE PTR [ecx+777], 0

; 188  : 		::SetTimer(m_nid.hWnd , TIMER_FOR_TRAY ,GetDoubleClickTime() / 3 ,NULL); 

  007f6	8b f4		 mov	 esi, esp
  007f8	6a 00		 push	 0
  007fa	8b fc		 mov	 edi, esp
  007fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDoubleClickTime@0
  00802	3b fc		 cmp	 edi, esp
  00804	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00809	33 d2		 xor	 edx, edx
  0080b	b9 03 00 00 00	 mov	 ecx, 3
  00810	f7 f1		 div	 ecx
  00812	50		 push	 eax
  00813	6a 0b		 push	 11			; 0000000bH
  00815	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00818	8b 82 fc 00 00
	00		 mov	 eax, DWORD PTR [edx+252]
  0081e	50		 push	 eax
  0081f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  00825	3b f4		 cmp	 esi, esp
  00827	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L190217:

; 189  : 	
; 190  : 	}
; 191  : 
; 192  : 	return 1; // handled

  0082c	b8 01 00 00 00	 mov	 eax, 1
$L190211:

; 193  : }

  00831	5f		 pop	 edi
  00832	5e		 pop	 esi
  00833	83 c4 04	 add	 esp, 4
  00836	3b ec		 cmp	 ebp, esp
  00838	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0083d	8b e5		 mov	 esp, ebp
  0083f	5d		 pop	 ebp
  00840	c2 08 00	 ret	 8
?OnTrayNotify@CTrayIcon@@UAEJIJ@Z ENDP			; CTrayIcon::OnTrayNotify
; Function compile flags: /Odt /RTCsu
_hIcon$ = -8						; size = 4
_this$ = -4						; size = 4
_wp$ = 8						; size = 4
_lp$ = 12						; size = 4
?OnTaskBarCreate@CTrayIcon@@UAEJIJ@Z PROC NEAR		; CTrayIcon::OnTaskBarCreate
; _this$ = ecx

; 199  : {

  00850	55		 push	 ebp
  00851	8b ec		 mov	 ebp, esp
  00853	83 ec 08	 sub	 esp, 8
  00856	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0085d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00864	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 200  : 	// Reinstall taskbar icon
; 201  : 	HICON hIcon = m_nid.hIcon;

  00867	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0086a	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00870	89 4d f8	 mov	 DWORD PTR _hIcon$[ebp], ecx

; 202  : 	m_nid.hIcon = NULL;

  00873	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00876	c7 82 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+268], 0

; 203  : 	if (hIcon)

  00880	83 7d f8 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  00884	74 0e		 je	 SHORT $L190225

; 204  : 		SetIcon(hIcon, NULL); // will reuse current tip

  00886	6a 00		 push	 0
  00888	8b 45 f8	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0088b	50		 push	 eax
  0088c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0088f	e8 00 00 00 00	 call	 ?SetIcon@CTrayIcon@@QAEHPAUHICON__@@PBD@Z ; CTrayIcon::SetIcon
$L190225:

; 205  : 	return 0;

  00894	33 c0		 xor	 eax, eax

; 206  : }

  00896	83 c4 08	 add	 esp, 8
  00899	3b ec		 cmp	 ebp, esp
  0089b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008a0	8b e5		 mov	 esp, ebp
  008a2	5d		 pop	 ebp
  008a3	c2 08 00	 ret	 8
?OnTaskBarCreate@CTrayIcon@@UAEJIJ@Z ENDP		; CTrayIcon::OnTaskBarCreate
_TEXT	ENDS
PUBLIC	??_GCShowMenu@@QAEPAXI@Z			; CShowMenu::`scalar deleting destructor'
PUBLIC	?CreatePopup@CTrayIcon@@QAEHPAUHWND__@@@Z	; CTrayIcon::CreatePopup
EXTRN	??0CShowMenu@@QAE@PAVCWnd@@KK@Z:NEAR		; CShowMenu::CShowMenu
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	?DisableItem@CShowMenu@@QAEXK@Z:NEAR		; CShowMenu::DisableItem
EXTRN	?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z:NEAR	; CShowMenu::ShowMenu
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
EXTRN	__imp__SetForegroundWindow@4:NEAR
EXTRN	__imp__GetCursorPos@4:NEAR
xdata$x	SEGMENT
$T191274 DD	0ffffffffH
	DD	FLAT:$L191267
$T191269 DD	019930520H
	DD	01H
	DD	FLAT:$T191274
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv137 = -60						; size = 4
tv79 = -56						; size = 4
tv77 = -52						; size = 4
$T191264 = -48						; size = 4
$T191263 = -44						; size = 4
$T191260 = -40						; size = 4
$T191259 = -36						; size = 4
_point$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hwnd$ = 8						; size = 4
?CreatePopup@CTrayIcon@@QAEHPAUHWND__@@@Z PROC NEAR	; CTrayIcon::CreatePopup
; _this$ = ecx

; 209  : {

  008b0	55		 push	 ebp
  008b1	8b ec		 mov	 ebp, esp
  008b3	6a ff		 push	 -1
  008b5	68 00 00 00 00	 push	 __ehhandler$?CreatePopup@CTrayIcon@@QAEHPAUHWND__@@@Z
  008ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  008c0	50		 push	 eax
  008c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  008c8	83 ec 30	 sub	 esp, 48			; 00000030H
  008cb	56		 push	 esi
  008cc	57		 push	 edi
  008cd	51		 push	 ecx
  008ce	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  008d1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008d6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  008db	f3 ab		 rep stosd
  008dd	59		 pop	 ecx
  008de	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 	m_pMenu = new CShowMenu(CWnd::FromHandle(hwnd),IDR_MENU_TRAYICON);

  008e1	6a 6c		 push	 108			; 0000006cH
  008e3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  008e8	83 c4 04	 add	 esp, 4
  008eb	89 45 d8	 mov	 DWORD PTR $T191260[ebp], eax
  008ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  008f5	83 7d d8 00	 cmp	 DWORD PTR $T191260[ebp], 0
  008f9	74 1e		 je	 SHORT $L191261
  008fb	6a 00		 push	 0
  008fd	68 b5 00 00 00	 push	 181			; 000000b5H
  00902	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00905	50		 push	 eax
  00906	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  0090b	50		 push	 eax
  0090c	8b 4d d8	 mov	 ecx, DWORD PTR $T191260[ebp]
  0090f	e8 00 00 00 00	 call	 ??0CShowMenu@@QAE@PAVCWnd@@KK@Z ; CShowMenu::CShowMenu
  00914	89 45 cc	 mov	 DWORD PTR tv77[ebp], eax
  00917	eb 07		 jmp	 SHORT $L191262
$L191261:
  00919	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$L191262:
  00920	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00923	89 4d dc	 mov	 DWORD PTR $T191259[ebp], ecx
  00926	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0092d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00930	8b 45 dc	 mov	 eax, DWORD PTR $T191259[ebp]
  00933	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 211  : 
; 212  : 	if( !AfxGetUIManager()->UICanExit() )

  00936	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  0093b	89 45 c8	 mov	 DWORD PTR tv79[ebp], eax
  0093e	8b 4d c8	 mov	 ecx, DWORD PTR tv79[ebp]
  00941	8b 11		 mov	 edx, DWORD PTR [ecx]
  00943	8b f4		 mov	 esi, esp
  00945	8b 4d c8	 mov	 ecx, DWORD PTR tv79[ebp]
  00948	ff 52 0c	 call	 DWORD PTR [edx+12]
  0094b	3b f4		 cmp	 esi, esp
  0094d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00952	0f b6 c0	 movzx	 eax, al
  00955	85 c0		 test	 eax, eax
  00957	75 1d		 jne	 SHORT $L190234

; 213  : 	{
; 214  : 		m_pMenu->DisableItem(ID_MEMU_SETTING);

  00959	6a 68		 push	 104			; 00000068H
  0095b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0095e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00961	e8 00 00 00 00	 call	 ?DisableItem@CShowMenu@@QAEXK@Z ; CShowMenu::DisableItem

; 215  : 		m_pMenu->DisableItem(ID_APP_EXIT);

  00966	68 41 e1 00 00	 push	 57665			; 0000e141H
  0096b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0096e	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00971	e8 00 00 00 00	 call	 ?DisableItem@CShowMenu@@QAEXK@Z ; CShowMenu::DisableItem
$L190234:

; 216  : 	}
; 217  : 	//////////////////////////////////
; 218  : 	CPoint point;

  00976	8d 4d e4	 lea	 ecx, DWORD PTR _point$[ebp]
  00979	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint

; 219  : 	GetCursorPos(&point);

  0097e	8b f4		 mov	 esi, esp
  00980	8d 45 e4	 lea	 eax, DWORD PTR _point$[ebp]
  00983	50		 push	 eax
  00984	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4
  0098a	3b f4		 cmp	 esi, esp
  0098c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : 	::SetForegroundWindow(hwnd);	

  00991	8b f4		 mov	 esi, esp
  00993	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00996	51		 push	 ecx
  00997	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetForegroundWindow@4
  0099d	3b f4		 cmp	 esi, esp
  0099f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 221  : 	m_pMenu->ShowMenu(point);

  009a4	8d 55 e4	 lea	 edx, DWORD PTR _point$[ebp]
  009a7	52		 push	 edx
  009a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  009ab	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  009ae	e8 00 00 00 00	 call	 ?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z ; CShowMenu::ShowMenu

; 222  : 	delete m_pMenu;

  009b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  009b6	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  009b9	89 55 d0	 mov	 DWORD PTR $T191264[ebp], edx
  009bc	8b 45 d0	 mov	 eax, DWORD PTR $T191264[ebp]
  009bf	89 45 d4	 mov	 DWORD PTR $T191263[ebp], eax
  009c2	83 7d d4 00	 cmp	 DWORD PTR $T191263[ebp], 0
  009c6	74 0f		 je	 SHORT $L191265
  009c8	6a 01		 push	 1
  009ca	8b 4d d4	 mov	 ecx, DWORD PTR $T191263[ebp]
  009cd	e8 00 00 00 00	 call	 ??_GCShowMenu@@QAEPAXI@Z
  009d2	89 45 c4	 mov	 DWORD PTR tv137[ebp], eax
  009d5	eb 07		 jmp	 SHORT $L191266
$L191265:
  009d7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$L191266:

; 223  : 	m_pMenu = NULL;

  009de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  009e1	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 224  : 	return 0;

  009e8	33 c0		 xor	 eax, eax

; 225  : }

  009ea	52		 push	 edx
  009eb	8b cd		 mov	 ecx, ebp
  009ed	50		 push	 eax
  009ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191273
  009f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009f9	58		 pop	 eax
  009fa	5a		 pop	 edx
  009fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  009fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00a05	5f		 pop	 edi
  00a06	5e		 pop	 esi
  00a07	83 c4 3c	 add	 esp, 60			; 0000003cH
  00a0a	3b ec		 cmp	 ebp, esp
  00a0c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a11	8b e5		 mov	 esp, ebp
  00a13	5d		 pop	 ebp
  00a14	c2 04 00	 ret	 4
$L191273:
  00a17	01 00 00 00	 DD	 1
  00a1b	00 00 00 00	 DD	 $L191272
$L191272:
  00a1f	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00a23	08 00 00 00	 DD	 8
  00a27	00 00 00 00	 DD	 $L191270
$L191270:
  00a2b	70		 DB	 112			; 00000070H
  00a2c	6f		 DB	 111			; 0000006fH
  00a2d	69		 DB	 105			; 00000069H
  00a2e	6e		 DB	 110			; 0000006eH
  00a2f	74		 DB	 116			; 00000074H
  00a30	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191267:
  000b2	8b 45 d8	 mov	 eax, DWORD PTR $T191260[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000bb	59		 pop	 ecx
  000bc	c3		 ret	 0
__ehhandler$?CreatePopup@CTrayIcon@@QAEHPAUHWND__@@@Z:
  000bd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191269
  000c2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CreatePopup@CTrayIcon@@QAEHPAUHWND__@@@Z ENDP		; CTrayIcon::CreatePopup
PUBLIC	??1CShowMenu@@QAE@XZ				; CShowMenu::~CShowMenu
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCShowMenu@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCShowMenu@@QAEPAXI@Z PROC NEAR			; CShowMenu::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CShowMenu@@QAE@XZ	; CShowMenu::~CShowMenu
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L190241
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L190241:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GCShowMenu@@QAEPAXI@Z ENDP				; CShowMenu::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1BCMenu@@UAE@XZ:NEAR				; BCMenu::~BCMenu
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\showmenu.h
;	COMDAT ??1CShowMenu@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CShowMenu@@QAE@XZ PROC NEAR				; CShowMenu::~CShowMenu, COMDAT
; _this$ = ecx

; 11   : 	~CShowMenu(){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1BCMenu@@UAE@XZ	; BCMenu::~BCMenu
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1CShowMenu@@QAE@XZ ENDP				; CShowMenu::~CShowMenu
_TEXT	ENDS
PUBLIC	?MeasureItem@CTrayIcon@@QAEXPAUtagMEASUREITEMSTRUCT@@@Z ; CTrayIcon::MeasureItem
EXTRN	?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z:NEAR ; CShowMenu::MeasureItem
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\trayicon.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpMeasureItemStruct$ = 8				; size = 4
?MeasureItem@CTrayIcon@@QAEXPAUtagMEASUREITEMSTRUCT@@@Z PROC NEAR ; CTrayIcon::MeasureItem
; _this$ = ecx

; 227  : {

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	51		 push	 ecx
  00a44	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00a4b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 228  : 	if( m_pMenu )

  00a4e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a51	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00a55	74 0f		 je	 SHORT $L190245

; 229  : 	{
; 230  : 		m_pMenu->MeasureItem(lpMeasureItemStruct);

  00a57	8b 4d 08	 mov	 ecx, DWORD PTR _lpMeasureItemStruct$[ebp]
  00a5a	51		 push	 ecx
  00a5b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a5e	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00a61	e8 00 00 00 00	 call	 ?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z ; CShowMenu::MeasureItem
$L190245:

; 231  : 	}
; 232  : }

  00a66	83 c4 04	 add	 esp, 4
  00a69	3b ec		 cmp	 ebp, esp
  00a6b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a70	8b e5		 mov	 esp, ebp
  00a72	5d		 pop	 ebp
  00a73	c2 04 00	 ret	 4
?MeasureItem@CTrayIcon@@QAEXPAUtagMEASUREITEMSTRUCT@@@Z ENDP ; CTrayIcon::MeasureItem
_TEXT	ENDS
PUBLIC	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z	; ATL::_AtlInstallStringThunk
PUBLIC	?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z ; ATL::GetEnvironmentVariableWFake
EXTRN	__imp__GetEnvironmentVariableW@12:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT
_pszName$ = 8						; size = 4
_pszBuffer$ = 12					; size = 4
_nSize$ = 16						; size = 4
?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z PROC NEAR ; ATL::GetEnvironmentVariableWThunk, COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 184  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetEnvironmentVariableW), 
; 185  : 		GetEnvironmentVariableWFake, ::GetEnvironmentVariableW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetEnvironmentVariableW@12
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z ; ATL::GetEnvironmentVariableWFake
  0000f	68 14 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+20
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 186  : 
; 187  : 	return _strthunks.pfnGetEnvironmentVariableW(pszName, pszBuffer, nSize);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 0c	 mov	 edx, DWORD PTR _pszBuffer$[ebp]
  00025	52		 push	 edx
  00026	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  00029	50		 push	 eax
  0002a	ff 15 14 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+20
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 188  : }

  00037	5e		 pop	 esi
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z ENDP	; ATL::GetEnvironmentVariableWThunk
_TEXT	ENDS
PUBLIC	?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
PUBLIC	??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51 ; `ATL::_AtlInstallStringThunk'::`2'::`local static guard'
EXTRN	__imp__GetVersion@0:NEAR
;	COMDAT ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA
_BSS	SEGMENT
?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA DB 01H DUP (?) ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
_BSS	ENDS
;	COMDAT ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
_BSS	SEGMENT
??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51 DD 01H DUP (?) ; `ATL::_AtlInstallStringThunk'::`2'::`local static guard'
; Function compile flags: /Odt /RTCsu
_BSS	ENDS
;	COMDAT ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z
_TEXT	SEGMENT
_pfn$ = -4						; size = 4
_ppThunk$ = 8						; size = 4
_pfnWin9x$ = 12						; size = 4
_pfnNT$ = 16						; size = 4
?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z PROC NEAR	; ATL::_AtlInstallStringThunk, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 116  : #pragma warning (push)
; 117  : #pragma warning (disable : 4640)	// construction of local static object is not thread-safe
; 118  : 
; 119  : 	static bool s_bWin9x = (::GetVersion()&0x80000000) != 0;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
  00011	83 e0 01	 and	 eax, 1
  00014	75 2e		 jne	 SHORT $L26217
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
  0001c	83 c9 01	 or	 ecx, 1
  0001f	89 0d 00 00 00
	00		 mov	 DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51, ecx
  00025	8b f4		 mov	 esi, esp
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersion@0
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00039	f7 d8		 neg	 eax
  0003b	1b c0		 sbb	 eax, eax
  0003d	f7 d8		 neg	 eax
  0003f	a2 00 00 00 00	 mov	 BYTE PTR ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA, al ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
$L26217:

; 120  : 	
; 121  : #pragma warning (pop)
; 122  : 
; 123  : 	void* pfn;
; 124  : 	if (s_bWin9x)

  00044	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
  0004b	85 d2		 test	 edx, edx
  0004d	74 08		 je	 SHORT $L26219

; 125  : 		pfn = pfnWin9x;

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _pfnWin9x$[ebp]
  00052	89 45 fc	 mov	 DWORD PTR _pfn$[ebp], eax

; 126  : 	else

  00055	eb 06		 jmp	 SHORT $L26220
$L26219:

; 127  : 	{
; 128  : #ifdef _CSTRING_ALWAYS_THUNK
; 129  : 		pfn = pfnWin9x;
; 130  : 		(void)pfnNT;
; 131  : #else
; 132  : 		pfn = pfnNT;

  00057	8b 4d 10	 mov	 ecx, DWORD PTR _pfnNT$[ebp]
  0005a	89 4d fc	 mov	 DWORD PTR _pfn$[ebp], ecx
$L26220:

; 133  : #endif
; 134  : 	}
; 135  : 	InterlockedExchangePointer(ppThunk, pfn);

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _pfn$[ebp]
  00060	52		 push	 edx
  00061	8b 45 08	 mov	 eax, DWORD PTR _ppThunk$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 136  : }

  0006a	5e		 pop	 esi
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ENDP	; ATL::_AtlInstallStringThunk
_TEXT	ENDS
PUBLIC	??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
PUBLIC	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
PUBLIC	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
PUBLIC	?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate
PUBLIC	??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z		; ATL::CW2AEX<128>::CW2AEX<128>
PUBLIC	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ			; ATL::CW2AEX<128>::~CW2AEX<128>
PUBLIC	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ			; ATL::CW2AEX<128>::operator char *
PUBLIC	??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@	; `string'
EXTRN	__imp___CrtDbgReport:NEAR
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	__imp__GetEnvironmentVariableA@12:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191297 DD	0ffffffffH
	DD	FLAT:$L191287
	DD	00H
	DD	FLAT:$L191288
$T191290 DD	019930520H
	DD	02H
	DD	FLAT:$T191297
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
CONST	SEGMENT
??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@ DB 'nSize >= nSizeW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\cstringt.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT
$T191286 = -316						; size = 4
$T191284 = -312						; size = 4
$T191283 = -308						; size = 4
_pszNameA$ = -300					; size = 132
_pszBufferA$ = -160					; size = 132
_nSizeW$ = -24						; size = 4
_nSizeA$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszName$ = 8						; size = 4
_pszBuffer$ = 12					; size = 4
_nSize$ = 16						; size = 4
?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z PROC NEAR ; ATL::GetEnvironmentVariableWFake, COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00026	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 160  : 	ULONG nSizeA;
; 161  : 	ULONG nSizeW;
; 162  : 	CTempBuffer<char> pszBufferA;

  0003a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00040	e8 00 00 00 00	 call	 ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 163  : 	CW2A pszNameA(pszName);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  0004f	50		 push	 eax
  00050	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  00056	e8 00 00 00 00	 call	 ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ; ATL::CW2AEX<128>::CW2AEX<128>
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 164  : 
; 165  : 	nSizeA = ::GetEnvironmentVariableA(pszNameA, NULL, 0);

  0005f	8b f4		 mov	 esi, esp
  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  0006b	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetEnvironmentVariableA@12
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	89 45 ec	 mov	 DWORD PTR _nSizeA$[ebp], eax

; 166  : 	if (nSizeA == 0)

  00081	83 7d ec 00	 cmp	 DWORD PTR _nSizeA$[ebp], 0
  00085	75 36		 jne	 SHORT $L26322

; 167  : 		return 0;

  00087	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T191283[ebp], 0
  00091	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00095	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  000ad	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  000b2	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T191283[ebp]
  000b8	e9 33 01 00 00	 jmp	 $L26263
$L26322:

; 168  : 
; 169  : 	pszBufferA.Allocate(nSizeA*2);

  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _nSizeA$[ebp]
  000c0	d1 e1		 shl	 ecx, 1
  000c2	51		 push	 ecx
  000c3	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  000c9	e8 00 00 00 00	 call	 ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate

; 170  : 	::GetEnvironmentVariableA(pszNameA, pszBufferA, nSizeA);

  000ce	8b f4		 mov	 esi, esp
  000d0	8b 55 ec	 mov	 edx, DWORD PTR _nSizeA$[ebp]
  000d3	52		 push	 edx
  000d4	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  000da	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  000df	50		 push	 eax
  000e0	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  000e6	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  000eb	50		 push	 eax
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetEnvironmentVariableA@12
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  : 
; 172  : 	nSizeW = ::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, NULL, 0);

  000f9	8b f4		 mov	 esi, esp
  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	6a ff		 push	 -1
  00101	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00107	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  0010c	50		 push	 eax
  0010d	6a 00		 push	 0
  0010f	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00114	50		 push	 eax
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0011b	3b f4		 cmp	 esi, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	89 45 e8	 mov	 DWORD PTR _nSizeW$[ebp], eax

; 173  : 	if (nSize == 0)

  00125	83 7d 10 00	 cmp	 DWORD PTR _nSize$[ebp], 0
  00129	75 35		 jne	 SHORT $L26324

; 174  : 		return nSizeW;

  0012b	8b 45 e8	 mov	 eax, DWORD PTR _nSizeW$[ebp]
  0012e	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T191284[ebp], eax
  00134	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00138	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  0013e	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  00143	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00150	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  00155	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T191284[ebp]
  0015b	e9 90 00 00 00	 jmp	 $L26263
$L26324:

; 175  : 	ATLASSERT(nSize >= nSizeW);

  00160	8b 4d 10	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00163	3b 4d e8	 cmp	 ecx, DWORD PTR _nSizeW$[ebp]
  00166	73 2b		 jae	 SHORT $L191285
  00168	8b f4		 mov	 esi, esp
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
  0016f	6a 00		 push	 0
  00171	68 af 00 00 00	 push	 175			; 000000afH
  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  0017b	6a 02		 push	 2
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00183	83 c4 14	 add	 esp, 20			; 00000014H
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018d	83 f8 01	 cmp	 eax, 1
  00190	75 01		 jne	 SHORT $L191285
  00192	cc		 int	 3
$L191285:

; 176  : 	::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, pszBuffer, nSizeW);

  00193	8b f4		 mov	 esi, esp
  00195	8b 45 e8	 mov	 eax, DWORD PTR _nSizeW$[ebp]
  00198	50		 push	 eax
  00199	8b 4d 0c	 mov	 ecx, DWORD PTR _pszBuffer$[ebp]
  0019c	51		 push	 ecx
  0019d	6a ff		 push	 -1
  0019f	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  001a5	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  001aa	50		 push	 eax
  001ab	6a 00		 push	 0
  001ad	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  001b2	50		 push	 eax
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  001b9	3b f4		 cmp	 esi, esp
  001bb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 177  : 
; 178  : 	return nSizeW;

  001c0	8b 55 e8	 mov	 edx, DWORD PTR _nSizeW$[ebp]
  001c3	89 95 c4 fe ff
	ff		 mov	 DWORD PTR $T191286[ebp], edx
  001c9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001cd	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  001d3	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  001d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001df	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  001e5	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  001ea	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T191286[ebp]
$L26263:

; 179  : }

  001f0	52		 push	 edx
  001f1	8b cd		 mov	 ecx, ebp
  001f3	50		 push	 eax
  001f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191296
  001fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ff	58		 pop	 eax
  00200	5a		 pop	 edx
  00201	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00204	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0020b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00213	5f		 pop	 edi
  00214	5e		 pop	 esi
  00215	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  0021b	3b ec		 cmp	 ebp, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c2 0c 00	 ret	 12			; 0000000cH
$L191296:
  00228	02 00 00 00	 DD	 2
  0022c	00 00 00 00	 DD	 $L191295
$L191295:
  00230	60 ff ff ff	 DD	 -160			; ffffff60H
  00234	84 00 00 00	 DD	 132			; 00000084H
  00238	00 00 00 00	 DD	 $L191291
  0023c	d4 fe ff ff	 DD	 -300			; fffffed4H
  00240	84 00 00 00	 DD	 132			; 00000084H
  00244	00 00 00 00	 DD	 $L191292
$L191292:
  00248	70		 DB	 112			; 00000070H
  00249	73		 DB	 115			; 00000073H
  0024a	7a		 DB	 122			; 0000007aH
  0024b	4e		 DB	 78			; 0000004eH
  0024c	61		 DB	 97			; 00000061H
  0024d	6d		 DB	 109			; 0000006dH
  0024e	65		 DB	 101			; 00000065H
  0024f	41		 DB	 65			; 00000041H
  00250	00		 DB	 0
$L191291:
  00251	70		 DB	 112			; 00000070H
  00252	73		 DB	 115			; 00000073H
  00253	7a		 DB	 122			; 0000007aH
  00254	42		 DB	 66			; 00000042H
  00255	75		 DB	 117			; 00000075H
  00256	66		 DB	 102			; 00000066H
  00257	66		 DB	 102			; 00000066H
  00258	65		 DB	 101			; 00000065H
  00259	72		 DB	 114			; 00000072H
  0025a	41		 DB	 65			; 00000041H
  0025b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191287:
  00000	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
$L191288:
  0000b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191290
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z ENDP	; ATL::GetEnvironmentVariableWFake
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 158  : 	return( g_pfnGetThreadACP() );

  00004	8b f4		 mov	 esi, esp
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0000c	3b f4		 cmp	 esi, esp
  0000e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  : }

  00013	5e		 pop	 esi
  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z		; ATL::CompareStringWFake
EXTRN	__imp__CompareStringW@24:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT
_lcid$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_pszString1$ = 16					; size = 4
_nLength1$ = 20						; size = 4
_pszString2$ = 24					; size = 4
_nLength2$ = 28						; size = 4
?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z PROC NEAR	; ATL::CompareStringWThunk, COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 217  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCompareStringW), CompareStringWFake, ::CompareStringW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__CompareStringW@24
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z ; ATL::CompareStringWFake
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A ; ATL::_strthunks
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 218  : 
; 219  : 	return _strthunks.pfnCompareStringW(lcid, dwFlags, pszString1, nLength1, pszString2, nLength2);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 1c	 mov	 ecx, DWORD PTR _nLength2$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 18	 mov	 edx, DWORD PTR _pszString2$[ebp]
  00025	52		 push	 edx
  00026	8b 45 14	 mov	 eax, DWORD PTR _nLength1$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 10	 mov	 ecx, DWORD PTR _pszString1$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR _lcid$[ebp]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : }

  00043	5e		 pop	 esi
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	5d		 pop	 ebp
  0004c	c2 18 00	 ret	 24			; 00000018H
?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z ENDP		; ATL::CompareStringWThunk
_TEXT	ENDS
PUBLIC	?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	?AtlW2AHelper@@YGPADPADPB_WHI@Z			; AtlW2AHelper
PUBLIC	??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
EXTRN	__imp__lstrlenW@4:NEAR
EXTRN	__imp__CompareStringA@24:NEAR
EXTRN	__alloca_probe:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191320 DD	0ffffffffH
	DD	FLAT:$L191312
$T191314 DD	019930520H
	DD	01H
	DD	FLAT:$T191320
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT
tv147 = -76						; size = 4
tv142 = -72						; size = 4
tv149 = -68						; size = 4
tv89 = -64						; size = 4
tv84 = -60						; size = 4
tv91 = -56						; size = 4
$T191311 = -52						; size = 4
_pszAString2$ = -48					; size = 4
_pszAString1$ = -44					; size = 4
__AtlSafeAllocaManager$ = -36				; size = 4
__lpa_ex$ = -28						; size = 4
__lpw_ex$ = -24						; size = 4
__acp_ex$ = -20						; size = 4
__convert_ex$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lcid$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_pszString1$ = 16					; size = 4
_nLength1$ = 20						; size = 4
_pszString2$ = 24					; size = 4
_nLength2$ = 28						; size = 4
?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z PROC NEAR	; ATL::CompareStringWFake, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 40	 sub	 esp, 64			; 00000040H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  00020	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 193  : 	USES_CONVERSION_EX;

  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __convert_ex$[ebp], 0
  00033	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00038	89 45 ec	 mov	 DWORD PTR __acp_ex$[ebp], eax
  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __lpw_ex$[ebp], 0
  00042	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __lpa_ex$[ebp], 0
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 194  : 	
; 195  : 	LPCSTR pszAString1 = NULL;

  00058	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pszAString1$[ebp], 0

; 196  : 	if(pszString1 != NULL)

  0005f	83 7d 10 00	 cmp	 DWORD PTR _pszString1$[ebp], 0
  00063	0f 84 a1 00 00
	00		 je	 $L26349

; 197  : 	{
; 198  : 		pszAString1 = W2A_EX(pszString1,_ATL_SAFE_ALLOCA_DEF_THRESHOLD);

  00069	8b 45 10	 mov	 eax, DWORD PTR _pszString1$[ebp]
  0006c	89 45 e8	 mov	 DWORD PTR __lpw_ex$[ebp], eax
  0006f	83 7d e8 00	 cmp	 DWORD PTR __lpw_ex$[ebp], 0
  00073	75 09		 jne	 SHORT $L191305
  00075	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
  0007c	eb 76		 jmp	 SHORT $L191306
$L191305:
  0007e	8b f4		 mov	 esi, esp
  00080	8b 4d e8	 mov	 ecx, DWORD PTR __lpw_ex$[ebp]
  00083	51		 push	 ecx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00095	89 55 f0	 mov	 DWORD PTR __convert_ex$[ebp], edx
  00098	81 7d f0 00 04
	00 00		 cmp	 DWORD PTR __convert_ex$[ebp], 1024 ; 00000400H
  0009f	7f 2c		 jg	 SHORT $L191303
  000a1	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
  000aa	83 c4 04	 add	 esp, 4
  000ad	0f b6 c8	 movzx	 ecx, al
  000b0	85 c9		 test	 ecx, ecx
  000b2	74 19		 je	 SHORT $L191303
  000b4	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  000b7	83 c0 03	 add	 eax, 3
  000ba	83 e0 fc	 and	 eax, -4			; fffffffcH
  000bd	e8 00 00 00 00	 call	 __alloca_probe
  000c2	89 65 c4	 mov	 DWORD PTR tv84[ebp], esp
  000c5	8b 55 c4	 mov	 edx, DWORD PTR tv84[ebp]
  000c8	89 55 c0	 mov	 DWORD PTR tv89[ebp], edx
  000cb	eb 0f		 jmp	 SHORT $L191304
$L191303:
  000cd	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  000d4	e8 00 00 00 00	 call	 ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
  000d9	89 45 c0	 mov	 DWORD PTR tv89[ebp], eax
$L191304:
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR __acp_ex$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 f0	 mov	 edx, DWORD PTR __convert_ex$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 e8	 mov	 eax, DWORD PTR __lpw_ex$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d c0	 mov	 ecx, DWORD PTR tv89[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  000f1	89 45 c8	 mov	 DWORD PTR tv91[ebp], eax
$L191306:
  000f4	8b 55 c8	 mov	 edx, DWORD PTR tv91[ebp]
  000f7	89 55 d4	 mov	 DWORD PTR _pszAString1$[ebp], edx

; 199  : 		if(pszAString1 == NULL)

  000fa	83 7d d4 00	 cmp	 DWORD PTR _pszAString1$[ebp], 0
  000fe	75 0a		 jne	 SHORT $L26349

; 200  : 			AtlThrow(E_OUTOFMEMORY);

  00100	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00105	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L26349:

; 201  : 	}
; 202  : 
; 203  : 	LPCSTR pszAString2 = NULL;

  0010a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pszAString2$[ebp], 0

; 204  : 	if(pszString2 != NULL)

  00111	83 7d 18 00	 cmp	 DWORD PTR _pszString2$[ebp], 0
  00115	0f 84 a1 00 00
	00		 je	 $L26355

; 205  : 	{
; 206  : 		pszAString2 = W2A_EX(pszString2,_ATL_SAFE_ALLOCA_DEF_THRESHOLD);

  0011b	8b 45 18	 mov	 eax, DWORD PTR _pszString2$[ebp]
  0011e	89 45 e8	 mov	 DWORD PTR __lpw_ex$[ebp], eax
  00121	83 7d e8 00	 cmp	 DWORD PTR __lpw_ex$[ebp], 0
  00125	75 09		 jne	 SHORT $L191309
  00127	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
  0012e	eb 76		 jmp	 SHORT $L191310
$L191309:
  00130	8b f4		 mov	 esi, esp
  00132	8b 4d e8	 mov	 ecx, DWORD PTR __lpw_ex$[ebp]
  00135	51		 push	 ecx
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0013c	3b f4		 cmp	 esi, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00147	89 55 f0	 mov	 DWORD PTR __convert_ex$[ebp], edx
  0014a	81 7d f0 00 04
	00 00		 cmp	 DWORD PTR __convert_ex$[ebp], 1024 ; 00000400H
  00151	7f 2c		 jg	 SHORT $L191307
  00153	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
  0015c	83 c4 04	 add	 esp, 4
  0015f	0f b6 c8	 movzx	 ecx, al
  00162	85 c9		 test	 ecx, ecx
  00164	74 19		 je	 SHORT $L191307
  00166	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  00169	83 c0 03	 add	 eax, 3
  0016c	83 e0 fc	 and	 eax, -4			; fffffffcH
  0016f	e8 00 00 00 00	 call	 __alloca_probe
  00174	89 65 b8	 mov	 DWORD PTR tv142[ebp], esp
  00177	8b 55 b8	 mov	 edx, DWORD PTR tv142[ebp]
  0017a	89 55 b4	 mov	 DWORD PTR tv147[ebp], edx
  0017d	eb 0f		 jmp	 SHORT $L191308
$L191307:
  0017f	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  00182	50		 push	 eax
  00183	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  00186	e8 00 00 00 00	 call	 ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
  0018b	89 45 b4	 mov	 DWORD PTR tv147[ebp], eax
$L191308:
  0018e	8b 4d ec	 mov	 ecx, DWORD PTR __acp_ex$[ebp]
  00191	51		 push	 ecx
  00192	8b 55 f0	 mov	 edx, DWORD PTR __convert_ex$[ebp]
  00195	52		 push	 edx
  00196	8b 45 e8	 mov	 eax, DWORD PTR __lpw_ex$[ebp]
  00199	50		 push	 eax
  0019a	8b 4d b4	 mov	 ecx, DWORD PTR tv147[ebp]
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  001a3	89 45 bc	 mov	 DWORD PTR tv149[ebp], eax
$L191310:
  001a6	8b 55 bc	 mov	 edx, DWORD PTR tv149[ebp]
  001a9	89 55 d0	 mov	 DWORD PTR _pszAString2$[ebp], edx

; 207  : 		if(pszAString2 == NULL)

  001ac	83 7d d0 00	 cmp	 DWORD PTR _pszAString2$[ebp], 0
  001b0	75 0a		 jne	 SHORT $L26355

; 208  : 			AtlThrow(E_OUTOFMEMORY);

  001b2	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  001b7	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L26355:

; 209  : 	}
; 210  : 
; 211  : 	return ::CompareStringA(lcid, dwFlags, pszAString1, nLength1, pszAString2, nLength2);

  001bc	8b f4		 mov	 esi, esp
  001be	8b 45 1c	 mov	 eax, DWORD PTR _nLength2$[ebp]
  001c1	50		 push	 eax
  001c2	8b 4d d0	 mov	 ecx, DWORD PTR _pszAString2$[ebp]
  001c5	51		 push	 ecx
  001c6	8b 55 14	 mov	 edx, DWORD PTR _nLength1$[ebp]
  001c9	52		 push	 edx
  001ca	8b 45 d4	 mov	 eax, DWORD PTR _pszAString1$[ebp]
  001cd	50		 push	 eax
  001ce	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  001d1	51		 push	 ecx
  001d2	8b 55 08	 mov	 edx, DWORD PTR _lcid$[ebp]
  001d5	52		 push	 edx
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  001dc	3b f4		 cmp	 esi, esp
  001de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e3	89 45 cc	 mov	 DWORD PTR $T191311[ebp], eax
  001e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ed	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  001f0	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  001f5	8b 45 cc	 mov	 eax, DWORD PTR $T191311[ebp]
$L191302:

; 212  : }

  001f8	8d 65 ac	 lea	 esp, DWORD PTR [ebp-84]
  001fb	52		 push	 edx
  001fc	8b cd		 mov	 ecx, ebp
  001fe	50		 push	 eax
  001ff	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191319
  00205	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0020a	58		 pop	 eax
  0020b	5a		 pop	 edx
  0020c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00216	5f		 pop	 edi
  00217	5e		 pop	 esi
  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c2 18 00	 ret	 24			; 00000018H
$L191319:
  0021e	01 00 00 00	 DD	 1
  00222	00 00 00 00	 DD	 $L191318
$L191318:
  00226	dc ff ff ff	 DD	 -36			; ffffffdcH
  0022a	04 00 00 00	 DD	 4
  0022e	00 00 00 00	 DD	 $L191316
$L191316:
  00232	5f		 DB	 95			; 0000005fH
  00233	41		 DB	 65			; 00000041H
  00234	74		 DB	 116			; 00000074H
  00235	6c		 DB	 108			; 0000006cH
  00236	53		 DB	 83			; 00000053H
  00237	61		 DB	 97			; 00000061H
  00238	66		 DB	 102			; 00000066H
  00239	65		 DB	 101			; 00000065H
  0023a	41		 DB	 65			; 00000041H
  0023b	6c		 DB	 108			; 0000006cH
  0023c	6c		 DB	 108			; 0000006cH
  0023d	6f		 DB	 111			; 0000006fH
  0023e	63		 DB	 99			; 00000063H
  0023f	61		 DB	 97			; 00000061H
  00240	4d		 DB	 77			; 0000004dH
  00241	61		 DB	 97			; 00000061H
  00242	6e		 DB	 110			; 0000006eH
  00243	61		 DB	 97			; 00000061H
  00244	67		 DB	 103			; 00000067H
  00245	65		 DB	 101			; 00000065H
  00246	72		 DB	 114			; 00000072H
  00247	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191312:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
__ehhandler$?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191314
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z ENDP		; ATL::CompareStringWFake
EXTRN	__imp___resetstkoflw:NEAR
EXTRN	__except_handler3:NEAR
;	COMDAT CONST
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
CONST	SEGMENT
$T191330 DD	0ffffffffH
	DD	FLAT:$L191325
	DD	FLAT:$L191326
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT
tv65 = -48						; size = 4
$T191329 = -44						; size = 4
_p$24107 = -36						; size = 4
_bStackAvailable$ = -25					; size = 1
__$SEHRec$ = -24					; size = 24
_Size$ = 8						; size = 4
?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable, COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 OFFSET FLAT:$T191330
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:__except_handler3
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00015	50		 push	 eax
  00016	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001d	83 c4 e0	 add	 esp, -32		; ffffffe0H
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0002b	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0002e	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00031	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00034	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00037	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0003a	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 332  :     bool bStackAvailable = true;

  0003d	c6 45 e7 01	 mov	 BYTE PTR _bStackAvailable$[ebp], 1

; 333  : 
; 334  :     __try

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 335  :     {
; 336  :         PVOID p = _alloca(Size + _ATL_STACK_MARGIN);

  00048	8b 45 08	 mov	 eax, DWORD PTR _Size$[ebp]
  0004b	05 03 20 00 00	 add	 eax, 8195		; 00002003H
  00050	83 e0 fc	 and	 eax, -4			; fffffffcH
  00053	e8 00 00 00 00	 call	 __alloca_probe
  00058	89 65 d0	 mov	 DWORD PTR tv65[ebp], esp
  0005b	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  0005e	8b 45 d0	 mov	 eax, DWORD PTR tv65[ebp]
  00061	89 45 dc	 mov	 DWORD PTR _p$24107[ebp], eax
  00064	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -1
  0006b	eb 35		 jmp	 SHORT $L191328
$L191325:

; 337  :         (p);
; 338  :     }
; 339  :     __except ((EXCEPTION_STACK_OVERFLOW == GetExceptionCode()) ?
; 340  :                    EXCEPTION_EXECUTE_HANDLER :
; 341  :                    EXCEPTION_CONTINUE_SEARCH)

  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+4]
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	8b 02		 mov	 eax, DWORD PTR [edx]
  00074	89 45 d4	 mov	 DWORD PTR $T191329[ebp], eax
  00077	8b 45 d4	 mov	 eax, DWORD PTR $T191329[ebp]
  0007a	2d fd 00 00 c0	 sub	 eax, -1073741571	; c00000fdH
  0007f	f7 d8		 neg	 eax
  00081	1b c0		 sbb	 eax, eax
  00083	40		 inc	 eax
$L191327:
  00084	c3		 ret	 0
$L191326:
  00085	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 342  :     {
; 343  :         bStackAvailable = false;

  00088	c6 45 e7 00	 mov	 BYTE PTR _bStackAvailable$[ebp], 0

; 344  :         _resetstkoflw();

  0008c	8b f4		 mov	 esi, esp
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___resetstkoflw
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -1
$L191328:

; 345  :     }
; 346  :     return bStackAvailable;

  000a2	8a 45 e7	 mov	 al, BYTE PTR _bStackAvailable$[ebp]
$L191324:

; 347  : }

  000a5	8d 65 c4	 lea	 esp, DWORD PTR [ebp-60]
  000a8	52		 push	 edx
  000a9	8b cd		 mov	 ecx, ebp
  000ab	50		 push	 eax
  000ac	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191335
  000b2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b7	58		 pop	 eax
  000b8	5a		 pop	 edx
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$L191335:
  000ca	01 00 00 00	 DD	 1
  000ce	00 00 00 00	 DD	 $L191334
$L191334:
  000d2	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d6	04 00 00 00	 DD	 4
  000da	00 00 00 00	 DD	 $L191332
$L191332:
  000de	70		 DB	 112			; 00000070H
  000df	00		 DB	 0
?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
_TEXT	ENDS
PUBLIC	??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
EXTRN	__imp__WideCharToMultiByte@32:NEAR
;	COMDAT ??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
CONST	SEGMENT
??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@ DB 'lpw != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlconv.h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@ DB 'lpa != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPB_WHI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_lpa$ = 8						; size = 4
_lpw$ = 12						; size = 4
_nChars$ = 16						; size = 4
_acp$ = 20						; size = 4
?AtlW2AHelper@@YGPADPADPB_WHI@Z PROC NEAR		; AtlW2AHelper, COMDAT

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 574  : 	ATLASSERT(lpw != NULL);

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00010	75 2b		 jne	 SHORT $L191339
  00012	8b f4		 mov	 esi, esp
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
  00019	6a 00		 push	 0
  0001b	68 3e 02 00 00	 push	 574			; 0000023eH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 01		 jne	 SHORT $L191339
  0003c	cc		 int	 3
$L191339:

; 575  : 	ATLASSERT(lpa != NULL);

  0003d	83 7d 08 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00041	75 2b		 jne	 SHORT $L191340
  00043	8b f4		 mov	 esi, esp
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
  0004a	6a 00		 push	 0
  0004c	68 3f 02 00 00	 push	 575			; 0000023fH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	83 f8 01	 cmp	 eax, 1
  0006b	75 01		 jne	 SHORT $L191340
  0006d	cc		 int	 3
$L191340:

; 576  : 	if (lpa == NULL || lpw == NULL)

  0006e	83 7d 08 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00072	74 06		 je	 SHORT $L24313
  00074	83 7d 0c 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00078	75 04		 jne	 SHORT $L24312
$L24313:

; 577  : 		return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	eb 6c		 jmp	 SHORT $L24309
$L24312:

; 578  : 	// verify that no illegal character present
; 579  : 	// since lpa was allocated based on the size of lpw
; 580  : 	// don't worry about the number of chars
; 581  : 	lpa[0] = '\0';

  0007e	8b 55 08	 mov	 edx, DWORD PTR _lpa$[ebp]
  00081	c6 02 00	 mov	 BYTE PTR [edx], 0

; 582  : 	int ret = WideCharToMultiByte(acp, 0, lpw, -1, lpa, nChars, NULL, NULL);

  00084	8b f4		 mov	 esi, esp
  00086	6a 00		 push	 0
  00088	6a 00		 push	 0
  0008a	8b 45 10	 mov	 eax, DWORD PTR _nChars$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _lpa$[ebp]
  00091	51		 push	 ecx
  00092	6a ff		 push	 -1
  00094	8b 55 0c	 mov	 edx, DWORD PTR _lpw$[ebp]
  00097	52		 push	 edx
  00098	6a 00		 push	 0
  0009a	8b 45 14	 mov	 eax, DWORD PTR _acp$[ebp]
  0009d	50		 push	 eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 583  : 	if(ret == 0)

  000ae	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000b2	75 33		 jne	 SHORT $L24315

; 584  : 	{
; 585  : 		ATLASSERT(FALSE);

  000b4	33 c9		 xor	 ecx, ecx
  000b6	75 2b		 jne	 SHORT $L191341
  000b8	8b f4		 mov	 esi, esp
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  000bf	6a 00		 push	 0
  000c1	68 49 02 00 00	 push	 585			; 00000249H
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  000cb	6a 02		 push	 2
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d3	83 c4 14	 add	 esp, 20			; 00000014H
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	75 01		 jne	 SHORT $L191341
  000e2	cc		 int	 3
$L191341:

; 586  : 		return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	eb 03		 jmp	 SHORT $L24309
$L24315:

; 587  : 	}
; 588  : 	return lpa;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _lpa$[ebp]
$L24309:

; 589  : }

  000ea	5e		 pop	 esi
  000eb	83 c4 04	 add	 esp, 4
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 10 00	 ret	 16			; 00000010H
?AtlW2AHelper@@YGPADPADPB_WHI@Z ENDP			; AtlW2AHelper
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@ ; `string'
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
EXTRN	?AfxThrowMemoryException@@YGXXZ:NEAR		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:NEAR		; AfxThrowOleException
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@ DB 'AtlThrow: hr '
	DB	'= 0x%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlexcept.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T191343 = -8						; size = 8
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00014	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
  0001d	6a 00		 push	 0
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
  00024	e8 00 00 00 00	 call	 ??BCTraceCategory@ATL@@QBEKXZ ; ATL::CTraceCategory::operator unsigned long
  00029	50		 push	 eax
  0002a	6a 3e		 push	 62			; 0000003eH
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00031	8d 4d f8	 lea	 ecx, DWORD PTR $T191343[ebp]
  00034	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )

  00042	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00049	75 05		 jne	 SHORT $L25222

; 65   : 	{
; 66   : 		AfxThrowMemoryException();

  0004b	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$L25222:

; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _hr$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$L191342:

; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );
; 74   : #endif
; 75   : };

  00059	83 c4 08	 add	 esp, 8
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _nLineNo$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
; Function compile flags: /Odt /RTCsu
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 162  : 		va_list ptr; va_start(ptr, pszFmt);

  0000b	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0000e	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 163  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 14	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  00018	52		 push	 edx
  00019	8b 45 10	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
  00033	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ; ATL::CTrace::TraceV
  00038	83 c4 1c	 add	 esp, 28			; 0000001cH

; 164  : 		va_end(ptr);

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 165  : 	}

  00042	83 c4 04	 add	 esp, 4
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVA:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z PROC NEAR		; ATL::CTrace::TraceV, COMDAT

; 121  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 		AtlTraceVA(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

  00003	8b 45 20	 mov	 eax, DWORD PTR _args$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 1c	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 18	 mov	 edx, DWORD PTR _nLevel$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 14	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _AtlTraceVA
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH

; 123  : 	}

  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 204  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
PUBLIC	?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z	; ATL::GetStringTypeExWFake
EXTRN	__imp__GetStringTypeExW@20:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT
_lcid$ = 8						; size = 4
_dwInfoType$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nLength$ = 20						; size = 4
_pwCharType$ = 24					; size = 4
?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z PROC NEAR	; ATL::GetStringTypeExWThunk, COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 241  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetStringTypeExW), GetStringTypeExWFake, ::GetStringTypeExW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetStringTypeExW@20
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z ; ATL::GetStringTypeExWFake
  0000f	68 04 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+4
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : 
; 243  : 	return _strthunks.pfnGetStringTypeExW(lcid, dwInfoType, pszSrc, nLength, pwCharType);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 18	 mov	 ecx, DWORD PTR _pwCharType$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 14	 mov	 edx, DWORD PTR _nLength$[ebp]
  00025	52		 push	 edx
  00026	8b 45 10	 mov	 eax, DWORD PTR _pszSrc$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInfoType$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _lcid$[ebp]
  00031	52		 push	 edx
  00032	ff 15 04 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : }

  0003f	5e		 pop	 esi
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z ENDP	; ATL::GetStringTypeExWThunk
_TEXT	ENDS
EXTRN	__imp__GetStringTypeExA@20:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191360 DD	0ffffffffH
	DD	FLAT:$L191352
$T191354 DD	019930520H
	DD	01H
	DD	FLAT:$T191360
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT
$T191351 = -164						; size = 4
_pszA$ = -156						; size = 132
_nLengthA$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lcid$ = 8						; size = 4
_dwInfoType$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nLength$ = 20						; size = 4
_pwCharType$ = 24					; size = 4
?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z PROC NEAR	; ATL::GetStringTypeExWFake, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00026	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 225  : 	int nLengthA;
; 226  : 	CTempBuffer<char> pszA;

  0003a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00040	e8 00 00 00 00	 call	 ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 227  : 
; 228  : 	nLengthA = ::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, NULL, 0, NULL, NULL);

  0004c	8b f4		 mov	 esi, esp
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	8b 45 14	 mov	 eax, DWORD PTR _nLength$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _pszSrc$[ebp]
  0005d	51		 push	 ecx
  0005e	6a 00		 push	 0
  00060	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	89 45 ec	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 229  : 	pszA.Allocate(nLengthA);

  00076	8b 55 ec	 mov	 edx, DWORD PTR _nLengthA$[ebp]
  00079	52		 push	 edx
  0007a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00080	e8 00 00 00 00	 call	 ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate

; 230  : 	::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, pszA, nLengthA, NULL, NULL);

  00085	8b f4		 mov	 esi, esp
  00087	6a 00		 push	 0
  00089	6a 00		 push	 0
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  0008e	50		 push	 eax
  0008f	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00095	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  0009a	50		 push	 eax
  0009b	8b 4d 14	 mov	 ecx, DWORD PTR _nLength$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 10	 mov	 edx, DWORD PTR _pszSrc$[ebp]
  000a2	52		 push	 edx
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  000aa	50		 push	 eax
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000b1	3b f4		 cmp	 esi, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 231  : 
; 232  : 	if (nLength == -1)

  000b8	83 7d 14 ff	 cmp	 DWORD PTR _nLength$[ebp], -1
  000bc	75 07		 jne	 SHORT $L26381

; 233  : 		nLengthA = -1;

  000be	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _nLengthA$[ebp], -1
$L26381:

; 234  : 
; 235  : 	return ::GetStringTypeExA(lcid, dwInfoType, pszA, nLengthA, pwCharType);

  000c5	8b f4		 mov	 esi, esp
  000c7	8b 45 18	 mov	 eax, DWORD PTR _pwCharType$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _nLengthA$[ebp]
  000ce	51		 push	 ecx
  000cf	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  000d5	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  000da	50		 push	 eax
  000db	8b 55 0c	 mov	 edx, DWORD PTR _dwInfoType$[ebp]
  000de	52		 push	 edx
  000df	8b 45 08	 mov	 eax, DWORD PTR _lcid$[ebp]
  000e2	50		 push	 eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStringTypeExA@20
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T191351[ebp], eax
  000f6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fd	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  00108	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T191351[ebp]

; 236  : }

  0010e	52		 push	 edx
  0010f	8b cd		 mov	 ecx, ebp
  00111	50		 push	 eax
  00112	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191359
  00118	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011d	58		 pop	 eax
  0011e	5a		 pop	 edx
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00122	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00129	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  00139	3b ec		 cmp	 ebp, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 14 00	 ret	 20			; 00000014H
$L191359:
  00146	01 00 00 00	 DD	 1
  0014a	00 00 00 00	 DD	 $L191358
$L191358:
  0014e	64 ff ff ff	 DD	 -156			; ffffff64H
  00152	84 00 00 00	 DD	 132			; 00000084H
  00156	00 00 00 00	 DD	 $L191355
$L191355:
  0015a	70		 DB	 112			; 00000070H
  0015b	73		 DB	 115			; 00000073H
  0015c	7a		 DB	 122			; 0000007aH
  0015d	41		 DB	 65			; 00000041H
  0015e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191352:
  00000	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
__ehhandler$?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191354
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z ENDP		; ATL::GetStringTypeExWFake
PUBLIC	?lstrcmpiWFake@ATL@@YGHPB_W0@Z			; ATL::lstrcmpiWFake
EXTRN	__imp__lstrcmpiW@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?lstrcmpiWThunk@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT
_psz1$ = 8						; size = 4
_psz2$ = 12						; size = 4
?lstrcmpiWThunk@ATL@@YGHPB_W0@Z PROC NEAR		; ATL::lstrcmpiWThunk, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 255  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnlstrcmpiW), lstrcmpiWFake, ::lstrcmpiW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__lstrcmpiW@8
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?lstrcmpiWFake@ATL@@YGHPB_W0@Z ; ATL::lstrcmpiWFake
  0000f	68 08 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+8
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 256  : 
; 257  : 	return _strthunks.pfnlstrcmpiW(psz1, psz2);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _psz2$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 08	 mov	 edx, DWORD PTR _psz1$[ebp]
  00025	52		 push	 edx
  00026	ff 15 08 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+8
  0002c	3b f4		 cmp	 esi, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 258  : }

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?lstrcmpiWThunk@ATL@@YGHPB_W0@Z ENDP			; ATL::lstrcmpiWThunk
_TEXT	ENDS
EXTRN	__imp__lstrcmpiA@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?lstrcmpiWFake@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT
tv91 = -32						; size = 4
tv94 = -28						; size = 4
tv76 = -24						; size = 4
tv79 = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz1$ = 8						; size = 4
_psz2$ = 12						; size = 4
?lstrcmpiWFake@ATL@@YGHPB_W0@Z PROC NEAR		; ATL::lstrcmpiWFake, COMDAT

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 248  : 	USES_CONVERSION;

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __convert$[ebp], 0
  0002b	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00030	89 45 f8	 mov	 DWORD PTR __acp$[ebp], eax
  00033	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __lpw$[ebp], 0
  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __lpa$[ebp], 0

; 249  : 
; 250  : 	return ::lstrcmpiA(W2A(psz1), W2A(psz2));

  00041	8b 45 0c	 mov	 eax, DWORD PTR _psz2$[ebp]
  00044	89 45 f4	 mov	 DWORD PTR __lpw$[ebp], eax
  00047	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  0004b	75 09		 jne	 SHORT $L191365
  0004d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
  00054	eb 43		 jmp	 SHORT $L191366
$L191365:
  00056	8b f4		 mov	 esi, esp
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __lpw$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  0006d	89 55 fc	 mov	 DWORD PTR __convert$[ebp], edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  00073	83 c0 03	 add	 eax, 3
  00076	83 e0 fc	 and	 eax, -4			; fffffffcH
  00079	e8 00 00 00 00	 call	 __alloca_probe
  0007e	89 65 e8	 mov	 DWORD PTR tv76[ebp], esp
  00081	8b 45 f8	 mov	 eax, DWORD PTR __acp$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR __convert$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 e8	 mov	 eax, DWORD PTR tv76[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  00096	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
$L191366:
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _psz1$[ebp]
  0009c	89 4d f4	 mov	 DWORD PTR __lpw$[ebp], ecx
  0009f	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  000a3	75 09		 jne	 SHORT $L191367
  000a5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000ac	eb 43		 jmp	 SHORT $L191368
$L191367:
  000ae	8b f4		 mov	 esi, esp
  000b0	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  000b3	52		 push	 edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8d 44 00 02	 lea	 eax, DWORD PTR [eax+eax+2]
  000c5	89 45 fc	 mov	 DWORD PTR __convert$[ebp], eax
  000c8	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000cb	83 c0 03	 add	 eax, 3
  000ce	83 e0 fc	 and	 eax, -4			; fffffffcH
  000d1	e8 00 00 00 00	 call	 __alloca_probe
  000d6	89 65 e0	 mov	 DWORD PTR tv91[ebp], esp
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR __acp$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 fc	 mov	 edx, DWORD PTR __convert$[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 f4	 mov	 eax, DWORD PTR __lpw$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d e0	 mov	 ecx, DWORD PTR tv91[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  000ee	89 45 e4	 mov	 DWORD PTR tv94[ebp], eax
$L191368:
  000f1	8b f4		 mov	 esi, esp
  000f3	8b 55 ec	 mov	 edx, DWORD PTR tv79[ebp]
  000f6	52		 push	 edx
  000f7	8b 45 e4	 mov	 eax, DWORD PTR tv94[ebp]
  000fa	50		 push	 eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpiA@8
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 251  : }

  00108	8d 65 dc	 lea	 esp, DWORD PTR [ebp-36]
  0010b	5e		 pop	 esi
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 08 00	 ret	 8
?lstrcmpiWFake@ATL@@YGHPB_W0@Z ENDP			; ATL::lstrcmpiWFake
_TEXT	ENDS
PUBLIC	?CharLowerWFake@ATL@@YGPA_WPA_W@Z		; ATL::CharLowerWFake
EXTRN	__imp__CharLowerW@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharLowerWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CharLowerWThunk@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharLowerWThunk, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 274  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharLowerW), CharLowerWFake, ::CharLowerW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__CharLowerW@4
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?CharLowerWFake@ATL@@YGPA_WPA_W@Z ; ATL::CharLowerWFake
  0000f	68 0c 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+12
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 275  : 
; 276  : 	return _strthunks.pfnCharLowerW(psz);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00021	51		 push	 ecx
  00022	ff 15 0c 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+12
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 277  : }

  0002f	5e		 pop	 esi
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?CharLowerWThunk@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharLowerWThunk
_TEXT	ENDS
PUBLIC	?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z		; AtlA2WHelper
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	__imp__CharLowerA@4:NEAR
EXTRN	__imp__wcscpy:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharLowerWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv94 = -32						; size = 4
tv75 = -28						; size = 4
tv78 = -24						; size = 4
_pszA$ = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz$ = 8						; size = 4
?CharLowerWFake@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharLowerWFake, COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 262  : 	USES_CONVERSION;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __convert$[ebp], 0
  0002e	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00033	89 45 f8	 mov	 DWORD PTR __acp$[ebp], eax
  00036	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __lpw$[ebp], 0
  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __lpa$[ebp], 0

; 263  : 	LPSTR pszA;
; 264  : 
; 265  : 	pszA = W2A(psz);

  00044	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __lpw$[ebp], eax
  0004a	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  0004e	75 09		 jne	 SHORT $L191371
  00050	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  00057	eb 43		 jmp	 SHORT $L191372
$L191371:
  00059	8b f4		 mov	 esi, esp
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __lpw$[ebp]
  0005e	51		 push	 ecx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00070	89 55 fc	 mov	 DWORD PTR __convert$[ebp], edx
  00073	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  00076	83 c0 03	 add	 eax, 3
  00079	83 e0 fc	 and	 eax, -4			; fffffffcH
  0007c	e8 00 00 00 00	 call	 __alloca_probe
  00081	89 65 e4	 mov	 DWORD PTR tv75[ebp], esp
  00084	8b 45 f8	 mov	 eax, DWORD PTR __acp$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __convert$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 e4	 mov	 eax, DWORD PTR tv75[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  00099	89 45 e8	 mov	 DWORD PTR tv78[ebp], eax
$L191372:
  0009c	8b 4d e8	 mov	 ecx, DWORD PTR tv78[ebp]
  0009f	89 4d ec	 mov	 DWORD PTR _pszA$[ebp], ecx

; 266  : 	::CharLowerA(pszA);

  000a2	8b f4		 mov	 esi, esp
  000a4	8b 55 ec	 mov	 edx, DWORD PTR _pszA$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharLowerA@4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 267  : 	wcscpy(psz, A2W(pszA));

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _pszA$[ebp]
  000b8	89 45 f0	 mov	 DWORD PTR __lpa$[ebp], eax
  000bb	83 7d f0 00	 cmp	 DWORD PTR __lpa$[ebp], 0
  000bf	75 09		 jne	 SHORT $L191373
  000c1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000c8	eb 44		 jmp	 SHORT $L191374
$L191373:
  000ca	8b f4		 mov	 esi, esp
  000cc	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 fc	 mov	 DWORD PTR __convert$[ebp], eax
  000e3	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000e6	d1 e0		 shl	 eax, 1
  000e8	83 c0 03	 add	 eax, 3
  000eb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000ee	e8 00 00 00 00	 call	 __alloca_probe
  000f3	89 65 dc	 mov	 DWORD PTR tv90[ebp], esp
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __acp$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  00101	51		 push	 ecx
  00102	8b 55 dc	 mov	 edx, DWORD PTR tv90[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z ; AtlA2WHelper
  0010b	89 45 e0	 mov	 DWORD PTR tv94[ebp], eax
$L191374:
  0010e	8b f4		 mov	 esi, esp
  00110	8b 45 e0	 mov	 eax, DWORD PTR tv94[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00117	51		 push	 ecx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  0011e	83 c4 08	 add	 esp, 8
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 268  : 
; 269  : 	return psz;

  00128	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]

; 270  : }

  0012b	8d 65 d8	 lea	 esp, DWORD PTR [ebp-40]
  0012e	5e		 pop	 esi
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
?CharLowerWFake@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharLowerWFake
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_lpw$ = 8						; size = 4
_lpa$ = 12						; size = 4
_nChars$ = 16						; size = 4
_acp$ = 20						; size = 4
?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z PROC NEAR		; AtlA2WHelper, COMDAT

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 555  : 	ATLASSERT(lpa != NULL);

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00010	75 2b		 jne	 SHORT $L191376
  00012	8b f4		 mov	 esi, esp
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
  00019	6a 00		 push	 0
  0001b	68 2b 02 00 00	 push	 555			; 0000022bH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 01		 jne	 SHORT $L191376
  0003c	cc		 int	 3
$L191376:

; 556  : 	ATLASSERT(lpw != NULL);

  0003d	83 7d 08 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00041	75 2b		 jne	 SHORT $L191377
  00043	8b f4		 mov	 esi, esp
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
  0004a	6a 00		 push	 0
  0004c	68 2c 02 00 00	 push	 556			; 0000022cH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	83 f8 01	 cmp	 eax, 1
  0006b	75 01		 jne	 SHORT $L191377
  0006d	cc		 int	 3
$L191377:

; 557  : 	if (lpw == NULL || lpa == NULL)

  0006e	83 7d 08 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00072	74 06		 je	 SHORT $L24299
  00074	83 7d 0c 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00078	75 04		 jne	 SHORT $L24298
$L24299:

; 558  : 		return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	eb 6a		 jmp	 SHORT $L24292
$L24298:

; 559  : 	// verify that no illegal character present
; 560  : 	// since lpw was allocated based on the size of lpa
; 561  : 	// don't worry about the number of chars
; 562  : 	lpw[0] = '\0';

  0007e	8b 55 08	 mov	 edx, DWORD PTR _lpw$[ebp]
  00081	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 563  : 	int ret = MultiByteToWideChar(acp, 0, lpa, -1, lpw, nChars);

  00086	8b f4		 mov	 esi, esp
  00088	8b 45 10	 mov	 eax, DWORD PTR _nChars$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _lpw$[ebp]
  0008f	51		 push	 ecx
  00090	6a ff		 push	 -1
  00092	8b 55 0c	 mov	 edx, DWORD PTR _lpa$[ebp]
  00095	52		 push	 edx
  00096	6a 00		 push	 0
  00098	8b 45 14	 mov	 eax, DWORD PTR _acp$[ebp]
  0009b	50		 push	 eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 564  : 	if(ret == 0)

  000ac	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000b0	75 33		 jne	 SHORT $L24301

; 565  : 	{
; 566  : 		ATLASSERT(FALSE);

  000b2	33 c9		 xor	 ecx, ecx
  000b4	75 2b		 jne	 SHORT $L191378
  000b6	8b f4		 mov	 esi, esp
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  000bd	6a 00		 push	 0
  000bf	68 36 02 00 00	 push	 566			; 00000236H
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  000c9	6a 02		 push	 2
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	3b f4		 cmp	 esi, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	83 f8 01	 cmp	 eax, 1
  000de	75 01		 jne	 SHORT $L191378
  000e0	cc		 int	 3
$L191378:

; 567  : 		return NULL;

  000e1	33 c0		 xor	 eax, eax
  000e3	eb 03		 jmp	 SHORT $L24292
$L24301:

; 568  : 	}		
; 569  : 	return lpw;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _lpw$[ebp]
$L24292:

; 570  : }

  000e8	5e		 pop	 esi
  000e9	83 c4 04	 add	 esp, 4
  000ec	3b ec		 cmp	 ebp, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 10 00	 ret	 16			; 00000010H
?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z ENDP			; AtlA2WHelper
_TEXT	ENDS
PUBLIC	?CharUpperWFake@ATL@@YGPA_WPA_W@Z		; ATL::CharUpperWFake
EXTRN	__imp__CharUpperW@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CharUpperWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CharUpperWThunk@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharUpperWThunk, COMDAT

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 293  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharUpperW), CharUpperWFake, ::CharUpperW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__CharUpperW@4
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?CharUpperWFake@ATL@@YGPA_WPA_W@Z ; ATL::CharUpperWFake
  0000f	68 10 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+16
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 294  : 
; 295  : 	return _strthunks.pfnCharUpperW(psz);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00021	51		 push	 ecx
  00022	ff 15 10 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+16
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 296  : }

  0002f	5e		 pop	 esi
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?CharUpperWThunk@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharUpperWThunk
_TEXT	ENDS
EXTRN	__imp__CharUpperA@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharUpperWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv94 = -32						; size = 4
tv75 = -28						; size = 4
tv78 = -24						; size = 4
_pszA$ = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz$ = 8						; size = 4
?CharUpperWFake@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharUpperWFake, COMDAT

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 281  : 	USES_CONVERSION;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __convert$[ebp], 0
  0002e	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00033	89 45 f8	 mov	 DWORD PTR __acp$[ebp], eax
  00036	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __lpw$[ebp], 0
  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __lpa$[ebp], 0

; 282  : 	LPSTR pszA;
; 283  : 
; 284  : 	pszA = W2A(psz);

  00044	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __lpw$[ebp], eax
  0004a	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  0004e	75 09		 jne	 SHORT $L191381
  00050	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  00057	eb 43		 jmp	 SHORT $L191382
$L191381:
  00059	8b f4		 mov	 esi, esp
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __lpw$[ebp]
  0005e	51		 push	 ecx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00070	89 55 fc	 mov	 DWORD PTR __convert$[ebp], edx
  00073	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  00076	83 c0 03	 add	 eax, 3
  00079	83 e0 fc	 and	 eax, -4			; fffffffcH
  0007c	e8 00 00 00 00	 call	 __alloca_probe
  00081	89 65 e4	 mov	 DWORD PTR tv75[ebp], esp
  00084	8b 45 f8	 mov	 eax, DWORD PTR __acp$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __convert$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 e4	 mov	 eax, DWORD PTR tv75[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  00099	89 45 e8	 mov	 DWORD PTR tv78[ebp], eax
$L191382:
  0009c	8b 4d e8	 mov	 ecx, DWORD PTR tv78[ebp]
  0009f	89 4d ec	 mov	 DWORD PTR _pszA$[ebp], ecx

; 285  : 	::CharUpperA(pszA);

  000a2	8b f4		 mov	 esi, esp
  000a4	8b 55 ec	 mov	 edx, DWORD PTR _pszA$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharUpperA@4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 286  : 	wcscpy(psz, A2W(pszA));

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _pszA$[ebp]
  000b8	89 45 f0	 mov	 DWORD PTR __lpa$[ebp], eax
  000bb	83 7d f0 00	 cmp	 DWORD PTR __lpa$[ebp], 0
  000bf	75 09		 jne	 SHORT $L191383
  000c1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000c8	eb 44		 jmp	 SHORT $L191384
$L191383:
  000ca	8b f4		 mov	 esi, esp
  000cc	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 fc	 mov	 DWORD PTR __convert$[ebp], eax
  000e3	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000e6	d1 e0		 shl	 eax, 1
  000e8	83 c0 03	 add	 eax, 3
  000eb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000ee	e8 00 00 00 00	 call	 __alloca_probe
  000f3	89 65 dc	 mov	 DWORD PTR tv90[ebp], esp
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __acp$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  00101	51		 push	 ecx
  00102	8b 55 dc	 mov	 edx, DWORD PTR tv90[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z ; AtlA2WHelper
  0010b	89 45 e0	 mov	 DWORD PTR tv94[ebp], eax
$L191384:
  0010e	8b f4		 mov	 esi, esp
  00110	8b 45 e0	 mov	 eax, DWORD PTR tv94[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00117	51		 push	 ecx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  0011e	83 c4 08	 add	 esp, 8
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 287  : 
; 288  : 	return psz;

  00128	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]

; 289  : }

  0012b	8d 65 d8	 lea	 esp, DWORD PTR [ebp-40]
  0012e	5e		 pop	 esi
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
?CharUpperWFake@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharUpperWFake
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 373  : 	CAtlSafeAllocBufferManager() : m_pHead(NULL) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_nRequestedSize$ = 8					; size = 4
?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 375  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 		CAtlSafeAllocBufferNode *p = (CAtlSafeAllocBufferNode*)Allocator::Allocate(nRequestedSize + sizeof(CAtlSafeAllocBufferNode));

  00017	8b 45 08	 mov	 eax, DWORD PTR _nRequestedSize$[ebp]
  0001a	83 c0 08	 add	 eax, 8
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 377  : 		if (p == NULL)

  00029	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0002d	75 04		 jne	 SHORT $L181568

; 378  : 			return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 1a		 jmp	 SHORT $L181555
$L181568:

; 379  : 		
; 380  : 		// Add buffer to the list
; 381  : 		p->m_pNext = m_pHead;

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	89 01		 mov	 DWORD PTR [ecx], eax

; 382  : 		m_pHead = p;

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  00043	89 11		 mov	 DWORD PTR [ecx], edx

; 383  : 		
; 384  : 		return p->GetData();

  00045	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00048	e8 00 00 00 00	 call	 ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
$L181555:

; 385  : 	}

  0004d	83 c4 08	 add	 esp, 8
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
EXTRN	__imp__malloc:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC NEAR		; ATL::CCRTAllocator::Allocate, COMDAT

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 31   : 		return malloc(nBytes);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 	}

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
_p$181574 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 387  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$L181572:

; 388  : 		// Walk the list and free the buffers
; 389  : 		while (m_pHead != NULL)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 22		 je	 SHORT $L181570

; 390  : 		{
; 391  : 			CAtlSafeAllocBufferNode* p = m_pHead;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	89 55 f8	 mov	 DWORD PTR _p$181574[ebp], edx

; 392  : 			m_pHead = m_pHead->m_pNext;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	89 02		 mov	 DWORD PTR [edx], eax

; 393  : 			Allocator::Free(p);

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _p$181574[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  0003c	83 c4 04	 add	 esp, 4

; 394  : 		}

  0003f	eb d6		 jmp	 SHORT $L181572
$L181570:

; 395  : 	}

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
EXTRN	__imp__free:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC NEAR		; ATL::CCRTAllocator::Free, COMDAT

; 35   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 36   : 		free(p);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : 	}

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 216  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 217  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 		if( m_p != reinterpret_cast< T* >( m_abFixedBuffer ) )

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	39 01		 cmp	 DWORD PTR [ecx], eax
  00019	74 08		 je	 SHORT $L181578

; 227  : 		{
; 228  : 			FreeHeap();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
$L181578:

; 229  : 		}
; 230  : 	}

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 233  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 234  : 		return( m_p );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 235  : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
PUBLIC	?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 243  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 244  : 		return( AllocateBytes( nElements*sizeof( T ) ) );

  0000e	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes

; 245  : 	}

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z		; ATL::CW2AEX<128>::Init
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z PROC NEAR		; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 419  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 420  : 		Init( psz, _AtlGetConversionACP() );

  00019	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0001e	50		 push	 eax
  0001f	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  00022	52		 push	 edx
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init

; 421  : 	}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC NEAR			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 428  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 		if( m_psz != m_szBuffer )

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	39 01		 cmp	 DWORD PTR [ecx], eax
  0001a	74 18		 je	 SHORT $L181589

; 430  : 		{
; 431  : 			free( m_psz );

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L181589:

; 432  : 		}
; 433  : 	}

  00034	5e		 pop	 esi
  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC NEAR		; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 436  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 437  : 		return( m_psz );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 438  : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
_TEXT	ENDS
PUBLIC	??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap
;	COMDAT ??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
CONST	SEGMENT
??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@ DB 'm_p == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlalloc.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 276  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		ATLASSERT( m_p == NULL );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 2b		 je	 SHORT $L191398
  00017	8b f4		 mov	 esi, esp
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
  0001e	6a 00		 push	 0
  00020	68 15 01 00 00	 push	 277			; 00000115H
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	75 01		 jne	 SHORT $L191398
  00041	cc		 int	 3
$L191398:

; 278  : 		if( nBytes > t_nFixedBytes )

  00042	81 7d 08 80 00
	00 00		 cmp	 DWORD PTR _nBytes$[ebp], 128 ; 00000080H
  00049	76 0e		 jbe	 SHORT $L183346

; 279  : 		{
; 280  : 			AllocateHeap( nBytes );

  0004b	8b 55 08	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0004e	52		 push	 edx
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap

; 281  : 		}
; 282  : 		else

  00057	eb 0b		 jmp	 SHORT $L183347
$L183346:

; 283  : 		{
; 284  : 			m_p = reinterpret_cast< T* >( m_abFixedBuffer );

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax
$L183347:

; 285  : 		}
; 286  : 
; 287  : 		return( m_p );

  00064	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]

; 288  : 	}

  00069	5e		 pop	 esi
  0006a	83 c4 04	 add	 esp, 4
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap, COMDAT
; _this$ = ecx

; 312  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 313  : 		Allocator::Free( m_p );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00019	83 c4 04	 add	 esp, 4

; 314  : 	}

  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
_TEXT	ENDS
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT
_nLengthA$ = -12					; size = 4
_nLengthW$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z PROC NEAR		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 442  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 443  : 		if (psz == NULL)

  0001f	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00023	75 0e		 jne	 SHORT $L183353

; 444  : 		{
; 445  : 			m_psz = NULL;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 446  : 			return;

  0002e	e9 8b 00 00 00	 jmp	 $L191400
$L183353:

; 447  : 		}
; 448  : 		int nLengthW = lstrlenW( psz )+1;

  00033	8b f4		 mov	 esi, esp
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f8	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 449  : 		int nLengthA = nLengthW*2;

  0004c	8b 55 f8	 mov	 edx, DWORD PTR _nLengthW$[ebp]
  0004f	d1 e2		 shl	 edx, 1
  00051	89 55 f4	 mov	 DWORD PTR _nLengthA$[ebp], edx

; 450  : 
; 451  : 		if( nLengthA > t_nBufferLength )

  00054	81 7d f4 80 00
	00 00		 cmp	 DWORD PTR _nLengthA$[ebp], 128 ; 00000080H
  0005b	7e 2d		 jle	 SHORT $L183356

; 452  : 		{
; 453  : 			m_psz = static_cast< LPSTR >( malloc( nLengthA*sizeof( char ) ) );

  0005d	8b f4		 mov	 esi, esp
  0005f	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00062	50		 push	 eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00069	83 c4 04	 add	 esp, 4
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	89 01		 mov	 DWORD PTR [ecx], eax

; 454  : 			if (m_psz == NULL)

  00078	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0007e	75 0a		 jne	 SHORT $L183356

; 455  : 			{
; 456  : 				AtlThrow( E_OUTOFMEMORY );

  00080	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00085	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L183356:

; 457  : 			}
; 458  : 		}
; 459  : 
; 460  : 		if (::WideCharToMultiByte( nCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ) == 0)

  0008a	8b f4		 mov	 esi, esp
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00093	50		 push	 eax
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	52		 push	 edx
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000a1	51		 push	 ecx
  000a2	6a 00		 push	 0
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	85 c0		 test	 eax, eax
  000b7	75 05		 jne	 SHORT $L191400

; 461  : 		{
; 462  : 			AtlThrowLastWin32();

  000b9	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$L191400:

; 463  : 		}
; 464  : 	}

  000be	5e		 pop	 esi
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	3b ec		 cmp	 ebp, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_dwError$ = -4						; size = 4
?AtlThrowLastWin32@ATL@@YGXXZ PROC NEAR			; ATL::AtlThrowLastWin32, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 81   : 	DWORD dwError = ::GetLastError();

  00015	8b f4		 mov	 esi, esp
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	89 45 fc	 mov	 DWORD PTR _dwError$[ebp], eax

; 82   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

  00027	83 7d fc 00	 cmp	 DWORD PTR _dwError$[ebp], 0
  0002b	7f 08		 jg	 SHORT $L191402
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _dwError$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  00033	eb 18		 jmp	 SHORT $L191403
$L191402:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _dwError$[ebp]
  00038	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0003e	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00044	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0004a	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
$L191403:
  0004d	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L191401:

; 83   : }

  00056	5e		 pop	 esi
  00057	83 c4 08	 add	 esp, 8
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData, COMDAT
; _this$ = ecx

; 365  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 366  : 			return (this + 1);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 08	 add	 eax, 8

; 367  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap, COMDAT
; _this$ = ecx

; 292  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 293  : 		T* p = static_cast< T* >( Allocator::Allocate( nBytes ) );

  00017	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00020	83 c4 04	 add	 esp, 4
  00023	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 294  : 		if( p == NULL )

  00026	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0002a	75 0a		 jne	 SHORT $L184832

; 295  : 		{
; 296  : 			AtlThrow( E_OUTOFMEMORY );

  0002c	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00031	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L184832:

; 297  : 		}
; 298  : 		m_p = p;

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  0003c	89 11		 mov	 DWORD PTR [ecx], edx
$L191405:

; 299  : 	}

  0003e	83 c4 08	 add	 esp, 8
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap
_TEXT	ENDS
EXTRN	__imp__RegisterWindowMessageA@4:NEAR
CRT$XCU	SEGMENT
_$S6	DD	FLAT:_$E5
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\trayicon.cpp
CRT$XCU	ENDS
;	COMDAT _$E5
text$yc	SEGMENT
_$E5	PROC NEAR					; COMDAT

; 24   : const UINT WM_TASKBARCREATED = ::RegisterWindowMessage(_T("TaskbarCreated"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	68 00 00 00 00	 push	 OFFSET FLAT:$SG190120
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  00011	3b f4		 cmp	 esi, esp
  00013	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00018	a3 00 00 00 00	 mov	 DWORD PTR _WM_TASKBARCREATED, eax
  0001d	5e		 pop	 esi
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_$E5	ENDP
text$yc	ENDS
_BSS	SEGMENT
_WM_TASKBARCREATED DD 01H DUP (?)
_BSS	ENDS
END
