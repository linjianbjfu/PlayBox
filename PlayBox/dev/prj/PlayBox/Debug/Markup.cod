; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\util\Markup.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@FOOCKEH@Magellan?5MSWHEEL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06PIBNFFGP@MouseZ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@NAALPGKC@MSWHEEL_ROLLMSG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@MKEAJGJE@MSH_WHEELSUPPORT_MSG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DMMDPNAL@MSH_SCROLL_LINES_MSG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGJFCAD@nResult?5?$DN?$DN?5nConvertedLen?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FHEEPEEM@lpDevModeW?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@CGGLGMBD@lptmW?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@CCGFMFOH@lptmA?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FDEKFNLI@lpDevModeA?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@CDEHHFHP@pnLevel?5?$CG?$CG?5peStatus?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@EBJACLJD@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@FDEIOFCE@s_pfnPrevHook?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAJJFBKD@ASSERTION?5FAILED?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@KDAMANMH@lpType?5?$CB?$DN?5?$CILPSTR?$CJ?$CI?$CIULONG_PTR?$CJ?$CI?$CIW@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@BCMOJBOI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@LJIJJDC@hHeap?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FF@JIDNOFIJ@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJDNKGDC@?$CB?$CIdwFlags?$CG0x00000004?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DFMCLO@bSuccess?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MNELGLIC@m_hHeap?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GJOHDDKG@nRefs?5?$DM?$DN?51?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FKINKMNN@IsLocked?$CI?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLJMCNFJ@pStringMgr?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@HFEEKIIE@mbstr?5?$DN?$DN?50?5?$HM?$HM?5result?5?$DM?$DN?5?$CIint?$CJcou@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JADEDFCN@wcstr?5?$DN?$DN?50?5?$HM?$HM?5result?5?$DM?$DN?5?$CIint?$CJcou@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DFFCODPF@m_pData?9?$DOnRefs?5?$DN?$DN?5?91?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@KFNMPDFA@m_pData?9?$DOnDataLength?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JINHKJCC@pData?9?$DOnRefs?5?$DM?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@HNGMIMJM@pData?9?$DOnRefs?5?$DM?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FB@EIPLHBJE@CFixedStringMgr?3?3Allocate?$CI?$CJ?5spil@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@PINPFILO@CFixedStringMgr?3?3Reallocate?$CI?$CJ?5sp@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BDLMIBLB@pFormat?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@IEFONAOG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LLAMLEHD@?$CFI64d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KCADNOJC@?$CF02ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@FKADHJGH@strFormat?4LoadStringA?$CInFormatID?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@OOBCCFFF@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FI@KKCCAGJG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FI@FDBICBML@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04HKHFACDA@pVar?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JCIFBICH@pVar?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@OKMCOHNI@CPropertyHelper?3?3PutProperty?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@CPKOKKKG@CPropertyHelper?3?3GetProperty?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DLMMDKDI@pbstr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GOJJAPOG@pvarDest?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@NMJIPIKP@nNull?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EDEOCDNH@pStream?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GGLDMAPP@m_str?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@LPAFDJOF@bstrText?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@EFNKCNDJ@vtSrc?5?$DN?$DN?5VT_I4?5?$HM?$HM?5vtSrc?5?$DN?$DN?5VT_IN@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@EPKJIEBK@vtSrc?5?$DN?$DN?5VT_I4?5?$HM?$HM?5vtSrc?5?$DN?$DN?5VT_ER@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@OAHBHENF@vtSrc?5?$DN?$DN?5VT_R8?5?$HM?$HM?5vtSrc?5?$DN?$DN?5VT_DA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@PICECHPM@vtSrc?5?$DN?$DN?5VT_UI4?5?$HM?$HM?5vtSrc?5?$DN?$DN?5VT_U@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@JBPFIBMK@pstrDest?5?$CB?$DN?50?5?$CG?$CG?5vt?5?$DN?$DN?5VT_BSTR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MPEAEOHH@pDest?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@CCFFBNDL@?$CI?$CIHRESULT?$CJ?$CIhr?$CJ?5?$DO?$DN?50?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@JOPHFJML@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@BIONNIHF@?6COleDateTime?5VarDateFromStr?5cal@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09BBJEMDLA@nRet?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FI@OLGALFJN@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FI@MCEBCLKJ@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@EOHGAEB@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IH@HPGJLCCK@?3Jan?3January?3Feb?3February?3Mar?3Ma@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CIAHICCP@pThunk?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DLNCEHCE@m_h?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MPGHMANA@?$CBm_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EA@EJEMLPD@ERROR?5?3?5Unable?5to?5initialize?5cri@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@JLCMIEMB@_pAtlModule?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@JALIHHGH@ERROR?5?3?5Unable?5to?5initialize?5cri@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@NJOPLADJ@ppGIT?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@GKCENBEN@m_pGIT?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@PGKIMHP@_pModule?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@EIHFIEO@CComModule?3?3CreateInstance?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@HFBNDALM@ATL?3?5?$CFs?5not?5implemented?4?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KHHCAHPK@pv?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGNHADPA@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@FFDALPMI@Failed?5to?5create?5Object?5on?5threa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@BNMKLGID@m_hKey?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@LINKMMAA@m_hKey?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BODJNDIN@?$CIhEvent?5?$CB?$DN?50?$CJ?5?$HM?$HM?5?$CBbAsync?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCGOHLCP@hKeyParent?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@LBABFFHO@lRes?5?$DN?$DN?50L?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@PAMKJKCN@?$CIlRes?$CB?$DN0L?$CJ?5?$HM?$HM?5?$CIdwType?5?$DN?$DN?5?$CI?54?5?$CJ?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IMLJDBBO@?$CIlRes?$CB?$DN0L?$CJ?5?$HM?$HM?5?$CIdwCount?5?$DN?$DN?5sizeof@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@EMMAFOBL@pdwCount?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EK@HOEOJCDI@?$CIlRes?$CB?$DN0L?$CJ?5?$HM?$HM?5?$CIdwType?5?$DN?$DN?5?$CI?51?5?$CJ?$CJ?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@PJOHNBMO@pnBytes?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GACMNLNE@pnChars?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@DLMLHPEH@lpszValue?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@DKGIOJGA@pszValue?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@EEDIHPHE@?$CIdwType?5?$DN?$DN?5?$CI?51?5?$CJ?$CJ?5?$HM?$HM?5?$CIdwType?5?$DN?$DN?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KKDEIFOM@psd?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@JOHDIOJH@CRegKey?3?3RecurseDeleteKey?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@OEMAGGO@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DM@OFJHIFEH@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@EGIOPFCF@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PCILIHOA@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EG@ECHMLFAI@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@DPJFPIFM@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OHJDIKNP@CComModule?3?3RegisterAppId?5?3?5Fail@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EI@PKEBHBCF@CComModule?3?3UnregisterAppId?5?3?5Fa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NOMBKAIF@CComModule?3?3UnregisterAppId?5?3?5Fa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DL@NCNJMMBL@CComModule?3?3UnregisterAppId?5?3?5Fa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@DILLEFPO@lpszKey?5?$CB?$DN?50?5?$CG?$CG?5lpszValue?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@MPGIOFPA@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JALMKDEH@p?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EO@FOFJGMBM@statically?5linked?5in?5CRegObject?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FA@KFANAKFG@?$CCstatically?5linked?5in?5CRegObject@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@HGJLNPOD@Failed?5to?5LoadLibrary?5on?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KJDBLEOI@Failed?5to?5FindResource?5on?5ID?3?$CFd?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@COPMGFKA@Failed?5to?5FindResource?5on?5ID?3?$CFs?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@LNHJMEOP@Failed?5to?5LoadResource?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KHDDAOIJ@Map?5Entry?5not?5found?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@GPEAKKFD@Failed?5to?5CreateFile?5on?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@DIPIMAII@Read?5Failed?5on?5file?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CL@PILPOMLI@Bogus?5value?5?$CFc?5passed?5as?5binary?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OHBKMIBJ@HKCR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KIFLFONO@HKCU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CBBMIBLK@HKLM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DLBIJLAB@HKU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OFOCGAOH@HKPD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04POMNGLEL@HKDD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LEMDOLAJ@HKCC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@HPLFHOFC@NextToken?5?3?5Unexpected?5End?5of?5Fi@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHOFLOMJ@?$CFs?5Type?5not?5supported?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@MFJDFJCO@Setting?5Value?5?$CFs?5at?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@NDCHGJG@Setting?5Value?5?$CFd?5at?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@BAKOHBFP@Binary?5Data?5does?5not?5fall?5on?5BYT@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@OFKLEKA@Should?5not?5be?5here?$CB?$CB?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@LBDGDLAN@RegQueryInfoKey?5Failed?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@FCNKJMCG@lpszReg?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@HMGHIDAH@ppszReg?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@LLGNALDE@Error?5no?5closing?5?$CF?5found?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@HJIJAHEL@HKeyFromString?5failed?5on?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JJEGIHLG@Syntax?5error?0?5expecting?5a?5?$HL?0?5fou@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@MOJNOPNN@Failed?5to?5register?0?5cleaning?5up?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@EHICPHFJ@Num?5Els?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GKIPNAL@Deleting?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@POOIJOEN@Creating?5key?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@IONAJCEO@Opened?5Key?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@LEFFDKCG@Ignoring?5Open?5key?5on?5?$CFs?5?3?5In?5Rec@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@OEFMOOAA@Ending?5Recovery?5Mode?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@OEJDLABI@Deleting?5non?9empty?5subkey?5?$CFs?5by?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@FDAMNOMP@Deleting?5Key?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MKNPNODP@0?5?$CB?$DN?5pMapEntries?9?$DOszData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1O@MNLDABAF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BG@JBACFMF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA_?$AAR?$AAa?$AAw?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@KAILKFFG@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@KGIPKMFP@Failed?5to?5Unregister?5ProgID?5?3?5?$CFs@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DG@CANCBFIN@Failed?5to?5Unregister?5Version?5Ind@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@DODAGKFC@Failed?5to?5delete?5CLSID?5?3?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EM@CMPPGOKB@Failed?5to?5delete?5CLSID?5?3?5?$HL?$CF08x?9?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@IHBDCFNI@pbstrPath?5?$CB?$DN?50?5?$CG?$CG?5ppTypeLib?5?$CB?$DN?50@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@OFPPHOIH@hInstTypeLib?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LFHHJFCN@?4tlb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLGHOEGD@pComModule?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@JANIBNGM@pComModule?9?$DOm_hInstTypeLib?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0HE@GOKGCPDA@0?5?$CG?$CG?5?$CCUse?5OBJECT_ENTRY_NON_CREAT@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@OCKIHNLB@pEntry?9?$DOiType?5?$DN?$DN?52?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JHNIBAJK@CLSID?2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@CCIMKLEB@?2Required?5Categories?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFOHFLDB@?2Implemented?5Categories?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@FCBCGFPF@?$CB?3?3IsBadWritePtr?$CIpDllVersionInfo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@OGDGDABE@DllGetVersion?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@DJAHKCPC@?$CB?3?3IsBadWritePtr?$CIpdwMajor?0?5sizeo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OGEBEC@comctl32?4dll?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KFDNOLCO@shell32?4dll?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08NEPKAPOI@ppv?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@BABLPHCB@ERROR?5?3?5Unable?5to?5lock?5critical?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HKKCENBM@lpszDesc?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FF@OIIHJMFI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@IADGPFAK@m_pTypeAttr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFCGIPIJ@m_pTypeAttr?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@JCJILGEJ@m_pTypeInfo?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIIEDMLA@m_pVarDesc?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJEEGDD@m_pVarDesc?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@GDCEDIE@m_pFuncDesc?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@KDCCDJAH@m_pFuncDesc?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05NBMEKALG@m_pSD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@OMNLJHFK@IsValidSid?$CIm_pOwner?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@OBAEOCMP@IsValidSid?$CIm_pGroup?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCPNHINO@IsValidSid?$CI?$CKppUserSid?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@KFFJOLGB@IsValidSid?$CI?$CKppGroupSid?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@DIPCIDHP@IsValidSid?$CI?$CKppSid?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OBMCFJA@pDACL?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MLGOLPAB@pSACL?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BMHEGBAP@ppvObject?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DBHNDLKF@pThis?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@BBKMJDPM@pEntries?9?$DOpFunc?5?$DN?$DN?5?$CI?$CIATL?3?3_ATL_C@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@JELNCKOF@m_dwRef?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@IDNKKMJE@m_dwRef?5?$CB?$DN?5?91L?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@FOHBGNDM@0?5?$CG?$CG?5?$CCRelease?5called?5on?5a?5pointe@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HNJMKNAP@_GetEntries?$CI?$CJ?$FL0?$FN?4pFunc?5?$DN?$DN?5?$CI?$CIATL?3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@PADCHBLN@CComClassFactory?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HNHMIKBN@m_pfnCreateInstance?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@OCMNPHBO@CComClassFactory?3?5asked?5for?5non?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@GIDHOKEC@CComClassFactoryAutoThread?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@IADJOKDD@pUnkOuter?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@EKGMGAAP@Global?5instance?5of?5CAtlAutoThrea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FA@LAMCCAJ@_pAtlAutoThreadModule?5?$CG?$CG?5?$CCGlobal@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@NNHBFKBG@ppInfo?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PJPEDDJP@dw?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@GHLKPFE@m_plibid?5?$CB?$DN?50?5?$CG?$CG?5m_pguid?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DG@CJCBGKEH@Did?5you?5forget?5to?5pass?5the?5LIBID@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0GE@MNEAPMLF@?$CBInlineIsEqualGUID?$CI?$CKm_plibid?0?5GU@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EG@JLAFHAGH@ERROR?5?3?5Unable?5to?5lock?5critical?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0GE@IPBGNBKO@Warning?5?3?5CComTypeInfoHolder?3?3Ge@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@OOAEELGE@?7See?5IDispatchImpl?5overview?5help@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DG@JANIJOBP@ERROR?5?3?5Unable?5to?5load?5Typelibra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DE@PFCDKHBK@?7Verify?5TypelibID?5and?5major?5vers@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FB@GGFNIACC@?7IDispatchImpl?0?5CStockPropImpl?0?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@EEKELANO@m_dwEventCookie?5?$DN?$DN?50xFEFEFEFE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@GIPHNJNJ@pFuncDesc?9?$DOcParams?5?$DM?$DN?58?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@LCNPHLFB@dwCookie?5?$DN?$DN?51?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@BOIEFMLP@ppFind?5?$CG?$CG?5?$CKppFind?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@BDINPGFP@dwCookie?5?$CB?$DN?50?5?$CG?$CG?5dwCookie?5?$DM?$DN?5?$CIDW@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CO@ICACDJDH@?$CInID?5?$DO?$DN?50x0200?5?$CG?$CG?5nID?5?$DM?$DN?50xffff?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@NPFKCNOE@Unknown?5Error?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09CLIPNFKC@pMap?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DD@ENAKNIIA@Failed?5to?5get?5a?5dispatch?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@GHBEMKHH@Invoked?5failed?5on?5DISPID?5?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DLCABIHH@Property?5not?5in?5Bag?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@GELMNGCK@Property?5?$CFs?5not?5in?5Bag?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@IPNMLCCH@Error?5attempting?5to?5read?5Propert@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DI@IKDGMNLP@Error?5attempting?5to?5read?5Propert@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@NPIIBLHA@PropBag?5pointer?5passed?5in?5was?5in@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OBMGCDHH@Warning?5skipping?5empty?5IUnknown?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FF@PIIIFCFH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@NEOLANDK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04JAADICNI@?5?$DN?1?$FL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@KENCKLIF@?$CIiChar?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIiChar?5?$DM?$DN?5GetLen@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@OGIBJMFM@AtlIsValidAddress?$CI?5pch?0?5nLength?$CK@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@PKIBFLAK@AtlIsValidString?$CI?5pszSub?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@OBIGOAOM@AtlIsValidString?$CI?5pszFormat?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04DBLLIIGB@p?$DN?$DN0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CLHEGAEG@p?$CB?$DN0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FK@CHAMEKEI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@PPPPCDEP@?$AAA?$AAP?$AAP?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@HHBDEBO@ppvObj?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@HHDGIIFB@0123456789abcdefABCDEF?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EM@KKHJFHNK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InlineIsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcschr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsstr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsnccmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsncmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tclen
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tccpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPB_WHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPA_WPA_WPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPA_WPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPA_WPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeCategory@CTrace@ATL@@QAE_NKIW4ATLTRACESTATUS@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCategory@CTrace@ATL@@QAE_NKPAIPAW4ATLTRACESTATUS@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterCategory@CTrace@ATL@@QAEKPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CrtHookProc@CNoUIAssertHook@ATL@@CAHHPADPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlIsValidAddress@ATL@@YAHPBXIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComAutoCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComAutoCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetResourceInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@PAU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlFindResourceInstance@ATL@@YAPAUHINSTANCE__@@PBD0G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWin32Heap@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CWin32Heap@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CWin32Heap@ATL@@UAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@CWin32Heap@ATL@@UAEPAXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CWin32Heap@ATL@@UAEIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWin32Heap@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiWFake@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiWThunk@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEnvironmentVariableW@?$ChTraitsCRT@_W@ATL@@CGKPB_WPA_WK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsCRT@_W@ATL@@SAPB_WPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFixedStringMgr@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CFixedStringMgr@ATL@@UAEPAUCStringData@2@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CFixedStringMgr@ATL@@UAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@CFixedStringMgr@ATL@@UAEPAUCStringData@2@PAU32@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNilString@CFixedStringMgr@ATL@@UAEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CFixedStringMgr@ATL@@UAEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFixedStringMgr@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFixedStringLog@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnAllocateSpill@CFixedStringLog@ATL@@UAEXHHPBUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnReallocateSpill@CFixedStringLog@ATL@@UAEXHHPBUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFixedStringLog@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IFixedStringLog@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@CTimeSpan@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@CTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatGmt@CTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPair@CMapStringToString@@IAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPair@CMapStringToString@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromLastError@ATL@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromWin32@ATL@@YAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIDispatch@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@?$CComPtr@UIDispatch@@@ATL@@QAEJJPAUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutProperty@?$CComPtr@UIDispatch@@@ATL@@QAEJJPAUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIDOfName@?$CComPtr@UIDispatch@@@ATL@@QAEJPB_WPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Invoke0@?$CComPtr@UIDispatch@@@ATL@@QAEJJPAUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Invoke1@?$CComPtr@UIDispatch@@@ATL@@QAEJJPAUtagVARIANT@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InvokeN@?$CComPtr@UIDispatch@@@ATL@@QAEJJPAUtagVARIANT@@H0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutProperty@?$CComPtr@UIDispatch@@@ATL@@SAJPAUIDispatch@@JPAUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@?$CComPtr@UIDispatch@@@ATL@@SAJPAUIDispatch@@JPAUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ByteLength@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPA_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPA_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPA_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CComBSTR@ATL@@QAEXPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPA_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@CComBSTR@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7CComBSTR@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??MCComBSTR@ATL@@QBE_NABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??MCComBSTR@ATL@@QBE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??OCComBSTR@ATL@@QBE_NABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??OCComBSTR@ATL@@QBE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9CComBSTR@ATL@@QBE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComBSTR@ATL@@QBE_NABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComBSTR@ATL@@QBE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComBSTR@ATL@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComBSTR@ATL@@QBE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringResource@CComBSTR@ATL@@SA_NPAUHINSTANCE__@@IAAPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringResource@CComBSTR@ATL@@SA_NIAAPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@ABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@ABVCComBSTR@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComVariant@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComVariant@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Invoke2@?$CComPtr@UIDispatch@@@ATL@@QAEJJPAUtagVARIANT@@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@COleDateTimeSpan@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIMalloc@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLinkCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLinkCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItem@CLinkCtrl@@QAEHPAUtagLITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItem@CLinkCtrl@@QBEHPAUtagLITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_exception@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_exception@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1domain_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gdomain_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1overflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Goverflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1underflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gunderflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1range_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Grange_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_DebugHeapString@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocbyte@_W@std@@YAD_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$codecvt@_WDH@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IDataManager@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIDataManager@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBasicSkinWnd@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBasicSkinWnd@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IUIManager@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIUIManager@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IMessageObserver@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIMessageObserver@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IMessageManager@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIMessageManager@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemDC@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3GdiplusBase@Gdiplus@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2GdiplusBase@Gdiplus@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SizeF@Gdiplus@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Size@Gdiplus@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PointF@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PointF@Gdiplus@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Point@Gdiplus@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0RectF@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0RectF@Gdiplus@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLeft@RectF@Gdiplus@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTop@RectF@Gdiplus@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRight@RectF@Gdiplus@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBottom@RectF@Gdiplus@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmptyArea@RectF@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Contains@RectF@Gdiplus@@QBEHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Inflate@RectF@Gdiplus@@QAEXMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@RectF@Gdiplus@@SAHAAV12@ABV12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Offset@RectF@Gdiplus@@QAEXMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rect@Gdiplus@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLeft@Rect@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTop@Rect@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRight@Rect@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBottom@Rect@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmptyArea@Rect@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Contains@Rect@Gdiplus@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Inflate@Rect@Gdiplus@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@Rect@Gdiplus@@SAHAAV12@ABV12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Offset@Rect@Gdiplus@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Color@Gdiplus@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAlpha@Color@Gdiplus@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRed@Color@Gdiplus@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGreen@Color@Gdiplus@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBlue@Color@Gdiplus@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValue@Color@Gdiplus@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@Color@Gdiplus@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeARGB@Color@Gdiplus@@SAKEEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWmf@MetafileHeader@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmfOrEmfPlus@MetafileHeader@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmfPlus@MetafileHeader@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Region@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GImage@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CustomLineCap@Gdiplus@@IAE@PAVGpCustomLineCap@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeCap@CustomLineCap@Gdiplus@@IAEXPAVGpCustomLineCap@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@CustomLineCap@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCustomLineCap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRemapTable@ImageAttributes@Gdiplus@@QAE?AW4Status@2@IPBUColorMap@2@W4ColorAdjustType@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearRemapTable@ImageAttributes@Gdiplus@@QAE?AW4Status@2@W4ColorAdjustType@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ImageAttributes@Gdiplus@@IAE@PAVGpImageAttributes@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeImageAttr@ImageAttributes@Gdiplus@@IAEXPAVGpImageAttributes@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@ImageAttributes@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetElements@Matrix@Gdiplus@@QBE?AW4Status@2@PAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Matrix@Gdiplus@@IAE@PAV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeMatrix@Matrix@Gdiplus@@IAEXPAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Matrix@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Brush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@Brush@Gdiplus@@UBEPAV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Brush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SolidBrush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSolidBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SolidBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TextureBrush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTextureBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TextureBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0LinearGradientBrush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GLinearGradientBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LinearGradientBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0HatchBrush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GHatchBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1HatchBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPenType@Pen@Gdiplus@@QBE?AW4PenType@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Pen@Gdiplus@@IAE@PAVGpPen@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativePen@Pen@Gdiplus@@IAEXPAVGpPen@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Pen@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringFormat@Gdiplus@@IAE@PAVGpStringFormat@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddLine@GraphicsPath@Gdiplus@@QAE?AW4Status@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddLine@GraphicsPath@Gdiplus@@QAE?AW4Status@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddArc@GraphicsPath@Gdiplus@@QAE?AW4Status@2@MMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddArc@GraphicsPath@Gdiplus@@QAE?AW4Status@2@HHHHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddBezier@GraphicsPath@Gdiplus@@QAE?AW4Status@2@MMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddBezier@GraphicsPath@Gdiplus@@QAE?AW4Status@2@HHHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddEllipse@GraphicsPath@Gdiplus@@QAE?AW4Status@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddEllipse@GraphicsPath@Gdiplus@@QAE?AW4Status@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPie@GraphicsPath@Gdiplus@@QAE?AW4Status@2@MMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPie@GraphicsPath@Gdiplus@@QAE?AW4Status@2@HHHHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPointCount@GraphicsPath@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0GraphicsPath@Gdiplus@@IAE@PAVGpPath@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativePath@GraphicsPath@Gdiplus@@IAEXPAVGpPath@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeIterator@GraphicsPathIterator@Gdiplus@@IAEXPAVGpPathIterator@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@GraphicsPathIterator@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPointCount@PathGradientBrush@Gdiplus@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPathGradientBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PathGradientBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CustomLineCap@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CustomLineCap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStrokeCaps@CustomLineCap@Gdiplus@@QAE?AW4Status@2@W4LineCap@2@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAdjustableArrowCap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AdjustableArrowCap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMetafile@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Metafile@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAVImage@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawLine@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawLine@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawArc@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawArc@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@HHHHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawBezier@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawBezier@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@HHHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawEllipse@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawEllipse@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawPie@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawPie@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@HHHHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillPolygon@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVPointF@2@HW4FillMode@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillPolygon@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVPoint@2@HW4FillMode@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillEllipse@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillEllipse@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillPie@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillPie@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@HHHHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Graphics@Gdiplus@@QBEHABVPoint@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Graphics@Gdiplus@@QBEHABVRect@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Graphics@Gdiplus@@QBEHABVPointF@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Graphics@Gdiplus@@QBEHABVRectF@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@GraphicsPath@Gdiplus@@QBEHMMPBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@GraphicsPath@Gdiplus@@QBEHHHPBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsOutlineVisible@GraphicsPath@Gdiplus@@QBEHMMPBVPen@2@PBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsOutlineVisible@GraphicsPath@Gdiplus@@QBEHHHPBVPen@2@PBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCachedBitmap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CachedBitmap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Region@Gdiplus@@QBEHABVPointF@2@PBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Region@Gdiplus@@QBEHABVRectF@2@PBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Region@Gdiplus@@QBEHABVPoint@2@PBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsVisible@Region@Gdiplus@@QBEHABVRect@2@PBVGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Region@Gdiplus@@IAE@PAVGpRegion@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeRegion@Region@Gdiplus@@IAEXPAVGpRegion@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FontCollection@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFontCollection@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FontCollection@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@FontCollection@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GInstalledFontCollection@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1InstalledFontCollection@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPrivateFontCollection@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PrivateFontCollection@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FontFamily@Gdiplus@@QAE@PB_WPBVFontCollection@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FontFamily@Gdiplus@@IAE@PAVGpFontFamily@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenericSansSerif@FontFamily@Gdiplus@@SAPBV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FontFamily@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLastStatus@FontFamily@Gdiplus@@QBE?AW4Status@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@FontFamily@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Font@Gdiplus@@IAE@PAVGpFont@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@QAE@PAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Image@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@Image@Gdiplus@@UAEPAV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBitmap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Bitmap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PBUtagBITMAPINFO@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PAUHBITMAP__@@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PAUHICON__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PAUHINSTANCE__@@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@Bitmap@Gdiplus@@QAEPAV12@HHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@Bitmap@Gdiplus@@QAEPAV12@MMMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@IAE@PAVGpBitmap@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CStreamOnCString@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStreamOnCString@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStreamOnCString@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Read@CStreamOnCString@@UAGJPAXKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Write@CStreamOnCString@@UAGJPBXKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@CStreamOnCString@@UAGJT_LARGE_INTEGER@@KPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@CStreamOnCString@@UAGJT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyTo@CStreamOnCString@@UAGJPAUIStream@@T_ULARGE_INTEGER@@PAT3@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Commit@CStreamOnCString@@UAGJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Revert@CStreamOnCString@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LockRegion@CStreamOnCString@@UAGJT_ULARGE_INTEGER@@0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnlockRegion@CStreamOnCString@@UAGJT_ULARGE_INTEGER@@0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Stat@CStreamOnCString@@UAGJPAUtagSTATSTG@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CStreamOnCString@@UAGJPAPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ISequentialStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY30@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY30@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@_stdcallthunk@ATL@@QAEXKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCodeAddress@_stdcallthunk@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CHandle@ATL@@QAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CHandle@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CHandle@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CCritSecLock@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CCritSecLock@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlComModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterTypeLib@CAtlComModule@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterTypeLib@CAtlComModule@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnRegisterTypeLib@CAtlComModule@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnRegisterTypeLib@CAtlComModule@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@CAtlComModule@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@CAtlComModule@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCreateWndData@CAtlWinModule@ATL@@QAEXPAU_AtlCreateWndData@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtractCreateWndData@CAtlWinModule@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E2
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??0CAtlModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlModule@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLockCount@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTermFunc@CAtlModule@ATL@@QAEJP6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGITPtr@CAtlModule@ATL@@UAEJPAPAUIGlobalInterfaceTable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EscapeSingleQuote@CAtlModule@ATL@@SAXPA_WPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAtlModule@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_m_hInst@CComModule@ATL@@QBEAAPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceD@CComModule@ATL@@UAGJPBDHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceD@CComModule@ATL@@UAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CComModule@ATL@@UAGJPBDHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CComModule@ATL@@UAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComModule@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlModuleT@VCComModule@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComModule@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetThread@CComSimpleThreadAllocator@ATL@@QAEHPAVCComApartment@2@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@PAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CRegKey@ATL@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteValue@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryStringValue@CRegKey@ATL@@QAEJPBDPADPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDWORDValue@CRegKey@ATL@@QAEJPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStringValue@CRegKey@ATL@@QAEJPBD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMultiStringValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualKey@CExpansionVectorEqualHelper@ATL@@SA_NQAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CExpansionVector@ATL@@QAEHPBDPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CExpansionVector@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateError@CRegParser@ATL@@IAEJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndOfVar@CRegParser@ATL@@IAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CParseBuffer@CRegParser@ATL@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CParseBuffer@CRegParser@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CParseBuffer@CRegParser@ATL@@QAEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddChar@CParseBuffer@CRegParser@ATL@@QAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddString@CParseBuffer@CRegParser@ATL@@QAEHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CParseBuffer@CRegParser@ATL@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CRegObject@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegObject@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRegObject@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddReplacement@CRegObject@ATL@@UAGJPB_W0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterFromResource@CRegObject@ATL@@IAEJPB_WPBD1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceRegister@CRegObject@ATL@@QAGJPB_WI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceRegisterSz@CRegObject@ATL@@QAGJPB_W00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceUnregister@CRegObject@ATL@@QAGJPB_WI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceUnregisterSz@CRegObject@ATL@@QAGJPB_W00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterWithString@CRegObject@ATL@@IAEJPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CRegObject@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrFromMap@CRegObject@ATL@@QAEPB_WPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CommonFileRegister@CRegObject@ATL@@IAEJPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChToByte@CRegParser@ATL@@KAED@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrChrA@CRegParser@ATL@@KAPADPADD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegParser@ATL@@QAE@PAVCRegObject@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSpace@CRegParser@ATL@@IAEHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipWhiteSpace@CRegParser@ATL@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NextToken@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddValue@CRegParser@ATL@@IAEJAAVCRegKey@2@PBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanForceRemoveKey@CRegParser@ATL@@IAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasSubKeys@CRegParser@ATL@@IAEHPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipAssignment@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreProcessBuffer@CRegParser@ATL@@QAEJPADPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterBuffer@CRegParser@ATL@@QAEJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterSubkeys@CRegParser@ATL@@IAEJPADPAUHKEY__@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CAtlModule@ATL@@QAGJPBDHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegObject@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IRegistrarBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CAtlModule@ATL@@QAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlLoadTypeLib@ATL@@YGJPAUHINSTANCE__@@PB_WPAPA_WPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlUnRegisterTypeLib@ATL@@YGJPAUHINSTANCE__@@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterTypeLib@ATL@@YGJPAUHINSTANCE__@@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComModuleRegisterServer@ATL@@YGJPAU_ATL_COM_MODULE70@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComModuleUnregisterServer@ATL@@YGJPAU_ATL_COM_MODULE70@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DLLVERSIONINFO@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DLLVERSIONINFO@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_m_csStaticDataInit@CComModule@ATL@@QAEAAU_RTL_CRITICAL_SECTION@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CComModule@ATL@@QAEJPAU_ATL_OBJMAP_ENTRY30@2@PAUHINSTANCE__@@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassObject@CComModule@ATL@@QAEJABU_GUID@@0PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@CComModule@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@CComModule@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlReportError@ATL@@YGJABU_GUID@@PBDK10J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CComTypeAttr@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CComVarDesc@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CComFuncDesc@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComExcepInfo@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneSID@CSecurityDescriptor@ATL@@SAJPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CSecurityDescriptor@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetOwner@CSecurityDescriptor@ATL@@QAEJPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGroup@CSecurityDescriptor@ATL@@QAEJPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allow@CSecurityDescriptor@ATL@@QAEJPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Deny@CSecurityDescriptor@ATL@@QAEJPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Revoke@CSecurityDescriptor@ATL@@QAEJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProcessSids@CSecurityDescriptor@ATL@@SAJPAPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetThreadSids@CSecurityDescriptor@ATL@@SAJPAPAX0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTokenSids@CSecurityDescriptor@ATL@@SAJPAXPAPAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPrincipalSID@CSecurityDescriptor@ATL@@SAJPBDPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CSecurityDescriptor@ATL@@QAEJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyACL@CSecurityDescriptor@ATL@@SAJPAU_ACL@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddAccessDeniedACEToACL@CSecurityDescriptor@ATL@@SAJPAPAU_ACL@@PAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddAccessAllowedACEToACL@CSecurityDescriptor@ATL@@SAJPAPAU_ACL@@PAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemovePrincipalFromACL@CSecurityDescriptor@ATL@@SAJPAU_ACL@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Cache@CComObjectRootBase@ATL@@SGJPAXABU_GUID@@PAPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetRawUnknown@CComClassFactory@ATL@@QAEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CComClassFactory@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComClassFactory@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@CComClassFactory@ATL@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LockServer@CComClassFactory@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComClassFactory@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetRawUnknown@CComClassFactoryAutoThread@ATL@@QAEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CComClassFactoryAutoThread@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComClassFactoryAutoThread@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@CComClassFactoryAutoThread@ATL@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LockServer@CComClassFactoryAutoThread@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComClassFactoryAutoThread@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTI@CComTypeInfoHolder@ATL@@QAEJKPAPAUITypeInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnsureTI@CComTypeInfoHolder@ATL@@QAEJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cleanup@CComTypeInfoHolder@ATL@@SGXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadNameCache@CComTypeInfoHolder@ATL@@QAEJPAUITypeInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTI@CComTypeInfoHolder@ATL@@QAEJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DispEventAdvise@_IDispEvent@ATL@@QAEJPAUIUnknown@@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DispEventUnadvise@_IDispEvent@ATL@@QAEJPAUIUnknown@@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetUserDefinedType@ATL@@YAGPAUITypeInfo@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlSetErrorInfo@ATL@@YGJABU_GUID@@PB_WK10JPAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIDispatch@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetObjectSourceInterface@ATL@@YGJPAUIUnknown@@PAU_GUID@@1PAG2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIProvideClassInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersist@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrList@VCObList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CTypedPtrList@VCObList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrList@VCPtrList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CTypedPtrList@VCPtrList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrList@VCObList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrList@VCPtrList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMarkup@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetPos@CMarkup@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ElemPos@CMarkup@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@ElemPos@CMarkup@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AdjustStart@ElemPos@CMarkup@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TokenPos@CMarkup@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@TokenPos@CMarkup@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Match@TokenPos@CMarkup@@QAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?x_SetPos@CMarkup@@IAEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMarkup@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@PAUIDispatch@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIDispatch@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UIDispatch@@@ATL@@QAEPAPAUIDispatch@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UIDispatch@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDispatch@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComPtrBase@UIDispatch@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UIPersistStream@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIPersistStream@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIMalloc@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIMalloc@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UIMalloc@@@ATL@@QAEPAPAUIMalloc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UIMalloc@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIMalloc@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlModuleT@VCComModule@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@?$CAtlModuleT@VCComModule@ATL@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@?$CAtlModuleT@VCComModule@ATL@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCommonRGSReplacements@?$CAtlModuleT@VCComModule@ATL@@@ATL@@UAEJPAUIRegistrarBase@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@UAEJPAXABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEHABQADABQA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEPA_WABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetKeyAt@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValueAt@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPA_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo@@@ATL@@QAE@PAUITypeInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UITypeInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo@@@ATL@@QBEPAUITypeInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UITypeInfo@@@ATL@@QAEPAPAUITypeInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UITypeInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@?$CComPtrBase@UITypeInfo@@@ATL@@QAEPAUITypeInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UITypeInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UITypeInfo2@@@ATL@@QAEPAPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIProvideClassInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIProvideClassInfo2@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIProvideClassInfo2@@@ATL@@QBEPAUIProvideClassInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UIProvideClassInfo2@@@ATL@@QAEPAPAUIProvideClassInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UIProvideClassInfo2@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIProvideClassInfo2@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersist@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIPersist@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtrBase@UIPersist@@@ATL@@QAEPAPAUIPersist@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtrBase@UIPersist@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIPersist@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CTypedPtrList@VCObList@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CTypedPtrList@VCPtrList@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_DebugHeapAllocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CAtlModuleT@VCComModule@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$_CTypedPtrList@VCObList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$_CTypedPtrList@VCPtrList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIPersistStream@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIMalloc@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$_DebugHeapAllocator@D@std@@@std@@IAE@V?$_DebugHeapAllocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAppId@?$CAtlModuleT@VCAtlMfcModule@ATL@@@ATL@@SAPB_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitLibId@?$CAtlModuleT@VCComModule@ATL@@@ATL@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAppId@?$CAtlModuleT@VCComModule@ATL@@@ATL@@SAPB_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindKey@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalSetAtIndex@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXHABQADABQA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UITypeLib@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UICatRegister@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UITypeInfo@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UITypeInfo@@@ATL@@IAE@PAUITypeInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UITypeInfo2@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UICreateErrorInfo@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIErrorInfo@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIProvideClassInfo2@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIPersist@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@_W$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAD@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PA_W@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAE@AAVCComCriticalSection@1@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UITypeInfo2@@@IUnknown@@QAGJPAPAUITypeInfo2@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?4UITypeInfo2@@@?$CComPtr@UITypeInfo@@@ATL@@QAEPAUITypeInfo@@ABV?$CComPtr@UITypeInfo2@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@UElemPos@CMarkup@@AAU12@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@UElemPos@CMarkup@@AAU12@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@UElemPos@CMarkup@@AAU12@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@UElemPos@CMarkup@@AAU12@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@UElemPos@CMarkup@@AAU12@@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Getloctxt@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Getloctxt@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@YAHAAV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0IPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?8_WU?$char_traits@_W@std@@@std@@YA_NABV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocbyte@D@std@@YADDABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?9_WU?$char_traits@_W@std@@@std@@YA_NABV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAD@?$Wrapper@PAD@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAD@?$Wrapper@PAD@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PA_W@?$Wrapper@PA_W@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PA_W@?$Wrapper@PA_W@?$CSimpleMap@PADPA_WVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@UElemPos@CMarkup@@AAU12@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$CopyElements@UElemPos@CMarkup@@@@YGXPAUElemPos@CMarkup@@PBU01@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@UElemPos@CMarkup@@@@YGXAAVCArchive@@PAUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$DumpElements@UElemPos@CMarkup@@@@YGXAAVCDumpContext@@PBUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IID_ITableDefinition
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@LinearGradientBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@FontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICommandProperties
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R3FontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2ISequentialStream@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCComClassFactory@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCWin32Heap@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4IFixedStringLog@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2Metafile@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetIdentity
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CNoTrackObject@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICommandText
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3Brush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CComClassFactoryAutoThread@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CStreamOnCString@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$_CTypedPtrList@VCObList@@PAV1@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4Brush@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2Brush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@AdjustableArrowCap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrList@VCObList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$_CTypedPtrList@VCPtrList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IErrorRecords
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CCommonDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CustomLineCap@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCPtrList@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CStreamOnCString@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IBoundObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVIUIManager@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _PROPID_ACC_SELECTION
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7IUIManager@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CachedBitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7CMemDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrList@VCObList@@PAV1@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCStreamOnCString@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IIS_IsOleaccProxy
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CachedBitmap@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CNoTrackObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IClassFactory@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2LinearGradientBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ICommand
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R13?0A@A@CComObjectRootBase@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CComModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??_R0?AVImage@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2CComClassFactory@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVGdiplusBase@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IDBInitialize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVHatchBrush@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7IStream@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3IStream@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetWatchRegion
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@A@codecvt_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CComModule@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CNoTrackObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPtrList@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_NAV_UP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISQLErrorInfo
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVCustomLineCap@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMemDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3_IDispEvent@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CTypedPtrList@VCObList@@PAV1@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7ISequentialStream@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVCAtlModule@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVFontCollection@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBasicSkinWnd@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2PathGradientBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IAccPropServer
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetWatchNotify
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3?$_CTypedPtrList@VCObList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7?$_CTypedPtrList@VCObList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetResynch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _SID_SHTMLEditServices
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVSolidBrush@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@UElemPos@CMarkup@@AAU12@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCLinkCtrl@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CRegObject@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$_CTypedPtrList@VCPtrList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3IDataManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CustomLineCap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IDBSchemaRowset
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CComClassFactoryAutoThread@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICursorUpdateARow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@PathGradientBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ISourcesRowset
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2CMarkup@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IOpenRowset
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDBProperties
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szaCode@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAPADA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCFixedStringLog@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV_IDispEvent@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CachedBitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$_CTypedPtrList@VCPtrList@@PAV1@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AU_ATL_MODULE70@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R13?0A@A@?$CComObjectRootEx@VCComMultiThreadModel@ATL@@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@PrivateFontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICommandTree
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_PARENT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICursorScroll
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetWatchAll
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CCommonDialog@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@_WDH@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@exception@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@A@_IDispEvent@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7CLinkCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2HatchBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrList@VCObList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetAsynch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IMultipleResults
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2?$CTypedPtrList@VCPtrList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUIAtlMemMgr@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2CMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7IMessageObserver@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3IMessageObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialStream@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3Metafile@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICommandCost
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2_IDispEvent@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7IDataManager@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _SID_SHTMLEditHost
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CWin32Heap@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4underflow_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IStream@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4Metafile@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IRegistrarBase@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4LinearGradientBrush@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _PROPID_ACC_DESCRIPTION
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBasicSkinWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2FontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_DESCRIPTIONMAP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$_CTypedPtrList@VCObList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CFixedStringMgr@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVLinearGradientBrush@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICursor
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0PAVCMemoryException@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_NAV_FIRSTCHILD
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetInfo
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4AdjustableArrowCap@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ICommandPrepare
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CustomLineCap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCComObjectRootBase@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AV?$CArray@UElemPos@CMarkup@@AAU12@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBasicSkinWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetFind
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDBCreateSession
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_ROLEMAP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISessionProperties
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$CTypedPtrList@VCPtrList@@PAV1@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCRegObject@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _PROPID_ACC_STATEMAP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@SolidBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVMetafile@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4overflow_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IDBDataSourceAdmin
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CGID_DocHostCommandHandler
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@A@IAtlMemMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CMemDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IUIManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CComClassFactoryAutoThread@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4_IDispEvent@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0PAVCException@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_ROLE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@TextureBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Brush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVAdjustableArrowCap@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CFixedStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IProvideMoniker
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3PrivateFontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObList@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT _IID_IAccessor
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVPathGradientBrush@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _PROPID_ACC_DEFAULTACTION
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4Bitmap@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICommandWithParameters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AUIStream@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2IFixedStringLog@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IAtlAutoThreadModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IIndexDefinition
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@IMessageObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ITransactionObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2IMessageManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CAtlModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObList@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2?$CArray@UElemPos@CMarkup@@AAU12@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVIFixedStringLog@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrList@VCPtrList@@PAV1@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _PROPID_ACC_VALUE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4domain_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBasicSkinWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CAtlModuleT@VCComModule@ATL@@@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CWin32Heap@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3AdjustableArrowCap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CComClassFactory@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CComClassFactoryAutoThread@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IDataManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVIMessageObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDialog@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CAtlModuleT@VCComModule@ATL@@@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3ISequentialStream@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_HELPTOPIC
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?WM_DESTROYMODELESS@CDHtmlDialog@@1IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVTextureBrush@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IDBSecurityInfo
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AV?$_CTypedPtrList@VCObList@@PAV1@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AUIClassFactory@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAccessibleHandler
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CAtlModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _SID_SEditCommandTarget
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CFixedStringLog@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBasicSkinWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?szaReplace@?1??x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z@4PAPADA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7IMessageManager@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@IStream@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3LinearGradientBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetCopyRows
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStreamOnCString@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrList@VCPtrList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IRowsetNewRowAfter
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVIDataManager@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AUIAtlAutoThreadModule@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4FontCollection@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IReadData
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3IMessageManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7?$CTypedPtrList@VCObList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AUIAtlStringMgr@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_HELP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7?$CTypedPtrList@VCPtrList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2CWin32Heap@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IMessageManager@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVBitmap@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$CAtlModuleT@VCComModule@ATL@@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@A@CLinkCtrl@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CCommonDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2?$_CTypedPtrList@VCPtrList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4Image@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CLinkCtrl@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4invalid_argument@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CFixedStringLog@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$codecvt@_WDH@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4range_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IFixedStringLog@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetScroll
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@IUnknown@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCMarkup@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?map@?2??HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z@4QBUkeymap@23@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CComClassFactoryAutoThread@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?szSymbol@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PADA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@IMessageManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IMessageObserver@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IAccessible
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CComClassFactory@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CLinkCtrl@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICursorFind
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CRegObject@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CFixedStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3IUIManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_FOCUS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetKeys
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Metafile@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_DODEFAULTACTION
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CComClassFactory@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ITransactionJoin
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CFixedStringLog@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IStream@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IDataManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IRegistrarBase@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_KEYBOARDSHORTCUT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R13?0A@A@_ATL_MODULE70@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCFixedStringMgr@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetNextRowset
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4HatchBrush@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IErrorLookup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_RIGHT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CAtlModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4PathGradientBrush@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@InstalledFontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _PROPID_ACC_NAME
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CMarkup@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4PrivateFontCollection@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IAccPropMgrInternal
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@HatchBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVInstalledFontCollection@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7IUnknown@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4bad_exception@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CRegObject@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CFixedStringLog@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CComModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICommandValidate
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_AccPropServices
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IUIManager@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2InstalledFontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2CStreamOnCString@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CMarkup@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowset
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4SolidBrush@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrList@VCPtrList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3IRegistrarBase@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3SolidBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetUpdate
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4IDataManager@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CLinkCtrl@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCachedBitmap@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?$S4@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??_R1A@?0A@A@bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CustomLineCap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_VALUEMAP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CComClassFactory@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IUIManager@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$_CTypedPtrList@VCObList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ISequentialStream@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_Accessibility
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4IUnknown@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ICursorMove
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetLocate
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CAtlModule@ATL@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_STATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3InstalledFontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IAtlStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrList@VCObList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVPrivateFontCollection@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IEntryID
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ITransactionLocal
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_LASTCHILD
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7IRegistrarBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3HatchBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@UElemPos@CMarkup@@AAU12@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IColumnsRowset
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetWithParameters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAccPropServices
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2AdjustableArrowCap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVBrush@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CStreamOnCString@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4TextureBrush@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CWin32Heap@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_NAV_DOWN
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CAtlModuleT@VCComModule@ATL@@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _ImageFormatEMF
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatEXIF
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderTransformation
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7InstalledFontCollection@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderLuminanceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CustomLineCap@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _FrameDimensionTime
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _FormatIDJpegAppHeaders
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatMemoryBMP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _FrameDimensionResolution
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CodecIImageBytes
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderVersion
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatUndefined
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7LinearGradientBrush@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderChrominanceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SolidBrush@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Brush@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatPNG
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _FrameDimensionPage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderRenderMethod
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Bitmap@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderQuality
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatJPEG
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FontCollection@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatTIFF
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderCompression
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7HatchBrush@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PrivateFontCollection@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatBMP
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderScanMethod
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderSaveFlag
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatGIF
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatIcon
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7AdjustableArrowCap@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PathGradientBrush@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _EncoderColorDepth
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _FormatIDImageInformation
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Metafile@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CachedBitmap@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TextureBrush@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Image@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _ImageFormatWMF
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetChange
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetNotify
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_LEFT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3TextureBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_ISequentialStream
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_INotifyDBEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4InstalledFontCollection@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@UElemPos@CMarkup@@AAU12@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CCommonDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?map@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4QBUtypemap@23@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCComClassFactoryAutoThread@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCommonDialog@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD11K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Day@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CFixedStringMgr@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CComModule@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szInvalidDateTimeSpan@ATL@@3QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Minute@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAtlModule@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CFixedStringLog@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Week@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Hour@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7IFixedStringLog@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRegObject@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Millisecond@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CAtlModuleT@VCComModule@ATL@@@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CComClassFactory@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_strthunks@ATL@@3U_AtlStringThunks@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szInvalidDateTime@ATL@@3QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComClassFactoryAutoThread@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7_IDispEvent@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CAtlAutoThreadModuleT@VCAtlAutoThreadModule@ATL@@VCComSimpleThreadAllocator@2@$0PPPPPPPP@@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Second@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??_7CWin32Heap@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CComModule@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_NAV_NEXT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAccIdentity
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?anCodeLen@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAHA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AUIRegistrarBase@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CBasicSkinWnd@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_CTypedPtrList@VCPtrList@@PAV1@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2CNoTrackObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CAtlModuleT@VCComModule@ATL@@@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2IMessageObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IDBCreateCommand
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@CMarkup@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _PROPID_ACC_NAV_PREV
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3PathGradientBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7underflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7overflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Stz@?$fpos@H@std@@0HA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$codecvt@_WDH@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_exception@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7range_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7domain_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3IFixedStringLog@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFixedStringMgr@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IConvertType
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDBInfo
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDBSchemaCommand
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __DBBMKGUID
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2PrivateFontCollection@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IGetDataSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVCNoTrackObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMarkup@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IQuery
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2SolidBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_NAMEONLY
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3CachedBitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IRegistrarBase@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IBoundObjectSite
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CGID_EditStateCommands
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R1A@?0A@A@length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCComModule@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ITableRename
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4ISequentialStream@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@UElemPos@CMarkup@@AAU12@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRowsetIndex
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2CRegObject@ATL@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$_CTypedPtrList@VCPtrList@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IColumnsInfo
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVIMessageManager@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2TextureBrush@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IID_IRowsetExactScroll
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	_IID_IConvertType
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?WM_DESTROYMODELESS@CDHtmlDialog@@1IA		; CDHtmlDialog::WM_DESTROYMODELESS
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	_IID_ICommandPrepare
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	_IID_IRowsetLocate
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	_IID_ICursor
PUBLIC	_IID_ICursorMove
PUBLIC	_IID_ICursorScroll
PUBLIC	_IID_ICursorUpdateARow
PUBLIC	_IID_INotifyDBEvents
PUBLIC	_IID_ICursorFind
PUBLIC	_IID_IEntryID
PUBLIC	__GUID_NAMEONLY
PUBLIC	__DBBMKGUID
PUBLIC	_IID_IRowsetExactScroll
PUBLIC	_IID_IRowsetNextRowset
PUBLIC	_IID_IRowsetNewRowAfter
PUBLIC	_IID_ICommandProperties
PUBLIC	_IID_IRowsetWithParameters
PUBLIC	_IID_IRowsetAsynch
PUBLIC	_IID_IRowsetKeys
PUBLIC	_IID_IRowsetWatchAll
PUBLIC	_IID_IRowsetWatchNotify
PUBLIC	_IID_IRowsetWatchRegion
PUBLIC	_IID_IRowsetCopyRows
PUBLIC	_IID_IReadData
PUBLIC	_IID_ICommandCost
PUBLIC	_IID_ICommandTree
PUBLIC	_IID_ICommandValidate
PUBLIC	_IID_IQuery
PUBLIC	_IID_ITableRename
PUBLIC	_IID_IDBSchemaCommand
PUBLIC	_IID_IDBSecurityInfo
PUBLIC	_IID_IProvideMoniker
PUBLIC	_IID_ICommandText
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	_IID_IRowsetResynch
PUBLIC	_ImageFormatUndefined
PUBLIC	_ImageFormatMemoryBMP
PUBLIC	_ImageFormatBMP
PUBLIC	_ImageFormatEMF
PUBLIC	_IID_IInternalConnection
PUBLIC	_ImageFormatWMF
PUBLIC	_ImageFormatJPEG
PUBLIC	_ImageFormatPNG
PUBLIC	_ImageFormatGIF
PUBLIC	_ImageFormatTIFF
PUBLIC	_ImageFormatEXIF
PUBLIC	_ImageFormatIcon
PUBLIC	_IID_ICommandWithParameters
PUBLIC	_FrameDimensionTime
PUBLIC	_FrameDimensionResolution
PUBLIC	_FrameDimensionPage
PUBLIC	_FormatIDImageInformation
PUBLIC	_FormatIDJpegAppHeaders
PUBLIC	_EncoderCompression
PUBLIC	_EncoderColorDepth
PUBLIC	_EncoderScanMethod
PUBLIC	_EncoderVersion
PUBLIC	_EncoderRenderMethod
PUBLIC	_EncoderQuality
PUBLIC	_EncoderTransformation
PUBLIC	_EncoderLuminanceTable
PUBLIC	_EncoderChrominanceTable
PUBLIC	_EncoderSaveFlag
PUBLIC	_CodecIImageBytes
PUBLIC	_IID_IRowsetScroll
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	_CLSID_StdGlobalInterfaceTable
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	_IID_IColumnsRowset
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	_IID_IColumnsInfo
PUBLIC	_IID_IRowsetFind
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	_IID_IDBCreateCommand
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	_IID_IDBCreateSession
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	_IID_ISourcesRowset
PUBLIC	?Millisecond@CFileTime@ATL@@2_KB		; ATL::CFileTime::Millisecond
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?Second@CFileTime@ATL@@2_KB			; ATL::CFileTime::Second
PUBLIC	_IID_IErrorRecords
PUBLIC	?Minute@CFileTime@ATL@@2_KB			; ATL::CFileTime::Minute
PUBLIC	?Hour@CFileTime@ATL@@2_KB			; ATL::CFileTime::Hour
PUBLIC	_CLSID_Registrar
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
PUBLIC	?Day@CFileTime@ATL@@2_KB			; ATL::CFileTime::Day
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
PUBLIC	?Week@CFileTime@ATL@@2_KB			; ATL::CFileTime::Week
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?szInvalidDateTime@ATL@@3QBDB			; ATL::szInvalidDateTime
PUBLIC	?szInvalidDateTimeSpan@ATL@@3QBDB		; ATL::szInvalidDateTimeSpan
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	_IID_IDBProperties
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	_IID_IRegistrar
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA ; ATL::CNoUIAssertHook::s_pfnPrevHook
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A ; ATL::CFixedStringMgr::s_pLog
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	_IID_IDBInitialize
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	_IID_IErrorLookup
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT>::VT
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	_IID_ISQLErrorInfo
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	_IID_IDBInfo
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	_IID_IGetDataSource
PUBLIC	_IID_ISequentialStream
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	_IID_ITransactionLocal
PUBLIC	_IID_IDBDataSourceAdmin
PUBLIC	_LIBID_Accessibility
PUBLIC	_IID_IAccessible
PUBLIC	_IID_IAccessibleHandler
PUBLIC	_IID_IAccIdentity
PUBLIC	_IID_IAccPropServer
PUBLIC	_IID_IAccPropServices
PUBLIC	_IID_ITransactionJoin
PUBLIC	_IID_IAccPropMgrInternal
PUBLIC	_CLSID_AccPropServices
PUBLIC	_IIS_IsOleaccProxy
PUBLIC	_IID_IRowsetChange
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	_IID_ITransactionObject
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?_strthunks@ATL@@3U_AtlStringThunks@1@A		; ATL::_strthunks
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	_IID_IRowsetUpdate
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	_PROPID_ACC_NAME
PUBLIC	_PROPID_ACC_VALUE
PUBLIC	_PROPID_ACC_DESCRIPTION
PUBLIC	_PROPID_ACC_ROLE
PUBLIC	_PROPID_ACC_STATE
PUBLIC	_PROPID_ACC_HELP
PUBLIC	_PROPID_ACC_KEYBOARDSHORTCUT
PUBLIC	_PROPID_ACC_DEFAULTACTION
PUBLIC	_PROPID_ACC_HELPTOPIC
PUBLIC	_PROPID_ACC_FOCUS
PUBLIC	_PROPID_ACC_SELECTION
PUBLIC	_PROPID_ACC_PARENT
PUBLIC	_PROPID_ACC_NAV_UP
PUBLIC	_PROPID_ACC_NAV_DOWN
PUBLIC	_PROPID_ACC_NAV_LEFT
PUBLIC	_PROPID_ACC_NAV_RIGHT
PUBLIC	_PROPID_ACC_NAV_PREV
PUBLIC	_PROPID_ACC_NAV_NEXT
PUBLIC	_PROPID_ACC_NAV_FIRSTCHILD
PUBLIC	_PROPID_ACC_NAV_LASTCHILD
PUBLIC	_PROPID_ACC_ROLEMAP
PUBLIC	_PROPID_ACC_VALUEMAP
PUBLIC	_PROPID_ACC_STATEMAP
PUBLIC	_PROPID_ACC_DESCRIPTIONMAP
PUBLIC	_PROPID_ACC_DODEFAULTACTION
PUBLIC	_LIBID_ATLLib
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z ; ATL::GetEnvironmentVariableWThunk
PUBLIC	_IID_ISessionProperties
PUBLIC	_IID_IRowsetIdentity
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
PUBLIC	?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z	; ATL::CompareStringWThunk
PUBLIC	_IID_IRowsetNotify
PUBLIC	_IID_IIndexDefinition
PUBLIC	?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z	; ATL::GetStringTypeExWThunk
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?lstrcmpiWThunk@ATL@@YGHPB_W0@Z			; ATL::lstrcmpiWThunk
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?CharLowerWThunk@ATL@@YGPA_WPA_W@Z		; ATL::CharLowerWThunk
PUBLIC	_SID_SEditCommandTarget
PUBLIC	_CGID_EditStateCommands
PUBLIC	_SID_SHTMLEditHost
PUBLIC	_SID_SHTMLEditServices
PUBLIC	?CharUpperWThunk@ATL@@YGPA_WPA_W@Z		; ATL::CharUpperWThunk
PUBLIC	_IID_ITableDefinition
PUBLIC	_IID_IAccessor
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_IID_IRowsetIndex
PUBLIC	_CGID_DocHostCommandHandler
PUBLIC	_IID_IRowset
PUBLIC	_IID_IOpenRowset
PUBLIC	_IID_ICommand
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	_IID_IDBSchemaRowset
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	_IID_IMultipleResults
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	_IID_IRowsetInfo
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	_IID_IBoundObject
PUBLIC	_IID_IBoundObjectSite
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
;	COMDAT ?WM_DESTROYMODELESS@CDHtmlDialog@@1IA
_BSS	SEGMENT
?WM_DESTROYMODELESS@CDHtmlDialog@@1IA DD 01H DUP (?)	; CDHtmlDialog::WM_DESTROYMODELESS
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA
_BSS	SEGMENT
?s_pfnPrevHook@CNoUIAssertHook@ATL@@0P6AHHPADPAH@ZA DD 01H DUP (?) ; ATL::CNoUIAssertHook::s_pfnPrevHook
_BSS	ENDS
;	COMDAT ?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A
_BSS	SEGMENT
?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A DD 01H DUP (?) ; ATL::CFixedStringMgr::s_pLog
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
_BSS	SEGMENT
_GenericSansSerifFontFamily DD 01H DUP (?)
_GenericSerifFontFamily DD 01H DUP (?)
_GenericMonospaceFontFamily DD 01H DUP (?)
_GenericSansSerifFontFamilyBuffer DB 08H DUP (?)
_GenericSerifFontFamilyBuffer DB 08H DUP (?)
_GenericMonospaceFontFamilyBuffer DB 08H DUP (?)
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
_BSS	SEGMENT
_GenericTypographicStringFormatBuffer DB 08H DUP (?)
_GenericDefaultStringFormatBuffer DB 08H DUP (?)
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT ?_strthunks@ATL@@3U_AtlStringThunks@1@A
_DATA	SEGMENT
?_strthunks@ATL@@3U_AtlStringThunks@1@A DD FLAT:?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z ; ATL::_strthunks
	DD	FLAT:?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z
	DD	FLAT:?lstrcmpiWThunk@ATL@@YGHPB_W0@Z
	DD	FLAT:?CharLowerWThunk@ATL@@YGPA_WPA_W@Z
	DD	FLAT:?CharUpperWThunk@ATL@@YGPA_WPA_W@Z
	DD	FLAT:?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z
_DATA	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB DB 01H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@_CSTRING_IMPL_@ATL@@2_NB DB 01H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?Millisecond@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Millisecond@CFileTime@ATL@@2_KB DQ 0000000000002710H	; ATL::CFileTime::Millisecond
CONST	ENDS
;	COMDAT ?Second@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Second@CFileTime@ATL@@2_KB DQ 0000000000989680H	; ATL::CFileTime::Second
CONST	ENDS
;	COMDAT ?Minute@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Minute@CFileTime@ATL@@2_KB DQ 0000000023c34600H	; ATL::CFileTime::Minute
CONST	ENDS
;	COMDAT ?Hour@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Hour@CFileTime@ATL@@2_KB DQ 0000000861c46800H		; ATL::CFileTime::Hour
CONST	ENDS
;	COMDAT ?Day@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Day@CFileTime@ATL@@2_KB DQ 000000c92a69c000H		; ATL::CFileTime::Day
CONST	ENDS
;	COMDAT ?Week@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Week@CFileTime@ATL@@2_KB DQ 0000058028e44000H		; ATL::CFileTime::Week
CONST	ENDS
CONST	SEGMENT
$SG29043 DB	'Invalid DateTime', 00H
CONST	ENDS
;	COMDAT ?szInvalidDateTime@ATL@@3QBDB
CONST	SEGMENT
?szInvalidDateTime@ATL@@3QBDB DD FLAT:$SG29043		; ATL::szInvalidDateTime
CONST	ENDS
CONST	SEGMENT
	ORG $+3
$SG29045 DB	'Invalid DateTimeSpan', 00H
CONST	ENDS
;	COMDAT ?szInvalidDateTimeSpan@ATL@@3QBDB
CONST	SEGMENT
?szInvalidDateTimeSpan@ATL@@3QBDB DD FLAT:$SG29045	; ATL::szInvalidDateTimeSpan
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@UtagVARIANT@@@ATL@@2GB DW 0cH	; ATL::CVarTypeInfo<tagVARIANT>::VT
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
CONST	SEGMENT
	ORG $+3
$SG88115 DB	'YPLAYBOX', 00H
CONST	ENDS
_DATA	SEGMENT
_g_szSoftName DD FLAT:$SG88115
_DATA	ENDS
CONST	SEGMENT
	ORG $+3
$SG88117 DB	'SOFTWARE\YPLAYBOX', 00H
CONST	ENDS
_DATA	SEGMENT
_STR_REG_SOFT DD FLAT:$SG88117
_DATA	ENDS
CONST	SEGMENT
	ORG $+2
$SG88119 DB	'S', 00H, 'O', 00H, 'F', 00H, 'T', 00H, 'W', 00H, 'A', 00H
	DB	'R', 00H, 'E', 00H, '\', 00H, 'Y', 00H, 'P', 00H, 'L', 00H, 'A'
	DB	00H, 'Y', 00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
CONST	ENDS
_DATA	SEGMENT
_STR_WCHAR_REG_SOFT DD FLAT:$SG88119
_DATA	ENDS
CONST	SEGMENT
$SG88121 DB	'SOFTWARE\YPLAYBOX\LOGMSG', 00H
CONST	ENDS
_DATA	SEGMENT
_STR_REG_SOFT_MSG DD FLAT:$SG88121
_DATA	ENDS
CONST	SEGMENT
	ORG $+3
$SG88123 DB	'SOFTWARE\YPLAYBOX\UPDATE', 00H
CONST	ENDS
_DATA	SEGMENT
_STR_REG_UPDATE DD FLAT:$SG88123
_DATA	ENDS
CONST	SEGMENT
	ORG $+3
$SG88125 DB	'SOFTWARE\YPLAYBOX\BHO', 00H
CONST	ENDS
_DATA	SEGMENT
_STR_REG_BHO DD	FLAT:$SG88125
_DATA	ENDS
CONST	SEGMENT
	ORG $+2
$SG88127 DB	'path', 00H
CONST	ENDS
_DATA	SEGMENT
_STR_SOFT_HOME_KEY DD FLAT:$SG88127
_DATA	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT _ImageFormatUndefined
CONST	SEGMENT
_ImageFormatUndefined DD 0b96b3ca9H
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatMemoryBMP
CONST	SEGMENT
_ImageFormatMemoryBMP DD 0b96b3caaH
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatBMP
CONST	SEGMENT
_ImageFormatBMP DD 0b96b3cabH
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatEMF
CONST	SEGMENT
_ImageFormatEMF DD 0b96b3cacH
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatWMF
CONST	SEGMENT
_ImageFormatWMF DD 0b96b3cadH
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatJPEG
CONST	SEGMENT
_ImageFormatJPEG DD 0b96b3caeH
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatPNG
CONST	SEGMENT
_ImageFormatPNG DD 0b96b3cafH
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatGIF
CONST	SEGMENT
_ImageFormatGIF DD 0b96b3cb0H
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatTIFF
CONST	SEGMENT
_ImageFormatTIFF DD 0b96b3cb1H
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatEXIF
CONST	SEGMENT
_ImageFormatEXIF DD 0b96b3cb2H
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _ImageFormatIcon
CONST	SEGMENT
_ImageFormatIcon DD 0b96b3cb5H
	DW	0728H
	DW	011d3H
	DB	09dH
	DB	07bH
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0f3H
	DB	02eH
CONST	ENDS
;	COMDAT _FrameDimensionTime
CONST	SEGMENT
_FrameDimensionTime DD 06aedbd6dH
	DW	03fb5H
	DW	0418aH
	DB	083H
	DB	0a6H
	DB	07fH
	DB	045H
	DB	022H
	DB	09dH
	DB	0c8H
	DB	072H
CONST	ENDS
;	COMDAT _FrameDimensionResolution
CONST	SEGMENT
_FrameDimensionResolution DD 084236f7bH
	DW	03bd3H
	DW	0428fH
	DB	08dH
	DB	0abH
	DB	04eH
	DB	0a1H
	DB	043H
	DB	09cH
	DB	0a3H
	DB	015H
CONST	ENDS
;	COMDAT _FrameDimensionPage
CONST	SEGMENT
_FrameDimensionPage DD 07462dc86H
	DW	06180H
	DW	04c7eH
	DB	08eH
	DB	03fH
	DB	0eeH
	DB	073H
	DB	033H
	DB	0a7H
	DB	0a4H
	DB	083H
CONST	ENDS
;	COMDAT _FormatIDImageInformation
CONST	SEGMENT
_FormatIDImageInformation DD 0e5836cbeH
	DW	05eefH
	DW	04f1dH
	DB	0acH
	DB	0deH
	DB	0aeH
	DB	04cH
	DB	043H
	DB	0b6H
	DB	08H
	DB	0ceH
CONST	ENDS
;	COMDAT _FormatIDJpegAppHeaders
CONST	SEGMENT
_FormatIDJpegAppHeaders DD 01c4afdcdH
	DW	06177H
	DW	043cfH
	DB	0abH
	DB	0c7H
	DB	05fH
	DB	051H
	DB	0afH
	DB	039H
	DB	0eeH
	DB	085H
CONST	ENDS
;	COMDAT _EncoderCompression
CONST	SEGMENT
_EncoderCompression DD 0e09d739dH
	DW	0ccd4H
	DW	044eeH
	DB	08eH
	DB	0baH
	DB	03fH
	DB	0bfH
	DB	08bH
	DB	0e4H
	DB	0fcH
	DB	058H
CONST	ENDS
;	COMDAT _EncoderColorDepth
CONST	SEGMENT
_EncoderColorDepth DD 066087055H
	DW	0ad66H
	DW	04c7cH
	DB	09aH
	DB	018H
	DB	038H
	DB	0a2H
	DB	031H
	DB	0bH
	DB	083H
	DB	037H
CONST	ENDS
;	COMDAT _EncoderScanMethod
CONST	SEGMENT
_EncoderScanMethod DD 03a4e2661H
	DW	03109H
	DW	04e56H
	DB	085H
	DB	036H
	DB	042H
	DB	0c1H
	DB	056H
	DB	0e7H
	DB	0dcH
	DB	0faH
CONST	ENDS
;	COMDAT _EncoderVersion
CONST	SEGMENT
_EncoderVersion DD 024d18c76H
	DW	0814aH
	DW	041a4H
	DB	0bfH
	DB	053H
	DB	01cH
	DB	021H
	DB	09cH
	DB	0ccH
	DB	0f7H
	DB	097H
CONST	ENDS
;	COMDAT _EncoderRenderMethod
CONST	SEGMENT
_EncoderRenderMethod DD 06d42c53aH
	DW	0229aH
	DW	04825H
	DB	08bH
	DB	0b7H
	DB	05cH
	DB	099H
	DB	0e2H
	DB	0b9H
	DB	0a8H
	DB	0b8H
CONST	ENDS
;	COMDAT _EncoderQuality
CONST	SEGMENT
_EncoderQuality DD 01d5be4b5H
	DW	0fa4aH
	DW	0452dH
	DB	09cH
	DB	0ddH
	DB	05dH
	DB	0b3H
	DB	051H
	DB	05H
	DB	0e7H
	DB	0ebH
CONST	ENDS
;	COMDAT _EncoderTransformation
CONST	SEGMENT
_EncoderTransformation DD 08d0eb2d1H
	DW	0a58eH
	DW	04ea8H
	DB	0aaH
	DB	014H
	DB	010H
	DB	080H
	DB	074H
	DB	0b7H
	DB	0b6H
	DB	0f9H
CONST	ENDS
;	COMDAT _EncoderLuminanceTable
CONST	SEGMENT
_EncoderLuminanceTable DD 0edb33bceH
	DW	0266H
	DW	04a77H
	DB	0b9H
	DB	04H
	DB	027H
	DB	021H
	DB	060H
	DB	099H
	DB	0e7H
	DB	017H
CONST	ENDS
;	COMDAT _EncoderChrominanceTable
CONST	SEGMENT
_EncoderChrominanceTable DD 0f2e455dcH
	DW	09b3H
	DW	04316H
	DB	082H
	DB	060H
	DB	067H
	DB	06aH
	DB	0daH
	DB	032H
	DB	048H
	DB	01cH
CONST	ENDS
;	COMDAT _EncoderSaveFlag
CONST	SEGMENT
_EncoderSaveFlag DD 0292266fcH
	DW	0ac40H
	DW	047bfH
	DB	08cH
	DB	0fcH
	DB	0a8H
	DB	05bH
	DB	089H
	DB	0a6H
	DB	055H
	DB	0deH
CONST	ENDS
;	COMDAT _CodecIImageBytes
CONST	SEGMENT
_CodecIImageBytes DD 025d1823H
	DW	06c7dH
	DW	0447bH
	DB	0bbH
	DB	0dbH
	DB	0a3H
	DB	0cbH
	DB	0c3H
	DB	0dfH
	DB	0a2H
	DB	0fcH
CONST	ENDS
;	COMDAT _CGID_DocHostCommandHandler
CONST	SEGMENT
_CGID_DocHostCommandHandler DD 0f38bc242H
	DW	0b950H
	DW	011d1H
	DB	089H
	DB	018H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	0c8H
	DB	036H
CONST	ENDS
;	COMDAT _SID_SEditCommandTarget
CONST	SEGMENT
_SID_SEditCommandTarget DD 03050f4b5H
	DW	098b5H
	DW	011cfH
	DB	0bbH
	DB	082H
	DB	00H
	DB	0aaH
	DB	00H
	DB	0bdH
	DB	0ceH
	DB	0bH
CONST	ENDS
;	COMDAT _CGID_EditStateCommands
CONST	SEGMENT
_CGID_EditStateCommands DD 03050f4b6H
	DW	098b5H
	DW	011cfH
	DB	0bbH
	DB	082H
	DB	00H
	DB	0aaH
	DB	00H
	DB	0bdH
	DB	0ceH
	DB	0bH
CONST	ENDS
;	COMDAT _SID_SHTMLEditHost
CONST	SEGMENT
_SID_SHTMLEditHost DD 03050f6a0H
	DW	098b5H
	DW	011cfH
	DB	0bbH
	DB	082H
	DB	00H
	DB	0aaH
	DB	00H
	DB	0bdH
	DB	0ceH
	DB	0bH
CONST	ENDS
;	COMDAT _SID_SHTMLEditServices
CONST	SEGMENT
_SID_SHTMLEditServices DD 03050f7f9H
	DW	098b5H
	DW	011cfH
	DB	0bbH
	DB	082H
	DB	00H
	DB	0aaH
	DB	00H
	DB	0bdH
	DB	0ceH
	DB	0bH
CONST	ENDS
;	COMDAT _LIBID_Accessibility
CONST	SEGMENT
_LIBID_Accessibility DD 01ea4dbf0H
	DW	03c3bH
	DW	011cfH
	DB	081H
	DB	0cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	038H
	DB	09bH
	DB	071H
CONST	ENDS
;	COMDAT _IID_IAccessible
CONST	SEGMENT
_IID_IAccessible DD 0618736e0H
	DW	03c3dH
	DW	011cfH
	DB	081H
	DB	0cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	038H
	DB	09bH
	DB	071H
CONST	ENDS
;	COMDAT _IID_IAccessibleHandler
CONST	SEGMENT
_IID_IAccessibleHandler DD 03022430H
	DW	0abc4H
	DW	011d0H
	DB	0bdH
	DB	0e2H
	DB	00H
	DB	0aaH
	DB	00H
	DB	01aH
	DB	019H
	DB	053H
CONST	ENDS
;	COMDAT _IID_IAccIdentity
CONST	SEGMENT
_IID_IAccIdentity DD 07852b78dH
	DW	01cfdH
	DW	041c1H
	DB	0a6H
	DB	015H
	DB	09cH
	DB	0cH
	DB	085H
	DB	096H
	DB	0bH
	DB	05fH
CONST	ENDS
;	COMDAT _IID_IAccPropServer
CONST	SEGMENT
_IID_IAccPropServer DD 076c0dbbbH
	DW	015e0H
	DW	04e7bH
	DB	0b6H
	DB	01bH
	DB	020H
	DB	0eeH
	DB	0eaH
	DB	020H
	DB	01H
	DB	0e0H
CONST	ENDS
;	COMDAT _IID_IAccPropServices
CONST	SEGMENT
_IID_IAccPropServices DD 06e26e776H
	DW	04f0H
	DW	0495dH
	DB	080H
	DB	0e4H
	DB	033H
	DB	030H
	DB	035H
	DB	02eH
	DB	031H
	DB	069H
CONST	ENDS
;	COMDAT _IID_IAccPropMgrInternal
CONST	SEGMENT
_IID_IAccPropMgrInternal DD 02bd370a9H
	DW	03e7fH
	DW	04eddH
	DB	08aH
	DB	085H
	DB	0f8H
	DB	0feH
	DB	0d1H
	DB	0f8H
	DB	0e5H
	DB	01fH
CONST	ENDS
;	COMDAT _CLSID_AccPropServices
CONST	SEGMENT
_CLSID_AccPropServices DD 0b5f8350bH
	DW	0548H
	DW	048b1H
	DB	0a6H
	DB	0eeH
	DB	088H
	DB	0bdH
	DB	00H
	DB	0b4H
	DB	0a5H
	DB	0e7H
CONST	ENDS
;	COMDAT _IIS_IsOleaccProxy
CONST	SEGMENT
_IIS_IsOleaccProxy DD 0902697faH
	DW	080e4H
	DW	04560H
	DB	080H
	DB	02aH
	DB	0a1H
	DB	03fH
	DB	022H
	DB	0a6H
	DB	047H
	DB	09H
CONST	ENDS
;	COMDAT _PROPID_ACC_NAME
CONST	SEGMENT
_PROPID_ACC_NAME DD 0608d3df8H
	DW	08128H
	DW	04aa7H
	DB	0a4H
	DB	028H
	DB	0f5H
	DB	05eH
	DB	049H
	DB	026H
	DB	072H
	DB	091H
CONST	ENDS
;	COMDAT _PROPID_ACC_VALUE
CONST	SEGMENT
_PROPID_ACC_VALUE DD 0123fe443H
	DW	0211aH
	DW	04615H
	DB	095H
	DB	027H
	DB	0c4H
	DB	05aH
	DB	07eH
	DB	093H
	DB	071H
	DB	07aH
CONST	ENDS
;	COMDAT _PROPID_ACC_DESCRIPTION
CONST	SEGMENT
_PROPID_ACC_DESCRIPTION DD 04d48dfe4H
	DW	0bd3fH
	DW	0491fH
	DB	0a6H
	DB	048H
	DB	049H
	DB	02dH
	DB	06fH
	DB	020H
	DB	0c5H
	DB	088H
CONST	ENDS
;	COMDAT _PROPID_ACC_ROLE
CONST	SEGMENT
_PROPID_ACC_ROLE DD 0cb905ff2H
	DW	07bd1H
	DW	04c05H
	DB	0b3H
	DB	0c8H
	DB	0e6H
	DB	0c2H
	DB	041H
	DB	036H
	DB	04dH
	DB	070H
CONST	ENDS
;	COMDAT _PROPID_ACC_STATE
CONST	SEGMENT
_PROPID_ACC_STATE DD 0a8d4d5b0H
	DW	0a21H
	DW	042d0H
	DB	0a5H
	DB	0c0H
	DB	051H
	DB	04eH
	DB	098H
	DB	04fH
	DB	045H
	DB	07bH
CONST	ENDS
;	COMDAT _PROPID_ACC_HELP
CONST	SEGMENT
_PROPID_ACC_HELP DD 0c831e11fH
	DW	044dbH
	DW	04a99H
	DB	097H
	DB	068H
	DB	0cbH
	DB	08fH
	DB	097H
	DB	08bH
	DB	072H
	DB	031H
CONST	ENDS
;	COMDAT _PROPID_ACC_KEYBOARDSHORTCUT
CONST	SEGMENT
_PROPID_ACC_KEYBOARDSHORTCUT DD 07d9bceeeH
	DW	07d1eH
	DW	04979H
	DB	093H
	DB	082H
	DB	051H
	DB	080H
	DB	0f4H
	DB	017H
	DB	02cH
	DB	034H
CONST	ENDS
;	COMDAT _PROPID_ACC_DEFAULTACTION
CONST	SEGMENT
_PROPID_ACC_DEFAULTACTION DD 0180c072bH
	DW	0c27fH
	DW	043c7H
	DB	099H
	DB	022H
	DB	0f6H
	DB	035H
	DB	062H
	DB	0a4H
	DB	063H
	DB	02bH
CONST	ENDS
;	COMDAT _PROPID_ACC_HELPTOPIC
CONST	SEGMENT
_PROPID_ACC_HELPTOPIC DD 0787d1379H
	DW	08edeH
	DW	0440bH
	DB	08aH
	DB	0ecH
	DB	011H
	DB	0f7H
	DB	0bfH
	DB	090H
	DB	030H
	DB	0b3H
CONST	ENDS
;	COMDAT _PROPID_ACC_FOCUS
CONST	SEGMENT
_PROPID_ACC_FOCUS DD 06eb335dfH
	DW	01c29H
	DW	04127H
	DB	0b1H
	DB	02cH
	DB	0deH
	DB	0e9H
	DB	0fdH
	DB	015H
	DB	07fH
	DB	02bH
CONST	ENDS
;	COMDAT _PROPID_ACC_SELECTION
CONST	SEGMENT
_PROPID_ACC_SELECTION DD 0b99d073cH
	DW	0d731H
	DW	0405bH
	DB	090H
	DB	061H
	DB	0d9H
	DB	05eH
	DB	08fH
	DB	084H
	DB	029H
	DB	084H
CONST	ENDS
;	COMDAT _PROPID_ACC_PARENT
CONST	SEGMENT
_PROPID_ACC_PARENT DD 0474c22b6H
	DW	0ffc2H
	DW	0467aH
	DB	0b1H
	DB	0b5H
	DB	0e9H
	DB	058H
	DB	0b4H
	DB	065H
	DB	073H
	DB	030H
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_UP
CONST	SEGMENT
_PROPID_ACC_NAV_UP DD 016e1a2bH
	DW	01a4eH
	DW	04767H
	DB	086H
	DB	012H
	DB	033H
	DB	086H
	DB	0f6H
	DB	069H
	DB	035H
	DB	0ecH
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_DOWN
CONST	SEGMENT
_PROPID_ACC_NAV_DOWN DD 031670edH
	DW	03cdfH
	DW	048d2H
	DB	096H
	DB	013H
	DB	013H
	DB	08fH
	DB	02dH
	DB	0d8H
	DB	0a6H
	DB	068H
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_LEFT
CONST	SEGMENT
_PROPID_ACC_NAV_LEFT DD 0228086cbH
	DW	082f1H
	DW	04a39H
	DB	087H
	DB	05H
	DB	0dcH
	DB	0dcH
	DB	0fH
	DB	0ffH
	DB	092H
	DB	0f5H
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_RIGHT
CONST	SEGMENT
_PROPID_ACC_NAV_RIGHT DD 0cd211d9fH
	DW	0e1cbH
	DW	04fe5H
	DB	0a7H
	DB	07cH
	DB	092H
	DB	0bH
	DB	088H
	DB	04dH
	DB	09H
	DB	05bH
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_PREV
CONST	SEGMENT
_PROPID_ACC_NAV_PREV DD 0776d3891H
	DW	0c73bH
	DW	04480H
	DB	0b3H
	DB	0f6H
	DB	07H
	DB	06aH
	DB	016H
	DB	0a1H
	DB	05aH
	DB	0f6H
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_NEXT
CONST	SEGMENT
_PROPID_ACC_NAV_NEXT DD 01cdc5455H
	DW	08cd9H
	DW	04c92H
	DB	0a3H
	DB	071H
	DB	039H
	DB	039H
	DB	0a2H
	DB	0feH
	DB	03eH
	DB	0eeH
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_FIRSTCHILD
CONST	SEGMENT
_PROPID_ACC_NAV_FIRSTCHILD DD 0cfd02558H
	DW	0557bH
	DW	04c67H
	DB	084H
	DB	0f9H
	DB	02aH
	DB	09H
	DB	0fcH
	DB	0e4H
	DB	07H
	DB	049H
CONST	ENDS
;	COMDAT _PROPID_ACC_NAV_LASTCHILD
CONST	SEGMENT
_PROPID_ACC_NAV_LASTCHILD DD 0302ecaa5H
	DW	048d5H
	DW	04f8dH
	DB	0b6H
	DB	071H
	DB	01aH
	DB	08dH
	DB	020H
	DB	0a7H
	DB	078H
	DB	032H
CONST	ENDS
;	COMDAT _PROPID_ACC_ROLEMAP
CONST	SEGMENT
_PROPID_ACC_ROLEMAP DD 0f79acda2H
	DW	0140dH
	DW	04fe6H
	DB	089H
	DB	014H
	DB	020H
	DB	084H
	DB	076H
	DB	032H
	DB	082H
	DB	069H
CONST	ENDS
;	COMDAT _PROPID_ACC_VALUEMAP
CONST	SEGMENT
_PROPID_ACC_VALUEMAP DD 0da1c3d79H
	DW	0fc5cH
	DW	0420eH
	DB	0b3H
	DB	099H
	DB	09dH
	DB	015H
	DB	033H
	DB	054H
	DB	09eH
	DB	075H
CONST	ENDS
;	COMDAT _PROPID_ACC_STATEMAP
CONST	SEGMENT
_PROPID_ACC_STATEMAP DD 043946c5eH
	DW	0ac0H
	DW	04042H
	DB	0b5H
	DB	025H
	DB	07H
	DB	0bbH
	DB	0dbH
	DB	0e1H
	DB	07fH
	DB	0a7H
CONST	ENDS
;	COMDAT _PROPID_ACC_DESCRIPTIONMAP
CONST	SEGMENT
_PROPID_ACC_DESCRIPTIONMAP DD 01ff1435fH
	DW	08a14H
	DW	0477bH
	DB	0b2H
	DB	026H
	DB	0a0H
	DB	0abH
	DB	0e2H
	DB	079H
	DB	097H
	DB	05dH
CONST	ENDS
;	COMDAT _PROPID_ACC_DODEFAULTACTION
CONST	SEGMENT
_PROPID_ACC_DODEFAULTACTION DD 01ba09523H
	DW	02e3bH
	DW	049a6H
	DB	0a0H
	DB	059H
	DB	059H
	DB	068H
	DB	02aH
	DB	03cH
	DB	048H
	DB	0fdH
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT
_CLSID_StdGlobalInterfaceTable DD 0323H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
CONST	SEGMENT
	ORG $+3
$SG165670 DB	'S', 00H
	ORG $+2
_szStringVal DD	FLAT:$SG165670
$SG165672 DB	'M', 00H
	ORG $+2
_multiszStringVal DD FLAT:$SG165672
$SG165674 DB	'D', 00H
	ORG $+2
_szDwordVal DD	FLAT:$SG165674
$SG165676 DB	'B', 00H
	ORG $+2
_szBinaryVal DD	FLAT:$SG165676
$SG165678 DB	'Val', 00H
_szValToken DD	FLAT:$SG165678
$SG165680 DB	'ForceRemove', 00H
_szForceRemove DD FLAT:$SG165680
$SG165682 DB	'NoRemove', 00H
	ORG $+3
_szNoRemove DD	FLAT:$SG165682
$SG165684 DB	'Delete', 00H
	ORG $+1
_szDelete DD	FLAT:$SG165684
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
CONST	SEGMENT
$SG166335 DB	'AppID', 00H
	ORG $+2
$SG166336 DB	'CLSID', 00H
	ORG $+2
$SG166337 DB	'Component Categories', 00H
	ORG $+3
$SG166338 DB	'FileType', 00H
	ORG $+3
$SG166339 DB	'Interface', 00H
	ORG $+2
$SG166340 DB	'Hardware', 00H
	ORG $+3
$SG166341 DB	'Mime', 00H
	ORG $+3
$SG166342 DB	'SAM', 00H
$SG166343 DB	'SECURITY', 00H
	ORG $+3
$SG166344 DB	'SYSTEM', 00H
	ORG $+1
$SG166345 DB	'Software', 00H
	ORG $+3
$SG166346 DB	'TypeLib', 00H
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:$SG166335 ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:$SG166336
	DD	FLAT:$SG166337
	DD	FLAT:$SG166338
	DD	FLAT:$SG166339
	DD	FLAT:$SG166340
	DD	FLAT:$SG166341
	DD	FLAT:$SG166342
	DD	FLAT:$SG166343
	DD	FLAT:$SG166344
	DD	FLAT:$SG166345
	DD	FLAT:$SG166346
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
CONST	SEGMENT
$SG167203 DB	'lpszPathName != 0', 00H
	ORG $+2
$SG167204 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\atlbase.h', 00H
CONST	ENDS
;	COMDAT _IID_IBoundObject
CONST	SEGMENT
_IID_IBoundObject DD 09bfbbc00H
	DW	0eff1H
	DW	0101aH
	DB	084H
	DB	0edH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT _IID_IBoundObjectSite
CONST	SEGMENT
_IID_IBoundObjectSite DD 09bfbbc01H
	DW	0eff1H
	DW	0101aH
	DB	084H
	DB	0edH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT _IID_ICursor
CONST	SEGMENT
_IID_ICursor DD	09f6aa700H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ICursorMove
CONST	SEGMENT
_IID_ICursorMove DD 0acff0690H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ICursorScroll
CONST	SEGMENT
_IID_ICursorScroll DD 0bb87e420H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ICursorUpdateARow
CONST	SEGMENT
_IID_ICursorUpdateARow DD 0d14216a0H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_INotifyDBEvents
CONST	SEGMENT
_IID_INotifyDBEvents DD 0db526cc0H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ICursorFind
CONST	SEGMENT
_IID_ICursorFind DD 0e01d7850H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_IEntryID
CONST	SEGMENT
_IID_IEntryID DD 0e4d19810H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT __GUID_NAMEONLY
CONST	SEGMENT
__GUID_NAMEONLY DD 0e8bf1170H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT __DBBMKGUID
CONST	SEGMENT
__DBBMKGUID DD	0f6304bb0H
	DW	0d188H
	DW	011cdH
	DB	0adH
	DB	048H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03cH
	DB	09cH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ISequentialStream
CONST	SEGMENT
_IID_ISequentialStream DD 0c733a30H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IAccessor
CONST	SEGMENT
_IID_IAccessor DD 0c733a8cH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowset
CONST	SEGMENT
_IID_IRowset DD	0c733a7cH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetInfo
CONST	SEGMENT
_IID_IRowsetInfo DD 0c733a55H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetLocate
CONST	SEGMENT
_IID_IRowsetLocate DD 0c733a7dH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetResynch
CONST	SEGMENT
_IID_IRowsetResynch DD 0c733a84H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetScroll
CONST	SEGMENT
_IID_IRowsetScroll DD 0c733a7eH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetChange
CONST	SEGMENT
_IID_IRowsetChange DD 0c733a05H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetUpdate
CONST	SEGMENT
_IID_IRowsetUpdate DD 0c733a6dH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetIdentity
CONST	SEGMENT
_IID_IRowsetIdentity DD 0c733a09H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetNotify
CONST	SEGMENT
_IID_IRowsetNotify DD 0c733a83H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetIndex
CONST	SEGMENT
_IID_IRowsetIndex DD 0c733a82H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommand
CONST	SEGMENT
_IID_ICommand DD 0c733a63H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IMultipleResults
CONST	SEGMENT
_IID_IMultipleResults DD 0c733a90H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IConvertType
CONST	SEGMENT
_IID_IConvertType DD 0c733a88H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandPrepare
CONST	SEGMENT
_IID_ICommandPrepare DD 0c733a26H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandProperties
CONST	SEGMENT
_IID_ICommandProperties DD 0c733a79H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandText
CONST	SEGMENT
_IID_ICommandText DD 0c733a27H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandWithParameters
CONST	SEGMENT
_IID_ICommandWithParameters DD 0c733a64H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IColumnsRowset
CONST	SEGMENT
_IID_IColumnsRowset DD 0c733a10H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IColumnsInfo
CONST	SEGMENT
_IID_IColumnsInfo DD 0c733a11H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBCreateCommand
CONST	SEGMENT
_IID_IDBCreateCommand DD 0c733a1dH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBCreateSession
CONST	SEGMENT
_IID_IDBCreateSession DD 0c733a5dH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ISourcesRowset
CONST	SEGMENT
_IID_ISourcesRowset DD 0c733a1eH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBProperties
CONST	SEGMENT
_IID_IDBProperties DD 0c733a8aH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBInitialize
CONST	SEGMENT
_IID_IDBInitialize DD 0c733a8bH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBInfo
CONST	SEGMENT
_IID_IDBInfo DD	0c733a89H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBDataSourceAdmin
CONST	SEGMENT
_IID_IDBDataSourceAdmin DD 0c733a7aH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ISessionProperties
CONST	SEGMENT
_IID_ISessionProperties DD 0c733a85H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IIndexDefinition
CONST	SEGMENT
_IID_IIndexDefinition DD 0c733a68H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ITableDefinition
CONST	SEGMENT
_IID_ITableDefinition DD 0c733a86H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IOpenRowset
CONST	SEGMENT
_IID_IOpenRowset DD 0c733a69H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBSchemaRowset
CONST	SEGMENT
_IID_IDBSchemaRowset DD 0c733a7bH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IErrorRecords
CONST	SEGMENT
_IID_IErrorRecords DD 0c733a67H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IErrorLookup
CONST	SEGMENT
_IID_IErrorLookup DD 0c733a66H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ISQLErrorInfo
CONST	SEGMENT
_IID_ISQLErrorInfo DD 0c733a74H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IGetDataSource
CONST	SEGMENT
_IID_IGetDataSource DD 0c733a75H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ITransactionLocal
CONST	SEGMENT
_IID_ITransactionLocal DD 0c733a5fH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ITransactionJoin
CONST	SEGMENT
_IID_ITransactionJoin DD 0c733a5eH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ITransactionObject
CONST	SEGMENT
_IID_ITransactionObject DD 0c733a60H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetExactScroll
CONST	SEGMENT
_IID_IRowsetExactScroll DD 0c733a7fH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetNextRowset
CONST	SEGMENT
_IID_IRowsetNextRowset DD 0c733a72H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetNewRowAfter
CONST	SEGMENT
_IID_IRowsetNewRowAfter DD 0c733a71H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetWithParameters
CONST	SEGMENT
_IID_IRowsetWithParameters DD 0c733a6eH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetFind
CONST	SEGMENT
_IID_IRowsetFind DD 0c733a0dH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetAsynch
CONST	SEGMENT
_IID_IRowsetAsynch DD 0c733a0fH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetKeys
CONST	SEGMENT
_IID_IRowsetKeys DD 0c733a12H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetWatchAll
CONST	SEGMENT
_IID_IRowsetWatchAll DD 0c733a73H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetWatchNotify
CONST	SEGMENT
_IID_IRowsetWatchNotify DD 0c733a44H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetWatchRegion
CONST	SEGMENT
_IID_IRowsetWatchRegion DD 0c733a45H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IRowsetCopyRows
CONST	SEGMENT
_IID_IRowsetCopyRows DD 0c733a6bH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IReadData
CONST	SEGMENT
_IID_IReadData DD 0c733a6aH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandCost
CONST	SEGMENT
_IID_ICommandCost DD 0c733a4eH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandTree
CONST	SEGMENT
_IID_ICommandTree DD 0c733a87H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ICommandValidate
CONST	SEGMENT
_IID_ICommandValidate DD 0c733a18H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IQuery
CONST	SEGMENT
_IID_IQuery DD	0c733a51H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_ITableRename
CONST	SEGMENT
_IID_ITableRename DD 0c733a77H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBSchemaCommand
CONST	SEGMENT
_IID_IDBSchemaCommand DD 0c733a50H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IDBSecurityInfo
CONST	SEGMENT
_IID_IDBSecurityInfo DD 0c733a62H
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
;	COMDAT _IID_IProvideMoniker
CONST	SEGMENT
_IID_IProvideMoniker DD 0c733a4dH
	DW	02a1cH
	DW	011ceH
	DB	0adH
	DB	0e5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	044H
	DB	077H
	DB	03dH
CONST	ENDS
CONST	SEGMENT
	ORG $+2
$SG181961 DB	'Element tag not found', 00H
	ORG $+2
$SG181965 DB	'Tag starts with quote', 00H
	ORG $+2
$SG181971 DB	'Invalid node', 00H
	ORG $+3
$SG181977 DB	'End of tag not found', 00H
	ORG $+3
$SG181982 DB	'Abrupt end within tag', 00H
	ORG $+2
$SG181996 DB	'End tag of %s element not found', 00H
$SG182004 DB	'Expecting end tag of element %s', 00H
$SG182008 DB	'End tag does not correspond to %s', 00H
	ORG $+2
$SG182014 DB	'End tag not completed for element %s', 00H
	ORG $+3
$SG182034 DB	' ', 09H, 0aH, 0dH, 00H
	ORG $+3
$SG182049 DB	' ', 09H, 0aH, 0dH, '<>=\/?!', 00H
$SG182058 DB	00H
	ORG $+3
$SG182087 DB	'?>', 00H
	ORG $+1
$SG182092 DB	']]>', 00H
$SG182095 DB	'-->', 00H
$SG182129 DB	00H
$SG182161 DB	00H
$SG182164 DB	00H
	ORG $+1
$SG182181 DB	' ', 00H
	ORG $+2
$SG182182 DB	'="', 00H
	ORG $+1
$SG182187 DB	'"', 00H
	ORG $+2
$SG182202 DB	'<![CDATA[', 00H
	ORG $+2
$SG182204 DB	']]>', 00H
$SG182208 DB	00H
	ORG $+3
$SG182221 DB	'&quot;', 00H
	ORG $+1
$SG182220 DB	'&apos;', 00H
	ORG $+1
$SG182219 DB	'&gt;', 00H
	ORG $+3
$SG182218 DB	'&amp;', 00H
	ORG $+2
$SG182217 DB	'&lt;', 00H
	ORG $+3
$SG182223 DB	'<&>''"', 00H
	ORG $+2
$SG182224 DB	'<&>', 00H
$SG182254 DB	'quot;', 00H
	ORG $+2
$SG182253 DB	'apos;', 00H
	ORG $+2
$SG182252 DB	'gt;', 00H
$SG182251 DB	'amp;', 00H
	ORG $+3
$SG182250 DB	'lt;', 00H
$SG182259 DB	'<&>''"', 00H
	ORG $+2
$SG182397 DB	'<', 00H
	ORG $+2
$SG182398 DB	'/>', 0dH, 0aH, 00H
	ORG $+3
$SG182402 DB	'<', 00H
	ORG $+2
$SG182403 DB	'>', 00H
	ORG $+2
$SG182404 DB	'</', 00H
	ORG $+1
$SG182405 DB	'>', 0dH, 0aH, 00H
$SG182412 DB	'>', 0dH, 0aH, 00H
$SG182413 DB	'</', 00H
	ORG $+1
$SG182417 DB	0dH, 0aH, 00H
	ORG $+1
$SG187419 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187421 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187436 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187443 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187485 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187489 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187499 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187526 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187528 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187554 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187568 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187584 DB	'with ', 00H
	ORG $+2
$SG187585 DB	' elements', 00H
	ORG $+2
$SG187587 DB	0aH, 00H
	ORG $+2
$SG187594 DB	0aH, 00H
	ORG $+6
$SG187602 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187604 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187607 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187609 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187611 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187614 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG187989 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG188014 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
CONST	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
;	COMDAT rtc$IMZ
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00011	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00025	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0002f	8b f4		 mov	 esi, esp
  00031	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00045	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0004c	75 15		 jne	 SHORT $L24163
  0004e	83 bd 68 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00055	72 0c		 jb	 SHORT $L24163

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00057	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00061	eb 0a		 jmp	 SHORT $L24164
$L24163:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00063	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24164:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0006d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00079	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  0007e	8b f4		 mov	 esi, esp
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191293
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$L191293:
  000b9	01 00 00 00	 DD	 1
  000bd	00 00 00 00	 DD	 $L191292
$L191292:
  000c1	64 ff ff ff	 DD	 -156			; ffffff64H
  000c5	94 00 00 00	 DD	 148			; 00000094H
  000c9	00 00 00 00	 DD	 $L191289
$L191289:
  000cd	76		 DB	 118			; 00000076H
  000ce	65		 DB	 101			; 00000065H
  000cf	72		 DB	 114			; 00000072H
  000d0	00		 DB	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24151 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	89 45 f4	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00045	8b f4		 mov	 esi, esp
  00047	6a 07		 push	 7
  00049	8d 45 e8	 lea	 eax, DWORD PTR _szACP$[ebp]
  0004c	50		 push	 eax
  0004d	68 04 10 00 00	 push	 4100			; 00001004H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  00055	51		 push	 ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	74 34		 je	 SHORT $L24150

; 111  : 	{
; 112  : 		char* pch = szACP;

  00067	8d 55 e8	 lea	 edx, DWORD PTR _szACP$[ebp]
  0006a	89 55 e0	 mov	 DWORD PTR _pch$24151[ebp], edx
$L24153:

; 113  : 		while (*pch != '\0')

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00070	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00073	85 c9		 test	 ecx, ecx
  00075	74 24		 je	 SHORT $L24150

; 114  : 		{
; 115  : 			nACP *= 10;

  00077	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  0007a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0007d	89 55 f8	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00080	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  00089	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0008d	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _pch$24151[ebp]
  00093	83 c1 01	 add	 ecx, 1
  00096	89 4d e0	 mov	 DWORD PTR _pch$24151[ebp], ecx

; 117  : 		}

  00099	eb d2		 jmp	 SHORT $L24153
$L24150:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0009f	75 12		 jne	 SHORT $L24155

; 121  : 		nACP = ::GetACP();

  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
$L24155:

; 122  : 
; 123  : 	return nACP;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191304
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	5e		 pop	 esi
  000d0	83 c4 20	 add	 esp, 32			; 00000020H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$L191304:
  000de	01 00 00 00	 DD	 1
  000e2	00 00 00 00	 DD	 $L191303
$L191303:
  000e6	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ea	07 00 00 00	 DD	 7
  000ee	00 00 00 00	 DD	 $L191301
$L191301:
  000f2	73		 DB	 115			; 00000073H
  000f3	7a		 DB	 122			; 0000007aH
  000f4	41		 DB	 65			; 00000041H
  000f5	43		 DB	 67			; 00000043H
  000f6	50		 DB	 80			; 00000050H
  000f7	00		 DB	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z	; ATL::_AtlInstallStringThunk
PUBLIC	?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z ; ATL::GetEnvironmentVariableWFake
EXTRN	__imp__GetEnvironmentVariableW@12:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT
_pszName$ = 8						; size = 4
_pszBuffer$ = 12					; size = 4
_nSize$ = 16						; size = 4
?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z PROC NEAR ; ATL::GetEnvironmentVariableWThunk, COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 184  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetEnvironmentVariableW), 
; 185  : 		GetEnvironmentVariableWFake, ::GetEnvironmentVariableW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetEnvironmentVariableW@12
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z ; ATL::GetEnvironmentVariableWFake
  0000f	68 14 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+20
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 186  : 
; 187  : 	return _strthunks.pfnGetEnvironmentVariableW(pszName, pszBuffer, nSize);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 0c	 mov	 edx, DWORD PTR _pszBuffer$[ebp]
  00025	52		 push	 edx
  00026	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  00029	50		 push	 eax
  0002a	ff 15 14 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+20
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 188  : }

  00037	5e		 pop	 esi
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?GetEnvironmentVariableWThunk@ATL@@YGKPB_WPA_WK@Z ENDP	; ATL::GetEnvironmentVariableWThunk
_TEXT	ENDS
PUBLIC	?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
PUBLIC	??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51 ; `ATL::_AtlInstallStringThunk'::`2'::`local static guard'
EXTRN	__imp__GetVersion@0:NEAR
;	COMDAT ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA
_BSS	SEGMENT
?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA DB 01H DUP (?) ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
_BSS	ENDS
;	COMDAT ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
_BSS	SEGMENT
??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51 DD 01H DUP (?) ; `ATL::_AtlInstallStringThunk'::`2'::`local static guard'
; Function compile flags: /Odt /RTCsu
_BSS	ENDS
;	COMDAT ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z
_TEXT	SEGMENT
_pfn$ = -4						; size = 4
_ppThunk$ = 8						; size = 4
_pfnWin9x$ = 12						; size = 4
_pfnNT$ = 16						; size = 4
?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z PROC NEAR	; ATL::_AtlInstallStringThunk, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 116  : #pragma warning (push)
; 117  : #pragma warning (disable : 4640)	// construction of local static object is not thread-safe
; 118  : 
; 119  : 	static bool s_bWin9x = (::GetVersion()&0x80000000) != 0;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
  00011	83 e0 01	 and	 eax, 1
  00014	75 2e		 jne	 SHORT $L26217
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
  0001c	83 c9 01	 or	 ecx, 1
  0001f	89 0d 00 00 00
	00		 mov	 DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51, ecx
  00025	8b f4		 mov	 esi, esp
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersion@0
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00039	f7 d8		 neg	 eax
  0003b	1b c0		 sbb	 eax, eax
  0003d	f7 d8		 neg	 eax
  0003f	a2 00 00 00 00	 mov	 BYTE PTR ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA, al ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
$L26217:

; 120  : 	
; 121  : #pragma warning (pop)
; 122  : 
; 123  : 	void* pfn;
; 124  : 	if (s_bWin9x)

  00044	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
  0004b	85 d2		 test	 edx, edx
  0004d	74 08		 je	 SHORT $L26219

; 125  : 		pfn = pfnWin9x;

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _pfnWin9x$[ebp]
  00052	89 45 fc	 mov	 DWORD PTR _pfn$[ebp], eax

; 126  : 	else

  00055	eb 06		 jmp	 SHORT $L26220
$L26219:

; 127  : 	{
; 128  : #ifdef _CSTRING_ALWAYS_THUNK
; 129  : 		pfn = pfnWin9x;
; 130  : 		(void)pfnNT;
; 131  : #else
; 132  : 		pfn = pfnNT;

  00057	8b 4d 10	 mov	 ecx, DWORD PTR _pfnNT$[ebp]
  0005a	89 4d fc	 mov	 DWORD PTR _pfn$[ebp], ecx
$L26220:

; 133  : #endif
; 134  : 	}
; 135  : 	InterlockedExchangePointer(ppThunk, pfn);

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _pfn$[ebp]
  00060	52		 push	 edx
  00061	8b 45 08	 mov	 eax, DWORD PTR _ppThunk$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 136  : }

  0006a	5e		 pop	 esi
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ENDP	; ATL::_AtlInstallStringThunk
_TEXT	ENDS
PUBLIC	??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
PUBLIC	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
PUBLIC	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
PUBLIC	?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate
PUBLIC	??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z		; ATL::CW2AEX<128>::CW2AEX<128>
PUBLIC	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ			; ATL::CW2AEX<128>::~CW2AEX<128>
PUBLIC	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ			; ATL::CW2AEX<128>::operator char *
PUBLIC	??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@	; `string'
EXTRN	__imp___CrtDbgReport:NEAR
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	__imp__GetEnvironmentVariableA@12:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191327 DD	0ffffffffH
	DD	FLAT:$L191314
	DD	00H
	DD	FLAT:$L191315
$T191319 DD	019930520H
	DD	02H
	DD	FLAT:$T191327
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
CONST	SEGMENT
??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@ DB 'nSize >= nSizeW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\cstringt.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z
_TEXT	SEGMENT
$T191313 = -316						; size = 4
$T191311 = -312						; size = 4
$T191310 = -308						; size = 4
_pszNameA$ = -300					; size = 132
_pszBufferA$ = -160					; size = 132
_nSizeW$ = -24						; size = 4
_nSizeA$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszName$ = 8						; size = 4
_pszBuffer$ = 12					; size = 4
_nSize$ = 16						; size = 4
?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z PROC NEAR ; ATL::GetEnvironmentVariableWFake, COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00026	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 160  : 	ULONG nSizeA;
; 161  : 	ULONG nSizeW;
; 162  : 	CTempBuffer<char> pszBufferA;

  0003a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00040	e8 00 00 00 00	 call	 ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 163  : 	CW2A pszNameA(pszName);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  0004f	50		 push	 eax
  00050	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  00056	e8 00 00 00 00	 call	 ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ; ATL::CW2AEX<128>::CW2AEX<128>
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 164  : 
; 165  : 	nSizeA = ::GetEnvironmentVariableA(pszNameA, NULL, 0);

  0005f	8b f4		 mov	 esi, esp
  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  0006b	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetEnvironmentVariableA@12
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	89 45 ec	 mov	 DWORD PTR _nSizeA$[ebp], eax

; 166  : 	if (nSizeA == 0)

  00081	83 7d ec 00	 cmp	 DWORD PTR _nSizeA$[ebp], 0
  00085	75 36		 jne	 SHORT $L26322

; 167  : 		return 0;

  00087	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T191310[ebp], 0
  00091	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00095	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  000ad	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  000b2	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T191310[ebp]
  000b8	e9 33 01 00 00	 jmp	 $L26263
$L26322:

; 168  : 
; 169  : 	pszBufferA.Allocate(nSizeA*2);

  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _nSizeA$[ebp]
  000c0	d1 e1		 shl	 ecx, 1
  000c2	51		 push	 ecx
  000c3	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  000c9	e8 00 00 00 00	 call	 ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate

; 170  : 	::GetEnvironmentVariableA(pszNameA, pszBufferA, nSizeA);

  000ce	8b f4		 mov	 esi, esp
  000d0	8b 55 ec	 mov	 edx, DWORD PTR _nSizeA$[ebp]
  000d3	52		 push	 edx
  000d4	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  000da	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  000df	50		 push	 eax
  000e0	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  000e6	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  000eb	50		 push	 eax
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetEnvironmentVariableA@12
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  : 
; 172  : 	nSizeW = ::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, NULL, 0);

  000f9	8b f4		 mov	 esi, esp
  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	6a ff		 push	 -1
  00101	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00107	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  0010c	50		 push	 eax
  0010d	6a 00		 push	 0
  0010f	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00114	50		 push	 eax
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0011b	3b f4		 cmp	 esi, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	89 45 e8	 mov	 DWORD PTR _nSizeW$[ebp], eax

; 173  : 	if (nSize == 0)

  00125	83 7d 10 00	 cmp	 DWORD PTR _nSize$[ebp], 0
  00129	75 35		 jne	 SHORT $L26324

; 174  : 		return nSizeW;

  0012b	8b 45 e8	 mov	 eax, DWORD PTR _nSizeW$[ebp]
  0012e	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T191311[ebp], eax
  00134	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00138	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  0013e	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  00143	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00150	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  00155	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T191311[ebp]
  0015b	e9 90 00 00 00	 jmp	 $L26263
$L26324:

; 175  : 	ATLASSERT(nSize >= nSizeW);

  00160	8b 4d 10	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00163	3b 4d e8	 cmp	 ecx, DWORD PTR _nSizeW$[ebp]
  00166	73 2b		 jae	 SHORT $L191312
  00168	8b f4		 mov	 esi, esp
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
  0016f	6a 00		 push	 0
  00171	68 af 00 00 00	 push	 175			; 000000afH
  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  0017b	6a 02		 push	 2
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00183	83 c4 14	 add	 esp, 20			; 00000014H
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018d	83 f8 01	 cmp	 eax, 1
  00190	75 01		 jne	 SHORT $L191312
  00192	cc		 int	 3
$L191312:

; 176  : 	::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, pszBuffer, nSizeW);

  00193	8b f4		 mov	 esi, esp
  00195	8b 45 e8	 mov	 eax, DWORD PTR _nSizeW$[ebp]
  00198	50		 push	 eax
  00199	8b 4d 0c	 mov	 ecx, DWORD PTR _pszBuffer$[ebp]
  0019c	51		 push	 ecx
  0019d	6a ff		 push	 -1
  0019f	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  001a5	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  001aa	50		 push	 eax
  001ab	6a 00		 push	 0
  001ad	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  001b2	50		 push	 eax
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  001b9	3b f4		 cmp	 esi, esp
  001bb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 177  : 
; 178  : 	return nSizeW;

  001c0	8b 55 e8	 mov	 edx, DWORD PTR _nSizeW$[ebp]
  001c3	89 95 c4 fe ff
	ff		 mov	 DWORD PTR $T191313[ebp], edx
  001c9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001cd	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  001d3	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  001d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001df	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  001e5	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  001ea	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T191313[ebp]
$L26263:

; 179  : }

  001f0	52		 push	 edx
  001f1	8b cd		 mov	 ecx, ebp
  001f3	50		 push	 eax
  001f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191326
  001fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ff	58		 pop	 eax
  00200	5a		 pop	 edx
  00201	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00204	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0020b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00213	5f		 pop	 edi
  00214	5e		 pop	 esi
  00215	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  0021b	3b ec		 cmp	 ebp, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c2 0c 00	 ret	 12			; 0000000cH
$L191326:
  00228	02 00 00 00	 DD	 2
  0022c	00 00 00 00	 DD	 $L191325
$L191325:
  00230	60 ff ff ff	 DD	 -160			; ffffff60H
  00234	84 00 00 00	 DD	 132			; 00000084H
  00238	00 00 00 00	 DD	 $L191320
  0023c	d4 fe ff ff	 DD	 -300			; fffffed4H
  00240	84 00 00 00	 DD	 132			; 00000084H
  00244	00 00 00 00	 DD	 $L191321
$L191321:
  00248	70		 DB	 112			; 00000070H
  00249	73		 DB	 115			; 00000073H
  0024a	7a		 DB	 122			; 0000007aH
  0024b	4e		 DB	 78			; 0000004eH
  0024c	61		 DB	 97			; 00000061H
  0024d	6d		 DB	 109			; 0000006dH
  0024e	65		 DB	 101			; 00000065H
  0024f	41		 DB	 65			; 00000041H
  00250	00		 DB	 0
$L191320:
  00251	70		 DB	 112			; 00000070H
  00252	73		 DB	 115			; 00000073H
  00253	7a		 DB	 122			; 0000007aH
  00254	42		 DB	 66			; 00000042H
  00255	75		 DB	 117			; 00000075H
  00256	66		 DB	 102			; 00000066H
  00257	66		 DB	 102			; 00000066H
  00258	65		 DB	 101			; 00000065H
  00259	72		 DB	 114			; 00000072H
  0025a	41		 DB	 65			; 00000041H
  0025b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191314:
  00000	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _pszBufferA$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
$L191315:
  0000b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _pszNameA$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191319
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetEnvironmentVariableWFake@ATL@@YGKPB_WPA_WK@Z ENDP	; ATL::GetEnvironmentVariableWFake
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 158  : 	return( g_pfnGetThreadACP() );

  00004	8b f4		 mov	 esi, esp
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0000c	3b f4		 cmp	 esi, esp
  0000e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  : }

  00013	5e		 pop	 esi
  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z		; ATL::CompareStringWFake
EXTRN	__imp__CompareStringW@24:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT
_lcid$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_pszString1$ = 16					; size = 4
_nLength1$ = 20						; size = 4
_pszString2$ = 24					; size = 4
_nLength2$ = 28						; size = 4
?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z PROC NEAR	; ATL::CompareStringWThunk, COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 217  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCompareStringW), CompareStringWFake, ::CompareStringW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__CompareStringW@24
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z ; ATL::CompareStringWFake
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A ; ATL::_strthunks
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 218  : 
; 219  : 	return _strthunks.pfnCompareStringW(lcid, dwFlags, pszString1, nLength1, pszString2, nLength2);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 1c	 mov	 ecx, DWORD PTR _nLength2$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 18	 mov	 edx, DWORD PTR _pszString2$[ebp]
  00025	52		 push	 edx
  00026	8b 45 14	 mov	 eax, DWORD PTR _nLength1$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 10	 mov	 ecx, DWORD PTR _pszString1$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR _lcid$[ebp]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : }

  00043	5e		 pop	 esi
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	5d		 pop	 ebp
  0004c	c2 18 00	 ret	 24			; 00000018H
?CompareStringWThunk@ATL@@YGHKKPB_WH0H@Z ENDP		; ATL::CompareStringWThunk
_TEXT	ENDS
PUBLIC	?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	?AtlW2AHelper@@YGPADPADPB_WHI@Z			; AtlW2AHelper
PUBLIC	??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
EXTRN	__imp__lstrlenW@4:NEAR
EXTRN	__imp__CompareStringA@24:NEAR
EXTRN	__alloca_probe:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191351 DD	0ffffffffH
	DD	FLAT:$L191343
$T191345 DD	019930520H
	DD	01H
	DD	FLAT:$T191351
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z
_TEXT	SEGMENT
tv147 = -76						; size = 4
tv142 = -72						; size = 4
tv149 = -68						; size = 4
tv89 = -64						; size = 4
tv84 = -60						; size = 4
tv91 = -56						; size = 4
$T191342 = -52						; size = 4
_pszAString2$ = -48					; size = 4
_pszAString1$ = -44					; size = 4
__AtlSafeAllocaManager$ = -36				; size = 4
__lpa_ex$ = -28						; size = 4
__lpw_ex$ = -24						; size = 4
__acp_ex$ = -20						; size = 4
__convert_ex$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lcid$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_pszString1$ = 16					; size = 4
_nLength1$ = 20						; size = 4
_pszString2$ = 24					; size = 4
_nLength2$ = 28						; size = 4
?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z PROC NEAR	; ATL::CompareStringWFake, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 40	 sub	 esp, 64			; 00000040H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  00020	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 193  : 	USES_CONVERSION_EX;

  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __convert_ex$[ebp], 0
  00033	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00038	89 45 ec	 mov	 DWORD PTR __acp_ex$[ebp], eax
  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __lpw_ex$[ebp], 0
  00042	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __lpa_ex$[ebp], 0
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 194  : 	
; 195  : 	LPCSTR pszAString1 = NULL;

  00058	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pszAString1$[ebp], 0

; 196  : 	if(pszString1 != NULL)

  0005f	83 7d 10 00	 cmp	 DWORD PTR _pszString1$[ebp], 0
  00063	0f 84 a1 00 00
	00		 je	 $L26349

; 197  : 	{
; 198  : 		pszAString1 = W2A_EX(pszString1,_ATL_SAFE_ALLOCA_DEF_THRESHOLD);

  00069	8b 45 10	 mov	 eax, DWORD PTR _pszString1$[ebp]
  0006c	89 45 e8	 mov	 DWORD PTR __lpw_ex$[ebp], eax
  0006f	83 7d e8 00	 cmp	 DWORD PTR __lpw_ex$[ebp], 0
  00073	75 09		 jne	 SHORT $L191336
  00075	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
  0007c	eb 76		 jmp	 SHORT $L191337
$L191336:
  0007e	8b f4		 mov	 esi, esp
  00080	8b 4d e8	 mov	 ecx, DWORD PTR __lpw_ex$[ebp]
  00083	51		 push	 ecx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00095	89 55 f0	 mov	 DWORD PTR __convert_ex$[ebp], edx
  00098	81 7d f0 00 04
	00 00		 cmp	 DWORD PTR __convert_ex$[ebp], 1024 ; 00000400H
  0009f	7f 2c		 jg	 SHORT $L191334
  000a1	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
  000aa	83 c4 04	 add	 esp, 4
  000ad	0f b6 c8	 movzx	 ecx, al
  000b0	85 c9		 test	 ecx, ecx
  000b2	74 19		 je	 SHORT $L191334
  000b4	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  000b7	83 c0 03	 add	 eax, 3
  000ba	83 e0 fc	 and	 eax, -4			; fffffffcH
  000bd	e8 00 00 00 00	 call	 __alloca_probe
  000c2	89 65 c4	 mov	 DWORD PTR tv84[ebp], esp
  000c5	8b 55 c4	 mov	 edx, DWORD PTR tv84[ebp]
  000c8	89 55 c0	 mov	 DWORD PTR tv89[ebp], edx
  000cb	eb 0f		 jmp	 SHORT $L191335
$L191334:
  000cd	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  000d4	e8 00 00 00 00	 call	 ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
  000d9	89 45 c0	 mov	 DWORD PTR tv89[ebp], eax
$L191335:
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR __acp_ex$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 f0	 mov	 edx, DWORD PTR __convert_ex$[ebp]
  000e3	52		 push	 edx
  000e4	8b 45 e8	 mov	 eax, DWORD PTR __lpw_ex$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d c0	 mov	 ecx, DWORD PTR tv89[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  000f1	89 45 c8	 mov	 DWORD PTR tv91[ebp], eax
$L191337:
  000f4	8b 55 c8	 mov	 edx, DWORD PTR tv91[ebp]
  000f7	89 55 d4	 mov	 DWORD PTR _pszAString1$[ebp], edx

; 199  : 		if(pszAString1 == NULL)

  000fa	83 7d d4 00	 cmp	 DWORD PTR _pszAString1$[ebp], 0
  000fe	75 0a		 jne	 SHORT $L26349

; 200  : 			AtlThrow(E_OUTOFMEMORY);

  00100	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00105	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L26349:

; 201  : 	}
; 202  : 
; 203  : 	LPCSTR pszAString2 = NULL;

  0010a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pszAString2$[ebp], 0

; 204  : 	if(pszString2 != NULL)

  00111	83 7d 18 00	 cmp	 DWORD PTR _pszString2$[ebp], 0
  00115	0f 84 a1 00 00
	00		 je	 $L26355

; 205  : 	{
; 206  : 		pszAString2 = W2A_EX(pszString2,_ATL_SAFE_ALLOCA_DEF_THRESHOLD);

  0011b	8b 45 18	 mov	 eax, DWORD PTR _pszString2$[ebp]
  0011e	89 45 e8	 mov	 DWORD PTR __lpw_ex$[ebp], eax
  00121	83 7d e8 00	 cmp	 DWORD PTR __lpw_ex$[ebp], 0
  00125	75 09		 jne	 SHORT $L191340
  00127	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
  0012e	eb 76		 jmp	 SHORT $L191341
$L191340:
  00130	8b f4		 mov	 esi, esp
  00132	8b 4d e8	 mov	 ecx, DWORD PTR __lpw_ex$[ebp]
  00135	51		 push	 ecx
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0013c	3b f4		 cmp	 esi, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00147	89 55 f0	 mov	 DWORD PTR __convert_ex$[ebp], edx
  0014a	81 7d f0 00 04
	00 00		 cmp	 DWORD PTR __convert_ex$[ebp], 1024 ; 00000400H
  00151	7f 2c		 jg	 SHORT $L191338
  00153	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
  0015c	83 c4 04	 add	 esp, 4
  0015f	0f b6 c8	 movzx	 ecx, al
  00162	85 c9		 test	 ecx, ecx
  00164	74 19		 je	 SHORT $L191338
  00166	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  00169	83 c0 03	 add	 eax, 3
  0016c	83 e0 fc	 and	 eax, -4			; fffffffcH
  0016f	e8 00 00 00 00	 call	 __alloca_probe
  00174	89 65 b8	 mov	 DWORD PTR tv142[ebp], esp
  00177	8b 55 b8	 mov	 edx, DWORD PTR tv142[ebp]
  0017a	89 55 b4	 mov	 DWORD PTR tv147[ebp], edx
  0017d	eb 0f		 jmp	 SHORT $L191339
$L191338:
  0017f	8b 45 f0	 mov	 eax, DWORD PTR __convert_ex$[ebp]
  00182	50		 push	 eax
  00183	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  00186	e8 00 00 00 00	 call	 ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
  0018b	89 45 b4	 mov	 DWORD PTR tv147[ebp], eax
$L191339:
  0018e	8b 4d ec	 mov	 ecx, DWORD PTR __acp_ex$[ebp]
  00191	51		 push	 ecx
  00192	8b 55 f0	 mov	 edx, DWORD PTR __convert_ex$[ebp]
  00195	52		 push	 edx
  00196	8b 45 e8	 mov	 eax, DWORD PTR __lpw_ex$[ebp]
  00199	50		 push	 eax
  0019a	8b 4d b4	 mov	 ecx, DWORD PTR tv147[ebp]
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  001a3	89 45 bc	 mov	 DWORD PTR tv149[ebp], eax
$L191341:
  001a6	8b 55 bc	 mov	 edx, DWORD PTR tv149[ebp]
  001a9	89 55 d0	 mov	 DWORD PTR _pszAString2$[ebp], edx

; 207  : 		if(pszAString2 == NULL)

  001ac	83 7d d0 00	 cmp	 DWORD PTR _pszAString2$[ebp], 0
  001b0	75 0a		 jne	 SHORT $L26355

; 208  : 			AtlThrow(E_OUTOFMEMORY);

  001b2	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  001b7	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L26355:

; 209  : 	}
; 210  : 
; 211  : 	return ::CompareStringA(lcid, dwFlags, pszAString1, nLength1, pszAString2, nLength2);

  001bc	8b f4		 mov	 esi, esp
  001be	8b 45 1c	 mov	 eax, DWORD PTR _nLength2$[ebp]
  001c1	50		 push	 eax
  001c2	8b 4d d0	 mov	 ecx, DWORD PTR _pszAString2$[ebp]
  001c5	51		 push	 ecx
  001c6	8b 55 14	 mov	 edx, DWORD PTR _nLength1$[ebp]
  001c9	52		 push	 edx
  001ca	8b 45 d4	 mov	 eax, DWORD PTR _pszAString1$[ebp]
  001cd	50		 push	 eax
  001ce	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  001d1	51		 push	 ecx
  001d2	8b 55 08	 mov	 edx, DWORD PTR _lcid$[ebp]
  001d5	52		 push	 edx
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  001dc	3b f4		 cmp	 esi, esp
  001de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e3	89 45 cc	 mov	 DWORD PTR $T191342[ebp], eax
  001e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ed	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  001f0	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  001f5	8b 45 cc	 mov	 eax, DWORD PTR $T191342[ebp]
$L191333:

; 212  : }

  001f8	8d 65 ac	 lea	 esp, DWORD PTR [ebp-84]
  001fb	52		 push	 edx
  001fc	8b cd		 mov	 ecx, ebp
  001fe	50		 push	 eax
  001ff	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191350
  00205	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0020a	58		 pop	 eax
  0020b	5a		 pop	 edx
  0020c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00216	5f		 pop	 edi
  00217	5e		 pop	 esi
  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c2 18 00	 ret	 24			; 00000018H
$L191350:
  0021e	01 00 00 00	 DD	 1
  00222	00 00 00 00	 DD	 $L191349
$L191349:
  00226	dc ff ff ff	 DD	 -36			; ffffffdcH
  0022a	04 00 00 00	 DD	 4
  0022e	00 00 00 00	 DD	 $L191347
$L191347:
  00232	5f		 DB	 95			; 0000005fH
  00233	41		 DB	 65			; 00000041H
  00234	74		 DB	 116			; 00000074H
  00235	6c		 DB	 108			; 0000006cH
  00236	53		 DB	 83			; 00000053H
  00237	61		 DB	 97			; 00000061H
  00238	66		 DB	 102			; 00000066H
  00239	65		 DB	 101			; 00000065H
  0023a	41		 DB	 65			; 00000041H
  0023b	6c		 DB	 108			; 0000006cH
  0023c	6c		 DB	 108			; 0000006cH
  0023d	6f		 DB	 111			; 0000006fH
  0023e	63		 DB	 99			; 00000063H
  0023f	61		 DB	 97			; 00000061H
  00240	4d		 DB	 77			; 0000004dH
  00241	61		 DB	 97			; 00000061H
  00242	6e		 DB	 110			; 0000006eH
  00243	61		 DB	 97			; 00000061H
  00244	67		 DB	 103			; 00000067H
  00245	65		 DB	 101			; 00000065H
  00246	72		 DB	 114			; 00000072H
  00247	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191343:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
__ehhandler$?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191345
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CompareStringWFake@ATL@@YGHKKPB_WH0H@Z ENDP		; ATL::CompareStringWFake
EXTRN	__imp___resetstkoflw:NEAR
EXTRN	__except_handler3:NEAR
;	COMDAT CONST
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
CONST	SEGMENT
$T191361 DD	0ffffffffH
	DD	FLAT:$L191356
	DD	FLAT:$L191357
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT
tv65 = -48						; size = 4
$T191360 = -44						; size = 4
_p$24107 = -36						; size = 4
_bStackAvailable$ = -25					; size = 1
__$SEHRec$ = -24					; size = 24
_Size$ = 8						; size = 4
?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable, COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 OFFSET FLAT:$T191361
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:__except_handler3
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00015	50		 push	 eax
  00016	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001d	83 c4 e0	 add	 esp, -32		; ffffffe0H
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0002b	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0002e	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00031	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00034	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00037	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0003a	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 332  :     bool bStackAvailable = true;

  0003d	c6 45 e7 01	 mov	 BYTE PTR _bStackAvailable$[ebp], 1

; 333  : 
; 334  :     __try

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 335  :     {
; 336  :         PVOID p = _alloca(Size + _ATL_STACK_MARGIN);

  00048	8b 45 08	 mov	 eax, DWORD PTR _Size$[ebp]
  0004b	05 03 20 00 00	 add	 eax, 8195		; 00002003H
  00050	83 e0 fc	 and	 eax, -4			; fffffffcH
  00053	e8 00 00 00 00	 call	 __alloca_probe
  00058	89 65 d0	 mov	 DWORD PTR tv65[ebp], esp
  0005b	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  0005e	8b 45 d0	 mov	 eax, DWORD PTR tv65[ebp]
  00061	89 45 dc	 mov	 DWORD PTR _p$24107[ebp], eax
  00064	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -1
  0006b	eb 35		 jmp	 SHORT $L191359
$L191356:

; 337  :         (p);
; 338  :     }
; 339  :     __except ((EXCEPTION_STACK_OVERFLOW == GetExceptionCode()) ?
; 340  :                    EXCEPTION_EXECUTE_HANDLER :
; 341  :                    EXCEPTION_CONTINUE_SEARCH)

  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+4]
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	8b 02		 mov	 eax, DWORD PTR [edx]
  00074	89 45 d4	 mov	 DWORD PTR $T191360[ebp], eax
  00077	8b 45 d4	 mov	 eax, DWORD PTR $T191360[ebp]
  0007a	2d fd 00 00 c0	 sub	 eax, -1073741571	; c00000fdH
  0007f	f7 d8		 neg	 eax
  00081	1b c0		 sbb	 eax, eax
  00083	40		 inc	 eax
$L191358:
  00084	c3		 ret	 0
$L191357:
  00085	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 342  :     {
; 343  :         bStackAvailable = false;

  00088	c6 45 e7 00	 mov	 BYTE PTR _bStackAvailable$[ebp], 0

; 344  :         _resetstkoflw();

  0008c	8b f4		 mov	 esi, esp
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___resetstkoflw
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -1
$L191359:

; 345  :     }
; 346  :     return bStackAvailable;

  000a2	8a 45 e7	 mov	 al, BYTE PTR _bStackAvailable$[ebp]
$L191355:

; 347  : }

  000a5	8d 65 c4	 lea	 esp, DWORD PTR [ebp-60]
  000a8	52		 push	 edx
  000a9	8b cd		 mov	 ecx, ebp
  000ab	50		 push	 eax
  000ac	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191366
  000b2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b7	58		 pop	 eax
  000b8	5a		 pop	 edx
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$L191366:
  000ca	01 00 00 00	 DD	 1
  000ce	00 00 00 00	 DD	 $L191365
$L191365:
  000d2	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d6	04 00 00 00	 DD	 4
  000da	00 00 00 00	 DD	 $L191363
$L191363:
  000de	70		 DB	 112			; 00000070H
  000df	00		 DB	 0
?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
_TEXT	ENDS
PUBLIC	??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
EXTRN	__imp__WideCharToMultiByte@32:NEAR
;	COMDAT ??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
CONST	SEGMENT
??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@ DB 'lpw != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlconv.h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@ DB 'lpa != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPB_WHI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_lpa$ = 8						; size = 4
_lpw$ = 12						; size = 4
_nChars$ = 16						; size = 4
_acp$ = 20						; size = 4
?AtlW2AHelper@@YGPADPADPB_WHI@Z PROC NEAR		; AtlW2AHelper, COMDAT

; 573  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 574  : 	ATLASSERT(lpw != NULL);

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00010	75 2b		 jne	 SHORT $L191370
  00012	8b f4		 mov	 esi, esp
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
  00019	6a 00		 push	 0
  0001b	68 3e 02 00 00	 push	 574			; 0000023eH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 01		 jne	 SHORT $L191370
  0003c	cc		 int	 3
$L191370:

; 575  : 	ATLASSERT(lpa != NULL);

  0003d	83 7d 08 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00041	75 2b		 jne	 SHORT $L191371
  00043	8b f4		 mov	 esi, esp
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
  0004a	6a 00		 push	 0
  0004c	68 3f 02 00 00	 push	 575			; 0000023fH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	83 f8 01	 cmp	 eax, 1
  0006b	75 01		 jne	 SHORT $L191371
  0006d	cc		 int	 3
$L191371:

; 576  : 	if (lpa == NULL || lpw == NULL)

  0006e	83 7d 08 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00072	74 06		 je	 SHORT $L24313
  00074	83 7d 0c 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00078	75 04		 jne	 SHORT $L24312
$L24313:

; 577  : 		return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	eb 6c		 jmp	 SHORT $L24309
$L24312:

; 578  : 	// verify that no illegal character present
; 579  : 	// since lpa was allocated based on the size of lpw
; 580  : 	// don't worry about the number of chars
; 581  : 	lpa[0] = '\0';

  0007e	8b 55 08	 mov	 edx, DWORD PTR _lpa$[ebp]
  00081	c6 02 00	 mov	 BYTE PTR [edx], 0

; 582  : 	int ret = WideCharToMultiByte(acp, 0, lpw, -1, lpa, nChars, NULL, NULL);

  00084	8b f4		 mov	 esi, esp
  00086	6a 00		 push	 0
  00088	6a 00		 push	 0
  0008a	8b 45 10	 mov	 eax, DWORD PTR _nChars$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _lpa$[ebp]
  00091	51		 push	 ecx
  00092	6a ff		 push	 -1
  00094	8b 55 0c	 mov	 edx, DWORD PTR _lpw$[ebp]
  00097	52		 push	 edx
  00098	6a 00		 push	 0
  0009a	8b 45 14	 mov	 eax, DWORD PTR _acp$[ebp]
  0009d	50		 push	 eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 583  : 	if(ret == 0)

  000ae	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000b2	75 33		 jne	 SHORT $L24315

; 584  : 	{
; 585  : 		ATLASSERT(FALSE);

  000b4	33 c9		 xor	 ecx, ecx
  000b6	75 2b		 jne	 SHORT $L191372
  000b8	8b f4		 mov	 esi, esp
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  000bf	6a 00		 push	 0
  000c1	68 49 02 00 00	 push	 585			; 00000249H
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  000cb	6a 02		 push	 2
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d3	83 c4 14	 add	 esp, 20			; 00000014H
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	75 01		 jne	 SHORT $L191372
  000e2	cc		 int	 3
$L191372:

; 586  : 		return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	eb 03		 jmp	 SHORT $L24309
$L24315:

; 587  : 	}
; 588  : 	return lpa;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _lpa$[ebp]
$L24309:

; 589  : }

  000ea	5e		 pop	 esi
  000eb	83 c4 04	 add	 esp, 4
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 10 00	 ret	 16			; 00000010H
?AtlW2AHelper@@YGPADPADPB_WHI@Z ENDP			; AtlW2AHelper
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@ ; `string'
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
EXTRN	?AfxThrowMemoryException@@YGXXZ:NEAR		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:NEAR		; AfxThrowOleException
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@ DB 'AtlThrow: hr '
	DB	'= 0x%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlexcept.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T191374 = -8						; size = 8
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00014	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
  0001d	6a 00		 push	 0
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
  00024	e8 00 00 00 00	 call	 ??BCTraceCategory@ATL@@QBEKXZ ; ATL::CTraceCategory::operator unsigned long
  00029	50		 push	 eax
  0002a	6a 3e		 push	 62			; 0000003eH
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00031	8d 4d f8	 lea	 ecx, DWORD PTR $T191374[ebp]
  00034	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )

  00042	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00049	75 05		 jne	 SHORT $L25222

; 65   : 	{
; 66   : 		AfxThrowMemoryException();

  0004b	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$L25222:

; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _hr$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$L191373:

; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );
; 74   : #endif
; 75   : };

  00059	83 c4 08	 add	 esp, 8
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _nLineNo$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
; Function compile flags: /Odt /RTCsu
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 162  : 		va_list ptr; va_start(ptr, pszFmt);

  0000b	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0000e	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 163  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 14	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  00018	52		 push	 edx
  00019	8b 45 10	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
  00033	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ; ATL::CTrace::TraceV
  00038	83 c4 1c	 add	 esp, 28			; 0000001cH

; 164  : 		va_end(ptr);

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 165  : 	}

  00042	83 c4 04	 add	 esp, 4
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVA:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z PROC NEAR		; ATL::CTrace::TraceV, COMDAT

; 121  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 		AtlTraceVA(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

  00003	8b 45 20	 mov	 eax, DWORD PTR _args$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 1c	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 18	 mov	 edx, DWORD PTR _nLevel$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 14	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _AtlTraceVA
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH

; 123  : 	}

  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 204  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
PUBLIC	?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z	; ATL::GetStringTypeExWFake
EXTRN	__imp__GetStringTypeExW@20:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT
_lcid$ = 8						; size = 4
_dwInfoType$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nLength$ = 20						; size = 4
_pwCharType$ = 24					; size = 4
?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z PROC NEAR	; ATL::GetStringTypeExWThunk, COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 241  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetStringTypeExW), GetStringTypeExWFake, ::GetStringTypeExW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetStringTypeExW@20
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z ; ATL::GetStringTypeExWFake
  0000f	68 04 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+4
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : 
; 243  : 	return _strthunks.pfnGetStringTypeExW(lcid, dwInfoType, pszSrc, nLength, pwCharType);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 18	 mov	 ecx, DWORD PTR _pwCharType$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 14	 mov	 edx, DWORD PTR _nLength$[ebp]
  00025	52		 push	 edx
  00026	8b 45 10	 mov	 eax, DWORD PTR _pszSrc$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInfoType$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _lcid$[ebp]
  00031	52		 push	 edx
  00032	ff 15 04 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : }

  0003f	5e		 pop	 esi
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?GetStringTypeExWThunk@ATL@@YGHKKPB_WHPAG@Z ENDP	; ATL::GetStringTypeExWThunk
_TEXT	ENDS
EXTRN	__imp__GetStringTypeExA@20:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191391 DD	0ffffffffH
	DD	FLAT:$L191383
$T191385 DD	019930520H
	DD	01H
	DD	FLAT:$T191391
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z
_TEXT	SEGMENT
$T191382 = -164						; size = 4
_pszA$ = -156						; size = 132
_nLengthA$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lcid$ = 8						; size = 4
_dwInfoType$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nLength$ = 20						; size = 4
_pwCharType$ = 24					; size = 4
?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z PROC NEAR	; ATL::GetStringTypeExWFake, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00026	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 225  : 	int nLengthA;
; 226  : 	CTempBuffer<char> pszA;

  0003a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00040	e8 00 00 00 00	 call	 ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 227  : 
; 228  : 	nLengthA = ::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, NULL, 0, NULL, NULL);

  0004c	8b f4		 mov	 esi, esp
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	8b 45 14	 mov	 eax, DWORD PTR _nLength$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _pszSrc$[ebp]
  0005d	51		 push	 ecx
  0005e	6a 00		 push	 0
  00060	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	89 45 ec	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 229  : 	pszA.Allocate(nLengthA);

  00076	8b 55 ec	 mov	 edx, DWORD PTR _nLengthA$[ebp]
  00079	52		 push	 edx
  0007a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00080	e8 00 00 00 00	 call	 ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate

; 230  : 	::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, pszA, nLengthA, NULL, NULL);

  00085	8b f4		 mov	 esi, esp
  00087	6a 00		 push	 0
  00089	6a 00		 push	 0
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  0008e	50		 push	 eax
  0008f	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00095	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  0009a	50		 push	 eax
  0009b	8b 4d 14	 mov	 ecx, DWORD PTR _nLength$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 10	 mov	 edx, DWORD PTR _pszSrc$[ebp]
  000a2	52		 push	 edx
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  000aa	50		 push	 eax
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000b1	3b f4		 cmp	 esi, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 231  : 
; 232  : 	if (nLength == -1)

  000b8	83 7d 14 ff	 cmp	 DWORD PTR _nLength$[ebp], -1
  000bc	75 07		 jne	 SHORT $L26381

; 233  : 		nLengthA = -1;

  000be	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _nLengthA$[ebp], -1
$L26381:

; 234  : 
; 235  : 	return ::GetStringTypeExA(lcid, dwInfoType, pszA, nLengthA, pwCharType);

  000c5	8b f4		 mov	 esi, esp
  000c7	8b 45 18	 mov	 eax, DWORD PTR _pwCharType$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _nLengthA$[ebp]
  000ce	51		 push	 ecx
  000cf	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  000d5	e8 00 00 00 00	 call	 ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
  000da	50		 push	 eax
  000db	8b 55 0c	 mov	 edx, DWORD PTR _dwInfoType$[ebp]
  000de	52		 push	 edx
  000df	8b 45 08	 mov	 eax, DWORD PTR _lcid$[ebp]
  000e2	50		 push	 eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStringTypeExA@20
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T191382[ebp], eax
  000f6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fd	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
  00108	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T191382[ebp]

; 236  : }

  0010e	52		 push	 edx
  0010f	8b cd		 mov	 ecx, ebp
  00111	50		 push	 eax
  00112	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191390
  00118	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011d	58		 pop	 eax
  0011e	5a		 pop	 edx
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00122	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00129	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  00139	3b ec		 cmp	 ebp, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 14 00	 ret	 20			; 00000014H
$L191390:
  00146	01 00 00 00	 DD	 1
  0014a	00 00 00 00	 DD	 $L191389
$L191389:
  0014e	64 ff ff ff	 DD	 -156			; ffffff64H
  00152	84 00 00 00	 DD	 132			; 00000084H
  00156	00 00 00 00	 DD	 $L191386
$L191386:
  0015a	70		 DB	 112			; 00000070H
  0015b	73		 DB	 115			; 00000073H
  0015c	7a		 DB	 122			; 0000007aH
  0015d	41		 DB	 65			; 00000041H
  0015e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191383:
  00000	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pszA$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
__ehhandler$?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191385
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetStringTypeExWFake@ATL@@YGHKKPB_WHPAG@Z ENDP		; ATL::GetStringTypeExWFake
PUBLIC	?lstrcmpiWFake@ATL@@YGHPB_W0@Z			; ATL::lstrcmpiWFake
EXTRN	__imp__lstrcmpiW@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?lstrcmpiWThunk@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT
_psz1$ = 8						; size = 4
_psz2$ = 12						; size = 4
?lstrcmpiWThunk@ATL@@YGHPB_W0@Z PROC NEAR		; ATL::lstrcmpiWThunk, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 255  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnlstrcmpiW), lstrcmpiWFake, ::lstrcmpiW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__lstrcmpiW@8
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?lstrcmpiWFake@ATL@@YGHPB_W0@Z ; ATL::lstrcmpiWFake
  0000f	68 08 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+8
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 256  : 
; 257  : 	return _strthunks.pfnlstrcmpiW(psz1, psz2);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _psz2$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 08	 mov	 edx, DWORD PTR _psz1$[ebp]
  00025	52		 push	 edx
  00026	ff 15 08 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+8
  0002c	3b f4		 cmp	 esi, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 258  : }

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?lstrcmpiWThunk@ATL@@YGHPB_W0@Z ENDP			; ATL::lstrcmpiWThunk
_TEXT	ENDS
EXTRN	__imp__lstrcmpiA@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?lstrcmpiWFake@ATL@@YGHPB_W0@Z
_TEXT	SEGMENT
tv91 = -32						; size = 4
tv94 = -28						; size = 4
tv76 = -24						; size = 4
tv79 = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz1$ = 8						; size = 4
_psz2$ = 12						; size = 4
?lstrcmpiWFake@ATL@@YGHPB_W0@Z PROC NEAR		; ATL::lstrcmpiWFake, COMDAT

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 248  : 	USES_CONVERSION;

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __convert$[ebp], 0
  0002b	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00030	89 45 f8	 mov	 DWORD PTR __acp$[ebp], eax
  00033	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __lpw$[ebp], 0
  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __lpa$[ebp], 0

; 249  : 
; 250  : 	return ::lstrcmpiA(W2A(psz1), W2A(psz2));

  00041	8b 45 0c	 mov	 eax, DWORD PTR _psz2$[ebp]
  00044	89 45 f4	 mov	 DWORD PTR __lpw$[ebp], eax
  00047	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  0004b	75 09		 jne	 SHORT $L191396
  0004d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
  00054	eb 43		 jmp	 SHORT $L191397
$L191396:
  00056	8b f4		 mov	 esi, esp
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __lpw$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  0006d	89 55 fc	 mov	 DWORD PTR __convert$[ebp], edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  00073	83 c0 03	 add	 eax, 3
  00076	83 e0 fc	 and	 eax, -4			; fffffffcH
  00079	e8 00 00 00 00	 call	 __alloca_probe
  0007e	89 65 e8	 mov	 DWORD PTR tv76[ebp], esp
  00081	8b 45 f8	 mov	 eax, DWORD PTR __acp$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR __convert$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 e8	 mov	 eax, DWORD PTR tv76[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  00096	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
$L191397:
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _psz1$[ebp]
  0009c	89 4d f4	 mov	 DWORD PTR __lpw$[ebp], ecx
  0009f	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  000a3	75 09		 jne	 SHORT $L191398
  000a5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000ac	eb 43		 jmp	 SHORT $L191399
$L191398:
  000ae	8b f4		 mov	 esi, esp
  000b0	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  000b3	52		 push	 edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8d 44 00 02	 lea	 eax, DWORD PTR [eax+eax+2]
  000c5	89 45 fc	 mov	 DWORD PTR __convert$[ebp], eax
  000c8	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000cb	83 c0 03	 add	 eax, 3
  000ce	83 e0 fc	 and	 eax, -4			; fffffffcH
  000d1	e8 00 00 00 00	 call	 __alloca_probe
  000d6	89 65 e0	 mov	 DWORD PTR tv91[ebp], esp
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR __acp$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 fc	 mov	 edx, DWORD PTR __convert$[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 f4	 mov	 eax, DWORD PTR __lpw$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d e0	 mov	 ecx, DWORD PTR tv91[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  000ee	89 45 e4	 mov	 DWORD PTR tv94[ebp], eax
$L191399:
  000f1	8b f4		 mov	 esi, esp
  000f3	8b 55 ec	 mov	 edx, DWORD PTR tv79[ebp]
  000f6	52		 push	 edx
  000f7	8b 45 e4	 mov	 eax, DWORD PTR tv94[ebp]
  000fa	50		 push	 eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpiA@8
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 251  : }

  00108	8d 65 dc	 lea	 esp, DWORD PTR [ebp-36]
  0010b	5e		 pop	 esi
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 08 00	 ret	 8
?lstrcmpiWFake@ATL@@YGHPB_W0@Z ENDP			; ATL::lstrcmpiWFake
_TEXT	ENDS
PUBLIC	?CharLowerWFake@ATL@@YGPA_WPA_W@Z		; ATL::CharLowerWFake
EXTRN	__imp__CharLowerW@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharLowerWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CharLowerWThunk@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharLowerWThunk, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 274  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharLowerW), CharLowerWFake, ::CharLowerW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__CharLowerW@4
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?CharLowerWFake@ATL@@YGPA_WPA_W@Z ; ATL::CharLowerWFake
  0000f	68 0c 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+12
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 275  : 
; 276  : 	return _strthunks.pfnCharLowerW(psz);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00021	51		 push	 ecx
  00022	ff 15 0c 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+12
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 277  : }

  0002f	5e		 pop	 esi
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?CharLowerWThunk@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharLowerWThunk
_TEXT	ENDS
PUBLIC	?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z		; AtlA2WHelper
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	__imp__CharLowerA@4:NEAR
EXTRN	__imp__wcscpy:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharLowerWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv94 = -32						; size = 4
tv75 = -28						; size = 4
tv78 = -24						; size = 4
_pszA$ = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz$ = 8						; size = 4
?CharLowerWFake@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharLowerWFake, COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 262  : 	USES_CONVERSION;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __convert$[ebp], 0
  0002e	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00033	89 45 f8	 mov	 DWORD PTR __acp$[ebp], eax
  00036	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __lpw$[ebp], 0
  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __lpa$[ebp], 0

; 263  : 	LPSTR pszA;
; 264  : 
; 265  : 	pszA = W2A(psz);

  00044	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __lpw$[ebp], eax
  0004a	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  0004e	75 09		 jne	 SHORT $L191402
  00050	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  00057	eb 43		 jmp	 SHORT $L191403
$L191402:
  00059	8b f4		 mov	 esi, esp
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __lpw$[ebp]
  0005e	51		 push	 ecx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00070	89 55 fc	 mov	 DWORD PTR __convert$[ebp], edx
  00073	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  00076	83 c0 03	 add	 eax, 3
  00079	83 e0 fc	 and	 eax, -4			; fffffffcH
  0007c	e8 00 00 00 00	 call	 __alloca_probe
  00081	89 65 e4	 mov	 DWORD PTR tv75[ebp], esp
  00084	8b 45 f8	 mov	 eax, DWORD PTR __acp$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __convert$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 e4	 mov	 eax, DWORD PTR tv75[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  00099	89 45 e8	 mov	 DWORD PTR tv78[ebp], eax
$L191403:
  0009c	8b 4d e8	 mov	 ecx, DWORD PTR tv78[ebp]
  0009f	89 4d ec	 mov	 DWORD PTR _pszA$[ebp], ecx

; 266  : 	::CharLowerA(pszA);

  000a2	8b f4		 mov	 esi, esp
  000a4	8b 55 ec	 mov	 edx, DWORD PTR _pszA$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharLowerA@4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 267  : 	wcscpy(psz, A2W(pszA));

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _pszA$[ebp]
  000b8	89 45 f0	 mov	 DWORD PTR __lpa$[ebp], eax
  000bb	83 7d f0 00	 cmp	 DWORD PTR __lpa$[ebp], 0
  000bf	75 09		 jne	 SHORT $L191404
  000c1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000c8	eb 44		 jmp	 SHORT $L191405
$L191404:
  000ca	8b f4		 mov	 esi, esp
  000cc	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 fc	 mov	 DWORD PTR __convert$[ebp], eax
  000e3	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000e6	d1 e0		 shl	 eax, 1
  000e8	83 c0 03	 add	 eax, 3
  000eb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000ee	e8 00 00 00 00	 call	 __alloca_probe
  000f3	89 65 dc	 mov	 DWORD PTR tv90[ebp], esp
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __acp$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  00101	51		 push	 ecx
  00102	8b 55 dc	 mov	 edx, DWORD PTR tv90[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z ; AtlA2WHelper
  0010b	89 45 e0	 mov	 DWORD PTR tv94[ebp], eax
$L191405:
  0010e	8b f4		 mov	 esi, esp
  00110	8b 45 e0	 mov	 eax, DWORD PTR tv94[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00117	51		 push	 ecx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  0011e	83 c4 08	 add	 esp, 8
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 268  : 
; 269  : 	return psz;

  00128	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]

; 270  : }

  0012b	8d 65 d8	 lea	 esp, DWORD PTR [ebp-40]
  0012e	5e		 pop	 esi
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
?CharLowerWFake@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharLowerWFake
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_lpw$ = 8						; size = 4
_lpa$ = 12						; size = 4
_nChars$ = 16						; size = 4
_acp$ = 20						; size = 4
?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z PROC NEAR		; AtlA2WHelper, COMDAT

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 555  : 	ATLASSERT(lpa != NULL);

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00010	75 2b		 jne	 SHORT $L191407
  00012	8b f4		 mov	 esi, esp
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
  00019	6a 00		 push	 0
  0001b	68 2b 02 00 00	 push	 555			; 0000022bH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 01		 jne	 SHORT $L191407
  0003c	cc		 int	 3
$L191407:

; 556  : 	ATLASSERT(lpw != NULL);

  0003d	83 7d 08 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00041	75 2b		 jne	 SHORT $L191408
  00043	8b f4		 mov	 esi, esp
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
  0004a	6a 00		 push	 0
  0004c	68 2c 02 00 00	 push	 556			; 0000022cH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00056	6a 02		 push	 2
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	83 f8 01	 cmp	 eax, 1
  0006b	75 01		 jne	 SHORT $L191408
  0006d	cc		 int	 3
$L191408:

; 557  : 	if (lpw == NULL || lpa == NULL)

  0006e	83 7d 08 00	 cmp	 DWORD PTR _lpw$[ebp], 0
  00072	74 06		 je	 SHORT $L24299
  00074	83 7d 0c 00	 cmp	 DWORD PTR _lpa$[ebp], 0
  00078	75 04		 jne	 SHORT $L24298
$L24299:

; 558  : 		return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	eb 6a		 jmp	 SHORT $L24292
$L24298:

; 559  : 	// verify that no illegal character present
; 560  : 	// since lpw was allocated based on the size of lpa
; 561  : 	// don't worry about the number of chars
; 562  : 	lpw[0] = '\0';

  0007e	8b 55 08	 mov	 edx, DWORD PTR _lpw$[ebp]
  00081	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 563  : 	int ret = MultiByteToWideChar(acp, 0, lpa, -1, lpw, nChars);

  00086	8b f4		 mov	 esi, esp
  00088	8b 45 10	 mov	 eax, DWORD PTR _nChars$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _lpw$[ebp]
  0008f	51		 push	 ecx
  00090	6a ff		 push	 -1
  00092	8b 55 0c	 mov	 edx, DWORD PTR _lpa$[ebp]
  00095	52		 push	 edx
  00096	6a 00		 push	 0
  00098	8b 45 14	 mov	 eax, DWORD PTR _acp$[ebp]
  0009b	50		 push	 eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 564  : 	if(ret == 0)

  000ac	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000b0	75 33		 jne	 SHORT $L24301

; 565  : 	{
; 566  : 		ATLASSERT(FALSE);

  000b2	33 c9		 xor	 ecx, ecx
  000b4	75 2b		 jne	 SHORT $L191409
  000b6	8b f4		 mov	 esi, esp
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  000bd	6a 00		 push	 0
  000bf	68 36 02 00 00	 push	 566			; 00000236H
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FG@PFHCBDBK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  000c9	6a 02		 push	 2
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	3b f4		 cmp	 esi, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	83 f8 01	 cmp	 eax, 1
  000de	75 01		 jne	 SHORT $L191409
  000e0	cc		 int	 3
$L191409:

; 567  : 		return NULL;

  000e1	33 c0		 xor	 eax, eax
  000e3	eb 03		 jmp	 SHORT $L24292
$L24301:

; 568  : 	}		
; 569  : 	return lpw;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _lpw$[ebp]
$L24292:

; 570  : }

  000e8	5e		 pop	 esi
  000e9	83 c4 04	 add	 esp, 4
  000ec	3b ec		 cmp	 ebp, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 10 00	 ret	 16			; 00000010H
?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z ENDP			; AtlA2WHelper
_TEXT	ENDS
PUBLIC	?CharUpperWFake@ATL@@YGPA_WPA_W@Z		; ATL::CharUpperWFake
EXTRN	__imp__CharUpperW@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CharUpperWThunk@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CharUpperWThunk@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharUpperWThunk, COMDAT

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 293  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharUpperW), CharUpperWFake, ::CharUpperW);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__CharUpperW@4
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:?CharUpperWFake@ATL@@YGPA_WPA_W@Z ; ATL::CharUpperWFake
  0000f	68 10 00 00 00	 push	 OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+16
  00014	e8 00 00 00 00	 call	 ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 294  : 
; 295  : 	return _strthunks.pfnCharUpperW(psz);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00021	51		 push	 ecx
  00022	ff 15 10 00 00
	00		 call	 DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+16
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 296  : }

  0002f	5e		 pop	 esi
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?CharUpperWThunk@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharUpperWThunk
_TEXT	ENDS
EXTRN	__imp__CharUpperA@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharUpperWFake@ATL@@YGPA_WPA_W@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv94 = -32						; size = 4
tv75 = -28						; size = 4
tv78 = -24						; size = 4
_pszA$ = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz$ = 8						; size = 4
?CharUpperWFake@ATL@@YGPA_WPA_W@Z PROC NEAR		; ATL::CharUpperWFake, COMDAT

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 281  : 	USES_CONVERSION;

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __convert$[ebp], 0
  0002e	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00033	89 45 f8	 mov	 DWORD PTR __acp$[ebp], eax
  00036	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __lpw$[ebp], 0
  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __lpa$[ebp], 0

; 282  : 	LPSTR pszA;
; 283  : 
; 284  : 	pszA = W2A(psz);

  00044	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __lpw$[ebp], eax
  0004a	83 7d f4 00	 cmp	 DWORD PTR __lpw$[ebp], 0
  0004e	75 09		 jne	 SHORT $L191412
  00050	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  00057	eb 43		 jmp	 SHORT $L191413
$L191412:
  00059	8b f4		 mov	 esi, esp
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __lpw$[ebp]
  0005e	51		 push	 ecx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  00070	89 55 fc	 mov	 DWORD PTR __convert$[ebp], edx
  00073	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  00076	83 c0 03	 add	 eax, 3
  00079	83 e0 fc	 and	 eax, -4			; fffffffcH
  0007c	e8 00 00 00 00	 call	 __alloca_probe
  00081	89 65 e4	 mov	 DWORD PTR tv75[ebp], esp
  00084	8b 45 f8	 mov	 eax, DWORD PTR __acp$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __convert$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 f4	 mov	 edx, DWORD PTR __lpw$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 e4	 mov	 eax, DWORD PTR tv75[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?AtlW2AHelper@@YGPADPADPB_WHI@Z ; AtlW2AHelper
  00099	89 45 e8	 mov	 DWORD PTR tv78[ebp], eax
$L191413:
  0009c	8b 4d e8	 mov	 ecx, DWORD PTR tv78[ebp]
  0009f	89 4d ec	 mov	 DWORD PTR _pszA$[ebp], ecx

; 285  : 	::CharUpperA(pszA);

  000a2	8b f4		 mov	 esi, esp
  000a4	8b 55 ec	 mov	 edx, DWORD PTR _pszA$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharUpperA@4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 286  : 	wcscpy(psz, A2W(pszA));

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _pszA$[ebp]
  000b8	89 45 f0	 mov	 DWORD PTR __lpa$[ebp], eax
  000bb	83 7d f0 00	 cmp	 DWORD PTR __lpa$[ebp], 0
  000bf	75 09		 jne	 SHORT $L191414
  000c1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000c8	eb 44		 jmp	 SHORT $L191415
$L191414:
  000ca	8b f4		 mov	 esi, esp
  000cc	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 fc	 mov	 DWORD PTR __convert$[ebp], eax
  000e3	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000e6	d1 e0		 shl	 eax, 1
  000e8	83 c0 03	 add	 eax, 3
  000eb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000ee	e8 00 00 00 00	 call	 __alloca_probe
  000f3	89 65 dc	 mov	 DWORD PTR tv90[ebp], esp
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __acp$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 fc	 mov	 eax, DWORD PTR __convert$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __lpa$[ebp]
  00101	51		 push	 ecx
  00102	8b 55 dc	 mov	 edx, DWORD PTR tv90[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ?AtlA2WHelper@@YGPA_WPA_WPBDHI@Z ; AtlA2WHelper
  0010b	89 45 e0	 mov	 DWORD PTR tv94[ebp], eax
$L191415:
  0010e	8b f4		 mov	 esi, esp
  00110	8b 45 e0	 mov	 eax, DWORD PTR tv94[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00117	51		 push	 ecx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  0011e	83 c4 08	 add	 esp, 8
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 287  : 
; 288  : 	return psz;

  00128	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]

; 289  : }

  0012b	8d 65 d8	 lea	 esp, DWORD PTR [ebp-40]
  0012e	5e		 pop	 esi
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
?CharUpperWFake@ATL@@YGPA_WPA_W@Z ENDP			; ATL::CharUpperWFake
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
$L117265:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	83 e8 01	 sub	 eax, 1
  0000a	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000d	78 1a		 js	 SHORT $L117263
  0000f	8b f4		 mov	 esi, esp
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00014	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  00024	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00027	eb db		 jmp	 SHORT $L117265
$L117263:
  00029	5e		 pop	 esi
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC NEAR ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00011	83 e0 02	 and	 eax, 2
  00014	74 36		 je	 SHORT $L169904
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00021	52		 push	 edx
  00022	6a 0c		 push	 12			; 0000000cH
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR ___flags$[ebp]
  00030	83 e1 01	 and	 ecx, 1
  00033	74 0f		 je	 SHORT $L169905
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 ea 04	 sub	 edx, 4
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00041	83 c4 04	 add	 esp, 4
$L169905:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 e8 04	 sub	 eax, 4
  0004a	eb 1f		 jmp	 SHORT $L169903
$L169904:
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
  00054	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00057	83 e0 01	 and	 eax, 1
  0005a	74 0c		 je	 SHORT $L169907
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00065	83 c4 04	 add	 esp, 4
$L169907:
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$L169903:
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC NEAR ; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC NEAR			; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 628  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 629  : 		::SysFreeString(m_str);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 630  : 	}

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
PUBLIC	??4CMarkup@@QAEXABV0@@Z				; CMarkup::operator=
PUBLIC	?RemoveAll@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::RemoveAll
PUBLIC	?Append@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEHABV1@@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::Append
PUBLIC	??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
tv141 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_markup$ = 8						; size = 4
??4CMarkup@@QAEXABV0@@Z PROC NEAR			; CMarkup::operator=
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	m_iPosParent = markup.m_iPosParent;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _markup$[ebp]
  00025	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00028	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 28   : 	m_iPos = markup.m_iPos;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _markup$[ebp]
  00031	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00034	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 29   : 	m_iPosChild = markup.m_iPosChild;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _markup$[ebp]
  0003d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00040	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 30   : 	m_iPosFree = markup.m_iPosFree;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _markup$[ebp]
  00049	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0004c	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 31   : 	m_nNodeType = markup.m_nNodeType;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _markup$[ebp]
  00055	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00058	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 32   : 	m_aPos.RemoveAll();

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 14	 add	 ecx, 20			; 00000014H
  00061	e8 00 00 00 00	 call	 ?RemoveAll@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::RemoveAll

; 33   : 	m_aPos.Append( markup.m_aPos );

  00066	8b 45 08	 mov	 eax, DWORD PTR _markup$[ebp]
  00069	83 c0 14	 add	 eax, 20			; 00000014H
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	83 c1 14	 add	 ecx, 20			; 00000014H
  00073	e8 00 00 00 00	 call	 ?Append@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEHABV1@@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::Append

; 34   : 	m_csDoc = markup.m_csDoc;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _markup$[ebp]
  0007b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0007e	8b f4		 mov	 esi, esp
  00080	51		 push	 ecx
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 	MARKUP_SETDEBUGSTATE;

  00094	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00097	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0009b	74 30		 je	 SHORT $L191421
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000a3	8b f4		 mov	 esi, esp
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b f0		 mov	 esi, eax
  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000ba	51		 push	 ecx
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	83 c1 14	 add	 ecx, 20			; 00000014H
  000c1	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  000c6	03 30		 add	 esi, DWORD PTR [eax]
  000c8	89 75 f8	 mov	 DWORD PTR tv128[ebp], esi
  000cb	eb 07		 jmp	 SHORT $L191422
$L191421:
  000cd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$L191422:
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	8b 45 f8	 mov	 eax, DWORD PTR tv128[ebp]
  000da	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  000e4	74 30		 je	 SHORT $L191423
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000ec	8b f4		 mov	 esi, esp
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000f4	3b f4		 cmp	 esi, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b f0		 mov	 esi, eax
  000fd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00100	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00103	50		 push	 eax
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	83 c1 14	 add	 ecx, 20			; 00000014H
  0010a	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0010f	03 30		 add	 esi, DWORD PTR [eax]
  00111	89 75 f4	 mov	 DWORD PTR tv141[ebp], esi
  00114	eb 07		 jmp	 SHORT $L191424
$L191423:
  00116	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$L191424:
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 55 f4	 mov	 edx, DWORD PTR tv141[ebp]
  00123	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 36   : }

  00126	5e		 pop	 esi
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012a	3b ec		 cmp	 ebp, esp
  0012c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 04 00	 ret	 4
??4CMarkup@@QAEXABV0@@Z ENDP				; CMarkup::operator=
_TEXT	ENDS
PUBLIC	?SetDoc@CMarkup@@QAE_NPBD@Z			; CMarkup::SetDoc
PUBLIC	?ResetPos@CMarkup@@QAEXXZ			; CMarkup::ResetPos
PUBLIC	?Clear@ElemPos@CMarkup@@QAEXXZ			; CMarkup::ElemPos::Clear
PUBLIC	?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize
PUBLIC	?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize
PUBLIC	?x_ParseElem@CMarkup@@IAEHH@Z			; CMarkup::x_ParseElem
EXTRN	__imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ:NEAR
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_iPos$181898 = -16					; size = 4
_bWellFormed$ = -9					; size = 1
_nStartSize$ = -8					; size = 4
_this$ = -4						; size = 4
_szDoc$ = 8						; size = 4
?SetDoc@CMarkup@@QAE_NPBD@Z PROC NEAR			; CMarkup::SetDoc
; _this$ = ecx

; 39   : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	83 ec 10	 sub	 esp, 16			; 00000010H
  00146	56		 push	 esi
  00147	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0014c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0014f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00152	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00155	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00158	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	// Reset indexes
; 41   : 	m_iPosFree = 1;

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015e	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1

; 42   : 	ResetPos();

  00165	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00168	e8 00 00 00 00	 call	 ?ResetPos@CMarkup@@QAEXXZ ; CMarkup::ResetPos

; 43   : 
; 44   : 	// Set document text
; 45   : 	if ( szDoc )

  0016d	83 7d 08 00	 cmp	 DWORD PTR _szDoc$[ebp], 0
  00171	74 1b		 je	 SHORT $L181892

; 46   : 		m_csDoc = szDoc;

  00173	8b f4		 mov	 esi, esp
  00175	8b 4d 08	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  00178	51		 push	 ecx
  00179	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00185	3b f4		 cmp	 esi, esp
  00187	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 47   : 	else

  0018c	eb 15		 jmp	 SHORT $L181893
$L181892:

; 48   : 		m_csDoc.Empty();

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00194	8b f4		 mov	 esi, esp
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L181893:

; 49   : 
; 50   : 	// Starting size of position array: 1 element per 64 bytes of document
; 51   : 	// Tight fit when parsing small doc, only 0 to 2 reallocs when parsing large doc
; 52   : 	// Start at 8 when creating new document
; 53   : 	int nStartSize = m_csDoc.GetLength() / 64 + 8;

  001a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a6	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001a9	8b f4		 mov	 esi, esp
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  001b1	3b f4		 cmp	 esi, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	99		 cdq
  001b9	83 e2 3f	 and	 edx, 63			; 0000003fH
  001bc	03 c2		 add	 eax, edx
  001be	c1 f8 06	 sar	 eax, 6
  001c1	83 c0 08	 add	 eax, 8
  001c4	89 45 f8	 mov	 DWORD PTR _nStartSize$[ebp], eax

; 54   : 	if ( m_aPos.GetSize() < nStartSize )

  001c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	83 c1 14	 add	 ecx, 20			; 00000014H
  001cd	e8 00 00 00 00	 call	 ?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize
  001d2	3b 45 f8	 cmp	 eax, DWORD PTR _nStartSize$[ebp]
  001d5	7d 11		 jge	 SHORT $L181895

; 55   : 		m_aPos.SetSize( nStartSize );

  001d7	6a ff		 push	 -1
  001d9	8b 55 f8	 mov	 edx, DWORD PTR _nStartSize$[ebp]
  001dc	52		 push	 edx
  001dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e0	83 c1 14	 add	 ecx, 20			; 00000014H
  001e3	e8 00 00 00 00	 call	 ?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize
$L181895:

; 56   : 
; 57   : 	// Parse document
; 58   : 	bool bWellFormed = false;

  001e8	c6 45 f7 00	 mov	 BYTE PTR _bWellFormed$[ebp], 0

; 59   : 	if ( m_csDoc.GetLength() )

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ef	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001f2	8b f4		 mov	 esi, esp
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  001fa	3b f4		 cmp	 esi, esp
  001fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00201	85 c0		 test	 eax, eax
  00203	74 3e		 je	 SHORT $L181897

; 60   : 	{
; 61   : 		m_aPos[0].Clear();

  00205	6a 00		 push	 0
  00207	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020a	83 c1 14	 add	 ecx, 20			; 00000014H
  0020d	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00212	8b c8		 mov	 ecx, eax
  00214	e8 00 00 00 00	 call	 ?Clear@ElemPos@CMarkup@@QAEXXZ ; CMarkup::ElemPos::Clear

; 62   : 		int iPos = x_ParseElem( 0 );

  00219	6a 00		 push	 0
  0021b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	e8 00 00 00 00	 call	 ?x_ParseElem@CMarkup@@IAEHH@Z ; CMarkup::x_ParseElem
  00223	89 45 f0	 mov	 DWORD PTR _iPos$181898[ebp], eax

; 63   : 		if ( iPos > 0 )

  00226	83 7d f0 00	 cmp	 DWORD PTR _iPos$181898[ebp], 0
  0022a	7e 17		 jle	 SHORT $L181897

; 64   : 		{
; 65   : 			m_aPos[0].iElemChild = iPos;

  0022c	6a 00		 push	 0
  0022e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00231	83 c1 14	 add	 ecx, 20			; 00000014H
  00234	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00239	8b 4d f0	 mov	 ecx, DWORD PTR _iPos$181898[ebp]
  0023c	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 66   : 			bWellFormed = true;

  0023f	c6 45 f7 01	 mov	 BYTE PTR _bWellFormed$[ebp], 1
$L181897:

; 67   : 		}
; 68   : 	}
; 69   : 
; 70   : 	// Clear indexes if parse failed or empty document
; 71   : 	if ( ! bWellFormed )

  00243	0f b6 55 f7	 movzx	 edx, BYTE PTR _bWellFormed$[ebp]
  00247	85 d2		 test	 edx, edx
  00249	75 1e		 jne	 SHORT $L181900

; 72   : 	{
; 73   : 		m_aPos[0].Clear();

  0024b	6a 00		 push	 0
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00250	83 c1 14	 add	 ecx, 20			; 00000014H
  00253	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00258	8b c8		 mov	 ecx, eax
  0025a	e8 00 00 00 00	 call	 ?Clear@ElemPos@CMarkup@@QAEXXZ ; CMarkup::ElemPos::Clear

; 74   : 		m_iPosFree = 1;

  0025f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00262	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1
$L181900:

; 75   : 	}
; 76   : 
; 77   : 	ResetPos();

  00269	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026c	e8 00 00 00 00	 call	 ?ResetPos@CMarkup@@QAEXXZ ; CMarkup::ResetPos

; 78   : 	return bWellFormed;

  00271	8a 45 f7	 mov	 al, BYTE PTR _bWellFormed$[ebp]

; 79   : };

  00274	5e		 pop	 esi
  00275	83 c4 10	 add	 esp, 16			; 00000010H
  00278	3b ec		 cmp	 ebp, esp
  0027a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027f	8b e5		 mov	 esp, ebp
  00281	5d		 pop	 ebp
  00282	c2 04 00	 ret	 4
?SetDoc@CMarkup@@QAE_NPBD@Z ENDP			; CMarkup::SetDoc
_TEXT	ENDS
PUBLIC	?x_SetPos@CMarkup@@IAEXHHH@Z			; CMarkup::x_SetPos
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.h
;	COMDAT ?ResetPos@CMarkup@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetPos@CMarkup@@QAEXXZ PROC NEAR			; CMarkup::ResetPos, COMDAT
; _this$ = ecx

; 53   : 	void ResetPos() { x_SetPos(0,0,0); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?ResetPos@CMarkup@@QAEXXZ ENDP				; CMarkup::ResetPos
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@ElemPos@CMarkup@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@ElemPos@CMarkup@@QAEXXZ PROC NEAR		; CMarkup::ElemPos::Clear, COMDAT
; _this$ = ecx

; 90   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 			nStartL=0; nStartR=0; nEndL=0; nEndR=0; nReserved=0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 92   : 			iElemParent=0; iElemChild=0; iElemNext=0;

  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 93   : 		};

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?Clear@ElemPos@CMarkup@@QAEXXZ ENDP			; CMarkup::ElemPos::Clear
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?x_SetPos@CMarkup@@IAEXHHH@Z
_TEXT	SEGMENT
tv95 = -12						; size = 4
tv82 = -8						; size = 4
_this$ = -4						; size = 4
_iPosParent$ = 8					; size = 4
_iPos$ = 12						; size = 4
_iPosChild$ = 16					; size = 4
?x_SetPos@CMarkup@@IAEXHHH@Z PROC NEAR			; CMarkup::x_SetPos, COMDAT
; _this$ = ecx

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 		m_iPosParent = iPosParent;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  00025	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 134  : 		m_iPos = iPos;

  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  0002e	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 135  : 		m_iPosChild = iPosChild;

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 55 10	 mov	 edx, DWORD PTR _iPosChild$[ebp]
  00037	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 136  : 		m_nNodeType = iPos?MNT_ELEMENT:0;

  0003a	33 c0		 xor	 eax, eax
  0003c	83 7d 0c 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  00040	0f 95 c0	 setne	 al
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 137  : 		MARKUP_SETDEBUGSTATE;

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00050	74 30		 je	 SHORT $L191429
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00058	8b f4		 mov	 esi, esp
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b f0		 mov	 esi, eax
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0006f	51		 push	 ecx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 14	 add	 ecx, 20			; 00000014H
  00076	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0007b	03 30		 add	 esi, DWORD PTR [eax]
  0007d	89 75 f8	 mov	 DWORD PTR tv82[ebp], esi
  00080	eb 07		 jmp	 SHORT $L191430
$L191429:
  00082	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L191430:
  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 45 f8	 mov	 eax, DWORD PTR tv82[ebp]
  0008f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  00099	74 30		 je	 SHORT $L191431
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b f0		 mov	 esi, eax
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000b8	50		 push	 eax
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	83 c1 14	 add	 ecx, 20			; 00000014H
  000bf	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  000c4	03 30		 add	 esi, DWORD PTR [eax]
  000c6	89 75 f4	 mov	 DWORD PTR tv95[ebp], esi
  000c9	eb 07		 jmp	 SHORT $L191432
$L191431:
  000cb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$L191432:
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 55 f4	 mov	 edx, DWORD PTR tv95[ebp]
  000d8	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 138  : 	};

  000db	5e		 pop	 esi
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	3b ec		 cmp	 ebp, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 0c 00	 ret	 12			; 0000000cH
?x_SetPos@CMarkup@@IAEXHHH@Z ENDP			; CMarkup::x_SetPos
_TEXT	ENDS
PUBLIC	?IsWellFormed@CMarkup@@QAE_NXZ			; CMarkup::IsWellFormed
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWellFormed@CMarkup@@QAE_NXZ PROC NEAR		; CMarkup::IsWellFormed
; _this$ = ecx

; 82   : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	51		 push	 ecx
  00294	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0029b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	if ( m_aPos.GetSize() && m_aPos[0].iElemChild )

  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a1	83 c1 14	 add	 ecx, 20			; 00000014H
  002a4	e8 00 00 00 00	 call	 ?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize
  002a9	85 c0		 test	 eax, eax
  002ab	74 17		 je	 SHORT $L181904
  002ad	6a 00		 push	 0
  002af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b2	83 c1 14	 add	 ecx, 20			; 00000014H
  002b5	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  002ba	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  002be	74 04		 je	 SHORT $L181904

; 84   : 		return true;

  002c0	b0 01		 mov	 al, 1
  002c2	eb 02		 jmp	 SHORT $L181903
$L181904:

; 85   : 	return false;

  002c4	32 c0		 xor	 al, al
$L181903:

; 86   : }

  002c6	83 c4 04	 add	 esp, 4
  002c9	3b ec		 cmp	 ebp, esp
  002cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d0	8b e5		 mov	 esp, ebp
  002d2	5d		 pop	 ebp
  002d3	c3		 ret	 0
?IsWellFormed@CMarkup@@QAE_NXZ ENDP			; CMarkup::IsWellFormed
_TEXT	ENDS
PUBLIC	?FindElem@CMarkup@@QAE_NPBD@Z			; CMarkup::FindElem
PUBLIC	?x_FindElem@CMarkup@@IAEHHHPBD@Z		; CMarkup::x_FindElem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_iPos$181910 = -8					; size = 4
_this$ = -4						; size = 4
_szName$ = 8						; size = 4
?FindElem@CMarkup@@QAE_NPBD@Z PROC NEAR			; CMarkup::FindElem
; _this$ = ecx

; 89   : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	83 ec 08	 sub	 esp, 8
  002e6	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  002ed	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  002f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	// Change current position only if found
; 91   : 	//
; 92   : 	if ( m_aPos.GetSize() )

  002f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002fa	83 c1 14	 add	 ecx, 20			; 00000014H
  002fd	e8 00 00 00 00	 call	 ?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize
  00302	85 c0		 test	 eax, eax
  00304	74 48		 je	 SHORT $L181909

; 93   : 	{
; 94   : 		int iPos = x_FindElem( m_iPosParent, m_iPos, szName );

  00306	8b 45 08	 mov	 eax, DWORD PTR _szName$[ebp]
  00309	50		 push	 eax
  0030a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0030d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00310	52		 push	 edx
  00311	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00314	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00317	51		 push	 ecx
  00318	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031b	e8 00 00 00 00	 call	 ?x_FindElem@CMarkup@@IAEHHHPBD@Z ; CMarkup::x_FindElem
  00320	89 45 f8	 mov	 DWORD PTR _iPos$181910[ebp], eax

; 95   : 		if ( iPos )

  00323	83 7d f8 00	 cmp	 DWORD PTR _iPos$181910[ebp], 0
  00327	74 25		 je	 SHORT $L181909

; 96   : 		{
; 97   : 			// Assign new position
; 98   : 			x_SetPos( m_aPos[iPos].iElemParent, iPos, 0 );

  00329	6a 00		 push	 0
  0032b	8b 55 f8	 mov	 edx, DWORD PTR _iPos$181910[ebp]
  0032e	52		 push	 edx
  0032f	8b 45 f8	 mov	 eax, DWORD PTR _iPos$181910[ebp]
  00332	50		 push	 eax
  00333	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00336	83 c1 14	 add	 ecx, 20			; 00000014H
  00339	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0033e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00341	51		 push	 ecx
  00342	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00345	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos

; 99   : 			return true;

  0034a	b0 01		 mov	 al, 1
  0034c	eb 02		 jmp	 SHORT $L181908
$L181909:

; 100  : 		}
; 101  : 	}
; 102  : 	return false;

  0034e	32 c0		 xor	 al, al
$L181908:

; 103  : }

  00350	83 c4 08	 add	 esp, 8
  00353	3b ec		 cmp	 ebp, esp
  00355	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0035a	8b e5		 mov	 esp, ebp
  0035c	5d		 pop	 ebp
  0035d	c2 04 00	 ret	 4
?FindElem@CMarkup@@QAE_NPBD@Z ENDP			; CMarkup::FindElem
_TEXT	ENDS
PUBLIC	?FindChildElem@CMarkup@@QAE_NPBD@Z		; CMarkup::FindChildElem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_iPos$181919 = -12					; size = 4
_iPosChild$ = -8					; size = 4
_this$ = -4						; size = 4
_szName$ = 8						; size = 4
?FindChildElem@CMarkup@@QAE_NPBD@Z PROC NEAR		; CMarkup::FindChildElem
; _this$ = ecx

; 106  : {

  00360	55		 push	 ebp
  00361	8b ec		 mov	 ebp, esp
  00363	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00366	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0036d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00374	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0037b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	// Change current child position only if found
; 108  : 	//
; 109  : 	// Shorthand: call this with no current main position
; 110  : 	// means find child under root element
; 111  : 	if ( ! m_iPos )

  0037e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00381	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00385	75 0a		 jne	 SHORT $L181916

; 112  : 		FindElem();

  00387	6a 00		 push	 0
  00389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	e8 00 00 00 00	 call	 ?FindElem@CMarkup@@QAE_NPBD@Z ; CMarkup::FindElem
$L181916:

; 113  : 
; 114  : 	int iPosChild = x_FindElem( m_iPos, m_iPosChild, szName );

  00391	8b 4d 08	 mov	 ecx, DWORD PTR _szName$[ebp]
  00394	51		 push	 ecx
  00395	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00398	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0039b	50		 push	 eax
  0039c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  003a2	52		 push	 edx
  003a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a6	e8 00 00 00 00	 call	 ?x_FindElem@CMarkup@@IAEHHHPBD@Z ; CMarkup::x_FindElem
  003ab	89 45 f8	 mov	 DWORD PTR _iPosChild$[ebp], eax

; 115  : 	if ( iPosChild )

  003ae	83 7d f8 00	 cmp	 DWORD PTR _iPosChild$[ebp], 0
  003b2	74 3c		 je	 SHORT $L181918

; 116  : 	{
; 117  : 		// Assign new position
; 118  : 		int iPos = m_aPos[iPosChild].iElemParent;

  003b4	8b 45 f8	 mov	 eax, DWORD PTR _iPosChild$[ebp]
  003b7	50		 push	 eax
  003b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bb	83 c1 14	 add	 ecx, 20			; 00000014H
  003be	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  003c3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003c6	89 4d f4	 mov	 DWORD PTR _iPos$181919[ebp], ecx

; 119  : 		x_SetPos( m_aPos[iPos].iElemParent, iPos, iPosChild );

  003c9	8b 55 f8	 mov	 edx, DWORD PTR _iPosChild$[ebp]
  003cc	52		 push	 edx
  003cd	8b 45 f4	 mov	 eax, DWORD PTR _iPos$181919[ebp]
  003d0	50		 push	 eax
  003d1	8b 4d f4	 mov	 ecx, DWORD PTR _iPos$181919[ebp]
  003d4	51		 push	 ecx
  003d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d8	83 c1 14	 add	 ecx, 20			; 00000014H
  003db	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  003e0	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  003e3	52		 push	 edx
  003e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e7	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos

; 120  : 		return true;

  003ec	b0 01		 mov	 al, 1
  003ee	eb 02		 jmp	 SHORT $L181915
$L181918:

; 121  : 	}
; 122  : 
; 123  : 	return false;

  003f0	32 c0		 xor	 al, al
$L181915:

; 124  : }

  003f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f5	3b ec		 cmp	 ebp, esp
  003f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fc	8b e5		 mov	 esp, ebp
  003fe	5d		 pop	 ebp
  003ff	c2 04 00	 ret	 4
?FindChildElem@CMarkup@@QAE_NPBD@Z ENDP			; CMarkup::FindChildElem
_TEXT	ENDS
PUBLIC	?GetTagName@CMarkup@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CMarkup::GetTagName
PUBLIC	?x_GetTagName@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CMarkup::x_GetTagName
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T191449 DD	0ffffffffH
	DD	FLAT:$L191438
	DD	00H
	DD	FLAT:$L191439
$T191444 DD	019930520H
	DD	02H
	DD	FLAT:$T191449
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -44						; size = 4
tv90 = -40						; size = 4
$T191441 = -36						; size = 4
$T191437 = -32						; size = 4
_csTagName$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetTagName@CMarkup@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC NEAR ; CMarkup::GetTagName
; _this$ = ecx

; 128  : {

  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	6a ff		 push	 -1
  00415	68 00 00 00 00	 push	 __ehhandler$?GetTagName@CMarkup@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
  0041a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00420	50		 push	 eax
  00421	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00428	83 ec 20	 sub	 esp, 32			; 00000020H
  0042b	56		 push	 esi
  0042c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00431	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  00434	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00437	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0043a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0043d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00440	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00443	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00446	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00449	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0044c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T191441[ebp], 0

; 129  : 	// Return the tag name at the current main position
; 130  : 	CString csTagName;

  00453	8b f4		 mov	 esi, esp
  00455	8d 4d e8	 lea	 ecx, DWORD PTR _csTagName$[ebp]
  00458	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0045e	3b f4		 cmp	 esi, esp
  00460	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00465	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 131  : 
; 132  : 
; 133  : 	if ( m_iPos )

  0046c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0046f	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00473	74 4c		 je	 SHORT $L181925

; 134  : 		csTagName = x_GetTagName( m_iPos );

  00475	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00478	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0047b	52		 push	 edx
  0047c	8d 45 e0	 lea	 eax, DWORD PTR $T191437[ebp]
  0047f	50		 push	 eax
  00480	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00483	e8 00 00 00 00	 call	 ?x_GetTagName@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CMarkup::x_GetTagName
  00488	89 45 d8	 mov	 DWORD PTR tv90[ebp], eax
  0048b	8b 4d d8	 mov	 ecx, DWORD PTR tv90[ebp]
  0048e	89 4d d4	 mov	 DWORD PTR tv84[ebp], ecx
  00491	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00495	8b f4		 mov	 esi, esp
  00497	8b 55 d4	 mov	 edx, DWORD PTR tv84[ebp]
  0049a	52		 push	 edx
  0049b	8d 4d e8	 lea	 ecx, DWORD PTR _csTagName$[ebp]
  0049e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  004a4	3b f4		 cmp	 esi, esp
  004a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ab	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004af	8b f4		 mov	 esi, esp
  004b1	8d 4d e0	 lea	 ecx, DWORD PTR $T191437[ebp]
  004b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  004ba	3b f4		 cmp	 esi, esp
  004bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L181925:

; 135  : 	return csTagName;

  004c1	8b f4		 mov	 esi, esp
  004c3	8d 45 e8	 lea	 eax, DWORD PTR _csTagName$[ebp]
  004c6	50		 push	 eax
  004c7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  004ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  004d0	3b f4		 cmp	 esi, esp
  004d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004d7	8b 4d dc	 mov	 ecx, DWORD PTR $T191441[ebp]
  004da	83 c9 01	 or	 ecx, 1
  004dd	89 4d dc	 mov	 DWORD PTR $T191441[ebp], ecx
  004e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004e7	8b f4		 mov	 esi, esp
  004e9	8d 4d e8	 lea	 ecx, DWORD PTR _csTagName$[ebp]
  004ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  004f2	3b f4		 cmp	 esi, esp
  004f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 136  : }

  004fc	52		 push	 edx
  004fd	8b cd		 mov	 ecx, ebp
  004ff	50		 push	 eax
  00500	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191448
  00506	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0050b	58		 pop	 eax
  0050c	5a		 pop	 edx
  0050d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00510	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00517	5e		 pop	 esi
  00518	83 c4 2c	 add	 esp, 44			; 0000002cH
  0051b	3b ec		 cmp	 ebp, esp
  0051d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00522	8b e5		 mov	 esp, ebp
  00524	5d		 pop	 ebp
  00525	c2 04 00	 ret	 4
$L191448:
  00528	01 00 00 00	 DD	 1
  0052c	00 00 00 00	 DD	 $L191447
$L191447:
  00530	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00534	04 00 00 00	 DD	 4
  00538	00 00 00 00	 DD	 $L191445
$L191445:
  0053c	63		 DB	 99			; 00000063H
  0053d	73		 DB	 115			; 00000073H
  0053e	54		 DB	 84			; 00000054H
  0053f	61		 DB	 97			; 00000061H
  00540	67		 DB	 103			; 00000067H
  00541	4e		 DB	 78			; 0000004eH
  00542	61		 DB	 97			; 00000061H
  00543	6d		 DB	 109			; 0000006dH
  00544	65		 DB	 101			; 00000065H
  00545	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191438:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR _csTagName$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191439:
  00012	8b f4		 mov	 esi, esp
  00014	8d 4d e0	 lea	 ecx, DWORD PTR $T191437[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetTagName@CMarkup@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:
  00024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191444
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetTagName@CMarkup@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CMarkup::GetTagName
PUBLIC	?IntoElem@CMarkup@@QAE_NXZ			; CMarkup::IntoElem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IntoElem@CMarkup@@QAE_NXZ PROC NEAR			; CMarkup::IntoElem
; _this$ = ecx

; 139  : {

  00550	55		 push	 ebp
  00551	8b ec		 mov	 ebp, esp
  00553	51		 push	 ecx
  00554	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0055b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 140  : 	// If there is no child position and IntoElem is called it will succeed in release 6.3
; 141  : 	// (A subsequent call to FindElem will find the first element)
; 142  : 	// The following short-hand behavior was never part of EDOM and was misleading
; 143  : 	// It would find a child element if there was no current child element position and go into it
; 144  : 	// It is removed in release 6.3, this change is NOT backwards compatible!
; 145  : 	// if ( ! m_iPosChild )
; 146  : 	//	FindChildElem();
; 147  : 
; 148  : 	if ( m_iPos && m_nNodeType == MNT_ELEMENT )

  0055e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00561	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00565	74 25		 je	 SHORT $L181930
  00567	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0056a	83 79 38 01	 cmp	 DWORD PTR [ecx+56], 1
  0056e	75 1c		 jne	 SHORT $L181930

; 149  : 	{
; 150  : 		x_SetPos( m_iPos, m_iPosChild, 0 );

  00570	6a 00		 push	 0
  00572	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00575	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00578	50		 push	 eax
  00579	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0057c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0057f	52		 push	 edx
  00580	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00583	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos

; 151  : 		return true;

  00588	b0 01		 mov	 al, 1
  0058a	eb 02		 jmp	 SHORT $L181929
$L181930:

; 152  : 	}
; 153  : 	return false;

  0058c	32 c0		 xor	 al, al
$L181929:

; 154  : }

  0058e	83 c4 04	 add	 esp, 4
  00591	3b ec		 cmp	 ebp, esp
  00593	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00598	8b e5		 mov	 esp, ebp
  0059a	5d		 pop	 ebp
  0059b	c3		 ret	 0
?IntoElem@CMarkup@@QAE_NXZ ENDP				; CMarkup::IntoElem
_TEXT	ENDS
PUBLIC	?OutOfElem@CMarkup@@QAE_NXZ			; CMarkup::OutOfElem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OutOfElem@CMarkup@@QAE_NXZ PROC NEAR			; CMarkup::OutOfElem
; _this$ = ecx

; 157  : {

  005a0	55		 push	 ebp
  005a1	8b ec		 mov	 ebp, esp
  005a3	51		 push	 ecx
  005a4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  005ab	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 	// Go to parent element
; 159  : 	if ( m_iPosParent )

  005ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b1	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  005b5	74 30		 je	 SHORT $L181934

; 160  : 	{
; 161  : 		x_SetPos( m_aPos[m_iPosParent].iElemParent, m_iPosParent, m_iPos );

  005b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005ba	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  005bd	52		 push	 edx
  005be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005c1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  005c4	51		 push	 ecx
  005c5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005c8	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  005cb	50		 push	 eax
  005cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005cf	83 c1 14	 add	 ecx, 20			; 00000014H
  005d2	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  005d7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005da	51		 push	 ecx
  005db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005de	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos

; 162  : 		return true;

  005e3	b0 01		 mov	 al, 1
  005e5	eb 02		 jmp	 SHORT $L181933
$L181934:

; 163  : 	}
; 164  : 	return false;

  005e7	32 c0		 xor	 al, al
$L181933:

; 165  : }

  005e9	83 c4 04	 add	 esp, 4
  005ec	3b ec		 cmp	 ebp, esp
  005ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005f3	8b e5		 mov	 esp, ebp
  005f5	5d		 pop	 ebp
  005f6	c3		 ret	 0
?OutOfElem@CMarkup@@QAE_NXZ ENDP			; CMarkup::OutOfElem
_TEXT	ENDS
PUBLIC	?x_GetFreePos@CMarkup@@IAEHXZ			; CMarkup::x_GetFreePos
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?x_GetFreePos@CMarkup@@IAEHXZ PROC NEAR			; CMarkup::x_GetFreePos
; _this$ = ecx

; 172  : {

  00600	55		 push	 ebp
  00601	8b ec		 mov	 ebp, esp
  00603	51		 push	 ecx
  00604	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0060b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 173  : 	//
; 174  : 	// This returns the index of the next unused ElemPos in the array
; 175  : 	//
; 176  : 	if ( m_iPosFree == m_aPos.GetSize() )

  0060e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00611	83 c1 14	 add	 ecx, 20			; 00000014H
  00614	e8 00 00 00 00	 call	 ?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize
  00619	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0061c	39 41 34	 cmp	 DWORD PTR [ecx+52], eax
  0061f	75 1f		 jne	 SHORT $L181938

; 177  : 		m_aPos.SetSize( m_iPosFree + m_iPosFree / 2 );

  00621	6a ff		 push	 -1
  00623	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00626	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00629	99		 cdq
  0062a	2b c2		 sub	 eax, edx
  0062c	d1 f8		 sar	 eax, 1
  0062e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00631	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00634	50		 push	 eax
  00635	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00638	83 c1 14	 add	 ecx, 20			; 00000014H
  0063b	e8 00 00 00 00	 call	 ?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize
$L181938:

; 178  : 	++m_iPosFree;

  00640	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00643	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00646	83 c0 01	 add	 eax, 1
  00649	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0064c	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 179  : 	return m_iPosFree - 1;

  0064f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00652	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00655	83 e8 01	 sub	 eax, 1

; 180  : }

  00658	83 c4 04	 add	 esp, 4
  0065b	3b ec		 cmp	 ebp, esp
  0065d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00662	8b e5		 mov	 esp, ebp
  00664	5d		 pop	 ebp
  00665	c3		 ret	 0
?x_GetFreePos@CMarkup@@IAEHXZ ENDP			; CMarkup::x_GetFreePos
_TEXT	ENDS
PUBLIC	?x_ReleasePos@CMarkup@@IAEHXZ			; CMarkup::x_ReleasePos
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?x_ReleasePos@CMarkup@@IAEHXZ PROC NEAR			; CMarkup::x_ReleasePos
; _this$ = ecx

; 183  : {

  00670	55		 push	 ebp
  00671	8b ec		 mov	 ebp, esp
  00673	51		 push	 ecx
  00674	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0067b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 	//
; 185  : 	// This decrements the index of the next unused ElemPos in the array
; 186  : 	// allowing the element index returned by GetFreePos() to be reused
; 187  : 	//
; 188  : 	--m_iPosFree;

  0067e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00681	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00684	83 e9 01	 sub	 ecx, 1
  00687	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0068a	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 189  : 	return 0;

  0068d	33 c0		 xor	 eax, eax

; 190  : }

  0068f	8b e5		 mov	 esp, ebp
  00691	5d		 pop	 ebp
  00692	c3		 ret	 0
?x_ReleasePos@CMarkup@@IAEHXZ ENDP			; CMarkup::x_ReleasePos
_TEXT	ENDS
PUBLIC	?x_ParseError@CMarkup@@IAEHPBD0@Z		; CMarkup::x_ParseError
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_szError$ = 8						; size = 4
_szName$ = 12						; size = 4
?x_ParseError@CMarkup@@IAEHPBD0@Z PROC NEAR		; CMarkup::x_ParseError
; _this$ = ecx

; 193  : {

  006a0	55		 push	 ebp
  006a1	8b ec		 mov	 ebp, esp
  006a3	51		 push	 ecx
  006a4	56		 push	 esi
  006a5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  006ac	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  : 	if ( szName )

  006af	83 7d 0c 00	 cmp	 DWORD PTR _szName$[ebp], 0
  006b3	74 23		 je	 SHORT $L181947

; 195  : 		m_csError.Format( szError, szName );

  006b5	8b f4		 mov	 esi, esp
  006b7	8b 45 0c	 mov	 eax, DWORD PTR _szName$[ebp]
  006ba	50		 push	 eax
  006bb	8b 4d 08	 mov	 ecx, DWORD PTR _szError$[ebp]
  006be	51		 push	 ecx
  006bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006c2	83 c2 10	 add	 edx, 16			; 00000010H
  006c5	52		 push	 edx
  006c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  006cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  006cf	3b f4		 cmp	 esi, esp
  006d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 196  : 	else

  006d6	eb 19		 jmp	 SHORT $L181948
$L181947:

; 197  : 		m_csError = szError;

  006d8	8b f4		 mov	 esi, esp
  006da	8b 45 08	 mov	 eax, DWORD PTR _szError$[ebp]
  006dd	50		 push	 eax
  006de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e1	83 c1 10	 add	 ecx, 16			; 00000010H
  006e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  006ea	3b f4		 cmp	 esi, esp
  006ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L181948:

; 198  : 	x_ReleasePos();

  006f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006f4	e8 00 00 00 00	 call	 ?x_ReleasePos@CMarkup@@IAEHXZ ; CMarkup::x_ReleasePos

; 199  : 	return -1;

  006f9	83 c8 ff	 or	 eax, -1

; 200  : }

  006fc	5e		 pop	 esi
  006fd	83 c4 04	 add	 esp, 4
  00700	3b ec		 cmp	 ebp, esp
  00702	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00707	8b e5		 mov	 esp, ebp
  00709	5d		 pop	 ebp
  0070a	c2 08 00	 ret	 8
?x_ParseError@CMarkup@@IAEHPBD0@Z ENDP			; CMarkup::x_ParseError
_TEXT	ENDS
PUBLIC	??0TokenPos@CMarkup@@QAE@PBD@Z			; CMarkup::TokenPos::TokenPos
PUBLIC	?Match@TokenPos@CMarkup@@QAE_NPBD@Z		; CMarkup::TokenPos::Match
PUBLIC	?x_FindChar@CMarkup@@KA_NPBDAAHD@Z		; CMarkup::x_FindChar
PUBLIC	?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z	; CMarkup::x_FindToken
PUBLIC	?x_GetToken@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUTokenPos@1@@Z ; CMarkup::x_GetToken
PUBLIC	?x_ParseNode@CMarkup@@IAEHAAUTokenPos@1@@Z	; CMarkup::x_ParseNode
EXTRN	__imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z:NEAR
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:NEAR
xdata$x	SEGMENT
$T191478 DD	0ffffffffH
	DD	FLAT:$L191469
	DD	00H
	DD	FLAT:$L191470
$T191472 DD	019930520H
	DD	02H
	DD	FLAT:$T191478
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv390 = -136						; size = 4
tv401 = -132						; size = 4
$T191468 = -128						; size = 4
$T191467 = -124						; size = 4
$T191466 = -120						; size = 4
$T191465 = -116						; size = 4
$T191464 = -112						; size = 4
$T191463 = -108						; size = 4
$T191462 = -104						; size = 4
$T191461 = -100						; size = 4
$T191460 = -96						; size = 4
$T191459 = -92						; size = 4
$T191458 = -88						; size = 4
$T191457 = -84						; size = 4
$T191456 = -80						; size = 4
_nTokenCount$181997 = -76				; size = 4
_iInnerPrev$181986 = -72				; size = 4
_iInner$181985 = -68					; size = 4
_cFirstChar$181966 = -61				; size = 1
_csName$ = -56						; size = 4
_token$ = -44						; size = 20
_iPos$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iPosParent$ = 8					; size = 4
?x_ParseElem@CMarkup@@IAEHH@Z PROC NEAR			; CMarkup::x_ParseElem
; _this$ = ecx

; 203  : {

  00710	55		 push	 ebp
  00711	8b ec		 mov	 ebp, esp
  00713	6a ff		 push	 -1
  00715	68 00 00 00 00	 push	 __ehhandler$?x_ParseElem@CMarkup@@IAEHH@Z
  0071a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00720	50		 push	 eax
  00721	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00728	83 ec 7c	 sub	 esp, 124		; 0000007cH
  0072b	56		 push	 esi
  0072c	57		 push	 edi
  0072d	51		 push	 ecx
  0072e	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-136]
  00734	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00739	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0073e	f3 ab		 rep stosd
  00740	59		 pop	 ecx
  00741	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 204  : 	// This is either called by SetDoc, x_AddSubDoc, or itself recursively
; 205  : 	// m_aPos[iPosParent].nEndL is where to start parsing for the child element
; 206  : 	// This returns the new position if a tag is found, otherwise zero
; 207  : 	// In all cases we need to get a new ElemPos, but release it if unused
; 208  : 	//
; 209  : 	int iPos = x_GetFreePos();

  00744	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00747	e8 00 00 00 00	 call	 ?x_GetFreePos@CMarkup@@IAEHXZ ; CMarkup::x_GetFreePos
  0074c	89 45 ec	 mov	 DWORD PTR _iPos$[ebp], eax

; 210  : 	m_aPos[iPos].nStartL = m_aPos[iPosParent].nEndL;

  0074f	8b 45 08	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  00752	50		 push	 eax
  00753	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00756	83 c1 14	 add	 ecx, 20			; 00000014H
  00759	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0075e	8b f0		 mov	 esi, eax
  00760	8b 4d ec	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00763	51		 push	 ecx
  00764	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00767	83 c1 14	 add	 ecx, 20			; 00000014H
  0076a	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0076f	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00772	89 10		 mov	 DWORD PTR [eax], edx

; 211  : 	m_aPos[iPos].iElemParent = iPosParent;

  00774	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00777	50		 push	 eax
  00778	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0077b	83 c1 14	 add	 ecx, 20			; 00000014H
  0077e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00783	8b 4d 08	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  00786	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 212  : 	m_aPos[iPos].iElemChild = 0;

  00789	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  0078c	52		 push	 edx
  0078d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00790	83 c1 14	 add	 ecx, 20			; 00000014H
  00793	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00798	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 213  : 	m_aPos[iPos].iElemNext = 0;

  0079f	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  007a2	50		 push	 eax
  007a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007a6	83 c1 14	 add	 ecx, 20			; 00000014H
  007a9	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  007ae	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 214  : 
; 215  : 	// Start Tag
; 216  : 	// A loop is used to ignore all remarks tags and special tags
; 217  : 	// i.e. <?xml version="1.0"?>, and <!-- comment here -->
; 218  : 	// So any tag beginning with ? or ! is ignored
; 219  : 	// Loop past ignored tags
; 220  : 	TokenPos token( m_csDoc );

  007b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007b8	83 c1 0c	 add	 ecx, 12			; 0000000cH
  007bb	8b f4		 mov	 esi, esp
  007bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  007c3	3b f4		 cmp	 esi, esp
  007c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007ca	50		 push	 eax
  007cb	8d 4d d4	 lea	 ecx, DWORD PTR _token$[ebp]
  007ce	e8 00 00 00 00	 call	 ??0TokenPos@CMarkup@@QAE@PBD@Z ; CMarkup::TokenPos::TokenPos

; 221  : 	token.nNext = m_aPos[iPosParent].nEndL;

  007d3	8b 4d 08	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  007d6	51		 push	 ecx
  007d7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007da	83 c1 14	 add	 ecx, 20			; 00000014H
  007dd	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  007e2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  007e5	89 55 dc	 mov	 DWORD PTR _token$[ebp+8], edx

; 222  : 	CString csName;

  007e8	8b f4		 mov	 esi, esp
  007ea	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  007ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  007f3	3b f4		 cmp	 esi, esp
  007f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007fa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$L181957:

; 223  : 	while ( csName.IsEmpty() )

  00801	8b f4		 mov	 esi, esp
  00803	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00806	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  0080c	3b f4		 cmp	 esi, esp
  0080e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00813	0f b6 c0	 movzx	 eax, al
  00816	85 c0		 test	 eax, eax
  00818	0f 84 9a 02 00
	00		 je	 $L181958

; 224  : 	{
; 225  : 		// Look for left angle bracket of start tag
; 226  : 		m_aPos[iPos].nStartL = token.nNext;

  0081e	8b 4d ec	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00821	51		 push	 ecx
  00822	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00825	83 c1 14	 add	 ecx, 20			; 00000014H
  00828	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0082d	8b 55 dc	 mov	 edx, DWORD PTR _token$[ebp+8]
  00830	89 10		 mov	 DWORD PTR [eax], edx

; 227  : 		if ( ! x_FindChar( token.szDoc, m_aPos[iPos].nStartL, _T('<') ) )

  00832	6a 3c		 push	 60			; 0000003cH
  00834	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00837	50		 push	 eax
  00838	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0083b	83 c1 14	 add	 ecx, 20			; 00000014H
  0083e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00843	50		 push	 eax
  00844	8b 4d e0	 mov	 ecx, DWORD PTR _token$[ebp+12]
  00847	51		 push	 ecx
  00848	e8 00 00 00 00	 call	 ?x_FindChar@CMarkup@@KA_NPBDAAHD@Z ; CMarkup::x_FindChar
  0084d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00850	0f b6 d0	 movzx	 edx, al
  00853	85 d2		 test	 edx, edx
  00855	75 33		 jne	 SHORT $L181959

; 228  : 			return x_ParseError( _T("Element tag not found") );

  00857	6a 00		 push	 0
  00859	68 00 00 00 00	 push	 OFFSET FLAT:$SG181961
  0085e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00861	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00866	89 45 b0	 mov	 DWORD PTR $T191456[ebp], eax
  00869	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00870	8b f4		 mov	 esi, esp
  00872	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00875	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0087b	3b f4		 cmp	 esi, esp
  0087d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00882	8b 45 b0	 mov	 eax, DWORD PTR $T191456[ebp]
  00885	e9 db 05 00 00	 jmp	 $L181952
$L181959:

; 229  : 
; 230  : 		// Set parent's End tag to start looking from here (or later)
; 231  : 		m_aPos[iPosParent].nEndL = m_aPos[iPos].nStartL;

  0088a	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  0088d	50		 push	 eax
  0088e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00891	83 c1 14	 add	 ecx, 20			; 00000014H
  00894	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00899	8b f0		 mov	 esi, eax
  0089b	8b 4d 08	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  0089e	51		 push	 ecx
  0089f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  008a2	83 c1 14	 add	 ecx, 20			; 00000014H
  008a5	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  008aa	8b 16		 mov	 edx, DWORD PTR [esi]
  008ac	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 232  : 
; 233  : 		// Determine whether this is an element, or bypass other type of node
; 234  : 		token.nNext = m_aPos[iPos].nStartL + 1;

  008af	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  008b2	50		 push	 eax
  008b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  008b6	83 c1 14	 add	 ecx, 20			; 00000014H
  008b9	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  008be	8b 08		 mov	 ecx, DWORD PTR [eax]
  008c0	83 c1 01	 add	 ecx, 1
  008c3	89 4d dc	 mov	 DWORD PTR _token$[ebp+8], ecx

; 235  : 		if ( x_FindToken( token ) )

  008c6	8d 55 d4	 lea	 edx, DWORD PTR _token$[ebp]
  008c9	52		 push	 edx
  008ca	e8 00 00 00 00	 call	 ?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ; CMarkup::x_FindToken
  008cf	83 c4 04	 add	 esp, 4
  008d2	0f b6 c0	 movzx	 eax, al
  008d5	85 c0		 test	 eax, eax
  008d7	0f 84 a3 01 00
	00		 je	 $L181962

; 236  : 		{
; 237  : 			if ( token.bIsString )

  008dd	0f b6 4d e4	 movzx	 ecx, BYTE PTR _token$[ebp+16]
  008e1	85 c9		 test	 ecx, ecx
  008e3	74 33		 je	 SHORT $L181963

; 238  : 				return x_ParseError( _T("Tag starts with quote") );

  008e5	6a 00		 push	 0
  008e7	68 00 00 00 00	 push	 OFFSET FLAT:$SG181965
  008ec	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  008ef	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  008f4	89 45 ac	 mov	 DWORD PTR $T191457[ebp], eax
  008f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  008fe	8b f4		 mov	 esi, esp
  00900	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00903	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00909	3b f4		 cmp	 esi, esp
  0090b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00910	8b 45 ac	 mov	 eax, DWORD PTR $T191457[ebp]
  00913	e9 4d 05 00 00	 jmp	 $L181952
$L181963:

; 239  : 			_TCHAR cFirstChar = m_csDoc[token.nL];

  00918	8b f4		 mov	 esi, esp
  0091a	8b 55 d4	 mov	 edx, DWORD PTR _token$[ebp]
  0091d	52		 push	 edx
  0091e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00921	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00924	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  0092a	3b f4		 cmp	 esi, esp
  0092c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00931	88 45 c3	 mov	 BYTE PTR _cFirstChar$181966[ebp], al

; 240  : 			if ( cFirstChar == _T('?') || cFirstChar == _T('!') )

  00934	0f be 45 c3	 movsx	 eax, BYTE PTR _cFirstChar$181966[ebp]
  00938	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  0093b	74 09		 je	 SHORT $L181968
  0093d	0f be 4d c3	 movsx	 ecx, BYTE PTR _cFirstChar$181966[ebp]
  00941	83 f9 21	 cmp	 ecx, 33			; 00000021H
  00944	75 5c		 jne	 SHORT $L181967
$L181968:

; 241  : 			{
; 242  : 				token.nNext = m_aPos[iPos].nStartL;

  00946	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00949	52		 push	 edx
  0094a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0094d	83 c1 14	 add	 ecx, 20			; 00000014H
  00950	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00955	8b 00		 mov	 eax, DWORD PTR [eax]
  00957	89 45 dc	 mov	 DWORD PTR _token$[ebp+8], eax

; 243  : 				if ( ! x_ParseNode(token) )

  0095a	8d 4d d4	 lea	 ecx, DWORD PTR _token$[ebp]
  0095d	51		 push	 ecx
  0095e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00961	e8 00 00 00 00	 call	 ?x_ParseNode@CMarkup@@IAEHAAUTokenPos@1@@Z ; CMarkup::x_ParseNode
  00966	85 c0		 test	 eax, eax
  00968	75 33		 jne	 SHORT $L181969

; 244  : 					return x_ParseError( _T("Invalid node") );

  0096a	6a 00		 push	 0
  0096c	68 00 00 00 00	 push	 OFFSET FLAT:$SG181971
  00971	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00974	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00979	89 45 a8	 mov	 DWORD PTR $T191458[ebp], eax
  0097c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00983	8b f4		 mov	 esi, esp
  00985	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00988	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0098e	3b f4		 cmp	 esi, esp
  00990	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00995	8b 45 a8	 mov	 eax, DWORD PTR $T191458[ebp]
  00998	e9 c8 04 00 00	 jmp	 $L181952
$L181969:

; 245  : 			}
; 246  : 			else if ( cFirstChar != _T('/') )

  0099d	e9 dc 00 00 00	 jmp	 $L181972
$L181967:
  009a2	0f be 55 c3	 movsx	 edx, BYTE PTR _cFirstChar$181966[ebp]
  009a6	83 fa 2f	 cmp	 edx, 47			; 0000002fH
  009a9	0f 84 a3 00 00
	00		 je	 $L181973

; 247  : 			{
; 248  : 				csName = x_GetToken( token );

  009af	8d 45 d4	 lea	 eax, DWORD PTR _token$[ebp]
  009b2	50		 push	 eax
  009b3	8d 4d a4	 lea	 ecx, DWORD PTR $T191459[ebp]
  009b6	51		 push	 ecx
  009b7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  009ba	e8 00 00 00 00	 call	 ?x_GetToken@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUTokenPos@1@@Z ; CMarkup::x_GetToken
  009bf	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv401[ebp], eax
  009c5	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv401[ebp]
  009cb	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv390[ebp], edx
  009d1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  009d5	8b f4		 mov	 esi, esp
  009d7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv390[ebp]
  009dd	50		 push	 eax
  009de	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  009e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  009e7	3b f4		 cmp	 esi, esp
  009e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009ee	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  009f2	8b f4		 mov	 esi, esp
  009f4	8d 4d a4	 lea	 ecx, DWORD PTR $T191459[ebp]
  009f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  009fd	3b f4		 cmp	 esi, esp
  009ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 249  : 				// Look for end of tag
; 250  : 				if ( ! x_FindChar(token.szDoc, token.nNext, _T('>')) )

  00a04	6a 3e		 push	 62			; 0000003eH
  00a06	8d 4d dc	 lea	 ecx, DWORD PTR _token$[ebp+8]
  00a09	51		 push	 ecx
  00a0a	8b 55 e0	 mov	 edx, DWORD PTR _token$[ebp+12]
  00a0d	52		 push	 edx
  00a0e	e8 00 00 00 00	 call	 ?x_FindChar@CMarkup@@KA_NPBDAAHD@Z ; CMarkup::x_FindChar
  00a13	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a16	0f b6 c0	 movzx	 eax, al
  00a19	85 c0		 test	 eax, eax
  00a1b	75 33		 jne	 SHORT $L181975

; 251  : 					return x_ParseError( _T("End of tag not found") );

  00a1d	6a 00		 push	 0
  00a1f	68 00 00 00 00	 push	 OFFSET FLAT:$SG181977
  00a24	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a27	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00a2c	89 45 a0	 mov	 DWORD PTR $T191460[ebp], eax
  00a2f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a36	8b f4		 mov	 esi, esp
  00a38	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00a3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00a41	3b f4		 cmp	 esi, esp
  00a43	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a48	8b 45 a0	 mov	 eax, DWORD PTR $T191460[ebp]
  00a4b	e9 15 04 00 00	 jmp	 $L181952
$L181975:

; 252  : 			}
; 253  : 			else

  00a50	eb 2c		 jmp	 SHORT $L181972
$L181973:

; 254  : 				return x_ReleasePos(); // probably end tag of parent

  00a52	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a55	e8 00 00 00 00	 call	 ?x_ReleasePos@CMarkup@@IAEHXZ ; CMarkup::x_ReleasePos
  00a5a	89 45 9c	 mov	 DWORD PTR $T191461[ebp], eax
  00a5d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a64	8b f4		 mov	 esi, esp
  00a66	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00a69	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00a6f	3b f4		 cmp	 esi, esp
  00a71	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a76	8b 45 9c	 mov	 eax, DWORD PTR $T191461[ebp]
  00a79	e9 e7 03 00 00	 jmp	 $L181952
$L181972:

; 255  : 		}
; 256  : 		else

  00a7e	eb 33		 jmp	 SHORT $L181980
$L181962:

; 257  : 			return x_ParseError( _T("Abrupt end within tag") );

  00a80	6a 00		 push	 0
  00a82	68 00 00 00 00	 push	 OFFSET FLAT:$SG181982
  00a87	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a8a	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00a8f	89 45 98	 mov	 DWORD PTR $T191462[ebp], eax
  00a92	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a99	8b f4		 mov	 esi, esp
  00a9b	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00a9e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00aa4	3b f4		 cmp	 esi, esp
  00aa6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aab	8b 45 98	 mov	 eax, DWORD PTR $T191462[ebp]
  00aae	e9 b2 03 00 00	 jmp	 $L181952
$L181980:

; 258  : 	}

  00ab3	e9 49 fd ff ff	 jmp	 $L181957
$L181958:

; 259  : 	m_aPos[iPos].nStartR = token.nNext;

  00ab8	8b 4d ec	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00abb	51		 push	 ecx
  00abc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00abf	83 c1 14	 add	 ecx, 20			; 00000014H
  00ac2	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00ac7	8b 55 dc	 mov	 edx, DWORD PTR _token$[ebp+8]
  00aca	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 260  : 
; 261  : 	// Is ending mark within start tag, i.e. empty element?
; 262  : 	if ( m_csDoc[m_aPos[iPos].nStartR-1] == _T('/') )

  00acd	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00ad0	50		 push	 eax
  00ad1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad4	83 c1 14	 add	 ecx, 20			; 00000014H
  00ad7	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00adc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00adf	83 e9 01	 sub	 ecx, 1
  00ae2	8b f4		 mov	 esi, esp
  00ae4	51		 push	 ecx
  00ae5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ae8	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00aeb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  00af1	3b f4		 cmp	 esi, esp
  00af3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00af8	0f be d0	 movsx	 edx, al
  00afb	83 fa 2f	 cmp	 edx, 47			; 0000002fH
  00afe	75 52		 jne	 SHORT $L181983

; 263  : 	{
; 264  : 		// Empty element
; 265  : 		// Close tag left is set to ending mark, and right to open tag right
; 266  : 		m_aPos[iPos].nEndL = m_aPos[iPos].nStartR-1;

  00b00	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00b03	50		 push	 eax
  00b04	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b07	83 c1 14	 add	 ecx, 20			; 00000014H
  00b0a	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00b0f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00b12	83 ee 01	 sub	 esi, 1
  00b15	8b 4d ec	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00b18	51		 push	 ecx
  00b19	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1c	83 c1 14	 add	 ecx, 20			; 00000014H
  00b1f	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00b24	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 267  : 		m_aPos[iPos].nEndR = m_aPos[iPos].nStartR;

  00b27	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00b2a	52		 push	 edx
  00b2b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2e	83 c1 14	 add	 ecx, 20			; 00000014H
  00b31	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00b36	8b f0		 mov	 esi, eax
  00b38	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00b3b	50		 push	 eax
  00b3c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b3f	83 c1 14	 add	 ecx, 20			; 00000014H
  00b42	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00b47	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00b4a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 268  : 	}
; 269  : 	else // look for end tag

  00b4d	e9 f1 02 00 00	 jmp	 $L181984
$L181983:

; 270  : 	{
; 271  : 		// Element probably has contents
; 272  : 		// Determine where to start looking for left angle bracket of end tag
; 273  : 		// This is done by recursively parsing the contents of this element
; 274  : 		int iInner, iInnerPrev = 0;

  00b52	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iInnerPrev$181986[ebp], 0

; 275  : 		m_aPos[iPos].nEndL = m_aPos[iPos].nStartR + 1;

  00b59	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00b5c	52		 push	 edx
  00b5d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b60	83 c1 14	 add	 ecx, 20			; 00000014H
  00b63	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00b68	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00b6b	83 c6 01	 add	 esi, 1
  00b6e	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00b71	50		 push	 eax
  00b72	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b75	83 c1 14	 add	 ecx, 20			; 00000014H
  00b78	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00b7d	89 70 08	 mov	 DWORD PTR [eax+8], esi
$L181988:

; 276  : 		while ( (iInner = x_ParseElem( iPos )) > 0 )

  00b80	8b 4d ec	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00b83	51		 push	 ecx
  00b84	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b87	e8 00 00 00 00	 call	 ?x_ParseElem@CMarkup@@IAEHH@Z ; CMarkup::x_ParseElem
  00b8c	89 45 bc	 mov	 DWORD PTR _iInner$181985[ebp], eax
  00b8f	83 7d bc 00	 cmp	 DWORD PTR _iInner$181985[ebp], 0
  00b93	7e 61		 jle	 SHORT $L181989

; 277  : 		{
; 278  : 			// Set links to iInner
; 279  : 			if ( iInnerPrev )

  00b95	83 7d b8 00	 cmp	 DWORD PTR _iInnerPrev$181986[ebp], 0
  00b99	74 17		 je	 SHORT $L181990

; 280  : 				m_aPos[iInnerPrev].iElemNext = iInner;

  00b9b	8b 55 b8	 mov	 edx, DWORD PTR _iInnerPrev$181986[ebp]
  00b9e	52		 push	 edx
  00b9f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba2	83 c1 14	 add	 ecx, 20			; 00000014H
  00ba5	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00baa	8b 4d bc	 mov	 ecx, DWORD PTR _iInner$181985[ebp]
  00bad	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 281  : 			else

  00bb0	eb 15		 jmp	 SHORT $L181991
$L181990:

; 282  : 				m_aPos[iPos].iElemChild = iInner;

  00bb2	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00bb5	52		 push	 edx
  00bb6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb9	83 c1 14	 add	 ecx, 20			; 00000014H
  00bbc	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00bc1	8b 4d bc	 mov	 ecx, DWORD PTR _iInner$181985[ebp]
  00bc4	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$L181991:

; 283  : 			iInnerPrev = iInner;

  00bc7	8b 55 bc	 mov	 edx, DWORD PTR _iInner$181985[ebp]
  00bca	89 55 b8	 mov	 DWORD PTR _iInnerPrev$181986[ebp], edx

; 284  : 
; 285  : 			// Set offset to reflect child
; 286  : 			m_aPos[iPos].nEndL = m_aPos[iInner].nEndR + 1;

  00bcd	8b 45 bc	 mov	 eax, DWORD PTR _iInner$181985[ebp]
  00bd0	50		 push	 eax
  00bd1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd4	83 c1 14	 add	 ecx, 20			; 00000014H
  00bd7	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00bdc	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00bdf	83 c6 01	 add	 esi, 1
  00be2	8b 4d ec	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00be5	51		 push	 ecx
  00be6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00be9	83 c1 14	 add	 ecx, 20			; 00000014H
  00bec	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00bf1	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 287  : 		}

  00bf4	eb 8a		 jmp	 SHORT $L181988
$L181989:

; 288  : 		if ( iInner == -1 )

  00bf6	83 7d bc ff	 cmp	 DWORD PTR _iInner$181985[ebp], -1
  00bfa	75 28		 jne	 SHORT $L181992

; 289  : 			return -1;

  00bfc	c7 45 94 ff ff
	ff ff		 mov	 DWORD PTR $T191463[ebp], -1
  00c03	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00c0a	8b f4		 mov	 esi, esp
  00c0c	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00c0f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00c15	3b f4		 cmp	 esi, esp
  00c17	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c1c	8b 45 94	 mov	 eax, DWORD PTR $T191463[ebp]
  00c1f	e9 41 02 00 00	 jmp	 $L181952
$L181992:

; 290  : 
; 291  : 		// Look for left angle bracket of end tag
; 292  : 		if ( ! x_FindChar( token.szDoc, m_aPos[iPos].nEndL, _T('<') ) )

  00c24	6a 3c		 push	 60			; 0000003cH
  00c26	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00c29	52		 push	 edx
  00c2a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2d	83 c1 14	 add	 ecx, 20			; 00000014H
  00c30	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00c35	83 c0 08	 add	 eax, 8
  00c38	50		 push	 eax
  00c39	8b 45 e0	 mov	 eax, DWORD PTR _token$[ebp+12]
  00c3c	50		 push	 eax
  00c3d	e8 00 00 00 00	 call	 ?x_FindChar@CMarkup@@KA_NPBDAAHD@Z ; CMarkup::x_FindChar
  00c42	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c45	0f b6 c8	 movzx	 ecx, al
  00c48	85 c9		 test	 ecx, ecx
  00c4a	75 44		 jne	 SHORT $L181994

; 293  : 			return x_ParseError( _T("End tag of %s element not found"), csName );

  00c4c	8b f4		 mov	 esi, esp
  00c4e	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00c51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00c57	3b f4		 cmp	 esi, esp
  00c59	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c5e	50		 push	 eax
  00c5f	68 00 00 00 00	 push	 OFFSET FLAT:$SG181996
  00c64	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c67	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00c6c	89 45 90	 mov	 DWORD PTR $T191464[ebp], eax
  00c6f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00c76	8b f4		 mov	 esi, esp
  00c78	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00c7b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00c81	3b f4		 cmp	 esi, esp
  00c83	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c88	8b 45 90	 mov	 eax, DWORD PTR $T191464[ebp]
  00c8b	e9 d5 01 00 00	 jmp	 $L181952
$L181994:

; 294  : 
; 295  : 		// Look through tokens of end tag
; 296  : 		token.nNext = m_aPos[iPos].nEndL + 1;

  00c90	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00c93	52		 push	 edx
  00c94	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c97	83 c1 14	 add	 ecx, 20			; 00000014H
  00c9a	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00c9f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00ca2	83 c0 01	 add	 eax, 1
  00ca5	89 45 dc	 mov	 DWORD PTR _token$[ebp+8], eax

; 297  : 		int nTokenCount = 0;

  00ca8	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _nTokenCount$181997[ebp], 0
$L181999:

; 298  : 		while ( x_FindToken( token ) )

  00caf	8d 4d d4	 lea	 ecx, DWORD PTR _token$[ebp]
  00cb2	51		 push	 ecx
  00cb3	e8 00 00 00 00	 call	 ?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ; CMarkup::x_FindToken
  00cb8	83 c4 04	 add	 esp, 4
  00cbb	0f b6 d0	 movzx	 edx, al
  00cbe	85 d2		 test	 edx, edx
  00cc0	0f 84 14 01 00
	00		 je	 $L182000

; 299  : 		{
; 300  : 			++nTokenCount;

  00cc6	8b 45 b4	 mov	 eax, DWORD PTR _nTokenCount$181997[ebp]
  00cc9	83 c0 01	 add	 eax, 1
  00ccc	89 45 b4	 mov	 DWORD PTR _nTokenCount$181997[ebp], eax

; 301  : 			if ( ! token.bIsString )

  00ccf	0f b6 4d e4	 movzx	 ecx, BYTE PTR _token$[ebp+16]
  00cd3	85 c9		 test	 ecx, ecx
  00cd5	0f 85 fa 00 00
	00		 jne	 $L182001

; 302  : 			{
; 303  : 				// Is first token not an end slash mark?
; 304  : 				if ( nTokenCount == 1 && m_csDoc[token.nL] != _T('/') )

  00cdb	83 7d b4 01	 cmp	 DWORD PTR _nTokenCount$181997[ebp], 1
  00cdf	75 65		 jne	 SHORT $L182002
  00ce1	8b f4		 mov	 esi, esp
  00ce3	8b 55 d4	 mov	 edx, DWORD PTR _token$[ebp]
  00ce6	52		 push	 edx
  00ce7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00cea	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00ced	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  00cf3	3b f4		 cmp	 esi, esp
  00cf5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cfa	0f be c0	 movsx	 eax, al
  00cfd	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00d00	74 44		 je	 SHORT $L182002

; 305  : 					return x_ParseError( _T("Expecting end tag of element %s"), csName );

  00d02	8b f4		 mov	 esi, esp
  00d04	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00d07	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00d0d	3b f4		 cmp	 esi, esp
  00d0f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d14	50		 push	 eax
  00d15	68 00 00 00 00	 push	 OFFSET FLAT:$SG182004
  00d1a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d1d	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00d22	89 45 8c	 mov	 DWORD PTR $T191465[ebp], eax
  00d25	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d2c	8b f4		 mov	 esi, esp
  00d2e	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00d31	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00d37	3b f4		 cmp	 esi, esp
  00d39	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d3e	8b 45 8c	 mov	 eax, DWORD PTR $T191465[ebp]
  00d41	e9 1f 01 00 00	 jmp	 $L181952
$L182002:

; 306  : 
; 307  : 				else if ( nTokenCount == 2 && ! token.Match(csName) )

  00d46	83 7d b4 02	 cmp	 DWORD PTR _nTokenCount$181997[ebp], 2
  00d4a	75 66		 jne	 SHORT $L182006
  00d4c	8b f4		 mov	 esi, esp
  00d4e	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00d51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00d57	3b f4		 cmp	 esi, esp
  00d59	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d5e	50		 push	 eax
  00d5f	8d 4d d4	 lea	 ecx, DWORD PTR _token$[ebp]
  00d62	e8 00 00 00 00	 call	 ?Match@TokenPos@CMarkup@@QAE_NPBD@Z ; CMarkup::TokenPos::Match
  00d67	0f b6 c8	 movzx	 ecx, al
  00d6a	85 c9		 test	 ecx, ecx
  00d6c	75 44		 jne	 SHORT $L182006

; 308  : 					return x_ParseError( _T("End tag does not correspond to %s"), csName );

  00d6e	8b f4		 mov	 esi, esp
  00d70	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00d73	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00d79	3b f4		 cmp	 esi, esp
  00d7b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d80	50		 push	 eax
  00d81	68 00 00 00 00	 push	 OFFSET FLAT:$SG182008
  00d86	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d89	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00d8e	89 45 88	 mov	 DWORD PTR $T191466[ebp], eax
  00d91	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d98	8b f4		 mov	 esi, esp
  00d9a	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00d9d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00da3	3b f4		 cmp	 esi, esp
  00da5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00daa	8b 45 88	 mov	 eax, DWORD PTR $T191466[ebp]
  00dad	e9 b3 00 00 00	 jmp	 $L181952
$L182006:

; 309  : 
; 310  : 				// Else is it a right angle bracket?
; 311  : 				else if ( m_csDoc[token.nL] == _T('>') )

  00db2	8b f4		 mov	 esi, esp
  00db4	8b 55 d4	 mov	 edx, DWORD PTR _token$[ebp]
  00db7	52		 push	 edx
  00db8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00dbb	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00dbe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  00dc4	3b f4		 cmp	 esi, esp
  00dc6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dcb	0f be c0	 movsx	 eax, al
  00dce	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  00dd1	75 02		 jne	 SHORT $L182001

; 312  : 					break;

  00dd3	eb 05		 jmp	 SHORT $L182000
$L182001:

; 313  : 			}
; 314  : 		}

  00dd5	e9 d5 fe ff ff	 jmp	 $L181999
$L182000:

; 315  : 
; 316  : 		// Was a right angle bracket not found?
; 317  : 		if ( ! token.szDoc[token.nL] || nTokenCount < 2 )

  00dda	8b 4d e0	 mov	 ecx, DWORD PTR _token$[ebp+12]
  00ddd	03 4d d4	 add	 ecx, DWORD PTR _token$[ebp]
  00de0	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00de3	85 d2		 test	 edx, edx
  00de5	74 06		 je	 SHORT $L182012
  00de7	83 7d b4 02	 cmp	 DWORD PTR _nTokenCount$181997[ebp], 2
  00deb	7d 41		 jge	 SHORT $L182011
$L182012:

; 318  : 			return x_ParseError( _T("End tag not completed for element %s"), csName );

  00ded	8b f4		 mov	 esi, esp
  00def	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00df2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00df8	3b f4		 cmp	 esi, esp
  00dfa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dff	50		 push	 eax
  00e00	68 00 00 00 00	 push	 OFFSET FLAT:$SG182014
  00e05	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e08	e8 00 00 00 00	 call	 ?x_ParseError@CMarkup@@IAEHPBD0@Z ; CMarkup::x_ParseError
  00e0d	89 45 84	 mov	 DWORD PTR $T191467[ebp], eax
  00e10	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00e17	8b f4		 mov	 esi, esp
  00e19	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00e1c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00e22	3b f4		 cmp	 esi, esp
  00e24	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e29	8b 45 84	 mov	 eax, DWORD PTR $T191467[ebp]
  00e2c	eb 37		 jmp	 SHORT $L181952
$L182011:

; 319  : 		m_aPos[iPos].nEndR = token.nL;

  00e2e	8b 45 ec	 mov	 eax, DWORD PTR _iPos$[ebp]
  00e31	50		 push	 eax
  00e32	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e35	83 c1 14	 add	 ecx, 20			; 00000014H
  00e38	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  00e3d	8b 4d d4	 mov	 ecx, DWORD PTR _token$[ebp]
  00e40	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L181984:

; 320  : 	}
; 321  : 
; 322  : 	// Successfully parsed element (and contained elements)
; 323  : 	return iPos;

  00e43	8b 55 ec	 mov	 edx, DWORD PTR _iPos$[ebp]
  00e46	89 55 80	 mov	 DWORD PTR $T191468[ebp], edx
  00e49	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00e50	8b f4		 mov	 esi, esp
  00e52	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00e55	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00e5b	3b f4		 cmp	 esi, esp
  00e5d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e62	8b 45 80	 mov	 eax, DWORD PTR $T191468[ebp]
$L181952:

; 324  : }

  00e65	52		 push	 edx
  00e66	8b cd		 mov	 ecx, ebp
  00e68	50		 push	 eax
  00e69	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191477
  00e6f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00e74	58		 pop	 eax
  00e75	5a		 pop	 edx
  00e76	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00e79	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00e80	5f		 pop	 edi
  00e81	5e		 pop	 esi
  00e82	81 c4 88 00 00
	00		 add	 esp, 136		; 00000088H
  00e88	3b ec		 cmp	 ebp, esp
  00e8a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e8f	8b e5		 mov	 esp, ebp
  00e91	5d		 pop	 ebp
  00e92	c2 04 00	 ret	 4
$L191477:
  00e95	02 00 00 00	 DD	 2
  00e99	00 00 00 00	 DD	 $L191476
$L191476:
  00e9d	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00ea1	14 00 00 00	 DD	 20			; 00000014H
  00ea5	00 00 00 00	 DD	 $L191473
  00ea9	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00ead	04 00 00 00	 DD	 4
  00eb1	00 00 00 00	 DD	 $L191474
$L191474:
  00eb5	63		 DB	 99			; 00000063H
  00eb6	73		 DB	 115			; 00000073H
  00eb7	4e		 DB	 78			; 0000004eH
  00eb8	61		 DB	 97			; 00000061H
  00eb9	6d		 DB	 109			; 0000006dH
  00eba	65		 DB	 101			; 00000065H
  00ebb	00		 DB	 0
$L191473:
  00ebc	74		 DB	 116			; 00000074H
  00ebd	6f		 DB	 111			; 0000006fH
  00ebe	6b		 DB	 107			; 0000006bH
  00ebf	65		 DB	 101			; 00000065H
  00ec0	6e		 DB	 110			; 0000006eH
  00ec1	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191469:
  0002e	8b f4		 mov	 esi, esp
  00030	8d 4d c8	 lea	 ecx, DWORD PTR _csName$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00039	3b f4		 cmp	 esi, esp
  0003b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191470:
  00040	8b f4		 mov	 esi, esp
  00042	8d 4d a4	 lea	 ecx, DWORD PTR $T191459[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0004b	3b f4		 cmp	 esi, esp
  0004d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?x_ParseElem@CMarkup@@IAEHH@Z:
  00052	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191472
  00057	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?x_ParseElem@CMarkup@@IAEHH@Z ENDP			; CMarkup::x_ParseElem
PUBLIC	?Clear@TokenPos@CMarkup@@QAEXXZ			; CMarkup::TokenPos::Clear
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.h
;	COMDAT ??0TokenPos@CMarkup@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
??0TokenPos@CMarkup@@QAE@PBD@Z PROC NEAR		; CMarkup::TokenPos::TokenPos, COMDAT
; _this$ = ecx

; 115  : 		TokenPos( LPCTSTR sz ) { Clear(); szDoc = sz; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Clear@TokenPos@CMarkup@@QAEXXZ ; CMarkup::TokenPos::Clear
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _sz$[ebp]
  0001c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0TokenPos@CMarkup@@QAE@PBD@Z ENDP			; CMarkup::TokenPos::TokenPos
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@TokenPos@CMarkup@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@TokenPos@CMarkup@@QAEXXZ PROC NEAR		; CMarkup::TokenPos::Clear, COMDAT
; _this$ = ecx

; 117  : 		void Clear() { nL=0; nR=-1; nNext=0; bIsString=false; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?Clear@TokenPos@CMarkup@@QAEXXZ ENDP			; CMarkup::TokenPos::Clear
_TEXT	ENDS
PUBLIC	__tcschr
PUBLIC	__tcsnccmp
PUBLIC	??_C@_04JAADICNI@?5?$DN?1?$FL?$AA@		; `string'
;	COMDAT ??_C@_04JAADICNI@?5?$DN?1?$FL?$AA@
CONST	SEGMENT
??_C@_04JAADICNI@?5?$DN?1?$FL?$AA@ DB ' =/[', 00H	; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?Match@TokenPos@CMarkup@@QAE_NPBD@Z
_TEXT	SEGMENT
tv83 = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_szName$ = 8						; size = 4
?Match@TokenPos@CMarkup@@QAE_NPBD@Z PROC NEAR		; CMarkup::TokenPos::Match, COMDAT
; _this$ = ecx

; 119  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 			int nLen = nR - nL + 1;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00027	2b 11		 sub	 edx, DWORD PTR [ecx]
  00029	83 c2 01	 add	 edx, 1
  0002c	89 55 f8	 mov	 DWORD PTR _nLen$[ebp], edx

; 121  : 			return ( (_tcsnccmp( &szDoc[nL], szName, nLen ) == 0)
; 122  : 				&& ( szName[nLen] == _T('\0') || _tcschr(_T(" =/["),szName[nLen]) ) );

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _szName$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	03 01		 add	 eax, DWORD PTR [ecx]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 __tcsnccmp
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	85 c0		 test	 eax, eax
  0004d	75 31		 jne	 SHORT $L191483
  0004f	8b 55 08	 mov	 edx, DWORD PTR _szName$[ebp]
  00052	03 55 f8	 add	 edx, DWORD PTR _nLen$[ebp]
  00055	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00058	85 c0		 test	 eax, eax
  0005a	74 1b		 je	 SHORT $L191482
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _szName$[ebp]
  0005f	03 4d f8	 add	 ecx, DWORD PTR _nLen$[ebp]
  00062	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00065	52		 push	 edx
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JAADICNI@?5?$DN?1?$FL?$AA@
  0006b	e8 00 00 00 00	 call	 __tcschr
  00070	83 c4 08	 add	 esp, 8
  00073	85 c0		 test	 eax, eax
  00075	74 09		 je	 SHORT $L191483
$L191482:
  00077	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007e	eb 07		 jmp	 SHORT $L191484
$L191483:
  00080	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$L191484:
  00087	8a 45 f4	 mov	 al, BYTE PTR tv83[ebp]

; 123  : 		};

  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?Match@TokenPos@CMarkup@@QAE_NPBD@Z ENDP		; CMarkup::TokenPos::Match
_TEXT	ENDS
EXTRN	__imp___mbschr:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcschr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcschr PROC NEAR					; COMDAT

; 840  : __inline _PC _tcschr(_CPC _s1,_UI _c) {return (_PC)_mbschr((_CPUC)_s1,_c);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __c$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbschr
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcschr ENDP
_TEXT	ENDS
EXTRN	__imp___mbsncmp:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT __tcsnccmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__n$ = 16						; size = 4
__tcsnccmp PROC NEAR					; COMDAT

; 856  : __inline int _tcsnccmp(_CPC _s1,_CPC _s2,size_t _n) {return _mbsncmp((_CPUC)_s1,(_CPUC)_s2,_n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR __n$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __s2$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR __s1$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsncmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
__tcsnccmp ENDP
_TEXT	ENDS
PUBLIC	__tclen
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
_pChar$ = -4						; size = 4
_szDoc$ = 8						; size = 4
_nChar$ = 12						; size = 4
_c$ = 16						; size = 1
?x_FindChar@CMarkup@@KA_NPBDAAHD@Z PROC NEAR		; CMarkup::x_FindChar

; 327  : {

  00ed0	55		 push	 ebp
  00ed1	8b ec		 mov	 ebp, esp
  00ed3	51		 push	 ecx
  00ed4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 328  : 	// static function
; 329  : 	LPCTSTR pChar = &szDoc[nChar];

  00edb	8b 45 0c	 mov	 eax, DWORD PTR _nChar$[ebp]
  00ede	8b 4d 08	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  00ee1	03 08		 add	 ecx, DWORD PTR [eax]
  00ee3	89 4d fc	 mov	 DWORD PTR _pChar$[ebp], ecx
$L182023:

; 330  : 	while ( *pChar && *pChar != c )

  00ee6	8b 55 fc	 mov	 edx, DWORD PTR _pChar$[ebp]
  00ee9	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00eec	85 c0		 test	 eax, eax
  00eee	74 22		 je	 SHORT $L182024
  00ef0	8b 4d fc	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00ef3	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00ef6	0f be 45 10	 movsx	 eax, BYTE PTR _c$[ebp]
  00efa	3b d0		 cmp	 edx, eax
  00efc	74 14		 je	 SHORT $L182024

; 331  : 		pChar += _tclen( pChar );

  00efe	8b 4d fc	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00f01	51		 push	 ecx
  00f02	e8 00 00 00 00	 call	 __tclen
  00f07	83 c4 04	 add	 esp, 4
  00f0a	03 45 fc	 add	 eax, DWORD PTR _pChar$[ebp]
  00f0d	89 45 fc	 mov	 DWORD PTR _pChar$[ebp], eax
  00f10	eb d4		 jmp	 SHORT $L182023
$L182024:

; 332  : 	nChar = (int)( pChar - szDoc);

  00f12	8b 55 fc	 mov	 edx, DWORD PTR _pChar$[ebp]
  00f15	2b 55 08	 sub	 edx, DWORD PTR _szDoc$[ebp]
  00f18	8b 45 0c	 mov	 eax, DWORD PTR _nChar$[ebp]
  00f1b	89 10		 mov	 DWORD PTR [eax], edx

; 333  : 	if ( ! *pChar )

  00f1d	8b 4d fc	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00f20	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00f23	85 d2		 test	 edx, edx
  00f25	75 04		 jne	 SHORT $L182026

; 334  : 		return false;

  00f27	32 c0		 xor	 al, al
  00f29	eb 02		 jmp	 SHORT $L182020
$L182026:

; 335  : 	/*
; 336  : 	while ( szDoc[nChar] && szDoc[nChar] != c )
; 337  : 		nChar += _tclen( &szDoc[nChar] );
; 338  : 	if ( ! szDoc[nChar] )
; 339  : 		return false;
; 340  : 	*/
; 341  : 	return true;

  00f2b	b0 01		 mov	 al, 1
$L182020:

; 342  : }

  00f2d	83 c4 04	 add	 esp, 4
  00f30	3b ec		 cmp	 ebp, esp
  00f32	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f37	8b e5		 mov	 esp, ebp
  00f39	5d		 pop	 ebp
  00f3a	c3		 ret	 0
?x_FindChar@CMarkup@@KA_NPBDAAHD@Z ENDP			; CMarkup::x_FindChar
_TEXT	ENDS
EXTRN	__imp___mbclen:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tclen
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__tclen	PROC NEAR					; COMDAT

; 888  : __inline size_t _tclen(_CPC _s1) {return _mbclen((_CPUC)_s1);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR __s1$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbclen
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
__tclen	ENDP
_TEXT	ENDS
PUBLIC	?x_FindAny@CMarkup@@KA_NPBDAAH@Z		; CMarkup::x_FindAny
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
_szDoc$ = 8						; size = 4
_nChar$ = 12						; size = 4
?x_FindAny@CMarkup@@KA_NPBDAAH@Z PROC NEAR		; CMarkup::x_FindAny

; 345  : {

  00f40	55		 push	 ebp
  00f41	8b ec		 mov	 ebp, esp
$L182032:

; 346  : 	// Starting at nChar, find a non-whitespace char
; 347  : 	// return false if no non-whitespace before end of document, nChar points to end
; 348  : 	// otherwise return true and nChar points to non-whitespace char
; 349  : 	while ( szDoc[nChar] && _tcschr(_T(" \t\n\r"),szDoc[nChar]) )

  00f43	8b 45 0c	 mov	 eax, DWORD PTR _nChar$[ebp]
  00f46	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f48	8b 55 08	 mov	 edx, DWORD PTR _szDoc$[ebp]
  00f4b	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00f4f	85 c0		 test	 eax, eax
  00f51	74 2d		 je	 SHORT $L182033
  00f53	8b 4d 0c	 mov	 ecx, DWORD PTR _nChar$[ebp]
  00f56	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f58	8b 45 08	 mov	 eax, DWORD PTR _szDoc$[ebp]
  00f5b	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  00f5f	51		 push	 ecx
  00f60	68 00 00 00 00	 push	 OFFSET FLAT:$SG182034
  00f65	e8 00 00 00 00	 call	 __tcschr
  00f6a	83 c4 08	 add	 esp, 8
  00f6d	85 c0		 test	 eax, eax
  00f6f	74 0f		 je	 SHORT $L182033

; 350  : 		++nChar;

  00f71	8b 55 0c	 mov	 edx, DWORD PTR _nChar$[ebp]
  00f74	8b 02		 mov	 eax, DWORD PTR [edx]
  00f76	83 c0 01	 add	 eax, 1
  00f79	8b 4d 0c	 mov	 ecx, DWORD PTR _nChar$[ebp]
  00f7c	89 01		 mov	 DWORD PTR [ecx], eax
  00f7e	eb c3		 jmp	 SHORT $L182032
$L182033:

; 351  : 	return szDoc[nChar] != '\0';

  00f80	8b 55 0c	 mov	 edx, DWORD PTR _nChar$[ebp]
  00f83	8b 02		 mov	 eax, DWORD PTR [edx]
  00f85	8b 4d 08	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  00f88	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00f8c	f7 d8		 neg	 eax
  00f8e	1b c0		 sbb	 eax, eax
  00f90	f7 d8		 neg	 eax

; 352  : }

  00f92	3b ec		 cmp	 ebp, esp
  00f94	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f99	5d		 pop	 ebp
  00f9a	c3		 ret	 0
?x_FindAny@CMarkup@@KA_NPBDAAH@Z ENDP			; CMarkup::x_FindAny
; Function compile flags: /Odt /RTCsu
_cFirstChar$ = -17					; size = 1
_nChar$ = -12						; size = 4
_szDoc$ = -4						; size = 4
_token$ = 8						; size = 4
?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z PROC NEAR	; CMarkup::x_FindToken

; 355  : {

  00fa0	55		 push	 ebp
  00fa1	8b ec		 mov	 ebp, esp
  00fa3	83 ec 14	 sub	 esp, 20			; 00000014H
  00fa6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00fab	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00fae	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00fb1	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00fb4	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00fb7	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 356  : 	// Starting at token.nNext, bypass whitespace and find the next token
; 357  : 	// returns true on success, members of token point to token
; 358  : 	// returns false on end of document, members point to end of document
; 359  : 	LPCTSTR szDoc = token.szDoc;

  00fba	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  00fbd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00fc0	89 4d fc	 mov	 DWORD PTR _szDoc$[ebp], ecx

; 360  : 	int nChar = token.nNext;

  00fc3	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  00fc6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00fc9	89 45 f4	 mov	 DWORD PTR _nChar$[ebp], eax

; 361  : 	token.bIsString = false;

  00fcc	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  00fcf	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 362  : 
; 363  : 	// By-pass leading whitespace
; 364  : 	if ( ! x_FindAny(szDoc,nChar) )

  00fd3	8d 55 f4	 lea	 edx, DWORD PTR _nChar$[ebp]
  00fd6	52		 push	 edx
  00fd7	8b 45 fc	 mov	 eax, DWORD PTR _szDoc$[ebp]
  00fda	50		 push	 eax
  00fdb	e8 00 00 00 00	 call	 ?x_FindAny@CMarkup@@KA_NPBDAAH@Z ; CMarkup::x_FindAny
  00fe0	83 c4 08	 add	 esp, 8
  00fe3	0f b6 c8	 movzx	 ecx, al
  00fe6	85 c9		 test	 ecx, ecx
  00fe8	75 21		 jne	 SHORT $L182040

; 365  : 	{
; 366  : 		// No token was found before end of document
; 367  : 		token.nL = nChar;

  00fea	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  00fed	8b 45 f4	 mov	 eax, DWORD PTR _nChar$[ebp]
  00ff0	89 02		 mov	 DWORD PTR [edx], eax

; 368  : 		token.nR = nChar;

  00ff2	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  00ff5	8b 55 f4	 mov	 edx, DWORD PTR _nChar$[ebp]
  00ff8	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 369  : 		token.nNext = nChar;

  00ffb	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  00ffe	8b 4d f4	 mov	 ecx, DWORD PTR _nChar$[ebp]
  01001	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 370  : 		return false;

  01004	32 c0		 xor	 al, al
  01006	e9 e1 00 00 00	 jmp	 $L182037
$L182040:

; 371  : 	}
; 372  : 
; 373  : 	// Is it an opening quote?
; 374  : 	_TCHAR cFirstChar = szDoc[nChar];

  0100b	8b 55 fc	 mov	 edx, DWORD PTR _szDoc$[ebp]
  0100e	03 55 f4	 add	 edx, DWORD PTR _nChar$[ebp]
  01011	8a 02		 mov	 al, BYTE PTR [edx]
  01013	88 45 ef	 mov	 BYTE PTR _cFirstChar$[ebp], al

; 375  : 	if ( cFirstChar == _T('\"') || cFirstChar == _T('\'') )

  01016	0f be 4d ef	 movsx	 ecx, BYTE PTR _cFirstChar$[ebp]
  0101a	83 f9 22	 cmp	 ecx, 34			; 00000022H
  0101d	74 09		 je	 SHORT $L182043
  0101f	0f be 55 ef	 movsx	 edx, BYTE PTR _cFirstChar$[ebp]
  01023	83 fa 27	 cmp	 edx, 39			; 00000027H
  01026	75 53		 jne	 SHORT $L182042
$L182043:

; 376  : 	{
; 377  : 		token.bIsString = true;

  01028	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  0102b	c6 40 10 01	 mov	 BYTE PTR [eax+16], 1

; 378  : 
; 379  : 		// Move past opening quote
; 380  : 		++nChar;

  0102f	8b 4d f4	 mov	 ecx, DWORD PTR _nChar$[ebp]
  01032	83 c1 01	 add	 ecx, 1
  01035	89 4d f4	 mov	 DWORD PTR _nChar$[ebp], ecx

; 381  : 		token.nL = nChar;

  01038	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  0103b	8b 45 f4	 mov	 eax, DWORD PTR _nChar$[ebp]
  0103e	89 02		 mov	 DWORD PTR [edx], eax

; 382  : 
; 383  : 		// Look for closing quote
; 384  : 		x_FindChar( token.szDoc, nChar, cFirstChar );

  01040	8a 4d ef	 mov	 cl, BYTE PTR _cFirstChar$[ebp]
  01043	51		 push	 ecx
  01044	8d 55 f4	 lea	 edx, DWORD PTR _nChar$[ebp]
  01047	52		 push	 edx
  01048	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  0104b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0104e	51		 push	 ecx
  0104f	e8 00 00 00 00	 call	 ?x_FindChar@CMarkup@@KA_NPBDAAHD@Z ; CMarkup::x_FindChar
  01054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 385  : 
; 386  : 		// Set right to before closing quote
; 387  : 		token.nR = nChar - 1;

  01057	8b 55 f4	 mov	 edx, DWORD PTR _nChar$[ebp]
  0105a	83 ea 01	 sub	 edx, 1
  0105d	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  01060	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 388  : 
; 389  : 		// Set nChar past closing quote unless at end of document
; 390  : 		if ( szDoc[nChar] )

  01063	8b 4d fc	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  01066	03 4d f4	 add	 ecx, DWORD PTR _nChar$[ebp]
  01069	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0106c	85 d2		 test	 edx, edx
  0106e	74 09		 je	 SHORT $L182044

; 391  : 			++nChar;

  01070	8b 45 f4	 mov	 eax, DWORD PTR _nChar$[ebp]
  01073	83 c0 01	 add	 eax, 1
  01076	89 45 f4	 mov	 DWORD PTR _nChar$[ebp], eax
$L182044:

; 392  : 	}
; 393  : 	else

  01079	eb 66		 jmp	 SHORT $L182045
$L182042:

; 394  : 	{
; 395  : 		// Go until special char or whitespace
; 396  : 		token.nL = nChar;

  0107b	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  0107e	8b 55 f4	 mov	 edx, DWORD PTR _nChar$[ebp]
  01081	89 11		 mov	 DWORD PTR [ecx], edx
$L182047:

; 397  : 		while ( szDoc[nChar] && ! _tcschr(_T(" \t\n\r<>=\\/?!"),szDoc[nChar]) )

  01083	8b 45 fc	 mov	 eax, DWORD PTR _szDoc$[ebp]
  01086	03 45 f4	 add	 eax, DWORD PTR _nChar$[ebp]
  01089	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0108c	85 c9		 test	 ecx, ecx
  0108e	74 32		 je	 SHORT $L182048
  01090	8b 55 fc	 mov	 edx, DWORD PTR _szDoc$[ebp]
  01093	03 55 f4	 add	 edx, DWORD PTR _nChar$[ebp]
  01096	0f be 02	 movsx	 eax, BYTE PTR [edx]
  01099	50		 push	 eax
  0109a	68 00 00 00 00	 push	 OFFSET FLAT:$SG182049
  0109f	e8 00 00 00 00	 call	 __tcschr
  010a4	83 c4 08	 add	 esp, 8
  010a7	85 c0		 test	 eax, eax
  010a9	75 17		 jne	 SHORT $L182048

; 398  : 			nChar += (int)_tclen(&szDoc[nChar]);

  010ab	8b 4d fc	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  010ae	03 4d f4	 add	 ecx, DWORD PTR _nChar$[ebp]
  010b1	51		 push	 ecx
  010b2	e8 00 00 00 00	 call	 __tclen
  010b7	83 c4 04	 add	 esp, 4
  010ba	03 45 f4	 add	 eax, DWORD PTR _nChar$[ebp]
  010bd	89 45 f4	 mov	 DWORD PTR _nChar$[ebp], eax
  010c0	eb c1		 jmp	 SHORT $L182047
$L182048:

; 399  : 
; 400  : 		// Adjust end position if it is one special char
; 401  : 		if ( nChar == token.nL )

  010c2	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  010c5	8b 45 f4	 mov	 eax, DWORD PTR _nChar$[ebp]
  010c8	3b 02		 cmp	 eax, DWORD PTR [edx]
  010ca	75 09		 jne	 SHORT $L182051

; 402  : 			++nChar; // it is a special char

  010cc	8b 4d f4	 mov	 ecx, DWORD PTR _nChar$[ebp]
  010cf	83 c1 01	 add	 ecx, 1
  010d2	89 4d f4	 mov	 DWORD PTR _nChar$[ebp], ecx
$L182051:

; 403  : 		token.nR = nChar - 1;

  010d5	8b 55 f4	 mov	 edx, DWORD PTR _nChar$[ebp]
  010d8	83 ea 01	 sub	 edx, 1
  010db	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  010de	89 50 04	 mov	 DWORD PTR [eax+4], edx
$L182045:

; 404  : 	}
; 405  : 
; 406  : 	// nNext points to one past last char of token
; 407  : 	token.nNext = nChar;

  010e1	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  010e4	8b 55 f4	 mov	 edx, DWORD PTR _nChar$[ebp]
  010e7	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 408  : 	return true;

  010ea	b0 01		 mov	 al, 1
$L182037:

; 409  : }

  010ec	52		 push	 edx
  010ed	8b cd		 mov	 ecx, ebp
  010ef	50		 push	 eax
  010f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191493
  010f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  010fb	58		 pop	 eax
  010fc	5a		 pop	 edx
  010fd	83 c4 14	 add	 esp, 20			; 00000014H
  01100	3b ec		 cmp	 ebp, esp
  01102	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01107	8b e5		 mov	 esp, ebp
  01109	5d		 pop	 ebp
  0110a	c3		 ret	 0
$L191493:
  0110b	01 00 00 00	 DD	 1
  0110f	00 00 00 00	 DD	 $L191492
$L191492:
  01113	f4 ff ff ff	 DD	 -12			; fffffff4H
  01117	04 00 00 00	 DD	 4
  0111b	00 00 00 00	 DD	 $L191491
$L191491:
  0111f	6e		 DB	 110			; 0000006eH
  01120	43		 DB	 67			; 00000043H
  01121	68		 DB	 104			; 00000068H
  01122	61		 DB	 97			; 00000061H
  01123	72		 DB	 114			; 00000072H
  01124	00		 DB	 0
?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ENDP		; CMarkup::x_FindToken
_TEXT	ENDS
EXTRN	__imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@HH@Z:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T191496 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_token$ = 12						; size = 4
?x_GetToken@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUTokenPos@1@@Z PROC NEAR ; CMarkup::x_GetToken
; _this$ = ecx

; 412  : {

  01130	55		 push	 ebp
  01131	8b ec		 mov	 ebp, esp
  01133	83 ec 08	 sub	 esp, 8
  01136	56		 push	 esi
  01137	57		 push	 edi
  01138	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0113f	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  01146	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  01149	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T191496[ebp], 0

; 413  : 	// The token contains indexes into the document identifying a small substring
; 414  : 	// Build the substring from those indexes and return it
; 415  : 	if ( token.nL > token.nR )

  01150	8b 45 0c	 mov	 eax, DWORD PTR _token$[ebp]
  01153	8b 4d 0c	 mov	 ecx, DWORD PTR _token$[ebp]
  01156	8b 10		 mov	 edx, DWORD PTR [eax]
  01158	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0115b	7e 25		 jle	 SHORT $L182057

; 416  : 		return _T("");

  0115d	8b f4		 mov	 esi, esp
  0115f	68 00 00 00 00	 push	 OFFSET FLAT:$SG182058
  01164	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0116d	3b f4		 cmp	 esi, esp
  0116f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01174	8b 45 f8	 mov	 eax, DWORD PTR $T191496[ebp]
  01177	83 c8 01	 or	 eax, 1
  0117a	89 45 f8	 mov	 DWORD PTR $T191496[ebp], eax
  0117d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01180	eb 59		 jmp	 SHORT $L182056
$L182057:

; 417  : 	return m_csDoc.Mid( token.nL,
; 418  : 		token.nR - token.nL + ((token.nR<m_csDoc.GetLength())? 1:0) );

  01182	8b 4d 0c	 mov	 ecx, DWORD PTR _token$[ebp]
  01185	8b 55 0c	 mov	 edx, DWORD PTR _token$[ebp]
  01188	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0118b	2b 32		 sub	 esi, DWORD PTR [edx]
  0118d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01190	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01193	8b fc		 mov	 edi, esp
  01195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0119b	3b fc		 cmp	 edi, esp
  0119d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011a2	8b 4d 0c	 mov	 ecx, DWORD PTR _token$[ebp]
  011a5	33 d2		 xor	 edx, edx
  011a7	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  011aa	0f 9c c2	 setl	 dl
  011ad	03 f2		 add	 esi, edx
  011af	8b fc		 mov	 edi, esp
  011b1	56		 push	 esi
  011b2	8b 45 0c	 mov	 eax, DWORD PTR _token$[ebp]
  011b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  011b7	51		 push	 ecx
  011b8	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  011bb	52		 push	 edx
  011bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011bf	83 c1 0c	 add	 ecx, 12			; 0000000cH
  011c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@HH@Z
  011c8	3b fc		 cmp	 edi, esp
  011ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011cf	8b 45 f8	 mov	 eax, DWORD PTR $T191496[ebp]
  011d2	83 c8 01	 or	 eax, 1
  011d5	89 45 f8	 mov	 DWORD PTR $T191496[ebp], eax
  011d8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L182056:

; 419  : }

  011db	5f		 pop	 edi
  011dc	5e		 pop	 esi
  011dd	83 c4 08	 add	 esp, 8
  011e0	3b ec		 cmp	 ebp, esp
  011e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011e7	8b e5		 mov	 esp, ebp
  011e9	5d		 pop	 ebp
  011ea	c2 08 00	 ret	 8
?x_GetToken@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUTokenPos@1@@Z ENDP ; CMarkup::x_GetToken
; Function compile flags: /Odt /RTCsu
_token$ = -28						; size = 20
_this$ = -4						; size = 4
_iPosParent$ = 8					; size = 4
_iPos$ = 12						; size = 4
_szPath$ = 16						; size = 4
?x_FindElem@CMarkup@@IAEHHHPBD@Z PROC NEAR		; CMarkup::x_FindElem
; _this$ = ecx

; 422  : {

  011f0	55		 push	 ebp
  011f1	8b ec		 mov	 ebp, esp
  011f3	83 ec 20	 sub	 esp, 32			; 00000020H
  011f6	56		 push	 esi
  011f7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  011fc	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  011ff	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01202	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01205	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  01208	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0120b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0120e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01211	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01214	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 	// If szPath is NULL or empty, go to next sibling element
; 424  : 	// Otherwise go to next sibling element with matching path
; 425  : 	//
; 426  : 	if ( iPos )

  01217	83 7d 0c 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  0121b	74 17		 je	 SHORT $L182066

; 427  : 		iPos = m_aPos[iPos].iElemNext;

  0121d	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  01220	50		 push	 eax
  01221	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01224	83 c1 14	 add	 ecx, 20			; 00000014H
  01227	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0122c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0122f	89 4d 0c	 mov	 DWORD PTR _iPos$[ebp], ecx

; 428  : 	else

  01232	eb 15		 jmp	 SHORT $L182067
$L182066:

; 429  : 		iPos = m_aPos[iPosParent].iElemChild;

  01234	8b 55 08	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  01237	52		 push	 edx
  01238	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0123b	83 c1 14	 add	 ecx, 20			; 00000014H
  0123e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01243	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  01246	89 45 0c	 mov	 DWORD PTR _iPos$[ebp], eax
$L182067:

; 430  : 
; 431  : 	// Finished here if szPath not specified
; 432  : 	if ( szPath == NULL || !szPath[0] )

  01249	83 7d 10 00	 cmp	 DWORD PTR _szPath$[ebp], 0
  0124d	74 0a		 je	 SHORT $L182069
  0124f	8b 4d 10	 mov	 ecx, DWORD PTR _szPath$[ebp]
  01252	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  01255	85 d2		 test	 edx, edx
  01257	75 05		 jne	 SHORT $L182068
$L182069:

; 433  : 		return iPos;

  01259	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  0125c	eb 78		 jmp	 SHORT $L182065
$L182068:

; 434  : 
; 435  : 	// Search
; 436  : 	TokenPos token( m_csDoc );

  0125e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01261	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01264	8b f4		 mov	 esi, esp
  01266	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0126c	3b f4		 cmp	 esi, esp
  0126e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01273	50		 push	 eax
  01274	8d 4d e4	 lea	 ecx, DWORD PTR _token$[ebp]
  01277	e8 00 00 00 00	 call	 ??0TokenPos@CMarkup@@QAE@PBD@Z ; CMarkup::TokenPos::TokenPos
$L182072:

; 437  : 	while ( iPos )

  0127c	83 7d 0c 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  01280	74 52		 je	 SHORT $L182073

; 438  : 	{
; 439  : 		// Compare tag name
; 440  : 		token.nNext = m_aPos[iPos].nStartL + 1;

  01282	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  01285	50		 push	 eax
  01286	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01289	83 c1 14	 add	 ecx, 20			; 00000014H
  0128c	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01291	8b 08		 mov	 ecx, DWORD PTR [eax]
  01293	83 c1 01	 add	 ecx, 1
  01296	89 4d ec	 mov	 DWORD PTR _token$[ebp+8], ecx

; 441  : 		x_FindToken( token ); // Locate tag name

  01299	8d 55 e4	 lea	 edx, DWORD PTR _token$[ebp]
  0129c	52		 push	 edx
  0129d	e8 00 00 00 00	 call	 ?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ; CMarkup::x_FindToken
  012a2	83 c4 04	 add	 esp, 4

; 442  : 		if ( token.Match(szPath) )

  012a5	8b 45 10	 mov	 eax, DWORD PTR _szPath$[ebp]
  012a8	50		 push	 eax
  012a9	8d 4d e4	 lea	 ecx, DWORD PTR _token$[ebp]
  012ac	e8 00 00 00 00	 call	 ?Match@TokenPos@CMarkup@@QAE_NPBD@Z ; CMarkup::TokenPos::Match
  012b1	0f b6 c8	 movzx	 ecx, al
  012b4	85 c9		 test	 ecx, ecx
  012b6	74 05		 je	 SHORT $L182074

; 443  : 			return iPos;

  012b8	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  012bb	eb 19		 jmp	 SHORT $L182065
$L182074:

; 444  : 		iPos = m_aPos[iPos].iElemNext;

  012bd	8b 55 0c	 mov	 edx, DWORD PTR _iPos$[ebp]
  012c0	52		 push	 edx
  012c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012c4	83 c1 14	 add	 ecx, 20			; 00000014H
  012c7	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  012cc	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  012cf	89 45 0c	 mov	 DWORD PTR _iPos$[ebp], eax

; 445  : 	}

  012d2	eb a8		 jmp	 SHORT $L182072
$L182073:

; 446  : 	return 0;

  012d4	33 c0		 xor	 eax, eax
$L182065:

; 447  : }

  012d6	52		 push	 edx
  012d7	8b cd		 mov	 ecx, ebp
  012d9	50		 push	 eax
  012da	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191501
  012e0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  012e5	58		 pop	 eax
  012e6	5a		 pop	 edx
  012e7	5e		 pop	 esi
  012e8	83 c4 20	 add	 esp, 32			; 00000020H
  012eb	3b ec		 cmp	 ebp, esp
  012ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  012f2	8b e5		 mov	 esp, ebp
  012f4	5d		 pop	 ebp
  012f5	c2 0c 00	 ret	 12			; 0000000cH
$L191501:
  012f8	01 00 00 00	 DD	 1
  012fc	00 00 00 00	 DD	 $L191500
$L191500:
  01300	e4 ff ff ff	 DD	 -28			; ffffffe4H
  01304	14 00 00 00	 DD	 20			; 00000014H
  01308	00 00 00 00	 DD	 $L191499
$L191499:
  0130c	74		 DB	 116			; 00000074H
  0130d	6f		 DB	 111			; 0000006fH
  0130e	6b		 DB	 107			; 0000006bH
  0130f	65		 DB	 101			; 00000065H
  01310	6e		 DB	 110			; 0000006eH
  01311	00		 DB	 0
?x_FindElem@CMarkup@@IAEHHHPBD@Z ENDP			; CMarkup::x_FindElem
_TEXT	ENDS
PUBLIC	__tcsstr
EXTRN	_strlen:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pEnd$182113 = -36					; size = 4
_cChar$182102 = -29					; size = 1
_nBrackets$182097 = -28					; size = 4
_cSecondChar$182090 = -21				; size = 1
_szEndOfNode$182085 = -20				; size = 4
_cFirstChar$182084 = -13				; size = 1
_szDoc$ = -12						; size = 4
_nTypeFound$ = -8					; size = 4
_this$ = -4						; size = 4
_token$ = 8						; size = 4
?x_ParseNode@CMarkup@@IAEHAAUTokenPos@1@@Z PROC NEAR	; CMarkup::x_ParseNode
; _this$ = ecx

; 450  : {

  01320	55		 push	 ebp
  01321	8b ec		 mov	 ebp, esp
  01323	83 ec 24	 sub	 esp, 36			; 00000024H
  01326	56		 push	 esi
  01327	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0132c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0132f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  01332	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01335	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01338	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0133b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0133e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01341	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01344	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01347	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 451  : 	// Call this with token.nNext set to the start of the node
; 452  : 	// This returns the node type and token.nNext set to the char after the node
; 453  : 	// If the node is not found or an element, token.nR is not determined
; 454  : 	int nTypeFound = 0;

  0134a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 0

; 455  : 	LPCTSTR szDoc = token.szDoc;

  01351	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  01354	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01357	89 4d f4	 mov	 DWORD PTR _szDoc$[ebp], ecx

; 456  : 	token.nL = token.nNext;

  0135a	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  0135d	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  01360	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01363	89 0a		 mov	 DWORD PTR [edx], ecx

; 457  : 	if ( szDoc[token.nL] == '<' )

  01365	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  01368	8b 02		 mov	 eax, DWORD PTR [edx]
  0136a	8b 4d f4	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  0136d	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  01371	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  01374	0f 85 99 01 00
	00		 jne	 $L182081

; 458  : 	{
; 459  : 		// Started with <, could be:
; 460  : 		// <!--...--> comment
; 461  : 		// <!DOCTYPE ...> dtd
; 462  : 		// <?target ...?> processing instruction
; 463  : 		// <![CDATA[...]]> cdata section
; 464  : 		// <NAME ...> element
; 465  : 		//
; 466  : 		if ( ! szDoc[token.nL+1] || ! szDoc[token.nL+2] )

  0137a	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  0137d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0137f	8b 55 f4	 mov	 edx, DWORD PTR _szDoc$[ebp]
  01382	0f be 44 0a 01	 movsx	 eax, BYTE PTR [edx+ecx+1]
  01387	85 c0		 test	 eax, eax
  01389	74 11		 je	 SHORT $L182083
  0138b	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  0138e	8b 11		 mov	 edx, DWORD PTR [ecx]
  01390	8b 45 f4	 mov	 eax, DWORD PTR _szDoc$[ebp]
  01393	0f be 4c 10 02	 movsx	 ecx, BYTE PTR [eax+edx+2]
  01398	85 c9		 test	 ecx, ecx
  0139a	75 07		 jne	 SHORT $L182082
$L182083:

; 467  : 			return 0;

  0139c	33 c0		 xor	 eax, eax
  0139e	e9 dd 01 00 00	 jmp	 $L182078
$L182082:

; 468  : 		_TCHAR cFirstChar = szDoc[token.nL+1];

  013a3	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  013a6	8b 02		 mov	 eax, DWORD PTR [edx]
  013a8	8b 4d f4	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  013ab	8a 54 01 01	 mov	 dl, BYTE PTR [ecx+eax+1]
  013af	88 55 f3	 mov	 BYTE PTR _cFirstChar$182084[ebp], dl

; 469  : 		LPCTSTR szEndOfNode = NULL;

  013b2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _szEndOfNode$182085[ebp], 0

; 470  : 		if ( cFirstChar == _T('?') )

  013b9	0f be 45 f3	 movsx	 eax, BYTE PTR _cFirstChar$182084[ebp]
  013bd	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  013c0	75 13		 jne	 SHORT $L182086

; 471  : 		{
; 472  : 			nTypeFound = MNT_PROCESSING_INSTRUCTION;

  013c2	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 16 ; 00000010H

; 473  : 			szEndOfNode = _T("?>");

  013c9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _szEndOfNode$182085[ebp], OFFSET FLAT:$SG182087

; 474  : 		}
; 475  : 		else if ( cFirstChar == _T('!') )

  013d0	e9 f6 00 00 00	 jmp	 $L182088
$L182086:
  013d5	0f be 4d f3	 movsx	 ecx, BYTE PTR _cFirstChar$182084[ebp]
  013d9	83 f9 21	 cmp	 ecx, 33			; 00000021H
  013dc	0f 85 d2 00 00
	00		 jne	 $L182089

; 476  : 		{
; 477  : 			_TCHAR cSecondChar = szDoc[token.nL+2];

  013e2	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  013e5	8b 02		 mov	 eax, DWORD PTR [edx]
  013e7	8b 4d f4	 mov	 ecx, DWORD PTR _szDoc$[ebp]
  013ea	8a 54 01 02	 mov	 dl, BYTE PTR [ecx+eax+2]
  013ee	88 55 eb	 mov	 BYTE PTR _cSecondChar$182090[ebp], dl

; 478  : 			if ( cSecondChar == _T('[') )

  013f1	0f be 45 eb	 movsx	 eax, BYTE PTR _cSecondChar$182090[ebp]
  013f5	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  013f8	75 13		 jne	 SHORT $L182091

; 479  : 			{
; 480  : 				nTypeFound = MNT_CDATA_SECTION;

  013fa	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 8

; 481  : 				szEndOfNode = _T("]]>");

  01401	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _szEndOfNode$182085[ebp], OFFSET FLAT:$SG182092

; 482  : 			}
; 483  : 			else if ( cSecondChar == _T('-') )

  01408	e9 a5 00 00 00	 jmp	 $L182093
$L182091:
  0140d	0f be 4d eb	 movsx	 ecx, BYTE PTR _cSecondChar$182090[ebp]
  01411	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  01414	75 13		 jne	 SHORT $L182094

; 484  : 			{
; 485  : 				nTypeFound = MNT_COMMENT;

  01416	c7 45 f8 20 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 32 ; 00000020H

; 486  : 				szEndOfNode = _T("-->");

  0141d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _szEndOfNode$182085[ebp], OFFSET FLAT:$SG182095

; 487  : 			}
; 488  : 			else

  01424	e9 89 00 00 00	 jmp	 $L182093
$L182094:

; 489  : 			{
; 490  : 				// Document type requires tokenizing because of strings and brackets
; 491  : 				nTypeFound = 0;

  01429	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 0

; 492  : 				int nBrackets = 0;

  01430	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _nBrackets$182097[ebp], 0
$L182099:

; 493  : 				while ( x_FindToken(token) )

  01437	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  0143a	52		 push	 edx
  0143b	e8 00 00 00 00	 call	 ?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ; CMarkup::x_FindToken
  01440	83 c4 04	 add	 esp, 4
  01443	0f b6 c0	 movzx	 eax, al
  01446	85 c0		 test	 eax, eax
  01448	74 5b		 je	 SHORT $L182100

; 494  : 				{
; 495  : 					if ( ! token.bIsString )

  0144a	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  0144d	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  01451	85 d2		 test	 edx, edx
  01453	75 4e		 jne	 SHORT $L182101

; 496  : 					{
; 497  : 						_TCHAR cChar = szDoc[token.nL];

  01455	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  01458	8b 08		 mov	 ecx, DWORD PTR [eax]
  0145a	8b 55 f4	 mov	 edx, DWORD PTR _szDoc$[ebp]
  0145d	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  01460	88 45 e3	 mov	 BYTE PTR _cChar$182102[ebp], al

; 498  : 						if ( cChar == _T('[') )

  01463	0f be 4d e3	 movsx	 ecx, BYTE PTR _cChar$182102[ebp]
  01467	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  0146a	75 0b		 jne	 SHORT $L182103

; 499  : 							++nBrackets;

  0146c	8b 55 e4	 mov	 edx, DWORD PTR _nBrackets$182097[ebp]
  0146f	83 c2 01	 add	 edx, 1
  01472	89 55 e4	 mov	 DWORD PTR _nBrackets$182097[ebp], edx

; 500  : 						else if ( cChar == _T(']') )

  01475	eb 2c		 jmp	 SHORT $L182101
$L182103:
  01477	0f be 45 e3	 movsx	 eax, BYTE PTR _cChar$182102[ebp]
  0147b	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  0147e	75 0b		 jne	 SHORT $L182105

; 501  : 							--nBrackets;

  01480	8b 4d e4	 mov	 ecx, DWORD PTR _nBrackets$182097[ebp]
  01483	83 e9 01	 sub	 ecx, 1
  01486	89 4d e4	 mov	 DWORD PTR _nBrackets$182097[ebp], ecx

; 502  : 						else if ( nBrackets == 0 && cChar == _T('>') )

  01489	eb 18		 jmp	 SHORT $L182101
$L182105:
  0148b	83 7d e4 00	 cmp	 DWORD PTR _nBrackets$182097[ebp], 0
  0148f	75 12		 jne	 SHORT $L182101
  01491	0f be 55 e3	 movsx	 edx, BYTE PTR _cChar$182102[ebp]
  01495	83 fa 3e	 cmp	 edx, 62			; 0000003eH
  01498	75 09		 jne	 SHORT $L182101

; 503  : 						{
; 504  : 							nTypeFound = MNT_DOCUMENT_TYPE;

  0149a	c7 45 f8 40 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 64 ; 00000040H

; 505  : 							break;

  014a1	eb 02		 jmp	 SHORT $L182100
$L182101:

; 506  : 						}
; 507  : 					}
; 508  : 				}

  014a3	eb 92		 jmp	 SHORT $L182099
$L182100:

; 509  : 				if ( ! nTypeFound )

  014a5	83 7d f8 00	 cmp	 DWORD PTR _nTypeFound$[ebp], 0
  014a9	75 07		 jne	 SHORT $L182093

; 510  : 					return 0;

  014ab	33 c0		 xor	 eax, eax
  014ad	e9 ce 00 00 00	 jmp	 $L182078
$L182093:

; 511  : 			}
; 512  : 		}
; 513  : 		else if ( cFirstChar == _T('/') )

  014b2	eb 17		 jmp	 SHORT $L182088
$L182089:
  014b4	0f be 45 f3	 movsx	 eax, BYTE PTR _cFirstChar$182084[ebp]
  014b8	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  014bb	75 07		 jne	 SHORT $L182110

; 514  : 		{
; 515  : 			// End tag means no node found within parent element
; 516  : 			return 0;

  014bd	33 c0		 xor	 eax, eax
  014bf	e9 bc 00 00 00	 jmp	 $L182078
$L182110:

; 517  : 		}
; 518  : 		else
; 519  : 		{
; 520  : 			nTypeFound = MNT_ELEMENT;

  014c4	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 1
$L182088:

; 521  : 		}
; 522  : 
; 523  : 		// Search for end of node if not found yet
; 524  : 		if ( szEndOfNode )

  014cb	83 7d ec 00	 cmp	 DWORD PTR _szEndOfNode$182085[ebp], 0
  014cf	74 40		 je	 SHORT $L182112

; 525  : 		{
; 526  : 			LPCTSTR pEnd = _tcsstr( &szDoc[token.nNext], szEndOfNode );

  014d1	8b 4d ec	 mov	 ecx, DWORD PTR _szEndOfNode$182085[ebp]
  014d4	51		 push	 ecx
  014d5	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  014d8	8b 45 f4	 mov	 eax, DWORD PTR _szDoc$[ebp]
  014db	03 42 08	 add	 eax, DWORD PTR [edx+8]
  014de	50		 push	 eax
  014df	e8 00 00 00 00	 call	 __tcsstr
  014e4	83 c4 08	 add	 esp, 8
  014e7	89 45 dc	 mov	 DWORD PTR _pEnd$182113[ebp], eax

; 527  : 			if ( ! pEnd )

  014ea	83 7d dc 00	 cmp	 DWORD PTR _pEnd$182113[ebp], 0
  014ee	75 07		 jne	 SHORT $L182114

; 528  : 				return 0; // not well-formed

  014f0	33 c0		 xor	 eax, eax
  014f2	e9 89 00 00 00	 jmp	 $L182078
$L182114:

; 529  : 			token.nNext = (int)(pEnd - szDoc) + (int)_tcslen(szEndOfNode);

  014f7	8b 75 dc	 mov	 esi, DWORD PTR _pEnd$182113[ebp]
  014fa	2b 75 f4	 sub	 esi, DWORD PTR _szDoc$[ebp]
  014fd	8b 4d ec	 mov	 ecx, DWORD PTR _szEndOfNode$182085[ebp]
  01500	51		 push	 ecx
  01501	e8 00 00 00 00	 call	 _strlen
  01506	83 c4 04	 add	 esp, 4
  01509	03 f0		 add	 esi, eax
  0150b	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  0150e	89 72 08	 mov	 DWORD PTR [edx+8], esi
$L182112:

; 530  : 		}
; 531  : 	}
; 532  : 	else if ( szDoc[token.nL] )

  01511	eb 6a		 jmp	 SHORT $L182117
$L182081:
  01513	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  01516	8b 08		 mov	 ecx, DWORD PTR [eax]
  01518	8b 55 f4	 mov	 edx, DWORD PTR _szDoc$[ebp]
  0151b	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0151f	85 c0		 test	 eax, eax
  01521	74 5a		 je	 SHORT $L182117

; 533  : 	{
; 534  : 		// It is text or whitespace because it did not start with <
; 535  : 		nTypeFound = MNT_WHITESPACE;

  01523	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 4

; 536  : 		token.nNext = token.nL;

  0152a	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  0152d	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  01530	8b 02		 mov	 eax, DWORD PTR [edx]
  01532	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 537  : 		if ( x_FindAny(szDoc,token.nNext) )

  01535	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  01538	83 c1 08	 add	 ecx, 8
  0153b	51		 push	 ecx
  0153c	8b 55 f4	 mov	 edx, DWORD PTR _szDoc$[ebp]
  0153f	52		 push	 edx
  01540	e8 00 00 00 00	 call	 ?x_FindAny@CMarkup@@KA_NPBDAAH@Z ; CMarkup::x_FindAny
  01545	83 c4 08	 add	 esp, 8
  01548	0f b6 c0	 movzx	 eax, al
  0154b	85 c0		 test	 eax, eax
  0154d	74 2e		 je	 SHORT $L182117

; 538  : 		{
; 539  : 			if ( szDoc[token.nNext] != _T('<') )

  0154f	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  01552	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01555	8b 45 f4	 mov	 eax, DWORD PTR _szDoc$[ebp]
  01558	0f be 0c 10	 movsx	 ecx, BYTE PTR [eax+edx]
  0155c	83 f9 3c	 cmp	 ecx, 60			; 0000003cH
  0155f	74 1c		 je	 SHORT $L182117

; 540  : 			{
; 541  : 				nTypeFound = MNT_TEXT;

  01561	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _nTypeFound$[ebp], 2

; 542  : 				x_FindChar( szDoc, token.nNext, _T('<') );

  01568	6a 3c		 push	 60			; 0000003cH
  0156a	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  0156d	83 c2 08	 add	 edx, 8
  01570	52		 push	 edx
  01571	8b 45 f4	 mov	 eax, DWORD PTR _szDoc$[ebp]
  01574	50		 push	 eax
  01575	e8 00 00 00 00	 call	 ?x_FindChar@CMarkup@@KA_NPBDAAHD@Z ; CMarkup::x_FindChar
  0157a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L182117:

; 543  : 			}
; 544  : 		}
; 545  : 	}
; 546  : 	return nTypeFound;

  0157d	8b 45 f8	 mov	 eax, DWORD PTR _nTypeFound$[ebp]
$L182078:

; 547  : }

  01580	5e		 pop	 esi
  01581	83 c4 24	 add	 esp, 36			; 00000024H
  01584	3b ec		 cmp	 ebp, esp
  01586	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0158b	8b e5		 mov	 esp, ebp
  0158d	5d		 pop	 ebp
  0158e	c2 04 00	 ret	 4
?x_ParseNode@CMarkup@@IAEHAAUTokenPos@1@@Z ENDP		; CMarkup::x_ParseNode
_TEXT	ENDS
EXTRN	__imp___mbsstr:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsstr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcsstr PROC NEAR					; COMDAT

; 847  : __inline _PC _tcsstr(_CPC _s1,_CPC _s2) {return (_PC)_mbsstr((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsstr
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcsstr ENDP
_TEXT	ENDS
PUBLIC	??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
$T191506 = -36						; size = 4
_token$ = -28						; size = 20
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iPos$ = 12						; size = 4
?x_GetTagName@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z PROC NEAR ; CMarkup::x_GetTagName
; _this$ = ecx

; 550  : {

  015a0	55		 push	 ebp
  015a1	8b ec		 mov	 ebp, esp
  015a3	83 ec 24	 sub	 esp, 36			; 00000024H
  015a6	56		 push	 esi
  015a7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  015ac	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  015af	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  015b2	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  015b5	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  015b8	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  015bb	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  015be	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  015c1	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  015c4	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  015c7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  015ca	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T191506[ebp], 0

; 551  : 	// Return the tag name at specified element
; 552  : 	TokenPos token( m_csDoc );

  015d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015d4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  015d7	8b f4		 mov	 esi, esp
  015d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  015df	3b f4		 cmp	 esi, esp
  015e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  015e6	50		 push	 eax
  015e7	8d 4d e4	 lea	 ecx, DWORD PTR _token$[ebp]
  015ea	e8 00 00 00 00	 call	 ??0TokenPos@CMarkup@@QAE@PBD@Z ; CMarkup::TokenPos::TokenPos

; 553  : 	token.nNext = m_aPos[iPos].nStartL + 1;

  015ef	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  015f2	50		 push	 eax
  015f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015f6	83 c1 14	 add	 ecx, 20			; 00000014H
  015f9	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  015fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01600	83 c1 01	 add	 ecx, 1
  01603	89 4d ec	 mov	 DWORD PTR _token$[ebp+8], ecx

; 554  : 	if ( ! iPos || ! x_FindToken( token ) )

  01606	83 7d 0c 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  0160a	74 13		 je	 SHORT $L182128
  0160c	8d 55 e4	 lea	 edx, DWORD PTR _token$[ebp]
  0160f	52		 push	 edx
  01610	e8 00 00 00 00	 call	 ?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ; CMarkup::x_FindToken
  01615	83 c4 04	 add	 esp, 4
  01618	0f b6 c0	 movzx	 eax, al
  0161b	85 c0		 test	 eax, eax
  0161d	75 25		 jne	 SHORT $L182127
$L182128:

; 555  : 		return _T("");

  0161f	8b f4		 mov	 esi, esp
  01621	68 00 00 00 00	 push	 OFFSET FLAT:$SG182129
  01626	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01629	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0162f	3b f4		 cmp	 esi, esp
  01631	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01636	8b 4d dc	 mov	 ecx, DWORD PTR $T191506[ebp]
  01639	83 c9 01	 or	 ecx, 1
  0163c	89 4d dc	 mov	 DWORD PTR $T191506[ebp], ecx
  0163f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01642	eb 1c		 jmp	 SHORT $L182125
$L182127:

; 556  : 
; 557  : 	// Return substring of document
; 558  : 	return x_GetToken( token );

  01644	8d 55 e4	 lea	 edx, DWORD PTR _token$[ebp]
  01647	52		 push	 edx
  01648	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0164b	50		 push	 eax
  0164c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0164f	e8 00 00 00 00	 call	 ?x_GetToken@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUTokenPos@1@@Z ; CMarkup::x_GetToken
  01654	8b 4d dc	 mov	 ecx, DWORD PTR $T191506[ebp]
  01657	83 c9 01	 or	 ecx, 1
  0165a	89 4d dc	 mov	 DWORD PTR $T191506[ebp], ecx
  0165d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L182125:

; 559  : }

  01660	52		 push	 edx
  01661	8b cd		 mov	 ecx, ebp
  01663	50		 push	 eax
  01664	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191510
  0166a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0166f	58		 pop	 eax
  01670	5a		 pop	 edx
  01671	5e		 pop	 esi
  01672	83 c4 24	 add	 esp, 36			; 00000024H
  01675	3b ec		 cmp	 ebp, esp
  01677	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0167c	8b e5		 mov	 esp, ebp
  0167e	5d		 pop	 ebp
  0167f	c2 08 00	 ret	 8
$L191510:
  01682	01 00 00 00	 DD	 1
  01686	00 00 00 00	 DD	 $L191509
$L191509:
  0168a	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0168e	14 00 00 00	 DD	 20			; 00000014H
  01692	00 00 00 00	 DD	 $L191508
$L191508:
  01696	74		 DB	 116			; 00000074H
  01697	6f		 DB	 111			; 0000006fH
  01698	6b		 DB	 107			; 0000006bH
  01699	65		 DB	 101			; 00000065H
  0169a	6e		 DB	 110			; 0000006eH
  0169b	00		 DB	 0
?x_GetTagName@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ENDP ; CMarkup::x_GetTagName
_TEXT	ENDS
PUBLIC	?x_FindAttrib@CMarkup@@IBE_NAAUTokenPos@1@PBD@Z	; CMarkup::x_FindAttrib
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_cChar$182142 = -13					; size = 1
_nCount$182137 = -12					; size = 4
_nAttrib$ = -8						; size = 4
_this$ = -4						; size = 4
_token$ = 8						; size = 4
_szAttrib$ = 12						; size = 4
?x_FindAttrib@CMarkup@@IBE_NAAUTokenPos@1@PBD@Z PROC NEAR ; CMarkup::x_FindAttrib
; _this$ = ecx

; 562  : {

  016a0	55		 push	 ebp
  016a1	8b ec		 mov	 ebp, esp
  016a3	83 ec 10	 sub	 esp, 16			; 00000010H
  016a6	56		 push	 esi
  016a7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  016ac	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  016af	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  016b2	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  016b5	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  016b8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 563  : 	// If szAttrib is NULL find next attrib, otherwise find named attrib
; 564  : 	// Return true if found
; 565  : 	int nAttrib = 0;

  016bb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nAttrib$[ebp], 0

; 566  : 	for ( int nCount = 0; x_FindToken(token); ++nCount )

  016c2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nCount$182137[ebp], 0
  016c9	eb 09		 jmp	 SHORT $L182138
$L182139:
  016cb	8b 45 f4	 mov	 eax, DWORD PTR _nCount$182137[ebp]
  016ce	83 c0 01	 add	 eax, 1
  016d1	89 45 f4	 mov	 DWORD PTR _nCount$182137[ebp], eax
$L182138:
  016d4	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  016d7	51		 push	 ecx
  016d8	e8 00 00 00 00	 call	 ?x_FindToken@CMarkup@@KA_NAAUTokenPos@1@@Z ; CMarkup::x_FindToken
  016dd	83 c4 04	 add	 esp, 4
  016e0	0f b6 d0	 movzx	 edx, al
  016e3	85 d2		 test	 edx, edx
  016e5	0f 84 aa 00 00
	00		 je	 $L182140

; 567  : 	{
; 568  : 		if ( ! token.bIsString )

  016eb	8b 45 08	 mov	 eax, DWORD PTR _token$[ebp]
  016ee	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  016f2	85 c9		 test	 ecx, ecx
  016f4	0f 85 81 00 00
	00		 jne	 $L182141

; 569  : 		{
; 570  : 			// Is it the right angle bracket?
; 571  : 			_TCHAR cChar = m_csDoc[token.nL];

  016fa	8b f4		 mov	 esi, esp
  016fc	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  016ff	8b 02		 mov	 eax, DWORD PTR [edx]
  01701	50		 push	 eax
  01702	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01705	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01708	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  0170e	3b f4		 cmp	 esi, esp
  01710	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01715	88 45 f3	 mov	 BYTE PTR _cChar$182142[ebp], al

; 572  : 			if ( cChar == _T('>') || cChar == _T('/') || cChar == _T('?') )

  01718	0f be 4d f3	 movsx	 ecx, BYTE PTR _cChar$182142[ebp]
  0171c	83 f9 3e	 cmp	 ecx, 62			; 0000003eH
  0171f	74 12		 je	 SHORT $L182144
  01721	0f be 55 f3	 movsx	 edx, BYTE PTR _cChar$182142[ebp]
  01725	83 fa 2f	 cmp	 edx, 47			; 0000002fH
  01728	74 09		 je	 SHORT $L182144
  0172a	0f be 45 f3	 movsx	 eax, BYTE PTR _cChar$182142[ebp]
  0172e	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  01731	75 02		 jne	 SHORT $L182143
$L182144:

; 573  : 				break; // attrib not found

  01733	eb 60		 jmp	 SHORT $L182140
$L182143:

; 574  : 
; 575  : 			// Equal sign
; 576  : 			if ( cChar == _T('=') )

  01735	0f be 4d f3	 movsx	 ecx, BYTE PTR _cChar$182142[ebp]
  01739	83 f9 3d	 cmp	 ecx, 61			; 0000003dH
  0173c	75 02		 jne	 SHORT $L182145

; 577  : 				continue;

  0173e	eb 8b		 jmp	 SHORT $L182139
$L182145:

; 578  : 
; 579  : 			// Potential attribute
; 580  : 			if ( ! nAttrib && nCount )

  01740	83 7d f8 00	 cmp	 DWORD PTR _nAttrib$[ebp], 0
  01744	75 33		 jne	 SHORT $L182146
  01746	83 7d f4 00	 cmp	 DWORD PTR _nCount$182137[ebp], 0
  0174a	74 2d		 je	 SHORT $L182146

; 581  : 			{
; 582  : 				// Attribute name search?
; 583  : 				if ( ! szAttrib || ! szAttrib[0] )

  0174c	83 7d 0c 00	 cmp	 DWORD PTR _szAttrib$[ebp], 0
  01750	74 0a		 je	 SHORT $L182148
  01752	8b 55 0c	 mov	 edx, DWORD PTR _szAttrib$[ebp]
  01755	0f be 02	 movsx	 eax, BYTE PTR [edx]
  01758	85 c0		 test	 eax, eax
  0175a	75 04		 jne	 SHORT $L182147
$L182148:

; 584  : 					return true; // return with token at attrib name

  0175c	b0 01		 mov	 al, 1
  0175e	eb 37		 jmp	 SHORT $L182135
$L182147:

; 585  : 
; 586  : 				// Compare szAttrib
; 587  : 				if ( token.Match(szAttrib) )

  01760	8b 4d 0c	 mov	 ecx, DWORD PTR _szAttrib$[ebp]
  01763	51		 push	 ecx
  01764	8b 4d 08	 mov	 ecx, DWORD PTR _token$[ebp]
  01767	e8 00 00 00 00	 call	 ?Match@TokenPos@CMarkup@@QAE_NPBD@Z ; CMarkup::TokenPos::Match
  0176c	0f b6 d0	 movzx	 edx, al
  0176f	85 d2		 test	 edx, edx
  01771	74 06		 je	 SHORT $L182146

; 588  : 					nAttrib = nCount;

  01773	8b 45 f4	 mov	 eax, DWORD PTR _nCount$182137[ebp]
  01776	89 45 f8	 mov	 DWORD PTR _nAttrib$[ebp], eax
$L182146:

; 589  : 			}
; 590  : 		}
; 591  : 		else if ( nAttrib && nCount == nAttrib + 2 )

  01779	eb 15		 jmp	 SHORT $L182150
$L182141:
  0177b	83 7d f8 00	 cmp	 DWORD PTR _nAttrib$[ebp], 0
  0177f	74 0f		 je	 SHORT $L182150
  01781	8b 4d f8	 mov	 ecx, DWORD PTR _nAttrib$[ebp]
  01784	83 c1 02	 add	 ecx, 2
  01787	39 4d f4	 cmp	 DWORD PTR _nCount$182137[ebp], ecx
  0178a	75 04		 jne	 SHORT $L182150

; 592  : 		{
; 593  : 			return true;

  0178c	b0 01		 mov	 al, 1
  0178e	eb 07		 jmp	 SHORT $L182135
$L182150:

; 594  : 		}
; 595  : 	}

  01790	e9 36 ff ff ff	 jmp	 $L182139
$L182140:

; 596  : 
; 597  : 	// Not found
; 598  : 	return false;

  01795	32 c0		 xor	 al, al
$L182135:

; 599  : }

  01797	5e		 pop	 esi
  01798	83 c4 10	 add	 esp, 16			; 00000010H
  0179b	3b ec		 cmp	 ebp, esp
  0179d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  017a2	8b e5		 mov	 esp, ebp
  017a4	5d		 pop	 ebp
  017a5	c2 08 00	 ret	 8
?x_FindAttrib@CMarkup@@IBE_NAAUTokenPos@1@PBD@Z ENDP	; CMarkup::x_FindAttrib
_TEXT	ENDS
PUBLIC	?x_GetAttrib@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HPBD@Z ; CMarkup::x_GetAttrib
PUBLIC	?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z ; CMarkup::x_TextFromDoc
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T191514 = -36						; size = 4
_token$ = -28						; size = 20
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iPos$ = 12						; size = 4
_szAttrib$ = 16						; size = 4
?x_GetAttrib@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HPBD@Z PROC NEAR ; CMarkup::x_GetAttrib
; _this$ = ecx

; 602  : {

  017b0	55		 push	 ebp
  017b1	8b ec		 mov	 ebp, esp
  017b3	83 ec 24	 sub	 esp, 36			; 00000024H
  017b6	56		 push	 esi
  017b7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  017bc	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  017bf	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  017c2	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  017c5	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  017c8	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  017cb	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  017ce	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  017d1	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  017d4	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  017d7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  017da	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T191514[ebp], 0

; 603  : 	// Return the value of the attrib
; 604  : 	TokenPos token( m_csDoc );

  017e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017e4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  017e7	8b f4		 mov	 esi, esp
  017e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  017ef	3b f4		 cmp	 esi, esp
  017f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  017f6	50		 push	 eax
  017f7	8d 4d e4	 lea	 ecx, DWORD PTR _token$[ebp]
  017fa	e8 00 00 00 00	 call	 ??0TokenPos@CMarkup@@QAE@PBD@Z ; CMarkup::TokenPos::TokenPos

; 605  : 	if ( iPos && m_nNodeType == MNT_ELEMENT )

  017ff	83 7d 0c 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  01803	74 22		 je	 SHORT $L182159
  01805	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01808	83 78 38 01	 cmp	 DWORD PTR [eax+56], 1
  0180c	75 19		 jne	 SHORT $L182159

; 606  : 		token.nNext = m_aPos[iPos].nStartL + 1;

  0180e	8b 4d 0c	 mov	 ecx, DWORD PTR _iPos$[ebp]
  01811	51		 push	 ecx
  01812	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01815	83 c1 14	 add	 ecx, 20			; 00000014H
  01818	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0181d	8b 10		 mov	 edx, DWORD PTR [eax]
  0181f	83 c2 01	 add	 edx, 1
  01822	89 55 ec	 mov	 DWORD PTR _token$[ebp+8], edx

; 607  : 	else

  01825	eb 28		 jmp	 SHORT $L182160
$L182159:

; 608  : 		return _T("");

  01827	8b f4		 mov	 esi, esp
  01829	68 00 00 00 00	 push	 OFFSET FLAT:$SG182161
  0182e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01831	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  01837	3b f4		 cmp	 esi, esp
  01839	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0183e	8b 45 dc	 mov	 eax, DWORD PTR $T191514[ebp]
  01841	83 c8 01	 or	 eax, 1
  01844	89 45 dc	 mov	 DWORD PTR $T191514[ebp], eax
  01847	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0184a	e9 81 00 00 00	 jmp	 $L182157
$L182160:

; 609  : 
; 610  : 	if ( szAttrib && x_FindAttrib( token, szAttrib ) )

  0184f	83 7d 10 00	 cmp	 DWORD PTR _szAttrib$[ebp], 0
  01853	74 58		 je	 SHORT $L182162
  01855	8b 4d 10	 mov	 ecx, DWORD PTR _szAttrib$[ebp]
  01858	51		 push	 ecx
  01859	8d 55 e4	 lea	 edx, DWORD PTR _token$[ebp]
  0185c	52		 push	 edx
  0185d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01860	e8 00 00 00 00	 call	 ?x_FindAttrib@CMarkup@@IBE_NAAUTokenPos@1@PBD@Z ; CMarkup::x_FindAttrib
  01865	0f b6 c0	 movzx	 eax, al
  01868	85 c0		 test	 eax, eax
  0186a	74 41		 je	 SHORT $L182162

; 611  : 		return x_TextFromDoc( token.nL, token.nR - ((token.nR<m_csDoc.GetLength())?0:1) );

  0186c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0186f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01872	8b f4		 mov	 esi, esp
  01874	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0187a	3b f4		 cmp	 esi, esp
  0187c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01881	33 c9		 xor	 ecx, ecx
  01883	39 45 e8	 cmp	 DWORD PTR _token$[ebp+4], eax
  01886	0f 9d c1	 setge	 cl
  01889	8b 55 e8	 mov	 edx, DWORD PTR _token$[ebp+4]
  0188c	2b d1		 sub	 edx, ecx
  0188e	52		 push	 edx
  0188f	8b 45 e4	 mov	 eax, DWORD PTR _token$[ebp]
  01892	50		 push	 eax
  01893	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01896	51		 push	 ecx
  01897	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0189a	e8 00 00 00 00	 call	 ?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z ; CMarkup::x_TextFromDoc
  0189f	8b 55 dc	 mov	 edx, DWORD PTR $T191514[ebp]
  018a2	83 ca 01	 or	 edx, 1
  018a5	89 55 dc	 mov	 DWORD PTR $T191514[ebp], edx
  018a8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  018ab	eb 23		 jmp	 SHORT $L182157
$L182162:

; 612  : 	return _T("");

  018ad	8b f4		 mov	 esi, esp
  018af	68 00 00 00 00	 push	 OFFSET FLAT:$SG182164
  018b4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  018b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  018bd	3b f4		 cmp	 esi, esp
  018bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018c4	8b 45 dc	 mov	 eax, DWORD PTR $T191514[ebp]
  018c7	83 c8 01	 or	 eax, 1
  018ca	89 45 dc	 mov	 DWORD PTR $T191514[ebp], eax
  018cd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L182157:

; 613  : }

  018d0	52		 push	 edx
  018d1	8b cd		 mov	 ecx, ebp
  018d3	50		 push	 eax
  018d4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191518
  018da	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  018df	58		 pop	 eax
  018e0	5a		 pop	 edx
  018e1	5e		 pop	 esi
  018e2	83 c4 24	 add	 esp, 36			; 00000024H
  018e5	3b ec		 cmp	 ebp, esp
  018e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018ec	8b e5		 mov	 esp, ebp
  018ee	5d		 pop	 ebp
  018ef	c2 0c 00	 ret	 12			; 0000000cH
$L191518:
  018f2	01 00 00 00	 DD	 1
  018f6	00 00 00 00	 DD	 $L191517
$L191517:
  018fa	e4 ff ff ff	 DD	 -28			; ffffffe4H
  018fe	14 00 00 00	 DD	 20			; 00000014H
  01902	00 00 00 00	 DD	 $L191516
$L191516:
  01906	74		 DB	 116			; 00000074H
  01907	6f		 DB	 111			; 0000006fH
  01908	6b		 DB	 107			; 0000006bH
  01909	65		 DB	 101			; 00000065H
  0190a	6e		 DB	 110			; 0000006eH
  0190b	00		 DB	 0
?x_GetAttrib@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HPBD@Z ENDP ; CMarkup::x_GetAttrib
_TEXT	ENDS
PUBLIC	?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ	; CMarkup::ElemPos::IsEmptyElement
PUBLIC	?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z		; CMarkup::ElemPos::AdjustEnd
PUBLIC	?x_SetAttrib@CMarkup@@IAE_NHPBD0@Z		; CMarkup::x_SetAttrib
PUBLIC	?x_DocChange@CMarkup@@IAEXHHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CMarkup::x_DocChange
PUBLIC	?x_Adjust@CMarkup@@IAEXHH_N@Z			; CMarkup::x_Adjust
PUBLIC	?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z ; CMarkup::x_TextToDoc
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
xdata$x	SEGMENT
$T191539 DD	0ffffffffH
	DD	FLAT:$L191527
	DD	00H
	DD	FLAT:$L191528
	DD	00H
	DD	FLAT:$L191529
	DD	02H
	DD	FLAT:$L191530
$T191532 DD	019930520H
	DD	04H
	DD	FLAT:$T191539
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv215 = -120						; size = 4
tv202 = -116						; size = 4
tv178 = -112						; size = 4
tv221 = -108						; size = 4
tv228 = -104						; size = 4
tv218 = -100						; size = 4
tv224 = -96						; size = 4
$T191526 = -89						; size = 1
$T191521 = -88						; size = 4
$T191520 = -84						; size = 4
_nAdjust$ = -80						; size = 4
_csFormat$182180 = -72					; size = 4
_csInsert$ = -60					; size = 4
_nReplace$ = -52					; size = 4
_nInsertAt$ = -48					; size = 4
_token$ = -40						; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iPos$ = 8						; size = 4
_szAttrib$ = 12						; size = 4
_szValue$ = 16						; size = 4
?x_SetAttrib@CMarkup@@IAE_NHPBD0@Z PROC NEAR		; CMarkup::x_SetAttrib
; _this$ = ecx

; 616  : {

  01910	55		 push	 ebp
  01911	8b ec		 mov	 ebp, esp
  01913	6a ff		 push	 -1
  01915	68 00 00 00 00	 push	 __ehhandler$?x_SetAttrib@CMarkup@@IAE_NHPBD0@Z
  0191a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01920	50		 push	 eax
  01921	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01928	83 ec 6c	 sub	 esp, 108		; 0000006cH
  0192b	56		 push	 esi
  0192c	57		 push	 edi
  0192d	51		 push	 ecx
  0192e	8d 7d 88	 lea	 edi, DWORD PTR [ebp-120]
  01931	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  01936	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0193b	f3 ab		 rep stosd
  0193d	59		 pop	 ecx
  0193e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 617  : 	// Set attribute in iPos element
; 618  : 	TokenPos token( m_csDoc );

  01941	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01944	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01947	8b f4		 mov	 esi, esp
  01949	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0194f	3b f4		 cmp	 esi, esp
  01951	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01956	50		 push	 eax
  01957	8d 4d d8	 lea	 ecx, DWORD PTR _token$[ebp]
  0195a	e8 00 00 00 00	 call	 ??0TokenPos@CMarkup@@QAE@PBD@Z ; CMarkup::TokenPos::TokenPos

; 619  : 	int nInsertAt;
; 620  : 	if ( iPos && m_nNodeType == MNT_ELEMENT )

  0195f	83 7d 08 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  01963	74 5a		 je	 SHORT $L182173
  01965	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01968	83 78 38 01	 cmp	 DWORD PTR [eax+56], 1
  0196c	75 51		 jne	 SHORT $L182173

; 621  : 	{
; 622  : 		token.nNext = m_aPos[iPos].nStartL + 1;

  0196e	8b 4d 08	 mov	 ecx, DWORD PTR _iPos$[ebp]
  01971	51		 push	 ecx
  01972	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01975	83 c1 14	 add	 ecx, 20			; 00000014H
  01978	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0197d	8b 10		 mov	 edx, DWORD PTR [eax]
  0197f	83 c2 01	 add	 edx, 1
  01982	89 55 e0	 mov	 DWORD PTR _token$[ebp+8], edx

; 623  : 		nInsertAt = m_aPos[iPos].nStartR - (m_aPos[iPos].IsEmptyElement()?1:0);

  01985	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  01988	50		 push	 eax
  01989	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0198c	83 c1 14	 add	 ecx, 20			; 00000014H
  0198f	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01994	8b f0		 mov	 esi, eax
  01996	8b 4d 08	 mov	 ecx, DWORD PTR _iPos$[ebp]
  01999	51		 push	 ecx
  0199a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0199d	83 c1 14	 add	 ecx, 20			; 00000014H
  019a0	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  019a5	8b c8		 mov	 ecx, eax
  019a7	e8 00 00 00 00	 call	 ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ ; CMarkup::ElemPos::IsEmptyElement
  019ac	0f b6 d0	 movzx	 edx, al
  019af	f7 da		 neg	 edx
  019b1	1b d2		 sbb	 edx, edx
  019b3	f7 da		 neg	 edx
  019b5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  019b8	2b c2		 sub	 eax, edx
  019ba	89 45 d0	 mov	 DWORD PTR _nInsertAt$[ebp], eax

; 624  : 	}
; 625  : 	else

  019bd	eb 07		 jmp	 SHORT $L182174
$L182173:

; 626  : 		return false;

  019bf	32 c0		 xor	 al, al
  019c1	e9 ad 02 00 00	 jmp	 $L182170
$L182174:

; 627  : 
; 628  : 	// Create insertion text depending on whether attribute already exists
; 629  : 	int nReplace = 0;

  019c6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _nReplace$[ebp], 0

; 630  : 	CString csInsert;

  019cd	8b f4		 mov	 esi, esp
  019cf	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  019d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  019d8	3b f4		 cmp	 esi, esp
  019da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019df	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 631  : 	if ( x_FindAttrib( token, szAttrib ) )

  019e6	8b 4d 0c	 mov	 ecx, DWORD PTR _szAttrib$[ebp]
  019e9	51		 push	 ecx
  019ea	8d 55 d8	 lea	 edx, DWORD PTR _token$[ebp]
  019ed	52		 push	 edx
  019ee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  019f1	e8 00 00 00 00	 call	 ?x_FindAttrib@CMarkup@@IBE_NAAUTokenPos@1@PBD@Z ; CMarkup::x_FindAttrib
  019f6	0f b6 c0	 movzx	 eax, al
  019f9	85 c0		 test	 eax, eax
  019fb	74 62		 je	 SHORT $L182177

; 632  : 	{
; 633  : 		// Replace value only
; 634  : 		// Decision: for empty value leaving attrib="" instead of removing attrib
; 635  : 		csInsert = x_TextToDoc( szValue, true );

  019fd	6a 01		 push	 1
  019ff	8b 4d 10	 mov	 ecx, DWORD PTR _szValue$[ebp]
  01a02	51		 push	 ecx
  01a03	8d 55 ac	 lea	 edx, DWORD PTR $T191520[ebp]
  01a06	52		 push	 edx
  01a07	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a0a	e8 00 00 00 00	 call	 ?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z ; CMarkup::x_TextToDoc
  01a0f	89 45 a0	 mov	 DWORD PTR tv224[ebp], eax
  01a12	8b 45 a0	 mov	 eax, DWORD PTR tv224[ebp]
  01a15	89 45 9c	 mov	 DWORD PTR tv218[ebp], eax
  01a18	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01a1c	8b f4		 mov	 esi, esp
  01a1e	8b 4d 9c	 mov	 ecx, DWORD PTR tv218[ebp]
  01a21	51		 push	 ecx
  01a22	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  01a25	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01a2b	3b f4		 cmp	 esi, esp
  01a2d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a32	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01a36	8b f4		 mov	 esi, esp
  01a38	8d 4d ac	 lea	 ecx, DWORD PTR $T191520[ebp]
  01a3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01a41	3b f4		 cmp	 esi, esp
  01a43	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 636  : 		nInsertAt = token.nL;

  01a48	8b 55 d8	 mov	 edx, DWORD PTR _token$[ebp]
  01a4b	89 55 d0	 mov	 DWORD PTR _nInsertAt$[ebp], edx

; 637  : 		nReplace = token.nR-token.nL+1;

  01a4e	8b 45 dc	 mov	 eax, DWORD PTR _token$[ebp+4]
  01a51	2b 45 d8	 sub	 eax, DWORD PTR _token$[ebp]
  01a54	83 c0 01	 add	 eax, 1
  01a57	89 45 cc	 mov	 DWORD PTR _nReplace$[ebp], eax

; 638  : 	}
; 639  : 	else

  01a5a	e9 e8 00 00 00	 jmp	 $L182179
$L182177:

; 640  : 	{
; 641  : 		// Insert string name value pair
; 642  : 		CString csFormat;

  01a5f	8b f4		 mov	 esi, esp
  01a61	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01a64	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01a6a	3b f4		 cmp	 esi, esp
  01a6c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a71	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 643  : 		csFormat = _T(" ");

  01a75	8b f4		 mov	 esi, esp
  01a77	68 00 00 00 00	 push	 OFFSET FLAT:$SG182181
  01a7c	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01a7f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  01a85	3b f4		 cmp	 esi, esp
  01a87	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  : 		csFormat += szAttrib;

  01a8c	8b f4		 mov	 esi, esp
  01a8e	8b 4d 0c	 mov	 ecx, DWORD PTR _szAttrib$[ebp]
  01a91	51		 push	 ecx
  01a92	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01a95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  01a9b	3b f4		 cmp	 esi, esp
  01a9d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 645  : 		csFormat += _T("=\"");

  01aa2	8b f4		 mov	 esi, esp
  01aa4	68 00 00 00 00	 push	 OFFSET FLAT:$SG182182
  01aa9	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01aac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  01ab2	3b f4		 cmp	 esi, esp
  01ab4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 646  : 		csFormat += x_TextToDoc( szValue, true );

  01ab9	6a 01		 push	 1
  01abb	8b 55 10	 mov	 edx, DWORD PTR _szValue$[ebp]
  01abe	52		 push	 edx
  01abf	8d 45 a8	 lea	 eax, DWORD PTR $T191521[ebp]
  01ac2	50		 push	 eax
  01ac3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01ac6	e8 00 00 00 00	 call	 ?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z ; CMarkup::x_TextToDoc
  01acb	89 45 98	 mov	 DWORD PTR tv228[ebp], eax
  01ace	8b 4d 98	 mov	 ecx, DWORD PTR tv228[ebp]
  01ad1	89 4d 94	 mov	 DWORD PTR tv221[ebp], ecx
  01ad4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01ad8	8b f4		 mov	 esi, esp
  01ada	8b 55 94	 mov	 edx, DWORD PTR tv221[ebp]
  01add	52		 push	 edx
  01ade	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01ae1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  01ae7	3b f4		 cmp	 esi, esp
  01ae9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01aee	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01af2	8b f4		 mov	 esi, esp
  01af4	8d 4d a8	 lea	 ecx, DWORD PTR $T191521[ebp]
  01af7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01afd	3b f4		 cmp	 esi, esp
  01aff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 647  : 		csFormat += _T("\"");

  01b04	8b f4		 mov	 esi, esp
  01b06	68 00 00 00 00	 push	 OFFSET FLAT:$SG182187
  01b0b	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01b0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  01b14	3b f4		 cmp	 esi, esp
  01b16	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 648  : 		csInsert = csFormat;

  01b1b	8b f4		 mov	 esi, esp
  01b1d	8d 45 b8	 lea	 eax, DWORD PTR _csFormat$182180[ebp]
  01b20	50		 push	 eax
  01b21	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  01b24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01b2a	3b f4		 cmp	 esi, esp
  01b2c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 649  : 	}

  01b31	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01b35	8b f4		 mov	 esi, esp
  01b37	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  01b3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01b40	3b f4		 cmp	 esi, esp
  01b42	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L182179:

; 650  : 
; 651  : 	x_DocChange( nInsertAt, nReplace, csInsert );

  01b47	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  01b4a	51		 push	 ecx
  01b4b	8b 55 cc	 mov	 edx, DWORD PTR _nReplace$[ebp]
  01b4e	52		 push	 edx
  01b4f	8b 45 d0	 mov	 eax, DWORD PTR _nInsertAt$[ebp]
  01b52	50		 push	 eax
  01b53	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01b56	e8 00 00 00 00	 call	 ?x_DocChange@CMarkup@@IAEXHHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CMarkup::x_DocChange

; 652  : 	int nAdjust = csInsert.GetLength() - nReplace;

  01b5b	8b f4		 mov	 esi, esp
  01b5d	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  01b60	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  01b66	3b f4		 cmp	 esi, esp
  01b68	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01b6d	2b 45 cc	 sub	 eax, DWORD PTR _nReplace$[ebp]
  01b70	89 45 b0	 mov	 DWORD PTR _nAdjust$[ebp], eax

; 653  : 	m_aPos[iPos].nStartR += nAdjust;

  01b73	8b 4d 08	 mov	 ecx, DWORD PTR _iPos$[ebp]
  01b76	51		 push	 ecx
  01b77	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01b7a	83 c1 14	 add	 ecx, 20			; 00000014H
  01b7d	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01b82	83 c0 04	 add	 eax, 4
  01b85	89 45 90	 mov	 DWORD PTR tv178[ebp], eax
  01b88	8b 55 90	 mov	 edx, DWORD PTR tv178[ebp]
  01b8b	8b 02		 mov	 eax, DWORD PTR [edx]
  01b8d	03 45 b0	 add	 eax, DWORD PTR _nAdjust$[ebp]
  01b90	8b 4d 90	 mov	 ecx, DWORD PTR tv178[ebp]
  01b93	89 01		 mov	 DWORD PTR [ecx], eax

; 654  : 	m_aPos[iPos].AdjustEnd( nAdjust );

  01b95	8b 55 b0	 mov	 edx, DWORD PTR _nAdjust$[ebp]
  01b98	52		 push	 edx
  01b99	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  01b9c	50		 push	 eax
  01b9d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01ba0	83 c1 14	 add	 ecx, 20			; 00000014H
  01ba3	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01ba8	8b c8		 mov	 ecx, eax
  01baa	e8 00 00 00 00	 call	 ?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z ; CMarkup::ElemPos::AdjustEnd

; 655  : 	x_Adjust( iPos, nAdjust );

  01baf	6a 00		 push	 0
  01bb1	8b 4d b0	 mov	 ecx, DWORD PTR _nAdjust$[ebp]
  01bb4	51		 push	 ecx
  01bb5	8b 55 08	 mov	 edx, DWORD PTR _iPos$[ebp]
  01bb8	52		 push	 edx
  01bb9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01bbc	e8 00 00 00 00	 call	 ?x_Adjust@CMarkup@@IAEXHH_N@Z ; CMarkup::x_Adjust

; 656  : 	MARKUP_SETDEBUGSTATE;

  01bc1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01bc4	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  01bc8	74 30		 je	 SHORT $L191522
  01bca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01bcd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01bd0	8b f4		 mov	 esi, esp
  01bd2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  01bd8	3b f4		 cmp	 esi, esp
  01bda	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01bdf	8b f0		 mov	 esi, eax
  01be1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01be4	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  01be7	52		 push	 edx
  01be8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01beb	83 c1 14	 add	 ecx, 20			; 00000014H
  01bee	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01bf3	03 30		 add	 esi, DWORD PTR [eax]
  01bf5	89 75 8c	 mov	 DWORD PTR tv202[ebp], esi
  01bf8	eb 07		 jmp	 SHORT $L191523
$L191522:
  01bfa	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv202[ebp], 0
$L191523:
  01c01	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01c04	8b 4d 8c	 mov	 ecx, DWORD PTR tv202[ebp]
  01c07	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  01c0a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01c0d	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  01c11	74 30		 je	 SHORT $L191524
  01c13	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01c16	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01c19	8b f4		 mov	 esi, esp
  01c1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  01c21	3b f4		 cmp	 esi, esp
  01c23	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c28	8b f0		 mov	 esi, eax
  01c2a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01c2d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  01c30	51		 push	 ecx
  01c31	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01c34	83 c1 14	 add	 ecx, 20			; 00000014H
  01c37	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01c3c	03 30		 add	 esi, DWORD PTR [eax]
  01c3e	89 75 88	 mov	 DWORD PTR tv215[ebp], esi
  01c41	eb 07		 jmp	 SHORT $L191525
$L191524:
  01c43	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$L191525:
  01c4a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01c4d	8b 45 88	 mov	 eax, DWORD PTR tv215[ebp]
  01c50	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 657  : 	return true;

  01c53	c6 45 a7 01	 mov	 BYTE PTR $T191526[ebp], 1
  01c57	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01c5e	8b f4		 mov	 esi, esp
  01c60	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  01c63	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01c69	3b f4		 cmp	 esi, esp
  01c6b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c70	8a 45 a7	 mov	 al, BYTE PTR $T191526[ebp]
$L182170:

; 658  : }

  01c73	52		 push	 edx
  01c74	8b cd		 mov	 ecx, ebp
  01c76	50		 push	 eax
  01c77	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191538
  01c7d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01c82	58		 pop	 eax
  01c83	5a		 pop	 edx
  01c84	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01c87	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01c8e	5f		 pop	 edi
  01c8f	5e		 pop	 esi
  01c90	83 c4 78	 add	 esp, 120		; 00000078H
  01c93	3b ec		 cmp	 ebp, esp
  01c95	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c9a	8b e5		 mov	 esp, ebp
  01c9c	5d		 pop	 ebp
  01c9d	c2 0c 00	 ret	 12			; 0000000cH
$L191538:
  01ca0	03 00 00 00	 DD	 3
  01ca4	00 00 00 00	 DD	 $L191537
$L191537:
  01ca8	d8 ff ff ff	 DD	 -40			; ffffffd8H
  01cac	14 00 00 00	 DD	 20			; 00000014H
  01cb0	00 00 00 00	 DD	 $L191533
  01cb4	c4 ff ff ff	 DD	 -60			; ffffffc4H
  01cb8	04 00 00 00	 DD	 4
  01cbc	00 00 00 00	 DD	 $L191534
  01cc0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  01cc4	04 00 00 00	 DD	 4
  01cc8	00 00 00 00	 DD	 $L191535
$L191535:
  01ccc	63		 DB	 99			; 00000063H
  01ccd	73		 DB	 115			; 00000073H
  01cce	46		 DB	 70			; 00000046H
  01ccf	6f		 DB	 111			; 0000006fH
  01cd0	72		 DB	 114			; 00000072H
  01cd1	6d		 DB	 109			; 0000006dH
  01cd2	61		 DB	 97			; 00000061H
  01cd3	74		 DB	 116			; 00000074H
  01cd4	00		 DB	 0
$L191534:
  01cd5	63		 DB	 99			; 00000063H
  01cd6	73		 DB	 115			; 00000073H
  01cd7	49		 DB	 73			; 00000049H
  01cd8	6e		 DB	 110			; 0000006eH
  01cd9	73		 DB	 115			; 00000073H
  01cda	65		 DB	 101			; 00000065H
  01cdb	72		 DB	 114			; 00000072H
  01cdc	74		 DB	 116			; 00000074H
  01cdd	00		 DB	 0
$L191533:
  01cde	74		 DB	 116			; 00000074H
  01cdf	6f		 DB	 111			; 0000006fH
  01ce0	6b		 DB	 107			; 0000006bH
  01ce1	65		 DB	 101			; 00000065H
  01ce2	6e		 DB	 110			; 0000006eH
  01ce3	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191527:
  0005c	8b f4		 mov	 esi, esp
  0005e	8d 4d c4	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00067	3b f4		 cmp	 esi, esp
  00069	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191528:
  0006e	8b f4		 mov	 esi, esp
  00070	8d 4d ac	 lea	 ecx, DWORD PTR $T191520[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00079	3b f4		 cmp	 esi, esp
  0007b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191529:
  00080	8b f4		 mov	 esi, esp
  00082	8d 4d b8	 lea	 ecx, DWORD PTR _csFormat$182180[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191530:
  00092	8b f4		 mov	 esi, esp
  00094	8d 4d a8	 lea	 ecx, DWORD PTR $T191521[ebp]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?x_SetAttrib@CMarkup@@IAE_NHPBD0@Z:
  000a4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191532
  000a9	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?x_SetAttrib@CMarkup@@IAE_NHPBD0@Z ENDP			; CMarkup::x_SetAttrib
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.h
;	COMDAT ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ PROC NEAR	; CMarkup::ElemPos::IsEmptyElement, COMDAT
; _this$ = ecx

; 88   : 		bool IsEmptyElement() const { return (nStartR == nEndL + 1); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	83 c1 01	 add	 ecx, 1
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	33 c0		 xor	 eax, eax
  0001c	39 4a 04	 cmp	 DWORD PTR [edx+4], ecx
  0001f	0f 94 c0	 sete	 al
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ ENDP		; CMarkup::ElemPos::IsEmptyElement
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z PROC NEAR		; CMarkup::ElemPos::AdjustEnd, COMDAT
; _this$ = ecx

; 95   : 		void AdjustEnd( int n ) { nEndL+=n; nEndR+=n; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	03 4d 08	 add	 ecx, DWORD PTR _n$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	03 4d 08	 add	 ecx, DWORD PTR _n$[ebp]
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z ENDP		; CMarkup::ElemPos::AdjustEnd
_TEXT	ENDS
PUBLIC	__tcsncmp
PUBLIC	?x_GetData@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CMarkup::x_GetData
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
$T191544 = -28						; size = 4
_nEndCDATA$182203 = -24					; size = 4
_nChar$182200 = -16					; size = 4
_szDoc$182198 = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iPos$ = 12						; size = 4
?x_GetData@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z PROC NEAR ; CMarkup::x_GetData
; _this$ = ecx

; 661  : {

  01cf0	55		 push	 ebp
  01cf1	8b ec		 mov	 ebp, esp
  01cf3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01cf6	56		 push	 esi
  01cf7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01cfc	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01cff	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01d02	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  01d05	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  01d08	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01d0b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01d0e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01d11	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  01d14	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T191544[ebp], 0

; 662  : 
; 663  : 	// Return a string representing data between start and end tag
; 664  : 	// Return empty string if there are any children elements
; 665  : 	if ( ! m_aPos[iPos].iElemChild && ! m_aPos[iPos].IsEmptyElement() )

  01d1b	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  01d1e	50		 push	 eax
  01d1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d22	83 c1 14	 add	 ecx, 20			; 00000014H
  01d25	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01d2a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  01d2e	0f 85 75 01 00
	00		 jne	 $L182197
  01d34	8b 4d 0c	 mov	 ecx, DWORD PTR _iPos$[ebp]
  01d37	51		 push	 ecx
  01d38	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d3b	83 c1 14	 add	 ecx, 20			; 00000014H
  01d3e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01d43	8b c8		 mov	 ecx, eax
  01d45	e8 00 00 00 00	 call	 ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ ; CMarkup::ElemPos::IsEmptyElement
  01d4a	0f b6 d0	 movzx	 edx, al
  01d4d	85 d2		 test	 edx, edx
  01d4f	0f 85 54 01 00
	00		 jne	 $L182197

; 666  : 	{
; 667  : 		// See if it is a CDATA section
; 668  : 		LPCTSTR szDoc = (LPCTSTR)m_csDoc;

  01d55	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d58	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01d5b	8b f4		 mov	 esi, esp
  01d5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  01d63	3b f4		 cmp	 esi, esp
  01d65	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d6a	89 45 f8	 mov	 DWORD PTR _szDoc$182198[ebp], eax

; 669  : 		int nChar = m_aPos[iPos].nStartR + 1;

  01d6d	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  01d70	50		 push	 eax
  01d71	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d74	83 c1 14	 add	 ecx, 20			; 00000014H
  01d77	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01d7c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01d7f	83 c1 01	 add	 ecx, 1
  01d82	89 4d f0	 mov	 DWORD PTR _nChar$182200[ebp], ecx

; 670  : 		if ( x_FindAny( szDoc, nChar ) && szDoc[nChar] == _T('<')
; 671  : 				&& nChar + 11 < m_aPos[iPos].nEndL
; 672  : 				&& _tcsncmp( &szDoc[nChar], _T("<![CDATA["), 9 ) == 0 )

  01d85	8d 55 f0	 lea	 edx, DWORD PTR _nChar$182200[ebp]
  01d88	52		 push	 edx
  01d89	8b 45 f8	 mov	 eax, DWORD PTR _szDoc$182198[ebp]
  01d8c	50		 push	 eax
  01d8d	e8 00 00 00 00	 call	 ?x_FindAny@CMarkup@@KA_NPBDAAH@Z ; CMarkup::x_FindAny
  01d92	83 c4 08	 add	 esp, 8
  01d95	0f b6 c8	 movzx	 ecx, al
  01d98	85 c9		 test	 ecx, ecx
  01d9a	0f 84 c3 00 00
	00		 je	 $L182201
  01da0	8b 55 f8	 mov	 edx, DWORD PTR _szDoc$182198[ebp]
  01da3	03 55 f0	 add	 edx, DWORD PTR _nChar$182200[ebp]
  01da6	0f be 02	 movsx	 eax, BYTE PTR [edx]
  01da9	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  01dac	0f 85 b1 00 00
	00		 jne	 $L182201
  01db2	8b 75 f0	 mov	 esi, DWORD PTR _nChar$182200[ebp]
  01db5	83 c6 0b	 add	 esi, 11			; 0000000bH
  01db8	8b 4d 0c	 mov	 ecx, DWORD PTR _iPos$[ebp]
  01dbb	51		 push	 ecx
  01dbc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dbf	83 c1 14	 add	 ecx, 20			; 00000014H
  01dc2	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01dc7	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  01dca	0f 8d 93 00 00
	00		 jge	 $L182201
  01dd0	6a 09		 push	 9
  01dd2	68 00 00 00 00	 push	 OFFSET FLAT:$SG182202
  01dd7	8b 55 f8	 mov	 edx, DWORD PTR _szDoc$182198[ebp]
  01dda	03 55 f0	 add	 edx, DWORD PTR _nChar$182200[ebp]
  01ddd	52		 push	 edx
  01dde	e8 00 00 00 00	 call	 __tcsncmp
  01de3	83 c4 0c	 add	 esp, 12			; 0000000cH
  01de6	85 c0		 test	 eax, eax
  01de8	75 79		 jne	 SHORT $L182201

; 673  : 		{
; 674  : 			nChar += 9;

  01dea	8b 45 f0	 mov	 eax, DWORD PTR _nChar$182200[ebp]
  01ded	83 c0 09	 add	 eax, 9
  01df0	89 45 f0	 mov	 DWORD PTR _nChar$182200[ebp], eax

; 675  : 			int nEndCDATA = m_csDoc.Find( _T("]]>"), nChar );

  01df3	8b f4		 mov	 esi, esp
  01df5	8b 4d f0	 mov	 ecx, DWORD PTR _nChar$182200[ebp]
  01df8	51		 push	 ecx
  01df9	68 00 00 00 00	 push	 OFFSET FLAT:$SG182204
  01dfe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e01	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01e04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  01e0a	3b f4		 cmp	 esi, esp
  01e0c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01e11	89 45 e8	 mov	 DWORD PTR _nEndCDATA$182203[ebp], eax

; 676  : 			if ( nEndCDATA != -1 && nEndCDATA < m_aPos[iPos].nEndL )

  01e14	83 7d e8 ff	 cmp	 DWORD PTR _nEndCDATA$182203[ebp], -1
  01e18	74 49		 je	 SHORT $L182201
  01e1a	8b 55 0c	 mov	 edx, DWORD PTR _iPos$[ebp]
  01e1d	52		 push	 edx
  01e1e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e21	83 c1 14	 add	 ecx, 20			; 00000014H
  01e24	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01e29	8b 4d e8	 mov	 ecx, DWORD PTR _nEndCDATA$182203[ebp]
  01e2c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  01e2f	7d 32		 jge	 SHORT $L182201

; 677  : 			{
; 678  : 				return m_csDoc.Mid( nChar, nEndCDATA - nChar );

  01e31	8b 55 e8	 mov	 edx, DWORD PTR _nEndCDATA$182203[ebp]
  01e34	2b 55 f0	 sub	 edx, DWORD PTR _nChar$182200[ebp]
  01e37	8b f4		 mov	 esi, esp
  01e39	52		 push	 edx
  01e3a	8b 45 f0	 mov	 eax, DWORD PTR _nChar$182200[ebp]
  01e3d	50		 push	 eax
  01e3e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01e41	51		 push	 ecx
  01e42	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e45	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01e48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@HH@Z
  01e4e	3b f4		 cmp	 esi, esp
  01e50	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01e55	8b 55 e4	 mov	 edx, DWORD PTR $T191544[ebp]
  01e58	83 ca 01	 or	 edx, 1
  01e5b	89 55 e4	 mov	 DWORD PTR $T191544[ebp], edx
  01e5e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01e61	eb 69		 jmp	 SHORT $L182196
$L182201:

; 679  : 			}
; 680  : 		}
; 681  : 		return x_TextFromDoc( m_aPos[iPos].nStartR+1, m_aPos[iPos].nEndL-1 );

  01e63	8b 45 0c	 mov	 eax, DWORD PTR _iPos$[ebp]
  01e66	50		 push	 eax
  01e67	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e6a	83 c1 14	 add	 ecx, 20			; 00000014H
  01e6d	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01e72	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01e75	83 e9 01	 sub	 ecx, 1
  01e78	51		 push	 ecx
  01e79	8b 55 0c	 mov	 edx, DWORD PTR _iPos$[ebp]
  01e7c	52		 push	 edx
  01e7d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e80	83 c1 14	 add	 ecx, 20			; 00000014H
  01e83	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  01e88	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01e8b	83 c0 01	 add	 eax, 1
  01e8e	50		 push	 eax
  01e8f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01e92	51		 push	 ecx
  01e93	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e96	e8 00 00 00 00	 call	 ?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z ; CMarkup::x_TextFromDoc
  01e9b	8b 55 e4	 mov	 edx, DWORD PTR $T191544[ebp]
  01e9e	83 ca 01	 or	 edx, 1
  01ea1	89 55 e4	 mov	 DWORD PTR $T191544[ebp], edx
  01ea4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01ea7	eb 23		 jmp	 SHORT $L182196
$L182197:

; 682  : 	}
; 683  : 	return _T("");

  01ea9	8b f4		 mov	 esi, esp
  01eab	68 00 00 00 00	 push	 OFFSET FLAT:$SG182208
  01eb0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01eb3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  01eb9	3b f4		 cmp	 esi, esp
  01ebb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01ec0	8b 45 e4	 mov	 eax, DWORD PTR $T191544[ebp]
  01ec3	83 c8 01	 or	 eax, 1
  01ec6	89 45 e4	 mov	 DWORD PTR $T191544[ebp], eax
  01ec9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L182196:

; 684  : }

  01ecc	52		 push	 edx
  01ecd	8b cd		 mov	 ecx, ebp
  01ecf	50		 push	 eax
  01ed0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191548
  01ed6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01edb	58		 pop	 eax
  01edc	5a		 pop	 edx
  01edd	5e		 pop	 esi
  01ede	83 c4 1c	 add	 esp, 28			; 0000001cH
  01ee1	3b ec		 cmp	 ebp, esp
  01ee3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01ee8	8b e5		 mov	 esp, ebp
  01eea	5d		 pop	 ebp
  01eeb	c2 08 00	 ret	 8
$L191548:
  01eee	01 00 00 00	 DD	 1
  01ef2	00 00 00 00	 DD	 $L191547
$L191547:
  01ef6	f0 ff ff ff	 DD	 -16			; fffffff0H
  01efa	04 00 00 00	 DD	 4
  01efe	00 00 00 00	 DD	 $L191546
$L191546:
  01f02	6e		 DB	 110			; 0000006eH
  01f03	43		 DB	 67			; 00000043H
  01f04	68		 DB	 104			; 00000068H
  01f05	61		 DB	 97			; 00000061H
  01f06	72		 DB	 114			; 00000072H
  01f07	00		 DB	 0
?x_GetData@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ENDP ; CMarkup::x_GetData
_TEXT	ENDS
EXTRN	__imp___mbsnbcmp:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsncmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__n$ = 16						; size = 4
__tcsncmp PROC NEAR					; COMDAT

; 857  : __inline int _tcsncmp(_CPC _s1,_CPC _s2,size_t _n) {return _mbsnbcmp((_CPUC)_s1,(_CPUC)_s2,_n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR __n$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __s2$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR __s1$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
__tcsncmp ENDP
_TEXT	ENDS
PUBLIC	__tccpy
EXTRN	__imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z:NEAR
EXTRN	__imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z:NEAR
EXTRN	_strcpy:NEAR
xdata$x	SEGMENT
$T191563 DD	0ffffffffH
	DD	FLAT:$L191553
$T191558 DD	019930520H
	DD	01H
	DD	FLAT:$T191563
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ?szaReplace@?1??x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z@4PAPADA
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_DATA	SEGMENT
?szaReplace@?1??x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z@4PAPADA DD FLAT:$SG182217 ; `CMarkup::x_TextToDoc'::`2'::szaReplace
	DD	FLAT:$SG182218
	DD	FLAT:$SG182219
	DD	FLAT:$SG182220
	DD	FLAT:$SG182221
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
tv66 = -64						; size = 4
$T191555 = -60						; size = 4
_pFound$ = -56						; size = 4
_cSource$ = -49						; size = 1
_nLen$ = -48						; size = 4
_pDest$ = -44						; size = 4
_nDestSize$ = -40					; size = 4
_pSource$ = -36						; size = 4
_csText$ = -28						; size = 4
_pFind$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szText$ = 12						; size = 4
_bAttrib$ = 16						; size = 1
?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z PROC NEAR ; CMarkup::x_TextToDoc
; _this$ = ecx

; 687  : {

  01f10	55		 push	 ebp
  01f11	8b ec		 mov	 ebp, esp
  01f13	6a ff		 push	 -1
  01f15	68 00 00 00 00	 push	 __ehhandler$?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z
  01f1a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01f20	50		 push	 eax
  01f21	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01f28	83 ec 34	 sub	 esp, 52			; 00000034H
  01f2b	56		 push	 esi
  01f2c	57		 push	 edi
  01f2d	51		 push	 ecx
  01f2e	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  01f31	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  01f36	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01f3b	f3 ab		 rep stosd
  01f3d	59		 pop	 ecx
  01f3e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  01f41	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T191555[ebp], 0

; 688  : 	// Convert text as seen outside XML document to XML friendly
; 689  : 	// replacing special characters with ampersand escape codes
; 690  : 	// E.g. convert "6>7" to "6&gt;7"
; 691  : 	//
; 692  : 	// &lt;   less than
; 693  : 	// &amp;  ampersand
; 694  : 	// &gt;   greater than
; 695  : 	//
; 696  : 	// and for attributes:
; 697  : 	//
; 698  : 	// &apos; apostrophe or single quote
; 699  : 	// &quot; double quote
; 700  : 	//
; 701  : 	static _TCHAR* szaReplace[] = { _T("&lt;"),_T("&amp;"),_T("&gt;"),_T("&apos;"),_T("&quot;") };
; 702  : 	const _TCHAR* pFind = bAttrib?_T("<&>\'\""):_T("<&>");

  01f48	0f b6 45 10	 movzx	 eax, BYTE PTR _bAttrib$[ebp]
  01f4c	85 c0		 test	 eax, eax
  01f4e	74 09		 je	 SHORT $L191551
  01f50	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], OFFSET FLAT:$SG182223
  01f57	eb 07		 jmp	 SHORT $L191552
$L191551:
  01f59	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], OFFSET FLAT:$SG182224
$L191552:
  01f60	8b 4d c0	 mov	 ecx, DWORD PTR tv66[ebp]
  01f63	89 4d ec	 mov	 DWORD PTR _pFind$[ebp], ecx

; 703  : 	CString csText;

  01f66	8b f4		 mov	 esi, esp
  01f68	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  01f6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01f71	3b f4		 cmp	 esi, esp
  01f73	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01f78	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 704  : 	const _TCHAR* pSource = szText;

  01f7f	8b 55 0c	 mov	 edx, DWORD PTR _szText$[ebp]
  01f82	89 55 dc	 mov	 DWORD PTR _pSource$[ebp], edx

; 705  : 	int nDestSize = (int)_tcslen(pSource);

  01f85	8b 45 dc	 mov	 eax, DWORD PTR _pSource$[ebp]
  01f88	50		 push	 eax
  01f89	e8 00 00 00 00	 call	 _strlen
  01f8e	83 c4 04	 add	 esp, 4
  01f91	89 45 d8	 mov	 DWORD PTR _nDestSize$[ebp], eax

; 706  : 	nDestSize += nDestSize / 10 + 7;

  01f94	8b 45 d8	 mov	 eax, DWORD PTR _nDestSize$[ebp]
  01f97	99		 cdq
  01f98	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  01f9d	f7 f9		 idiv	 ecx
  01f9f	8b 55 d8	 mov	 edx, DWORD PTR _nDestSize$[ebp]
  01fa2	8d 44 02 07	 lea	 eax, DWORD PTR [edx+eax+7]
  01fa6	89 45 d8	 mov	 DWORD PTR _nDestSize$[ebp], eax

; 707  : 	_TCHAR* pDest = csText.GetBuffer(nDestSize);

  01fa9	8b f4		 mov	 esi, esp
  01fab	8b 4d d8	 mov	 ecx, DWORD PTR _nDestSize$[ebp]
  01fae	51		 push	 ecx
  01faf	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  01fb2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z
  01fb8	3b f4		 cmp	 esi, esp
  01fba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01fbf	89 45 d4	 mov	 DWORD PTR _pDest$[ebp], eax

; 708  : 	int nLen = 0;

  01fc2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 709  : 	_TCHAR cSource = *pSource;

  01fc9	8b 55 dc	 mov	 edx, DWORD PTR _pSource$[ebp]
  01fcc	8a 02		 mov	 al, BYTE PTR [edx]
  01fce	88 45 cf	 mov	 BYTE PTR _cSource$[ebp], al
$L182234:

; 710  : 	_TCHAR* pFound;
; 711  : 	while ( cSource )

  01fd1	0f be 4d cf	 movsx	 ecx, BYTE PTR _cSource$[ebp]
  01fd5	85 c9		 test	 ecx, ecx
  01fd7	0f 84 d7 00 00
	00		 je	 $L182235

; 712  : 	{
; 713  : 		if ( nLen > nDestSize - 6 )

  01fdd	8b 55 d8	 mov	 edx, DWORD PTR _nDestSize$[ebp]
  01fe0	83 ea 06	 sub	 edx, 6
  01fe3	39 55 d0	 cmp	 DWORD PTR _nLen$[ebp], edx
  01fe6	7e 37		 jle	 SHORT $L182236

; 714  : 		{
; 715  : 			csText.ReleaseBuffer(nLen);

  01fe8	8b f4		 mov	 esi, esp
  01fea	8b 45 d0	 mov	 eax, DWORD PTR _nLen$[ebp]
  01fed	50		 push	 eax
  01fee	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  01ff1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z
  01ff7	3b f4		 cmp	 esi, esp
  01ff9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 716  : 			nDestSize *= 2;

  01ffe	8b 4d d8	 mov	 ecx, DWORD PTR _nDestSize$[ebp]
  02001	d1 e1		 shl	 ecx, 1
  02003	89 4d d8	 mov	 DWORD PTR _nDestSize$[ebp], ecx

; 717  : 			pDest = csText.GetBuffer(nDestSize);

  02006	8b f4		 mov	 esi, esp
  02008	8b 55 d8	 mov	 edx, DWORD PTR _nDestSize$[ebp]
  0200b	52		 push	 edx
  0200c	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  0200f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z
  02015	3b f4		 cmp	 esi, esp
  02017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0201c	89 45 d4	 mov	 DWORD PTR _pDest$[ebp], eax
$L182236:

; 718  : 		}
; 719  : 		if ( (pFound= (_TCHAR*)_tcschr(pFind,cSource)) != NULL )

  0201f	0f be 45 cf	 movsx	 eax, BYTE PTR _cSource$[ebp]
  02023	50		 push	 eax
  02024	8b 4d ec	 mov	 ecx, DWORD PTR _pFind$[ebp]
  02027	51		 push	 ecx
  02028	e8 00 00 00 00	 call	 __tcschr
  0202d	83 c4 08	 add	 esp, 8
  02030	89 45 c8	 mov	 DWORD PTR _pFound$[ebp], eax
  02033	83 7d c8 00	 cmp	 DWORD PTR _pFound$[ebp], 0
  02037	74 37		 je	 SHORT $L182238

; 720  : 		{
; 721  : 			pFound = szaReplace[pFound-pFind];

  02039	8b 55 c8	 mov	 edx, DWORD PTR _pFound$[ebp]
  0203c	2b 55 ec	 sub	 edx, DWORD PTR _pFind$[ebp]
  0203f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?szaReplace@?1??x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z@4PAPADA[edx*4]
  02046	89 45 c8	 mov	 DWORD PTR _pFound$[ebp], eax

; 722  : 			_tcscpy(&pDest[nLen],pFound);

  02049	8b 4d c8	 mov	 ecx, DWORD PTR _pFound$[ebp]
  0204c	51		 push	 ecx
  0204d	8b 55 d4	 mov	 edx, DWORD PTR _pDest$[ebp]
  02050	03 55 d0	 add	 edx, DWORD PTR _nLen$[ebp]
  02053	52		 push	 edx
  02054	e8 00 00 00 00	 call	 _strcpy
  02059	83 c4 08	 add	 esp, 8

; 723  : 			nLen += (int)_tcslen(pFound);

  0205c	8b 45 c8	 mov	 eax, DWORD PTR _pFound$[ebp]
  0205f	50		 push	 eax
  02060	e8 00 00 00 00	 call	 _strlen
  02065	83 c4 04	 add	 esp, 4
  02068	03 45 d0	 add	 eax, DWORD PTR _nLen$[ebp]
  0206b	89 45 d0	 mov	 DWORD PTR _nLen$[ebp], eax

; 724  : 		}
; 725  : 		else

  0206e	eb 25		 jmp	 SHORT $L182240
$L182238:

; 726  : 		{
; 727  : 			_tccpy( &pDest[nLen], pSource );

  02070	8b 4d dc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  02073	51		 push	 ecx
  02074	8b 55 d4	 mov	 edx, DWORD PTR _pDest$[ebp]
  02077	03 55 d0	 add	 edx, DWORD PTR _nLen$[ebp]
  0207a	52		 push	 edx
  0207b	e8 00 00 00 00	 call	 __tccpy
  02080	83 c4 08	 add	 esp, 8

; 728  : 			nLen += (int)_tclen( pSource );

  02083	8b 45 dc	 mov	 eax, DWORD PTR _pSource$[ebp]
  02086	50		 push	 eax
  02087	e8 00 00 00 00	 call	 __tclen
  0208c	83 c4 04	 add	 esp, 4
  0208f	03 45 d0	 add	 eax, DWORD PTR _nLen$[ebp]
  02092	89 45 d0	 mov	 DWORD PTR _nLen$[ebp], eax
$L182240:

; 729  : 		}
; 730  : 		pSource += _tclen( pSource );

  02095	8b 4d dc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  02098	51		 push	 ecx
  02099	e8 00 00 00 00	 call	 __tclen
  0209e	83 c4 04	 add	 esp, 4
  020a1	03 45 dc	 add	 eax, DWORD PTR _pSource$[ebp]
  020a4	89 45 dc	 mov	 DWORD PTR _pSource$[ebp], eax

; 731  : 		cSource = *pSource;

  020a7	8b 55 dc	 mov	 edx, DWORD PTR _pSource$[ebp]
  020aa	8a 02		 mov	 al, BYTE PTR [edx]
  020ac	88 45 cf	 mov	 BYTE PTR _cSource$[ebp], al

; 732  : 	}

  020af	e9 1d ff ff ff	 jmp	 $L182234
$L182235:

; 733  : 	csText.ReleaseBuffer(nLen);

  020b4	8b f4		 mov	 esi, esp
  020b6	8b 4d d0	 mov	 ecx, DWORD PTR _nLen$[ebp]
  020b9	51		 push	 ecx
  020ba	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  020bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z
  020c3	3b f4		 cmp	 esi, esp
  020c5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 734  : 	return csText;

  020ca	8b f4		 mov	 esi, esp
  020cc	8d 55 e4	 lea	 edx, DWORD PTR _csText$[ebp]
  020cf	52		 push	 edx
  020d0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  020d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  020d9	3b f4		 cmp	 esi, esp
  020db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  020e0	8b 45 c4	 mov	 eax, DWORD PTR $T191555[ebp]
  020e3	83 c8 01	 or	 eax, 1
  020e6	89 45 c4	 mov	 DWORD PTR $T191555[ebp], eax
  020e9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  020f0	8b f4		 mov	 esi, esp
  020f2	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  020f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  020fb	3b f4		 cmp	 esi, esp
  020fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02102	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 735  : }

  02105	52		 push	 edx
  02106	8b cd		 mov	 ecx, ebp
  02108	50		 push	 eax
  02109	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191562
  0210f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02114	58		 pop	 eax
  02115	5a		 pop	 edx
  02116	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02119	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02120	5f		 pop	 edi
  02121	5e		 pop	 esi
  02122	83 c4 40	 add	 esp, 64			; 00000040H
  02125	3b ec		 cmp	 ebp, esp
  02127	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0212c	8b e5		 mov	 esp, ebp
  0212e	5d		 pop	 ebp
  0212f	c2 0c 00	 ret	 12			; 0000000cH
$L191562:
  02132	01 00 00 00	 DD	 1
  02136	00 00 00 00	 DD	 $L191561
$L191561:
  0213a	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0213e	04 00 00 00	 DD	 4
  02142	00 00 00 00	 DD	 $L191559
$L191559:
  02146	63		 DB	 99			; 00000063H
  02147	73		 DB	 115			; 00000073H
  02148	54		 DB	 84			; 00000054H
  02149	65		 DB	 101			; 00000065H
  0214a	78		 DB	 120			; 00000078H
  0214b	74		 DB	 116			; 00000074H
  0214c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191553:
  000ae	8b f4		 mov	 esi, esp
  000b0	8d 4d e4	 lea	 ecx, DWORD PTR _csText$[ebp]
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b9	3b f4		 cmp	 esi, esp
  000bb	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z:
  000c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191558
  000c5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z ENDP ; CMarkup::x_TextToDoc
EXTRN	__imp___mbccpy:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tccpy
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tccpy	PROC NEAR					; COMDAT

; 889  : __inline void _tccpy(_PC _s1,_CPC _s2) {_mbccpy((_PUC)_s1,(_CPUC)_s2); return;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbccpy
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tccpy	ENDP
_TEXT	ENDS
xdata$x	SEGMENT
$T191576 DD	0ffffffffH
	DD	FLAT:$L191566
$T191571 DD	019930520H
	DD	01H
	DD	FLAT:$T191576
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ?anCodeLen@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAHA
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_DATA	SEGMENT
?anCodeLen@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAHA DD 03H ; `CMarkup::x_TextFromDoc'::`2'::anCodeLen
	DD	04H
	DD	03H
	DD	05H
	DD	05H
_DATA	ENDS
;	COMDAT ?szaCode@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAPADA
_DATA	SEGMENT
?szaCode@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAPADA DD FLAT:$SG182250 ; `CMarkup::x_TextFromDoc'::`2'::szaCode
	DD	FLAT:$SG182251
	DD	FLAT:$SG182252
	DD	FLAT:$SG182253
	DD	FLAT:$SG182254
_DATA	ENDS
;	COMDAT ?szSymbol@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PADA
_DATA	SEGMENT
?szSymbol@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PADA DD FLAT:$SG182259 ; `CMarkup::x_TextFromDoc'::`2'::szSymbol
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
$T191568 = -64						; size = 4
_nMatch$182272 = -60					; size = 4
_bCodeConverted$182271 = -56				; size = 4
_nChar$ = -52						; size = 4
_nCharLen$ = -48					; size = 4
_nLen$ = -44						; size = 4
_pDest$ = -40						; size = 4
_nDestSize$ = -36					; size = 4
_pSource$ = -32						; size = 4
_csText$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_nLeft$ = 12						; size = 4
_nRight$ = 16						; size = 4
?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z PROC NEAR ; CMarkup::x_TextFromDoc
; _this$ = ecx

; 738  : {

  02150	55		 push	 ebp
  02151	8b ec		 mov	 ebp, esp
  02153	6a ff		 push	 -1
  02155	68 00 00 00 00	 push	 __ehhandler$?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z
  0215a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02160	50		 push	 eax
  02161	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02168	83 ec 34	 sub	 esp, 52			; 00000034H
  0216b	56		 push	 esi
  0216c	57		 push	 edi
  0216d	51		 push	 ecx
  0216e	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  02171	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  02176	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0217b	f3 ab		 rep stosd
  0217d	59		 pop	 ecx
  0217e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  02181	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T191568[ebp], 0

; 739  : 	// Convert XML friendly text to text as seen outside XML document
; 740  : 	// ampersand escape codes replaced with special characters e.g. convert "6&gt;7" to "6>7"
; 741  : 	// Conveniently the result is always the same or shorter in byte length
; 742  : 	//
; 743  : 	static _TCHAR* szaCode[] = { _T("lt;"),_T("amp;"),_T("gt;"),_T("apos;"),_T("quot;") };
; 744  : 	static int anCodeLen[] = { 3,4,3,5,5 };
; 745  : 	static _TCHAR* szSymbol = _T("<&>\'\"");
; 746  : 	CString csText;

  02188	8b f4		 mov	 esi, esp
  0218a	8d 4d e8	 lea	 ecx, DWORD PTR _csText$[ebp]
  0218d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02193	3b f4		 cmp	 esi, esp
  02195	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0219a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 747  : 	const _TCHAR* pSource = m_csDoc;

  021a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  021a4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  021a7	8b f4		 mov	 esi, esp
  021a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  021af	3b f4		 cmp	 esi, esp
  021b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  021b6	89 45 e0	 mov	 DWORD PTR _pSource$[ebp], eax

; 748  : 	int nDestSize = nRight - nLeft + 1;

  021b9	8b 45 10	 mov	 eax, DWORD PTR _nRight$[ebp]
  021bc	2b 45 0c	 sub	 eax, DWORD PTR _nLeft$[ebp]
  021bf	83 c0 01	 add	 eax, 1
  021c2	89 45 dc	 mov	 DWORD PTR _nDestSize$[ebp], eax

; 749  : 	_TCHAR* pDest = csText.GetBuffer(nDestSize);

  021c5	8b f4		 mov	 esi, esp
  021c7	8b 4d dc	 mov	 ecx, DWORD PTR _nDestSize$[ebp]
  021ca	51		 push	 ecx
  021cb	8d 4d e8	 lea	 ecx, DWORD PTR _csText$[ebp]
  021ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z
  021d4	3b f4		 cmp	 esi, esp
  021d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  021db	89 45 d8	 mov	 DWORD PTR _pDest$[ebp], eax

; 750  : 	int nLen = 0;

  021de	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 751  : 	int nCharLen;
; 752  : 	int nChar = nLeft;

  021e5	8b 55 0c	 mov	 edx, DWORD PTR _nLeft$[ebp]
  021e8	89 55 cc	 mov	 DWORD PTR _nChar$[ebp], edx
$L182268:

; 753  : 	while ( nChar <= nRight )

  021eb	8b 45 cc	 mov	 eax, DWORD PTR _nChar$[ebp]
  021ee	3b 45 10	 cmp	 eax, DWORD PTR _nRight$[ebp]
  021f1	0f 8f 10 01 00
	00		 jg	 $L182269

; 754  : 	{
; 755  : 		if ( pSource[nChar] == _T('&') )

  021f7	8b 4d e0	 mov	 ecx, DWORD PTR _pSource$[ebp]
  021fa	03 4d cc	 add	 ecx, DWORD PTR _nChar$[ebp]
  021fd	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  02200	83 fa 26	 cmp	 edx, 38			; 00000026H
  02203	0f 85 bf 00 00
	00		 jne	 $L182270

; 756  : 		{
; 757  : 			// Look for matching &code;
; 758  : 			BOOL bCodeConverted = false;

  02209	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _bCodeConverted$182271[ebp], 0

; 759  : 			for ( int nMatch = 0; nMatch < 5; ++nMatch )

  02210	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _nMatch$182272[ebp], 0
  02217	eb 09		 jmp	 SHORT $L182273
$L182274:
  02219	8b 45 c4	 mov	 eax, DWORD PTR _nMatch$182272[ebp]
  0221c	83 c0 01	 add	 eax, 1
  0221f	89 45 c4	 mov	 DWORD PTR _nMatch$182272[ebp], eax
$L182273:
  02222	83 7d c4 05	 cmp	 DWORD PTR _nMatch$182272[ebp], 5
  02226	7d 7d		 jge	 SHORT $L182275

; 760  : 			{
; 761  : 				if ( nChar <= nRight - anCodeLen[nMatch]
; 762  : 					&& _tcsncmp(szaCode[nMatch],&pSource[nChar+1],anCodeLen[nMatch]) == 0 )

  02228	8b 4d c4	 mov	 ecx, DWORD PTR _nMatch$182272[ebp]
  0222b	8b 55 10	 mov	 edx, DWORD PTR _nRight$[ebp]
  0222e	2b 14 8d 00 00
	00 00		 sub	 edx, DWORD PTR ?anCodeLen@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAHA[ecx*4]
  02235	39 55 cc	 cmp	 DWORD PTR _nChar$[ebp], edx
  02238	7f 66		 jg	 SHORT $L182276
  0223a	8b 45 c4	 mov	 eax, DWORD PTR _nMatch$182272[ebp]
  0223d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?anCodeLen@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAHA[eax*4]
  02244	51		 push	 ecx
  02245	8b 55 cc	 mov	 edx, DWORD PTR _nChar$[ebp]
  02248	8b 45 e0	 mov	 eax, DWORD PTR _pSource$[ebp]
  0224b	8d 4c 10 01	 lea	 ecx, DWORD PTR [eax+edx+1]
  0224f	51		 push	 ecx
  02250	8b 55 c4	 mov	 edx, DWORD PTR _nMatch$182272[ebp]
  02253	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?szaCode@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAPADA[edx*4]
  0225a	50		 push	 eax
  0225b	e8 00 00 00 00	 call	 __tcsncmp
  02260	83 c4 0c	 add	 esp, 12			; 0000000cH
  02263	85 c0		 test	 eax, eax
  02265	75 39		 jne	 SHORT $L182276

; 763  : 				{
; 764  : 					// Insert symbol and increment index past ampersand semi-colon
; 765  : 					pDest[nLen++] = szSymbol[nMatch];

  02267	8b 4d d8	 mov	 ecx, DWORD PTR _pDest$[ebp]
  0226a	03 4d d4	 add	 ecx, DWORD PTR _nLen$[ebp]
  0226d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?szSymbol@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PADA
  02273	03 55 c4	 add	 edx, DWORD PTR _nMatch$182272[ebp]
  02276	8a 02		 mov	 al, BYTE PTR [edx]
  02278	88 01		 mov	 BYTE PTR [ecx], al
  0227a	8b 4d d4	 mov	 ecx, DWORD PTR _nLen$[ebp]
  0227d	83 c1 01	 add	 ecx, 1
  02280	89 4d d4	 mov	 DWORD PTR _nLen$[ebp], ecx

; 766  : 					nChar += anCodeLen[nMatch] + 1;

  02283	8b 55 c4	 mov	 edx, DWORD PTR _nMatch$182272[ebp]
  02286	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?anCodeLen@?1??x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z@4PAHA[edx*4]
  0228d	8b 4d cc	 mov	 ecx, DWORD PTR _nChar$[ebp]
  02290	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  02294	89 55 cc	 mov	 DWORD PTR _nChar$[ebp], edx

; 767  : 					bCodeConverted = true;

  02297	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _bCodeConverted$182271[ebp], 1

; 768  : 					break;

  0229e	eb 05		 jmp	 SHORT $L182275
$L182276:

; 769  : 				}
; 770  : 			}

  022a0	e9 74 ff ff ff	 jmp	 $L182274
$L182275:

; 771  : 
; 772  : 			// If the code is not converted, leave it as is
; 773  : 			if ( ! bCodeConverted )

  022a5	83 7d c8 00	 cmp	 DWORD PTR _bCodeConverted$182271[ebp], 0
  022a9	75 1b		 jne	 SHORT $L182277

; 774  : 			{
; 775  : 				pDest[nLen++] = _T('&');

  022ab	8b 45 d8	 mov	 eax, DWORD PTR _pDest$[ebp]
  022ae	03 45 d4	 add	 eax, DWORD PTR _nLen$[ebp]
  022b1	c6 00 26	 mov	 BYTE PTR [eax], 38	; 00000026H
  022b4	8b 4d d4	 mov	 ecx, DWORD PTR _nLen$[ebp]
  022b7	83 c1 01	 add	 ecx, 1
  022ba	89 4d d4	 mov	 DWORD PTR _nLen$[ebp], ecx

; 776  : 				++nChar;

  022bd	8b 55 cc	 mov	 edx, DWORD PTR _nChar$[ebp]
  022c0	83 c2 01	 add	 edx, 1
  022c3	89 55 cc	 mov	 DWORD PTR _nChar$[ebp], edx
$L182277:

; 777  : 			}
; 778  : 		}
; 779  : 		else // not &

  022c6	eb 3a		 jmp	 SHORT $L182278
$L182270:

; 780  : 		{
; 781  : 			nCharLen = (int)_tclen(&pSource[nChar]);

  022c8	8b 45 e0	 mov	 eax, DWORD PTR _pSource$[ebp]
  022cb	03 45 cc	 add	 eax, DWORD PTR _nChar$[ebp]
  022ce	50		 push	 eax
  022cf	e8 00 00 00 00	 call	 __tclen
  022d4	83 c4 04	 add	 esp, 4
  022d7	89 45 d0	 mov	 DWORD PTR _nCharLen$[ebp], eax

; 782  : 			_tccpy( &pDest[nLen], &pSource[nChar] );

  022da	8b 4d e0	 mov	 ecx, DWORD PTR _pSource$[ebp]
  022dd	03 4d cc	 add	 ecx, DWORD PTR _nChar$[ebp]
  022e0	51		 push	 ecx
  022e1	8b 55 d8	 mov	 edx, DWORD PTR _pDest$[ebp]
  022e4	03 55 d4	 add	 edx, DWORD PTR _nLen$[ebp]
  022e7	52		 push	 edx
  022e8	e8 00 00 00 00	 call	 __tccpy
  022ed	83 c4 08	 add	 esp, 8

; 783  : 			nLen += nCharLen;

  022f0	8b 45 d4	 mov	 eax, DWORD PTR _nLen$[ebp]
  022f3	03 45 d0	 add	 eax, DWORD PTR _nCharLen$[ebp]
  022f6	89 45 d4	 mov	 DWORD PTR _nLen$[ebp], eax

; 784  : 			nChar += nCharLen;

  022f9	8b 4d cc	 mov	 ecx, DWORD PTR _nChar$[ebp]
  022fc	03 4d d0	 add	 ecx, DWORD PTR _nCharLen$[ebp]
  022ff	89 4d cc	 mov	 DWORD PTR _nChar$[ebp], ecx
$L182278:

; 785  : 		}
; 786  : 	}

  02302	e9 e4 fe ff ff	 jmp	 $L182268
$L182269:

; 787  : 	csText.ReleaseBuffer(nLen);

  02307	8b f4		 mov	 esi, esp
  02309	8b 55 d4	 mov	 edx, DWORD PTR _nLen$[ebp]
  0230c	52		 push	 edx
  0230d	8d 4d e8	 lea	 ecx, DWORD PTR _csText$[ebp]
  02310	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z
  02316	3b f4		 cmp	 esi, esp
  02318	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 788  : 	return csText;

  0231d	8b f4		 mov	 esi, esp
  0231f	8d 45 e8	 lea	 eax, DWORD PTR _csText$[ebp]
  02322	50		 push	 eax
  02323	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  02326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0232c	3b f4		 cmp	 esi, esp
  0232e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02333	8b 4d c0	 mov	 ecx, DWORD PTR $T191568[ebp]
  02336	83 c9 01	 or	 ecx, 1
  02339	89 4d c0	 mov	 DWORD PTR $T191568[ebp], ecx
  0233c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02343	8b f4		 mov	 esi, esp
  02345	8d 4d e8	 lea	 ecx, DWORD PTR _csText$[ebp]
  02348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0234e	3b f4		 cmp	 esi, esp
  02350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02355	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 789  : }

  02358	52		 push	 edx
  02359	8b cd		 mov	 ecx, ebp
  0235b	50		 push	 eax
  0235c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191575
  02362	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02367	58		 pop	 eax
  02368	5a		 pop	 edx
  02369	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0236c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02373	5f		 pop	 edi
  02374	5e		 pop	 esi
  02375	83 c4 40	 add	 esp, 64			; 00000040H
  02378	3b ec		 cmp	 ebp, esp
  0237a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0237f	8b e5		 mov	 esp, ebp
  02381	5d		 pop	 ebp
  02382	c2 0c 00	 ret	 12			; 0000000cH
$L191575:
  02385	01 00 00 00	 DD	 1
  02389	00 00 00 00	 DD	 $L191574
$L191574:
  0238d	e8 ff ff ff	 DD	 -24			; ffffffe8H
  02391	04 00 00 00	 DD	 4
  02395	00 00 00 00	 DD	 $L191572
$L191572:
  02399	63		 DB	 99			; 00000063H
  0239a	73		 DB	 115			; 00000073H
  0239b	54		 DB	 84			; 00000054H
  0239c	65		 DB	 101			; 00000065H
  0239d	78		 DB	 120			; 00000078H
  0239e	74		 DB	 116			; 00000074H
  0239f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191566:
  000ca	8b f4		 mov	 esi, esp
  000cc	8d 4d e8	 lea	 ecx, DWORD PTR _csText$[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d5	3b f4		 cmp	 esi, esp
  000d7	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z:
  000dc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191571
  000e1	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?x_TextFromDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@HH@Z ENDP ; CMarkup::x_TextFromDoc
EXTRN	_memcpy:NEAR
EXTRN	__imp__memmove:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv84 = -48						; size = 4
tv85 = -44						; size = 4
tv79 = -40						; size = 4
tv74 = -36						; size = 4
tv75 = -32						; size = 4
tv71 = -28						; size = 4
_pDoc$ = -24						; size = 4
_nBufferLen$ = -20					; size = 4
_nNewLength$ = -16					; size = 4
_nInsLength$ = -12					; size = 4
_nDocLength$ = -8					; size = 4
_this$ = -4						; size = 4
_nLeft$ = 8						; size = 4
_nReplace$ = 12						; size = 4
_csInsert$ = 16						; size = 4
?x_DocChange@CMarkup@@IAEXHHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CMarkup::x_DocChange
; _this$ = ecx

; 792  : {

  023a0	55		 push	 ebp
  023a1	8b ec		 mov	 ebp, esp
  023a3	83 ec 30	 sub	 esp, 48			; 00000030H
  023a6	56		 push	 esi
  023a7	57		 push	 edi
  023a8	51		 push	 ecx
  023a9	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  023ac	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  023b1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  023b6	f3 ab		 rep stosd
  023b8	59		 pop	 ecx
  023b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 793  : 	// Insert csInsert int m_csDoc at nLeft replacing nReplace chars
; 794  : 	// Do this with only one buffer reallocation if it grows
; 795  : 	//
; 796  : 	int nDocLength = m_csDoc.GetLength();

  023bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023bf	83 c1 0c	 add	 ecx, 12			; 0000000cH
  023c2	8b f4		 mov	 esi, esp
  023c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  023ca	3b f4		 cmp	 esi, esp
  023cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  023d1	89 45 f8	 mov	 DWORD PTR _nDocLength$[ebp], eax

; 797  : 	int nInsLength = csInsert.GetLength();

  023d4	8b f4		 mov	 esi, esp
  023d6	8b 4d 10	 mov	 ecx, DWORD PTR _csInsert$[ebp]
  023d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  023df	3b f4		 cmp	 esi, esp
  023e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  023e6	89 45 f4	 mov	 DWORD PTR _nInsLength$[ebp], eax

; 798  : 
; 799  : 	// Make sure nLeft and nReplace are within bounds
; 800  : 	nLeft = max( 0, min( nLeft, nDocLength ) );

  023e9	8b 45 08	 mov	 eax, DWORD PTR _nLeft$[ebp]
  023ec	3b 45 f8	 cmp	 eax, DWORD PTR _nDocLength$[ebp]
  023ef	7d 08		 jge	 SHORT $L191578
  023f1	8b 4d 08	 mov	 ecx, DWORD PTR _nLeft$[ebp]
  023f4	89 4d e4	 mov	 DWORD PTR tv71[ebp], ecx
  023f7	eb 06		 jmp	 SHORT $L191579
$L191578:
  023f9	8b 55 f8	 mov	 edx, DWORD PTR _nDocLength$[ebp]
  023fc	89 55 e4	 mov	 DWORD PTR tv71[ebp], edx
$L191579:
  023ff	83 7d e4 00	 cmp	 DWORD PTR tv71[ebp], 0
  02403	7d 09		 jge	 SHORT $L191582
  02405	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
  0240c	eb 1c		 jmp	 SHORT $L191583
$L191582:
  0240e	8b 45 08	 mov	 eax, DWORD PTR _nLeft$[ebp]
  02411	3b 45 f8	 cmp	 eax, DWORD PTR _nDocLength$[ebp]
  02414	7d 08		 jge	 SHORT $L191580
  02416	8b 4d 08	 mov	 ecx, DWORD PTR _nLeft$[ebp]
  02419	89 4d dc	 mov	 DWORD PTR tv74[ebp], ecx
  0241c	eb 06		 jmp	 SHORT $L191581
$L191580:
  0241e	8b 55 f8	 mov	 edx, DWORD PTR _nDocLength$[ebp]
  02421	89 55 dc	 mov	 DWORD PTR tv74[ebp], edx
$L191581:
  02424	8b 45 dc	 mov	 eax, DWORD PTR tv74[ebp]
  02427	89 45 e0	 mov	 DWORD PTR tv75[ebp], eax
$L191583:
  0242a	8b 4d e0	 mov	 ecx, DWORD PTR tv75[ebp]
  0242d	89 4d 08	 mov	 DWORD PTR _nLeft$[ebp], ecx

; 801  : 	nReplace = max( 0, min( nReplace, nDocLength-nLeft ) );

  02430	8b 55 f8	 mov	 edx, DWORD PTR _nDocLength$[ebp]
  02433	2b 55 08	 sub	 edx, DWORD PTR _nLeft$[ebp]
  02436	39 55 0c	 cmp	 DWORD PTR _nReplace$[ebp], edx
  02439	7d 08		 jge	 SHORT $L191584
  0243b	8b 45 0c	 mov	 eax, DWORD PTR _nReplace$[ebp]
  0243e	89 45 d8	 mov	 DWORD PTR tv79[ebp], eax
  02441	eb 09		 jmp	 SHORT $L191585
$L191584:
  02443	8b 4d f8	 mov	 ecx, DWORD PTR _nDocLength$[ebp]
  02446	2b 4d 08	 sub	 ecx, DWORD PTR _nLeft$[ebp]
  02449	89 4d d8	 mov	 DWORD PTR tv79[ebp], ecx
$L191585:
  0244c	83 7d d8 00	 cmp	 DWORD PTR tv79[ebp], 0
  02450	7d 09		 jge	 SHORT $L191588
  02452	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
  02459	eb 22		 jmp	 SHORT $L191589
$L191588:
  0245b	8b 55 f8	 mov	 edx, DWORD PTR _nDocLength$[ebp]
  0245e	2b 55 08	 sub	 edx, DWORD PTR _nLeft$[ebp]
  02461	39 55 0c	 cmp	 DWORD PTR _nReplace$[ebp], edx
  02464	7d 08		 jge	 SHORT $L191586
  02466	8b 45 0c	 mov	 eax, DWORD PTR _nReplace$[ebp]
  02469	89 45 d0	 mov	 DWORD PTR tv84[ebp], eax
  0246c	eb 09		 jmp	 SHORT $L191587
$L191586:
  0246e	8b 4d f8	 mov	 ecx, DWORD PTR _nDocLength$[ebp]
  02471	2b 4d 08	 sub	 ecx, DWORD PTR _nLeft$[ebp]
  02474	89 4d d0	 mov	 DWORD PTR tv84[ebp], ecx
$L191587:
  02477	8b 55 d0	 mov	 edx, DWORD PTR tv84[ebp]
  0247a	89 55 d4	 mov	 DWORD PTR tv85[ebp], edx
$L191589:
  0247d	8b 45 d4	 mov	 eax, DWORD PTR tv85[ebp]
  02480	89 45 0c	 mov	 DWORD PTR _nReplace$[ebp], eax

; 802  : 
; 803  : 	// Get pointer to buffer with enough room
; 804  : 	int nNewLength = nInsLength + nDocLength - nReplace;

  02483	8b 4d f4	 mov	 ecx, DWORD PTR _nInsLength$[ebp]
  02486	03 4d f8	 add	 ecx, DWORD PTR _nDocLength$[ebp]
  02489	2b 4d 0c	 sub	 ecx, DWORD PTR _nReplace$[ebp]
  0248c	89 4d f0	 mov	 DWORD PTR _nNewLength$[ebp], ecx

; 805  : 	int nBufferLen = nNewLength;

  0248f	8b 55 f0	 mov	 edx, DWORD PTR _nNewLength$[ebp]
  02492	89 55 ec	 mov	 DWORD PTR _nBufferLen$[ebp], edx

; 806  : 	_TCHAR* pDoc = m_csDoc.GetBuffer( nBufferLen );

  02495	8b f4		 mov	 esi, esp
  02497	8b 45 ec	 mov	 eax, DWORD PTR _nBufferLen$[ebp]
  0249a	50		 push	 eax
  0249b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0249e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  024a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z
  024a7	3b f4		 cmp	 esi, esp
  024a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  024ae	89 45 e8	 mov	 DWORD PTR _pDoc$[ebp], eax

; 807  : 
; 808  : 	// Move part of old doc that goes after insert
; 809  : 	if ( nLeft+nReplace < nDocLength )

  024b1	8b 4d 08	 mov	 ecx, DWORD PTR _nLeft$[ebp]
  024b4	03 4d 0c	 add	 ecx, DWORD PTR _nReplace$[ebp]
  024b7	3b 4d f8	 cmp	 ecx, DWORD PTR _nDocLength$[ebp]
  024ba	7d 30		 jge	 SHORT $L182291

; 810  : 		memmove( &pDoc[nLeft+nInsLength], &pDoc[nLeft+nReplace], (nDocLength-nLeft-nReplace)*sizeof(_TCHAR) );

  024bc	8b 55 f8	 mov	 edx, DWORD PTR _nDocLength$[ebp]
  024bf	2b 55 08	 sub	 edx, DWORD PTR _nLeft$[ebp]
  024c2	2b 55 0c	 sub	 edx, DWORD PTR _nReplace$[ebp]
  024c5	8b f4		 mov	 esi, esp
  024c7	52		 push	 edx
  024c8	8b 45 08	 mov	 eax, DWORD PTR _nLeft$[ebp]
  024cb	03 45 0c	 add	 eax, DWORD PTR _nReplace$[ebp]
  024ce	03 45 e8	 add	 eax, DWORD PTR _pDoc$[ebp]
  024d1	50		 push	 eax
  024d2	8b 4d 08	 mov	 ecx, DWORD PTR _nLeft$[ebp]
  024d5	03 4d f4	 add	 ecx, DWORD PTR _nInsLength$[ebp]
  024d8	03 4d e8	 add	 ecx, DWORD PTR _pDoc$[ebp]
  024db	51		 push	 ecx
  024dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  024e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  024e5	3b f4		 cmp	 esi, esp
  024e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L182291:

; 811  : 
; 812  : 	// Copy insert
; 813  : 	memcpy( &pDoc[nLeft], csInsert, nInsLength*sizeof(_TCHAR) );

  024ec	8b 55 f4	 mov	 edx, DWORD PTR _nInsLength$[ebp]
  024ef	52		 push	 edx
  024f0	8b f4		 mov	 esi, esp
  024f2	8b 4d 10	 mov	 ecx, DWORD PTR _csInsert$[ebp]
  024f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  024fb	3b f4		 cmp	 esi, esp
  024fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02502	50		 push	 eax
  02503	8b 45 e8	 mov	 eax, DWORD PTR _pDoc$[ebp]
  02506	03 45 08	 add	 eax, DWORD PTR _nLeft$[ebp]
  02509	50		 push	 eax
  0250a	e8 00 00 00 00	 call	 _memcpy
  0250f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 814  : 
; 815  : 	// Release
; 816  : 	m_csDoc.ReleaseBuffer( nNewLength );

  02512	8b f4		 mov	 esi, esp
  02514	8b 4d f0	 mov	 ecx, DWORD PTR _nNewLength$[ebp]
  02517	51		 push	 ecx
  02518	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0251b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0251e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z
  02524	3b f4		 cmp	 esi, esp
  02526	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 817  : }

  0252b	5f		 pop	 edi
  0252c	5e		 pop	 esi
  0252d	83 c4 30	 add	 esp, 48			; 00000030H
  02530	3b ec		 cmp	 ebp, esp
  02532	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02537	8b e5		 mov	 esp, ebp
  02539	5d		 pop	 ebp
  0253a	c2 0c 00	 ret	 12			; 0000000cH
?x_DocChange@CMarkup@@IAEXHHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CMarkup::x_DocChange
_TEXT	ENDS
PUBLIC	?AdjustStart@ElemPos@CMarkup@@QAEXH@Z		; CMarkup::ElemPos::AdjustStart
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_bPosTop$182305 = -10					; size = 1
_bPosFirst$ = -9					; size = 1
_iPosTop$ = -8						; size = 4
_this$ = -4						; size = 4
_iPos$ = 8						; size = 4
_nShift$ = 12						; size = 4
_bAfterPos$ = 16					; size = 1
?x_Adjust@CMarkup@@IAEXHH_N@Z PROC NEAR			; CMarkup::x_Adjust
; _this$ = ecx

; 820  : {

  02540	55		 push	 ebp
  02541	8b ec		 mov	 ebp, esp
  02543	83 ec 0c	 sub	 esp, 12			; 0000000cH
  02546	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0254d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  02554	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0255b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 821  : 	// Loop through affected elements and adjust indexes
; 822  : 	// Algorithm:
; 823  : 	// 1. update children unless bAfterPos
; 824  : 	//    (if no children or bAfterPos is true, end tag of iPos not affected)
; 825  : 	// 2. update next siblings and their children
; 826  : 	// 3. go up until there is a next sibling of a parent and update end tags
; 827  : 	// 4. step 2
; 828  : 	int iPosTop = m_aPos[iPos].iElemParent;

  0255e	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  02561	50		 push	 eax
  02562	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02565	83 c1 14	 add	 ecx, 20			; 00000014H
  02568	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0256d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  02570	89 4d f8	 mov	 DWORD PTR _iPosTop$[ebp], ecx

; 829  : 	bool bPosFirst = bAfterPos; // mark as first to skip its children

  02573	8a 55 10	 mov	 dl, BYTE PTR _bAfterPos$[ebp]
  02576	88 55 f7	 mov	 BYTE PTR _bPosFirst$[ebp], dl
$L182303:

; 830  : 	while ( iPos )

  02579	83 7d 08 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  0257d	0f 84 23 01 00
	00		 je	 $L182299

; 831  : 	{
; 832  : 		// Were we at containing parent of affected position?
; 833  : 		bool bPosTop = false;

  02583	c6 45 f6 00	 mov	 BYTE PTR _bPosTop$182305[ebp], 0

; 834  : 		if ( iPos == iPosTop )

  02587	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  0258a	3b 45 f8	 cmp	 eax, DWORD PTR _iPosTop$[ebp]
  0258d	75 19		 jne	 SHORT $L182306

; 835  : 		{
; 836  : 			// Move iPosTop up one towards root
; 837  : 			iPosTop = m_aPos[iPos].iElemParent;

  0258f	8b 4d 08	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02592	51		 push	 ecx
  02593	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02596	83 c1 14	 add	 ecx, 20			; 00000014H
  02599	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0259e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  025a1	89 55 f8	 mov	 DWORD PTR _iPosTop$[ebp], edx

; 838  : 			bPosTop = true;

  025a4	c6 45 f6 01	 mov	 BYTE PTR _bPosTop$182305[ebp], 1
$L182306:

; 839  : 		}
; 840  : 
; 841  : 		// Traverse to the next update position
; 842  : 		if ( ! bPosTop && ! bPosFirst && m_aPos[iPos].iElemChild )

  025a8	0f b6 45 f6	 movzx	 eax, BYTE PTR _bPosTop$182305[ebp]
  025ac	85 c0		 test	 eax, eax
  025ae	75 34		 jne	 SHORT $L182307
  025b0	0f b6 4d f7	 movzx	 ecx, BYTE PTR _bPosFirst$[ebp]
  025b4	85 c9		 test	 ecx, ecx
  025b6	75 2c		 jne	 SHORT $L182307
  025b8	8b 55 08	 mov	 edx, DWORD PTR _iPos$[ebp]
  025bb	52		 push	 edx
  025bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025bf	83 c1 14	 add	 ecx, 20			; 00000014H
  025c2	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  025c7	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  025cb	74 17		 je	 SHORT $L182307

; 843  : 		{
; 844  : 			// Depth first
; 845  : 			iPos = m_aPos[iPos].iElemChild;

  025cd	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  025d0	50		 push	 eax
  025d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025d4	83 c1 14	 add	 ecx, 20			; 00000014H
  025d7	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  025dc	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  025df	89 4d 08	 mov	 DWORD PTR _iPos$[ebp], ecx

; 846  : 		}
; 847  : 		else if ( m_aPos[iPos].iElemNext )

  025e2	eb 7d		 jmp	 SHORT $L182308
$L182307:
  025e4	8b 55 08	 mov	 edx, DWORD PTR _iPos$[ebp]
  025e7	52		 push	 edx
  025e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025eb	83 c1 14	 add	 ecx, 20			; 00000014H
  025ee	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  025f3	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  025f7	74 17		 je	 SHORT $L182312

; 848  : 		{
; 849  : 			iPos = m_aPos[iPos].iElemNext;

  025f9	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  025fc	50		 push	 eax
  025fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02600	83 c1 14	 add	 ecx, 20			; 00000014H
  02603	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02608	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0260b	89 4d 08	 mov	 DWORD PTR _iPos$[ebp], ecx

; 850  : 		}
; 851  : 		else

  0260e	eb 51		 jmp	 SHORT $L182308
$L182312:

; 852  : 		{
; 853  : 			// Look for next sibling of a parent of iPos
; 854  : 			// When going back up, parents have already been done except iPosTop
; 855  : 			while ( (iPos=m_aPos[iPos].iElemParent) != 0 && iPos != iPosTop )

  02610	8b 55 08	 mov	 edx, DWORD PTR _iPos$[ebp]
  02613	52		 push	 edx
  02614	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02617	83 c1 14	 add	 ecx, 20			; 00000014H
  0261a	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0261f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  02622	89 45 08	 mov	 DWORD PTR _iPos$[ebp], eax
  02625	83 7d 08 00	 cmp	 DWORD PTR _iPos$[ebp], 0
  02629	74 36		 je	 SHORT $L182308
  0262b	8b 4d 08	 mov	 ecx, DWORD PTR _iPos$[ebp]
  0262e	3b 4d f8	 cmp	 ecx, DWORD PTR _iPosTop$[ebp]
  02631	74 2e		 je	 SHORT $L182308

; 856  : 				if ( m_aPos[iPos].iElemNext )

  02633	8b 55 08	 mov	 edx, DWORD PTR _iPos$[ebp]
  02636	52		 push	 edx
  02637	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0263a	83 c1 14	 add	 ecx, 20			; 00000014H
  0263d	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02642	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  02646	74 17		 je	 SHORT $L182314

; 857  : 				{
; 858  : 					iPos = m_aPos[iPos].iElemNext;

  02648	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  0264b	50		 push	 eax
  0264c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0264f	83 c1 14	 add	 ecx, 20			; 00000014H
  02652	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02657	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0265a	89 4d 08	 mov	 DWORD PTR _iPos$[ebp], ecx

; 859  : 					break;

  0265d	eb 02		 jmp	 SHORT $L182308
$L182314:

; 860  : 				}
; 861  : 		}

  0265f	eb af		 jmp	 SHORT $L182312
$L182308:

; 862  : 		bPosFirst = false;

  02661	c6 45 f7 00	 mov	 BYTE PTR _bPosFirst$[ebp], 0

; 863  : 
; 864  : 		// Shift indexes at iPos
; 865  : 		if ( iPos != iPosTop )

  02665	8b 55 08	 mov	 edx, DWORD PTR _iPos$[ebp]
  02668	3b 55 f8	 cmp	 edx, DWORD PTR _iPosTop$[ebp]
  0266b	74 1a		 je	 SHORT $L182315

; 866  : 			m_aPos[iPos].AdjustStart( nShift );

  0266d	8b 45 0c	 mov	 eax, DWORD PTR _nShift$[ebp]
  02670	50		 push	 eax
  02671	8b 4d 08	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02674	51		 push	 ecx
  02675	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02678	83 c1 14	 add	 ecx, 20			; 00000014H
  0267b	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02680	8b c8		 mov	 ecx, eax
  02682	e8 00 00 00 00	 call	 ?AdjustStart@ElemPos@CMarkup@@QAEXH@Z ; CMarkup::ElemPos::AdjustStart
$L182315:

; 867  : 		m_aPos[iPos].AdjustEnd( nShift );

  02687	8b 55 0c	 mov	 edx, DWORD PTR _nShift$[ebp]
  0268a	52		 push	 edx
  0268b	8b 45 08	 mov	 eax, DWORD PTR _iPos$[ebp]
  0268e	50		 push	 eax
  0268f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02692	83 c1 14	 add	 ecx, 20			; 00000014H
  02695	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0269a	8b c8		 mov	 ecx, eax
  0269c	e8 00 00 00 00	 call	 ?AdjustEnd@ElemPos@CMarkup@@QAEXH@Z ; CMarkup::ElemPos::AdjustEnd

; 868  : 	}

  026a1	e9 d3 fe ff ff	 jmp	 $L182303
$L182299:

; 869  : }

  026a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  026a9	3b ec		 cmp	 ebp, esp
  026ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  026b0	8b e5		 mov	 esp, ebp
  026b2	5d		 pop	 ebp
  026b3	c2 0c 00	 ret	 12			; 0000000cH
?x_Adjust@CMarkup@@IAEXHH_N@Z ENDP			; CMarkup::x_Adjust
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.h
_TEXT	ENDS
;	COMDAT ?AdjustStart@ElemPos@CMarkup@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?AdjustStart@ElemPos@CMarkup@@QAEXH@Z PROC NEAR		; CMarkup::ElemPos::AdjustStart, COMDAT
; _this$ = ecx

; 94   : 		void AdjustStart( int n ) { nStartL+=n; nStartR+=n; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	03 4d 08	 add	 ecx, DWORD PTR _n$[ebp]
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	89 0a		 mov	 DWORD PTR [edx], ecx
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	03 4d 08	 add	 ecx, DWORD PTR _n$[ebp]
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AdjustStart@ElemPos@CMarkup@@QAEXH@Z ENDP		; CMarkup::ElemPos::AdjustStart
_TEXT	ENDS
PUBLIC	?x_LocateNew@CMarkup@@IAEXHAAH0HH@Z		; CMarkup::x_LocateNew
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.cpp
_TEXT	SEGMENT
_iPosNext$182362 = -44					; size = 4
_iPosLast$182361 = -40					; size = 4
_iPosPrev$182352 = -36					; size = 4
_iPosBefore$ = -32					; size = 4
_nChar$182346 = -24					; size = 4
_szDoc$182344 = -16					; size = 4
_nStartL$ = -12						; size = 4
_bHonorWhitespace$ = -6					; size = 1
_bInsert$ = -5						; size = 1
_this$ = -4						; size = 4
_iPosParent$ = 8					; size = 4
_iPosRel$ = 12						; size = 4
_nOffset$ = 16						; size = 4
_nLength$ = 20						; size = 4
_nFlags$ = 24						; size = 4
?x_LocateNew@CMarkup@@IAEXHAAH0HH@Z PROC NEAR		; CMarkup::x_LocateNew
; _this$ = ecx

; 872  : {

  026c0	55		 push	 ebp
  026c1	8b ec		 mov	 ebp, esp
  026c3	83 ec 2c	 sub	 esp, 44			; 0000002cH
  026c6	56		 push	 esi
  026c7	57		 push	 edi
  026c8	51		 push	 ecx
  026c9	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  026cc	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  026d1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  026d6	f3 ab		 rep stosd
  026d8	59		 pop	 ecx
  026d9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 873  : 	// Determine where to insert new element or node
; 874  : 	//
; 875  : 	bool bInsert = (nFlags&1)?true:false;

  026dc	8b 45 18	 mov	 eax, DWORD PTR _nFlags$[ebp]
  026df	83 e0 01	 and	 eax, 1
  026e2	0f 95 c1	 setne	 cl
  026e5	88 4d fb	 mov	 BYTE PTR _bInsert$[ebp], cl

; 876  : 	bool bHonorWhitespace = (nFlags&2)?true:false;

  026e8	8b 55 18	 mov	 edx, DWORD PTR _nFlags$[ebp]
  026eb	83 e2 02	 and	 edx, 2
  026ee	0f 95 c0	 setne	 al
  026f1	88 45 fa	 mov	 BYTE PTR _bHonorWhitespace$[ebp], al

; 877  : 
; 878  : 	int nStartL;
; 879  : 	if ( nLength )

  026f4	83 7d 14 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  026f8	74 22		 je	 SHORT $L182327

; 880  : 	{
; 881  : 		// Located at a non-element node
; 882  : 		if ( bInsert )

  026fa	0f b6 4d fb	 movzx	 ecx, BYTE PTR _bInsert$[ebp]
  026fe	85 c9		 test	 ecx, ecx
  02700	74 0a		 je	 SHORT $L182328

; 883  : 			nStartL = nOffset;

  02702	8b 55 10	 mov	 edx, DWORD PTR _nOffset$[ebp]
  02705	8b 02		 mov	 eax, DWORD PTR [edx]
  02707	89 45 f4	 mov	 DWORD PTR _nStartL$[ebp], eax

; 884  : 		else

  0270a	eb 0b		 jmp	 SHORT $L182329
$L182328:

; 885  : 			nStartL = nOffset + nLength;

  0270c	8b 4d 10	 mov	 ecx, DWORD PTR _nOffset$[ebp]
  0270f	8b 11		 mov	 edx, DWORD PTR [ecx]
  02711	03 55 14	 add	 edx, DWORD PTR _nLength$[ebp]
  02714	89 55 f4	 mov	 DWORD PTR _nStartL$[ebp], edx
$L182329:

; 886  : 	}
; 887  : 	else if ( iPosRel )

  02717	e9 e3 00 00 00	 jmp	 $L182330
$L182327:
  0271c	8b 45 0c	 mov	 eax, DWORD PTR _iPosRel$[ebp]
  0271f	83 38 00	 cmp	 DWORD PTR [eax], 0
  02722	74 3f		 je	 SHORT $L182331

; 888  : 	{
; 889  : 		// Located at an element
; 890  : 		if ( bInsert ) // precede iPosRel

  02724	0f b6 4d fb	 movzx	 ecx, BYTE PTR _bInsert$[ebp]
  02728	85 c9		 test	 ecx, ecx
  0272a	74 18		 je	 SHORT $L182332

; 891  : 			nStartL = m_aPos[iPosRel].nStartL;

  0272c	8b 55 0c	 mov	 edx, DWORD PTR _iPosRel$[ebp]
  0272f	8b 02		 mov	 eax, DWORD PTR [edx]
  02731	50		 push	 eax
  02732	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02735	83 c1 14	 add	 ecx, 20			; 00000014H
  02738	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  0273d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0273f	89 4d f4	 mov	 DWORD PTR _nStartL$[ebp], ecx

; 892  : 		else // follow iPosRel

  02742	eb 1a		 jmp	 SHORT $L182333
$L182332:

; 893  : 			nStartL = m_aPos[iPosRel].nEndR + 1;

  02744	8b 55 0c	 mov	 edx, DWORD PTR _iPosRel$[ebp]
  02747	8b 02		 mov	 eax, DWORD PTR [edx]
  02749	50		 push	 eax
  0274a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0274d	83 c1 14	 add	 ecx, 20			; 00000014H
  02750	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02755	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02758	83 c1 01	 add	 ecx, 1
  0275b	89 4d f4	 mov	 DWORD PTR _nStartL$[ebp], ecx
$L182333:

; 894  : 	}
; 895  : 	else if ( ! iPosParent )

  0275e	e9 9c 00 00 00	 jmp	 $L182330
$L182331:
  02763	83 7d 08 00	 cmp	 DWORD PTR _iPosParent$[ebp], 0
  02767	75 2b		 jne	 SHORT $L182335

; 896  : 	{
; 897  : 		// Outside of all elements
; 898  : 		if ( bInsert )

  02769	0f b6 55 fb	 movzx	 edx, BYTE PTR _bInsert$[ebp]
  0276d	85 d2		 test	 edx, edx
  0276f	74 09		 je	 SHORT $L182336

; 899  : 			nStartL = 0;

  02771	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nStartL$[ebp], 0

; 900  : 		else

  02778	eb 18		 jmp	 SHORT $L182337
$L182336:

; 901  : 			nStartL = m_csDoc.GetLength();

  0277a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0277d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  02780	8b f4		 mov	 esi, esp
  02782	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  02788	3b f4		 cmp	 esi, esp
  0278a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0278f	89 45 f4	 mov	 DWORD PTR _nStartL$[ebp], eax
$L182337:

; 902  : 	}
; 903  : 	else if ( m_aPos[iPosParent].IsEmptyElement() )

  02792	eb 6b		 jmp	 SHORT $L182330
$L182335:
  02794	8b 45 08	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  02797	50		 push	 eax
  02798	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0279b	83 c1 14	 add	 ecx, 20			; 00000014H
  0279e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  027a3	8b c8		 mov	 ecx, eax
  027a5	e8 00 00 00 00	 call	 ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ ; CMarkup::ElemPos::IsEmptyElement
  027aa	0f b6 c8	 movzx	 ecx, al
  027ad	85 c9		 test	 ecx, ecx
  027af	74 17		 je	 SHORT $L182339

; 904  : 	{
; 905  : 		// Parent has no separate end tag, so split empty element
; 906  : 		nStartL = m_aPos[iPosParent].nStartR;

  027b1	8b 55 08	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  027b4	52		 push	 edx
  027b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  027b8	83 c1 14	 add	 ecx, 20			; 00000014H
  027bb	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  027c0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  027c3	89 45 f4	 mov	 DWORD PTR _nStartL$[ebp], eax

; 907  : 	}
; 908  : 	else

  027c6	eb 37		 jmp	 SHORT $L182330
$L182339:

; 909  : 	{
; 910  : 		if ( bInsert ) // after start tag

  027c8	0f b6 4d fb	 movzx	 ecx, BYTE PTR _bInsert$[ebp]
  027cc	85 c9		 test	 ecx, ecx
  027ce	74 1a		 je	 SHORT $L182341

; 911  : 			nStartL = m_aPos[iPosParent].nStartR + 1;

  027d0	8b 55 08	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  027d3	52		 push	 edx
  027d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  027d7	83 c1 14	 add	 ecx, 20			; 00000014H
  027da	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  027df	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  027e2	83 c0 01	 add	 eax, 1
  027e5	89 45 f4	 mov	 DWORD PTR _nStartL$[ebp], eax

; 912  : 		else // before end tag

  027e8	eb 15		 jmp	 SHORT $L182330
$L182341:

; 913  : 			nStartL = m_aPos[iPosParent].nEndL;

  027ea	8b 4d 08	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  027ed	51		 push	 ecx
  027ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  027f1	83 c1 14	 add	 ecx, 20			; 00000014H
  027f4	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  027f9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  027fc	89 55 f4	 mov	 DWORD PTR _nStartL$[ebp], edx
$L182330:

; 914  : 	}
; 915  : 
; 916  : 	// Go up to start of next node, unless its splitting an empty element
; 917  : 	if ( ! bHonorWhitespace && ! m_aPos[iPosParent].IsEmptyElement() )

  027ff	0f b6 45 fa	 movzx	 eax, BYTE PTR _bHonorWhitespace$[ebp]
  02803	85 c0		 test	 eax, eax
  02805	75 66		 jne	 SHORT $L182343
  02807	8b 4d 08	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  0280a	51		 push	 ecx
  0280b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0280e	83 c1 14	 add	 ecx, 20			; 00000014H
  02811	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02816	8b c8		 mov	 ecx, eax
  02818	e8 00 00 00 00	 call	 ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ ; CMarkup::ElemPos::IsEmptyElement
  0281d	0f b6 d0	 movzx	 edx, al
  02820	85 d2		 test	 edx, edx
  02822	75 49		 jne	 SHORT $L182343

; 918  : 	{
; 919  : 		LPCTSTR szDoc = (LPCTSTR)m_csDoc;

  02824	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02827	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0282a	8b f4		 mov	 esi, esp
  0282c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  02832	3b f4		 cmp	 esi, esp
  02834	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02839	89 45 f0	 mov	 DWORD PTR _szDoc$182344[ebp], eax

; 920  : 		int nChar = nStartL;

  0283c	8b 45 f4	 mov	 eax, DWORD PTR _nStartL$[ebp]
  0283f	89 45 e8	 mov	 DWORD PTR _nChar$182346[ebp], eax

; 921  : 		if ( ! x_FindAny(szDoc,nChar) || szDoc[nChar] == _T('<') )

  02842	8d 4d e8	 lea	 ecx, DWORD PTR _nChar$182346[ebp]
  02845	51		 push	 ecx
  02846	8b 55 f0	 mov	 edx, DWORD PTR _szDoc$182344[ebp]
  02849	52		 push	 edx
  0284a	e8 00 00 00 00	 call	 ?x_FindAny@CMarkup@@KA_NPBDAAH@Z ; CMarkup::x_FindAny
  0284f	83 c4 08	 add	 esp, 8
  02852	0f b6 c0	 movzx	 eax, al
  02855	85 c0		 test	 eax, eax
  02857	74 0e		 je	 SHORT $L182348
  02859	8b 4d f0	 mov	 ecx, DWORD PTR _szDoc$182344[ebp]
  0285c	03 4d e8	 add	 ecx, DWORD PTR _nChar$182346[ebp]
  0285f	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  02862	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  02865	75 06		 jne	 SHORT $L182343
$L182348:

; 922  : 			nStartL = nChar;

  02867	8b 45 e8	 mov	 eax, DWORD PTR _nChar$182346[ebp]
  0286a	89 45 f4	 mov	 DWORD PTR _nStartL$[ebp], eax
$L182343:

; 923  : 	}
; 924  : 
; 925  : 	// Determine iPosBefore
; 926  : 	int iPosBefore = 0;

  0286d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iPosBefore$[ebp], 0

; 927  : 	if ( iPosRel )

  02874	8b 4d 0c	 mov	 ecx, DWORD PTR _iPosRel$[ebp]
  02877	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0287a	74 69		 je	 SHORT $L182350

; 928  : 	{
; 929  : 		if ( bInsert )

  0287c	0f b6 55 fb	 movzx	 edx, BYTE PTR _bInsert$[ebp]
  02880	85 d2		 test	 edx, edx
  02882	74 57		 je	 SHORT $L182351

; 930  : 		{
; 931  : 			// Is iPosRel past first sibling?
; 932  : 			int iPosPrev = m_aPos[iPosParent].iElemChild;

  02884	8b 45 08	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  02887	50		 push	 eax
  02888	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0288b	83 c1 14	 add	 ecx, 20			; 00000014H
  0288e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02893	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02896	89 4d dc	 mov	 DWORD PTR _iPosPrev$182352[ebp], ecx

; 933  : 			if ( iPosPrev != iPosRel )

  02899	8b 55 0c	 mov	 edx, DWORD PTR _iPosRel$[ebp]
  0289c	8b 45 dc	 mov	 eax, DWORD PTR _iPosPrev$182352[ebp]
  0289f	3b 02		 cmp	 eax, DWORD PTR [edx]
  028a1	74 36		 je	 SHORT $L182353
$L182355:

; 934  : 			{
; 935  : 				// Find previous sibling of iPosRel
; 936  : 				while ( m_aPos[iPosPrev].iElemNext != iPosRel )

  028a3	8b 4d dc	 mov	 ecx, DWORD PTR _iPosPrev$182352[ebp]
  028a6	51		 push	 ecx
  028a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028aa	83 c1 14	 add	 ecx, 20			; 00000014H
  028ad	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  028b2	8b 55 0c	 mov	 edx, DWORD PTR _iPosRel$[ebp]
  028b5	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  028b8	3b 02		 cmp	 eax, DWORD PTR [edx]
  028ba	74 17		 je	 SHORT $L182356

; 937  : 					iPosPrev = m_aPos[iPosPrev].iElemNext;

  028bc	8b 4d dc	 mov	 ecx, DWORD PTR _iPosPrev$182352[ebp]
  028bf	51		 push	 ecx
  028c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028c3	83 c1 14	 add	 ecx, 20			; 00000014H
  028c6	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  028cb	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  028ce	89 55 dc	 mov	 DWORD PTR _iPosPrev$182352[ebp], edx
  028d1	eb d0		 jmp	 SHORT $L182355
$L182356:

; 938  : 				iPosBefore = iPosPrev;

  028d3	8b 45 dc	 mov	 eax, DWORD PTR _iPosPrev$182352[ebp]
  028d6	89 45 e0	 mov	 DWORD PTR _iPosBefore$[ebp], eax
$L182353:

; 939  : 			}
; 940  : 		}
; 941  : 		else

  028d9	eb 08		 jmp	 SHORT $L182357
$L182351:

; 942  : 		{
; 943  : 			iPosBefore = iPosRel;

  028db	8b 4d 0c	 mov	 ecx, DWORD PTR _iPosRel$[ebp]
  028de	8b 11		 mov	 edx, DWORD PTR [ecx]
  028e0	89 55 e0	 mov	 DWORD PTR _iPosBefore$[ebp], edx
$L182357:

; 944  : 		}
; 945  : 	}
; 946  : 	else if ( m_aPos[iPosParent].iElemChild )

  028e3	eb 61		 jmp	 SHORT $L182358
$L182350:
  028e5	8b 45 08	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  028e8	50		 push	 eax
  028e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  028ec	83 c1 14	 add	 ecx, 20			; 00000014H
  028ef	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  028f4	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  028f8	74 4c		 je	 SHORT $L182358

; 947  : 	{
; 948  : 		if ( ! bInsert )

  028fa	0f b6 4d fb	 movzx	 ecx, BYTE PTR _bInsert$[ebp]
  028fe	85 c9		 test	 ecx, ecx
  02900	75 44		 jne	 SHORT $L182358

; 949  : 		{
; 950  : 			// Find last element under iPosParent
; 951  : 			int iPosLast = m_aPos[iPosParent].iElemChild;

  02902	8b 55 08	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  02905	52		 push	 edx
  02906	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02909	83 c1 14	 add	 ecx, 20			; 00000014H
  0290c	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02911	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  02914	89 45 d8	 mov	 DWORD PTR _iPosLast$182361[ebp], eax

; 952  : 			int iPosNext = iPosLast;

  02917	8b 4d d8	 mov	 ecx, DWORD PTR _iPosLast$182361[ebp]
  0291a	89 4d d4	 mov	 DWORD PTR _iPosNext$182362[ebp], ecx
$L182364:

; 953  : 			while ( iPosNext )

  0291d	83 7d d4 00	 cmp	 DWORD PTR _iPosNext$182362[ebp], 0
  02921	74 1d		 je	 SHORT $L182365

; 954  : 			{
; 955  : 				iPosLast = iPosNext;

  02923	8b 55 d4	 mov	 edx, DWORD PTR _iPosNext$182362[ebp]
  02926	89 55 d8	 mov	 DWORD PTR _iPosLast$182361[ebp], edx

; 956  : 				iPosNext = m_aPos[iPosNext].iElemNext;

  02929	8b 45 d4	 mov	 eax, DWORD PTR _iPosNext$182362[ebp]
  0292c	50		 push	 eax
  0292d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02930	83 c1 14	 add	 ecx, 20			; 00000014H
  02933	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02938	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0293b	89 4d d4	 mov	 DWORD PTR _iPosNext$182362[ebp], ecx

; 957  : 			}

  0293e	eb dd		 jmp	 SHORT $L182364
$L182365:

; 958  : 			iPosBefore = iPosLast;

  02940	8b 55 d8	 mov	 edx, DWORD PTR _iPosLast$182361[ebp]
  02943	89 55 e0	 mov	 DWORD PTR _iPosBefore$[ebp], edx
$L182358:

; 959  : 		}
; 960  : 	}
; 961  : 
; 962  : 	nOffset = nStartL;

  02946	8b 45 10	 mov	 eax, DWORD PTR _nOffset$[ebp]
  02949	8b 4d f4	 mov	 ecx, DWORD PTR _nStartL$[ebp]
  0294c	89 08		 mov	 DWORD PTR [eax], ecx

; 963  : 	iPosRel = iPosBefore;

  0294e	8b 55 0c	 mov	 edx, DWORD PTR _iPosRel$[ebp]
  02951	8b 45 e0	 mov	 eax, DWORD PTR _iPosBefore$[ebp]
  02954	89 02		 mov	 DWORD PTR [edx], eax

; 964  : }

  02956	52		 push	 edx
  02957	8b cd		 mov	 ecx, ebp
  02959	50		 push	 eax
  0295a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191595
  02960	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02965	58		 pop	 eax
  02966	5a		 pop	 edx
  02967	5f		 pop	 edi
  02968	5e		 pop	 esi
  02969	83 c4 2c	 add	 esp, 44			; 0000002cH
  0296c	3b ec		 cmp	 ebp, esp
  0296e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02973	8b e5		 mov	 esp, ebp
  02975	5d		 pop	 ebp
  02976	c2 14 00	 ret	 20			; 00000014H
$L191595:
  02979	01 00 00 00	 DD	 1
  0297d	00 00 00 00	 DD	 $L191594
$L191594:
  02981	e8 ff ff ff	 DD	 -24			; ffffffe8H
  02985	04 00 00 00	 DD	 4
  02989	00 00 00 00	 DD	 $L191593
$L191593:
  0298d	6e		 DB	 110			; 0000006eH
  0298e	43		 DB	 67			; 00000043H
  0298f	68		 DB	 104			; 00000068H
  02990	61		 DB	 97			; 00000061H
  02991	72		 DB	 114			; 00000072H
  02992	00		 DB	 0
?x_LocateNew@CMarkup@@IAEXHAAH0HH@Z ENDP		; CMarkup::x_LocateNew
_TEXT	ENDS
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ; ATL::operator+
PUBLIC	?x_AddElem@CMarkup@@IAE_NPBD0_N1@Z		; CMarkup::x_AddElem
xdata$x	SEGMENT
$T191617 DD	0ffffffffH
	DD	FLAT:$L191601
	DD	00H
	DD	FLAT:$L191602
	DD	00H
	DD	FLAT:$L191603
	DD	02H
	DD	FLAT:$L191604
	DD	00H
	DD	FLAT:$L191605
$T191607 DD	019930520H
	DD	05H
	DD	FLAT:$T191617
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv409 = -152						; size = 4
tv415 = -148						; size = 4
tv354 = -144						; size = 4
tv344 = -140						; size = 4
tv211 = -136						; size = 4
$T191600 = -129						; size = 1
$T191599 = -128						; size = 4
_csFormat$182411 = -120					; size = 4
_csParentTagName$182409 = -108				; size = 4
_nLeft$ = -100						; size = 4
_nReplace$ = -96					; size = 4
_csValue$182400 = -88					; size = 4
_nLenValue$ = -80					; size = 4
_nLenName$ = -76					; size = 4
_csInsert$ = -68					; size = 4
_iPos$ = -60						; size = 4
_bEmptyParent$ = -53					; size = 1
_nFlags$ = -52						; size = 4
_nLength$ = -48						; size = 4
_nOffset$ = -40						; size = 4
_iPosBefore$ = -28					; size = 4
_iPosParent$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szName$ = 8						; size = 4
_szValue$ = 12						; size = 4
_bInsert$ = 16						; size = 1
_bAddChild$ = 20					; size = 1
?x_AddElem@CMarkup@@IAE_NPBD0_N1@Z PROC NEAR		; CMarkup::x_AddElem
; _this$ = ecx

; 967  : {

  029a0	55		 push	 ebp
  029a1	8b ec		 mov	 ebp, esp
  029a3	6a ff		 push	 -1
  029a5	68 00 00 00 00	 push	 __ehhandler$?x_AddElem@CMarkup@@IAE_NPBD0_N1@Z
  029aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  029b0	50		 push	 eax
  029b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  029b8	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  029be	56		 push	 esi
  029bf	57		 push	 edi
  029c0	51		 push	 ecx
  029c1	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  029c7	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  029cc	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  029d1	f3 ab		 rep stosd
  029d3	59		 pop	 ecx
  029d4	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 968  : 	if ( bAddChild )

  029d7	0f b6 45 14	 movzx	 eax, BYTE PTR _bAddChild$[ebp]
  029db	85 c0		 test	 eax, eax
  029dd	74 12		 je	 SHORT $L182373

; 969  : 	{
; 970  : 		// Adding a child element under main position
; 971  : 		if ( ! m_iPos )

  029df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  029e2	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  029e6	75 07		 jne	 SHORT $L182374

; 972  : 			return false;

  029e8	32 c0		 xor	 al, al
  029ea	e9 04 07 00 00	 jmp	 $L182372
$L182374:

; 973  : 	}
; 974  : 	else if ( m_iPosParent == 0 )

  029ef	eb 46		 jmp	 SHORT $L182375
$L182373:
  029f1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  029f4	83 7a 28 00	 cmp	 DWORD PTR [edx+40], 0
  029f8	75 3d		 jne	 SHORT $L182375

; 975  : 	{
; 976  : 		// Adding root element
; 977  : 		if ( IsWellFormed() )

  029fa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  029fd	e8 00 00 00 00	 call	 ?IsWellFormed@CMarkup@@QAE_NXZ ; CMarkup::IsWellFormed
  02a02	0f b6 c0	 movzx	 eax, al
  02a05	85 c0		 test	 eax, eax
  02a07	74 07		 je	 SHORT $L182377

; 978  : 			return false;

  02a09	32 c0		 xor	 al, al
  02a0b	e9 e3 06 00 00	 jmp	 $L182372
$L182377:

; 979  : 
; 980  : 
; 981  : 		// Locate after any version and DTD
; 982  : 		m_aPos[0].nEndL = m_csDoc.GetLength();

  02a10	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02a13	83 c1 0c	 add	 ecx, 12			; 0000000cH
  02a16	8b f4		 mov	 esi, esp
  02a18	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  02a1e	3b f4		 cmp	 esi, esp
  02a20	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02a25	8b f0		 mov	 esi, eax
  02a27	6a 00		 push	 0
  02a29	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02a2c	83 c1 14	 add	 ecx, 20			; 00000014H
  02a2f	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02a34	89 70 08	 mov	 DWORD PTR [eax+8], esi
$L182375:

; 983  : 	}
; 984  : 
; 985  : 	// Locate where to add element relative to current node
; 986  : 	int iPosParent, iPosBefore, nOffset = 0, nLength = 0;

  02a37	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nOffset$[ebp], 0
  02a3e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _nLength$[ebp], 0

; 987  : 	if ( bAddChild )

  02a45	0f b6 4d 14	 movzx	 ecx, BYTE PTR _bAddChild$[ebp]
  02a49	85 c9		 test	 ecx, ecx
  02a4b	74 14		 je	 SHORT $L182382

; 988  : 	{
; 989  : 		iPosParent = m_iPos;

  02a4d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  02a50	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  02a53	89 45 ec	 mov	 DWORD PTR _iPosParent$[ebp], eax

; 990  : 		iPosBefore = m_iPosChild;

  02a56	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02a59	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  02a5c	89 55 e4	 mov	 DWORD PTR _iPosBefore$[ebp], edx

; 991  : 	}
; 992  : 	else

  02a5f	eb 12		 jmp	 SHORT $L182383
$L182382:

; 993  : 	{
; 994  : 		iPosParent = m_iPosParent;

  02a61	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  02a64	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  02a67	89 4d ec	 mov	 DWORD PTR _iPosParent$[ebp], ecx

; 995  : 		iPosBefore = m_iPos;

  02a6a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  02a6d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  02a70	89 45 e4	 mov	 DWORD PTR _iPosBefore$[ebp], eax
$L182383:

; 996  : 	}
; 997  : 	int nFlags = bInsert?1:0;

  02a73	0f b6 4d 10	 movzx	 ecx, BYTE PTR _bInsert$[ebp]
  02a77	f7 d9		 neg	 ecx
  02a79	1b c9		 sbb	 ecx, ecx
  02a7b	f7 d9		 neg	 ecx
  02a7d	89 4d cc	 mov	 DWORD PTR _nFlags$[ebp], ecx

; 998  : 	x_LocateNew( iPosParent, iPosBefore, nOffset, nLength, nFlags );

  02a80	8b 55 cc	 mov	 edx, DWORD PTR _nFlags$[ebp]
  02a83	52		 push	 edx
  02a84	8b 45 d0	 mov	 eax, DWORD PTR _nLength$[ebp]
  02a87	50		 push	 eax
  02a88	8d 4d d8	 lea	 ecx, DWORD PTR _nOffset$[ebp]
  02a8b	51		 push	 ecx
  02a8c	8d 55 e4	 lea	 edx, DWORD PTR _iPosBefore$[ebp]
  02a8f	52		 push	 edx
  02a90	8b 45 ec	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  02a93	50		 push	 eax
  02a94	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02a97	e8 00 00 00 00	 call	 ?x_LocateNew@CMarkup@@IAEXHAAH0HH@Z ; CMarkup::x_LocateNew

; 999  : 	bool bEmptyParent = m_aPos[iPosParent].IsEmptyElement();

  02a9c	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  02a9f	51		 push	 ecx
  02aa0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02aa3	83 c1 14	 add	 ecx, 20			; 00000014H
  02aa6	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02aab	8b c8		 mov	 ecx, eax
  02aad	e8 00 00 00 00	 call	 ?IsEmptyElement@ElemPos@CMarkup@@QBE_NXZ ; CMarkup::ElemPos::IsEmptyElement
  02ab2	88 45 cb	 mov	 BYTE PTR _bEmptyParent$[ebp], al

; 1000 : 	if ( bEmptyParent || m_aPos[iPosParent].nStartR + 1 == m_aPos[iPosParent].nEndL )

  02ab5	0f b6 55 cb	 movzx	 edx, BYTE PTR _bEmptyParent$[ebp]
  02ab9	85 d2		 test	 edx, edx
  02abb	75 29		 jne	 SHORT $L182387
  02abd	8b 45 ec	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  02ac0	50		 push	 eax
  02ac1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02ac4	83 c1 14	 add	 ecx, 20			; 00000014H
  02ac7	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02acc	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  02acf	83 c6 01	 add	 esi, 1
  02ad2	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  02ad5	51		 push	 ecx
  02ad6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02ad9	83 c1 14	 add	 ecx, 20			; 00000014H
  02adc	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02ae1	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  02ae4	75 09		 jne	 SHORT $L182386
$L182387:

; 1001 : 		nOffset += 2;

  02ae6	8b 55 d8	 mov	 edx, DWORD PTR _nOffset$[ebp]
  02ae9	83 c2 02	 add	 edx, 2
  02aec	89 55 d8	 mov	 DWORD PTR _nOffset$[ebp], edx
$L182386:

; 1002 : 
; 1003 : 	// Create element and modify positions of affected elements
; 1004 : 	// If no szValue is specified, an empty element is created
; 1005 : 	// i.e. either <NAME>value</NAME> or <NAME/>
; 1006 : 	//
; 1007 : 	int iPos = x_GetFreePos();

  02aef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02af2	e8 00 00 00 00	 call	 ?x_GetFreePos@CMarkup@@IAEHXZ ; CMarkup::x_GetFreePos
  02af7	89 45 c4	 mov	 DWORD PTR _iPos$[ebp], eax

; 1008 : 	m_aPos[iPos].nStartL = nOffset;

  02afa	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02afd	50		 push	 eax
  02afe	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b01	83 c1 14	 add	 ecx, 20			; 00000014H
  02b04	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b09	8b 4d d8	 mov	 ecx, DWORD PTR _nOffset$[ebp]
  02b0c	89 08		 mov	 DWORD PTR [eax], ecx

; 1009 : 
; 1010 : 	// Set links
; 1011 : 	m_aPos[iPos].iElemParent = iPosParent;

  02b0e	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  02b11	52		 push	 edx
  02b12	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b15	83 c1 14	 add	 ecx, 20			; 00000014H
  02b18	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b1d	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  02b20	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1012 : 	m_aPos[iPos].iElemChild = 0;

  02b23	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  02b26	52		 push	 edx
  02b27	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b2a	83 c1 14	 add	 ecx, 20			; 00000014H
  02b2d	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b32	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1013 : 	m_aPos[iPos].iElemNext = 0;

  02b39	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02b3c	50		 push	 eax
  02b3d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b40	83 c1 14	 add	 ecx, 20			; 00000014H
  02b43	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b48	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1014 : 	if ( iPosBefore )

  02b4f	83 7d e4 00	 cmp	 DWORD PTR _iPosBefore$[ebp], 0
  02b53	74 3d		 je	 SHORT $L182389

; 1015 : 	{
; 1016 : 		// Link in after iPosBefore
; 1017 : 		m_aPos[iPos].iElemNext = m_aPos[iPosBefore].iElemNext;

  02b55	8b 4d e4	 mov	 ecx, DWORD PTR _iPosBefore$[ebp]
  02b58	51		 push	 ecx
  02b59	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b5c	83 c1 14	 add	 ecx, 20			; 00000014H
  02b5f	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b64	8b f0		 mov	 esi, eax
  02b66	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  02b69	52		 push	 edx
  02b6a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b6d	83 c1 14	 add	 ecx, 20			; 00000014H
  02b70	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b75	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  02b78	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1018 : 		m_aPos[iPosBefore].iElemNext = iPos;

  02b7b	8b 55 e4	 mov	 edx, DWORD PTR _iPosBefore$[ebp]
  02b7e	52		 push	 edx
  02b7f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b82	83 c1 14	 add	 ecx, 20			; 00000014H
  02b85	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02b8a	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02b8d	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1019 : 	}
; 1020 : 	else

  02b90	eb 3b		 jmp	 SHORT $L182390
$L182389:

; 1021 : 	{
; 1022 : 		// First child
; 1023 : 		m_aPos[iPos].iElemNext = m_aPos[iPosParent].iElemChild;

  02b92	8b 55 ec	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  02b95	52		 push	 edx
  02b96	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b99	83 c1 14	 add	 ecx, 20			; 00000014H
  02b9c	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02ba1	8b f0		 mov	 esi, eax
  02ba3	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02ba6	50		 push	 eax
  02ba7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02baa	83 c1 14	 add	 ecx, 20			; 00000014H
  02bad	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02bb2	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  02bb5	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1024 : 		m_aPos[iPosParent].iElemChild = iPos;

  02bb8	8b 55 ec	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  02bbb	52		 push	 edx
  02bbc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02bbf	83 c1 14	 add	 ecx, 20			; 00000014H
  02bc2	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02bc7	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02bca	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$L182390:

; 1025 : 	}
; 1026 : 
; 1027 : 	// Create string for insert
; 1028 : 	CString csInsert;

  02bcd	8b f4		 mov	 esi, esp
  02bcf	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02bd2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02bd8	3b f4		 cmp	 esi, esp
  02bda	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02bdf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1029 : 	int nLenName = (int)_tcslen(szName);

  02be6	8b 55 08	 mov	 edx, DWORD PTR _szName$[ebp]
  02be9	52		 push	 edx
  02bea	e8 00 00 00 00	 call	 _strlen
  02bef	83 c4 04	 add	 esp, 4
  02bf2	89 45 b4	 mov	 DWORD PTR _nLenName$[ebp], eax

; 1030 : 	int nLenValue = szValue? (int)_tcslen(szValue) : 0;

  02bf5	83 7d 0c 00	 cmp	 DWORD PTR _szValue$[ebp], 0
  02bf9	74 14		 je	 SHORT $L191597
  02bfb	8b 45 0c	 mov	 eax, DWORD PTR _szValue$[ebp]
  02bfe	50		 push	 eax
  02bff	e8 00 00 00 00	 call	 _strlen
  02c04	83 c4 04	 add	 esp, 4
  02c07	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv211[ebp], eax
  02c0d	eb 0a		 jmp	 SHORT $L191598
$L191597:
  02c0f	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv211[ebp], 0
$L191598:
  02c19	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv211[ebp]
  02c1f	89 4d b0	 mov	 DWORD PTR _nLenValue$[ebp], ecx

; 1031 : 	if ( ! nLenValue )

  02c22	83 7d b0 00	 cmp	 DWORD PTR _nLenValue$[ebp], 0
  02c26	0f 85 c1 00 00
	00		 jne	 $L182396

; 1032 : 	{
; 1033 : 		// <NAME/> empty element
; 1034 : 		csInsert = _T("<");

  02c2c	8b f4		 mov	 esi, esp
  02c2e	68 00 00 00 00	 push	 OFFSET FLAT:$SG182397
  02c33	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02c36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02c3c	3b f4		 cmp	 esi, esp
  02c3e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1035 : 		csInsert += szName;

  02c43	8b f4		 mov	 esi, esp
  02c45	8b 55 08	 mov	 edx, DWORD PTR _szName$[ebp]
  02c48	52		 push	 edx
  02c49	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02c4c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02c52	3b f4		 cmp	 esi, esp
  02c54	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1036 : 		csInsert += _T("/>\r\n");

  02c59	8b f4		 mov	 esi, esp
  02c5b	68 00 00 00 00	 push	 OFFSET FLAT:$SG182398
  02c60	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02c63	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02c69	3b f4		 cmp	 esi, esp
  02c6b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1037 : 		m_aPos[iPos].nStartR = m_aPos[iPos].nStartL + nLenName + 2;

  02c70	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02c73	50		 push	 eax
  02c74	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02c77	83 c1 14	 add	 ecx, 20			; 00000014H
  02c7a	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02c7f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c81	8b 55 b4	 mov	 edx, DWORD PTR _nLenName$[ebp]
  02c84	8d 74 11 02	 lea	 esi, DWORD PTR [ecx+edx+2]
  02c88	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02c8b	50		 push	 eax
  02c8c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02c8f	83 c1 14	 add	 ecx, 20			; 00000014H
  02c92	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02c97	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1038 : 		m_aPos[iPos].nEndL = m_aPos[iPos].nStartR - 1;

  02c9a	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02c9d	51		 push	 ecx
  02c9e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02ca1	83 c1 14	 add	 ecx, 20			; 00000014H
  02ca4	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02ca9	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  02cac	83 ee 01	 sub	 esi, 1
  02caf	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  02cb2	52		 push	 edx
  02cb3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02cb6	83 c1 14	 add	 ecx, 20			; 00000014H
  02cb9	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02cbe	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 1039 : 		m_aPos[iPos].nEndR = m_aPos[iPos].nEndL + 1;

  02cc1	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02cc4	50		 push	 eax
  02cc5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02cc8	83 c1 14	 add	 ecx, 20			; 00000014H
  02ccb	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02cd0	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  02cd3	83 c6 01	 add	 esi, 1
  02cd6	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02cd9	51		 push	 ecx
  02cda	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02cdd	83 c1 14	 add	 ecx, 20			; 00000014H
  02ce0	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02ce5	89 70 0c	 mov	 DWORD PTR [eax+12], esi

; 1040 : 	}
; 1041 : 	else

  02ce8	e9 5f 01 00 00	 jmp	 $L182399
$L182396:

; 1042 : 	{
; 1043 : 		// <NAME>value</NAME>
; 1044 : 		CString csValue = x_TextToDoc( szValue );

  02ced	6a 00		 push	 0
  02cef	8b 55 0c	 mov	 edx, DWORD PTR _szValue$[ebp]
  02cf2	52		 push	 edx
  02cf3	8d 45 a8	 lea	 eax, DWORD PTR _csValue$182400[ebp]
  02cf6	50		 push	 eax
  02cf7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02cfa	e8 00 00 00 00	 call	 ?x_TextToDoc@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD_N@Z ; CMarkup::x_TextToDoc
  02cff	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1045 : 		nLenValue = csValue.GetLength();

  02d03	8b f4		 mov	 esi, esp
  02d05	8d 4d a8	 lea	 ecx, DWORD PTR _csValue$182400[ebp]
  02d08	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  02d0e	3b f4		 cmp	 esi, esp
  02d10	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02d15	89 45 b0	 mov	 DWORD PTR _nLenValue$[ebp], eax

; 1046 : 		csInsert = _T("<");

  02d18	8b f4		 mov	 esi, esp
  02d1a	68 00 00 00 00	 push	 OFFSET FLAT:$SG182402
  02d1f	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02d22	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02d28	3b f4		 cmp	 esi, esp
  02d2a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1047 : 		csInsert += szName;

  02d2f	8b f4		 mov	 esi, esp
  02d31	8b 4d 08	 mov	 ecx, DWORD PTR _szName$[ebp]
  02d34	51		 push	 ecx
  02d35	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02d38	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02d3e	3b f4		 cmp	 esi, esp
  02d40	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1048 : 		csInsert += _T(">");

  02d45	8b f4		 mov	 esi, esp
  02d47	68 00 00 00 00	 push	 OFFSET FLAT:$SG182403
  02d4c	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02d4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02d55	3b f4		 cmp	 esi, esp
  02d57	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1049 : 		csInsert += csValue;

  02d5c	8b f4		 mov	 esi, esp
  02d5e	8d 55 a8	 lea	 edx, DWORD PTR _csValue$182400[ebp]
  02d61	52		 push	 edx
  02d62	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02d65	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  02d6b	3b f4		 cmp	 esi, esp
  02d6d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1050 : 		csInsert += _T("</");

  02d72	8b f4		 mov	 esi, esp
  02d74	68 00 00 00 00	 push	 OFFSET FLAT:$SG182404
  02d79	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02d7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02d82	3b f4		 cmp	 esi, esp
  02d84	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1051 : 		csInsert += szName;

  02d89	8b f4		 mov	 esi, esp
  02d8b	8b 45 08	 mov	 eax, DWORD PTR _szName$[ebp]
  02d8e	50		 push	 eax
  02d8f	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02d92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02d98	3b f4		 cmp	 esi, esp
  02d9a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1052 : 		csInsert += _T(">\r\n");

  02d9f	8b f4		 mov	 esi, esp
  02da1	68 00 00 00 00	 push	 OFFSET FLAT:$SG182405
  02da6	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02da9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02daf	3b f4		 cmp	 esi, esp
  02db1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1053 : 		m_aPos[iPos].nStartR = m_aPos[iPos].nStartL + nLenName + 1;

  02db6	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02db9	51		 push	 ecx
  02dba	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02dbd	83 c1 14	 add	 ecx, 20			; 00000014H
  02dc0	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02dc5	8b 10		 mov	 edx, DWORD PTR [eax]
  02dc7	8b 45 b4	 mov	 eax, DWORD PTR _nLenName$[ebp]
  02dca	8d 74 02 01	 lea	 esi, DWORD PTR [edx+eax+1]
  02dce	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02dd1	51		 push	 ecx
  02dd2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02dd5	83 c1 14	 add	 ecx, 20			; 00000014H
  02dd8	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02ddd	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1054 : 		m_aPos[iPos].nEndL = m_aPos[iPos].nStartR + nLenValue + 1;

  02de0	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  02de3	52		 push	 edx
  02de4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02de7	83 c1 14	 add	 ecx, 20			; 00000014H
  02dea	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02def	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02df2	8b 4d b0	 mov	 ecx, DWORD PTR _nLenValue$[ebp]
  02df5	8d 74 08 01	 lea	 esi, DWORD PTR [eax+ecx+1]
  02df9	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  02dfc	52		 push	 edx
  02dfd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02e00	83 c1 14	 add	 ecx, 20			; 00000014H
  02e03	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02e08	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 1055 : 		m_aPos[iPos].nEndR = m_aPos[iPos].nEndL + nLenName + 2;

  02e0b	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02e0e	50		 push	 eax
  02e0f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02e12	83 c1 14	 add	 ecx, 20			; 00000014H
  02e15	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02e1a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  02e1d	8b 55 b4	 mov	 edx, DWORD PTR _nLenName$[ebp]
  02e20	8d 74 11 02	 lea	 esi, DWORD PTR [ecx+edx+2]
  02e24	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  02e27	50		 push	 eax
  02e28	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02e2b	83 c1 14	 add	 ecx, 20			; 00000014H
  02e2e	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02e33	89 70 0c	 mov	 DWORD PTR [eax+12], esi

; 1056 : 	}

  02e36	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02e3a	8b f4		 mov	 esi, esp
  02e3c	8d 4d a8	 lea	 ecx, DWORD PTR _csValue$182400[ebp]
  02e3f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02e45	3b f4		 cmp	 esi, esp
  02e47	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L182399:

; 1057 : 
; 1058 : 	// Insert
; 1059 : 	int nReplace = 0, nLeft = m_aPos[iPos].nStartL;

  02e4c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _nReplace$[ebp], 0
  02e53	8b 4d c4	 mov	 ecx, DWORD PTR _iPos$[ebp]
  02e56	51		 push	 ecx
  02e57	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02e5a	83 c1 14	 add	 ecx, 20			; 00000014H
  02e5d	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02e62	8b 10		 mov	 edx, DWORD PTR [eax]
  02e64	89 55 9c	 mov	 DWORD PTR _nLeft$[ebp], edx

; 1060 : 	if ( bEmptyParent )

  02e67	0f b6 45 cb	 movzx	 eax, BYTE PTR _bEmptyParent$[ebp]
  02e6b	85 c0		 test	 eax, eax
  02e6d	0f 84 54 01 00
	00		 je	 $L182408

; 1061 : 	{
; 1062 : 		CString csParentTagName = x_GetTagName(iPosParent);

  02e73	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  02e76	51		 push	 ecx
  02e77	8d 55 94	 lea	 edx, DWORD PTR _csParentTagName$182409[ebp]
  02e7a	52		 push	 edx
  02e7b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02e7e	e8 00 00 00 00	 call	 ?x_GetTagName@CMarkup@@IBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CMarkup::x_GetTagName
  02e83	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1063 : 		CString csFormat;

  02e87	8b f4		 mov	 esi, esp
  02e89	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  02e8c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02e92	3b f4		 cmp	 esi, esp
  02e94	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02e99	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1064 : 		csFormat = _T(">\r\n");

  02e9d	8b f4		 mov	 esi, esp
  02e9f	68 00 00 00 00	 push	 OFFSET FLAT:$SG182412
  02ea4	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  02ea7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02ead	3b f4		 cmp	 esi, esp
  02eaf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1065 : 		csFormat += csInsert;

  02eb4	8b f4		 mov	 esi, esp
  02eb6	8d 45 bc	 lea	 eax, DWORD PTR _csInsert$[ebp]
  02eb9	50		 push	 eax
  02eba	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  02ebd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  02ec3	3b f4		 cmp	 esi, esp
  02ec5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1066 : 		csFormat += _T("</");

  02eca	8b f4		 mov	 esi, esp
  02ecc	68 00 00 00 00	 push	 OFFSET FLAT:$SG182413
  02ed1	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  02ed4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  02eda	3b f4		 cmp	 esi, esp
  02edc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1067 : 		csFormat += csParentTagName;

  02ee1	8b f4		 mov	 esi, esp
  02ee3	8d 4d 94	 lea	 ecx, DWORD PTR _csParentTagName$182409[ebp]
  02ee6	51		 push	 ecx
  02ee7	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  02eea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  02ef0	3b f4		 cmp	 esi, esp
  02ef2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1068 : 		csInsert = csFormat;

  02ef7	8b f4		 mov	 esi, esp
  02ef9	8d 55 88	 lea	 edx, DWORD PTR _csFormat$182411[ebp]
  02efc	52		 push	 edx
  02efd	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  02f00	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  02f06	3b f4		 cmp	 esi, esp
  02f08	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1069 : 		nLeft = m_aPos[iPosParent].nStartR - 1;

  02f0d	8b 45 ec	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  02f10	50		 push	 eax
  02f11	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02f14	83 c1 14	 add	 ecx, 20			; 00000014H
  02f17	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02f1c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02f1f	83 e9 01	 sub	 ecx, 1
  02f22	89 4d 9c	 mov	 DWORD PTR _nLeft$[ebp], ecx

; 1070 : 		nReplace = 1;

  02f25	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR _nReplace$[ebp], 1

; 1071 : 		// x_Adjust is going to update all affected indexes by one amount
; 1072 : 		// This will satisfy all except the empty parent
; 1073 : 		// Here we pre-adjust for the empty parent
; 1074 : 		// The empty tag slash is removed
; 1075 : 		m_aPos[iPosParent].nStartR -= 1;

  02f2c	8b 55 ec	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  02f2f	52		 push	 edx
  02f30	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02f33	83 c1 14	 add	 ecx, 20			; 00000014H
  02f36	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02f3b	83 c0 04	 add	 eax, 4
  02f3e	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv344[ebp], eax
  02f44	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv344[ebp]
  02f4a	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f4c	83 e9 01	 sub	 ecx, 1
  02f4f	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv344[ebp]
  02f55	89 0a		 mov	 DWORD PTR [edx], ecx

; 1076 : 		// For the newly created end tag, see the following example:
; 1077 : 		// <A/> (len 4) becomes <A><B/></A> (len 11)
; 1078 : 		// In x_Adjust everything will be adjusted 11 - 4 = 7
; 1079 : 		// But the nEndL of element A should only be adjusted 5
; 1080 : 		m_aPos[iPosParent].nEndL -= (csParentTagName.GetLength() + 1);

  02f57	8b 45 ec	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  02f5a	50		 push	 eax
  02f5b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02f5e	83 c1 14	 add	 ecx, 20			; 00000014H
  02f61	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02f66	83 c0 08	 add	 eax, 8
  02f69	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv354[ebp], eax
  02f6f	8b f4		 mov	 esi, esp
  02f71	8d 4d 94	 lea	 ecx, DWORD PTR _csParentTagName$182409[ebp]
  02f74	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  02f7a	3b f4		 cmp	 esi, esp
  02f7c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02f81	83 c0 01	 add	 eax, 1
  02f84	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv354[ebp]
  02f8a	8b 11		 mov	 edx, DWORD PTR [ecx]
  02f8c	2b d0		 sub	 edx, eax
  02f8e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv354[ebp]
  02f94	89 10		 mov	 DWORD PTR [eax], edx

; 1081 : 	}

  02f96	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  02f9a	8b f4		 mov	 esi, esp
  02f9c	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  02f9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02fa5	3b f4		 cmp	 esi, esp
  02fa7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02fac	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02fb0	8b f4		 mov	 esi, esp
  02fb2	8d 4d 94	 lea	 ecx, DWORD PTR _csParentTagName$182409[ebp]
  02fb5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02fbb	3b f4		 cmp	 esi, esp
  02fbd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1082 : 	else if ( m_aPos[iPosParent].nStartR + 1 == m_aPos[iPosParent].nEndL )

  02fc2	e9 9b 00 00 00	 jmp	 $L182414
$L182408:
  02fc7	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  02fca	51		 push	 ecx
  02fcb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02fce	83 c1 14	 add	 ecx, 20			; 00000014H
  02fd1	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02fd6	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  02fd9	83 c6 01	 add	 esi, 1
  02fdc	8b 55 ec	 mov	 edx, DWORD PTR _iPosParent$[ebp]
  02fdf	52		 push	 edx
  02fe0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02fe3	83 c1 14	 add	 ecx, 20			; 00000014H
  02fe6	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  02feb	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  02fee	75 72		 jne	 SHORT $L182414

; 1083 : 	{
; 1084 : 		csInsert = _T("\r\n") + csInsert;

  02ff0	8d 45 bc	 lea	 eax, DWORD PTR _csInsert$[ebp]
  02ff3	50		 push	 eax
  02ff4	68 00 00 00 00	 push	 OFFSET FLAT:$SG182417
  02ff9	8d 4d 80	 lea	 ecx, DWORD PTR $T191599[ebp]
  02ffc	51		 push	 ecx
  02ffd	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ; ATL::operator+
  03002	83 c4 0c	 add	 esp, 12			; 0000000cH
  03005	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv415[ebp], eax
  0300b	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv415[ebp]
  03011	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv409[ebp], edx
  03017	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0301b	8b f4		 mov	 esi, esp
  0301d	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv409[ebp]
  03023	50		 push	 eax
  03024	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  03027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0302d	3b f4		 cmp	 esi, esp
  0302f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03034	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  03038	8b f4		 mov	 esi, esp
  0303a	8d 4d 80	 lea	 ecx, DWORD PTR $T191599[ebp]
  0303d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  03043	3b f4		 cmp	 esi, esp
  03045	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1085 : 		nLeft = m_aPos[iPosParent].nStartR + 1;

  0304a	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  0304d	51		 push	 ecx
  0304e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03051	83 c1 14	 add	 ecx, 20			; 00000014H
  03054	e8 00 00 00 00	 call	 ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
  03059	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0305c	83 c2 01	 add	 edx, 1
  0305f	89 55 9c	 mov	 DWORD PTR _nLeft$[ebp], edx
$L182414:

; 1086 : 	}
; 1087 : 	x_DocChange( nLeft, nReplace, csInsert );

  03062	8d 45 bc	 lea	 eax, DWORD PTR _csInsert$[ebp]
  03065	50		 push	 eax
  03066	8b 4d a0	 mov	 ecx, DWORD PTR _nReplace$[ebp]
  03069	51		 push	 ecx
  0306a	8b 55 9c	 mov	 edx, DWORD PTR _nLeft$[ebp]
  0306d	52		 push	 edx
  0306e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03071	e8 00 00 00 00	 call	 ?x_DocChange@CMarkup@@IAEXHHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CMarkup::x_DocChange

; 1088 : 	x_Adjust( iPos, csInsert.GetLength() - nReplace );

  03076	6a 00		 push	 0
  03078	8b f4		 mov	 esi, esp
  0307a	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  0307d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  03083	3b f4		 cmp	 esi, esp
  03085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0308a	2b 45 a0	 sub	 eax, DWORD PTR _nReplace$[ebp]
  0308d	50		 push	 eax
  0308e	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  03091	50		 push	 eax
  03092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03095	e8 00 00 00 00	 call	 ?x_Adjust@CMarkup@@IAEXHH_N@Z ; CMarkup::x_Adjust

; 1089 : 
; 1090 : 	if ( bAddChild )

  0309a	0f b6 4d 14	 movzx	 ecx, BYTE PTR _bAddChild$[ebp]
  0309e	85 c9		 test	 ecx, ecx
  030a0	74 19		 je	 SHORT $L182418

; 1091 : 		x_SetPos( m_iPosParent, iPosParent, iPos );

  030a2	8b 55 c4	 mov	 edx, DWORD PTR _iPos$[ebp]
  030a5	52		 push	 edx
  030a6	8b 45 ec	 mov	 eax, DWORD PTR _iPosParent$[ebp]
  030a9	50		 push	 eax
  030aa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  030ad	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  030b0	52		 push	 edx
  030b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  030b4	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos

; 1092 : 	else

  030b9	eb 12		 jmp	 SHORT $L182419
$L182418:

; 1093 : 		x_SetPos( iPosParent, iPos, 0 );

  030bb	6a 00		 push	 0
  030bd	8b 45 c4	 mov	 eax, DWORD PTR _iPos$[ebp]
  030c0	50		 push	 eax
  030c1	8b 4d ec	 mov	 ecx, DWORD PTR _iPosParent$[ebp]
  030c4	51		 push	 ecx
  030c5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  030c8	e8 00 00 00 00	 call	 ?x_SetPos@CMarkup@@IAEXHHH@Z ; CMarkup::x_SetPos
$L182419:

; 1094 : 	return true;

  030cd	c6 85 7f ff ff
	ff 01		 mov	 BYTE PTR $T191600[ebp], 1
  030d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  030db	8b f4		 mov	 esi, esp
  030dd	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  030e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  030e6	3b f4		 cmp	 esi, esp
  030e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  030ed	8a 85 7f ff ff
	ff		 mov	 al, BYTE PTR $T191600[ebp]
$L182372:

; 1095 : }

  030f3	52		 push	 edx
  030f4	8b cd		 mov	 ecx, ebp
  030f6	50		 push	 eax
  030f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191616
  030fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03102	58		 pop	 eax
  03103	5a		 pop	 edx
  03104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0310e	5f		 pop	 edi
  0310f	5e		 pop	 esi
  03110	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  03116	3b ec		 cmp	 ebp, esp
  03118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0311d	8b e5		 mov	 esp, ebp
  0311f	5d		 pop	 ebp
  03120	c2 10 00	 ret	 16			; 00000010H
$L191616:
  03123	06 00 00 00	 DD	 6
  03127	00 00 00 00	 DD	 $L191615
$L191615:
  0312b	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0312f	04 00 00 00	 DD	 4
  03133	00 00 00 00	 DD	 $L191608
  03137	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0313b	04 00 00 00	 DD	 4
  0313f	00 00 00 00	 DD	 $L191609
  03143	bc ff ff ff	 DD	 -68			; ffffffbcH
  03147	04 00 00 00	 DD	 4
  0314b	00 00 00 00	 DD	 $L191610
  0314f	a8 ff ff ff	 DD	 -88			; ffffffa8H
  03153	04 00 00 00	 DD	 4
  03157	00 00 00 00	 DD	 $L191611
  0315b	94 ff ff ff	 DD	 -108			; ffffff94H
  0315f	04 00 00 00	 DD	 4
  03163	00 00 00 00	 DD	 $L191612
  03167	88 ff ff ff	 DD	 -120			; ffffff88H
  0316b	04 00 00 00	 DD	 4
  0316f	00 00 00 00	 DD	 $L191613
$L191613:
  03173	63		 DB	 99			; 00000063H
  03174	73		 DB	 115			; 00000073H
  03175	46		 DB	 70			; 00000046H
  03176	6f		 DB	 111			; 0000006fH
  03177	72		 DB	 114			; 00000072H
  03178	6d		 DB	 109			; 0000006dH
  03179	61		 DB	 97			; 00000061H
  0317a	74		 DB	 116			; 00000074H
  0317b	00		 DB	 0
$L191612:
  0317c	63		 DB	 99			; 00000063H
  0317d	73		 DB	 115			; 00000073H
  0317e	50		 DB	 80			; 00000050H
  0317f	61		 DB	 97			; 00000061H
  03180	72		 DB	 114			; 00000072H
  03181	65		 DB	 101			; 00000065H
  03182	6e		 DB	 110			; 0000006eH
  03183	74		 DB	 116			; 00000074H
  03184	54		 DB	 84			; 00000054H
  03185	61		 DB	 97			; 00000061H
  03186	67		 DB	 103			; 00000067H
  03187	4e		 DB	 78			; 0000004eH
  03188	61		 DB	 97			; 00000061H
  03189	6d		 DB	 109			; 0000006dH
  0318a	65		 DB	 101			; 00000065H
  0318b	00		 DB	 0
$L191611:
  0318c	63		 DB	 99			; 00000063H
  0318d	73		 DB	 115			; 00000073H
  0318e	56		 DB	 86			; 00000056H
  0318f	61		 DB	 97			; 00000061H
  03190	6c		 DB	 108			; 0000006cH
  03191	75		 DB	 117			; 00000075H
  03192	65		 DB	 101			; 00000065H
  03193	00		 DB	 0
$L191610:
  03194	63		 DB	 99			; 00000063H
  03195	73		 DB	 115			; 00000073H
  03196	49		 DB	 73			; 00000049H
  03197	6e		 DB	 110			; 0000006eH
  03198	73		 DB	 115			; 00000073H
  03199	65		 DB	 101			; 00000065H
  0319a	72		 DB	 114			; 00000072H
  0319b	74		 DB	 116			; 00000074H
  0319c	00		 DB	 0
$L191609:
  0319d	6e		 DB	 110			; 0000006eH
  0319e	4f		 DB	 79			; 0000004fH
  0319f	66		 DB	 102			; 00000066H
  031a0	66		 DB	 102			; 00000066H
  031a1	73		 DB	 115			; 00000073H
  031a2	65		 DB	 101			; 00000065H
  031a3	74		 DB	 116			; 00000074H
  031a4	00		 DB	 0
$L191608:
  031a5	69		 DB	 105			; 00000069H
  031a6	50		 DB	 80			; 00000050H
  031a7	6f		 DB	 111			; 0000006fH
  031a8	73		 DB	 115			; 00000073H
  031a9	42		 DB	 66			; 00000042H
  031aa	65		 DB	 101			; 00000065H
  031ab	66		 DB	 102			; 00000066H
  031ac	6f		 DB	 111			; 0000006fH
  031ad	72		 DB	 114			; 00000072H
  031ae	65		 DB	 101			; 00000065H
  031af	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L191601:
  000e6	8b f4		 mov	 esi, esp
  000e8	8d 4d bc	 lea	 ecx, DWORD PTR _csInsert$[ebp]
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000f1	3b f4		 cmp	 esi, esp
  000f3	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191602:
  000f8	8b f4		 mov	 esi, esp
  000fa	8d 4d a8	 lea	 ecx, DWORD PTR _csValue$182400[ebp]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00103	3b f4		 cmp	 esi, esp
  00105	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191603:
  0010a	8b f4		 mov	 esi, esp
  0010c	8d 4d 94	 lea	 ecx, DWORD PTR _csParentTagName$182409[ebp]
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00115	3b f4		 cmp	 esi, esp
  00117	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191604:
  0011c	8b f4		 mov	 esi, esp
  0011e	8d 4d 88	 lea	 ecx, DWORD PTR _csFormat$182411[ebp]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00127	3b f4		 cmp	 esi, esp
  00129	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191605:
  0012e	8b f4		 mov	 esi, esp
  00130	8d 4d 80	 lea	 ecx, DWORD PTR $T191599[ebp]
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00139	3b f4		 cmp	 esi, esp
  0013b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?x_AddElem@CMarkup@@IAE_NPBD0_N1@Z:
  00140	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191607
  00145	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?x_AddElem@CMarkup@@IAE_NPBD0_N1@Z ENDP			; CMarkup::x_AddElem
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 373  : 	CAtlSafeAllocBufferManager() : m_pHead(NULL) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_nRequestedSize$ = 8					; size = 4
?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 375  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 		CAtlSafeAllocBufferNode *p = (CAtlSafeAllocBufferNode*)Allocator::Allocate(nRequestedSize + sizeof(CAtlSafeAllocBufferNode));

  00017	8b 45 08	 mov	 eax, DWORD PTR _nRequestedSize$[ebp]
  0001a	83 c0 08	 add	 eax, 8
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 377  : 		if (p == NULL)

  00029	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0002d	75 04		 jne	 SHORT $L182437

; 378  : 			return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 1a		 jmp	 SHORT $L182424
$L182437:

; 379  : 		
; 380  : 		// Add buffer to the list
; 381  : 		p->m_pNext = m_pHead;

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	89 01		 mov	 DWORD PTR [ecx], eax

; 382  : 		m_pHead = p;

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  00043	89 11		 mov	 DWORD PTR [ecx], edx

; 383  : 		
; 384  : 		return p->GetData();

  00045	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00048	e8 00 00 00 00	 call	 ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
$L182424:

; 385  : 	}

  0004d	83 c4 08	 add	 esp, 8
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
EXTRN	__imp__malloc:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC NEAR		; ATL::CCRTAllocator::Allocate, COMDAT

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 31   : 		return malloc(nBytes);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 	}

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
_p$182443 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 387  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$L182441:

; 388  : 		// Walk the list and free the buffers
; 389  : 		while (m_pHead != NULL)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 22		 je	 SHORT $L182439

; 390  : 		{
; 391  : 			CAtlSafeAllocBufferNode* p = m_pHead;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	89 55 f8	 mov	 DWORD PTR _p$182443[ebp], edx

; 392  : 			m_pHead = m_pHead->m_pNext;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	89 02		 mov	 DWORD PTR [edx], eax

; 393  : 			Allocator::Free(p);

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _p$182443[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  0003c	83 c4 04	 add	 esp, 4

; 394  : 		}

  0003f	eb d6		 jmp	 SHORT $L182441
$L182439:

; 395  : 	}

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
EXTRN	__imp__free:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC NEAR		; ATL::CCRTAllocator::Free, COMDAT

; 35   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 36   : 		free(p);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : 	}

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 216  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 217  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 		if( m_p != reinterpret_cast< T* >( m_abFixedBuffer ) )

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	39 01		 cmp	 DWORD PTR [ecx], eax
  00019	74 08		 je	 SHORT $L182447

; 227  : 		{
; 228  : 			FreeHeap();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
$L182447:

; 229  : 		}
; 230  : 	}

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 233  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 234  : 		return( m_p );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 235  : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
PUBLIC	?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 243  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 244  : 		return( AllocateBytes( nElements*sizeof( T ) ) );

  0000e	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes

; 245  : 	}

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z		; ATL::CW2AEX<128>::Init
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z PROC NEAR		; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 419  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 420  : 		Init( psz, _AtlGetConversionACP() );

  00019	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0001e	50		 push	 eax
  0001f	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  00022	52		 push	 edx
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init

; 421  : 	}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC NEAR			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 428  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 		if( m_psz != m_szBuffer )

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	39 01		 cmp	 DWORD PTR [ecx], eax
  0001a	74 18		 je	 SHORT $L182458

; 430  : 		{
; 431  : 			free( m_psz );

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L182458:

; 432  : 		}
; 433  : 	}

  00034	5e		 pop	 esi
  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC NEAR		; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 436  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 437  : 		return( m_psz );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 438  : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
_TEXT	ENDS
EXTRN	__imp_?GetManager@?$CSimpleStringT@D$00@ATL@@QBEPAUIAtlStringMgr@2@XZ:NEAR
EXTRN	__imp_?StringLength@?$CSimpleStringT@D$00@ATL@@SAHPBD@Z:NEAR
EXTRN	__imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
xdata$x	SEGMENT
$T191641 DD	0ffffffffH
	DD	FLAT:$L191631
$T191636 DD	019930520H
	DD	01H
	DD	FLAT:$T191641
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT
$T191633 = -28						; size = 4
_strResult$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_psz1$ = 12						; size = 4
_str2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z PROC NEAR ; ATL::operator+, COMDAT

; 2032 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T191633[ebp], 0

; 2033 : 		CStringT strResult( str2.GetManager() );

  00035	8b f4		 mov	 esi, esp
  00037	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CSimpleStringT@D$00@ATL@@QBEPAUIAtlStringMgr@2@XZ
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b f4		 mov	 esi, esp
  00049	50		 push	 eax
  0004a	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2034 : 
; 2035 : 		Concatenate( strResult, psz1, StringLength( psz1 ), str2, str2.GetLength() );

  00061	8b f4		 mov	 esi, esp
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b f4		 mov	 esi, esp
  00075	50		 push	 eax
  00076	8b fc		 mov	 edi, esp
  00078	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00081	3b fc		 cmp	 edi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	50		 push	 eax
  00089	8b fc		 mov	 edi, esp
  0008b	8b 45 0c	 mov	 eax, DWORD PTR _psz1$[ebp]
  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?StringLength@?$CSimpleStringT@D$00@ATL@@SAHPBD@Z
  00095	83 c4 04	 add	 esp, 4
  00098	3b fc		 cmp	 edi, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	50		 push	 eax
  000a0	8b 4d 0c	 mov	 ecx, DWORD PTR _psz1$[ebp]
  000a3	51		 push	 ecx
  000a4	8d 55 ec	 lea	 edx, DWORD PTR _strResult$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  000ae	83 c4 14	 add	 esp, 20			; 00000014H
  000b1	3b f4		 cmp	 esi, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2036 : 
; 2037 : 		return( strResult );

  000b8	8b f4		 mov	 esi, esp
  000ba	8d 45 ec	 lea	 eax, DWORD PTR _strResult$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000c7	3b f4		 cmp	 esi, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b 4d e4	 mov	 ecx, DWORD PTR $T191633[ebp]
  000d1	83 c9 01	 or	 ecx, 1
  000d4	89 4d e4	 mov	 DWORD PTR $T191633[ebp], ecx
  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000de	8b f4		 mov	 esi, esp
  000e0	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2038 : 	}

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191640
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	83 c4 1c	 add	 esp, 28			; 0000001cH
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
$L191640:
  0011e	01 00 00 00	 DD	 1
  00122	00 00 00 00	 DD	 $L191639
$L191639:
  00126	ec ff ff ff	 DD	 -20			; ffffffecH
  0012a	04 00 00 00	 DD	 4
  0012e	00 00 00 00	 DD	 $L191637
$L191637:
  00132	73		 DB	 115			; 00000073H
  00133	74		 DB	 116			; 00000074H
  00134	72		 DB	 114			; 00000072H
  00135	52		 DB	 82			; 00000052H
  00136	65		 DB	 101			; 00000065H
  00137	73		 DB	 115			; 00000073H
  00138	75		 DB	 117			; 00000075H
  00139	6c		 DB	 108			; 0000006cH
  0013a	74		 DB	 116			; 00000074H
  0013b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191631:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191636
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ENDP ; ATL::operator+
PUBLIC	?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap
PUBLIC	??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
;	COMDAT ??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
CONST	SEGMENT
??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@ DB 'm_p == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlalloc.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 276  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		ATLASSERT( m_p == NULL );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 2b		 je	 SHORT $L191645
  00017	8b f4		 mov	 esi, esp
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
  0001e	6a 00		 push	 0
  00020	68 15 01 00 00	 push	 277			; 00000115H
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BOCPFCEM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	75 01		 jne	 SHORT $L191645
  00041	cc		 int	 3
$L191645:

; 278  : 		if( nBytes > t_nFixedBytes )

  00042	81 7d 08 80 00
	00 00		 cmp	 DWORD PTR _nBytes$[ebp], 128 ; 00000080H
  00049	76 0e		 jbe	 SHORT $L184267

; 279  : 		{
; 280  : 			AllocateHeap( nBytes );

  0004b	8b 55 08	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0004e	52		 push	 edx
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap

; 281  : 		}
; 282  : 		else

  00057	eb 0b		 jmp	 SHORT $L184268
$L184267:

; 283  : 		{
; 284  : 			m_p = reinterpret_cast< T* >( m_abFixedBuffer );

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax
$L184268:

; 285  : 		}
; 286  : 
; 287  : 		return( m_p );

  00064	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]

; 288  : 	}

  00069	5e		 pop	 esi
  0006a	83 c4 04	 add	 esp, 4
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap, COMDAT
; _this$ = ecx

; 312  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 313  : 		Allocator::Free( m_p );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00019	83 c4 04	 add	 esp, 4

; 314  : 	}

  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
_TEXT	ENDS
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT
_nLengthA$ = -12					; size = 4
_nLengthW$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z PROC NEAR		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 442  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 443  : 		if (psz == NULL)

  0001f	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00023	75 0e		 jne	 SHORT $L184274

; 444  : 		{
; 445  : 			m_psz = NULL;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 446  : 			return;

  0002e	e9 8b 00 00 00	 jmp	 $L191647
$L184274:

; 447  : 		}
; 448  : 		int nLengthW = lstrlenW( psz )+1;

  00033	8b f4		 mov	 esi, esp
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f8	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 449  : 		int nLengthA = nLengthW*2;

  0004c	8b 55 f8	 mov	 edx, DWORD PTR _nLengthW$[ebp]
  0004f	d1 e2		 shl	 edx, 1
  00051	89 55 f4	 mov	 DWORD PTR _nLengthA$[ebp], edx

; 450  : 
; 451  : 		if( nLengthA > t_nBufferLength )

  00054	81 7d f4 80 00
	00 00		 cmp	 DWORD PTR _nLengthA$[ebp], 128 ; 00000080H
  0005b	7e 2d		 jle	 SHORT $L184277

; 452  : 		{
; 453  : 			m_psz = static_cast< LPSTR >( malloc( nLengthA*sizeof( char ) ) );

  0005d	8b f4		 mov	 esi, esp
  0005f	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00062	50		 push	 eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00069	83 c4 04	 add	 esp, 4
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	89 01		 mov	 DWORD PTR [ecx], eax

; 454  : 			if (m_psz == NULL)

  00078	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0007e	75 0a		 jne	 SHORT $L184277

; 455  : 			{
; 456  : 				AtlThrow( E_OUTOFMEMORY );

  00080	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00085	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L184277:

; 457  : 			}
; 458  : 		}
; 459  : 
; 460  : 		if (::WideCharToMultiByte( nCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ) == 0)

  0008a	8b f4		 mov	 esi, esp
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00093	50		 push	 eax
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	52		 push	 edx
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000a1	51		 push	 ecx
  000a2	6a 00		 push	 0
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  000a7	52		 push	 edx
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	85 c0		 test	 eax, eax
  000b7	75 05		 jne	 SHORT $L191647

; 461  : 		{
; 462  : 			AtlThrowLastWin32();

  000b9	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$L191647:

; 463  : 		}
; 464  : 	}

  000be	5e		 pop	 esi
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	3b ec		 cmp	 ebp, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_dwError$ = -4						; size = 4
?AtlThrowLastWin32@ATL@@YGXXZ PROC NEAR			; ATL::AtlThrowLastWin32, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 81   : 	DWORD dwError = ::GetLastError();

  00015	8b f4		 mov	 esi, esp
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	89 45 fc	 mov	 DWORD PTR _dwError$[ebp], eax

; 82   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

  00027	83 7d fc 00	 cmp	 DWORD PTR _dwError$[ebp], 0
  0002b	7f 08		 jg	 SHORT $L191649
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _dwError$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  00033	eb 18		 jmp	 SHORT $L191650
$L191649:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _dwError$[ebp]
  00038	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0003e	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00044	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0004a	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
$L191650:
  0004d	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L191648:

; 83   : }

  00056	5e		 pop	 esi
  00057	83 c4 08	 add	 esp, 8
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData, COMDAT
; _this$ = ecx

; 365  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 366  : 			return (this + 1);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 08	 add	 eax, 8

; 367  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap, COMDAT
; _this$ = ecx

; 292  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 293  : 		T* p = static_cast< T* >( Allocator::Allocate( nBytes ) );

  00017	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00020	83 c4 04	 add	 esp, 4
  00023	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 294  : 		if( p == NULL )

  00026	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0002a	75 0a		 jne	 SHORT $L185775

; 295  : 		{
; 296  : 			AtlThrow( E_OUTOFMEMORY );

  0002c	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00031	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L185775:

; 297  : 		}
; 298  : 		m_p = p;

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  0003c	89 11		 mov	 DWORD PTR [ecx], edx
$L191652:

; 299  : 	}

  0003e	83 c4 08	 add	 esp, 8
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T191662 DD	0ffffffffH
	DD	FLAT:$L191656
	DD	00H
	DD	FLAT:$L191655
$T191660 DD	019930520H
	DD	02H
	DD	FLAT:$T191662
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191657 = -44						; size = 4
$T191654 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191657[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191654[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191657[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191657[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191654[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191655:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191654[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191656:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191657[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191658
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191657[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191658:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191660
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191674 DD	0ffffffffH
	DD	FLAT:$L191668
	DD	00H
	DD	FLAT:$L191667
$T191672 DD	019930520H
	DD	02H
	DD	FLAT:$T191674
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191669 = -44						; size = 4
$T191666 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 31   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191669[ebp], 0

; 32   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191666[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191669[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191669[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191666[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 33   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191667:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191666[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191668:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191669[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191670
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191669[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191670:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191672
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191686 DD	0ffffffffH
	DD	FLAT:$L191680
	DD	00H
	DD	FLAT:$L191679
$T191684 DD	019930520H
	DD	02H
	DD	FLAT:$T191686
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT
tv78 = -52						; size = 4
tv83 = -48						; size = 4
$T191681 = -44						; size = 4
$T191678 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 41   : 	{	// return character + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191681[ebp], 0

; 42   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8a 45 0c	 mov	 al, BYTE PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	6a 01		 push	 1
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T191678[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 d0	 mov	 DWORD PTR tv83[ebp], eax
  0004e	8b 4d d0	 mov	 ecx, DWORD PTR tv83[ebp]
  00051	89 4d cc	 mov	 DWORD PTR tv78[ebp], ecx
  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00060	52		 push	 edx
  00061	8b 4d cc	 mov	 ecx, DWORD PTR tv78[ebp]
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b f4		 mov	 esi, esp
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b 45 d4	 mov	 eax, DWORD PTR $T191681[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 45 d4	 mov	 DWORD PTR $T191681[ebp], eax
  0008d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00091	8b f4		 mov	 esi, esp
  00093	8d 4d d8	 lea	 ecx, DWORD PTR $T191678[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	83 c4 34	 add	 esp, 52			; 00000034H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191679:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191678[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191680:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191681[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191682
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191681[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191682:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191684
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191698 DD	0ffffffffH
	DD	FLAT:$L191692
	DD	00H
	DD	FLAT:$L191691
$T191696 DD	019930520H
	DD	02H
	DD	FLAT:$T191698
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191693 = -44						; size = 4
$T191690 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191693[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191690[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191693[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191693[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191690[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191691:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191690[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191692:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191693[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191694
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191693[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191694:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191696
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191710 DD	0ffffffffH
	DD	FLAT:$L191704
	DD	00H
	DD	FLAT:$L191703
$T191708 DD	019930520H
	DD	02H
	DD	FLAT:$T191710
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191705 = -44						; size = 4
$T191702 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 61   : 	{	// return string + character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191705[ebp], 0

; 62   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191702[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8a 55 10	 mov	 dl, BYTE PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191705[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191705[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191702[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191703:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191702[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191704:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191705[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191706
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191705[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191706:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191708
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191722 DD	0ffffffffH
	DD	FLAT:$L191716
	DD	00H
	DD	FLAT:$L191715
$T191720 DD	019930520H
	DD	02H
	DD	FLAT:$T191722
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191717 = -44						; size = 4
$T191714 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191717[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191714[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191717[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191717[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191714[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191715:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191714[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191716:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191717[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191718
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191717[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191718:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191720
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191734 DD	0ffffffffH
	DD	FLAT:$L191728
	DD	00H
	DD	FLAT:$L191727
$T191732 DD	019930520H
	DD	02H
	DD	FLAT:$T191734
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191729 = -44						; size = 4
$T191726 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 31   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191729[ebp], 0

; 32   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191726[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191729[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191729[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191726[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 33   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191727:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191726[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191728:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191729[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191730
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191729[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191730:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191732
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191746 DD	0ffffffffH
	DD	FLAT:$L191740
	DD	00H
	DD	FLAT:$L191739
$T191744 DD	019930520H
	DD	02H
	DD	FLAT:$T191746
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
_TEXT	SEGMENT
tv78 = -52						; size = 4
tv83 = -48						; size = 4
$T191741 = -44						; size = 4
$T191738 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 2
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 41   : 	{	// return character + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191741[ebp], 0

; 42   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	66 8b 45 0c	 mov	 ax, WORD PTR __Left$[ebp]
  00039	50		 push	 eax
  0003a	6a 01		 push	 1
  0003c	8d 4d d8	 lea	 ecx, DWORD PTR $T191738[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	89 45 d0	 mov	 DWORD PTR tv83[ebp], eax
  0004f	8b 4d d0	 mov	 ecx, DWORD PTR tv83[ebp]
  00052	89 4d cc	 mov	 DWORD PTR tv78[ebp], ecx
  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005c	8b f4		 mov	 esi, esp
  0005e	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00061	52		 push	 edx
  00062	8b 4d cc	 mov	 ecx, DWORD PTR tv78[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b f4		 mov	 esi, esp
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b 45 d4	 mov	 eax, DWORD PTR $T191741[ebp]
  00088	83 c8 01	 or	 eax, 1
  0008b	89 45 d4	 mov	 DWORD PTR $T191741[ebp], eax
  0008e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00092	8b f4		 mov	 esi, esp
  00094	8d 4d d8	 lea	 ecx, DWORD PTR $T191738[ebp]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	83 c4 34	 add	 esp, 52			; 00000034H
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191739:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191738[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191740:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191741[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191742
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191741[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191742:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191744
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191758 DD	0ffffffffH
	DD	FLAT:$L191752
	DD	00H
	DD	FLAT:$L191751
$T191756 DD	019930520H
	DD	02H
	DD	FLAT:$T191758
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191753 = -44						; size = 4
$T191750 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191753[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191750[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T191753[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T191753[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T191750[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191751:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191750[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191752:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191753[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191754
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191753[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191754:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191756
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191770 DD	0ffffffffH
	DD	FLAT:$L191764
	DD	00H
	DD	FLAT:$L191763
$T191768 DD	019930520H
	DD	02H
	DD	FLAT:$T191770
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T191765 = -44						; size = 4
$T191762 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 2
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 61   : 	{	// return string + character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T191765[ebp], 0

; 62   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T191762[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	66 8b 55 10	 mov	 dx, WORD PTR __Right$[ebp]
  0005f	52		 push	 edx
  00060	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b f4		 mov	 esi, esp
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b 45 d4	 mov	 eax, DWORD PTR $T191765[ebp]
  00086	83 c8 01	 or	 eax, 1
  00089	89 45 d4	 mov	 DWORD PTR $T191765[ebp], eax
  0008c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00090	8b f4		 mov	 esi, esp
  00092	8d 4d d8	 lea	 ecx, DWORD PTR $T191762[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	}

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	83 c4 34	 add	 esp, 52			; 00000034H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191763:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T191762[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191764:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T191765[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L191766
  0001e	83 65 d4 fe	 and	 DWORD PTR $T191765[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L191766:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191768
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	__imp_?width@ios_base@std@@QBEHXZ:NEAR
EXTRN	__imp_?width@ios_base@std@@QAEHH@Z:NEAR
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:NEAR
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:NEAR
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB:DWORD
EXTRN	__imp_?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z:NEAR
EXTRN	__imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z:NEAR
EXTRN	__imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_??1locale@std@@QAE@XZ:NEAR
EXTRN	__imp_?to_char_type@?$char_traits@D@std@@SADABH@Z:NEAR
EXTRN	__imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:NEAR
EXTRN	__imp_?eof@?$char_traits@D@std@@SAHXZ:NEAR
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:NEAR
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191790 DD	0ffffffffH
	DD	FLAT:$L191781
	DD	00H
	DD	FLAT:$L191782
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T191792 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L191780
$T191791 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T191792
$T191784 DD	019930520H
	DD	04H
	DD	FLAT:$T191790
	DD	01H
	DD	FLAT:$T191791
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv207 = -128						; size = 1
tv206 = -127						; size = 1
tv205 = -126						; size = 1
tv204 = -125						; size = 1
tv203 = -124						; size = 4
tv202 = -120						; size = 4
tv201 = -116						; size = 4
tv200 = -112						; size = 4
tv199 = -108						; size = 4
tv198 = -104						; size = 4
tv135 = -100						; size = 4
tv197 = -96						; size = 4
tv196 = -92						; size = 4
tv195 = -88						; size = 4
tv194 = -84						; size = 4
tv189 = -80						; size = 4
tv65 = -76						; size = 4
$T191778 = -72						; size = 4
$T191777 = -68						; size = 4
$T191774 = -64						; size = 4
__Meta$187216 = -56					; size = 4
__Size$187213 = -48					; size = 4
__Ctype_fac$187210 = -44				; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 425  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00022	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 426  : 	typedef ctype<_Elem> _Ctype;
; 427  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 428  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 429  : 	typedef typename _Mystr::size_type _Mysizt;
; 430  : 
; 431  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 432  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 433  : 	const typename _Myis::sentry _Ok(_Istr);

  0003c	6a 00		 push	 0
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 434  : 
; 435  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 87 02 00
	00		 je	 $L191779

; 436  : 		{	// state okay, extract characters
; 437  : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00064	8b f4		 mov	 esi, esp
  00066	8d 55 c0	 lea	 edx, DWORD PTR $T191774[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00087	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]
  0008a	89 45 b0	 mov	 DWORD PTR tv189[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00091	8b 4d b0	 mov	 ecx, DWORD PTR tv189[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 d4	 mov	 DWORD PTR __Ctype_fac$187210[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a4	8b f4		 mov	 esi, esp
  000a6	8d 4d c0	 lea	 ecx, DWORD PTR $T191774[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 		_Str.erase();

  000b6	8b f4		 mov	 esi, esp
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 
; 440  : 		_TRY_IO_BEGIN

  000d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 		_Mysizt _Size = 0 < _Istr.width()
; 442  : 			&& (_Mysizt)_Istr.width() < _Str.max_size()
; 443  : 				? (_Mysizt)_Istr.width() : _Str.max_size();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000df	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000e2	8b f4		 mov	 esi, esp
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 ac	 mov	 DWORD PTR tv194[ebp], eax
  000f4	83 7d ac 00	 cmp	 DWORD PTR tv194[ebp], 0
  000f8	7e 61		 jle	 SHORT $L191775
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00102	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00105	8b f4		 mov	 esi, esp
  00107	8b ca		 mov	 ecx, edx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 a8	 mov	 DWORD PTR tv195[ebp], eax
  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 45 a4	 mov	 DWORD PTR tv196[ebp], eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR tv195[ebp]
  00131	3b 45 a4	 cmp	 eax, DWORD PTR tv196[ebp]
  00134	73 25		 jae	 SHORT $L191775
  00136	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0013e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	89 45 a0	 mov	 DWORD PTR tv197[ebp], eax
  00153	8b 45 a0	 mov	 eax, DWORD PTR tv197[ebp]
  00156	89 45 9c	 mov	 DWORD PTR tv135[ebp], eax
  00159	eb 1b		 jmp	 SHORT $L191776
$L191775:
  0015b	8b f4		 mov	 esi, esp
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 45 98	 mov	 DWORD PTR tv198[ebp], eax
  00170	8b 4d 98	 mov	 ecx, DWORD PTR tv198[ebp]
  00173	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$L191776:
  00176	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00179	89 55 d0	 mov	 DWORD PTR __Size$187213[ebp], edx

; 444  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0017c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00184	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00187	8b f4		 mov	 esi, esp
  00189	8b ca		 mov	 ecx, edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00198	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  0019b	8b f4		 mov	 esi, esp
  0019d	8b 4d 94	 mov	 ecx, DWORD PTR tv199[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	89 45 90	 mov	 DWORD PTR tv200[ebp], eax
  001b0	8b 45 90	 mov	 eax, DWORD PTR tv200[ebp]
  001b3	89 45 c8	 mov	 DWORD PTR __Meta$187216[ebp], eax

; 445  : 
; 446  : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001b6	eb 41		 jmp	 SHORT $L187217
$L187218:
  001b8	8b 4d d0	 mov	 ecx, DWORD PTR __Size$187213[ebp]
  001bb	83 e9 01	 sub	 ecx, 1
  001be	89 4d d0	 mov	 DWORD PTR __Size$187213[ebp], ecx
  001c1	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001c4	8b 02		 mov	 eax, DWORD PTR [edx]
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001c9	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  001cc	8b f4		 mov	 esi, esp
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001d4	3b f4		 cmp	 esi, esp
  001d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001db	89 45 8c	 mov	 DWORD PTR tv201[ebp], eax
  001de	8b f4		 mov	 esi, esp
  001e0	8b 4d 8c	 mov	 ecx, DWORD PTR tv201[ebp]
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001e9	3b f4		 cmp	 esi, esp
  001eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f0	89 45 88	 mov	 DWORD PTR tv202[ebp], eax
  001f3	8b 4d 88	 mov	 ecx, DWORD PTR tv202[ebp]
  001f6	89 4d c8	 mov	 DWORD PTR __Meta$187216[ebp], ecx
$L187217:
  001f9	83 7d d0 00	 cmp	 DWORD PTR __Size$187213[ebp], 0
  001fd	0f 86 c0 00 00
	00		 jbe	 $L187219

; 447  : 			if(_Traits::eq_int_type(_Traits::eof(), _Meta))

  00203	8b f4		 mov	 esi, esp
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	89 45 84	 mov	 DWORD PTR tv203[ebp], eax
  00215	8b 55 84	 mov	 edx, DWORD PTR tv203[ebp]
  00218	89 55 bc	 mov	 DWORD PTR $T191777[ebp], edx
  0021b	8b f4		 mov	 esi, esp
  0021d	8d 45 c8	 lea	 eax, DWORD PTR __Meta$187216[ebp]
  00220	50		 push	 eax
  00221	8d 4d bc	 lea	 ecx, DWORD PTR $T191777[ebp]
  00224	51		 push	 ecx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0022b	83 c4 08	 add	 esp, 8
  0022e	3b f4		 cmp	 esi, esp
  00230	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00235	88 45 83	 mov	 BYTE PTR tv204[ebp], al
  00238	0f b6 55 83	 movzx	 edx, BYTE PTR tv204[ebp]
  0023c	85 d2		 test	 edx, edx
  0023e	74 0b		 je	 SHORT $L187221

; 448  : 				{	// end of file, quit
; 449  : 				_State |= ios_base::eofbit;

  00240	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00243	83 c8 01	 or	 eax, 1
  00246	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 450  : 				break;

  00249	eb 78		 jmp	 SHORT $L187219
$L187221:

; 451  : 				}
; 452  : 			else if (_Ctype_fac.is(_Ctype::space,
; 453  : 				_Traits::to_char_type(_Meta)))

  0024b	8b f4		 mov	 esi, esp
  0024d	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$187216[ebp]
  00250	51		 push	 ecx
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00257	83 c4 04	 add	 esp, 4
  0025a	3b f4		 cmp	 esi, esp
  0025c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00261	88 45 82	 mov	 BYTE PTR tv205[ebp], al
  00264	8b f4		 mov	 esi, esp
  00266	8a 55 82	 mov	 dl, BYTE PTR tv205[ebp]
  00269	52		 push	 edx
  0026a	6a 48		 push	 72			; 00000048H
  0026c	8b 4d d4	 mov	 ecx, DWORD PTR __Ctype_fac$187210[ebp]
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	88 45 81	 mov	 BYTE PTR tv206[ebp], al
  0027f	0f b6 45 81	 movzx	 eax, BYTE PTR tv206[ebp]
  00283	85 c0		 test	 eax, eax
  00285	74 02		 je	 SHORT $L187223

; 454  : 				break;	// whitespace, quit

  00287	eb 3a		 jmp	 SHORT $L187219
$L187223:

; 455  : 			else
; 456  : 				{	// add character to string
; 457  : 				_Str.append(1, _Traits::to_char_type(_Meta));

  00289	8b f4		 mov	 esi, esp
  0028b	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$187216[ebp]
  0028e	51		 push	 ecx
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00295	83 c4 04	 add	 esp, 4
  00298	3b f4		 cmp	 esi, esp
  0029a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029f	88 45 80	 mov	 BYTE PTR tv207[ebp], al
  002a2	8b f4		 mov	 esi, esp
  002a4	8a 55 80	 mov	 dl, BYTE PTR tv207[ebp]
  002a7	52		 push	 edx
  002a8	6a 01		 push	 1
  002aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
  002b3	3b f4		 cmp	 esi, esp
  002b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 				_Changed = true;

  002ba	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 459  : 				}

  002be	e9 f5 fe ff ff	 jmp	 $L187218
$L187219:
  002c3	eb 26		 jmp	 SHORT $L191779
$L191780:

; 460  : 		_CATCH_IO_(_Istr)

  002c5	8b f4		 mov	 esi, esp
  002c7	6a 01		 push	 1
  002c9	6a 04		 push	 4
  002cb	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d0	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002d3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d6	8b ca		 mov	 ecx, edx
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002de	3b f4		 cmp	 esi, esp
  002e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e5	b8 00 00 00 00	 mov	 eax, $L191779
  002ea	c3		 ret	 0
$L191779:
  002eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 461  : 		}
; 462  : 
; 463  : 	_Istr.width(0);

  002f2	8b f4		 mov	 esi, esp
  002f4	6a 00		 push	 0
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b ca		 mov	 ecx, edx
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	if (!_Changed)

  00310	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00314	85 c0		 test	 eax, eax
  00316	75 09		 jne	 SHORT $L187225

; 465  : 		_State |= ios_base::failbit;

  00318	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0031b	83 c9 02	 or	 ecx, 2
  0031e	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L187225:

; 466  : 	_Istr.setstate(_State);

  00321	8b f4		 mov	 esi, esp
  00323	6a 00		 push	 0
  00325	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00328	52		 push	 edx
  00329	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0032c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00331	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00334	8b ca		 mov	 ecx, edx
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0033c	3b f4		 cmp	 esi, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	return (_Istr);

  00343	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00346	89 45 b8	 mov	 DWORD PTR $T191778[ebp], eax
  00349	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00350	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00353	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00358	8b 45 b8	 mov	 eax, DWORD PTR $T191778[ebp]

; 468  : 	}

  0035b	52		 push	 edx
  0035c	8b cd		 mov	 ecx, ebp
  0035e	50		 push	 eax
  0035f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191789
  00365	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0036a	58		 pop	 eax
  0036b	5a		 pop	 edx
  0036c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0036f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00376	5f		 pop	 edi
  00377	5e		 pop	 esi
  00378	5b		 pop	 ebx
  00379	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0037f	3b ec		 cmp	 ebp, esp
  00381	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00386	8b e5		 mov	 esp, ebp
  00388	5d		 pop	 ebp
  00389	c3		 ret	 0
$L191789:
  0038a	02 00 00 00	 DD	 2
  0038e	00 00 00 00	 DD	 $L191788
$L191788:
  00392	dc ff ff ff	 DD	 -36			; ffffffdcH
  00396	08 00 00 00	 DD	 8
  0039a	00 00 00 00	 DD	 $L191785
  0039e	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003a2	04 00 00 00	 DD	 4
  003a6	00 00 00 00	 DD	 $L191786
$L191786:
  003aa	5f		 DB	 95			; 0000005fH
  003ab	4d		 DB	 77			; 0000004dH
  003ac	65		 DB	 101			; 00000065H
  003ad	74		 DB	 116			; 00000074H
  003ae	61		 DB	 97			; 00000061H
  003af	00		 DB	 0
$L191785:
  003b0	5f		 DB	 95			; 0000005fH
  003b1	4f		 DB	 79			; 0000004fH
  003b2	6b		 DB	 107			; 0000006bH
  003b3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191781:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
$L191782:
  00008	8b f4		 mov	 esi, esp
  0000a	8d 4d c0	 lea	 ecx, DWORD PTR $T191774[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  00013	3b f4		 cmp	 esi, esp
  00015	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191784
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\istream
xdata$x	SEGMENT
$T191802 DD	0ffffffffH
	DD	FLAT:$L191798
$T191800 DD	019930520H
	DD	01H
	DD	FLAT:$T191802
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 72   : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00037	8b f4		 mov	 esi, esp
  00039	8a 4d 0c	 mov	 cl, BYTE PTR __Noskip$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 74   : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00069	5e		 pop	 esi
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191798:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191800
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 77   : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 79   : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 58   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 			if (_Myistr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L183866

; 60   : 				_Myistr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L183866:

; 61   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 52   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : 			if (_Myistr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L185322

; 54   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L185322:

; 55   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@@
PUBLIC	__CTA2?AVbad_cast@@
PUBLIC	??_R0?AVbad_cast@@@8				; bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
EXTRN	??0bad_cast@@QAE@ABV0@@Z:NEAR			; bad_cast::bad_cast
EXTRN	??1bad_cast@@UAE@XZ:NEAR			; bad_cast::~bad_cast
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:NEAR
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:NEAR
EXTRN	__CxxThrowException@8:NEAR
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z:NEAR
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:NEAR
EXTRN	__imp_?_Incref@facet@locale@std@@QAEXXZ:NEAR
EXTRN	__imp_?_Register@facet@locale@std@@QAEXXZ:NEAR
EXTRN	__imp_??0bad_cast@@QAE@PBD@Z:NEAR
EXTRN	__imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z:NEAR
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191820 DD	0ffffffffH
	DD	FLAT:$L191812
$T191814 DD	019930520H
	DD	01H
	DD	FLAT:$T191820
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT
__TI2?AVbad_cast@@ DD 00H
	DD	FLAT:??1bad_cast@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@@
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@@@8 DD FLAT:??_7type_info@@6B@		; bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T191811 = -64						; size = 4
$T191809 = -60						; size = 12
__Pfmod$187139 = -48					; size = 4
__Pf$ = -44						; size = 4
__Id$ = -40						; size = 4
__Psave$ = -32						; size = 4
__Lock$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC NEAR ; std::use_facet<std::ctype<char> >, COMDAT

; 315  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00020	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 316  : 	_Lockit _Lock(_LOCK_LOCALE);	// the thread lock, make get atomic

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 317  : 	const locale::facet *_Psave =
; 318  : 		_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0004c	89 45 e0	 mov	 DWORD PTR __Psave$[ebp], eax

; 319  : 
; 320  : 	size_t _Id = _Facet::id;

  0004f	8b f4		 mov	 esi, esp
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	89 45 d8	 mov	 DWORD PTR __Id$[ebp], eax

; 321  : 	const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00067	8b f4		 mov	 esi, esp
  00069	8b 4d d8	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR __Pf$[ebp], eax

; 322  : 
; 323  : 	if (_Pf != 0)

  00080	83 7d d4 00	 cmp	 DWORD PTR __Pf$[ebp], 0
  00084	74 05		 je	 SHORT $L187125

; 324  : 		;	// got facet from locale
; 325  : 	else if (_Psave != 0)

  00086	e9 86 00 00 00	 jmp	 $L187126
$L187125:
  0008b	83 7d e0 00	 cmp	 DWORD PTR __Psave$[ebp], 0
  0008f	74 08		 je	 SHORT $L187127

; 326  : 		_Pf = _Psave;	// lazy facet already allocated

  00091	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  00094	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 327  : 	else if (_Facet::_Getcat(&_Psave) == (size_t)(-1))

  00097	eb 78		 jmp	 SHORT $L187126
$L187127:
  00099	8b f4		 mov	 esi, esp
  0009b	8d 45 e0	 lea	 eax, DWORD PTR __Psave$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 25		 jne	 SHORT $L187130

; 328  : 
; 329  :  #if _HAS_EXCEPTIONS
; 330  : 		throw bad_cast();	// lazy disallowed

  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  000bb	8d 4d c4	 lea	 ecx, DWORD PTR $T191809[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@@QAE@PBD@Z
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:__TI2?AVbad_cast@@
  000d0	8d 4d c4	 lea	 ecx, DWORD PTR $T191809[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$L187130:

; 331  : 
; 332  :  #else /* _HAS_EXCEPTIONS */
; 333  : 		abort();	// lazy disallowed
; 334  :  #endif /* _HAS_EXCEPTIONS */
; 335  : 
; 336  : 	else
; 337  : 		{	// queue up lazy facet for destruction
; 338  : 		_Pf = _Psave;

  000d9	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  000dc	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 339  : 		_Facetptr<_Facet>::_Psave = _Psave;

  000df	8b 45 e0	 mov	 eax, DWORD PTR __Psave$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 340  : 
; 341  : 		locale::facet *_Pfmod = (_Facet *)_Psave;

  000e7	8b 4d e0	 mov	 ecx, DWORD PTR __Psave$[ebp]
  000ea	89 4d d0	 mov	 DWORD PTR __Pfmod$187139[ebp], ecx

; 342  : 		_Pfmod->_Incref();

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$187139[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Pfmod->_Register();

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$187139[ebp]
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Register@facet@locale@std@@QAEXXZ
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187126:

; 344  : 		}
; 345  : 
; 346  : 	return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00111	8b 55 d4	 mov	 edx, DWORD PTR __Pf$[ebp]
  00114	89 55 c0	 mov	 DWORD PTR $T191811[ebp], edx
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 45 c0	 mov	 eax, DWORD PTR $T191811[ebp]
$L191808:

; 347  : 	}

  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191819
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	83 c4 40	 add	 esp, 64			; 00000040H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$L191819:
  0015e	02 00 00 00	 DD	 2
  00162	00 00 00 00	 DD	 $L191818
$L191818:
  00166	ec ff ff ff	 DD	 -20			; ffffffecH
  0016a	04 00 00 00	 DD	 4
  0016e	00 00 00 00	 DD	 $L191815
  00172	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00176	04 00 00 00	 DD	 4
  0017a	00 00 00 00	 DD	 $L191816
$L191816:
  0017e	5f		 DB	 95			; 0000005fH
  0017f	50		 DB	 80			; 00000050H
  00180	73		 DB	 115			; 00000073H
  00181	61		 DB	 97			; 00000061H
  00182	76		 DB	 118			; 00000076H
  00183	65		 DB	 101			; 00000065H
  00184	00		 DB	 0
$L191815:
  00185	5f		 DB	 95			; 0000005fH
  00186	4c		 DB	 76			; 0000004cH
  00187	6f		 DB	 111			; 0000006fH
  00188	63		 DB	 99			; 00000063H
  00189	6b		 DB	 107			; 0000006bH
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191812:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191814
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 528  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 529  : 	return (getline(_Istr, _Str, _Istr.widen('\n')));

  00004	8b f4		 mov	 esi, esp
  00006	6a 0a		 push	 10			; 0000000aH
  00008	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00010	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00013	8b ca		 mov	 ecx, edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	50		 push	 eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	}

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?to_int_type@?$char_traits@D@std@@SAHABD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191839 DD	0ffffffffH
	DD	FLAT:$L191830
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T191841 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L191829
$T191840 DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T191841
$T191832 DD	019930520H
	DD	03H
	DD	FLAT:$T191839
	DD	01H
	DD	FLAT:$T191840
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv175 = -113						; size = 1
tv174 = -112						; size = 4
tv173 = -108						; size = 4
tv172 = -104						; size = 4
tv171 = -98						; size = 1
tv170 = -97						; size = 1
tv169 = -96						; size = 4
tv168 = -92						; size = 4
tv167 = -88						; size = 4
tv166 = -84						; size = 4
tv165 = -80						; size = 4
tv65 = -76						; size = 4
$T191827 = -72						; size = 4
$T191826 = -68						; size = 4
__Meta$187236 = -60					; size = 4
__Metadelim$187235 = -48				; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC NEAR ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 477  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 64	 sub	 esp, 100		; 00000064H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00022	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 478  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 479  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 480  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 481  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003c	6a 01		 push	 1
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 482  : 
; 483  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 f6 01 00
	00		 je	 $L191828

; 484  : 		{	// state okay, extract characters
; 485  : 		_TRY_IO_BEGIN

  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 486  : 		_Str.erase();

  00068	8b f4		 mov	 esi, esp
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  : 		const typename _Traits::int_type _Metadelim =
; 488  : 			_Traits::to_int_type(_Delim);

  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_int_type@?$char_traits@D@std@@SAHABD@Z
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0009e	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  000a1	89 55 d0	 mov	 DWORD PTR __Metadelim$187235[ebp], edx

; 489  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a4	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000ac	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000af	8b f4		 mov	 esi, esp
  000b1	8b ca		 mov	 ecx, edx
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	89 45 b0	 mov	 DWORD PTR tv165[ebp], eax
  000c3	8b f4		 mov	 esi, esp
  000c5	8b 4d b0	 mov	 ecx, DWORD PTR tv165[ebp]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	89 45 ac	 mov	 DWORD PTR tv166[ebp], eax
  000d8	8b 45 ac	 mov	 eax, DWORD PTR tv166[ebp]
  000db	89 45 c4	 mov	 DWORD PTR __Meta$187236[ebp], eax

; 490  : 
; 491  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000de	eb 38		 jmp	 SHORT $L187237
$L187238:
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e8	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000eb	8b f4		 mov	 esi, esp
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	89 45 a8	 mov	 DWORD PTR tv167[ebp], eax
  000fd	8b f4		 mov	 esi, esp
  000ff	8b 4d a8	 mov	 ecx, DWORD PTR tv167[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  00108	3b f4		 cmp	 esi, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	89 45 a4	 mov	 DWORD PTR tv168[ebp], eax
  00112	8b 45 a4	 mov	 eax, DWORD PTR tv168[ebp]
  00115	89 45 c4	 mov	 DWORD PTR __Meta$187236[ebp], eax
$L187237:

; 492  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00118	8b f4		 mov	 esi, esp
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	89 45 a0	 mov	 DWORD PTR tv169[ebp], eax
  0012a	8b 4d a0	 mov	 ecx, DWORD PTR tv169[ebp]
  0012d	89 4d bc	 mov	 DWORD PTR $T191826[ebp], ecx
  00130	8b f4		 mov	 esi, esp
  00132	8d 55 c4	 lea	 edx, DWORD PTR __Meta$187236[ebp]
  00135	52		 push	 edx
  00136	8d 45 bc	 lea	 eax, DWORD PTR $T191826[ebp]
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00140	83 c4 08	 add	 esp, 8
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	88 45 9f	 mov	 BYTE PTR tv170[ebp], al
  0014d	0f b6 4d 9f	 movzx	 ecx, BYTE PTR tv170[ebp]
  00151	85 c9		 test	 ecx, ecx
  00153	74 0e		 je	 SHORT $L187241

; 493  : 				{	// end of file, quit
; 494  : 				_State |= ios_base::eofbit;

  00155	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00158	83 ca 01	 or	 edx, 1
  0015b	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 495  : 				break;

  0015e	e9 d1 00 00 00	 jmp	 $L187239
$L187241:

; 496  : 				}
; 497  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  00163	8b f4		 mov	 esi, esp
  00165	8d 45 d0	 lea	 eax, DWORD PTR __Metadelim$187235[ebp]
  00168	50		 push	 eax
  00169	8d 4d c4	 lea	 ecx, DWORD PTR __Meta$187236[ebp]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00173	83 c4 08	 add	 esp, 8
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	88 45 9e	 mov	 BYTE PTR tv171[ebp], al
  00180	0f b6 55 9e	 movzx	 edx, BYTE PTR tv171[ebp]
  00184	85 d2		 test	 edx, edx
  00186	74 37		 je	 SHORT $L187243

; 498  : 				{	// got a delimiter, discard it and quit
; 499  : 				_Changed = true;

  00188	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 500  : 				_Istr.rdbuf()->sbumpc();

  0018c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0018f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00191	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00194	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00197	8b f4		 mov	 esi, esp
  00199	8b ca		 mov	 ecx, edx
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a1	3b f4		 cmp	 esi, esp
  001a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a8	89 45 98	 mov	 DWORD PTR tv172[ebp], eax
  001ab	8b f4		 mov	 esi, esp
  001ad	8b 4d 98	 mov	 ecx, DWORD PTR tv172[ebp]
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  : 				break;

  001bd	eb 75		 jmp	 SHORT $L187239
$L187243:

; 502  : 				}
; 503  : 			else if (_Str.max_size() <= _Str.size())

  001bf	8b f4		 mov	 esi, esp
  001c1	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  001ca	3b f4		 cmp	 esi, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d1	89 45 94	 mov	 DWORD PTR tv173[ebp], eax
  001d4	8b f4		 mov	 esi, esp
  001d6	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  001df	3b f4		 cmp	 esi, esp
  001e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e6	89 45 90	 mov	 DWORD PTR tv174[ebp], eax
  001e9	8b 45 94	 mov	 eax, DWORD PTR tv173[ebp]
  001ec	3b 45 90	 cmp	 eax, DWORD PTR tv174[ebp]
  001ef	77 0b		 ja	 SHORT $L187245

; 504  : 				{	// string too large, quit
; 505  : 				_State |= ios_base::failbit;

  001f1	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  001f4	83 c9 02	 or	 ecx, 2
  001f7	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 506  : 				break;

  001fa	eb 38		 jmp	 SHORT $L187239
$L187245:

; 507  : 				}
; 508  : 			else
; 509  : 				{	// got a character, add it to string
; 510  : 				_Str += _Traits::to_char_type(_Meta);

  001fc	8b f4		 mov	 esi, esp
  001fe	8d 55 c4	 lea	 edx, DWORD PTR __Meta$187236[ebp]
  00201	52		 push	 edx
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00208	83 c4 04	 add	 esp, 4
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	88 45 8f	 mov	 BYTE PTR tv175[ebp], al
  00215	8b f4		 mov	 esi, esp
  00217	8a 45 8f	 mov	 al, BYTE PTR tv175[ebp]
  0021a	50		 push	 eax
  0021b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
  00224	3b f4		 cmp	 esi, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 511  : 				_Changed = true;

  0022b	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 512  : 				}

  0022f	e9 ac fe ff ff	 jmp	 $L187238
$L187239:
  00234	eb 24		 jmp	 SHORT $L191828
$L191829:

; 513  : 		_CATCH_IO_(_Istr)

  00236	8b f4		 mov	 esi, esp
  00238	6a 01		 push	 1
  0023a	6a 04		 push	 4
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0023f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00241	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00244	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0024d	3b f4		 cmp	 esi, esp
  0024f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00254	b8 00 00 00 00	 mov	 eax, $L191828
  00259	c3		 ret	 0
$L191828:
  0025a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 514  : 		}
; 515  : 
; 516  : 	if (!_Changed)

  00261	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00265	85 c0		 test	 eax, eax
  00267	75 09		 jne	 SHORT $L187247

; 517  : 		_State |= ios_base::failbit;

  00269	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0026c	83 c9 02	 or	 ecx, 2
  0026f	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L187247:

; 518  : 	_Istr.setstate(_State);

  00272	8b f4		 mov	 esi, esp
  00274	6a 00		 push	 0
  00276	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00279	52		 push	 edx
  0027a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0027d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00282	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00285	8b ca		 mov	 ecx, edx
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0028d	3b f4		 cmp	 esi, esp
  0028f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  : 	return (_Istr);

  00294	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00297	89 45 b8	 mov	 DWORD PTR $T191827[ebp], eax
  0029a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002a1	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  002a9	8b 45 b8	 mov	 eax, DWORD PTR $T191827[ebp]

; 520  : 	}

  002ac	52		 push	 edx
  002ad	8b cd		 mov	 ecx, ebp
  002af	50		 push	 eax
  002b0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191838
  002b6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002bb	58		 pop	 eax
  002bc	5a		 pop	 edx
  002bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002c7	5f		 pop	 edi
  002c8	5e		 pop	 esi
  002c9	5b		 pop	 ebx
  002ca	83 c4 74	 add	 esp, 116		; 00000074H
  002cd	3b ec		 cmp	 ebp, esp
  002cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d4	8b e5		 mov	 esp, ebp
  002d6	5d		 pop	 ebp
  002d7	c3		 ret	 0
$L191838:
  002d8	03 00 00 00	 DD	 3
  002dc	00 00 00 00	 DD	 $L191837
$L191837:
  002e0	dc ff ff ff	 DD	 -36			; ffffffdcH
  002e4	08 00 00 00	 DD	 8
  002e8	00 00 00 00	 DD	 $L191833
  002ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002f0	04 00 00 00	 DD	 4
  002f4	00 00 00 00	 DD	 $L191834
  002f8	c4 ff ff ff	 DD	 -60			; ffffffc4H
  002fc	04 00 00 00	 DD	 4
  00300	00 00 00 00	 DD	 $L191835
$L191835:
  00304	5f		 DB	 95			; 0000005fH
  00305	4d		 DB	 77			; 0000004dH
  00306	65		 DB	 101			; 00000065H
  00307	74		 DB	 116			; 00000074H
  00308	61		 DB	 97			; 00000061H
  00309	00		 DB	 0
$L191834:
  0030a	5f		 DB	 95			; 0000005fH
  0030b	4d		 DB	 77			; 0000004dH
  0030c	65		 DB	 101			; 00000065H
  0030d	74		 DB	 116			; 00000074H
  0030e	61		 DB	 97			; 00000061H
  0030f	64		 DB	 100			; 00000064H
  00310	65		 DB	 101			; 00000065H
  00311	6c		 DB	 108			; 0000006cH
  00312	69		 DB	 105			; 00000069H
  00313	6d		 DB	 109			; 0000006dH
  00314	00		 DB	 0
$L191833:
  00315	5f		 DB	 95			; 0000005fH
  00316	4f		 DB	 79			; 0000004fH
  00317	6b		 DB	 107			; 0000006bH
  00318	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191830:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191832
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:NEAR
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:NEAR
EXTRN	__imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z:NEAR
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191863 DD	0ffffffffH
	DD	FLAT:$L191856
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T191865 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L191855
$T191864 DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T191865
$T191858 DD	019930520H
	DD	03H
	DD	FLAT:$T191863
	DD	01H
	DD	FLAT:$T191864
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv221 = -137						; size = 1
tv220 = -136						; size = 4
tv219 = -132						; size = 4
tv218 = -128						; size = 4
tv217 = -122						; size = 1
tv216 = -121						; size = 1
tv215 = -120						; size = 4
tv214 = -116						; size = 4
tv213 = -112						; size = 4
tv212 = -108						; size = 4
tv211 = -101						; size = 1
tv210 = -100						; size = 4
tv209 = -96						; size = 4
tv208 = -92						; size = 4
tv207 = -85						; size = 1
tv83 = -84						; size = 4
tv81 = -80						; size = 4
$T191853 = -76						; size = 4
$T191852 = -72						; size = 4
$T191851 = -68						; size = 4
$T191850 = -64						; size = 4
$T191849 = -60						; size = 4
$T191848 = -56						; size = 4
$T191847 = -52						; size = 4
__Count$187270 = -48					; size = 4
__Ok$ = -40						; size = 8
__Pad$ = -28						; size = 4
__Size$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 538  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 7c	 sub	 esp, 124		; 0000007cH
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00025	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 539  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 540  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 541  : 	typedef typename _Mystr::size_type _Mysizt;
; 542  : 
; 543  : 	ios_base::iostate _State = ios_base::goodbit;

  00034	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 544  : 	_Mysizt _Size = _Str.size();

  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	89 45 e8	 mov	 DWORD PTR __Size$[ebp], eax

; 545  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 546  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  00050	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00058	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0005b	8b f4		 mov	 esi, esp
  0005d	8b ca		 mov	 ecx, edx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	85 c0		 test	 eax, eax
  0006e	7e 45		 jle	 SHORT $L191845
  00070	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00078	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0007b	8b f4		 mov	 esi, esp
  0007d	8b ca		 mov	 ecx, edx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	3b 45 e8	 cmp	 eax, DWORD PTR __Size$[ebp]
  0008f	76 24		 jbe	 SHORT $L191845
  00091	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00099	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009c	8b f4		 mov	 esi, esp
  0009e	8b ca		 mov	 ecx, edx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	2b 45 e8	 sub	 eax, DWORD PTR __Size$[ebp]
  000b0	89 45 b0	 mov	 DWORD PTR tv81[ebp], eax
  000b3	eb 07		 jmp	 SHORT $L191846
$L191845:
  000b5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L191846:
  000bc	8b 45 b0	 mov	 eax, DWORD PTR tv81[ebp]
  000bf	89 45 e4	 mov	 DWORD PTR __Pad$[ebp], eax

; 547  : 	const typename _Myos::sentry _Ok(_Ostr);

  000c2	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000c5	51		 push	 ecx
  000c6	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000c9	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 548  : 
; 549  : 	if (!_Ok)

  000d5	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000dd	0f b6 d0	 movzx	 edx, al
  000e0	85 d2		 test	 edx, edx
  000e2	75 0e		 jne	 SHORT $L187259

; 550  : 		_State |= ios_base::badbit;

  000e4	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000e7	83 c8 04	 or	 eax, 4
  000ea	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 551  : 	else

  000ed	e9 d8 02 00 00	 jmp	 $L191854
$L187259:

; 552  : 		{	// state okay, insert characters
; 553  : 	_TRY_IO_BEGIN

  000f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 554  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f6	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000fe	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00101	8b f4		 mov	 esi, esp
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	89 45 ac	 mov	 DWORD PTR tv83[ebp], eax
  00113	8b 45 ac	 mov	 eax, DWORD PTR tv83[ebp]
  00116	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011e	0f 84 bb 00 00
	00		 je	 $L187262

; 555  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00124	eb 09		 jmp	 SHORT $L187263
$L187264:
  00126	8b 4d e4	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00129	83 e9 01	 sub	 ecx, 1
  0012c	89 4d e4	 mov	 DWORD PTR __Pad$[ebp], ecx
$L187263:
  0012f	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00133	0f 86 a6 00 00
	00		 jbe	 $L187262

; 556  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 557  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00139	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0013c	8b 02		 mov	 eax, DWORD PTR [edx]
  0013e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00141	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00144	8b f4		 mov	 esi, esp
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0014c	3b f4		 cmp	 esi, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	88 45 ab	 mov	 BYTE PTR tv207[ebp], al
  00156	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00159	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0015e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00161	8b f4		 mov	 esi, esp
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00169	3b f4		 cmp	 esi, esp
  0016b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00170	89 45 a4	 mov	 DWORD PTR tv208[ebp], eax
  00173	8b f4		 mov	 esi, esp
  00175	8a 45 ab	 mov	 al, BYTE PTR tv207[ebp]
  00178	50		 push	 eax
  00179	8b 4d a4	 mov	 ecx, DWORD PTR tv208[ebp]
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	89 45 a0	 mov	 DWORD PTR tv209[ebp], eax
  0018c	8b 4d a0	 mov	 ecx, DWORD PTR tv209[ebp]
  0018f	89 4d cc	 mov	 DWORD PTR $T191847[ebp], ecx
  00192	8b f4		 mov	 esi, esp
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  0019a	3b f4		 cmp	 esi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	89 45 9c	 mov	 DWORD PTR tv210[ebp], eax
  001a4	8b 55 9c	 mov	 edx, DWORD PTR tv210[ebp]
  001a7	89 55 c8	 mov	 DWORD PTR $T191848[ebp], edx
  001aa	8b f4		 mov	 esi, esp
  001ac	8d 45 cc	 lea	 eax, DWORD PTR $T191847[ebp]
  001af	50		 push	 eax
  001b0	8d 4d c8	 lea	 ecx, DWORD PTR $T191848[ebp]
  001b3	51		 push	 ecx
  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  001ba	83 c4 08	 add	 esp, 8
  001bd	3b f4		 cmp	 esi, esp
  001bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c4	88 45 9b	 mov	 BYTE PTR tv211[ebp], al
  001c7	0f b6 55 9b	 movzx	 edx, BYTE PTR tv211[ebp]
  001cb	85 d2		 test	 edx, edx
  001cd	74 0b		 je	 SHORT $L187268

; 558  : 					{	// insertion failed, quit
; 559  : 					_State |= ios_base::badbit;

  001cf	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001d2	83 c8 04	 or	 eax, 4
  001d5	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 560  : 					break;

  001d8	eb 05		 jmp	 SHORT $L187262
$L187268:

; 561  : 					}
; 562  : 
; 563  : 		if (_State == ios_base::goodbit)

  001da	e9 47 ff ff ff	 jmp	 $L187264
$L187262:
  001df	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e3	0f 85 c2 00 00
	00		 jne	 $L187269

; 564  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001e9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Count$187270[ebp], 0
  001f0	eb 09		 jmp	 SHORT $L187271
$L187272:
  001f2	8b 4d d0	 mov	 ecx, DWORD PTR __Count$187270[ebp]
  001f5	83 c1 01	 add	 ecx, 1
  001f8	89 4d d0	 mov	 DWORD PTR __Count$187270[ebp], ecx
$L187271:
  001fb	8b 55 d0	 mov	 edx, DWORD PTR __Count$187270[ebp]
  001fe	3b 55 e8	 cmp	 edx, DWORD PTR __Size$[ebp]
  00201	0f 83 a4 00 00
	00		 jae	 $L187269

; 565  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 566  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  00207	8b f4		 mov	 esi, esp
  00209	8b 45 d0	 mov	 eax, DWORD PTR __Count$187270[ebp]
  0020c	50		 push	 eax
  0020d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
  00216	3b f4		 cmp	 esi, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021d	89 45 94	 mov	 DWORD PTR tv212[ebp], eax
  00220	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00223	8b 11		 mov	 edx, DWORD PTR [ecx]
  00225	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00228	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0022b	8b f4		 mov	 esi, esp
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00233	3b f4		 cmp	 esi, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	89 45 90	 mov	 DWORD PTR tv213[ebp], eax
  0023d	8b f4		 mov	 esi, esp
  0023f	8b 45 94	 mov	 eax, DWORD PTR tv212[ebp]
  00242	8a 08		 mov	 cl, BYTE PTR [eax]
  00244	51		 push	 ecx
  00245	8b 4d 90	 mov	 ecx, DWORD PTR tv213[ebp]
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00255	89 45 8c	 mov	 DWORD PTR tv214[ebp], eax
  00258	8b 55 8c	 mov	 edx, DWORD PTR tv214[ebp]
  0025b	89 55 c4	 mov	 DWORD PTR $T191849[ebp], edx
  0025e	8b f4		 mov	 esi, esp
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00266	3b f4		 cmp	 esi, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	89 45 88	 mov	 DWORD PTR tv215[ebp], eax
  00270	8b 45 88	 mov	 eax, DWORD PTR tv215[ebp]
  00273	89 45 c0	 mov	 DWORD PTR $T191850[ebp], eax
  00276	8b f4		 mov	 esi, esp
  00278	8d 4d c4	 lea	 ecx, DWORD PTR $T191849[ebp]
  0027b	51		 push	 ecx
  0027c	8d 55 c0	 lea	 edx, DWORD PTR $T191850[ebp]
  0027f	52		 push	 edx
  00280	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00286	83 c4 08	 add	 esp, 8
  00289	3b f4		 cmp	 esi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	88 45 87	 mov	 BYTE PTR tv216[ebp], al
  00293	0f b6 45 87	 movzx	 eax, BYTE PTR tv216[ebp]
  00297	85 c0		 test	 eax, eax
  00299	74 0b		 je	 SHORT $L187276

; 567  : 					{	// insertion failed, quit
; 568  : 					_State |= ios_base::badbit;

  0029b	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0029e	83 c9 04	 or	 ecx, 4
  002a1	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 569  : 					break;

  002a4	eb 05		 jmp	 SHORT $L187269
$L187276:

; 570  : 					}
; 571  : 
; 572  : 		if (_State == ios_base::goodbit)

  002a6	e9 47 ff ff ff	 jmp	 $L187272
$L187269:
  002ab	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  002af	0f 85 d1 00 00
	00		 jne	 $L187277

; 573  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002b5	eb 09		 jmp	 SHORT $L187278
$L187279:
  002b7	8b 55 e4	 mov	 edx, DWORD PTR __Pad$[ebp]
  002ba	83 ea 01	 sub	 edx, 1
  002bd	89 55 e4	 mov	 DWORD PTR __Pad$[ebp], edx
$L187278:
  002c0	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002c4	0f 86 bc 00 00
	00		 jbe	 $L187277

; 574  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 575  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  002ca	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d5	8b f4		 mov	 esi, esp
  002d7	8b ca		 mov	 ecx, edx
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002df	3b f4		 cmp	 esi, esp
  002e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e6	88 45 86	 mov	 BYTE PTR tv217[ebp], al
  002e9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ee	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f4	8b f4		 mov	 esi, esp
  002f6	8b ca		 mov	 ecx, edx
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002fe	3b f4		 cmp	 esi, esp
  00300	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00305	89 45 80	 mov	 DWORD PTR tv218[ebp], eax
  00308	8b f4		 mov	 esi, esp
  0030a	8a 45 86	 mov	 al, BYTE PTR tv217[ebp]
  0030d	50		 push	 eax
  0030e	8b 4d 80	 mov	 ecx, DWORD PTR tv218[ebp]
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00317	3b f4		 cmp	 esi, esp
  00319	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031e	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv219[ebp], eax
  00324	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv219[ebp]
  0032a	89 4d bc	 mov	 DWORD PTR $T191851[ebp], ecx
  0032d	8b f4		 mov	 esi, esp
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00335	3b f4		 cmp	 esi, esp
  00337	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033c	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], eax
  00342	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv220[ebp]
  00348	89 55 b8	 mov	 DWORD PTR $T191852[ebp], edx
  0034b	8b f4		 mov	 esi, esp
  0034d	8d 45 bc	 lea	 eax, DWORD PTR $T191851[ebp]
  00350	50		 push	 eax
  00351	8d 4d b8	 lea	 ecx, DWORD PTR $T191852[ebp]
  00354	51		 push	 ecx
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0035b	83 c4 08	 add	 esp, 8
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	88 85 77 ff ff
	ff		 mov	 BYTE PTR tv221[ebp], al
  0036b	0f b6 95 77 ff
	ff ff		 movzx	 edx, BYTE PTR tv221[ebp]
  00372	85 d2		 test	 edx, edx
  00374	74 0b		 je	 SHORT $L187283

; 576  : 					{	// insertion failed, quit
; 577  : 					_State |= ios_base::badbit;

  00376	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00379	83 c8 04	 or	 eax, 4
  0037c	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 578  : 					break;

  0037f	eb 05		 jmp	 SHORT $L187277
$L187283:

; 579  : 					}
; 580  : 		_Ostr.width(0);

  00381	e9 31 ff ff ff	 jmp	 $L187279
$L187277:
  00386	8b f4		 mov	 esi, esp
  00388	6a 00		 push	 0
  0038a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0038d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00392	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00395	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  0039b	3b f4		 cmp	 esi, esp
  0039d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a2	eb 26		 jmp	 SHORT $L191854
$L191855:

; 581  : 		_CATCH_IO_(_Ostr)

  003a4	8b f4		 mov	 esi, esp
  003a6	6a 01		 push	 1
  003a8	6a 04		 push	 4
  003aa	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  003af	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003b5	8b ca		 mov	 ecx, edx
  003b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003bd	3b f4		 cmp	 esi, esp
  003bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c4	b8 00 00 00 00	 mov	 eax, $L191854
  003c9	c3		 ret	 0
$L191854:
  003ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 		}
; 583  : 
; 584  : 	_Ostr.setstate(_State);

  003d1	8b f4		 mov	 esi, esp
  003d3	6a 00		 push	 0
  003d5	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  003d8	50		 push	 eax
  003d9	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  003de	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e1	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ea	3b f4		 cmp	 esi, esp
  003ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 585  : 	return (_Ostr);

  003f1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f4	89 45 b4	 mov	 DWORD PTR $T191853[ebp], eax
  003f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003fe	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00401	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00406	8b 45 b4	 mov	 eax, DWORD PTR $T191853[ebp]

; 586  : 	}

  00409	52		 push	 edx
  0040a	8b cd		 mov	 ecx, ebp
  0040c	50		 push	 eax
  0040d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191862
  00413	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00418	58		 pop	 eax
  00419	5a		 pop	 edx
  0041a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00424	5f		 pop	 edi
  00425	5e		 pop	 esi
  00426	5b		 pop	 ebx
  00427	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0042d	3b ec		 cmp	 ebp, esp
  0042f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00434	8b e5		 mov	 esp, ebp
  00436	5d		 pop	 ebp
  00437	c3		 ret	 0
$L191862:
  00438	01 00 00 00	 DD	 1
  0043c	00 00 00 00	 DD	 $L191861
$L191861:
  00440	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00444	08 00 00 00	 DD	 8
  00448	00 00 00 00	 DD	 $L191859
$L191859:
  0044c	5f		 DB	 95			; 0000005fH
  0044d	4f		 DB	 79			; 0000004fH
  0044e	6b		 DB	 107			; 0000006bH
  0044f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191856:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191858
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:NEAR
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:NEAR
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\ostream
xdata$x	SEGMENT
$T191873 DD	0ffffffffH
	DD	FLAT:$L191869
$T191871 DD	019930520H
	DD	01H
	DD	FLAT:$T191873
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $L185757
  00058	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00060	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00063	8b f4		 mov	 esi, esp
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	85 c0		 test	 eax, eax
  00074	74 2d		 je	 SHORT $L185757

; 90   : 				_Ostr.tie()->flush();

  00076	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0007e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00081	8b f4		 mov	 esi, esp
  00083	8b ca		 mov	 ecx, edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b f4		 mov	 esi, esp
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L185757:

; 91   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ab	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ae	8b f4		 mov	 esi, esp
  000b0	8b ca		 mov	 ecx, edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 92   : 			}

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d9	5e		 pop	 esi
  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191869:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191871
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191881 DD	0ffffffffH
	DD	FLAT:$L191877
$T191879 DD	019930520H
	DD	01H
	DD	FLAT:$T191881
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 
; 97   :  #if _HAS_EXCEPTIONS
; 98   : 			if (!uncaught_exception())

  0002b	8b f4		 mov	 esi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L185759

; 99   : 				this->_Myostr._Osfx();

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L185759:

; 100  : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006e	5e		 pop	 esi
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191877:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191879
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 108  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 110  : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 68   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 69   : 			if (_Myostr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L186379

; 70   : 				_Myostr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L186379:

; 71   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 74   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			if (_Myostr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L186382

; 76   : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L186382:

; 77   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
EXTRN	__imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB:DWORD
EXTRN	__imp_?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z:NEAR
EXTRN	__imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z:NEAR
EXTRN	__imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?is@?$ctype@_W@std@@QBE_NF_W@Z:NEAR
EXTRN	__imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
EXTRN	__imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
EXTRN	__imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z:NEAR
EXTRN	__imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z:NEAR
EXTRN	__imp_?eof@?$char_traits@_W@std@@SAGXZ:NEAR
EXTRN	__imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z:NEAR
EXTRN	__imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T191904 DD	0ffffffffH
	DD	FLAT:$L191895
	DD	00H
	DD	FLAT:$L191896
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T191906 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L191894
$T191905 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T191906
$T191898 DD	019930520H
	DD	04H
	DD	FLAT:$T191904
	DD	01H
	DD	FLAT:$T191905
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
tv207 = -128						; size = 2
tv206 = -125						; size = 1
tv205 = -124						; size = 2
tv204 = -121						; size = 1
tv203 = -120						; size = 2
tv202 = -118						; size = 2
tv201 = -116						; size = 4
tv200 = -110						; size = 2
tv199 = -108						; size = 4
tv198 = -104						; size = 4
tv135 = -100						; size = 4
tv197 = -96						; size = 4
tv196 = -92						; size = 4
tv195 = -88						; size = 4
tv194 = -84						; size = 4
tv189 = -80						; size = 4
tv65 = -76						; size = 4
$T191892 = -72						; size = 4
$T191891 = -66						; size = 2
$T191888 = -64						; size = 4
__Meta$187300 = -56					; size = 2
__Size$187297 = -48					; size = 4
__Ctype_fac$187294 = -44				; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 425  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00022	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 426  : 	typedef ctype<_Elem> _Ctype;
; 427  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 428  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 429  : 	typedef typename _Mystr::size_type _Mysizt;
; 430  : 
; 431  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 432  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 433  : 	const typename _Myis::sentry _Ok(_Istr);

  0003c	6a 00		 push	 0
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 434  : 
; 435  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 94 02 00
	00		 je	 $L191893

; 436  : 		{	// state okay, extract characters
; 437  : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00064	8b f4		 mov	 esi, esp
  00066	8d 55 c0	 lea	 edx, DWORD PTR $T191888[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00087	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]
  0008a	89 45 b0	 mov	 DWORD PTR tv189[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00091	8b 4d b0	 mov	 ecx, DWORD PTR tv189[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 d4	 mov	 DWORD PTR __Ctype_fac$187294[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a4	8b f4		 mov	 esi, esp
  000a6	8d 4d c0	 lea	 ecx, DWORD PTR $T191888[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 		_Str.erase();

  000b6	8b f4		 mov	 esi, esp
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 
; 440  : 		_TRY_IO_BEGIN

  000d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 		_Mysizt _Size = 0 < _Istr.width()
; 442  : 			&& (_Mysizt)_Istr.width() < _Str.max_size()
; 443  : 				? (_Mysizt)_Istr.width() : _Str.max_size();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000df	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000e2	8b f4		 mov	 esi, esp
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 ac	 mov	 DWORD PTR tv194[ebp], eax
  000f4	83 7d ac 00	 cmp	 DWORD PTR tv194[ebp], 0
  000f8	7e 61		 jle	 SHORT $L191889
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00102	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00105	8b f4		 mov	 esi, esp
  00107	8b ca		 mov	 ecx, edx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 a8	 mov	 DWORD PTR tv195[ebp], eax
  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 45 a4	 mov	 DWORD PTR tv196[ebp], eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR tv195[ebp]
  00131	3b 45 a4	 cmp	 eax, DWORD PTR tv196[ebp]
  00134	73 25		 jae	 SHORT $L191889
  00136	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0013e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	89 45 a0	 mov	 DWORD PTR tv197[ebp], eax
  00153	8b 45 a0	 mov	 eax, DWORD PTR tv197[ebp]
  00156	89 45 9c	 mov	 DWORD PTR tv135[ebp], eax
  00159	eb 1b		 jmp	 SHORT $L191890
$L191889:
  0015b	8b f4		 mov	 esi, esp
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 45 98	 mov	 DWORD PTR tv198[ebp], eax
  00170	8b 4d 98	 mov	 ecx, DWORD PTR tv198[ebp]
  00173	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$L191890:
  00176	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00179	89 55 d0	 mov	 DWORD PTR __Size$187297[ebp], edx

; 444  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0017c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00184	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00187	8b f4		 mov	 esi, esp
  00189	8b ca		 mov	 ecx, edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00198	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  0019b	8b f4		 mov	 esi, esp
  0019d	8b 4d 94	 mov	 ecx, DWORD PTR tv199[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	66 89 45 92	 mov	 WORD PTR tv200[ebp], ax
  001b1	66 8b 45 92	 mov	 ax, WORD PTR tv200[ebp]
  001b5	66 89 45 c8	 mov	 WORD PTR __Meta$187300[ebp], ax

; 445  : 
; 446  : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001b9	eb 44		 jmp	 SHORT $L187301
$L187302:
  001bb	8b 4d d0	 mov	 ecx, DWORD PTR __Size$187297[ebp]
  001be	83 e9 01	 sub	 ecx, 1
  001c1	89 4d d0	 mov	 DWORD PTR __Size$187297[ebp], ecx
  001c4	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001c7	8b 02		 mov	 eax, DWORD PTR [edx]
  001c9	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001cc	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  001d7	3b f4		 cmp	 esi, esp
  001d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001de	89 45 8c	 mov	 DWORD PTR tv201[ebp], eax
  001e1	8b f4		 mov	 esi, esp
  001e3	8b 4d 8c	 mov	 ecx, DWORD PTR tv201[ebp]
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f3	66 89 45 8a	 mov	 WORD PTR tv202[ebp], ax
  001f7	66 8b 4d 8a	 mov	 cx, WORD PTR tv202[ebp]
  001fb	66 89 4d c8	 mov	 WORD PTR __Meta$187300[ebp], cx
$L187301:
  001ff	83 7d d0 00	 cmp	 DWORD PTR __Size$187297[ebp], 0
  00203	0f 86 c7 00 00
	00		 jbe	 $L187303

; 447  : 			if(_Traits::eq_int_type(_Traits::eof(), _Meta))

  00209	8b f4		 mov	 esi, esp
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00218	66 89 45 88	 mov	 WORD PTR tv203[ebp], ax
  0021c	66 8b 55 88	 mov	 dx, WORD PTR tv203[ebp]
  00220	66 89 55 be	 mov	 WORD PTR $T191891[ebp], dx
  00224	8b f4		 mov	 esi, esp
  00226	8d 45 c8	 lea	 eax, DWORD PTR __Meta$187300[ebp]
  00229	50		 push	 eax
  0022a	8d 4d be	 lea	 ecx, DWORD PTR $T191891[ebp]
  0022d	51		 push	 ecx
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00234	83 c4 08	 add	 esp, 8
  00237	3b f4		 cmp	 esi, esp
  00239	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023e	88 45 87	 mov	 BYTE PTR tv204[ebp], al
  00241	0f b6 55 87	 movzx	 edx, BYTE PTR tv204[ebp]
  00245	85 d2		 test	 edx, edx
  00247	74 0b		 je	 SHORT $L187305

; 448  : 				{	// end of file, quit
; 449  : 				_State |= ios_base::eofbit;

  00249	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0024c	83 c8 01	 or	 eax, 1
  0024f	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 450  : 				break;

  00252	eb 7c		 jmp	 SHORT $L187303
$L187305:

; 451  : 				}
; 452  : 			else if (_Ctype_fac.is(_Ctype::space,
; 453  : 				_Traits::to_char_type(_Meta)))

  00254	8b f4		 mov	 esi, esp
  00256	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$187300[ebp]
  00259	51		 push	 ecx
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  00260	83 c4 04	 add	 esp, 4
  00263	3b f4		 cmp	 esi, esp
  00265	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026a	66 89 45 84	 mov	 WORD PTR tv205[ebp], ax
  0026e	8b f4		 mov	 esi, esp
  00270	66 8b 55 84	 mov	 dx, WORD PTR tv205[ebp]
  00274	52		 push	 edx
  00275	6a 48		 push	 72			; 00000048H
  00277	8b 4d d4	 mov	 ecx, DWORD PTR __Ctype_fac$187294[ebp]
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@_W@std@@QBE_NF_W@Z
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	88 45 83	 mov	 BYTE PTR tv206[ebp], al
  0028a	0f b6 45 83	 movzx	 eax, BYTE PTR tv206[ebp]
  0028e	85 c0		 test	 eax, eax
  00290	74 02		 je	 SHORT $L187307

; 454  : 				break;	// whitespace, quit

  00292	eb 3c		 jmp	 SHORT $L187303
$L187307:

; 455  : 			else
; 456  : 				{	// add character to string
; 457  : 				_Str.append(1, _Traits::to_char_type(_Meta));

  00294	8b f4		 mov	 esi, esp
  00296	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$187300[ebp]
  00299	51		 push	 ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  002a0	83 c4 04	 add	 esp, 4
  002a3	3b f4		 cmp	 esi, esp
  002a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002aa	66 89 45 80	 mov	 WORD PTR tv207[ebp], ax
  002ae	8b f4		 mov	 esi, esp
  002b0	66 8b 55 80	 mov	 dx, WORD PTR tv207[ebp]
  002b4	52		 push	 edx
  002b5	6a 01		 push	 1
  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
  002c0	3b f4		 cmp	 esi, esp
  002c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 				_Changed = true;

  002c7	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 459  : 				}

  002cb	e9 eb fe ff ff	 jmp	 $L187302
$L187303:
  002d0	eb 26		 jmp	 SHORT $L191893
$L191894:

; 460  : 		_CATCH_IO_(_Istr)

  002d2	8b f4		 mov	 esi, esp
  002d4	6a 01		 push	 1
  002d6	6a 04		 push	 4
  002d8	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002db	8b 08		 mov	 ecx, DWORD PTR [eax]
  002dd	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002e0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	b8 00 00 00 00	 mov	 eax, $L191893
  002f7	c3		 ret	 0
$L191893:
  002f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 461  : 		}
; 462  : 
; 463  : 	_Istr.width(0);

  002ff	8b f4		 mov	 esi, esp
  00301	6a 00		 push	 0
  00303	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00306	8b 08		 mov	 ecx, DWORD PTR [eax]
  00308	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0030b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0030e	8b ca		 mov	 ecx, edx
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  00316	3b f4		 cmp	 esi, esp
  00318	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	if (!_Changed)

  0031d	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00321	85 c0		 test	 eax, eax
  00323	75 09		 jne	 SHORT $L187309

; 465  : 		_State |= ios_base::failbit;

  00325	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  00328	83 c9 02	 or	 ecx, 2
  0032b	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L187309:

; 466  : 	_Istr.setstate(_State);

  0032e	8b f4		 mov	 esi, esp
  00330	6a 00		 push	 0
  00332	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00335	52		 push	 edx
  00336	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0033e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00341	8b ca		 mov	 ecx, edx
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  00349	3b f4		 cmp	 esi, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	return (_Istr);

  00350	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00353	89 45 b8	 mov	 DWORD PTR $T191892[ebp], eax
  00356	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0035d	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00360	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00365	8b 45 b8	 mov	 eax, DWORD PTR $T191892[ebp]

; 468  : 	}

  00368	52		 push	 edx
  00369	8b cd		 mov	 ecx, ebp
  0036b	50		 push	 eax
  0036c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191903
  00372	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00377	58		 pop	 eax
  00378	5a		 pop	 edx
  00379	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00383	5f		 pop	 edi
  00384	5e		 pop	 esi
  00385	5b		 pop	 ebx
  00386	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0038c	3b ec		 cmp	 ebp, esp
  0038e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00393	8b e5		 mov	 esp, ebp
  00395	5d		 pop	 ebp
  00396	c3		 ret	 0
$L191903:
  00397	02 00 00 00	 DD	 2
  0039b	00 00 00 00	 DD	 $L191902
$L191902:
  0039f	dc ff ff ff	 DD	 -36			; ffffffdcH
  003a3	08 00 00 00	 DD	 8
  003a7	00 00 00 00	 DD	 $L191899
  003ab	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003af	02 00 00 00	 DD	 2
  003b3	00 00 00 00	 DD	 $L191900
$L191900:
  003b7	5f		 DB	 95			; 0000005fH
  003b8	4d		 DB	 77			; 0000004dH
  003b9	65		 DB	 101			; 00000065H
  003ba	74		 DB	 116			; 00000074H
  003bb	61		 DB	 97			; 00000061H
  003bc	00		 DB	 0
$L191899:
  003bd	5f		 DB	 95			; 0000005fH
  003be	4f		 DB	 79			; 0000004fH
  003bf	6b		 DB	 107			; 0000006bH
  003c0	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191895:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
$L191896:
  00008	8b f4		 mov	 esi, esp
  0000a	8d 4d c0	 lea	 ecx, DWORD PTR $T191888[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  00013	3b f4		 cmp	 esi, esp
  00015	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191898
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\istream
xdata$x	SEGMENT
$T191916 DD	0ffffffffH
	DD	FLAT:$L191912
$T191914 DD	019930520H
	DD	01H
	DD	FLAT:$T191916
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 72   : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00037	8b f4		 mov	 esi, esp
  00039	8a 4d 0c	 mov	 cl, BYTE PTR __Noskip$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 74   : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00069	5e		 pop	 esi
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191912:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191914
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 77   : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 79   : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 58   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 			if (_Myistr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L183873

; 60   : 				_Myistr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L183873:

; 61   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 52   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : 			if (_Myistr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L185325

; 54   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L185325:

; 55   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
EXTRN	__imp_?id@?$ctype@_W@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z:NEAR
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191933 DD	0ffffffffH
	DD	FLAT:$L191925
$T191927 DD	019930520H
	DD	01H
	DD	FLAT:$T191933
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T191924 = -64						; size = 4
$T191923 = -60						; size = 12
__Pfmod$187167 = -48					; size = 4
__Pf$ = -44						; size = 4
__Id$ = -40						; size = 4
__Psave$ = -32						; size = 4
__Lock$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC NEAR ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 315  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00020	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 316  : 	_Lockit _Lock(_LOCK_LOCALE);	// the thread lock, make get atomic

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 317  : 	const locale::facet *_Psave =
; 318  : 		_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0004c	89 45 e0	 mov	 DWORD PTR __Psave$[ebp], eax

; 319  : 
; 320  : 	size_t _Id = _Facet::id;

  0004f	8b f4		 mov	 esi, esp
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@_W@std@@2V0locale@2@A
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	89 45 d8	 mov	 DWORD PTR __Id$[ebp], eax

; 321  : 	const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00067	8b f4		 mov	 esi, esp
  00069	8b 4d d8	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR __Pf$[ebp], eax

; 322  : 
; 323  : 	if (_Pf != 0)

  00080	83 7d d4 00	 cmp	 DWORD PTR __Pf$[ebp], 0
  00084	74 05		 je	 SHORT $L187158

; 324  : 		;	// got facet from locale
; 325  : 	else if (_Psave != 0)

  00086	e9 86 00 00 00	 jmp	 $L187159
$L187158:
  0008b	83 7d e0 00	 cmp	 DWORD PTR __Psave$[ebp], 0
  0008f	74 08		 je	 SHORT $L187160

; 326  : 		_Pf = _Psave;	// lazy facet already allocated

  00091	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  00094	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 327  : 	else if (_Facet::_Getcat(&_Psave) == (size_t)(-1))

  00097	eb 78		 jmp	 SHORT $L187159
$L187160:
  00099	8b f4		 mov	 esi, esp
  0009b	8d 45 e0	 lea	 eax, DWORD PTR __Psave$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 25		 jne	 SHORT $L187163

; 328  : 
; 329  :  #if _HAS_EXCEPTIONS
; 330  : 		throw bad_cast();	// lazy disallowed

  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  000bb	8d 4d c4	 lea	 ecx, DWORD PTR $T191923[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@@QAE@PBD@Z
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:__TI2?AVbad_cast@@
  000d0	8d 4d c4	 lea	 ecx, DWORD PTR $T191923[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$L187163:

; 331  : 
; 332  :  #else /* _HAS_EXCEPTIONS */
; 333  : 		abort();	// lazy disallowed
; 334  :  #endif /* _HAS_EXCEPTIONS */
; 335  : 
; 336  : 	else
; 337  : 		{	// queue up lazy facet for destruction
; 338  : 		_Pf = _Psave;

  000d9	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  000dc	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 339  : 		_Facetptr<_Facet>::_Psave = _Psave;

  000df	8b 45 e0	 mov	 eax, DWORD PTR __Psave$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<wchar_t> >::_Psave

; 340  : 
; 341  : 		locale::facet *_Pfmod = (_Facet *)_Psave;

  000e7	8b 4d e0	 mov	 ecx, DWORD PTR __Psave$[ebp]
  000ea	89 4d d0	 mov	 DWORD PTR __Pfmod$187167[ebp], ecx

; 342  : 		_Pfmod->_Incref();

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$187167[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Pfmod->_Register();

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$187167[ebp]
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Register@facet@locale@std@@QAEXXZ
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187159:

; 344  : 		}
; 345  : 
; 346  : 	return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00111	8b 55 d4	 mov	 edx, DWORD PTR __Pf$[ebp]
  00114	89 55 c0	 mov	 DWORD PTR $T191924[ebp], edx
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 45 c0	 mov	 eax, DWORD PTR $T191924[ebp]
$L191922:

; 347  : 	}

  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191932
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	83 c4 40	 add	 esp, 64			; 00000040H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$L191932:
  0015e	02 00 00 00	 DD	 2
  00162	00 00 00 00	 DD	 $L191931
$L191931:
  00166	ec ff ff ff	 DD	 -20			; ffffffecH
  0016a	04 00 00 00	 DD	 4
  0016e	00 00 00 00	 DD	 $L191928
  00172	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00176	04 00 00 00	 DD	 4
  0017a	00 00 00 00	 DD	 $L191929
$L191929:
  0017e	5f		 DB	 95			; 0000005fH
  0017f	50		 DB	 80			; 00000050H
  00180	73		 DB	 115			; 00000073H
  00181	61		 DB	 97			; 00000061H
  00182	76		 DB	 118			; 00000076H
  00183	65		 DB	 101			; 00000065H
  00184	00		 DB	 0
$L191928:
  00185	5f		 DB	 95			; 0000005fH
  00186	4c		 DB	 76			; 0000004cH
  00187	6f		 DB	 111			; 0000006fH
  00188	63		 DB	 99			; 00000063H
  00189	6b		 DB	 107			; 0000006bH
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191925:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191927
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 528  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 529  : 	return (getline(_Istr, _Str, _Istr.widen('\n')));

  00004	8b f4		 mov	 esi, esp
  00006	6a 0a		 push	 10			; 0000000aH
  00008	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00010	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00013	8b ca		 mov	 ecx, edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	50		 push	 eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	}

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
EXTRN	__imp_?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191952 DD	0ffffffffH
	DD	FLAT:$L191943
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T191954 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L191942
$T191953 DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T191954
$T191945 DD	019930520H
	DD	03H
	DD	FLAT:$T191952
	DD	01H
	DD	FLAT:$T191953
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
_TEXT	SEGMENT
tv175 = -110						; size = 2
tv174 = -108						; size = 4
tv173 = -104						; size = 4
tv172 = -100						; size = 4
tv171 = -94						; size = 1
tv170 = -93						; size = 1
tv169 = -92						; size = 2
tv168 = -90						; size = 2
tv167 = -88						; size = 4
tv166 = -82						; size = 2
tv165 = -80						; size = 4
tv65 = -74						; size = 2
$T191940 = -72						; size = 4
$T191939 = -66						; size = 2
__Meta$187320 = -60					; size = 2
__Metadelim$187319 = -48				; size = 2
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 2
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z PROC NEAR ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 477  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 60	 sub	 esp, 96			; 00000060H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  00022	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 478  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 479  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 480  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 481  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003c	6a 01		 push	 1
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 482  : 
; 483  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 04 02 00
	00		 je	 $L191941

; 484  : 		{	// state okay, extract characters
; 485  : 		_TRY_IO_BEGIN

  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 486  : 		_Str.erase();

  00068	8b f4		 mov	 esi, esp
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  : 		const typename _Traits::int_type _Metadelim =
; 488  : 			_Traits::to_int_type(_Delim);

  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	66 89 45 b6	 mov	 WORD PTR tv65[ebp], ax
  0009f	66 8b 55 b6	 mov	 dx, WORD PTR tv65[ebp]
  000a3	66 89 55 d0	 mov	 WORD PTR __Metadelim$187319[ebp], dx

; 489  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a7	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ac	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000af	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b2	8b f4		 mov	 esi, esp
  000b4	8b ca		 mov	 ecx, edx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	89 45 b0	 mov	 DWORD PTR tv165[ebp], eax
  000c6	8b f4		 mov	 esi, esp
  000c8	8b 4d b0	 mov	 ecx, DWORD PTR tv165[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	66 89 45 ae	 mov	 WORD PTR tv166[ebp], ax
  000dc	66 8b 45 ae	 mov	 ax, WORD PTR tv166[ebp]
  000e0	66 89 45 c4	 mov	 WORD PTR __Meta$187320[ebp], ax

; 490  : 
; 491  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000e4	eb 3b		 jmp	 SHORT $L187321
$L187322:
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000ee	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	89 45 a8	 mov	 DWORD PTR tv167[ebp], eax
  00103	8b f4		 mov	 esi, esp
  00105	8b 4d a8	 mov	 ecx, DWORD PTR tv167[ebp]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  0010e	3b f4		 cmp	 esi, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	66 89 45 a6	 mov	 WORD PTR tv168[ebp], ax
  00119	66 8b 45 a6	 mov	 ax, WORD PTR tv168[ebp]
  0011d	66 89 45 c4	 mov	 WORD PTR __Meta$187320[ebp], ax
$L187321:

; 492  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00121	8b f4		 mov	 esi, esp
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	66 89 45 a4	 mov	 WORD PTR tv169[ebp], ax
  00134	66 8b 4d a4	 mov	 cx, WORD PTR tv169[ebp]
  00138	66 89 4d be	 mov	 WORD PTR $T191939[ebp], cx
  0013c	8b f4		 mov	 esi, esp
  0013e	8d 55 c4	 lea	 edx, DWORD PTR __Meta$187320[ebp]
  00141	52		 push	 edx
  00142	8d 45 be	 lea	 eax, DWORD PTR $T191939[ebp]
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  0014c	83 c4 08	 add	 esp, 8
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	88 45 a3	 mov	 BYTE PTR tv170[ebp], al
  00159	0f b6 4d a3	 movzx	 ecx, BYTE PTR tv170[ebp]
  0015d	85 c9		 test	 ecx, ecx
  0015f	74 0e		 je	 SHORT $L187325

; 493  : 				{	// end of file, quit
; 494  : 				_State |= ios_base::eofbit;

  00161	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00164	83 ca 01	 or	 edx, 1
  00167	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 495  : 				break;

  0016a	e9 d3 00 00 00	 jmp	 $L187323
$L187325:

; 496  : 				}
; 497  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0016f	8b f4		 mov	 esi, esp
  00171	8d 45 d0	 lea	 eax, DWORD PTR __Metadelim$187319[ebp]
  00174	50		 push	 eax
  00175	8d 4d c4	 lea	 ecx, DWORD PTR __Meta$187320[ebp]
  00178	51		 push	 ecx
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  0017f	83 c4 08	 add	 esp, 8
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	88 45 a2	 mov	 BYTE PTR tv171[ebp], al
  0018c	0f b6 55 a2	 movzx	 edx, BYTE PTR tv171[ebp]
  00190	85 d2		 test	 edx, edx
  00192	74 37		 je	 SHORT $L187327

; 498  : 				{	// got a delimiter, discard it and quit
; 499  : 				_Changed = true;

  00194	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 500  : 				_Istr.rdbuf()->sbumpc();

  00198	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0019b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a3	8b f4		 mov	 esi, esp
  001a5	8b ca		 mov	 ecx, edx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  001ad	3b f4		 cmp	 esi, esp
  001af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b4	89 45 9c	 mov	 DWORD PTR tv172[ebp], eax
  001b7	8b f4		 mov	 esi, esp
  001b9	8b 4d 9c	 mov	 ecx, DWORD PTR tv172[ebp]
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  : 				break;

  001c9	eb 77		 jmp	 SHORT $L187323
$L187327:

; 502  : 				}
; 503  : 			else if (_Str.max_size() <= _Str.size())

  001cb	8b f4		 mov	 esi, esp
  001cd	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  001d6	3b f4		 cmp	 esi, esp
  001d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001dd	89 45 98	 mov	 DWORD PTR tv173[ebp], eax
  001e0	8b f4		 mov	 esi, esp
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  001eb	3b f4		 cmp	 esi, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	89 45 94	 mov	 DWORD PTR tv174[ebp], eax
  001f5	8b 45 98	 mov	 eax, DWORD PTR tv173[ebp]
  001f8	3b 45 94	 cmp	 eax, DWORD PTR tv174[ebp]
  001fb	77 0b		 ja	 SHORT $L187329

; 504  : 				{	// string too large, quit
; 505  : 				_State |= ios_base::failbit;

  001fd	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  00200	83 c9 02	 or	 ecx, 2
  00203	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 506  : 				break;

  00206	eb 3a		 jmp	 SHORT $L187323
$L187329:

; 507  : 				}
; 508  : 			else
; 509  : 				{	// got a character, add it to string
; 510  : 				_Str += _Traits::to_char_type(_Meta);

  00208	8b f4		 mov	 esi, esp
  0020a	8d 55 c4	 lea	 edx, DWORD PTR __Meta$187320[ebp]
  0020d	52		 push	 edx
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  00214	83 c4 04	 add	 esp, 4
  00217	3b f4		 cmp	 esi, esp
  00219	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021e	66 89 45 92	 mov	 WORD PTR tv175[ebp], ax
  00222	8b f4		 mov	 esi, esp
  00224	66 8b 45 92	 mov	 ax, WORD PTR tv175[ebp]
  00228	50		 push	 eax
  00229	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
  00232	3b f4		 cmp	 esi, esp
  00234	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 511  : 				_Changed = true;

  00239	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 512  : 				}

  0023d	e9 a4 fe ff ff	 jmp	 $L187322
$L187323:
  00242	eb 24		 jmp	 SHORT $L191941
$L191942:

; 513  : 		_CATCH_IO_(_Istr)

  00244	8b f4		 mov	 esi, esp
  00246	6a 01		 push	 1
  00248	6a 04		 push	 4
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0024d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024f	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00252	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  0025b	3b f4		 cmp	 esi, esp
  0025d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00262	b8 00 00 00 00	 mov	 eax, $L191941
  00267	c3		 ret	 0
$L191941:
  00268	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 514  : 		}
; 515  : 
; 516  : 	if (!_Changed)

  0026f	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00273	85 c0		 test	 eax, eax
  00275	75 09		 jne	 SHORT $L187331

; 517  : 		_State |= ios_base::failbit;

  00277	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0027a	83 c9 02	 or	 ecx, 2
  0027d	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L187331:

; 518  : 	_Istr.setstate(_State);

  00280	8b f4		 mov	 esi, esp
  00282	6a 00		 push	 0
  00284	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00287	52		 push	 edx
  00288	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0028b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00290	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00293	8b ca		 mov	 ecx, edx
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  0029b	3b f4		 cmp	 esi, esp
  0029d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  : 	return (_Istr);

  002a2	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002a5	89 45 b8	 mov	 DWORD PTR $T191940[ebp], eax
  002a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002af	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002b2	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  002b7	8b 45 b8	 mov	 eax, DWORD PTR $T191940[ebp]

; 520  : 	}

  002ba	52		 push	 edx
  002bb	8b cd		 mov	 ecx, ebp
  002bd	50		 push	 eax
  002be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191951
  002c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002c9	58		 pop	 eax
  002ca	5a		 pop	 edx
  002cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	5b		 pop	 ebx
  002d8	83 c4 70	 add	 esp, 112		; 00000070H
  002db	3b ec		 cmp	 ebp, esp
  002dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c3		 ret	 0
$L191951:
  002e6	03 00 00 00	 DD	 3
  002ea	00 00 00 00	 DD	 $L191950
$L191950:
  002ee	dc ff ff ff	 DD	 -36			; ffffffdcH
  002f2	08 00 00 00	 DD	 8
  002f6	00 00 00 00	 DD	 $L191946
  002fa	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002fe	02 00 00 00	 DD	 2
  00302	00 00 00 00	 DD	 $L191947
  00306	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0030a	02 00 00 00	 DD	 2
  0030e	00 00 00 00	 DD	 $L191948
$L191948:
  00312	5f		 DB	 95			; 0000005fH
  00313	4d		 DB	 77			; 0000004dH
  00314	65		 DB	 101			; 00000065H
  00315	74		 DB	 116			; 00000074H
  00316	61		 DB	 97			; 00000061H
  00317	00		 DB	 0
$L191947:
  00318	5f		 DB	 95			; 0000005fH
  00319	4d		 DB	 77			; 0000004dH
  0031a	65		 DB	 101			; 00000065H
  0031b	74		 DB	 116			; 00000074H
  0031c	61		 DB	 97			; 00000061H
  0031d	64		 DB	 100			; 00000064H
  0031e	65		 DB	 101			; 00000065H
  0031f	6c		 DB	 108			; 0000006cH
  00320	69		 DB	 105			; 00000069H
  00321	6d		 DB	 109			; 0000006dH
  00322	00		 DB	 0
$L191946:
  00323	5f		 DB	 95			; 0000005fH
  00324	4f		 DB	 79			; 0000004fH
  00325	6b		 DB	 107			; 0000006bH
  00326	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191943:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
__ehhandler$??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191945
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ENDP ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
EXTRN	__imp_??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z:NEAR
EXTRN	__imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z:NEAR
EXTRN	__imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191976 DD	0ffffffffH
	DD	FLAT:$L191969
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T191978 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L191968
$T191977 DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T191978
$T191971 DD	019930520H
	DD	03H
	DD	FLAT:$T191976
	DD	01H
	DD	FLAT:$T191977
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
tv221 = -113						; size = 1
tv220 = -112						; size = 2
tv219 = -110						; size = 2
tv218 = -108						; size = 4
tv217 = -104						; size = 2
tv216 = -101						; size = 1
tv215 = -100						; size = 2
tv214 = -98						; size = 2
tv213 = -96						; size = 4
tv212 = -92						; size = 4
tv211 = -85						; size = 1
tv210 = -84						; size = 2
tv209 = -82						; size = 2
tv208 = -80						; size = 4
tv207 = -74						; size = 2
tv83 = -72						; size = 4
tv81 = -68						; size = 4
$T191966 = -64						; size = 4
$T191965 = -60						; size = 2
$T191964 = -58						; size = 2
$T191963 = -56						; size = 2
$T191962 = -54						; size = 2
$T191961 = -52						; size = 2
$T191960 = -50						; size = 2
__Count$187354 = -48					; size = 4
__Ok$ = -40						; size = 8
__Pad$ = -28						; size = 4
__Size$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 538  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 64	 sub	 esp, 100		; 00000064H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00022	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 539  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 540  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 541  : 	typedef typename _Mystr::size_type _Mysizt;
; 542  : 
; 543  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 544  : 	_Mysizt _Size = _Str.size();

  00038	8b f4		 mov	 esi, esp
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 e8	 mov	 DWORD PTR __Size$[ebp], eax

; 545  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 546  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00055	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00058	8b f4		 mov	 esi, esp
  0005a	8b ca		 mov	 ecx, edx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	85 c0		 test	 eax, eax
  0006b	7e 45		 jle	 SHORT $L191958
  0006d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00075	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00078	8b f4		 mov	 esi, esp
  0007a	8b ca		 mov	 ecx, edx
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	3b 45 e8	 cmp	 eax, DWORD PTR __Size$[ebp]
  0008c	76 24		 jbe	 SHORT $L191958
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00096	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00099	8b f4		 mov	 esi, esp
  0009b	8b ca		 mov	 ecx, edx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	2b 45 e8	 sub	 eax, DWORD PTR __Size$[ebp]
  000ad	89 45 bc	 mov	 DWORD PTR tv81[ebp], eax
  000b0	eb 07		 jmp	 SHORT $L191959
$L191958:
  000b2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L191959:
  000b9	8b 45 bc	 mov	 eax, DWORD PTR tv81[ebp]
  000bc	89 45 e4	 mov	 DWORD PTR __Pad$[ebp], eax

; 547  : 	const typename _Myos::sentry _Ok(_Ostr);

  000bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000c2	51		 push	 ecx
  000c3	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000c6	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 548  : 
; 549  : 	if (!_Ok)

  000d2	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d5	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  000da	0f b6 d0	 movzx	 edx, al
  000dd	85 d2		 test	 edx, edx
  000df	75 0e		 jne	 SHORT $L187343

; 550  : 		_State |= ios_base::badbit;

  000e1	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000e4	83 c8 04	 or	 eax, 4
  000e7	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 551  : 	else

  000ea	e9 dd 02 00 00	 jmp	 $L191967
$L187343:

; 552  : 		{	// state okay, insert characters
; 553  : 	_TRY_IO_BEGIN

  000ef	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 554  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000fb	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000fe	8b f4		 mov	 esi, esp
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00106	3b f4		 cmp	 esi, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	89 45 b8	 mov	 DWORD PTR tv83[ebp], eax
  00110	8b 45 b8	 mov	 eax, DWORD PTR tv83[ebp]
  00113	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00118	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011b	0f 84 c3 00 00
	00		 je	 $L187346

; 555  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00121	eb 09		 jmp	 SHORT $L187347
$L187348:
  00123	8b 4d e4	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00126	83 e9 01	 sub	 ecx, 1
  00129	89 4d e4	 mov	 DWORD PTR __Pad$[ebp], ecx
$L187347:
  0012c	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00130	0f 86 ae 00 00
	00		 jbe	 $L187346

; 556  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 557  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00136	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00139	8b 02		 mov	 eax, DWORD PTR [edx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0013e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	66 89 45 b6	 mov	 WORD PTR tv207[ebp], ax
  00154	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0015c	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0015f	8b f4		 mov	 esi, esp
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	89 45 b0	 mov	 DWORD PTR tv208[ebp], eax
  00171	8b f4		 mov	 esi, esp
  00173	66 8b 45 b6	 mov	 ax, WORD PTR tv207[ebp]
  00177	50		 push	 eax
  00178	8b 4d b0	 mov	 ecx, DWORD PTR tv208[ebp]
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00181	3b f4		 cmp	 esi, esp
  00183	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00188	66 89 45 ae	 mov	 WORD PTR tv209[ebp], ax
  0018c	66 8b 4d ae	 mov	 cx, WORD PTR tv209[ebp]
  00190	66 89 4d ce	 mov	 WORD PTR $T191960[ebp], cx
  00194	8b f4		 mov	 esi, esp
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	66 89 45 ac	 mov	 WORD PTR tv210[ebp], ax
  001a7	66 8b 55 ac	 mov	 dx, WORD PTR tv210[ebp]
  001ab	66 89 55 cc	 mov	 WORD PTR $T191961[ebp], dx
  001af	8b f4		 mov	 esi, esp
  001b1	8d 45 ce	 lea	 eax, DWORD PTR $T191960[ebp]
  001b4	50		 push	 eax
  001b5	8d 4d cc	 lea	 ecx, DWORD PTR $T191961[ebp]
  001b8	51		 push	 ecx
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  001bf	83 c4 08	 add	 esp, 8
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c9	88 45 ab	 mov	 BYTE PTR tv211[ebp], al
  001cc	0f b6 55 ab	 movzx	 edx, BYTE PTR tv211[ebp]
  001d0	85 d2		 test	 edx, edx
  001d2	74 0b		 je	 SHORT $L187352

; 558  : 					{	// insertion failed, quit
; 559  : 					_State |= ios_base::badbit;

  001d4	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001d7	83 c8 04	 or	 eax, 4
  001da	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 560  : 					break;

  001dd	eb 05		 jmp	 SHORT $L187346
$L187352:

; 561  : 					}
; 562  : 
; 563  : 		if (_State == ios_base::goodbit)

  001df	e9 3f ff ff ff	 jmp	 $L187348
$L187346:
  001e4	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e8	0f 85 c9 00 00
	00		 jne	 $L187353

; 564  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001ee	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Count$187354[ebp], 0
  001f5	eb 09		 jmp	 SHORT $L187355
$L187356:
  001f7	8b 4d d0	 mov	 ecx, DWORD PTR __Count$187354[ebp]
  001fa	83 c1 01	 add	 ecx, 1
  001fd	89 4d d0	 mov	 DWORD PTR __Count$187354[ebp], ecx
$L187355:
  00200	8b 55 d0	 mov	 edx, DWORD PTR __Count$187354[ebp]
  00203	3b 55 e8	 cmp	 edx, DWORD PTR __Size$[ebp]
  00206	0f 83 ab 00 00
	00		 jae	 $L187353

; 565  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 566  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  0020c	8b f4		 mov	 esi, esp
  0020e	8b 45 d0	 mov	 eax, DWORD PTR __Count$187354[ebp]
  00211	50		 push	 eax
  00212	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
  0021b	3b f4		 cmp	 esi, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	89 45 a4	 mov	 DWORD PTR tv212[ebp], eax
  00225	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00228	8b 11		 mov	 edx, DWORD PTR [ecx]
  0022a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0022d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00230	8b f4		 mov	 esi, esp
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00238	3b f4		 cmp	 esi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023f	89 45 a0	 mov	 DWORD PTR tv213[ebp], eax
  00242	8b f4		 mov	 esi, esp
  00244	8b 45 a4	 mov	 eax, DWORD PTR tv212[ebp]
  00247	66 8b 08	 mov	 cx, WORD PTR [eax]
  0024a	51		 push	 ecx
  0024b	8b 4d a0	 mov	 ecx, DWORD PTR tv213[ebp]
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00254	3b f4		 cmp	 esi, esp
  00256	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025b	66 89 45 9e	 mov	 WORD PTR tv214[ebp], ax
  0025f	66 8b 55 9e	 mov	 dx, WORD PTR tv214[ebp]
  00263	66 89 55 ca	 mov	 WORD PTR $T191962[ebp], dx
  00267	8b f4		 mov	 esi, esp
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  0026f	3b f4		 cmp	 esi, esp
  00271	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00276	66 89 45 9c	 mov	 WORD PTR tv215[ebp], ax
  0027a	66 8b 45 9c	 mov	 ax, WORD PTR tv215[ebp]
  0027e	66 89 45 c8	 mov	 WORD PTR $T191963[ebp], ax
  00282	8b f4		 mov	 esi, esp
  00284	8d 4d ca	 lea	 ecx, DWORD PTR $T191962[ebp]
  00287	51		 push	 ecx
  00288	8d 55 c8	 lea	 edx, DWORD PTR $T191963[ebp]
  0028b	52		 push	 edx
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00292	83 c4 08	 add	 esp, 8
  00295	3b f4		 cmp	 esi, esp
  00297	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029c	88 45 9b	 mov	 BYTE PTR tv216[ebp], al
  0029f	0f b6 45 9b	 movzx	 eax, BYTE PTR tv216[ebp]
  002a3	85 c0		 test	 eax, eax
  002a5	74 0b		 je	 SHORT $L187360

; 567  : 					{	// insertion failed, quit
; 568  : 					_State |= ios_base::badbit;

  002a7	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  002aa	83 c9 04	 or	 ecx, 4
  002ad	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 569  : 					break;

  002b0	eb 05		 jmp	 SHORT $L187353
$L187360:

; 570  : 					}
; 571  : 
; 572  : 		if (_State == ios_base::goodbit)

  002b2	e9 40 ff ff ff	 jmp	 $L187356
$L187353:
  002b7	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  002bb	0f 85 c7 00 00
	00		 jne	 $L187361

; 573  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002c1	eb 09		 jmp	 SHORT $L187362
$L187363:
  002c3	8b 55 e4	 mov	 edx, DWORD PTR __Pad$[ebp]
  002c6	83 ea 01	 sub	 edx, 1
  002c9	89 55 e4	 mov	 DWORD PTR __Pad$[ebp], edx
$L187362:
  002cc	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002d0	0f 86 b2 00 00
	00		 jbe	 $L187361

; 574  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 575  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  002d6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e1	8b f4		 mov	 esi, esp
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	66 89 45 98	 mov	 WORD PTR tv217[ebp], ax
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b f4		 mov	 esi, esp
  00303	8b ca		 mov	 ecx, edx
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  0030b	3b f4		 cmp	 esi, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	89 45 94	 mov	 DWORD PTR tv218[ebp], eax
  00315	8b f4		 mov	 esi, esp
  00317	66 8b 45 98	 mov	 ax, WORD PTR tv217[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 94	 mov	 ecx, DWORD PTR tv218[ebp]
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00325	3b f4		 cmp	 esi, esp
  00327	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032c	66 89 45 92	 mov	 WORD PTR tv219[ebp], ax
  00330	66 8b 4d 92	 mov	 cx, WORD PTR tv219[ebp]
  00334	66 89 4d c6	 mov	 WORD PTR $T191964[ebp], cx
  00338	8b f4		 mov	 esi, esp
  0033a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00340	3b f4		 cmp	 esi, esp
  00342	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00347	66 89 45 90	 mov	 WORD PTR tv220[ebp], ax
  0034b	66 8b 55 90	 mov	 dx, WORD PTR tv220[ebp]
  0034f	66 89 55 c4	 mov	 WORD PTR $T191965[ebp], dx
  00353	8b f4		 mov	 esi, esp
  00355	8d 45 c6	 lea	 eax, DWORD PTR $T191964[ebp]
  00358	50		 push	 eax
  00359	8d 4d c4	 lea	 ecx, DWORD PTR $T191965[ebp]
  0035c	51		 push	 ecx
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00363	83 c4 08	 add	 esp, 8
  00366	3b f4		 cmp	 esi, esp
  00368	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036d	88 45 8f	 mov	 BYTE PTR tv221[ebp], al
  00370	0f b6 55 8f	 movzx	 edx, BYTE PTR tv221[ebp]
  00374	85 d2		 test	 edx, edx
  00376	74 0b		 je	 SHORT $L187367

; 576  : 					{	// insertion failed, quit
; 577  : 					_State |= ios_base::badbit;

  00378	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0037b	83 c8 04	 or	 eax, 4
  0037e	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 578  : 					break;

  00381	eb 05		 jmp	 SHORT $L187361
$L187367:

; 579  : 					}
; 580  : 		_Ostr.width(0);

  00383	e9 3b ff ff ff	 jmp	 $L187363
$L187361:
  00388	8b f4		 mov	 esi, esp
  0038a	6a 00		 push	 0
  0038c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0038f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00391	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00394	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00397	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  0039d	3b f4		 cmp	 esi, esp
  0039f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a4	eb 26		 jmp	 SHORT $L191967
$L191968:

; 581  : 		_CATCH_IO_(_Ostr)

  003a6	8b f4		 mov	 esi, esp
  003a8	6a 01		 push	 1
  003aa	6a 04		 push	 4
  003ac	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003af	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003b7	8b ca		 mov	 ecx, edx
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  003bf	3b f4		 cmp	 esi, esp
  003c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c6	b8 00 00 00 00	 mov	 eax, $L191967
  003cb	c3		 ret	 0
$L191967:
  003cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 		}
; 583  : 
; 584  : 	_Ostr.setstate(_State);

  003d3	8b f4		 mov	 esi, esp
  003d5	6a 00		 push	 0
  003d7	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  003da	50		 push	 eax
  003db	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003de	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  003ec	3b f4		 cmp	 esi, esp
  003ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 585  : 	return (_Ostr);

  003f3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f6	89 45 c0	 mov	 DWORD PTR $T191966[ebp], eax
  003f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00400	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00403	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00408	8b 45 c0	 mov	 eax, DWORD PTR $T191966[ebp]

; 586  : 	}

  0040b	52		 push	 edx
  0040c	8b cd		 mov	 ecx, ebp
  0040e	50		 push	 eax
  0040f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L191975
  00415	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0041a	58		 pop	 eax
  0041b	5a		 pop	 edx
  0041c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00426	5f		 pop	 edi
  00427	5e		 pop	 esi
  00428	5b		 pop	 ebx
  00429	83 c4 74	 add	 esp, 116		; 00000074H
  0042c	3b ec		 cmp	 ebp, esp
  0042e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c3		 ret	 0
$L191975:
  00437	01 00 00 00	 DD	 1
  0043b	00 00 00 00	 DD	 $L191974
$L191974:
  0043f	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00443	08 00 00 00	 DD	 8
  00447	00 00 00 00	 DD	 $L191972
$L191972:
  0044b	5f		 DB	 95			; 0000005fH
  0044c	4f		 DB	 79			; 0000004fH
  0044d	6b		 DB	 107			; 0000006bH
  0044e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191969:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191971
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ:NEAR
EXTRN	__imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\ostream
xdata$x	SEGMENT
$T191986 DD	0ffffffffH
	DD	FLAT:$L191982
$T191984 DD	019930520H
	DD	01H
	DD	FLAT:$T191986
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $L185765
  00058	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00060	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00063	8b f4		 mov	 esi, esp
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	85 c0		 test	 eax, eax
  00074	74 2d		 je	 SHORT $L185765

; 90   : 				_Ostr.tie()->flush();

  00076	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0007e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00081	8b f4		 mov	 esi, esp
  00083	8b ca		 mov	 ecx, edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b f4		 mov	 esi, esp
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L185765:

; 91   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ab	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ae	8b f4		 mov	 esi, esp
  000b0	8b ca		 mov	 ecx, edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 92   : 			}

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d9	5e		 pop	 esi
  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191982:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191984
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T191994 DD	0ffffffffH
	DD	FLAT:$L191990
$T191992 DD	019930520H
	DD	01H
	DD	FLAT:$T191994
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 
; 97   :  #if _HAS_EXCEPTIONS
; 98   : 			if (!uncaught_exception())

  0002b	8b f4		 mov	 esi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L185767

; 99   : 				this->_Myostr._Osfx();

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L185767:

; 100  : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006e	5e		 pop	 esi
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191990:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191992
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 108  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 110  : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 68   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 69   : 			if (_Myostr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L186385

; 70   : 				_Myostr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L186385:

; 71   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 74   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			if (_Myostr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L186388

; 76   : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L186388:

; 77   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize, COMDAT
; _this$ = ecx

; 272  : 	{ return m_nSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEHXZ ENDP	; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetSize
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0ElemPos@CMarkup@@QAE@XZ			; CMarkup::ElemPos::ElemPos
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:NEAR ; AfxAssertValidObject
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:NEAR	; AfxThrowInvalidArgException
EXTRN	??_U@YAPAXIPBDH@Z:NEAR				; operator new[]
EXTRN	_memset:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T192035 DD	0ffffffffH
	DD	FLAT:$L192029
	DD	0ffffffffH
	DD	FLAT:$L192030
	DD	0ffffffffH
	DD	FLAT:$L192031
$T192033 DD	019930520H
	DD	03H
	DD	FLAT:$T192035
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z
_TEXT	SEGMENT
tv283 = -112						; size = 4
tv213 = -108						; size = 4
tv214 = -104						; size = 4
tv200 = -100						; size = 4
tv159 = -96						; size = 4
tv130 = -92						; size = 4
$T192028 = -88						; size = 4
$T192025 = -84						; size = 4
$T192024 = -80						; size = 4
$T192022 = -76						; size = 4
$T192013 = -72						; size = 4
$T192012 = -68						; size = 4
$T192009 = -64						; size = 4
$T192008 = -60						; size = 4
$T192007 = -56						; size = 4
$T192003 = -52						; size = 4
_i$187503 = -48						; size = 4
_pNewData$187490 = -44					; size = 4
_nNewMax$187481 = -40					; size = 4
_i$187475 = -36						; size = 4
_i$187463 = -32						; size = 4
_i$187447 = -28						; size = 4
_nAllocSize$187437 = -24				; size = 4
_i$187426 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 64	 sub	 esp, 100		; 00000064H
  0001b	57		 push	 edi
  0001c	51		 push	 ecx
  0001d	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  00020	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);

  00030	68 72 01 00 00	 push	 370			; 00000172H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:$SG187419
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 371  : 	ASSERT(nNewSize >= 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00047	7d 14		 jge	 SHORT $L192002
  00049	68 73 01 00 00	 push	 371			; 00000173H
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:$SG187421
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $L192002
  0005c	cc		 int	 3
$L192002:

; 372  : 
; 373  : 	if(nNewSize < 0 )

  0005d	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00061	7d 05		 jge	 SHORT $L187422

; 374  : 		AfxThrowInvalidArgException();

  00063	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L187422:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00068	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  0006c	7c 09		 jl	 SHORT $L187423

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  0006e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  00074	89 42 10	 mov	 DWORD PTR [edx+16], eax
$L187423:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00077	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0007b	75 60		 jne	 SHORT $L187424

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00084	74 3e		 je	 SHORT $L187425

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00086	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$187426[ebp], 0
  0008d	eb 09		 jmp	 SHORT $L187427
$L187428:
  0008f	8b 55 ec	 mov	 edx, DWORD PTR _i$187426[ebp]
  00092	83 c2 01	 add	 edx, 1
  00095	89 55 ec	 mov	 DWORD PTR _i$187426[ebp], edx
$L187427:
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR _i$187426[ebp]
  0009e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000a1	7d 02		 jge	 SHORT $L187429

; 385  : 				(m_pData + i)->~TYPE();

  000a3	eb ea		 jmp	 SHORT $L187428
$L187429:

; 386  : 			delete[] (BYTE*)m_pData;

  000a5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ab	89 45 cc	 mov	 DWORD PTR $T192003[ebp], eax
  000ae	8b 4d cc	 mov	 ecx, DWORD PTR $T192003[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000b7	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  000ba	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L187425:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  000c4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000ce	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  000d8	e9 d9 03 00 00	 jmp	 $L192001
$L187424:
  000dd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000e4	0f 85 f7 00 00
	00		 jne	 $L187433

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow

  000ea	81 7d 08 ff ff
	ff 07		 cmp	 DWORD PTR _nNewSize$[ebp], 134217727 ; 07ffffffH
  000f1	76 14		 jbe	 SHORT $L192004
  000f3	68 8c 01 00 00	 push	 396			; 0000018cH
  000f8	68 00 00 00 00	 push	 OFFSET FLAT:$SG187436
  000fd	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00102	85 c0		 test	 eax, eax
  00104	74 01		 je	 SHORT $L192004
  00106	cc		 int	 3
$L192004:

; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  00107	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0010d	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00110	7e 08		 jle	 SHORT $L192005
  00112	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00115	89 45 a4	 mov	 DWORD PTR tv130[ebp], eax
  00118	eb 09		 jmp	 SHORT $L192006
$L192005:
  0011a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00120	89 55 a4	 mov	 DWORD PTR tv130[ebp], edx
$L192006:
  00123	8b 45 a4	 mov	 eax, DWORD PTR tv130[ebp]
  00126	89 45 e8	 mov	 DWORD PTR _nAllocSize$187437[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  00129	68 8f 01 00 00	 push	 399			; 0000018fH
  0012e	68 00 00 00 00	 push	 OFFSET FLAT:$SG187443
  00133	8b 4d e8	 mov	 ecx, DWORD PTR _nAllocSize$187437[ebp]
  00136	c1 e1 05	 shl	 ecx, 5
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	89 45 c8	 mov	 DWORD PTR $T192007[ebp], eax
  00145	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00148	8b 45 c8	 mov	 eax, DWORD PTR $T192007[ebp]
  0014b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  0014e	8b 4d e8	 mov	 ecx, DWORD PTR _nAllocSize$187437[ebp]
  00151	c1 e1 05	 shl	 ecx, 5
  00154	51		 push	 ecx
  00155	6a 00		 push	 0
  00157	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 _memset
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  00166	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$187447[ebp], 0
  0016d	eb 09		 jmp	 SHORT $L187448
$L187449:
  0016f	8b 4d e4	 mov	 ecx, DWORD PTR _i$187447[ebp]
  00172	83 c1 01	 add	 ecx, 1
  00175	89 4d e4	 mov	 DWORD PTR _i$187447[ebp], ecx
$L187448:
  00178	8b 55 e4	 mov	 edx, DWORD PTR _i$187447[ebp]
  0017b	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  0017e	7d 4a		 jge	 SHORT $L187450

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  00180	8b 45 e4	 mov	 eax, DWORD PTR _i$187447[ebp]
  00183	c1 e0 05	 shl	 eax, 5
  00186	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0018c	50		 push	 eax
  0018d	6a 20		 push	 32			; 00000020H
  0018f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00194	83 c4 08	 add	 esp, 8
  00197	89 45 c0	 mov	 DWORD PTR $T192009[ebp], eax
  0019a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001a1	83 7d c0 00	 cmp	 DWORD PTR $T192009[ebp], 0
  001a5	74 0d		 je	 SHORT $L192010
  001a7	8b 4d c0	 mov	 ecx, DWORD PTR $T192009[ebp]
  001aa	e8 00 00 00 00	 call	 ??0ElemPos@CMarkup@@QAE@XZ ; CMarkup::ElemPos::ElemPos
  001af	89 45 a0	 mov	 DWORD PTR tv159[ebp], eax
  001b2	eb 07		 jmp	 SHORT $L192011
$L192010:
  001b4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L192011:
  001bb	8b 55 a0	 mov	 edx, DWORD PTR tv159[ebp]
  001be	89 55 c4	 mov	 DWORD PTR $T192008[ebp], edx
  001c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c8	eb a5		 jmp	 SHORT $L187449
$L187450:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  001ca	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  001d0	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 407  : 		m_nMaxSize = nAllocSize;

  001d3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d6	8b 45 e8	 mov	 eax, DWORD PTR _nAllocSize$187437[ebp]
  001d9	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  001dc	e9 d5 02 00 00	 jmp	 $L192001
$L187433:
  001e1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001e7	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  001ea	0f 8f ea 00 00
	00		 jg	 $L187458

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f3	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  001f6	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  001f9	0f 8e a0 00 00
	00		 jle	 $L187459

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  001ff	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00202	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00205	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00208	c1 e0 05	 shl	 eax, 5
  0020b	50		 push	 eax
  0020c	6a 00		 push	 0
  0020e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00211	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00214	c1 e2 05	 shl	 edx, 5
  00217	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0021a	03 50 04	 add	 edx, DWORD PTR [eax+4]
  0021d	52		 push	 edx
  0021e	e8 00 00 00 00	 call	 _memset
  00223	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  00226	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$187463[ebp], 0
  0022d	eb 09		 jmp	 SHORT $L187464
$L187465:
  0022f	8b 4d e0	 mov	 ecx, DWORD PTR _i$187463[ebp]
  00232	83 c1 01	 add	 ecx, 1
  00235	89 4d e0	 mov	 DWORD PTR _i$187463[ebp], ecx
$L187464:
  00238	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0023b	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0023e	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00241	39 45 e0	 cmp	 DWORD PTR _i$187463[ebp], eax
  00244	7d 57		 jge	 SHORT $L187466

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  00246	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024c	c1 e2 05	 shl	 edx, 5
  0024f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00252	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00255	03 ca		 add	 ecx, edx
  00257	8b 55 e0	 mov	 edx, DWORD PTR _i$187463[ebp]
  0025a	c1 e2 05	 shl	 edx, 5
  0025d	03 ca		 add	 ecx, edx
  0025f	51		 push	 ecx
  00260	6a 20		 push	 32			; 00000020H
  00262	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00267	83 c4 08	 add	 esp, 8
  0026a	89 45 b8	 mov	 DWORD PTR $T192013[ebp], eax
  0026d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00274	83 7d b8 00	 cmp	 DWORD PTR $T192013[ebp], 0
  00278	74 0d		 je	 SHORT $L192014
  0027a	8b 4d b8	 mov	 ecx, DWORD PTR $T192013[ebp]
  0027d	e8 00 00 00 00	 call	 ??0ElemPos@CMarkup@@QAE@XZ ; CMarkup::ElemPos::ElemPos
  00282	89 45 9c	 mov	 DWORD PTR tv200[ebp], eax
  00285	eb 07		 jmp	 SHORT $L192015
$L192014:
  00287	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], 0
$L192015:
  0028e	8b 45 9c	 mov	 eax, DWORD PTR tv200[ebp]
  00291	89 45 bc	 mov	 DWORD PTR $T192012[ebp], eax
  00294	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0029b	eb 92		 jmp	 SHORT $L187465
$L187466:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  0029d	eb 2d		 jmp	 SHORT $L187473
$L187459:
  0029f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002a2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002a5	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  002a8	7e 22		 jle	 SHORT $L187473

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  002aa	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$187475[ebp], 0
  002b1	eb 09		 jmp	 SHORT $L187476
$L187477:
  002b3	8b 45 dc	 mov	 eax, DWORD PTR _i$187475[ebp]
  002b6	83 c0 01	 add	 eax, 1
  002b9	89 45 dc	 mov	 DWORD PTR _i$187475[ebp], eax
$L187476:
  002bc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002c2	2b 55 08	 sub	 edx, DWORD PTR _nNewSize$[ebp]
  002c5	39 55 dc	 cmp	 DWORD PTR _i$187475[ebp], edx
  002c8	7d 02		 jge	 SHORT $L187473

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  002ca	eb e7		 jmp	 SHORT $L187477
$L187473:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  002cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002cf	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002d2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 429  : 	}
; 430  : 	else

  002d5	e9 dc 01 00 00	 jmp	 $L192001
$L187458:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  002da	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002dd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002e0	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 434  : 		if (nGrowBy == 0)

  002e3	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  002e7	75 45		 jne	 SHORT $L187480

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  002e9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  002ef	99		 cdq
  002f0	83 e2 07	 and	 edx, 7
  002f3	03 c2		 add	 eax, edx
  002f5	c1 f8 03	 sar	 eax, 3
  002f8	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  002fb	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  002ff	7d 09		 jge	 SHORT $L192018
  00301	c7 45 98 04 00
	00 00		 mov	 DWORD PTR tv214[ebp], 4
  00308	eb 1e		 jmp	 SHORT $L192019
$L192018:
  0030a	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00311	7e 09		 jle	 SHORT $L192016
  00313	c7 45 94 00 04
	00 00		 mov	 DWORD PTR tv213[ebp], 1024 ; 00000400H
  0031a	eb 06		 jmp	 SHORT $L192017
$L192016:
  0031c	8b 55 0c	 mov	 edx, DWORD PTR _nGrowBy$[ebp]
  0031f	89 55 94	 mov	 DWORD PTR tv213[ebp], edx
$L192017:
  00322	8b 45 94	 mov	 eax, DWORD PTR tv213[ebp]
  00325	89 45 98	 mov	 DWORD PTR tv214[ebp], eax
$L192019:
  00328	8b 4d 98	 mov	 ecx, DWORD PTR tv214[ebp]
  0032b	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx
$L187480:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  0032e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00331	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00334	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  00337	39 45 08	 cmp	 DWORD PTR _nNewSize$[ebp], eax
  0033a	7d 0e		 jge	 SHORT $L187482

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  0033c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0033f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00342	03 55 0c	 add	 edx, DWORD PTR _nGrowBy$[ebp]
  00345	89 55 d8	 mov	 DWORD PTR _nNewMax$187481[ebp], edx

; 444  : 		else

  00348	eb 06		 jmp	 SHORT $L187483
$L187482:

; 445  : 			nNewMax = nNewSize;  // no slush

  0034a	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0034d	89 45 d8	 mov	 DWORD PTR _nNewMax$187481[ebp], eax
$L187483:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around

  00350	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00353	8b 55 d8	 mov	 edx, DWORD PTR _nNewMax$187481[ebp]
  00356	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00359	7d 14		 jge	 SHORT $L192020
  0035b	68 bf 01 00 00	 push	 447			; 000001bfH
  00360	68 00 00 00 00	 push	 OFFSET FLAT:$SG187485
  00365	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0036a	85 c0		 test	 eax, eax
  0036c	74 01		 je	 SHORT $L192020
  0036e	cc		 int	 3
$L192020:

; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  0036f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00372	8b 55 d8	 mov	 edx, DWORD PTR _nNewMax$187481[ebp]
  00375	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00378	7d 05		 jge	 SHORT $L187486

; 450  : 			AfxThrowInvalidArgException();

  0037a	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L187486:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow

  0037f	81 7d d8 ff ff
	ff 07		 cmp	 DWORD PTR _nNewMax$187481[ebp], 134217727 ; 07ffffffH
  00386	76 14		 jbe	 SHORT $L192021
  00388	68 c5 01 00 00	 push	 453			; 000001c5H
  0038d	68 00 00 00 00	 push	 OFFSET FLAT:$SG187489
  00392	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00397	85 c0		 test	 eax, eax
  00399	74 01		 je	 SHORT $L192021
  0039b	cc		 int	 3
$L192021:

; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  0039c	8b 4d d8	 mov	 ecx, DWORD PTR _nNewMax$187481[ebp]
  0039f	c1 e1 05	 shl	 ecx, 5
  003a2	51		 push	 ecx
  003a3	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  003a8	83 c4 04	 add	 esp, 4
  003ab	89 45 b4	 mov	 DWORD PTR $T192022[ebp], eax
  003ae	8b 55 b4	 mov	 edx, DWORD PTR $T192022[ebp]
  003b1	89 55 d4	 mov	 DWORD PTR _pNewData$187490[ebp], edx

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  003b4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003b7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003ba	c1 e1 05	 shl	 ecx, 5
  003bd	51		 push	 ecx
  003be	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003c1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003c4	50		 push	 eax
  003c5	8b 4d d4	 mov	 ecx, DWORD PTR _pNewData$187490[ebp]
  003c8	51		 push	 ecx
  003c9	e8 00 00 00 00	 call	 _memcpy
  003ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);

  003d1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003d4	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  003d7	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  003da	7f 14		 jg	 SHORT $L192023
  003dc	68 cd 01 00 00	 push	 461			; 000001cdH
  003e1	68 00 00 00 00	 push	 OFFSET FLAT:$SG187499
  003e6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  003eb	85 c0		 test	 eax, eax
  003ed	74 01		 je	 SHORT $L192023
  003ef	cc		 int	 3
$L192023:

; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  003f0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003f3	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  003f6	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  003f9	c1 e0 05	 shl	 eax, 5
  003fc	50		 push	 eax
  003fd	6a 00		 push	 0
  003ff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00402	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00405	c1 e2 05	 shl	 edx, 5
  00408	03 55 d4	 add	 edx, DWORD PTR _pNewData$187490[ebp]
  0040b	52		 push	 edx
  0040c	e8 00 00 00 00	 call	 _memset
  00411	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  00414	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$187503[ebp], 0
  0041b	eb 09		 jmp	 SHORT $L187504
$L187505:
  0041d	8b 45 d0	 mov	 eax, DWORD PTR _i$187503[ebp]
  00420	83 c0 01	 add	 eax, 1
  00423	89 45 d0	 mov	 DWORD PTR _i$187503[ebp], eax
$L187504:
  00426	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00429	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0042c	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  0042f	39 55 d0	 cmp	 DWORD PTR _i$187503[ebp], edx
  00432	7d 52		 jge	 SHORT $L187506

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  00434	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00437	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0043a	c1 e1 05	 shl	 ecx, 5
  0043d	03 4d d4	 add	 ecx, DWORD PTR _pNewData$187490[ebp]
  00440	8b 55 d0	 mov	 edx, DWORD PTR _i$187503[ebp]
  00443	c1 e2 05	 shl	 edx, 5
  00446	03 ca		 add	 ecx, edx
  00448	51		 push	 ecx
  00449	6a 20		 push	 32			; 00000020H
  0044b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00450	83 c4 08	 add	 esp, 8
  00453	89 45 ac	 mov	 DWORD PTR $T192025[ebp], eax
  00456	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0045d	83 7d ac 00	 cmp	 DWORD PTR $T192025[ebp], 0
  00461	74 0d		 je	 SHORT $L192026
  00463	8b 4d ac	 mov	 ecx, DWORD PTR $T192025[ebp]
  00466	e8 00 00 00 00	 call	 ??0ElemPos@CMarkup@@QAE@XZ ; CMarkup::ElemPos::ElemPos
  0046b	89 45 90	 mov	 DWORD PTR tv283[ebp], eax
  0046e	eb 07		 jmp	 SHORT $L192027
$L192026:
  00470	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv283[ebp], 0
$L192027:
  00477	8b 45 90	 mov	 eax, DWORD PTR tv283[ebp]
  0047a	89 45 b0	 mov	 DWORD PTR $T192024[ebp], eax
  0047d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00484	eb 97		 jmp	 SHORT $L187505
$L187506:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  00486	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00489	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0048c	89 55 a8	 mov	 DWORD PTR $T192028[ebp], edx
  0048f	8b 45 a8	 mov	 eax, DWORD PTR $T192028[ebp]
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00498	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  0049b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0049e	8b 55 d4	 mov	 edx, DWORD PTR _pNewData$187490[ebp]
  004a1	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 472  : 		m_nSize = nNewSize;

  004a4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004a7	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  004aa	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 473  : 		m_nMaxSize = nNewMax;

  004ad	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004b0	8b 45 d8	 mov	 eax, DWORD PTR _nNewMax$187481[ebp]
  004b3	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$L192001:

; 474  : 	}
; 475  : }

  004b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004c0	5f		 pop	 edi
  004c1	83 c4 70	 add	 esp, 112		; 00000070H
  004c4	3b ec		 cmp	 ebp, esp
  004c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004cb	8b e5		 mov	 esp, ebp
  004cd	5d		 pop	 ebp
  004ce	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192029:
  00000	8b 45 e4	 mov	 eax, DWORD PTR _i$187447[ebp]
  00003	c1 e0 05	 shl	 eax, 5
  00006	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0000c	50		 push	 eax
  0000d	8b 55 c0	 mov	 edx, DWORD PTR $T192009[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00016	83 c4 08	 add	 esp, 8
  00019	c3		 ret	 0
$L192030:
  0001a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00020	c1 e1 05	 shl	 ecx, 5
  00023	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00029	03 c1		 add	 eax, ecx
  0002b	8b 4d e0	 mov	 ecx, DWORD PTR _i$187463[ebp]
  0002e	c1 e1 05	 shl	 ecx, 5
  00031	03 c1		 add	 eax, ecx
  00033	50		 push	 eax
  00034	8b 55 b8	 mov	 edx, DWORD PTR $T192013[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0003d	83 c4 08	 add	 esp, 8
  00040	c3		 ret	 0
$L192031:
  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00047	c1 e1 05	 shl	 ecx, 5
  0004a	03 4d d4	 add	 ecx, DWORD PTR _pNewData$187490[ebp]
  0004d	8b 55 d0	 mov	 edx, DWORD PTR _i$187503[ebp]
  00050	c1 e2 05	 shl	 edx, 5
  00053	03 ca		 add	 ecx, edx
  00055	51		 push	 ecx
  00056	8b 45 ac	 mov	 eax, DWORD PTR $T192025[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0005f	83 c4 08	 add	 esp, 8
  00062	c3		 ret	 0
__ehhandler$?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z:
  00063	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192033
  00068	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\util\markup.h
_TEXT	ENDS
;	COMDAT ??0ElemPos@CMarkup@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ElemPos@CMarkup@@QAE@XZ PROC NEAR			; CMarkup::ElemPos::ElemPos, COMDAT
; _this$ = ecx

; 86   : 		ElemPos() { Clear(); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Clear@ElemPos@CMarkup@@QAEXXZ ; CMarkup::ElemPos::Clear
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0ElemPos@CMarkup@@QAE@XZ ENDP				; CMarkup::ElemPos::ElemPos
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveAll@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXXZ PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::RemoveAll, COMDAT
; _this$ = ecx

; 284  : 	{ SetSize(0, -1); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a ff		 push	 -1
  00010	6a 00		 push	 0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?RemoveAll@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXXZ ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::RemoveAll
_TEXT	ENDS
PUBLIC	??$CopyElements@UElemPos@CMarkup@@@@YGXPAUElemPos@CMarkup@@PBU01@H@Z ; CopyElements<CMarkup::ElemPos>
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Append@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEHABV1@@Z
_TEXT	SEGMENT
_nOldSize$ = -8						; size = 4
_this$ = -4						; size = 4
_src$ = 8						; size = 4
?Append@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEHABV1@@Z PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::Append, COMDAT
; _this$ = ecx

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 480  : 	ASSERT_VALID(this);

  00017	68 e0 01 00 00	 push	 480			; 000001e0H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:$SG187526
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 481  : 	ASSERT(this != &src);   // cannot append to itself

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	3b 4d 08	 cmp	 ecx, DWORD PTR _src$[ebp]
  00030	75 14		 jne	 SHORT $L192043
  00032	68 e1 01 00 00	 push	 481			; 000001e1H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:$SG187528
  0003c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00041	85 c0		 test	 eax, eax
  00043	74 01		 je	 SHORT $L192043
  00045	cc		 int	 3
$L192043:

; 482  : 	
; 483  : 	if(this == &src)

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	3b 45 08	 cmp	 eax, DWORD PTR _src$[ebp]
  0004c	75 05		 jne	 SHORT $L187529

; 484  : 		AfxThrowInvalidArgException();

  0004e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L187529:

; 485  : 
; 486  : 	INT_PTR nOldSize = m_nSize;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00059	89 55 f8	 mov	 DWORD PTR _nOldSize$[ebp], edx

; 487  : 	SetSize(m_nSize + src.m_nSize);

  0005c	6a ff		 push	 -1
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00064	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00067	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  0006a	51		 push	 ecx
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?SetSize@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEXHH@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::SetSize

; 488  : 	CopyElements<TYPE>(m_pData + nOldSize, src.m_pData, src.m_nSize);

  00073	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00076	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00079	51		 push	 ecx
  0007a	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0007d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00080	50		 push	 eax
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _nOldSize$[ebp]
  00084	c1 e1 05	 shl	 ecx, 5
  00087	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ??$CopyElements@UElemPos@CMarkup@@@@YGXPAUElemPos@CMarkup@@PBU01@H@Z ; CopyElements<CMarkup::ElemPos>

; 489  : 	return nOldSize;

  00093	8b 45 f8	 mov	 eax, DWORD PTR _nOldSize$[ebp]
$L192042:

; 490  : }

  00096	83 c4 08	 add	 esp, 8
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?Append@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEHABV1@@Z ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::Append
_TEXT	ENDS
PUBLIC	?ElementAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::ElementAt
; Function compile flags: /Odt /RTCsu
;	COMDAT ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[], COMDAT
; _this$ = ecx

; 342  : 	{ return ElementAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?ElementAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::ElementAt
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
_TEXT	ENDS
PUBLIC	?GetAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetAt
; Function compile flags: /Odt /RTCsu
;	COMDAT ??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[], COMDAT
; _this$ = ecx

; 339  : 	{ return GetAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?GetAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetAt
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::operator[]
_TEXT	ENDS
PUBLIC	??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
;	COMDAT ??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\afxtempl.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetAt, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $L192047
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001d	7c 14		 jl	 SHORT $L192048
$L192047:
  0001f	68 28 01 00 00	 push	 296			; 00000128H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L192048
  00032	cc		 int	 3
$L192048:

; 297  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00033	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00037	7c 19		 jl	 SHORT $L187966
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	7d 0e		 jge	 SHORT $L187966

; 298  : 		return m_pData[nIndex]; 

  00044	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00047	c1 e0 05	 shl	 eax, 5
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00050	eb 05		 jmp	 SHORT $L192046
$L187966:

; 299  : 	AfxThrowInvalidArgException();		

  00052	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L192046:

; 300  : }

  00057	83 c4 04	 add	 esp, 4
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?GetAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QBEABUElemPos@CMarkup@@H@Z ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::GetAt
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z PROC NEAR ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::ElementAt, COMDAT
; _this$ = ecx

; 320  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 321  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $L192050
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001d	7c 14		 jl	 SHORT $L192051
$L192050:
  0001f	68 41 01 00 00	 push	 321			; 00000141H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L192051
  00032	cc		 int	 3
$L192051:

; 322  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00033	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00037	7c 19		 jl	 SHORT $L187974
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	7d 0e		 jge	 SHORT $L187974

; 323  : 		return m_pData[nIndex]; 

  00044	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00047	c1 e0 05	 shl	 eax, 5
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00050	eb 05		 jmp	 SHORT $L192049
$L187974:

; 324  : 	AfxThrowInvalidArgException();		

  00052	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L192049:

; 325  : }

  00057	83 c4 04	 add	 esp, 4
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?ElementAt@?$CArray@UElemPos@CMarkup@@AAU12@@@QAEAAUElemPos@CMarkup@@H@Z ENDP ; CArray<CMarkup::ElemPos,CMarkup::ElemPos &>::ElementAt
_TEXT	ENDS
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:NEAR		; AfxIsValidAddress
; Function compile flags: /Odt /RTCsu
;	COMDAT ??$CopyElements@UElemPos@CMarkup@@@@YGXPAUElemPos@CMarkup@@PBU01@H@Z
_TEXT	SEGMENT
tv89 = -4						; size = 4
_pDest$ = 8						; size = 4
_pSrc$ = 12						; size = 4
_nCount$ = 16						; size = 4
??$CopyElements@UElemPos@CMarkup@@@@YGXPAUElemPos@CMarkup@@PBU01@H@Z PROC NEAR ; CopyElements<CMarkup::ElemPos>, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 57   : 	ASSERT(nCount == 0 ||

  0000d	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00011	74 27		 je	 SHORT $L192053
  00013	6a 01		 push	 1
  00015	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  00018	c1 e0 05	 shl	 eax, 5
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _pDest$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00025	85 c0		 test	 eax, eax
  00027	75 11		 jne	 SHORT $L192053
  00029	6a 3a		 push	 58			; 0000003aH
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00030	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00035	85 c0		 test	 eax, eax
  00037	74 01		 je	 SHORT $L192053
  00039	cc		 int	 3
$L192053:

; 58   : 		AfxIsValidAddress(pDest, (size_t)nCount * sizeof(TYPE)));
; 59   : 	ASSERT(nCount == 0 ||

  0003a	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0003e	74 27		 je	 SHORT $L187983
  00040	6a 01		 push	 1
  00042	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  00045	c1 e0 05	 shl	 eax, 5
  00048	50		 push	 eax
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00052	85 c0		 test	 eax, eax
  00054	75 11		 jne	 SHORT $L187983
  00056	6a 3c		 push	 60			; 0000003cH
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  0005d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00062	85 c0		 test	 eax, eax
  00064	74 01		 je	 SHORT $L187983
  00066	cc		 int	 3
$L187983:

; 60   : 		AfxIsValidAddress(pSrc, (size_t)nCount * sizeof(TYPE)));
; 61   : 
; 62   : 	// default is element-copy using assignment
; 63   : 	while (nCount--)

  00067	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0006a	89 45 fc	 mov	 DWORD PTR tv89[ebp], eax
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00070	83 e9 01	 sub	 ecx, 1
  00073	89 4d 10	 mov	 DWORD PTR _nCount$[ebp], ecx
  00076	83 7d fc 00	 cmp	 DWORD PTR tv89[ebp], 0
  0007a	74 21		 je	 SHORT $L187975

; 64   : 		*pDest++ = *pSrc++;

  0007c	8b 75 0c	 mov	 esi, DWORD PTR _pSrc$[ebp]
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	8b 7d 08	 mov	 edi, DWORD PTR _pDest$[ebp]
  00087	f3 a5		 rep movsd
  00089	8b 55 08	 mov	 edx, DWORD PTR _pDest$[ebp]
  0008c	83 c2 20	 add	 edx, 32			; 00000020H
  0008f	89 55 08	 mov	 DWORD PTR _pDest$[ebp], edx
  00092	8b 45 0c	 mov	 eax, DWORD PTR _pSrc$[ebp]
  00095	83 c0 20	 add	 eax, 32			; 00000020H
  00098	89 45 0c	 mov	 DWORD PTR _pSrc$[ebp], eax
  0009b	eb ca		 jmp	 SHORT $L187983
$L187975:

; 65   : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	83 c4 04	 add	 esp, 4
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 0c 00	 ret	 12			; 0000000cH
??$CopyElements@UElemPos@CMarkup@@@@YGXPAUElemPos@CMarkup@@PBU01@H@Z ENDP ; CopyElements<CMarkup::ElemPos>
_TEXT	ENDS
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
EXTRN	_atexit:NEAR
;	COMDAT CRT$XCU
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
CRT$XCU	SEGMENT
_$S3	DD	FLAT:_$E1
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E1
text$yc	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 2602 : __declspec(selectany) CAtlWinModule _AtlWinModule;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
  00008	e8 00 00 00 00	 call	 ??0CAtlWinModule@ATL@@QAE@XZ ; ATL::CAtlWinModule::CAtlWinModule
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E2
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_$E1	ENDP
text$yc	ENDS
PUBLIC	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
EXTRN	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z:NEAR ; ATL::AtlWinModuleInit
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
??0CAtlWinModule@ATL@@QAE@XZ PROC NEAR			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2573 : 	CAtlWinModule()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ

; 2574 : 	{
; 2575 : 		cbSize = sizeof(_ATL_WIN_MODULE);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 00 2c 00 00
	00		 mov	 DWORD PTR [eax], 44	; 0000002cH

; 2576 : 		HRESULT hr = AtlWinModuleInit(this);

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
  00031	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2577 : 		if (FAILED(hr))

  00034	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00038	7d 07		 jge	 SHORT $L164241

; 2578 : 			CAtlBaseModule::m_bInitFailed = true;

  0003a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed
$L164241:

; 2579 : 	}

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
PUBLIC	??0CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::CComCriticalSection
PUBLIC	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC NEAR		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ??0CComCriticalSection@ATL@@QAE@XZ ; ATL::CComCriticalSection::CComCriticalSection
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 20	 add	 ecx, 32			; 00000020H
  0001f	e8 00 00 00 00	 call	 ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
_TEXT	ENDS
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComCriticalSection@ATL@@QAE@XZ PROC NEAR		; ATL::CComCriticalSection::CComCriticalSection, COMDAT
; _this$ = ecx

; 114  : 	CComCriticalSection() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	{
; 116  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  0000e	6a 18		 push	 24			; 00000018H
  00010	6a 00		 push	 0
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _memset
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : 	}

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::CComCriticalSection
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpcoll.h
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 97   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
PUBLIC	??1CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::~CAtlWinModule
; Function compile flags: /Odt /RTCsu
;	COMDAT _$E2
text$yd	SEGMENT
_$E2	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
  00008	e8 00 00 00 00	 call	 ??1CAtlWinModule@ATL@@QAE@XZ ; ATL::CAtlWinModule::~CAtlWinModule
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_$E2	ENDP
text$yd	ENDS
PUBLIC	?Term@CAtlWinModule@ATL@@QAEXXZ			; ATL::CAtlWinModule::Term
PUBLIC	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
xdata$x	SEGMENT
$T192068 DD	0ffffffffH
	DD	FLAT:$L192064
$T192066 DD	019930520H
	DD	01H
	DD	FLAT:$T192068
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAtlWinModule@ATL@@QAE@XZ PROC NEAR			; ATL::CAtlWinModule::~CAtlWinModule, COMDAT
; _this$ = ecx

; 2582 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CAtlWinModule@ATL@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00020	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2583 : 		Term();

  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?Term@CAtlWinModule@ATL@@QAEXXZ ; ATL::CAtlWinModule::Term

; 2584 : 	}

  00032	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192064:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
__ehhandler$??1CAtlWinModule@ATL@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192066
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::~CAtlWinModule
PUBLIC	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CAtlWinModule@ATL@@QAEXXZ PROC NEAR		; ATL::CAtlWinModule::Term, COMDAT
; _this$ = ecx

; 2587 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2588 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A
  00013	e8 00 00 00 00	 call	 ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
  00018	50		 push	 eax
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm

; 2589 : 	}

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?Term@CAtlWinModule@ATL@@QAEXXZ ENDP			; ATL::CAtlWinModule::Term
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC NEAR ; ATL::CAtlBaseModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 206  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		return m_hInst;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 208  : 	}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CAtlBaseModule::GetModuleInstance
_TEXT	ENDS
PUBLIC	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC NEAR		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 20	 add	 ecx, 32			; 00000020H
  00014	e8 00 00 00 00	 call	 ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
_TEXT	ENDS
PUBLIC	?Term@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Term
PUBLIC	?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
PUBLIC	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
EXTRN	__imp__UnregisterClassA@8:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_i$167613 = -4						; size = 4
_pWinModule$ = 8					; size = 4
_hInst$ = 12						; size = 4
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z PROC NEAR ; ATL::AtlWinModuleTerm, COMDAT

; 6215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 6216 : 	if (pWinModule == NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pWinModule$[ebp], 0
  00010	75 0a		 jne	 SHORT $L167606

; 6217 : 		return E_INVALIDARG;

  00012	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00017	e9 86 00 00 00	 jmp	 $L167605
$L167606:

; 6218 : 	if (pWinModule->cbSize == 0)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _pWinModule$[ebp]
  0001f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00022	75 04		 jne	 SHORT $L167608

; 6219 : 		return S_OK;

  00024	33 c0		 xor	 eax, eax
  00026	eb 7a		 jmp	 SHORT $L167605
$L167608:

; 6220 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0002b	83 39 2c	 cmp	 DWORD PTR [ecx], 44	; 0000002cH
  0002e	74 07		 je	 SHORT $L167611

; 6221 : 		return E_INVALIDARG;

  00030	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00035	eb 6b		 jmp	 SHORT $L167605
$L167611:

; 6222 : 
; 6223 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$167613[ebp], 0
  0003e	eb 09		 jmp	 SHORT $L167614
$L167615:
  00040	8b 55 fc	 mov	 edx, DWORD PTR _i$167613[ebp]
  00043	83 c2 01	 add	 edx, 1
  00046	89 55 fc	 mov	 DWORD PTR _i$167613[ebp], edx
$L167614:
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0004c	83 c1 20	 add	 ecx, 32			; 00000020H
  0004f	e8 00 00 00 00	 call	 ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
  00054	39 45 fc	 cmp	 DWORD PTR _i$167613[ebp], eax
  00057	7d 28		 jge	 SHORT $L167616

; 6224 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00059	8b f4		 mov	 esi, esp
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _hInst$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _i$167613[ebp]
  00062	51		 push	 ecx
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  00066	83 c1 20	 add	 ecx, 32			; 00000020H
  00069	e8 00 00 00 00	 call	 ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
  0006e	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassA@8
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	eb bf		 jmp	 SHORT $L167615
$L167616:

; 6225 : 	pWinModule->m_rgWindowClassAtoms.RemoveAll();

  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  00084	83 c1 20	 add	 ecx, 32			; 00000020H
  00087	e8 00 00 00 00	 call	 ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 6226 : 	pWinModule->m_csWindowCreate.Term();

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0008f	83 c1 04	 add	 ecx, 4
  00092	e8 00 00 00 00	 call	 ?Term@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Term

; 6227 : 	pWinModule->cbSize = 0;

  00097	8b 45 08	 mov	 eax, DWORD PTR _pWinModule$[ebp]
  0009a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 6228 : 	return S_OK;

  000a0	33 c0		 xor	 eax, eax
$L167605:

; 6229 : }

  000a2	5e		 pop	 esi
  000a3	83 c4 04	 add	 esp, 4
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CComCriticalSection@ATL@@QAEJXZ PROC NEAR		; ATL::CComCriticalSection::Term, COMDAT
; _this$ = ecx

; 147  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 148  : 		DeleteCriticalSection(&m_sec);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 149  : 		return S_OK;

  00022	33 c0		 xor	 eax, eax

; 150  : 	}	

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Term@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Term
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpcoll.h
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 100  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 		RemoveAll();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 102  : 	}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 		return m_nSize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 137  : 	}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_i$183908 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 173  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 		if(m_aT != NULL)

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	74 40		 je	 SHORT $L183907

; 175  : 		{
; 176  : 			for(int i = 0; i < m_nSize; i++)

  00020	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$183908[ebp], 0
  00027	eb 09		 jmp	 SHORT $L183909
$L183910:
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _i$183908[ebp]
  0002c	83 c1 01	 add	 ecx, 1
  0002f	89 4d f8	 mov	 DWORD PTR _i$183908[ebp], ecx
$L183909:
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 45 f8	 mov	 eax, DWORD PTR _i$183908[ebp]
  00038	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0003b	7d 02		 jge	 SHORT $L183911

; 177  : 				m_aT[i].~T();

  0003d	eb ea		 jmp	 SHORT $L183910
$L183911:

; 178  : 			free(m_aT);

  0003f	8b f4		 mov	 esi, esp
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 11		 mov	 edx, DWORD PTR [ecx]
  00046	52		 push	 edx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0004d	83 c4 04	 add	 esp, 4
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 179  : 			m_aT = NULL;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L183907:

; 180  : 		}
; 181  : 		m_nSize = 0;

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 182  : 		m_nAllocSize = 0;

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 183  : 	}

  00074	5e		 pop	 esi
  00075	83 c4 08	 add	 esp, 8
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
_TEXT	ENDS
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	??_C@_0FK@CHAMEKEI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
PUBLIC	??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
;	COMDAT ??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
CONST	SEGMENT
??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ DB 'n'
	DB	'Index >= 0 && nIndex < m_nSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@CHAMEKEI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FK@CHAMEKEI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\atlsimpcoll.h', 00H		; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 194  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 195  : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000f	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00013	7c 0b		 jl	 SHORT $L192081
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001e	7c 2b		 jl	 SHORT $L192082
$L192081:
  00020	8b f4		 mov	 esi, esp
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
  00027	6a 00		 push	 0
  00029	68 c3 00 00 00	 push	 195			; 000000c3H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FK@CHAMEKEI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00033	6a 02		 push	 2
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003b	83 c4 14	 add	 esp, 20			; 00000014H
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	83 f8 01	 cmp	 eax, 1
  00048	75 01		 jne	 SHORT $L192082
  0004a	cc		 int	 3
$L192082:

; 196  : 		if(nIndex < 0 || nIndex >= m_nSize)

  0004b	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0004f	7c 0b		 jl	 SHORT $L183917
  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00057	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0005a	7c 0c		 jl	 SHORT $L183916
$L183917:

; 197  : 		{
; 198  : 			_AtlRaiseException(EXCEPTION_ARRAY_BOUNDS_EXCEEDED);					

  0005c	6a 01		 push	 1
  0005e	68 8c 00 00 c0	 push	 -1073741684		; c000008cH
  00063	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
$L183916:

; 199  : 		}
; 200  : 		return m_aT[nIndex];

  00068	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00070	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
$L192080:

; 201  : 	}

  00073	5e		 pop	 esi
  00074	83 c4 04	 add	 esp, 4
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
_TEXT	ENDS
EXTRN	__imp__RaiseException@16:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
_dwExceptionCode$ = 8					; size = 4
_dwExceptionFlags$ = 12					; size = 4
?_AtlRaiseException@ATL@@YAXKK@Z PROC NEAR		; ATL::_AtlRaiseException, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 27   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

  00004	8b f4		 mov	 esi, esp
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _dwExceptionFlags$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _dwExceptionCode$[ebp]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RaiseException@16
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   : }

  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
END
