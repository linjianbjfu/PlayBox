; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\CBufferDC.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??_GCBufferDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CBufferDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBufferDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CBufferDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufferDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CBufferDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBufferDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG187037 DB	'.\src\Gui\util\CBufferDC.cpp', 00H
	ORG $+3
$SG187049 DB	'.\src\Gui\util\CBufferDC.cpp', 00H
CONST	ENDS
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CDC@@8				; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCDC@@@8					; CDC `RTTI Type Descriptor'
PUBLIC	??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z	; CBufferDC::CBufferDC
PUBLIC	??_7CBufferDC@@6B@				; CBufferDC::`vftable'
PUBLIC	??_GCBufferDC@@UAEPAXI@Z			; CBufferDC::`scalar deleting destructor'
PUBLIC	??_R4CBufferDC@@6B@				; CBufferDC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufferDC@@@8				; CBufferDC `RTTI Type Descriptor'
PUBLIC	??_R3CBufferDC@@8				; CBufferDC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufferDC@@8				; CBufferDC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBufferDC@@8			; CBufferDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	?TextOutA@CDC@@UAEHHHPBDH@Z:NEAR		; CDC::TextOutA
EXTRN	?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z:NEAR ; CDC::ExtTextOutA
EXTRN	?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z:NEAR ; CDC::TabbedTextOutA
EXTRN	?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z:NEAR	; CDC::DrawTextA
EXTRN	?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z:NEAR ; CDC::DrawTextExA
EXTRN	?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z:NEAR ; CDC::GrayStringA
EXTRN	__imp__CreateCompatibleBitmap@12:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	??BCGdiObject@@QBEPAXXZ:NEAR			; CGdiObject::operator void *
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:NEAR		; CGdiObject::Attach
EXTRN	?Escape@CDC@@UAEHHHPBDPAX@Z:NEAR		; CDC::Escape
EXTRN	??1CDC@@UAE@XZ:NEAR				; CDC::~CDC
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
EXTRN	?AssertValid@CDC@@UBEXXZ:NEAR			; CDC::AssertValid
EXTRN	?Dump@CDC@@UBEXAAVCDumpContext@@@Z:NEAR		; CDC::Dump
EXTRN	??0CRect@@QAE@XZ:NEAR				; CRect::CRect
EXTRN	??0CBitmap@@QAE@XZ:NEAR				; CBitmap::CBitmap
EXTRN	??BCRect@@QAEPAUtagRECT@@XZ:NEAR		; CRect::operator tagRECT *
EXTRN	?IsRectEmpty@CRect@@QBEHXZ:NEAR			; CRect::IsRectEmpty
EXTRN	??1CBitmap@@UAE@XZ:NEAR				; CBitmap::~CBitmap
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:NEAR	; CObject::Serialize
EXTRN	__imp__GetClipBox@8:NEAR
EXTRN	?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ:NEAR ; CDC::GetRuntimeClass
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:NEAR		; CDC::Attach
EXTRN	?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetAttribDC
EXTRN	?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetOutputDC
EXTRN	?ReleaseAttribDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseAttribDC
EXTRN	?ReleaseOutputDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseOutputDC
EXTRN	??_ECBufferDC@@UAEPAXI@Z:NEAR			; CBufferDC::`vector deleting destructor'
EXTRN	??0CDC@@QAE@XZ:NEAR				; CDC::CDC
EXTRN	?SaveDC@CDC@@UAEHXZ:NEAR			; CDC::SaveDC
EXTRN	?RestoreDC@CDC@@UAEHH@Z:NEAR			; CDC::RestoreDC
EXTRN	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z:NEAR ; CDC::SelectStockObject
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?SetBkColor@CDC@@UAEKK@Z:NEAR			; CDC::SetBkColor
EXTRN	?SetTextColor@CDC@@UAEKK@Z:NEAR			; CDC::SetTextColor
EXTRN	?SetMapMode@CDC@@UAEHH@Z:NEAR			; CDC::SetMapMode
EXTRN	?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::SetViewportOrg
EXTRN	?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::OffsetViewportOrg
EXTRN	?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetViewportExt
EXTRN	?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleViewportExt
EXTRN	?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetWindowExt
EXTRN	?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleWindowExt
EXTRN	?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z:NEAR	; CDC::GetClipBox
EXTRN	?PtVisible@CDC@@UBEHHH@Z:NEAR			; CDC::PtVisible
EXTRN	?RectVisible@CDC@@UBEHPBUtagRECT@@@Z:NEAR	; CDC::RectVisible
EXTRN	?ExcludeClipRect@CDC@@QAEHHHHH@Z:NEAR		; CDC::ExcludeClipRect
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\cbufferdc.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
xdata$x	SEGMENT
$T187493 DD	0ffffffffH
	DD	FLAT:$L187484
	DD	00H
	DD	FLAT:$L187485
$T187489 DD	019930520H
	DD	02H
	DD	FLAT:$T187493
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CBufferDC@@6B@
CONST	SEGMENT
??_7CBufferDC@@6B@ DD FLAT:??_R4CBufferDC@@6B@		; CBufferDC::`vftable'
	DD	FLAT:?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBufferDC@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CDC@@UBEXXZ
	DD	FLAT:?Dump@CDC@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?ReleaseAttribDC@CDC@@UAEXXZ
	DD	FLAT:?ReleaseOutputDC@CDC@@UAEXXZ
	DD	FLAT:?SaveDC@CDC@@UAEHXZ
	DD	FLAT:?RestoreDC@CDC@@UAEHH@Z
	DD	FLAT:?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z
	DD	FLAT:?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z
	DD	FLAT:?SetBkColor@CDC@@UAEKK@Z
	DD	FLAT:?SetTextColor@CDC@@UAEKK@Z
	DD	FLAT:?SetMapMode@CDC@@UAEHH@Z
	DD	FLAT:?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z
	DD	FLAT:?PtVisible@CDC@@UBEHHH@Z
	DD	FLAT:?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
	DD	FLAT:?TextOutA@CDC@@UAEHHHPBDH@Z
	DD	FLAT:?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
	DD	FLAT:?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
	DD	FLAT:?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
	DD	FLAT:?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
	DD	FLAT:?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
	DD	FLAT:?Escape@CDC@@UAEHHHPBDPAX@Z
CONST	ENDS
;	COMDAT ??_R4CBufferDC@@6B@
rdata$r	SEGMENT
??_R4CBufferDC@@6B@ DD 00H				; CBufferDC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufferDC@@@8
	DD	FLAT:??_R3CBufferDC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufferDC@@@8
_DATA	SEGMENT
??_R0?AVCBufferDC@@@8 DD FLAT:??_7type_info@@6B@	; CBufferDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufferDC@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBufferDC@@8
rdata$r	SEGMENT
??_R3CBufferDC@@8 DD 00H				; CBufferDC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBufferDC@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufferDC@@8
rdata$r	SEGMENT
??_R2CBufferDC@@8 DD FLAT:??_R1A@?0A@A@CBufferDC@@8	; CBufferDC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CDC@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBufferDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBufferDC@@8 DD FLAT:??_R0?AVCBufferDC@@@8	; CBufferDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CDC@@8 DD FLAT:??_R0?AVCDC@@@8		; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT
??_R0?AVCDC@@@8 DD FLAT:??_7type_info@@6B@		; CDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDC@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hDestDC$ = 8						; size = 4
_rcPaint$ = 12						; size = 4
??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z PROC NEAR	; CBufferDC::CBufferDC
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBufferDC@@6B@
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _hDestDC$[ebp]
  00042	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 14	 add	 ecx, 20			; 00000014H
  0004b	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00050	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00054	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0005a	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 6    : 	if ( rcPaint.IsRectEmpty() )

  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _rcPaint$[ebp]
  00062	e8 00 00 00 00	 call	 ?IsRectEmpty@CRect@@QBEHXZ ; CRect::IsRectEmpty
  00067	85 c0		 test	 eax, eax
  00069	74 24		 je	 SHORT $L187034

; 7    : 	{
; 8    : 		::GetClipBox (m_hDestDC, m_rect);

  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00071	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00076	8b f4		 mov	 esi, esp
  00078	50		 push	 eax
  00079	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007f	51		 push	 ecx
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClipBox@8
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 9    : 	}
; 10   : 	else

  0008d	eb 1f		 jmp	 SHORT $L187035
$L187034:

; 11   : 	{
; 12   : 		m_rect = rcPaint;

  0008f	8b 55 0c	 mov	 edx, DWORD PTR _rcPaint$[ebp]
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	83 c0 1c	 add	 eax, 28			; 0000001cH
  00098	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0009a	89 08		 mov	 DWORD PTR [eax], ecx
  0009c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0009f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000a2	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000a5	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000a8	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  000ab	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L187035:

; 13   : 	}
; 14   : 	VERIFY(Attach (::CreateCompatibleDC (m_hDestDC)));

  000ae	8b f4		 mov	 esi, esp
  000b0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b6	51		 push	 ecx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	50		 push	 eax
  000c5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach
  000cd	85 c0		 test	 eax, eax
  000cf	75 11		 jne	 SHORT $L187477
  000d1	6a 0e		 push	 14			; 0000000eH
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:$SG187037
  000d8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000dd	85 c0		 test	 eax, eax
  000df	74 01		 je	 SHORT $L187477
  000e1	cc		 int	 3
$L187477:

; 15   : 	m_bitmap.Attach (::CreateCompatibleBitmap (m_hDestDC, m_rect.right, m_rect.bottom));

  000e2	8b f4		 mov	 esi, esp
  000e4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000ea	51		 push	 ecx
  000eb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ee	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f1	50		 push	 eax
  000f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000f8	52		 push	 edx
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  000ff	3b f4		 cmp	 esi, esp
  00101	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00106	50		 push	 eax
  00107	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	83 c1 14	 add	 ecx, 20			; 00000014H
  0010d	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 16   : 	m_hOldBitmap = ::SelectObject (m_hDC, m_bitmap);

  00112	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	83 c1 14	 add	 ecx, 20			; 00000014H
  00118	e8 00 00 00 00	 call	 ??BCGdiObject@@QBEPAXXZ	; CGdiObject::operator void *
  0011d	8b f4		 mov	 esi, esp
  0011f	50		 push	 eax
  00120	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00123	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00126	51		 push	 ecx
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  0012d	3b f4		 cmp	 esi, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00137	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 17   : 
; 18   : 	if ( m_rect.top > 0 )

  0013a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00141	7e 1a		 jle	 SHORT $L187038

; 19   : 	{
; 20   : 		ExcludeClipRect (0, 0, m_rect.right, m_rect.top);

  00143	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00149	52		 push	 edx
  0014a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00150	51		 push	 ecx
  00151	6a 00		 push	 0
  00153	6a 00		 push	 0
  00155	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00158	e8 00 00 00 00	 call	 ?ExcludeClipRect@CDC@@QAEHHHHH@Z ; CDC::ExcludeClipRect
$L187038:

; 21   : 	}
; 22   : 	if ( m_rect.left > 0 )

  0015d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00160	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  00164	7e 1f		 jle	 SHORT $L187033

; 23   : 	{
; 24   : 		ExcludeClipRect (0, m_rect.top, m_rect.left, m_rect.bottom);

  00166	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00169	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0016c	51		 push	 ecx
  0016d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00170	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00173	50		 push	 eax
  00174	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0017a	52		 push	 edx
  0017b	6a 00		 push	 0
  0017d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	e8 00 00 00 00	 call	 ?ExcludeClipRect@CDC@@QAEHHHHH@Z ; CDC::ExcludeClipRect
$L187033:

; 25   : 	}
; 26   : }

  00185	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00192	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00199	5e		 pop	 esi
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L187484:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L187485:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 14	 add	 ecx, 20			; 00000014H
  0000e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T187489
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z ENDP		; CBufferDC::CBufferDC
PUBLIC	??1CBufferDC@@UAE@XZ				; CBufferDC::~CBufferDC
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCBufferDC@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBufferDC@@UAEPAXI@Z PROC NEAR			; CBufferDC::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CBufferDC@@UAE@XZ	; CBufferDC::~CBufferDC
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187043
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187043:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GCBufferDC@@UAEPAXI@Z ENDP				; CBufferDC::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp__BitBlt@36:NEAR
EXTRN	?Detach@CGdiObject@@QAEPAXXZ:NEAR		; CGdiObject::Detach
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	?Width@CRect@@QBEHXZ:NEAR			; CRect::Width
EXTRN	?Height@CRect@@QBEHXZ:NEAR			; CRect::Height
EXTRN	?Detach@CDC@@QAEPAUHDC__@@XZ:NEAR		; CDC::Detach
xdata$x	SEGMENT
$T187503 DD	0ffffffffH
	DD	FLAT:$L187498
	DD	00H
	DD	FLAT:$L187499
$T187501 DD	019930520H
	DD	02H
	DD	FLAT:$T187503
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_pDc$ = -24						; size = 4
_pObj$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBufferDC@@UAE@XZ PROC NEAR				; CBufferDC::~CBufferDC
; _this$ = ecx

; 30   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	6a ff		 push	 -1
  001b5	68 00 00 00 00	 push	 __ehhandler$??1CBufferDC@@UAE@XZ
  001ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  001c0	50		 push	 eax
  001c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  001c8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001cb	56		 push	 esi
  001cc	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  001d3	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  001da	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  001e1	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  001e4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001e7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBufferDC@@6B@
  001ed	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 	VERIFY(::BitBlt (m_hDestDC, m_rect.left, m_rect.top, m_rect.Width(), m_rect.Height(), m_hDC, m_rect.left, m_rect.top, SRCCOPY));

  001f4	8b f4		 mov	 esi, esp
  001f6	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  001fb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001fe	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00201	52		 push	 edx
  00202	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00205	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00208	51		 push	 ecx
  00209	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0020c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0020f	50		 push	 eax
  00210	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00216	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0021b	50		 push	 eax
  0021c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0021f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00222	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00227	50		 push	 eax
  00228	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0022b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0022e	52		 push	 edx
  0022f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00232	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00235	51		 push	 ecx
  00236	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00239	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
  00243	3b f4		 cmp	 esi, esp
  00245	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024a	85 c0		 test	 eax, eax
  0024c	75 11		 jne	 SHORT $L187497
  0024e	6a 1f		 push	 31			; 0000001fH
  00250	68 00 00 00 00	 push	 OFFSET FLAT:$SG187049
  00255	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0025a	85 c0		 test	 eax, eax
  0025c	74 01		 je	 SHORT $L187497
  0025e	cc		 int	 3
$L187497:

; 32   : 	::SelectObject (m_hDC, m_hOldBitmap);

  0025f	8b f4		 mov	 esi, esp
  00261	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00264	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00267	50		 push	 eax
  00268	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0026b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0026e	52		 push	 edx
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 33   : 	HGDIOBJ pObj = m_bitmap.Detach();

  0027c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0027f	83 c1 14	 add	 ecx, 20			; 00000014H
  00282	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
  00287	89 45 ec	 mov	 DWORD PTR _pObj$[ebp], eax

; 34   : 	::DeleteObject(pObj);

  0028a	8b f4		 mov	 esi, esp
  0028c	8b 45 ec	 mov	 eax, DWORD PTR _pObj$[ebp]
  0028f	50		 push	 eax
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  00296	3b f4		 cmp	 esi, esp
  00298	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 	HDC pDc=Detach();

  0029d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002a0	e8 00 00 00 00	 call	 ?Detach@CDC@@QAEPAUHDC__@@XZ ; CDC::Detach
  002a5	89 45 e8	 mov	 DWORD PTR _pDc$[ebp], eax

; 36   : 	::DeleteDC(pDc);

  002a8	8b f4		 mov	 esi, esp
  002aa	8b 4d e8	 mov	 ecx, DWORD PTR _pDc$[ebp]
  002ad	51		 push	 ecx
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
  002b4	3b f4		 cmp	 esi, esp
  002b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : }

  002bb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c2	83 c1 14	 add	 ecx, 20			; 00000014H
  002c5	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  002ca	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002d4	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  002d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002e3	5e		 pop	 esi
  002e4	83 c4 18	 add	 esp, 24			; 00000018H
  002e7	3b ec		 cmp	 ebp, esp
  002e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L187498:
  0001d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L187499:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 14	 add	 ecx, 20			; 00000014H
  0002b	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??1CBufferDC@@UAE@XZ:
  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T187501
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CBufferDC@@UAE@XZ ENDP				; CBufferDC::~CBufferDC
END
