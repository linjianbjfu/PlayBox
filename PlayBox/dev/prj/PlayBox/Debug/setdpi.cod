; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\setdpi.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnlockResource@@YGHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG187185 DB	'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 00H
	ORG $+3
$SG187230 DB	'T', 00H, 'a', 00H, 'h', 00H, 'o', 00H, 'm', 00H, 'a', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	??0CSetDPI@@QAE@XZ				; CSetDPI::CSetDPI
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\setdpi.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSetDPI@@QAE@XZ PROC NEAR				; CSetDPI::CSetDPI
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 311  :     hwnd=0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 312  :     font=0;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 313  :     oldfont=0;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 314  :     inst=0;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 315  :     IDD=0;

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 316  : }

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??0CSetDPI@@QAE@XZ ENDP					; CSetDPI::CSetDPI
_TEXT	ENDS
PUBLIC	?Detach@CSetDPI@@QAEXXZ				; CSetDPI::Detach
PUBLIC	??1CSetDPI@@QAE@XZ				; CSetDPI::~CSetDPI
EXTRN	__RTC_CheckEsp:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSetDPI@@QAE@XZ PROC NEAR				; CSetDPI::~CSetDPI
; _this$ = ecx

; 318  : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	51		 push	 ecx
  00054	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0005b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     Detach();

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?Detach@CSetDPI@@QAEXXZ	; CSetDPI::Detach

; 320  : }

  00066	83 c4 04	 add	 esp, 4
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
??1CSetDPI@@QAE@XZ ENDP					; CSetDPI::~CSetDPI
_TEXT	ENDS
PUBLIC	__real@4052000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4020000000000000
PUBLIC	?UnlockResource@@YGHPAX@Z			; UnlockResource
PUBLIC	?Attach@CSetDPI@@QAEXPAUHINSTANCE__@@PAUHWND__@@HN@Z ; CSetDPI::Attach
PUBLIC	?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ; helper::DlgTemplateItemCount
PUBLIC	?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ; helper::FindFirstDlgItem
PUBLIC	?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ; helper::FindNextDlgItem
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__FreeResource@4:NEAR
EXTRN	__imp__LockResource@4:NEAR
EXTRN	__imp__CreateFontW@56:NEAR
EXTRN	__imp__MoveWindow@24:NEAR
EXTRN	__imp__BeginPaint@8:NEAR
EXTRN	__imp__EndPaint@8:NEAR
EXTRN	__RTC_UninitUse:NEAR
EXTRN	__ftol2:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__fltused:NEAR
EXTRN	__imp__GetClientRect@8:NEAR
EXTRN	__imp__AdjustWindowRectEx@16:NEAR
EXTRN	__imp__GetDlgCtrlID@4:NEAR
EXTRN	__imp__ClientToScreen@8:NEAR
EXTRN	__imp__FindResourceA@12:NEAR
EXTRN	__imp__LoadResource@8:NEAR
EXTRN	__imp__GetWindow@8:NEAR
;	COMDAT __real@4052000000000000
CONST	SEGMENT
__real@4052000000000000 DQ 04052000000000000r	; 72
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv464 = -244						; size = 4
tv460 = -240						; size = 4
tv456 = -236						; size = 4
tv452 = -232						; size = 4
tv400 = -228						; size = 4
tv396 = -224						; size = 4
$T187766 = -217						; size = 1
_wnd$ = -216						; size = 4
_item$ = -212						; size = 4
_rect$ = -204						; size = 16
_y_d$ = -184						; size = 8
_y_n$ = -176						; size = 8
_x_d$ = -168						; size = 8
_x_n$ = -160						; size = 8
_dc$ = -148						; size = 4
_ps$ = -136						; size = 64
_szf$ = -64						; size = 8
_dd$ = -48						; size = 20
_hDialogTemplate$ = -24					; size = 4
_hResource$ = -20					; size = 4
_lpDialogTemplate$ = -16				; size = 4
_t$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_hInst$ = 8						; size = 4
__hwnd$ = 12						; size = 4
__IDD$ = 16						; size = 4
_dpi$ = 20						; size = 8
?Attach@CSetDPI@@QAEXPAUHINSTANCE__@@PAUHWND__@@HN@Z PROC NEAR ; CSetDPI::Attach
; _this$ = ecx

; 323  : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00089	56		 push	 esi
  0008a	57		 push	 edi
  0008b	51		 push	 ecx
  0008c	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00092	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00097	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0009c	f3 ab		 rep stosd
  0009e	59		 pop	 ecx
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  000a4	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  000a7	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  000aa	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR $T187766[ebp], 0

; 324  :     int t;
; 325  : 
; 326  :     if (hwnd) Detach();

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000b8	74 08		 je	 SHORT $L187245
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?Detach@CSetDPI@@QAEXXZ	; CSetDPI::Detach
$L187245:

; 327  : 
; 328  :     inst = hInst;

  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _hInst$[ebp]
  000c8	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 329  :     IDD = _IDD;

  000cb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	8b 4d 10	 mov	 ecx, DWORD PTR __IDD$[ebp]
  000d1	89 08		 mov	 DWORD PTR [eax], ecx

; 330  : 
; 331  :     hwnd=_hwnd;

  000d3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	8b 45 0c	 mov	 eax, DWORD PTR __hwnd$[ebp]
  000d9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 332  : 
; 333  :     helper::DLGTEMPLATEEX *lpDialogTemplate;
; 334  : 
; 335  :     if (!hInst)
; 336  : 	    { } // hInst = AfxFindResourceHandle(IMAKEINTRESOURCE(IDD), RT_DIALOG);
; 337  : 
; 338  : 	HRSRC hResource = ::FindResource(hInst, MAKEINTRESOURCE(IDD), RT_DIALOG);

  000dc	8b f4		 mov	 esi, esp
  000de	6a 05		 push	 5
  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000e6	52		 push	 edx
  000e7	8b 45 08	 mov	 eax, DWORD PTR _hInst$[ebp]
  000ea	50		 push	 eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	89 45 ec	 mov	 DWORD PTR _hResource$[ebp], eax

; 339  : 	HANDLE hDialogTemplate = LoadResource(hInst, hResource);

  000fb	8b f4		 mov	 esi, esp
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _hResource$[ebp]
  00100	51		 push	 ecx
  00101	8b 55 08	 mov	 edx, DWORD PTR _hInst$[ebp]
  00104	52		 push	 edx
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  0010b	3b f4		 cmp	 esi, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	89 45 e8	 mov	 DWORD PTR _hDialogTemplate$[ebp], eax

; 340  : 	lpDialogTemplate = (helper::DLGTEMPLATEEX *)LockResource(hDialogTemplate);    

  00115	8b f4		 mov	 esi, esp
  00117	8b 45 e8	 mov	 eax, DWORD PTR _hDialogTemplate$[ebp]
  0011a	50		 push	 eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00128	89 45 f0	 mov	 DWORD PTR _lpDialogTemplate$[ebp], eax

; 341  : 
; 342  : 
; 343  : 	dialogdata_t dd;
; 344  :     querydialogdata((LPCSTR)lpDialogTemplate,&dd);

  0012b	8d 4d d0	 lea	 ecx, DWORD PTR _dd$[ebp]
  0012e	51		 push	 ecx
  0012f	8b 55 f0	 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ?querydialogdata@@YAXPBDPAUdialogdata_t@@@Z ; querydialogdata
  00138	83 c4 08	 add	 esp, 8

; 345  : 
; 346  :     if ((dd.pt<0)||(dd.pt>32767))

  0013b	83 7d d0 00	 cmp	 DWORD PTR _dd$[ebp], 0
  0013f	7c 09		 jl	 SHORT $L187260
  00141	81 7d d0 ff 7f
	00 00		 cmp	 DWORD PTR _dd$[ebp], 32767 ; 00007fffH
  00148	7e 14		 jle	 SHORT $L187259
$L187260:

; 347  :     {
; 348  :         // I don't know what to do if it happens this way
; 349  :         // this is a compromise solution:
; 350  :         dd.pt=-dd.pt;

  0014a	8b 45 d0	 mov	 eax, DWORD PTR _dd$[ebp]
  0014d	f7 d8		 neg	 eax
  0014f	89 45 d0	 mov	 DWORD PTR _dd$[ebp], eax

; 351  :         dd.pt&=0xFFFF;

  00152	8b 4d d0	 mov	 ecx, DWORD PTR _dd$[ebp]
  00155	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0015b	89 4d d0	 mov	 DWORD PTR _dd$[ebp], ecx
$L187259:

; 352  :     }
; 353  : 
; 354  :     font=CreateFontW(
; 355  : 		-(int)(dd.pt*dpi/72.0 + 0.5), // negative makes it use "char size"
; 356  :     0,              // logical average character width 
; 357  :     0,              // angle of escapement 
; 358  :     0,              // base-line orientation angle 
; 359  :     dd.weight,  // weight
; 360  :     dd.italic,  // italic
; 361  :     FALSE,          // underline attribute flag 
; 362  :     FALSE,          // strikeout attribute flag 
; 363  :     DEFAULT_CHARSET,    // character set identifier 
; 364  :     OUT_DEFAULT_PRECIS, // output precision 
; 365  :     CLIP_DEFAULT_PRECIS,// clipping precision 
; 366  :     DEFAULT_QUALITY,    // output quality 
; 367  :     DEFAULT_PITCH,  // pitch and family 
; 368  :     dd.faceName  // pointer to typeface name string 
; 369  :     );

  0015e	8b f4		 mov	 esi, esp
  00160	8b 55 e0	 mov	 edx, DWORD PTR _dd$[ebp+16]
  00163	52		 push	 edx
  00164	6a 00		 push	 0
  00166	6a 00		 push	 0
  00168	6a 00		 push	 0
  0016a	6a 00		 push	 0
  0016c	6a 01		 push	 1
  0016e	6a 00		 push	 0
  00170	6a 00		 push	 0
  00172	8b 45 dc	 mov	 eax, DWORD PTR _dd$[ebp+12]
  00175	50		 push	 eax
  00176	8b 4d d8	 mov	 ecx, DWORD PTR _dd$[ebp+8]
  00179	51		 push	 ecx
  0017a	6a 00		 push	 0
  0017c	6a 00		 push	 0
  0017e	6a 00		 push	 0
  00180	db 45 d0	 fild	 DWORD PTR _dd$[ebp]
  00183	dc 4d 14	 fmul	 QWORD PTR _dpi$[ebp]
  00186	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4052000000000000
  0018c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00192	e8 00 00 00 00	 call	 __ftol2
  00197	f7 d8		 neg	 eax
  00199	50		 push	 eax
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontW@56
  001a0	3b f4		 cmp	 esi, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001aa	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 370  : 
; 371  :     oldfont=(HFONT)::SendMessage(hwnd, WM_GETFONT, 0, 0);

  001ad	8b f4		 mov	 esi, esp
  001af	6a 00		 push	 0
  001b1	6a 00		 push	 0
  001b3	6a 31		 push	 49			; 00000031H
  001b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001bb	51		 push	 ecx
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001cc	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 372  :     SendMessage(hwnd, WM_SETFONT, (LPARAM)font, TRUE);

  001cf	8b f4		 mov	 esi, esp
  001d1	6a 01		 push	 1
  001d3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001d6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001d9	51		 push	 ecx
  001da	6a 30		 push	 48			; 00000030H
  001dc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001df	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e2	50		 push	 eax
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  001e9	3b f4		 cmp	 esi, esp
  001eb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 373  :   
; 374  : 	SIZE szf;
; 375  : 
; 376  : 	
; 377  :     PAINTSTRUCT ps;
; 378  :     HDC dc=BeginPaint(hwnd, &ps);

  001f0	8b f4		 mov	 esi, esp
  001f2	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _ps$[ebp]
  001f8	51		 push	 ecx
  001f9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001fc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001ff	50		 push	 eax
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  00206	3b f4		 cmp	 esi, esp
  00208	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020d	89 85 6c ff ff
	ff		 mov	 DWORD PTR _dc$[ebp], eax

; 379  :     getptsize(dc,font,&szf);

  00213	8d 4d c0	 lea	 ecx, DWORD PTR _szf$[ebp]
  00216	51		 push	 ecx
  00217	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0021a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0021d	52		 push	 edx
  0021e	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dc$[ebp]
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z ; getptsize
  0022a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 380  :     EndPaint(hwnd, &ps);

  0022d	8b f4		 mov	 esi, esp
  0022f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _ps$[ebp]
  00235	51		 push	 ecx
  00236	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00239	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
  00243	3b f4		 cmp	 esi, esp
  00245	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 381  : 	
; 382  : 
; 383  :     double x_n=szf.cx,

  0024a	db 45 c0	 fild	 DWORD PTR _szf$[ebp]
  0024d	dd 9d 60 ff ff
	ff		 fstp	 QWORD PTR _x_n$[ebp]

; 384  :            x_d=4,

  00253	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4010000000000000
  00259	dd 9d 58 ff ff
	ff		 fstp	 QWORD PTR _x_d$[ebp]

; 385  :            y_n=szf.cy,

  0025f	db 45 c4	 fild	 DWORD PTR _szf$[ebp+4]
  00262	dd 9d 50 ff ff
	ff		 fstp	 QWORD PTR _y_n$[ebp]

; 386  :            y_d=8;

  00268	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4020000000000000
  0026e	dd 9d 48 ff ff
	ff		 fstp	 QWORD PTR _y_d$[ebp]

; 387  : 
; 388  : 	RECT rect;
; 389  : 	GetClientRect(hwnd,&rect);	

  00274	8b f4		 mov	 esi, esp
  00276	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  0027c	51		 push	 ecx
  0027d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00280	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00283	50		 push	 eax
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 390  : 	
; 391  : 	rect.right=rect.left+(int)(lpDialogTemplate->cx*x_n/x_d+0.5);

  00291	8b 4d f0	 mov	 ecx, DWORD PTR _lpDialogTemplate$[ebp]
  00294	0f bf 51 16	 movsx	 edx, WORD PTR [ecx+22]
  00298	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv396[ebp], edx
  0029e	db 85 20 ff ff
	ff		 fild	 DWORD PTR tv396[ebp]
  002a4	dc 8d 60 ff ff
	ff		 fmul	 QWORD PTR _x_n$[ebp]
  002aa	dc b5 58 ff ff
	ff		 fdiv	 QWORD PTR _x_d$[ebp]
  002b0	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  002b6	e8 00 00 00 00	 call	 __ftol2
  002bb	03 85 34 ff ff
	ff		 add	 eax, DWORD PTR _rect$[ebp]
  002c1	89 85 3c ff ff
	ff		 mov	 DWORD PTR _rect$[ebp+8], eax

; 392  : 	rect.bottom=rect.top+(int)(lpDialogTemplate->cy*y_n/y_d+0.5);

  002c7	8b 45 f0	 mov	 eax, DWORD PTR _lpDialogTemplate$[ebp]
  002ca	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  002ce	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv400[ebp], ecx
  002d4	db 85 1c ff ff
	ff		 fild	 DWORD PTR tv400[ebp]
  002da	dc 8d 50 ff ff
	ff		 fmul	 QWORD PTR _y_n$[ebp]
  002e0	dc b5 48 ff ff
	ff		 fdiv	 QWORD PTR _y_d$[ebp]
  002e6	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  002ec	e8 00 00 00 00	 call	 __ftol2
  002f1	03 85 38 ff ff
	ff		 add	 eax, DWORD PTR _rect$[ebp+4]
  002f7	89 85 40 ff ff
	ff		 mov	 DWORD PTR _rect$[ebp+12], eax

; 393  : 
; 394  : 	ClientToScreen(hwnd, (LPPOINT)&rect);

  002fd	8b f4		 mov	 esi, esp
  002ff	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _rect$[ebp]
  00305	52		 push	 edx
  00306	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00309	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0030c	51		 push	 ecx
  0030d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
  00313	3b f4		 cmp	 esi, esp
  00315	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 395  : 	ClientToScreen(hwnd, ((LPPOINT)&rect)+1);

  0031a	8d 95 3c ff ff
	ff		 lea	 edx, DWORD PTR _rect$[ebp+8]
  00320	8b f4		 mov	 esi, esp
  00322	52		 push	 edx
  00323	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00326	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00329	51		 push	 ecx
  0032a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
  00330	3b f4		 cmp	 esi, esp
  00332	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 396  : 
; 397  :     AdjustWindowRectEx(&rect, lpDialogTemplate->style, dd.has_menu, lpDialogTemplate->exStyle );

  00337	8b f4		 mov	 esi, esp
  00339	8b 55 f0	 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  0033c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0033f	50		 push	 eax
  00340	8b 4d d4	 mov	 ecx, DWORD PTR _dd$[ebp+4]
  00343	51		 push	 ecx
  00344	8b 55 f0	 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  00347	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0034a	50		 push	 eax
  0034b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  00351	51		 push	 ecx
  00352	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustWindowRectEx@16
  00358	3b f4		 cmp	 esi, esp
  0035a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 398  : 	MoveWindow(hwnd,rect.left,rect.top,rect.right-rect.left,rect.bottom-rect.top,TRUE);

  0035f	8b f4		 mov	 esi, esp
  00361	6a 01		 push	 1
  00363	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _rect$[ebp+12]
  00369	2b 95 38 ff ff
	ff		 sub	 edx, DWORD PTR _rect$[ebp+4]
  0036f	52		 push	 edx
  00370	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _rect$[ebp+8]
  00376	2b 85 34 ff ff
	ff		 sub	 eax, DWORD PTR _rect$[ebp]
  0037c	50		 push	 eax
  0037d	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _rect$[ebp+4]
  00383	51		 push	 ecx
  00384	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _rect$[ebp]
  0038a	52		 push	 edx
  0038b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0038e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00391	51		 push	 ecx
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00398	3b f4		 cmp	 esi, esp
  0039a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 399  : 
; 400  : 
; 401  : 	helper::DLGITEMTEMPLATEEX *item=
; 402  : 		(helper::DLGITEMTEMPLATEEX *)helper::FindFirstDlgItem((DLGTEMPLATE *)lpDialogTemplate);

  0039f	8b 55 f0	 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  003a2	52		 push	 edx
  003a3	e8 00 00 00 00	 call	 ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ; helper::FindFirstDlgItem
  003a8	83 c4 04	 add	 esp, 4
  003ab	89 85 2c ff ff
	ff		 mov	 DWORD PTR _item$[ebp], eax

; 403  : 
; 404  : 	HWND wnd;
; 405  : 
; 406  : 	for(t=0;t<helper::DlgTemplateItemCount((DLGTEMPLATE *)lpDialogTemplate);t++)

  003b1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  003b8	eb 09		 jmp	 SHORT $L187281
$L187282:
  003ba	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  003bd	83 c0 01	 add	 eax, 1
  003c0	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
$L187281:
  003c3	8b 4d f0	 mov	 ecx, DWORD PTR _lpDialogTemplate$[ebp]
  003c6	51		 push	 ecx
  003c7	e8 00 00 00 00	 call	 ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ; helper::DlgTemplateItemCount
  003cc	83 c4 04	 add	 esp, 4
  003cf	0f b7 10	 movzx	 edx, WORD PTR [eax]
  003d2	39 55 f4	 cmp	 DWORD PTR _t$[ebp], edx
  003d5	0f 8d 5b 02 00
	00		 jge	 $L187283

; 407  : 	{
; 408  : 		// OLD IMPLEMENTATION: wnd=GetDlgItem(hwnd,item->id);
; 409  : 
; 410  : 	    // TODO: check if it is the best implementation
; 411  : 	    //       are we sure that controls will preserve the order?
; 412  : 
; 413  : 		if (!t) 

  003db	83 7d f4 00	 cmp	 DWORD PTR _t$[ebp], 0
  003df	75 27		 jne	 SHORT $L187284

; 414  : 			wnd=GetWindow(hwnd,GW_CHILD);

  003e1	8b f4		 mov	 esi, esp
  003e3	6a 05		 push	 5
  003e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003eb	51		 push	 ecx
  003ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  003f2	3b f4		 cmp	 esi, esp
  003f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003f9	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR $T187766[ebp], 1
  00400	89 85 28 ff ff
	ff		 mov	 DWORD PTR _wnd$[ebp], eax

; 415  : 		else

  00406	eb 3b		 jmp	 SHORT $L187287
$L187284:

; 416  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  00408	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  0040f	75 0d		 jne	 SHORT $L187767
  00411	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  00416	e8 00 00 00 00	 call	 __RTC_UninitUse
  0041b	83 c4 04	 add	 esp, 4
$L187767:
  0041e	8b f4		 mov	 esi, esp
  00420	6a 02		 push	 2
  00422	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _wnd$[ebp]
  00428	52		 push	 edx
  00429	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  0042f	3b f4		 cmp	 esi, esp
  00431	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00436	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR $T187766[ebp], 1
  0043d	89 85 28 ff ff
	ff		 mov	 DWORD PTR _wnd$[ebp], eax
$L187287:

; 417  : 		
; 418  : 		while ((wnd)&&(GetDlgCtrlID(wnd) != item->id)) 

  00443	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  0044a	75 0d		 jne	 SHORT $L187770
  0044c	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  00451	e8 00 00 00 00	 call	 __RTC_UninitUse
  00456	83 c4 04	 add	 esp, 4
$L187770:
  00459	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _wnd$[ebp], 0
  00460	74 77		 je	 SHORT $L187288
  00462	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  00469	75 0d		 jne	 SHORT $L187771
  0046b	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  00470	e8 00 00 00 00	 call	 __RTC_UninitUse
  00475	83 c4 04	 add	 esp, 4
$L187771:
  00478	8b f4		 mov	 esi, esp
  0047a	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _wnd$[ebp]
  00480	50		 push	 eax
  00481	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgCtrlID@4
  00487	3b f4		 cmp	 esi, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _item$[ebp]
  00494	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00497	74 40		 je	 SHORT $L187288

; 419  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  00499	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  004a0	75 0d		 jne	 SHORT $L187772
  004a2	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  004a7	e8 00 00 00 00	 call	 __RTC_UninitUse
  004ac	83 c4 04	 add	 esp, 4
$L187772:
  004af	8b f4		 mov	 esi, esp
  004b1	6a 02		 push	 2
  004b3	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _wnd$[ebp]
  004b9	52		 push	 edx
  004ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  004c0	3b f4		 cmp	 esi, esp
  004c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004c7	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR $T187766[ebp], 1
  004ce	89 85 28 ff ff
	ff		 mov	 DWORD PTR _wnd$[ebp], eax
  004d4	e9 6a ff ff ff	 jmp	 $L187287
$L187288:

; 420  : 
; 421  : 		if (!wnd) break;

  004d9	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  004e0	75 0d		 jne	 SHORT $L187773
  004e2	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  004e7	e8 00 00 00 00	 call	 __RTC_UninitUse
  004ec	83 c4 04	 add	 esp, 4
$L187773:
  004ef	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _wnd$[ebp], 0
  004f6	75 05		 jne	 SHORT $L187289
  004f8	e9 39 01 00 00	 jmp	 $L187283
$L187289:

; 422  : 	    
; 423  : 		MoveWindow(wnd,(int)(item->x*x_n/x_d+0.5),
; 424  : 		               (int)(item->y*y_n/y_d+0.5),
; 425  : 		               (int)(item->cx*x_n/x_d+0.5),
; 426  : 		               (int)(item->cy*y_n/y_d+0.5), TRUE);

  004fd	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  00504	75 0d		 jne	 SHORT $L187774
  00506	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  0050b	e8 00 00 00 00	 call	 __RTC_UninitUse
  00510	83 c4 04	 add	 esp, 4
$L187774:
  00513	8b f4		 mov	 esi, esp
  00515	6a 01		 push	 1
  00517	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _item$[ebp]
  0051d	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  00521	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv452[ebp], ecx
  00527	db 85 18 ff ff
	ff		 fild	 DWORD PTR tv452[ebp]
  0052d	dc 8d 50 ff ff
	ff		 fmul	 QWORD PTR _y_n$[ebp]
  00533	dc b5 48 ff ff
	ff		 fdiv	 QWORD PTR _y_d$[ebp]
  00539	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0053f	e8 00 00 00 00	 call	 __ftol2
  00544	50		 push	 eax
  00545	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _item$[ebp]
  0054b	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  0054f	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv456[ebp], eax
  00555	db 85 14 ff ff
	ff		 fild	 DWORD PTR tv456[ebp]
  0055b	dc 8d 60 ff ff
	ff		 fmul	 QWORD PTR _x_n$[ebp]
  00561	dc b5 58 ff ff
	ff		 fdiv	 QWORD PTR _x_d$[ebp]
  00567	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0056d	e8 00 00 00 00	 call	 __ftol2
  00572	50		 push	 eax
  00573	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _item$[ebp]
  00579	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  0057d	89 95 10 ff ff
	ff		 mov	 DWORD PTR tv460[ebp], edx
  00583	db 85 10 ff ff
	ff		 fild	 DWORD PTR tv460[ebp]
  00589	dc 8d 50 ff ff
	ff		 fmul	 QWORD PTR _y_n$[ebp]
  0058f	dc b5 48 ff ff
	ff		 fdiv	 QWORD PTR _y_d$[ebp]
  00595	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0059b	e8 00 00 00 00	 call	 __ftol2
  005a0	50		 push	 eax
  005a1	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _item$[ebp]
  005a7	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  005ab	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv464[ebp], ecx
  005b1	db 85 0c ff ff
	ff		 fild	 DWORD PTR tv464[ebp]
  005b7	dc 8d 60 ff ff
	ff		 fmul	 QWORD PTR _x_n$[ebp]
  005bd	dc b5 58 ff ff
	ff		 fdiv	 QWORD PTR _x_d$[ebp]
  005c3	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  005c9	e8 00 00 00 00	 call	 __ftol2
  005ce	50		 push	 eax
  005cf	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _wnd$[ebp]
  005d5	52		 push	 edx
  005d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  005dc	3b f4		 cmp	 esi, esp
  005de	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 427  : 
; 428  :         SendMessage(wnd, WM_SETFONT, (LPARAM)font, TRUE);

  005e3	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR $T187766[ebp], 0
  005ea	75 0d		 jne	 SHORT $L187775
  005ec	68 00 00 00 00	 push	 OFFSET FLAT:$L187768
  005f1	e8 00 00 00 00	 call	 __RTC_UninitUse
  005f6	83 c4 04	 add	 esp, 4
$L187775:
  005f9	8b f4		 mov	 esi, esp
  005fb	6a 01		 push	 1
  005fd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00600	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00603	51		 push	 ecx
  00604	6a 30		 push	 48			; 00000030H
  00606	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _wnd$[ebp]
  0060c	52		 push	 edx
  0060d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00613	3b f4		 cmp	 esi, esp
  00615	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 429  : 		
; 430  : 		item=(helper::DLGITEMTEMPLATEEX *)helper::FindNextDlgItem((DLGITEMTEMPLATE *)item,TRUE);

  0061a	6a 01		 push	 1
  0061c	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _item$[ebp]
  00622	50		 push	 eax
  00623	e8 00 00 00 00	 call	 ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ; helper::FindNextDlgItem
  00628	83 c4 08	 add	 esp, 8
  0062b	89 85 2c ff ff
	ff		 mov	 DWORD PTR _item$[ebp], eax

; 431  : 	}

  00631	e9 84 fd ff ff	 jmp	 $L187282
$L187283:

; 432  : 
; 433  :     UnlockResource(hDialogTemplate);    

  00636	8b 4d e8	 mov	 ecx, DWORD PTR _hDialogTemplate$[ebp]
  00639	51		 push	 ecx
  0063a	e8 00 00 00 00	 call	 ?UnlockResource@@YGHPAX@Z ; UnlockResource

; 434  :     FreeResource(hDialogTemplate);

  0063f	8b f4		 mov	 esi, esp
  00641	8b 55 e8	 mov	 edx, DWORD PTR _hDialogTemplate$[ebp]
  00644	52		 push	 edx
  00645	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4
  0064b	3b f4		 cmp	 esi, esp
  0064d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 435  : }

  00652	52		 push	 edx
  00653	8b cd		 mov	 ecx, ebp
  00655	50		 push	 eax
  00656	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187793
  0065c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00661	58		 pop	 eax
  00662	5a		 pop	 edx
  00663	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00666	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0066b	5f		 pop	 edi
  0066c	5e		 pop	 esi
  0066d	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00673	3b ec		 cmp	 ebp, esp
  00675	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0067a	8b e5		 mov	 esp, ebp
  0067c	5d		 pop	 ebp
  0067d	c2 14 00	 ret	 20			; 00000014H
$L187793:
  00680	05 00 00 00	 DD	 5
  00684	00 00 00 00	 DD	 $L187792
$L187792:
  00688	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0068c	14 00 00 00	 DD	 20			; 00000014H
  00690	00 00 00 00	 DD	 $L187785
  00694	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00698	08 00 00 00	 DD	 8
  0069c	00 00 00 00	 DD	 $L187786
  006a0	78 ff ff ff	 DD	 -136			; ffffff78H
  006a4	40 00 00 00	 DD	 64			; 00000040H
  006a8	00 00 00 00	 DD	 $L187787
  006ac	6c ff ff ff	 DD	 -148			; ffffff6cH
  006b0	04 00 00 00	 DD	 4
  006b4	00 00 00 00	 DD	 $L187788
  006b8	34 ff ff ff	 DD	 -204			; ffffff34H
  006bc	10 00 00 00	 DD	 16			; 00000010H
  006c0	00 00 00 00	 DD	 $L187789
$L187789:
  006c4	72		 DB	 114			; 00000072H
  006c5	65		 DB	 101			; 00000065H
  006c6	63		 DB	 99			; 00000063H
  006c7	74		 DB	 116			; 00000074H
  006c8	00		 DB	 0
$L187788:
  006c9	64		 DB	 100			; 00000064H
  006ca	63		 DB	 99			; 00000063H
  006cb	00		 DB	 0
$L187787:
  006cc	70		 DB	 112			; 00000070H
  006cd	73		 DB	 115			; 00000073H
  006ce	00		 DB	 0
$L187786:
  006cf	73		 DB	 115			; 00000073H
  006d0	7a		 DB	 122			; 0000007aH
  006d1	66		 DB	 102			; 00000066H
  006d2	00		 DB	 0
$L187785:
  006d3	64		 DB	 100			; 00000064H
  006d4	64		 DB	 100			; 00000064H
  006d5	00		 DB	 0
$L187768:
  006d6	77		 DB	 119			; 00000077H
  006d7	6e		 DB	 110			; 0000006eH
  006d8	64		 DB	 100			; 00000064H
  006d9	00		 DB	 0
?Attach@CSetDPI@@QAEXPAUHINSTANCE__@@PAUHWND__@@HN@Z ENDP ; CSetDPI::Attach
_TEXT	ENDS
PUBLIC	?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z	; helper::IsDialogEx
; Function compile flags: /Odt /RTCsu
;	COMDAT ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z
_TEXT	SEGMENT
_pTemplate$ = 8						; size = 4
?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z PROC NEAR ; helper::DlgTemplateItemCount, COMDAT

; 97   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 		if (IsDialogEx(pTemplate))

  00003	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z ; helper::IsDialogEx
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 08		 je	 SHORT $L187106

; 99   : 			return reinterpret_cast<DLGTEMPLATEEX*>(pTemplate)->cDlgItems;

  00013	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00016	83 c0 10	 add	 eax, 16			; 00000010H
  00019	eb 06		 jmp	 SHORT $L187105
$L187106:

; 100  : 		else
; 101  : 			return pTemplate->cdit;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  0001e	83 c0 08	 add	 eax, 8
$L187105:

; 102  : 	}

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ENDP ; helper::DlgTemplateItemCount
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT
_pTemplate$ = 8						; size = 4
?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z PROC NEAR	; helper::IsDialogEx, COMDAT

; 92   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 		return ((DLGTEMPLATEEX*)pTemplate)->signature == 0xFFFF;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00006	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  0000a	2d ff ff 00 00	 sub	 eax, 65535		; 0000ffffH
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax

; 94   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z ENDP		; helper::IsDialogEx
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT
tv94 = -20						; size = 2
tv85 = -18						; size = 2
tv81 = -16						; size = 2
tv74 = -14						; size = 2
_dwStyle$ = -12						; size = 4
_pw$ = -8						; size = 4
_bDialogEx$ = -4					; size = 4
_pTemplate$ = 8						; size = 4
?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z PROC NEAR ; helper::FindFirstDlgItem, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 114  : 		BOOL bDialogEx = IsDialogEx(pTemplate);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z ; helper::IsDialogEx
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 fc	 mov	 DWORD PTR _bDialogEx$[ebp], eax

; 115  : 
; 116  : 		WORD* pw;
; 117  : 		DWORD dwStyle;
; 118  : 		if (bDialogEx)

  00029	83 7d fc 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  0002d	74 14		 je	 SHORT $L187117

; 119  : 		{
; 120  : 			pw = (WORD*)((DLGTEMPLATEEX*)pTemplate + 1);

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pTemplate$[ebp]
  00032	83 c1 1a	 add	 ecx, 26			; 0000001aH
  00035	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx

; 121  : 			dwStyle = ((DLGTEMPLATEEX*)pTemplate)->style;

  00038	8b 55 08	 mov	 edx, DWORD PTR _pTemplate$[ebp]
  0003b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003e	89 45 f4	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 122  : 		}
; 123  : 		else

  00041	eb 11		 jmp	 SHORT $L187121
$L187117:

; 124  : 		{
; 125  : 			pw = (WORD*)(pTemplate + 1);

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _pTemplate$[ebp]
  00046	83 c1 12	 add	 ecx, 18			; 00000012H
  00049	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx

; 126  : 			dwStyle = pTemplate->style;

  0004c	8b 55 08	 mov	 edx, DWORD PTR _pTemplate$[ebp]
  0004f	8b 02		 mov	 eax, DWORD PTR [edx]
  00051	89 45 f4	 mov	 DWORD PTR _dwStyle$[ebp], eax
$L187121:

; 127  : 		}
; 128  : 
; 129  : 		// Check for presence of menu and skip it if there is one
; 130  : 		// 0x0000 means there is no menu
; 131  : 		// 0xFFFF means there is a menu ID following
; 132  : 		// Everything else means that this is a NULL terminated Unicode string
; 133  : 		// which identifies the menu resource
; 134  : 		if (*pw == 0xFFFF)

  00054	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  00057	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0005a	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  00060	75 0b		 jne	 SHORT $L187126

; 135  : 			pw += 2;				// Has menu ID, so skip 2 words

  00062	8b 45 f8	 mov	 eax, DWORD PTR _pw$[ebp]
  00065	83 c0 04	 add	 eax, 4
  00068	89 45 f8	 mov	 DWORD PTR _pw$[ebp], eax

; 136  : 		else

  0006b	eb 1d		 jmp	 SHORT $L187124
$L187126:

; 137  : 			while (*pw++);			// Either No menu, or string, skip past terminating NULL

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  00070	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00073	66 89 55 f2	 mov	 WORD PTR tv74[ebp], dx
  00077	8b 45 f8	 mov	 eax, DWORD PTR _pw$[ebp]
  0007a	83 c0 02	 add	 eax, 2
  0007d	89 45 f8	 mov	 DWORD PTR _pw$[ebp], eax
  00080	0f b7 4d f2	 movzx	 ecx, WORD PTR tv74[ebp]
  00084	85 c9		 test	 ecx, ecx
  00086	74 02		 je	 SHORT $L187124
  00088	eb e3		 jmp	 SHORT $L187126
$L187124:

; 138  : 
; 139  : 		// Check for presence of class name string
; 140  : 		// 0x0000 means "Use system dialog class name"
; 141  : 		// 0xFFFF means there is a window class (atom) specified
; 142  : 		// Everything else means that this is a NULL terminated Unicode string
; 143  : 		// which identifies the menu resource
; 144  : 		if (*pw == 0xFFFF)

  0008a	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  0008d	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00090	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00095	75 0b		 jne	 SHORT $L187131

; 145  : 			pw += 2;				// Has class atom, so skip 2 words

  00097	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  0009a	83 c1 04	 add	 ecx, 4
  0009d	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx

; 146  : 		else

  000a0	eb 1d		 jmp	 SHORT $L187134
$L187131:

; 147  : 			while (*pw++);			// Either No class, or string, skip past terminating NULL

  000a2	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  000a5	66 8b 02	 mov	 ax, WORD PTR [edx]
  000a8	66 89 45 f0	 mov	 WORD PTR tv81[ebp], ax
  000ac	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  000af	83 c1 02	 add	 ecx, 2
  000b2	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx
  000b5	0f b7 55 f0	 movzx	 edx, WORD PTR tv81[ebp]
  000b9	85 d2		 test	 edx, edx
  000bb	74 02		 je	 SHORT $L187134
  000bd	eb e3		 jmp	 SHORT $L187131
$L187134:

; 148  : 
; 149  : 		// Skip caption string
; 150  : 		while (*pw++);

  000bf	8b 45 f8	 mov	 eax, DWORD PTR _pw$[ebp]
  000c2	66 8b 08	 mov	 cx, WORD PTR [eax]
  000c5	66 89 4d ee	 mov	 WORD PTR tv85[ebp], cx
  000c9	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  000cc	83 c2 02	 add	 edx, 2
  000cf	89 55 f8	 mov	 DWORD PTR _pw$[ebp], edx
  000d2	0f b7 45 ee	 movzx	 eax, WORD PTR tv85[ebp]
  000d6	85 c0		 test	 eax, eax
  000d8	74 02		 je	 SHORT $L187135
  000da	eb e3		 jmp	 SHORT $L187134
$L187135:

; 151  : 
; 152  : 		// If we have DS_SETFONT, there is extra font information which we must now skip
; 153  : 		if (dwStyle & DS_SETFONT)

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  000df	83 e1 40	 and	 ecx, 64			; 00000040H
  000e2	74 37		 je	 SHORT $L187136

; 154  : 		{
; 155  : 			// If it is a regular DLGTEMPLATE there is only a short for the point size
; 156  : 			// and a string specifying the font (typefacename).  If this is a DLGTEMPLATEEX
; 157  : 			// then there is also the font weight, and bItalic which must be skipped
; 158  : 			if (bDialogEx)

  000e4	83 7d fc 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  000e8	74 0b		 je	 SHORT $L187137

; 159  : 				pw += 3;			// Skip font size, weight, (italic, charset)

  000ea	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  000ed	83 c2 06	 add	 edx, 6
  000f0	89 55 f8	 mov	 DWORD PTR _pw$[ebp], edx

; 160  : 			else

  000f3	eb 09		 jmp	 SHORT $L187140
$L187137:

; 161  : 				pw += 1;			// Skip font size

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _pw$[ebp]
  000f8	83 c0 02	 add	 eax, 2
  000fb	89 45 f8	 mov	 DWORD PTR _pw$[ebp], eax
$L187140:

; 162  : 			while (*pw++);			// Skip typeface name

  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  00101	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00104	66 89 55 ec	 mov	 WORD PTR tv94[ebp], dx
  00108	8b 45 f8	 mov	 eax, DWORD PTR _pw$[ebp]
  0010b	83 c0 02	 add	 eax, 2
  0010e	89 45 f8	 mov	 DWORD PTR _pw$[ebp], eax
  00111	0f b7 4d ec	 movzx	 ecx, WORD PTR tv94[ebp]
  00115	85 c9		 test	 ecx, ecx
  00117	74 02		 je	 SHORT $L187136
  00119	eb e3		 jmp	 SHORT $L187140
$L187136:

; 163  : 		}
; 164  : 
; 165  : 		// Dword-align and return
; 166  : 		return (DLGITEMTEMPLATE*)(((DWORD_PTR)pw + 3) & ~3);

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _pw$[ebp]
  0011e	83 c0 03	 add	 eax, 3
  00121	83 e0 fc	 and	 eax, -4			; fffffffcH

; 167  : 	}

  00124	83 c4 14	 add	 esp, 20			; 00000014H
  00127	3b ec		 cmp	 ebp, esp
  00129	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ENDP ; helper::FindFirstDlgItem
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z
_TEXT	SEGMENT
tv78 = -12						; size = 2
tv71 = -10						; size = 2
_cbExtra$ = -8						; size = 2
_pw$ = -4						; size = 4
_pItem$ = 8						; size = 4
_bDialogEx$ = 12					; size = 4
?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z PROC NEAR ; helper::FindNextDlgItem, COMDAT

; 172  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 173  : 		WORD* pw;
; 174  : 
; 175  : 		// First skip fixed size header information, size of which depends
; 176  : 		// if this is a DLGITEMTEMPLATE or DLGITEMTEMPLATEEX
; 177  : 		if (bDialogEx)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  0001f	74 0b		 je	 SHORT $L187146

; 178  : 			pw = (WORD*)((DLGITEMTEMPLATEEX*)pItem + 1);

  00021	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00024	83 c0 18	 add	 eax, 24			; 00000018H
  00027	89 45 fc	 mov	 DWORD PTR _pw$[ebp], eax

; 179  : 		else

  0002a	eb 09		 jmp	 SHORT $L187149
$L187146:

; 180  : 			pw = (WORD*)(pItem + 1);

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  0002f	83 c1 12	 add	 ecx, 18			; 00000012H
  00032	89 4d fc	 mov	 DWORD PTR _pw$[ebp], ecx
$L187149:

; 181  : 
; 182  : 		if (*pw == 0xFFFF)			// Skip class name ordinal or string

  00035	8b 55 fc	 mov	 edx, DWORD PTR _pw$[ebp]
  00038	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0003b	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00040	75 0b		 jne	 SHORT $L187154

; 183  : 			pw += 2; // (WORDs)

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _pw$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d fc	 mov	 DWORD PTR _pw$[ebp], ecx

; 184  : 		else

  0004b	eb 1d		 jmp	 SHORT $L187152
$L187154:

; 185  : 			while (*pw++);

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _pw$[ebp]
  00050	66 8b 02	 mov	 ax, WORD PTR [edx]
  00053	66 89 45 f6	 mov	 WORD PTR tv71[ebp], ax
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _pw$[ebp]
  0005a	83 c1 02	 add	 ecx, 2
  0005d	89 4d fc	 mov	 DWORD PTR _pw$[ebp], ecx
  00060	0f b7 55 f6	 movzx	 edx, WORD PTR tv71[ebp]
  00064	85 d2		 test	 edx, edx
  00066	74 02		 je	 SHORT $L187152
  00068	eb e3		 jmp	 SHORT $L187154
$L187152:

; 186  : 
; 187  : 		if (*pw == 0xFFFF)			// Skip title ordinal or string

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _pw$[ebp]
  0006d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00070	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00076	75 0b		 jne	 SHORT $L187159

; 188  : 			pw += 2; // (WORDs)

  00078	8b 55 fc	 mov	 edx, DWORD PTR _pw$[ebp]
  0007b	83 c2 04	 add	 edx, 4
  0007e	89 55 fc	 mov	 DWORD PTR _pw$[ebp], edx

; 189  : 		else

  00081	eb 1d		 jmp	 SHORT $L187157
$L187159:

; 190  : 			while (*pw++);

  00083	8b 45 fc	 mov	 eax, DWORD PTR _pw$[ebp]
  00086	66 8b 08	 mov	 cx, WORD PTR [eax]
  00089	66 89 4d f4	 mov	 WORD PTR tv78[ebp], cx
  0008d	8b 55 fc	 mov	 edx, DWORD PTR _pw$[ebp]
  00090	83 c2 02	 add	 edx, 2
  00093	89 55 fc	 mov	 DWORD PTR _pw$[ebp], edx
  00096	0f b7 45 f4	 movzx	 eax, WORD PTR tv78[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	74 02		 je	 SHORT $L187157
  0009e	eb e3		 jmp	 SHORT $L187159
$L187157:

; 191  : 
; 192  : 		WORD cbExtra = *pw++;		// Skip extra data

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _pw$[ebp]
  000a3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  000a6	66 89 55 f8	 mov	 WORD PTR _cbExtra$[ebp], dx
  000aa	8b 45 fc	 mov	 eax, DWORD PTR _pw$[ebp]
  000ad	83 c0 02	 add	 eax, 2
  000b0	89 45 fc	 mov	 DWORD PTR _pw$[ebp], eax

; 193  : 
; 194  : 		// cbExtra includes the size WORD in DIALOG resource.
; 195  : 		if (cbExtra != 0 && !bDialogEx)

  000b3	0f b7 4d f8	 movzx	 ecx, WORD PTR _cbExtra$[ebp]
  000b7	85 c9		 test	 ecx, ecx
  000b9	74 11		 je	 SHORT $L187162
  000bb	83 7d 0c 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  000bf	75 0b		 jne	 SHORT $L187162

; 196  : 			cbExtra -= 2;

  000c1	0f b7 55 f8	 movzx	 edx, WORD PTR _cbExtra$[ebp]
  000c5	83 ea 02	 sub	 edx, 2
  000c8	66 89 55 f8	 mov	 WORD PTR _cbExtra$[ebp], dx
$L187162:

; 197  : 
; 198  : 		// Dword-align and return
; 199  : 		return (DLGITEMTEMPLATE*)(((DWORD_PTR)pw + cbExtra + 3) & ~3);

  000cc	0f b7 45 f8	 movzx	 eax, WORD PTR _cbExtra$[ebp]
  000d0	8b 4d fc	 mov	 ecx, DWORD PTR _pw$[ebp]
  000d3	8d 44 01 03	 lea	 eax, DWORD PTR [ecx+eax+3]
  000d7	83 e0 fc	 and	 eax, -4			; fffffffcH

; 200  : 	}

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ENDP ; helper::FindNextDlgItem
_TEXT	ENDS
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__GetTextMetricsA@8:NEAR
EXTRN	__imp__GetTextExtentPointA@16:NEAR
;	COMDAT ?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA
_DATA	SEGMENT
?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA DD FLAT:$SG187185 ; `getptsize'::`2'::sym
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_t$ = -80						; size = 56
_sz$ = -16						; size = 8
_oldfont$ = -4						; size = 4
_dc$ = 8						; size = 4
_font$ = 12						; size = 4
_pSize$ = 16						; size = 4
?getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z PROC NEAR ; getptsize

; 214  : {

  006e0	55		 push	 ebp
  006e1	8b ec		 mov	 ebp, esp
  006e3	83 ec 54	 sub	 esp, 84			; 00000054H
  006e6	56		 push	 esi
  006e7	57		 push	 edi
  006e8	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  006eb	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  006f0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  006f5	f3 ab		 rep stosd

; 215  :     HFONT oldfont = 0;

  006f7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _oldfont$[ebp], 0

; 216  :     static char *sym = "abcdefghijklmnopqrstuvwxyz"
; 217  :                        "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
; 218  :     SIZE sz;
; 219  :     TEXTMETRICA t;      
; 220  :     oldfont = (HFONT)SelectObject(dc,font);

  006fe	8b f4		 mov	 esi, esp
  00700	8b 45 0c	 mov	 eax, DWORD PTR _font$[ebp]
  00703	8b 08		 mov	 ecx, DWORD PTR [eax]
  00705	51		 push	 ecx
  00706	8b 55 08	 mov	 edx, DWORD PTR _dc$[ebp]
  00709	8b 02		 mov	 eax, DWORD PTR [edx]
  0070b	50		 push	 eax
  0070c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00712	3b f4		 cmp	 esi, esp
  00714	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00719	89 45 fc	 mov	 DWORD PTR _oldfont$[ebp], eax

; 221  :     GetTextMetricsA(dc,&t);

  0071c	8b f4		 mov	 esi, esp
  0071e	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  00721	51		 push	 ecx
  00722	8b 55 08	 mov	 edx, DWORD PTR _dc$[ebp]
  00725	8b 02		 mov	 eax, DWORD PTR [edx]
  00727	50		 push	 eax
  00728	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextMetricsA@8
  0072e	3b f4		 cmp	 esi, esp
  00730	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 222  :     GetTextExtentPointA(dc,sym, 52, &sz);

  00735	8b f4		 mov	 esi, esp
  00737	8d 4d f0	 lea	 ecx, DWORD PTR _sz$[ebp]
  0073a	51		 push	 ecx
  0073b	6a 34		 push	 52			; 00000034H
  0073d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA
  00743	52		 push	 edx
  00744	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00747	8b 08		 mov	 ecx, DWORD PTR [eax]
  00749	51		 push	 ecx
  0074a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPointA@16
  00750	3b f4		 cmp	 esi, esp
  00752	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 223  :     pSize->cy = t.tmHeight;

  00757	8b 55 10	 mov	 edx, DWORD PTR _pSize$[ebp]
  0075a	8b 45 b0	 mov	 eax, DWORD PTR _t$[ebp]
  0075d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 224  :     pSize->cx = (sz.cx / 26 + 1) / 2;

  00760	8b 45 f0	 mov	 eax, DWORD PTR _sz$[ebp]
  00763	99		 cdq
  00764	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00769	f7 f9		 idiv	 ecx
  0076b	83 c0 01	 add	 eax, 1
  0076e	99		 cdq
  0076f	2b c2		 sub	 eax, edx
  00771	d1 f8		 sar	 eax, 1
  00773	8b 55 10	 mov	 edx, DWORD PTR _pSize$[ebp]
  00776	89 02		 mov	 DWORD PTR [edx], eax

; 225  :     SelectObject(dc,oldfont);    

  00778	8b f4		 mov	 esi, esp
  0077a	8b 45 fc	 mov	 eax, DWORD PTR _oldfont$[ebp]
  0077d	50		 push	 eax
  0077e	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00781	8b 11		 mov	 edx, DWORD PTR [ecx]
  00783	52		 push	 edx
  00784	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  0078a	3b f4		 cmp	 esi, esp
  0078c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 226  : }

  00791	52		 push	 edx
  00792	8b cd		 mov	 ecx, ebp
  00794	50		 push	 eax
  00795	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187805
  0079b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007a0	58		 pop	 eax
  007a1	5a		 pop	 edx
  007a2	5f		 pop	 edi
  007a3	5e		 pop	 esi
  007a4	83 c4 54	 add	 esp, 84			; 00000054H
  007a7	3b ec		 cmp	 ebp, esp
  007a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007ae	8b e5		 mov	 esp, ebp
  007b0	5d		 pop	 ebp
  007b1	c3		 ret	 0
$L187805:
  007b2	02 00 00 00	 DD	 2
  007b6	00 00 00 00	 DD	 $L187804
$L187804:
  007ba	f0 ff ff ff	 DD	 -16			; fffffff0H
  007be	08 00 00 00	 DD	 8
  007c2	00 00 00 00	 DD	 $L187802
  007c6	b0 ff ff ff	 DD	 -80			; ffffffb0H
  007ca	38 00 00 00	 DD	 56			; 00000038H
  007ce	00 00 00 00	 DD	 $L187803
$L187803:
  007d2	74		 DB	 116			; 00000074H
  007d3	00		 DB	 0
$L187802:
  007d4	73		 DB	 115			; 00000073H
  007d5	7a		 DB	 122			; 0000007aH
  007d6	00		 DB	 0
?getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z ENDP ; getptsize
_TEXT	ENDS
EXTRN	__imp__wcslen:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv85 = -20						; size = 4
tv71 = -16						; size = 4
_dialogex$ = -12					; size = 4
_rstyle$ = -8						; size = 4
_p$ = -4						; size = 4
_data$ = 8						; size = 4
_result$ = 12						; size = 4
?querydialogdata@@YAXPBDPAUdialogdata_t@@@Z PROC NEAR	; querydialogdata

; 232  : {

  007e0	55		 push	 ebp
  007e1	8b ec		 mov	 ebp, esp
  007e3	83 ec 14	 sub	 esp, 20			; 00000014H
  007e6	56		 push	 esi
  007e7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  007ec	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  007ef	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  007f2	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  007f5	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  007f8	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 233  :     WORD *p = (WORD *)data; 

  007fb	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  007fe	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 234  :     unsigned long rstyle = dword_at(p); 

  00801	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00804	8b 11		 mov	 edx, DWORD PTR [ecx]
  00806	89 55 f8	 mov	 DWORD PTR _rstyle$[ebp], edx

; 235  :     int dialogex=0;

  00809	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dialogex$[ebp], 0

; 236  : 
; 237  :     p += 2;

  00810	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00813	83 c0 04	 add	 eax, 4
  00816	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 238  : 
; 239  :     if (rstyle == 0xffff0001)

  00819	81 7d f8 01 00
	ff ff		 cmp	 DWORD PTR _rstyle$[ebp], -65535 ; ffff0001H
  00820	75 23		 jne	 SHORT $L187198

; 240  :     {
; 241  :         p+=4;

  00822	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00825	83 c1 08	 add	 ecx, 8
  00828	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 242  :         rstyle=dword_at(p);

  0082b	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0082e	8b 02		 mov	 eax, DWORD PTR [edx]
  00830	89 45 f8	 mov	 DWORD PTR _rstyle$[ebp], eax

; 243  :         p+=2;

  00833	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00836	83 c1 04	 add	 ecx, 4
  00839	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 244  :         dialogex=1;

  0083c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dialogex$[ebp], 1

; 245  :     }else

  00843	eb 09		 jmp	 SHORT $L187200
$L187198:

; 246  :         p+=2;

  00845	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00848	83 c2 04	 add	 edx, 4
  0084b	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
$L187200:

; 247  : 
; 248  :     p+=5;

  0084e	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00851	83 c0 0a	 add	 eax, 10			; 0000000aH
  00854	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 249  : 
; 250  :     // Skip menu
; 251  :     switch(word_at(p))

  00857	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0085a	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0085d	89 55 f0	 mov	 DWORD PTR tv71[ebp], edx
  00860	83 7d f0 00	 cmp	 DWORD PTR tv71[ebp], 0
  00864	74 0b		 je	 SHORT $L187206
  00866	81 7d f0 ff ff
	00 00		 cmp	 DWORD PTR tv71[ebp], 65535 ; 0000ffffH
  0086d	74 17		 je	 SHORT $L187207
  0086f	eb 2a		 jmp	 SHORT $L187208
$L187206:

; 252  :     {
; 253  :     case 0x0000: // no menu name
; 254  :         result->has_menu=0;

  00871	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00874	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 255  :         p++;

  0087b	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0087e	83 c1 02	 add	 ecx, 2
  00881	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 256  :         break;

  00884	eb 3f		 jmp	 SHORT $L187203
$L187207:

; 257  :     case 0xffff: // has menu        
; 258  :         result->has_menu=1;

  00886	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  00889	c7 42 04 01 00
	00 00		 mov	 DWORD PTR [edx+4], 1

; 259  :         p += 2; 

  00890	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00893	83 c0 04	 add	 eax, 4
  00896	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 260  :         break;

  00899	eb 2a		 jmp	 SHORT $L187203
$L187208:

; 261  :     default:     // has menu
; 262  :         result->has_menu=1;     

  0089b	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  0089e	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 263  :         p+=wcslen((LPCWSTR)p)+1;

  008a5	8b f4		 mov	 esi, esp
  008a7	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  008aa	52		 push	 edx
  008ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  008b1	83 c4 04	 add	 esp, 4
  008b4	3b f4		 cmp	 esi, esp
  008b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008bb	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  008be	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  008c2	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
$L187203:

; 264  :         break;
; 265  :     }    
; 266  : 
; 267  :     // skip class name
; 268  :     switch(word_at(p))

  008c5	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  008c8	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  008cb	89 4d ec	 mov	 DWORD PTR tv85[ebp], ecx
  008ce	83 7d ec 00	 cmp	 DWORD PTR tv85[ebp], 0
  008d2	74 0b		 je	 SHORT $L187215
  008d4	81 7d ec ff ff
	00 00		 cmp	 DWORD PTR tv85[ebp], 65535 ; 0000ffffH
  008db	74 0d		 je	 SHORT $L187216
  008dd	eb 16		 jmp	 SHORT $L187217
$L187215:

; 269  :     {
; 270  :     case 0x0000:
; 271  :         p++;

  008df	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  008e2	83 c2 02	 add	 edx, 2
  008e5	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 272  :         break;

  008e8	eb 2b		 jmp	 SHORT $L187212
$L187216:

; 273  :     case 0xffff:        
; 274  :         p += 2;

  008ea	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  008ed	83 c0 04	 add	 eax, 4
  008f0	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 275  :         break;

  008f3	eb 20		 jmp	 SHORT $L187212
$L187217:

; 276  :     default:
; 277  :         p+=wcslen((LPCWSTR)p)+1;

  008f5	8b f4		 mov	 esi, esp
  008f7	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  008fa	51		 push	 ecx
  008fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00901	83 c4 04	 add	 esp, 4
  00904	3b f4		 cmp	 esi, esp
  00906	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0090b	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0090e	8d 44 42 02	 lea	 eax, DWORD PTR [edx+eax*2+2]
  00912	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax
$L187212:

; 278  :         break;
; 279  :     }
; 280  : 
; 281  :     // skip the caption
; 282  :     p+=wcslen((LPCWSTR)p)+1;

  00915	8b f4		 mov	 esi, esp
  00917	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0091a	51		 push	 ecx
  0091b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00921	83 c4 04	 add	 esp, 4
  00924	3b f4		 cmp	 esi, esp
  00926	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0092b	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0092e	8d 44 42 02	 lea	 eax, DWORD PTR [edx+eax*2+2]
  00932	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 283  : 
; 284  :     // get the font name 
; 285  : 
; 286  :     if (rstyle & DS_SETFONT)

  00935	8b 4d f8	 mov	 ecx, DWORD PTR _rstyle$[ebp]
  00938	83 e1 40	 and	 ecx, 64			; 00000040H
  0093b	0f 84 91 00 00
	00		 je	 $L187220

; 287  :     {
; 288  :         result->pt = word_at(p); p++;

  00941	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00944	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00947	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  0094a	89 01		 mov	 DWORD PTR [ecx], eax
  0094c	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0094f	83 c2 02	 add	 edx, 2
  00952	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 289  :         if (dialogex)

  00955	83 7d f4 00	 cmp	 DWORD PTR _dialogex$[ebp], 0
  00959	74 35		 je	 SHORT $L187222

; 290  :         {
; 291  :             result->weight = word_at(p); p++;

  0095b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0095e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00961	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  00964	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00967	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0096a	83 c0 02	 add	 eax, 2
  0096d	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 292  :             result->italic = LOBYTE(word_at(p)); p++;

  00970	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00973	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00976	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0097c	0f b6 c2	 movzx	 eax, dl
  0097f	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  00982	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00985	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00988	83 c2 02	 add	 edx, 2
  0098b	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 293  :         }else

  0098e	eb 14		 jmp	 SHORT $L187227
$L187222:

; 294  :         {
; 295  :             result->weight = FW_DONTCARE;

  00990	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00993	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 296  :             result->italic = FALSE;

  0099a	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  0099d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L187227:

; 297  :         }
; 298  :         result->faceName = (LPCWSTR)p;              

  009a4	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  009a7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  009aa	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 299  :         p += wcslen( result->faceName ) + 1;

  009ad	8b f4		 mov	 esi, esp
  009af	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  009b2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  009b5	52		 push	 edx
  009b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  009bc	83 c4 04	 add	 esp, 4
  009bf	3b f4		 cmp	 esi, esp
  009c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009c6	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  009c9	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  009cd	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 300  :     }else

  009d0	eb 27		 jmp	 SHORT $L187192
$L187220:

; 301  :     {
; 302  :         result->faceName=L"Tahoma"; // TODO: put system font name here

  009d2	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  009d5	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET FLAT:$SG187230

; 303  :         result->pt=8; // TODO

  009dc	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  009df	c7 01 08 00 00
	00		 mov	 DWORD PTR [ecx], 8

; 304  :         result->weight=FW_NORMAL; // TODO

  009e5	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  009e8	c7 42 08 90 01
	00 00		 mov	 DWORD PTR [edx+8], 400	; 00000190H

; 305  :         result->italic=FALSE; // TODO

  009ef	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  009f2	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$L187192:

; 306  :     }
; 307  : }

  009f9	5e		 pop	 esi
  009fa	83 c4 14	 add	 esp, 20			; 00000014H
  009fd	3b ec		 cmp	 ebp, esp
  009ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a04	8b e5		 mov	 esp, ebp
  00a06	5d		 pop	 ebp
  00a07	c3		 ret	 0
?querydialogdata@@YAXPBDPAUdialogdata_t@@@Z ENDP	; querydialogdata
_TEXT	ENDS
EXTRN	__imp__DeleteObject@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T187808 = -29						; size = 1
_wnd$ = -28						; size = 4
_t$ = -24						; size = 4
_item$ = -20						; size = 4
_lpDialogTemplate$ = -16				; size = 4
_hDialogTemplate$ = -12					; size = 4
_hResource$ = -8					; size = 4
_this$ = -4						; size = 4
?Detach@CSetDPI@@QAEXXZ PROC NEAR			; CSetDPI::Detach
; _this$ = ecx

; 438  : {

  00a10	55		 push	 ebp
  00a11	8b ec		 mov	 ebp, esp
  00a13	83 ec 20	 sub	 esp, 32			; 00000020H
  00a16	56		 push	 esi
  00a17	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00a1c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00a1f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00a22	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00a25	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00a28	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00a2b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00a2e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00a31	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00a34	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00a37	c6 45 e3 00	 mov	 BYTE PTR $T187808[ebp], 0

; 439  :     if (!hwnd) return;

  00a3b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a3e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00a42	75 05		 jne	 SHORT $L187300
  00a44	e9 2f 02 00 00	 jmp	 $L187299
$L187300:

; 440  :     SendMessage(hwnd, WM_SETFONT, (LPARAM)oldfont, TRUE);

  00a49	8b f4		 mov	 esi, esp
  00a4b	6a 01		 push	 1
  00a4d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a50	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00a53	52		 push	 edx
  00a54	6a 30		 push	 48			; 00000030H
  00a56	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a59	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00a5c	51		 push	 ecx
  00a5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a63	3b f4		 cmp	 esi, esp
  00a65	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 441  : 
; 442  : 
; 443  : 	HRSRC hResource = ::FindResource(inst, MAKEINTRESOURCE(IDD), RT_DIALOG);

  00a6a	8b f4		 mov	 esi, esp
  00a6c	6a 05		 push	 5
  00a6e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a71	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00a74	50		 push	 eax
  00a75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a78	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00a7b	52		 push	 edx
  00a7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  00a82	3b f4		 cmp	 esi, esp
  00a84	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a89	89 45 f8	 mov	 DWORD PTR _hResource$[ebp], eax

; 444  : 	HANDLE hDialogTemplate = LoadResource(inst, hResource);

  00a8c	8b f4		 mov	 esi, esp
  00a8e	8b 45 f8	 mov	 eax, DWORD PTR _hResource$[ebp]
  00a91	50		 push	 eax
  00a92	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a95	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00a98	52		 push	 edx
  00a99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  00a9f	3b f4		 cmp	 esi, esp
  00aa1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aa6	89 45 f4	 mov	 DWORD PTR _hDialogTemplate$[ebp], eax

; 445  : 	helper::DLGTEMPLATEEX *lpDialogTemplate = 
; 446  : 		(helper::DLGTEMPLATEEX *)LockResource(hDialogTemplate);    

  00aa9	8b f4		 mov	 esi, esp
  00aab	8b 45 f4	 mov	 eax, DWORD PTR _hDialogTemplate$[ebp]
  00aae	50		 push	 eax
  00aaf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  00ab5	3b f4		 cmp	 esi, esp
  00ab7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00abc	89 45 f0	 mov	 DWORD PTR _lpDialogTemplate$[ebp], eax

; 447  : 
; 448  : 
; 449  : 	helper::DLGITEMTEMPLATEEX *item=
; 450  : 		(helper::DLGITEMTEMPLATEEX *)helper::FindFirstDlgItem((DLGTEMPLATE *)lpDialogTemplate);

  00abf	8b 4d f0	 mov	 ecx, DWORD PTR _lpDialogTemplate$[ebp]
  00ac2	51		 push	 ecx
  00ac3	e8 00 00 00 00	 call	 ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ; helper::FindFirstDlgItem
  00ac8	83 c4 04	 add	 esp, 4
  00acb	89 45 ec	 mov	 DWORD PTR _item$[ebp], eax

; 451  : 
; 452  : 	int t;
; 453  : 	HWND wnd;
; 454  : 	for(t=0;t<helper::DlgTemplateItemCount((DLGTEMPLATE *)lpDialogTemplate);t++)

  00ace	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  00ad5	eb 09		 jmp	 SHORT $L187318
$L187319:
  00ad7	8b 55 e8	 mov	 edx, DWORD PTR _t$[ebp]
  00ada	83 c2 01	 add	 edx, 1
  00add	89 55 e8	 mov	 DWORD PTR _t$[ebp], edx
$L187318:
  00ae0	8b 45 f0	 mov	 eax, DWORD PTR _lpDialogTemplate$[ebp]
  00ae3	50		 push	 eax
  00ae4	e8 00 00 00 00	 call	 ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ; helper::DlgTemplateItemCount
  00ae9	83 c4 04	 add	 esp, 4
  00aec	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00aef	39 4d e8	 cmp	 DWORD PTR _t$[ebp], ecx
  00af2	0f 8d 30 01 00
	00		 jge	 $L187320

; 455  : 	{
; 456  : 		// OLD IMPLEMENTATION: wnd=GetDlgItem(hwnd,item->id);
; 457  : 
; 458  : 	    // TODO: check if it is the best implementation
; 459  : 	    //       are we sure that controls will preserve the order?
; 460  : 
; 461  : 		if (!t) 

  00af8	83 7d e8 00	 cmp	 DWORD PTR _t$[ebp], 0
  00afc	75 21		 jne	 SHORT $L187321

; 462  : 			wnd=GetWindow(hwnd,GW_CHILD);

  00afe	8b f4		 mov	 esi, esp
  00b00	6a 05		 push	 5
  00b02	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b05	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b08	50		 push	 eax
  00b09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  00b0f	3b f4		 cmp	 esi, esp
  00b11	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b16	c6 45 e3 01	 mov	 BYTE PTR $T187808[ebp], 1
  00b1a	89 45 e4	 mov	 DWORD PTR _wnd$[ebp], eax

; 463  : 		else

  00b1d	eb 2f		 jmp	 SHORT $L187324
$L187321:

; 464  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  00b1f	80 7d e3 00	 cmp	 BYTE PTR $T187808[ebp], 0
  00b23	75 0d		 jne	 SHORT $L187809
  00b25	68 00 00 00 00	 push	 OFFSET FLAT:$L187810
  00b2a	e8 00 00 00 00	 call	 __RTC_UninitUse
  00b2f	83 c4 04	 add	 esp, 4
$L187809:
  00b32	8b f4		 mov	 esi, esp
  00b34	6a 02		 push	 2
  00b36	8b 4d e4	 mov	 ecx, DWORD PTR _wnd$[ebp]
  00b39	51		 push	 ecx
  00b3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  00b40	3b f4		 cmp	 esi, esp
  00b42	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b47	c6 45 e3 01	 mov	 BYTE PTR $T187808[ebp], 1
  00b4b	89 45 e4	 mov	 DWORD PTR _wnd$[ebp], eax
$L187324:

; 465  : 		
; 466  : 		while ((wnd)&&(GetDlgCtrlID(wnd) != item->id)) 

  00b4e	80 7d e3 00	 cmp	 BYTE PTR $T187808[ebp], 0
  00b52	75 0d		 jne	 SHORT $L187811
  00b54	68 00 00 00 00	 push	 OFFSET FLAT:$L187810
  00b59	e8 00 00 00 00	 call	 __RTC_UninitUse
  00b5e	83 c4 04	 add	 esp, 4
$L187811:
  00b61	83 7d e4 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  00b65	74 5f		 je	 SHORT $L187325
  00b67	80 7d e3 00	 cmp	 BYTE PTR $T187808[ebp], 0
  00b6b	75 0d		 jne	 SHORT $L187812
  00b6d	68 00 00 00 00	 push	 OFFSET FLAT:$L187810
  00b72	e8 00 00 00 00	 call	 __RTC_UninitUse
  00b77	83 c4 04	 add	 esp, 4
$L187812:
  00b7a	8b f4		 mov	 esi, esp
  00b7c	8b 55 e4	 mov	 edx, DWORD PTR _wnd$[ebp]
  00b7f	52		 push	 edx
  00b80	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgCtrlID@4
  00b86	3b f4		 cmp	 esi, esp
  00b88	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b8d	8b 4d ec	 mov	 ecx, DWORD PTR _item$[ebp]
  00b90	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00b93	74 31		 je	 SHORT $L187325

; 467  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  00b95	80 7d e3 00	 cmp	 BYTE PTR $T187808[ebp], 0
  00b99	75 0d		 jne	 SHORT $L187813
  00b9b	68 00 00 00 00	 push	 OFFSET FLAT:$L187810
  00ba0	e8 00 00 00 00	 call	 __RTC_UninitUse
  00ba5	83 c4 04	 add	 esp, 4
$L187813:
  00ba8	8b f4		 mov	 esi, esp
  00baa	6a 02		 push	 2
  00bac	8b 55 e4	 mov	 edx, DWORD PTR _wnd$[ebp]
  00baf	52		 push	 edx
  00bb0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  00bb6	3b f4		 cmp	 esi, esp
  00bb8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bbd	c6 45 e3 01	 mov	 BYTE PTR $T187808[ebp], 1
  00bc1	89 45 e4	 mov	 DWORD PTR _wnd$[ebp], eax
  00bc4	eb 88		 jmp	 SHORT $L187324
$L187325:

; 468  : 
; 469  : 		if (!wnd) break;

  00bc6	80 7d e3 00	 cmp	 BYTE PTR $T187808[ebp], 0
  00bca	75 0d		 jne	 SHORT $L187814
  00bcc	68 00 00 00 00	 push	 OFFSET FLAT:$L187810
  00bd1	e8 00 00 00 00	 call	 __RTC_UninitUse
  00bd6	83 c4 04	 add	 esp, 4
$L187814:
  00bd9	83 7d e4 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  00bdd	75 02		 jne	 SHORT $L187326
  00bdf	eb 47		 jmp	 SHORT $L187320
$L187326:

; 470  : 
; 471  :         SendMessage(wnd, WM_SETFONT, (LPARAM)oldfont, TRUE);		

  00be1	80 7d e3 00	 cmp	 BYTE PTR $T187808[ebp], 0
  00be5	75 0d		 jne	 SHORT $L187815
  00be7	68 00 00 00 00	 push	 OFFSET FLAT:$L187810
  00bec	e8 00 00 00 00	 call	 __RTC_UninitUse
  00bf1	83 c4 04	 add	 esp, 4
$L187815:
  00bf4	8b f4		 mov	 esi, esp
  00bf6	6a 01		 push	 1
  00bf8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00bfb	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00bfe	51		 push	 ecx
  00bff	6a 30		 push	 48			; 00000030H
  00c01	8b 55 e4	 mov	 edx, DWORD PTR _wnd$[ebp]
  00c04	52		 push	 edx
  00c05	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00c0b	3b f4		 cmp	 esi, esp
  00c0d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 472  : 		item=(helper::DLGITEMTEMPLATEEX *)helper::FindNextDlgItem((DLGITEMTEMPLATE *)item,TRUE);

  00c12	6a 01		 push	 1
  00c14	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  00c17	50		 push	 eax
  00c18	e8 00 00 00 00	 call	 ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ; helper::FindNextDlgItem
  00c1d	83 c4 08	 add	 esp, 8
  00c20	89 45 ec	 mov	 DWORD PTR _item$[ebp], eax

; 473  : 	}

  00c23	e9 af fe ff ff	 jmp	 $L187319
$L187320:

; 474  : 
; 475  :     UnlockResource(hDialogTemplate);    

  00c28	8b 4d f4	 mov	 ecx, DWORD PTR _hDialogTemplate$[ebp]
  00c2b	51		 push	 ecx
  00c2c	e8 00 00 00 00	 call	 ?UnlockResource@@YGHPAX@Z ; UnlockResource

; 476  :     FreeResource(hDialogTemplate);

  00c31	8b f4		 mov	 esi, esp
  00c33	8b 55 f4	 mov	 edx, DWORD PTR _hDialogTemplate$[ebp]
  00c36	52		 push	 edx
  00c37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4
  00c3d	3b f4		 cmp	 esi, esp
  00c3f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 477  : 
; 478  : 
; 479  :     DeleteObject(font);

  00c44	8b f4		 mov	 esi, esp
  00c46	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c49	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c4c	51		 push	 ecx
  00c4d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  00c53	3b f4		 cmp	 esi, esp
  00c55	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 480  :     hwnd=0;

  00c5a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c5d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 481  :     font=0;

  00c64	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c67	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 482  :     oldfont=0;

  00c6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c71	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L187299:

; 483  : }

  00c78	5e		 pop	 esi
  00c79	83 c4 20	 add	 esp, 32			; 00000020H
  00c7c	3b ec		 cmp	 ebp, esp
  00c7e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c83	8b e5		 mov	 esp, ebp
  00c85	5d		 pop	 ebp
  00c86	c3		 ret	 0
$L187816:
$L187810:
  00c87	77		 DB	 119			; 00000077H
  00c88	6e		 DB	 110			; 0000006eH
  00c89	64		 DB	 100			; 00000064H
  00c8a	00		 DB	 0
?Detach@CSetDPI@@QAEXXZ ENDP				; CSetDPI::Detach
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxv_w32.h
_TEXT	ENDS
;	COMDAT ?UnlockResource@@YGHPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?UnlockResource@@YGHPAX@Z PROC NEAR			; UnlockResource, COMDAT

; 272  : AFX_INLINE int WINAPI UnlockResource(HGLOBAL) { return 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?UnlockResource@@YGHPAX@Z ENDP				; UnlockResource
_TEXT	ENDS
END
