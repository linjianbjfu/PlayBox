; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\PlayedGamePanel\LMCDataMgr.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??0CLMCDataOper@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLMCDataOper@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_tagLMCItemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_tagLMCItemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAU_tagLMCItemInfo@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@ABU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE@V?$allocator@U_tagLMCItemInfo@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEABU_tagLMCItemInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_tagLMCItemInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U_tagLMCItemInfo@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_tagLMCItemInfo@@@std@@YAPAU_tagLMCItemInfo@@IPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_tagLMCItemInfo@@@std@@YAXPAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_tagLMCItemInfo@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@exception@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??0?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
PUBLIC	??0CLMCDataMgr@@QAE@XZ				; CLMCDataMgr::CLMCDataMgr
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\playedgamepanel\lmcdatamgr.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLMCDataMgr@@QAE@XZ PROC NEAR			; CLMCDataMgr::CLMCDataMgr
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >

; 7    : 
; 8    : }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CLMCDataMgr@@QAE@XZ ENDP				; CLMCDataMgr::CLMCDataMgr
_TEXT	ENDS
PUBLIC	??1?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::~vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
PUBLIC	??1CLMCDataMgr@@QAE@XZ				; CLMCDataMgr::~CLMCDataMgr
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLMCDataMgr@@QAE@XZ PROC NEAR			; CLMCDataMgr::~CLMCDataMgr
; _this$ = ecx

; 11   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	51		 push	 ecx
  00034	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0003b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 
; 13   : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ??1?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::~vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
  00046	83 c4 04	 add	 esp, 4
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??1CLMCDataMgr@@QAE@XZ ENDP				; CLMCDataMgr::~CLMCDataMgr
_TEXT	ENDS
PUBLIC	??0_tagLMCItemInfo@@QAE@XZ			; _tagLMCItemInfo::_tagLMCItemInfo
PUBLIC	??1_tagLMCItemInfo@@QAE@XZ			; _tagLMCItemInfo::~_tagLMCItemInfo
PUBLIC	?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
PUBLIC	?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::push_back
PUBLIC	?InsertItem@CLMCDataMgr@@QAEHPAVCDibBitmap@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CLMCDataMgr::InsertItem
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
xdata$x	SEGMENT
$T189543 DD	0ffffffffH
	DD	FLAT:$L189526
	DD	00H
	DD	FLAT:$L189527
	DD	01H
	DD	FLAT:$L189528
	DD	02H
	DD	FLAT:$L189529
$T189533 DD	019930520H
	DD	04H
	DD	FLAT:$T189543
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T189525 = -100						; size = 4
_lmci$ = -92						; size = 68
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pImg$ = 8						; size = 4
_strItemName$ = 12					; size = 4
_strdetail$ = 16					; size = 4
_strGID$ = 20						; size = 28
_blSel$ = 48						; size = 4
?InsertItem@CLMCDataMgr@@QAEHPAVCDibBitmap@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC NEAR ; CLMCDataMgr::InsertItem
; _this$ = ecx

; 16   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	6a ff		 push	 -1
  00065	68 00 00 00 00	 push	 __ehhandler$?InsertItem@CLMCDataMgr@@QAEHPAVCDibBitmap@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0006a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00070	50		 push	 eax
  00071	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00078	83 ec 58	 sub	 esp, 88			; 00000058H
  0007b	56		 push	 esi
  0007c	57		 push	 edi
  0007d	51		 push	 ecx
  0007e	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00081	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00086	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0008b	f3 ab		 rep stosd
  0008d	59		 pop	 ecx
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00093	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00096	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00099	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 17   : 	LMC_ItemInfo lmci;

  000a0	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  000a3	e8 00 00 00 00	 call	 ??0_tagLMCItemInfo@@QAE@XZ
  000a8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 18   : 	lmci.strGID = strGID;

  000ac	8b f4		 mov	 esi, esp
  000ae	8d 45 14	 lea	 eax, DWORD PTR _strGID$[ebp]
  000b1	50		 push	 eax
  000b2	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 19   : 	lmci.iIndex = m_vItem.size();

  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  000ca	89 45 c0	 mov	 DWORD PTR _lmci$[ebp+28], eax

; 20   : 	lmci.blSel = blSel;

  000cd	8b 4d 30	 mov	 ecx, DWORD PTR _blSel$[ebp]
  000d0	89 4d c4	 mov	 DWORD PTR _lmci$[ebp+32], ecx

; 21   : 	lmci.pImg = pImg;

  000d3	8b 55 08	 mov	 edx, DWORD PTR _pImg$[ebp]
  000d6	89 55 c8	 mov	 DWORD PTR _lmci$[ebp+36], edx

; 22   : 	lmci.strItemName = strItemName;

  000d9	8b f4		 mov	 esi, esp
  000db	8d 45 0c	 lea	 eax, DWORD PTR _strItemName$[ebp]
  000de	50		 push	 eax
  000df	8d 4d cc	 lea	 ecx, DWORD PTR _lmci$[ebp+40]
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 23   : 	lmci.strItemdDetailinfo = strdetail;

  000ef	8b f4		 mov	 esi, esp
  000f1	8d 4d 10	 lea	 ecx, DWORD PTR _strdetail$[ebp]
  000f4	51		 push	 ecx
  000f5	8d 4d d0	 lea	 ecx, DWORD PTR _lmci$[ebp+44]
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000fe	3b f4		 cmp	 esi, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 24   : 	m_vItem.push_back(lmci);

  00105	8d 55 a4	 lea	 edx, DWORD PTR _lmci$[ebp]
  00108	52		 push	 edx
  00109	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	e8 00 00 00 00	 call	 ?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::push_back

; 25   : 	return lmci.iIndex;

  00111	8b 45 c0	 mov	 eax, DWORD PTR _lmci$[ebp+28]
  00114	89 45 9c	 mov	 DWORD PTR $T189525[ebp], eax
  00117	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0011b	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  0011e	e8 00 00 00 00	 call	 ??1_tagLMCItemInfo@@QAE@XZ
  00123	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00127	8b f4		 mov	 esi, esp
  00129	8d 4d 0c	 lea	 ecx, DWORD PTR _strItemName$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00132	3b f4		 cmp	 esi, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00139	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0013d	8b f4		 mov	 esi, esp
  0013f	8d 4d 10	 lea	 ecx, DWORD PTR _strdetail$[ebp]
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00156	8b f4		 mov	 esi, esp
  00158	8d 4d 14	 lea	 ecx, DWORD PTR _strGID$[ebp]
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	8b 45 9c	 mov	 eax, DWORD PTR $T189525[ebp]

; 26   : }

  0016b	52		 push	 edx
  0016c	8b cd		 mov	 ecx, ebp
  0016e	50		 push	 eax
  0016f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189540
  00175	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017a	58		 pop	 eax
  0017b	5a		 pop	 edx
  0017c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00186	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	83 c4 64	 add	 esp, 100		; 00000064H
  00193	3b ec		 cmp	 ebp, esp
  00195	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c2 2c 00	 ret	 44			; 0000002cH
$L189540:
  001a0	01 00 00 00	 DD	 1
  001a4	00 00 00 00	 DD	 $L189539
$L189539:
  001a8	a4 ff ff ff	 DD	 -92			; ffffffa4H
  001ac	44 00 00 00	 DD	 68			; 00000044H
  001b0	00 00 00 00	 DD	 $L189534
$L189534:
  001b4	6c		 DB	 108			; 0000006cH
  001b5	6d		 DB	 109			; 0000006dH
  001b6	63		 DB	 99			; 00000063H
  001b7	69		 DB	 105			; 00000069H
  001b8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L189526:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d 14	 lea	 ecx, DWORD PTR _strGID$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189527:
  00012	8b f4		 mov	 esi, esp
  00014	8d 4d 10	 lea	 ecx, DWORD PTR _strdetail$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189528:
  00024	8b f4		 mov	 esi, esp
  00026	8d 4d 0c	 lea	 ecx, DWORD PTR _strItemName$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0002f	3b f4		 cmp	 esi, esp
  00031	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189529:
  00036	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1_tagLMCItemInfo@@QAE@XZ
__ehhandler$?InsertItem@CLMCDataMgr@@QAEHPAVCDibBitmap@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189533
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertItem@CLMCDataMgr@@QAEHPAVCDibBitmap@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; CLMCDataMgr::InsertItem
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_tagLMCItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_tagLMCItemInfo@@QAE@XZ PROC NEAR			; _tagLMCItemInfo::~_tagLMCItemInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 30	 add	 ecx, 48			; 00000030H
  00015	8b f4		 mov	 esi, esp
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0002a	8b f4		 mov	 esi, esp
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 28	 add	 ecx, 40			; 00000028H
  0003f	8b f4		 mov	 esi, esp
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b f4		 mov	 esi, esp
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_tagLMCItemInfo@@QAE@XZ ENDP				; _tagLMCItemInfo::~_tagLMCItemInfo
_TEXT	ENDS
EXTRN	??0CRect@@QAE@XZ:NEAR				; CRect::CRect
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_tagLMCItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_tagLMCItemInfo@@QAE@XZ PROC NEAR			; _tagLMCItemInfo::_tagLMCItemInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001a	3b f4		 cmp	 esi, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 28	 add	 ecx, 40			; 00000028H
  00027	8b f4		 mov	 esi, esp
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0002f	3b f4		 cmp	 esi, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0003c	8b f4		 mov	 esi, esp
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 30	 add	 ecx, 48			; 00000030H
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	83 c1 34	 add	 ecx, 52			; 00000034H
  00066	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	5e		 pop	 esi
  0006f	83 c4 04	 add	 esp, 4
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
??0_tagLMCItemInfo@@QAE@XZ ENDP				; _tagLMCItemInfo::_tagLMCItemInfo
_TEXT	ENDS
PUBLIC	?InsertItem@CLMCDataMgr@@QAEHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@00V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CLMCDataMgr::InsertItem
EXTRN	__imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADXZ:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
xdata$x	SEGMENT
$T189570 DD	0ffffffffH
	DD	FLAT:$L189558
	DD	00H
	DD	FLAT:$L189559
	DD	01H
	DD	FLAT:$L189560
	DD	02H
	DD	FLAT:$L189561
	DD	03H
	DD	FLAT:$L189562
$T189564 DD	019930520H
	DD	05H
	DD	FLAT:$T189570
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T189557 = -100						; size = 4
_lmci$ = -92						; size = 68
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_strImgPath$ = 8					; size = 4
_strItemName$ = 12					; size = 4
_strdetail$ = 16					; size = 4
_strGID$ = 20						; size = 28
_blSel$ = 48						; size = 4
?InsertItem@CLMCDataMgr@@QAEHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@00V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC NEAR ; CLMCDataMgr::InsertItem
; _this$ = ecx

; 29   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	6a ff		 push	 -1
  001c5	68 00 00 00 00	 push	 __ehhandler$?InsertItem@CLMCDataMgr@@QAEHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@00V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  001ca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  001d0	50		 push	 eax
  001d1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  001d8	83 ec 58	 sub	 esp, 88			; 00000058H
  001db	56		 push	 esi
  001dc	57		 push	 edi
  001dd	51		 push	 ecx
  001de	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  001e1	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  001e6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  001eb	f3 ab		 rep stosd
  001ed	59		 pop	 ecx
  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001f3	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  001f6	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  001f9	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 30   : 	LMC_ItemInfo lmci;

  00200	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  00203	e8 00 00 00 00	 call	 ??0_tagLMCItemInfo@@QAE@XZ
  00208	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 31   : 	lmci.strGID = strGID;

  0020c	8b f4		 mov	 esi, esp
  0020e	8d 45 14	 lea	 eax, DWORD PTR _strGID$[ebp]
  00211	50		 push	 eax
  00212	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0021b	3b f4		 cmp	 esi, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 	lmci.iIndex = m_vItem.size();

  00222	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00225	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  0022a	89 45 c0	 mov	 DWORD PTR _lmci$[ebp+28], eax

; 33   : 	lmci.strImgPath = strImgPath.GetBuffer();

  0022d	8b f4		 mov	 esi, esp
  0022f	8d 4d 08	 lea	 ecx, DWORD PTR _strImgPath$[ebp]
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADXZ
  00238	3b f4		 cmp	 esi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023f	8b f4		 mov	 esi, esp
  00241	50		 push	 eax
  00242	8d 4d d4	 lea	 ecx, DWORD PTR _lmci$[ebp+48]
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  0024b	3b f4		 cmp	 esi, esp
  0024d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 34   : 	lmci.strItemName = strItemName;

  00252	8b f4		 mov	 esi, esp
  00254	8d 4d 0c	 lea	 ecx, DWORD PTR _strItemName$[ebp]
  00257	51		 push	 ecx
  00258	8d 4d cc	 lea	 ecx, DWORD PTR _lmci$[ebp+40]
  0025b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00261	3b f4		 cmp	 esi, esp
  00263	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 	lmci.strItemdDetailinfo = strdetail;

  00268	8b f4		 mov	 esi, esp
  0026a	8d 55 10	 lea	 edx, DWORD PTR _strdetail$[ebp]
  0026d	52		 push	 edx
  0026e	8d 4d d0	 lea	 ecx, DWORD PTR _lmci$[ebp+44]
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00277	3b f4		 cmp	 esi, esp
  00279	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 36   : 	lmci.blSel = blSel;

  0027e	8b 45 30	 mov	 eax, DWORD PTR _blSel$[ebp]
  00281	89 45 c4	 mov	 DWORD PTR _lmci$[ebp+32], eax

; 37   : 	m_vItem.push_back(lmci);

  00284	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  00287	51		 push	 ecx
  00288	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0028b	e8 00 00 00 00	 call	 ?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::push_back

; 38   : 	return lmci.iIndex;

  00290	8b 55 c0	 mov	 edx, DWORD PTR _lmci$[ebp+28]
  00293	89 55 9c	 mov	 DWORD PTR $T189557[ebp], edx
  00296	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0029a	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  0029d	e8 00 00 00 00	 call	 ??1_tagLMCItemInfo@@QAE@XZ
  002a2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002a6	8b f4		 mov	 esi, esp
  002a8	8d 4d 08	 lea	 ecx, DWORD PTR _strImgPath$[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002bc	8b f4		 mov	 esi, esp
  002be	8d 4d 0c	 lea	 ecx, DWORD PTR _strItemName$[ebp]
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002c7	3b f4		 cmp	 esi, esp
  002c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ce	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002d2	8b f4		 mov	 esi, esp
  002d4	8d 4d 10	 lea	 ecx, DWORD PTR _strdetail$[ebp]
  002d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002dd	3b f4		 cmp	 esi, esp
  002df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002eb	8b f4		 mov	 esi, esp
  002ed	8d 4d 14	 lea	 ecx, DWORD PTR _strGID$[ebp]
  002f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002f6	3b f4		 cmp	 esi, esp
  002f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002fd	8b 45 9c	 mov	 eax, DWORD PTR $T189557[ebp]

; 39   : }

  00300	52		 push	 edx
  00301	8b cd		 mov	 ecx, ebp
  00303	50		 push	 eax
  00304	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189569
  0030a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0030f	58		 pop	 eax
  00310	5a		 pop	 edx
  00311	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00314	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0031b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00323	5f		 pop	 edi
  00324	5e		 pop	 esi
  00325	83 c4 64	 add	 esp, 100		; 00000064H
  00328	3b ec		 cmp	 ebp, esp
  0032a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032f	8b e5		 mov	 esp, ebp
  00331	5d		 pop	 ebp
  00332	c2 2c 00	 ret	 44			; 0000002cH
$L189569:
  00335	01 00 00 00	 DD	 1
  00339	00 00 00 00	 DD	 $L189568
$L189568:
  0033d	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00341	44 00 00 00	 DD	 68			; 00000044H
  00345	00 00 00 00	 DD	 $L189565
$L189565:
  00349	6c		 DB	 108			; 0000006cH
  0034a	6d		 DB	 109			; 0000006dH
  0034b	63		 DB	 99			; 00000063H
  0034c	69		 DB	 105			; 00000069H
  0034d	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L189558:
  00048	8b f4		 mov	 esi, esp
  0004a	8d 4d 14	 lea	 ecx, DWORD PTR _strGID$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00053	3b f4		 cmp	 esi, esp
  00055	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189559:
  0005a	8b f4		 mov	 esi, esp
  0005c	8d 4d 10	 lea	 ecx, DWORD PTR _strdetail$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00065	3b f4		 cmp	 esi, esp
  00067	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189560:
  0006c	8b f4		 mov	 esi, esp
  0006e	8d 4d 0c	 lea	 ecx, DWORD PTR _strItemName$[ebp]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00077	3b f4		 cmp	 esi, esp
  00079	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189561:
  0007e	8b f4		 mov	 esi, esp
  00080	8d 4d 08	 lea	 ecx, DWORD PTR _strImgPath$[ebp]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00089	3b f4		 cmp	 esi, esp
  0008b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189562:
  00090	8d 4d a4	 lea	 ecx, DWORD PTR _lmci$[ebp]
  00093	e9 00 00 00 00	 jmp	 ??1_tagLMCItemInfo@@QAE@XZ
__ehhandler$?InsertItem@CLMCDataMgr@@QAEHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@00V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  00098	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189564
  0009d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertItem@CLMCDataMgr@@QAEHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@00V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; CLMCDataMgr::InsertItem
PUBLIC	?clear@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::clear
PUBLIC	?ClearData@CLMCDataMgr@@QAEXXZ			; CLMCDataMgr::ClearData
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearData@CLMCDataMgr@@QAEXXZ PROC NEAR		; CLMCDataMgr::ClearData
; _this$ = ecx

; 42   : {

  00350	55		 push	 ebp
  00351	8b ec		 mov	 ebp, esp
  00353	51		 push	 ecx
  00354	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0035b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 	m_vItem.clear();

  0035e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00361	e8 00 00 00 00	 call	 ?clear@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::clear

; 44   : }

  00366	83 c4 04	 add	 esp, 4
  00369	3b ec		 cmp	 ebp, esp
  0036b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00370	8b e5		 mov	 esp, ebp
  00372	5d		 pop	 ebp
  00373	c3		 ret	 0
?ClearData@CLMCDataMgr@@QAEXXZ ENDP			; CLMCDataMgr::ClearData
_TEXT	ENDS
PUBLIC	??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z ; std::remove_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
PUBLIC	?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin
PUBLIC	?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::end
PUBLIC	?erase@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::erase
PUBLIC	?RemoveItem@CLMCDataMgr@@QAEHH@Z		; CLMCDataMgr::RemoveItem
PUBLIC	??0CLMCDataOper@@QAE@H@Z			; CLMCDataOper::CLMCDataOper
PUBLIC	??1CLMCDataOper@@QAE@XZ				; CLMCDataOper::~CLMCDataOper
xdata$x	SEGMENT
$T189583 DD	0ffffffffH
	DD	FLAT:$L189579
$T189581 DD	019930520H
	DD	01H
	DD	FLAT:$T189583
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv91 = -48						; size = 4
tv92 = -44						; size = 4
$T189578 = -40						; size = 4
$T189577 = -36						; size = 4
$T189576 = -32						; size = 4
$T189575 = -28						; size = 4
$T189574 = -24						; size = 4
$T189573 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iItem$ = 8						; size = 4
?RemoveItem@CLMCDataMgr@@QAEHH@Z PROC NEAR		; CLMCDataMgr::RemoveItem
; _this$ = ecx

; 47   : {

  00380	55		 push	 ebp
  00381	8b ec		 mov	 ebp, esp
  00383	6a ff		 push	 -1
  00385	68 00 00 00 00	 push	 __ehhandler$?RemoveItem@CLMCDataMgr@@QAEHH@Z
  0038a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00390	50		 push	 eax
  00391	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00398	83 ec 24	 sub	 esp, 36			; 00000024H
  0039b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  003a0	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  003a3	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  003a6	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  003a9	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  003ac	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  003af	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  003b2	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  003b5	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  003b8	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  003bb	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	if (iItem>m_vItem.size()) return FALSE;

  003be	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003c1	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  003c6	39 45 08	 cmp	 DWORD PTR _iItem$[ebp], eax
  003c9	76 04		 jbe	 SHORT $L188316
  003cb	33 c0		 xor	 eax, eax
  003cd	eb 79		 jmp	 SHORT $L188315
$L188316:

; 49   : 	m_vItem.erase(remove_if(m_vItem.begin(),m_vItem.end(),CLMCDataOper(iItem)),m_vItem.end());	

  003cf	8b 45 08	 mov	 eax, DWORD PTR _iItem$[ebp]
  003d2	50		 push	 eax
  003d3	8d 4d e8	 lea	 ecx, DWORD PTR $T189574[ebp]
  003d6	e8 00 00 00 00	 call	 ??0CLMCDataOper@@QAE@H@Z ; CLMCDataOper::CLMCDataOper
  003db	89 45 d4	 mov	 DWORD PTR tv92[ebp], eax
  003de	8b 4d d4	 mov	 ecx, DWORD PTR tv92[ebp]
  003e1	89 4d d0	 mov	 DWORD PTR tv91[ebp], ecx
  003e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  003eb	8d 55 ec	 lea	 edx, DWORD PTR $T189573[ebp]
  003ee	52		 push	 edx
  003ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003f2	e8 00 00 00 00	 call	 ?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::end
  003f7	8b 00		 mov	 eax, DWORD PTR [eax]
  003f9	50		 push	 eax
  003fa	8b 4d d0	 mov	 ecx, DWORD PTR tv91[ebp]
  003fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ff	52		 push	 edx
  00400	8d 45 e4	 lea	 eax, DWORD PTR $T189575[ebp]
  00403	50		 push	 eax
  00404	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00407	e8 00 00 00 00	 call	 ?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::end
  0040c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0040e	51		 push	 ecx
  0040f	8d 55 e0	 lea	 edx, DWORD PTR $T189576[ebp]
  00412	52		 push	 edx
  00413	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00416	e8 00 00 00 00	 call	 ?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin
  0041b	8b 00		 mov	 eax, DWORD PTR [eax]
  0041d	50		 push	 eax
  0041e	8d 4d dc	 lea	 ecx, DWORD PTR $T189577[ebp]
  00421	51		 push	 ecx
  00422	e8 00 00 00 00	 call	 ??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z ; std::remove_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
  00427	83 c4 10	 add	 esp, 16			; 00000010H
  0042a	8b 10		 mov	 edx, DWORD PTR [eax]
  0042c	52		 push	 edx
  0042d	8d 45 d8	 lea	 eax, DWORD PTR $T189578[ebp]
  00430	50		 push	 eax
  00431	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00434	e8 00 00 00 00	 call	 ?erase@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::erase
  00439	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00440	8d 4d e8	 lea	 ecx, DWORD PTR $T189574[ebp]
  00443	e8 00 00 00 00	 call	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
$L188315:

; 50   : }

  00448	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0044b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00452	83 c4 30	 add	 esp, 48			; 00000030H
  00455	3b ec		 cmp	 ebp, esp
  00457	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0045c	8b e5		 mov	 esp, ebp
  0045e	5d		 pop	 ebp
  0045f	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L189579:
  000a2	8d 4d e8	 lea	 ecx, DWORD PTR $T189574[ebp]
  000a5	e9 00 00 00 00	 jmp	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
__ehhandler$?RemoveItem@CLMCDataMgr@@QAEHH@Z:
  000aa	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189581
  000af	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?RemoveItem@CLMCDataMgr@@QAEHH@Z ENDP			; CLMCDataMgr::RemoveItem
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\playedgamepanel\lmcdatamgr.h
;	COMDAT ??0CLMCDataOper@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_delItem$ = 8						; size = 4
??0CLMCDataOper@@QAE@H@Z PROC NEAR			; CLMCDataOper::CLMCDataOper, COMDAT
; _this$ = ecx

; 27   : 	CLMCDataOper(int delItem):m_delItem(delItem){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _delItem$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0CLMCDataOper@@QAE@H@Z ENDP				; CLMCDataOper::CLMCDataOper
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLMCDataOper@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLMCDataOper@@QAE@XZ PROC NEAR			; CLMCDataOper::~CLMCDataOper, COMDAT
; _this$ = ecx

; 29   : 	~CLMCDataOper(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1CLMCDataOper@@QAE@XZ ENDP				; CLMCDataOper::~CLMCDataOper
_TEXT	ENDS
PUBLIC	??A?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAU_tagLMCItemInfo@@I@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::operator[]
PUBLIC	?UpDataItem@CLMCDataMgr@@QAEXXZ			; CLMCDataMgr::UpDataItem
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\playedgamepanel\lmcdatamgr.cpp
_TEXT	SEGMENT
_i$188449 = -8						; size = 4
_this$ = -4						; size = 4
?UpDataItem@CLMCDataMgr@@QAEXXZ PROC NEAR		; CLMCDataMgr::UpDataItem
; _this$ = ecx

; 53   : {

  00470	55		 push	 ebp
  00471	8b ec		 mov	 ebp, esp
  00473	83 ec 08	 sub	 esp, 8
  00476	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0047d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00484	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	for (int i=0;i<m_vItem.size();i++)

  00487	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$188449[ebp], 0
  0048e	eb 09		 jmp	 SHORT $L188450
$L188451:
  00490	8b 45 f8	 mov	 eax, DWORD PTR _i$188449[ebp]
  00493	83 c0 01	 add	 eax, 1
  00496	89 45 f8	 mov	 DWORD PTR _i$188449[ebp], eax
$L188450:
  00499	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049c	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  004a1	39 45 f8	 cmp	 DWORD PTR _i$188449[ebp], eax
  004a4	73 14		 jae	 SHORT $L188448

; 55   : 		m_vItem[i].iIndex = i;

  004a6	8b 4d f8	 mov	 ecx, DWORD PTR _i$188449[ebp]
  004a9	51		 push	 ecx
  004aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ad	e8 00 00 00 00	 call	 ??A?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAU_tagLMCItemInfo@@I@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::operator[]
  004b2	8b 55 f8	 mov	 edx, DWORD PTR _i$188449[ebp]
  004b5	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  004b8	eb d6		 jmp	 SHORT $L188451
$L188448:

; 56   : }

  004ba	83 c4 08	 add	 esp, 8
  004bd	3b ec		 cmp	 ebp, esp
  004bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004c4	8b e5		 mov	 esp, ebp
  004c6	5d		 pop	 ebp
  004c7	c3		 ret	 0
?UpDataItem@CLMCDataMgr@@QAEXXZ ENDP			; CLMCDataMgr::UpDataItem
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE@V?$allocator@U_tagLMCItemInfo@@@1@@Z ; std::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
PUBLIC	??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@XZ	; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>
PUBLIC	?_Buy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE_NI@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Buy
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	51		 push	 ecx
  00018	8b cc		 mov	 ecx, esp
  0001a	e8 00 00 00 00	 call	 ??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@XZ ; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ??0?$_Vector_val@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE@V?$allocator@U_tagLMCItemInfo@@@1@@Z ; std::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >

; 300  : 		_Buy(0);

  00027	6a 00		 push	 0
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE_NI@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Buy

; 301  : 		}

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 c4 08	 add	 esp, 8
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??0?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Tidy
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::~vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 388  : 		_Tidy();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Tidy

; 389  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::~vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::iterator
; Function compile flags: /Odt /RTCsu
;	COMDAT ?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin, COMDAT
; _this$ = ecx

; 462  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : 		return (iterator(_Myfirst));

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::iterator
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 464  : 		}

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::end, COMDAT
; _this$ = ecx

; 472  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 473  : 		return (iterator(_Mylast));

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::iterator
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 474  : 		}

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::end
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size, COMDAT
; _this$ = ecx

; 515  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	75 09		 jne	 SHORT $L189593
  00020	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00027	eb 17		 jmp	 SHORT $L189594
$L189593:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00032	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00035	99		 cdq
  00036	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0003b	f7 f9		 idiv	 ecx
  0003d	89 45 f8	 mov	 DWORD PTR tv70[ebp], eax
$L189594:
  00040	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]

; 517  : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+
PUBLIC	??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*
; Function compile flags: /Odt /RTCsu
;	COMDAT ??A?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAU_tagLMCItemInfo@@I@Z
_TEXT	SEGMENT
$T189597 = -12						; size = 4
$T189596 = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAU_tagLMCItemInfo@@I@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::operator[], COMDAT
; _this$ = ecx

; 554  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 555  : 		return (*(begin() + _Pos));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00021	50		 push	 eax
  00022	8d 4d f4	 lea	 ecx, DWORD PTR $T189597[ebp]
  00025	51		 push	 ecx
  00026	8d 55 f8	 lea	 edx, DWORD PTR $T189596[ebp]
  00029	52		 push	 edx
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+
  00039	8b c8		 mov	 ecx, eax
  0003b	e8 00 00 00 00	 call	 ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*

; 556  : 		}

  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??A?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAU_tagLMCItemInfo@@I@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::operator[]
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::capacity
PUBLIC	?insert@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@ABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::insert
PUBLIC	?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ufill
; Function compile flags: /Odt /RTCsu
;	COMDAT ?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
$T189600 = -12						; size = 4
$T189599 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 580  : 		if (size() < capacity())

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  00027	8b f0		 mov	 esi, eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::capacity
  00031	3b f0		 cmp	 esi, eax
  00033	73 1d		 jae	 SHORT $L188537

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00035	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00038	50		 push	 eax
  00039	6a 01		 push	 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ufill
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 582  : 		else

  00050	eb 1f		 jmp	 SHORT $L188536
$L188537:

; 583  : 			insert(end(), _Val);

  00052	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00055	52		 push	 edx
  00056	8d 45 f8	 lea	 eax, DWORD PTR $T189599[ebp]
  00059	50		 push	 eax
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?end@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::end
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	51		 push	 ecx
  00065	8d 55 f4	 lea	 edx, DWORD PTR $T189600[ebp]
  00068	52		 push	 edx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?insert@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@ABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::insert
$L188536:

; 584  : 		}

  00071	5e		 pop	 esi
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?push_back@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXABU_tagLMCItemInfo@@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::push_back
_TEXT	ENDS
PUBLIC	??$copy@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z ; std::copy<_tagLMCItemInfo *,_tagLMCItemInfo *>
PUBLIC	?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy
PUBLIC	??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator!=
; Function compile flags: /Odt /RTCsu
;	COMDAT ?erase@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
__Ptr$188545 = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::erase, COMDAT
; _this$ = ecx

; 731  : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 732  : 		if (_First != _Last)

  00017	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator!=
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	74 36		 je	 SHORT $L188544

; 733  : 			{	// worth doing, copy down over hole
; 734  : 			pointer _Ptr = copy(_ITER_BASE(_Last), _Mylast,
; 735  : 				_ITER_BASE(_First));

  0002a	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00034	51		 push	 ecx
  00035	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$copy@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z ; std::copy<_tagLMCItemInfo *,_tagLMCItemInfo *>
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	89 45 f8	 mov	 DWORD PTR __Ptr$188545[ebp], eax

; 736  : 			_Destroy(_Ptr, _Mylast);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004a	51		 push	 ecx
  0004b	8b 55 f8	 mov	 edx, DWORD PTR __Ptr$188545[ebp]
  0004e	52		 push	 edx
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy

; 737  : 			_Mylast = _Ptr;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr$188545[ebp]
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L188544:

; 738  : 			}
; 739  : 		return (_First);

  00060	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00063	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00066	89 02		 mov	 DWORD PTR [edx], eax
  00068	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 740  : 		}

  0006b	83 c4 08	 add	 esp, 8
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::erase
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?clear@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 744  : 		_Tidy();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Tidy

; 745  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?clear@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::clear
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::capacity, COMDAT
; _this$ = ecx

; 457  : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	75 09		 jne	 SHORT $L189604
  00020	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00027	eb 17		 jmp	 SHORT $L189605
$L189604:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00032	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00035	99		 cdq
  00036	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0003b	f7 f9		 idiv	 ecx
  0003d	89 45 f8	 mov	 DWORD PTR tv70[ebp], eax
$L189605:
  00040	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]

; 459  : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::capacity
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator-
PUBLIC	?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Insert_n
; Function compile flags: /Odt /RTCsu
;	COMDAT ?insert@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@ABU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
tv73 = -20						; size = 4
$T189610 = -16						; size = 4
$T189607 = -12						; size = 4
__Off$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@ABU_tagLMCItemInfo@@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::insert, COMDAT
; _this$ = ecx

; 620  : 		{	// insert _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  00025	85 c0		 test	 eax, eax
  00027	75 09		 jne	 SHORT $L189608
  00029	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
  00030	eb 18		 jmp	 SHORT $L189609
$L189608:
  00032	8d 45 f4	 lea	 eax, DWORD PTR $T189607[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin
  0003e	50		 push	 eax
  0003f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00042	e8 00 00 00 00	 call	 ??Giterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator-
  00047	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
$L189609:
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR tv73[ebp]
  0004d	89 4d f8	 mov	 DWORD PTR __Off$[ebp], ecx

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00050	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00053	52		 push	 edx
  00054	6a 01		 push	 1
  00056	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00062	8b 4d f8	 mov	 ecx, DWORD PTR __Off$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00069	52		 push	 edx
  0006a	8d 45 f0	 lea	 eax, DWORD PTR $T189610[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?begin@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::begin
  00076	8b c8		 mov	 ecx, eax
  00078	e8 00 00 00 00	 call	 ??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+
  0007d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 624  : 		}

  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AViterator@12@V312@ABU_tagLMCItemInfo@@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::insert
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::allocate
PUBLIC	?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::max_size
PUBLIC	?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Xlen
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_Buy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Buy, COMDAT
; _this$ = ecx

; 770  : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 772  : 		if (_Capacity == 0)

  0002c	83 7d 08 00	 cmp	 DWORD PTR __Capacity$[ebp], 0
  00030	75 04		 jne	 SHORT $L188577

; 773  : 			return (false);

  00032	32 c0		 xor	 al, al
  00034	eb 49		 jmp	 SHORT $L188576
$L188577:

; 774  : 		else if (max_size() < _Capacity)

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::max_size
  0003e	3b 45 08	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  00041	73 0a		 jae	 SHORT $L188579

; 775  : 			_Xlen();	// result too long

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Xlen

; 776  : 		else

  0004b	eb 30		 jmp	 SHORT $L188578
$L188579:

; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00050	50		 push	 eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::allocate
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 779  : 			_Mylast = _Myfirst;

  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 780  : 			_Myend = _Myfirst + _Capacity;

  0006b	8b 55 08	 mov	 edx, DWORD PTR __Capacity$[ebp]
  0006e	6b d2 44	 imul	 edx, 68			; 00000044H
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
$L188578:

; 781  : 			}
; 782  : 		return (true);

  0007d	b0 01		 mov	 al, 1
$L188576:

; 783  : 		}

  0007f	83 c4 04	 add	 esp, 4
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?_Buy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 786  : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 ??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  : 		}

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::deallocate
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  : 		if (_Myfirst != 0)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	74 3c		 je	 SHORT $L188592

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	52		 push	 edx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	51		 push	 ecx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy

; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00036	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00039	8b c1		 mov	 eax, ecx
  0003b	99		 cdq
  0003c	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00041	f7 f9		 idiv	 ecx
  00043	50		 push	 eax
  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::deallocate
$L188592:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 798  : 		}

  00071	83 c4 04	 add	 esp, 4
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?_Tidy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ; std::_Uninitialized_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ; std::_Uninitialized_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 879  : 		return (_Ptr + _Count);

  00026	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00029	6b c0 44	 imul	 eax, 68			; 00000044H
  0002c	03 45 08	 add	 eax, DWORD PTR __Ptr$[ebp]

; 880  : 		}

  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ufill
_TEXT	ENDS
PUBLIC	??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@ABV01@@Z ; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0?$_Vector_val@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE@V?$allocator@U_tagLMCItemInfo@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE@V?$allocator@U_tagLMCItemInfo@@@1@@Z PROC NEAR ; std::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@ABV01@@Z ; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>

; 22   : 		}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0?$_Vector_val@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAE@V?$allocator@U_tagLMCItemInfo@@@1@@Z ENDP ; std::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Vector_val<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@XZ PROC NEAR	; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@XZ ENDP	; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::const_iterator
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::const_iterator

; 216  : 			}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEABU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator*
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*, COMDAT
; _this$ = ecx

; 219  : 			{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??Dconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEABU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator*

; 221  : 			}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+=
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+, COMDAT
; _this$ = ecx

; 261  : 			{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 262  : 			iterator _Tmp = *this;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d f4	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 263  : 			return (_Tmp += _Off);

  00022	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00025	52		 push	 edx
  00026	8d 4d f4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00029	e8 00 00 00 00	 call	 ??Yiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+=
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 264  : 			}

  00038	52		 push	 edx
  00039	8b cd		 mov	 ecx, ebp
  0003b	50		 push	 eax
  0003c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189622
  00042	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00047	58		 pop	 eax
  00048	5a		 pop	 edx
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
$L189622:
  00059	01 00 00 00	 DD	 1
  0005d	00 00 00 00	 DD	 $L189621
$L189621:
  00061	f4 ff ff ff	 DD	 -12			; fffffff4H
  00065	04 00 00 00	 DD	 4
  00069	00 00 00 00	 DD	 $L189620
$L189620:
  0006d	5f		 DB	 95			; 0000005fH
  0006e	54		 DB	 84			; 00000054H
  0006f	6d		 DB	 109			; 0000006dH
  00070	70		 DB	 112			; 00000070H
  00071	00		 DB	 0
??Hiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator==
; Function compile flags: /Odt /RTCsu
;	COMDAT ??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 159  : 			{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 160  : 			return (!(*this == _Right));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator==
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	f7 d8		 neg	 eax
  0001f	1b c0		 sbb	 eax, eax
  00021	40		 inc	 eax

; 161  : 			}

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U_tagLMCItemInfo@@@std@@QBEIXZ ; std::allocator<_tagLMCItemInfo>::max_size
; Function compile flags: /Odt /RTCsu
;	COMDAT ?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::max_size, COMDAT
; _this$ = ecx

; 520  : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 521  : 		return (this->_Alval.max_size());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$allocator@U_tagLMCItemInfo@@@std@@QBEIXZ ; std::allocator<_tagLMCItemInfo>::max_size

; 522  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::max_size
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>
PUBLIC	??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z ; std::fill<_tagLMCItemInfo *,_tagLMCItemInfo>
PUBLIC	??$copy_backward@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z ; std::copy_backward<_tagLMCItemInfo *,_tagLMCItemInfo *>
PUBLIC	??0_tagLMCItemInfo@@QAE@ABU0@@Z			; _tagLMCItemInfo::_tagLMCItemInfo
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T189642 DD	0ffffffffH
	DD	FLAT:$L189634
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T189644 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L189631
$T189645 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L189633
$T189643 DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T189644
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:$T189645
$T189636 DD	019930520H
	DD	05H
	DD	FLAT:$T189642
	DD	02H
	DD	FLAT:$T189643
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
tv244 = -128						; size = 4
tv65 = -124						; size = 4
tv89 = -120						; size = 4
__Oldend$188694 = -116					; size = 4
__Ptr$188674 = -112					; size = 4
__Newvec$188673 = -108					; size = 4
__Capacity$ = -104					; size = 4
__Tmp$ = -96						; size = 68
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__$ReturnAddr$ = 4					; size = 4
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	51		 push	 ecx
  00020	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00023	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	59		 pop	 ecx
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00041	50		 push	 eax
  00042	8d 4d a0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00045	e8 00 00 00 00	 call	 ??0_tagLMCItemInfo@@QAE@ABU0@@Z
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 811  : 		size_type _Capacity = capacity();

  00051	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?capacity@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::capacity
  00059	89 45 98	 mov	 DWORD PTR __Capacity$[ebp], eax

; 812  : 
; 813  : 		if (_Count == 0)

  0005c	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00060	75 05		 jne	 SHORT $L188667

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  00062	e9 cf 02 00 00	 jmp	 $L188668
$L188667:
  00067	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  0006f	8b f0		 mov	 esi, eax
  00071	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::max_size
  00079	2b c6		 sub	 eax, esi
  0007b	3b 45 0c	 cmp	 eax, DWORD PTR __Count$[ebp]
  0007e	73 0d		 jae	 SHORT $L188669

; 816  : 			_Xlen();	// result too long

  00080	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Xlen

; 817  : 		else if (_Capacity < size() + _Count)

  00088	e9 a9 02 00 00	 jmp	 $L188668
$L188669:
  0008d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  00095	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00098	39 45 98	 cmp	 DWORD PTR __Capacity$[ebp], eax
  0009b	0f 83 68 01 00
	00		 jae	 $L188671

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000a1	8b 75 98	 mov	 esi, DWORD PTR __Capacity$[ebp]
  000a4	d1 ee		 shr	 esi, 1
  000a6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?max_size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::max_size
  000ae	2b c6		 sub	 eax, esi
  000b0	3b 45 98	 cmp	 eax, DWORD PTR __Capacity$[ebp]
  000b3	73 09		 jae	 SHORT $L189627
  000b5	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
  000bc	eb 0b		 jmp	 SHORT $L189628
$L189627:
  000be	8b 4d 98	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  000c1	d1 e9		 shr	 ecx, 1
  000c3	03 4d 98	 add	 ecx, DWORD PTR __Capacity$[ebp]
  000c6	89 4d 88	 mov	 DWORD PTR tv89[ebp], ecx
$L189628:
  000c9	8b 55 88	 mov	 edx, DWORD PTR tv89[ebp]
  000cc	89 55 98	 mov	 DWORD PTR __Capacity$[ebp], edx

; 821  : 			if (_Capacity < size() + _Count)

  000cf	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  000d7	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  000da	39 45 98	 cmp	 DWORD PTR __Capacity$[ebp], eax
  000dd	73 0e		 jae	 SHORT $L188672

; 822  : 				_Capacity = size() + _Count;

  000df	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  000e7	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  000ea	89 45 98	 mov	 DWORD PTR __Capacity$[ebp], eax
$L188672:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000ed	8b 45 98	 mov	 eax, DWORD PTR __Capacity$[ebp]
  000f0	50		 push	 eax
  000f1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::allocate
  000f9	89 45 94	 mov	 DWORD PTR __Newvec$188673[ebp], eax

; 824  : 			pointer _Ptr = _Newvec;

  000fc	8b 4d 94	 mov	 ecx, DWORD PTR __Newvec$188673[ebp]
  000ff	89 4d 90	 mov	 DWORD PTR __Ptr$188674[ebp], ecx

; 825  : 
; 826  : 			_TRY_BEGIN

  00102	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  00106	8b 55 94	 mov	 edx, DWORD PTR __Newvec$188673[ebp]
  00109	52		 push	 edx
  0010a	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00114	52		 push	 edx
  00115	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	e8 00 00 00 00	 call	 ??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>
  0011d	89 45 84	 mov	 DWORD PTR tv65[ebp], eax
  00120	8b 45 84	 mov	 eax, DWORD PTR tv65[ebp]
  00123	89 45 90	 mov	 DWORD PTR __Ptr$188674[ebp], eax

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  00126	8d 4d a0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0012d	52		 push	 edx
  0012e	8b 45 90	 mov	 eax, DWORD PTR __Ptr$188674[ebp]
  00131	50		 push	 eax
  00132	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ufill
  0013a	89 45 80	 mov	 DWORD PTR tv244[ebp], eax
  0013d	8b 4d 80	 mov	 ecx, DWORD PTR tv244[ebp]
  00140	89 4d 90	 mov	 DWORD PTR __Ptr$188674[ebp], ecx

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  00143	8b 55 90	 mov	 edx, DWORD PTR __Ptr$188674[ebp]
  00146	52		 push	 edx
  00147	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0014d	51		 push	 ecx
  0014e	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]
  00151	52		 push	 edx
  00152	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	e8 00 00 00 00	 call	 ??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>
  0015a	eb 29		 jmp	 SHORT $L189630
$L189631:

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);

  0015c	8b 45 90	 mov	 eax, DWORD PTR __Ptr$188674[ebp]
  0015f	50		 push	 eax
  00160	8b 4d 94	 mov	 ecx, DWORD PTR __Newvec$188673[ebp]
  00163	51		 push	 ecx
  00164	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy

; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  0016c	8b 55 98	 mov	 edx, DWORD PTR __Capacity$[ebp]
  0016f	52		 push	 edx
  00170	8b 45 94	 mov	 eax, DWORD PTR __Newvec$188673[ebp]
  00173	50		 push	 eax
  00174	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::deallocate

; 834  : 			_RERAISE;

  0017c	6a 00		 push	 0
  0017e	6a 00		 push	 0
  00180	e8 00 00 00 00	 call	 __CxxThrowException@8
$L189630:

; 835  : 			_CATCH_END

  00185	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 836  : 
; 837  : 			_Count += size();

  0018c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	e8 00 00 00 00	 call	 ?size@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEIXZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::size
  00194	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00197	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax

; 838  : 			if (_Myfirst != 0)

  0019a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  001a1	74 3a		 je	 SHORT $L188681

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);

  001a3	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001a6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001a9	50		 push	 eax
  001aa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ad	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001b0	52		 push	 edx
  001b1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b4	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy

; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001b9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001c2	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  001c5	99		 cdq
  001c6	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  001cb	f7 f9		 idiv	 ecx
  001cd	50		 push	 eax
  001ce	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001d1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001d4	50		 push	 eax
  001d5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z ; std::allocator<_tagLMCItemInfo>::deallocate
$L188681:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  001dd	8b 4d 98	 mov	 ecx, DWORD PTR __Capacity$[ebp]
  001e0	6b c9 44	 imul	 ecx, 68			; 00000044H
  001e3	03 4d 94	 add	 ecx, DWORD PTR __Newvec$188673[ebp]
  001e6	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001e9	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 844  : 			_Mylast = _Newvec + _Count;

  001ec	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  001ef	6b c0 44	 imul	 eax, 68			; 00000044H
  001f2	03 45 94	 add	 eax, DWORD PTR __Newvec$188673[ebp]
  001f5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f8	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 845  : 			_Myfirst = _Newvec;

  001fb	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001fe	8b 45 94	 mov	 eax, DWORD PTR __Newvec$188673[ebp]
  00201	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00204	e9 2d 01 00 00	 jmp	 $L188668
$L188671:
  00209	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0020f	2b 45 08	 sub	 eax, DWORD PTR __Where$[ebp]
  00212	99		 cdq
  00213	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00218	f7 f9		 idiv	 ecx
  0021a	3b 45 0c	 cmp	 eax, DWORD PTR __Count$[ebp]
  0021d	0f 83 af 00 00
	00		 jae	 $L188684

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00223	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00226	6b d2 44	 imul	 edx, 68			; 00000044H
  00229	03 55 08	 add	 edx, DWORD PTR __Where$[ebp]
  0022c	52		 push	 edx
  0022d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00230	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00233	51		 push	 ecx
  00234	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]
  00237	52		 push	 edx
  00238	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023b	e8 00 00 00 00	 call	 ??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>

; 851  : 
; 852  : 			_TRY_BEGIN

  00240	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  00244	8d 45 a0	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00247	50		 push	 eax
  00248	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0024b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0024e	2b 45 08	 sub	 eax, DWORD PTR __Where$[ebp]
  00251	99		 cdq
  00252	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00257	f7 f9		 idiv	 ecx
  00259	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0025c	2b d0		 sub	 edx, eax
  0025e	52		 push	 edx
  0025f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00262	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00265	51		 push	 ecx
  00266	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00269	e8 00 00 00 00	 call	 ?_Ufill@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU3@IABU3@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ufill
  0026e	eb 28		 jmp	 SHORT $L189632
$L189633:

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  00270	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00273	6b d2 44	 imul	 edx, 68			; 00000044H
  00276	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00279	03 50 08	 add	 edx, DWORD PTR [eax+8]
  0027c	52		 push	 edx
  0027d	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00280	6b c9 44	 imul	 ecx, 68			; 00000044H
  00283	03 4d 08	 add	 ecx, DWORD PTR __Where$[ebp]
  00286	51		 push	 ecx
  00287	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0028a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXPAU_tagLMCItemInfo@@0@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Destroy

; 857  : 			_RERAISE;

  0028f	6a 00		 push	 0
  00291	6a 00		 push	 0
  00293	e8 00 00 00 00	 call	 __CxxThrowException@8
$L189632:

; 858  : 			_CATCH_END

  00298	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 859  : 
; 860  : 			_Mylast += _Count;

  0029f	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  002a2	6b d2 44	 imul	 edx, 68			; 00000044H
  002a5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002a8	03 50 08	 add	 edx, DWORD PTR [eax+8]
  002ab	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ae	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  002b1	8d 55 a0	 lea	 edx, DWORD PTR __Tmp$[ebp]
  002b4	52		 push	 edx
  002b5	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  002b8	6b c0 44	 imul	 eax, 68			; 00000044H
  002bb	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002be	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002c1	2b d0		 sub	 edx, eax
  002c3	52		 push	 edx
  002c4	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z ; std::fill<_tagLMCItemInfo *,_tagLMCItemInfo>
  002cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 863  : 			}
; 864  : 		else

  002d0	eb 64		 jmp	 SHORT $L188668
$L188684:

; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;

  002d2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002d5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002d8	89 55 8c	 mov	 DWORD PTR __Oldend$188694[ebp], edx

; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  002db	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002de	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002e1	51		 push	 ecx
  002e2	8b 55 8c	 mov	 edx, DWORD PTR __Oldend$188694[ebp]
  002e5	52		 push	 edx
  002e6	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  002e9	6b c0 44	 imul	 eax, 68			; 00000044H
  002ec	8b 4d 8c	 mov	 ecx, DWORD PTR __Oldend$188694[ebp]
  002ef	2b c8		 sub	 ecx, eax
  002f1	51		 push	 ecx
  002f2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002f5	e8 00 00 00 00	 call	 ??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>
  002fa	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  002fd	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  00300	8b 45 8c	 mov	 eax, DWORD PTR __Oldend$188694[ebp]
  00303	50		 push	 eax
  00304	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00307	6b c9 44	 imul	 ecx, 68			; 00000044H
  0030a	8b 55 8c	 mov	 edx, DWORD PTR __Oldend$188694[ebp]
  0030d	2b d1		 sub	 edx, ecx
  0030f	52		 push	 edx
  00310	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 ??$copy_backward@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z ; std::copy_backward<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00319	83 c4 0c	 add	 esp, 12			; 0000000cH

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  0031c	8d 4d a0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0031f	51		 push	 ecx
  00320	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00323	6b d2 44	 imul	 edx, 68			; 00000044H
  00326	03 55 08	 add	 edx, DWORD PTR __Where$[ebp]
  00329	52		 push	 edx
  0032a	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 ??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z ; std::fill<_tagLMCItemInfo *,_tagLMCItemInfo>
  00333	83 c4 0c	 add	 esp, 12			; 0000000cH
$L188668:

; 873  : 			}
; 874  : 		}

  00336	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0033d	8d 4d a0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00340	e8 00 00 00 00	 call	 ??1_tagLMCItemInfo@@QAE@XZ
$L189626:
  00345	52		 push	 edx
  00346	8b cd		 mov	 ecx, ebp
  00348	50		 push	 eax
  00349	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189641
  0034f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00354	58		 pop	 eax
  00355	5a		 pop	 edx
  00356	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00359	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00360	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00363	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx
  0036b	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  00371	3b ec		 cmp	 ebp, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	8b e5		 mov	 esp, ebp
  0037a	5d		 pop	 ebp
  0037b	c2 0c 00	 ret	 12			; 0000000cH
$L189641:
  0037e	01 00 00 00	 DD	 1
  00382	00 00 00 00	 DD	 $L189640
$L189640:
  00386	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0038a	44 00 00 00	 DD	 68			; 00000044H
  0038e	00 00 00 00	 DD	 $L189637
$L189637:
  00392	5f		 DB	 95			; 0000005fH
  00393	54		 DB	 84			; 00000054H
  00394	6d		 DB	 109			; 0000006dH
  00395	70		 DB	 112			; 00000070H
  00396	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189634:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_tagLMCItemInfo@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189636
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert_n@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEXViterator@12@IABU_tagLMCItemInfo@@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Insert_n
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT xdata$x
xdata$x	SEGMENT
$T189655 DD	0ffffffffH
	DD	FLAT:$L189651
$T189653 DD	019930520H
	DD	01H
	DD	FLAT:$T189655
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
	ORG $-31
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
	ORG $-30
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
	ORG $-24
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T189650 = -84						; size = 28
$T189649 = -56						; size = 40
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 48	 sub	 esp, 72			; 00000048H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  00021	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		_THROW(length_error, "vector<T> too long");

  00031	8b f4		 mov	 esi, esp
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00038	8d 4d ac	 lea	 ecx, DWORD PTR $T189650[ebp]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	8d 45 ac	 lea	 eax, DWORD PTR $T189650[ebp]
  00052	50		 push	 eax
  00053	8d 4d c8	 lea	 ecx, DWORD PTR $T189649[ebp]
  00056	e8 00 00 00 00	 call	 ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00060	8d 4d c8	 lea	 ecx, DWORD PTR $T189649[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L189648:

; 885  : 		}

  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	83 c4 54	 add	 esp, 84			; 00000054H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189651:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ac	 lea	 ecx, DWORD PTR $T189650[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189653
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Xlen
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??0?$allocator@U_tagLMCItemInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_tagLMCItemInfo>::allocator<_tagLMCItemInfo>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z PROC NEAR ; std::allocator<_tagLMCItemInfo>::deallocate, COMDAT
; _this$ = ecx

; 131  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 132  : 		operator delete(_Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4

; 133  : 		}

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?deallocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@I@Z ENDP ; std::allocator<_tagLMCItemInfo>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_tagLMCItemInfo@@@std@@YAPAU_tagLMCItemInfo@@IPAU1@@Z ; std::_Allocate<_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
;	COMDAT ?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z PROC NEAR ; std::allocator<_tagLMCItemInfo>::allocate, COMDAT
; _this$ = ecx

; 136  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  0000e	6a 00		 push	 0
  00010	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Allocate@U_tagLMCItemInfo@@@std@@YAPAU_tagLMCItemInfo@@IPAU1@@Z ; std::_Allocate<_tagLMCItemInfo>
  00019	83 c4 08	 add	 esp, 8

; 138  : 		}

  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?allocate@?$allocator@U_tagLMCItemInfo@@@std@@QAEPAU_tagLMCItemInfo@@I@Z ENDP ; std::allocator<_tagLMCItemInfo>::allocate
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Yiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  : 			this->_Myptr += _Off;

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00011	6b c0 44	 imul	 eax, 68			; 00000044H
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	03 01		 add	 eax, DWORD PTR [ecx]
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	89 02		 mov	 DWORD PTR [edx], eax

; 257  : 			return (*this);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 258  : 			}

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??Yiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator-
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Giterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
$T189663 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Giterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator-, COMDAT
; _this$ = ecx

; 278  : 			{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR $T189663[ebp], ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00022	52		 push	 edx
  00023	8d 4d f8	 lea	 ecx, DWORD PTR $T189663[ebp]
  00026	e8 00 00 00 00	 call	 ??Gconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator-

; 280  : 			}

  0002b	83 c4 08	 add	 esp, 8
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??Giterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator-
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE@PAU_tagLMCItemInfo@@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::const_iterator
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEABU_tagLMCItemInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEABU_tagLMCItemInfo@@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 79   : 			{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 83   : 			}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??Dconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEABU_tagLMCItemInfo@@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator*
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 152  : 			{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 153  : 
; 154  : 
; 155  : 			return (_Myptr == _Right._Myptr);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	2b 01		 sub	 eax, DWORD PTR [ecx]
  00018	f7 d8		 neg	 eax
  0001a	1b c0		 sbb	 eax, eax
  0001c	40		 inc	 eax

; 156  : 			}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator==
_TEXT	ENDS
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T189675 DD	0ffffffffH
	DD	FLAT:$L189668
	DD	00H
	DD	FLAT:$L189669
	DD	01H
	DD	FLAT:$L189670
$T189673 DD	019930520H
	DD	03H
	DD	FLAT:$T189675
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0_tagLMCItemInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0_tagLMCItemInfo@@QAE@ABU0@@Z PROC NEAR		; _tagLMCItemInfo::_tagLMCItemInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_tagLMCItemInfo@@QAE@ABU0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b f4		 mov	 esi, esp
  00026	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00047	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0004a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00053	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00056	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0005f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00062	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00068	83 c1 28	 add	 ecx, 40			; 00000028H
  0006b	8b f4		 mov	 esi, esp
  0006d	51		 push	 ecx
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 28	 add	 ecx, 40			; 00000028H
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00085	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00088	83 c2 2c	 add	 edx, 44			; 0000002cH
  0008b	8b f4		 mov	 esi, esp
  0008d	52		 push	 edx
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  000a8	83 c0 30	 add	 eax, 48			; 00000030H
  000ab	8b f4		 mov	 esi, esp
  000ad	50		 push	 eax
  000ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	83 c1 30	 add	 ecx, 48			; 00000030H
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000c4	83 c1 34	 add	 ecx, 52			; 00000034H
  000c7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ca	83 c2 34	 add	 edx, 52			; 00000034H
  000cd	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cf	89 02		 mov	 DWORD PTR [edx], eax
  000d1	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d4	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000d7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000da	89 42 08	 mov	 DWORD PTR [edx+8], eax
  000dd	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000e0	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ea	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000f7	5e		 pop	 esi
  000f8	83 c4 10	 add	 esp, 16			; 00000010H
  000fb	3b ec		 cmp	 ebp, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189668:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189669:
  00012	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 28	 add	 ecx, 40			; 00000028H
  00018	8b f4		 mov	 esi, esp
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00020	3b f4		 cmp	 esi, esp
  00022	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L189670:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0002d	8b f4		 mov	 esi, esp
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00035	3b f4		 cmp	 esi, esp
  00037	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0_tagLMCItemInfo@@QAE@ABU0@@Z:
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189673
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0_tagLMCItemInfo@@QAE@ABU0@@Z ENDP			; _tagLMCItemInfo::_tagLMCItemInfo
PUBLIC	??_R1A@?0A@A@exception@@8			; exception::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@logic_error@std@@8			; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@A@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@A@exception@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@A@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@A@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@exception@@8
rdata$r	SEGMENT
??_R1A@?0A@A@exception@@8 DD FLAT:??_R0?AVexception@@@8	; exception::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7length_error@std@@6B@
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U_tagLMCItemInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@U_tagLMCItemInfo@@@std@@QBEIXZ PROC NEAR ; std::allocator<_tagLMCItemInfo>::max_size, COMDAT
; _this$ = ecx

; 156  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  0001e	c7 45 f8 c3 c3
	c3 03		 mov	 DWORD PTR __Count$[ebp], 63161283 ; 03c3c3c3H

; 158  : 		return (0 < _Count ? _Count : 1);

  00025	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	76 08		 jbe	 SHORT $L189681
  0002b	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0002e	89 45 f4	 mov	 DWORD PTR tv65[ebp], eax
  00031	eb 07		 jmp	 SHORT $L189682
$L189681:
  00033	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
$L189682:
  0003a	8b 45 f4	 mov	 eax, DWORD PTR tv65[ebp]

; 159  : 		}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?max_size@?$allocator@U_tagLMCItemInfo@@@std@@QBEIXZ ENDP ; std::allocator<_tagLMCItemInfo>::max_size
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 140  : 			{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	2b 01		 sub	 eax, DWORD PTR [ecx]
  00018	99		 cdq
  00019	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0001e	f7 f9		 idiv	 ecx

; 144  : 			}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z ; std::find_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
PUBLIC	??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z ; std::remove_copy_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
PUBLIC	??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\algorithm
xdata$x	SEGMENT
$T189693 DD	0ffffffffH
	DD	FLAT:$L189686
$T189688 DD	019930520H
	DD	01H
	DD	FLAT:$T189693
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z
_TEXT	SEGMENT
$T189685 = -28						; size = 4
__First1$188769 = -20					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z PROC NEAR ; std::remove_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>, COMDAT

; 515  : 	{	// remove each satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 516  : 	_First = std::find_if(_First, _Last, _Pred);

  00033	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0003e	52		 push	 edx
  0003f	8d 45 e4	 lea	 eax, DWORD PTR $T189685[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z ; std::find_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx

; 517  : 	if (_First == _Last)

  00050	8d 55 10	 lea	 edx, DWORD PTR __Last$[ebp]
  00053	52		 push	 edx
  00054	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00057	e8 00 00 00 00	 call	 ??8const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator==
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	74 1c		 je	 SHORT $L188767

; 518  : 		return (_First);	// empty sequence, all done

  00063	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00066	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  00069	89 11		 mov	 DWORD PTR [ecx], edx
  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00075	e8 00 00 00 00	 call	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
  0007a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007d	eb 3b		 jmp	 SHORT $L188758
$L188767:

; 519  : 	else
; 520  : 		{	// nonempty sequence, worth doing
; 521  : 		_FwdIt _First1 = _First;

  0007f	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00082	89 45 ec	 mov	 DWORD PTR __First1$188769[ebp], eax

; 522  : 		return (std::remove_copy_if(++_First1, _Last, _First, _Pred));

  00085	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00090	50		 push	 eax
  00091	8d 4d ec	 lea	 ecx, DWORD PTR __First1$188769[ebp]
  00094	e8 00 00 00 00	 call	 ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	51		 push	 ecx
  0009c	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z ; std::remove_copy_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
  000a5	83 c4 14	 add	 esp, 20			; 00000014H
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000af	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000b2	e8 00 00 00 00	 call	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
  000b7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L188758:

; 523  : 		}
; 524  : 	}

  000ba	52		 push	 edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	50		 push	 eax
  000be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189692
  000c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c9	58		 pop	 eax
  000ca	5a		 pop	 edx
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
$L189692:
  000e3	01 00 00 00	 DD	 1
  000e7	00 00 00 00	 DD	 $L189691
$L189691:
  000eb	ec ff ff ff	 DD	 -20			; ffffffecH
  000ef	04 00 00 00	 DD	 4
  000f3	00 00 00 00	 DD	 $L189689
$L189689:
  000f7	5f		 DB	 95			; 0000005fH
  000f8	46		 DB	 70			; 00000046H
  000f9	69		 DB	 105			; 00000069H
  000fa	72		 DB	 114			; 00000072H
  000fb	73		 DB	 115			; 00000073H
  000fc	74		 DB	 116			; 00000074H
  000fd	31		 DB	 49			; 00000031H
  000fe	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189686:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
__ehhandler$??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189688
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$remove_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z ENDP ; std::remove_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
PUBLIC	??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
PUBLIC	??$_Copy_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z
_TEXT	SEGMENT
$T189697 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z PROC NEAR ; std::copy<_tagLMCItemInfo *,_tagLMCItemInfo *>, COMDAT

; 1039 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  0000b	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000e	50		 push	 eax
  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T189697[ebp], al
  0001e	8a 55 ff	 mov	 dl, BYTE PTR $T189697[ebp]
  00021	52		 push	 edx
  00022	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 1041 : 	}

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$copy@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z ENDP ; std::copy<_tagLMCItemInfo *,_tagLMCItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@@Z
_TEXT	SEGMENT
$T189699 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@@Z PROC NEAR ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT

; 216  : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  0000b	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000e	50		 push	 eax
  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T189699[ebp], al
  0001e	8a 55 ff	 mov	 dl, BYTE PTR $T189699[ebp]
  00021	52		 push	 edx
  00022	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 218  : 	}

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ENDP ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@@Z
_TEXT	SEGMENT
$T189701 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT

; 255  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  0000b	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0000e	50		 push	 eax
  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T189701[ebp], al
  0001e	8a 55 ff	 mov	 dl, BYTE PTR $T189701[ebp]
  00021	52		 push	 edx
  00022	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
  00037	83 c4 14	 add	 esp, 20			; 00000014H

; 258  : 	}

  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??$_Uninitialized_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ENDP ; std::_Uninitialized_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ; std::_Uninitialized_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>, COMDAT
; _this$ = ecx

; 801  : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ; std::_Uninitialized_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 805  : 		}

  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAU_tagLMCItemInfo@@@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@IAEPAU_tagLMCItemInfo@@PAU2@00@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::_Ucopy<_tagLMCItemInfo *>
_TEXT	ENDS
PUBLIC	??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z		; _tagLMCItemInfo::operator=
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z PROC NEAR ; std::fill<_tagLMCItemInfo *,_tagLMCItemInfo>, COMDAT

; 1134 : 	{	// copy _Val through [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1135 : 	for (; _First != _Last; ++_First)

  00003	eb 09		 jmp	 SHORT $L188938
$L188939:
  00005	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00008	83 c0 44	 add	 eax, 68			; 00000044H
  0000b	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$L188938:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00014	74 0e		 je	 SHORT $L188937

; 1136 : 		*_First = _Val;

  00016	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00019	52		 push	 edx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001d	e8 00 00 00 00	 call	 ??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z
  00022	eb e1		 jmp	 SHORT $L188939
$L188937:

; 1137 : 	}

  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$fill@PAU_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@0ABU1@@Z ENDP ; std::fill<_tagLMCItemInfo *,_tagLMCItemInfo>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>
; Function compile flags: /Odt /RTCsu
;	COMDAT ??$copy_backward@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z
_TEXT	SEGMENT
$T189705 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z PROC NEAR ; std::copy_backward<_tagLMCItemInfo *,_tagLMCItemInfo *>, COMDAT

; 1067 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  0000b	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000e	50		 push	 eax
  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T189705[ebp], al
  0001e	8a 55 ff	 mov	 dl, BYTE PTR $T189705[ebp]
  00021	52		 push	 edx
  00022	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 1070 : 	}

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$copy_backward@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00@Z ENDP ; std::copy_backward<_tagLMCItemInfo *,_tagLMCItemInfo *>
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@U_tagLMCItemInfo@@@std@@YAPAU_tagLMCItemInfo@@IPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_tagLMCItemInfo@@@std@@YAPAU_tagLMCItemInfo@@IPAU1@@Z PROC NEAR ; std::_Allocate<_tagLMCItemInfo>, COMDAT

; 33   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	6b c0 44	 imul	 eax, 68			; 00000044H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000f	83 c4 04	 add	 esp, 4

; 35   : 	}

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Allocate@U_tagLMCItemInfo@@@std@@YAPAU_tagLMCItemInfo@@IPAU1@@Z ENDP ; std::_Allocate<_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z PROC NEAR		; _tagLMCItemInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0001e	3b f4		 cmp	 esi, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0002b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0002e	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00037	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0003a	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00043	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00046	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0004c	83 c1 28	 add	 ecx, 40			; 00000028H
  0004f	8b f4		 mov	 esi, esp
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 28	 add	 ecx, 40			; 00000028H
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00068	83 c2 2c	 add	 edx, 44			; 0000002cH
  0006b	8b f4		 mov	 esi, esp
  0006d	52		 push	 edx
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00084	83 c0 30	 add	 eax, 48			; 00000030H
  00087	8b f4		 mov	 esi, esp
  00089	50		 push	 eax
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	83 c1 30	 add	 ecx, 48			; 00000030H
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00096	3b f4		 cmp	 esi, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000a0	83 c1 34	 add	 ecx, 52			; 00000034H
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	83 c2 34	 add	 edx, 52			; 00000034H
  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	89 02		 mov	 DWORD PTR [edx], eax
  000ad	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b0	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000b3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000b6	89 42 08	 mov	 DWORD PTR [edx+8], eax
  000b9	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000bc	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	5e		 pop	 esi
  000c3	83 c4 04	 add	 esp, 4
  000c6	3b ec		 cmp	 ebp, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 04 00	 ret	 4
??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z ENDP		; _tagLMCItemInfo::operator=
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++, COMDAT
; _this$ = ecx

; 229  : 			{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 230  : 			++this->_Myptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	83 c1 44	 add	 ecx, 68			; 00000044H
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	89 0a		 mov	 DWORD PTR [edx], ecx

; 231  : 			return (*this);

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 232  : 			}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z	; CLMCDataOper::operator()
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\algorithm
xdata$x	SEGMENT
$T189716 DD	0ffffffffH
	DD	FLAT:$L189711
$T189714 DD	019930520H
	DD	01H
	DD	FLAT:$T189716
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z
_TEXT	SEGMENT
tv93 = -24						; size = 4
tv92 = -20						; size = 4
$T189710 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z PROC NEAR ; std::find_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>, COMDAT

; 62   : 	{	// find first satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   : 	for (; _First != _Last; ++_First)

  00037	eb 08		 jmp	 SHORT $L188969
$L188970:
  00039	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0003c	e8 00 00 00 00	 call	 ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
$L188969:
  00041	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00044	50		 push	 eax
  00045	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00048	e8 00 00 00 00	 call	 ??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator!=
  0004d	0f b6 c8	 movzx	 ecx, al
  00050	85 c9		 test	 ecx, ecx
  00052	74 2e		 je	 SHORT $L188971

; 64   : 		if (_Pred(*_First))

  00054	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00057	e8 00 00 00 00	 call	 ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*
  0005c	83 ec 44	 sub	 esp, 68			; 00000044H
  0005f	8b cc		 mov	 ecx, esp
  00061	89 65 f0	 mov	 DWORD PTR $T189710[ebp], esp
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??0_tagLMCItemInfo@@QAE@ABU0@@Z
  0006a	89 45 ec	 mov	 DWORD PTR tv92[ebp], eax
  0006d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00070	e8 00 00 00 00	 call	 ??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z ; CLMCDataOper::operator()
  00075	89 45 e8	 mov	 DWORD PTR tv93[ebp], eax
  00078	83 7d e8 00	 cmp	 DWORD PTR tv93[ebp], 0
  0007c	74 02		 je	 SHORT $L188973

; 65   : 			break;

  0007e	eb 02		 jmp	 SHORT $L188971
$L188973:

; 66   : 	return (_First);

  00080	eb b7		 jmp	 SHORT $L188970
$L188971:
  00082	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00085	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00088	89 02		 mov	 DWORD PTR [edx], eax
  0008a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00091	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00094	e8 00 00 00 00	 call	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
  00099	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 67   : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a6	83 c4 18	 add	 esp, 24			; 00000018H
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189711:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
__ehhandler$??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189714
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$find_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@0VCLMCDataOper@@@Z ENDP ; std::find_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\playedgamepanel\lmcdatamgr.h
;	COMDAT ??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
$T189720 = -8						; size = 4
_this$ = -4						; size = 4
_LMItem$ = 8						; size = 68
??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z PROC NEAR	; CLMCDataOper::operator(), COMDAT
; _this$ = ecx

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		return m_delItem==LMItem.iIndex;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	2b 4d 24	 sub	 ecx, DWORD PTR _LMItem$[ebp+28]
  0001f	f7 d9		 neg	 ecx
  00021	1b c9		 sbb	 ecx, ecx
  00023	41		 inc	 ecx
  00024	89 4d f8	 mov	 DWORD PTR $T189720[ebp], ecx
  00027	8d 4d 08	 lea	 ecx, DWORD PTR _LMItem$[ebp]
  0002a	e8 00 00 00 00	 call	 ??1_tagLMCItemInfo@@QAE@XZ
  0002f	8b 45 f8	 mov	 eax, DWORD PTR $T189720[ebp]

; 34   : 	}

  00032	83 c4 08	 add	 esp, 8
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 44 00	 ret	 68			; 00000044H
??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z ENDP		; CLMCDataOper::operator()
_TEXT	ENDS
PUBLIC	??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\algorithm
xdata$x	SEGMENT
$T189730 DD	0ffffffffH
	DD	FLAT:$L189725
$T189728 DD	019930520H
	DD	01H
	DD	FLAT:$T189730
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z
_TEXT	SEGMENT
tv135 = -28						; size = 4
tv134 = -24						; size = 4
$T189724 = -20						; size = 4
$T189723 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z PROC NEAR ; std::remove_copy_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>, COMDAT

; 489  : 	{	// copy omitting each element satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 490  : 	for (; _First != _Last; ++_First)

  00033	eb 08		 jmp	 SHORT $L188976
$L188977:
  00035	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00038	e8 00 00 00 00	 call	 ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
$L188976:
  0003d	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00040	50		 push	 eax
  00041	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00044	e8 00 00 00 00	 call	 ??9const_iterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBE_NABV012@@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::const_iterator::operator!=
  00049	0f b6 c8	 movzx	 ecx, al
  0004c	85 c9		 test	 ecx, ecx
  0004e	74 51		 je	 SHORT $L188978

; 491  : 		if (!_Pred(*_First))

  00050	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00053	e8 00 00 00 00	 call	 ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*
  00058	83 ec 44	 sub	 esp, 68			; 00000044H
  0005b	8b cc		 mov	 ecx, esp
  0005d	89 65 f0	 mov	 DWORD PTR $T189723[ebp], esp
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??0_tagLMCItemInfo@@QAE@ABU0@@Z
  00066	89 45 e8	 mov	 DWORD PTR tv134[ebp], eax
  00069	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0006c	e8 00 00 00 00	 call	 ??RCLMCDataOper@@QAEHU_tagLMCItemInfo@@@Z ; CLMCDataOper::operator()
  00071	89 45 e4	 mov	 DWORD PTR tv135[ebp], eax
  00074	83 7d e4 00	 cmp	 DWORD PTR tv135[ebp], 0
  00078	75 25		 jne	 SHORT $L188980

; 492  : 			*_Dest++ = *_First;

  0007a	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	8d 55 ec	 lea	 edx, DWORD PTR $T189724[ebp]
  00088	52		 push	 edx
  00089	8d 4d 14	 lea	 ecx, DWORD PTR __Dest$[ebp]
  0008c	e8 00 00 00 00	 call	 ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AV012@H@Z ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
  00091	8b c8		 mov	 ecx, eax
  00093	e8 00 00 00 00	 call	 ??Diterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QBEAAU_tagLMCItemInfo@@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator*
  00098	8b c8		 mov	 ecx, eax
  0009a	e8 00 00 00 00	 call	 ??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z
$L188980:

; 493  : 	return (_Dest);

  0009f	eb 94		 jmp	 SHORT $L188977
$L188978:
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000a7	89 08		 mov	 DWORD PTR [eax], ecx
  000a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b0	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000b3	e8 00 00 00 00	 call	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
  000b8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 494  : 	}

  000bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c8	3b ec		 cmp	 ebp, esp
  000ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189725:
  00000	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CLMCDataOper@@QAE@XZ	; CLMCDataOper::~CLMCDataOper
__ehhandler$??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189728
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$remove_copy_if@Viterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@V123@VCLMCDataOper@@@std@@YA?AViterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@0@V120@00VCLMCDataOper@@@Z ENDP ; std::remove_copy_if<std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator,CLMCDataOper>
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z PROC NEAR ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  0001b	8a 45 fb	 mov	 al, BYTE PTR __Cat$[ebp]

; 214  : 	}

  0001e	52		 push	 edx
  0001f	8b cd		 mov	 ecx, ebp
  00021	50		 push	 eax
  00022	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189736
  00028	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0002d	58		 pop	 eax
  0002e	5a		 pop	 edx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$L189736:
  00033	01 00 00 00	 DD	 1
  00037	00 00 00 00	 DD	 $L189735
$L189735:
  0003b	fb ff ff ff	 DD	 -5			; fffffffbH
  0003f	01 00 00 00	 DD	 1
  00043	00 00 00 00	 DD	 $L189734
$L189734:
  00047	5f		 DB	 95			; 0000005fH
  00048	43		 DB	 67			; 00000043H
  00049	61		 DB	 97			; 00000061H
  0004a	74		 DB	 116			; 00000074H
  0004b	00		 DB	 0
??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ENDP ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>, COMDAT

; 1020 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1021 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 12		 jmp	 SHORT $L188985
$L188986:
  00005	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00008	83 c0 44	 add	 eax, 68			; 00000044H
  0000b	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00011	83 c1 44	 add	 ecx, 68			; 00000044H
  00014	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$L188985:
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  0001d	74 0e		 je	 SHORT $L188987

; 1022 : 		*_Dest = *_First;

  0001f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00026	e8 00 00 00 00	 call	 ??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z
  0002b	eb d8		 jmp	 SHORT $L188986
$L188987:

; 1023 : 	return (_Dest);

  0002d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1024 : 	}

  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Copy_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z ; std::allocator<_tagLMCItemInfo>::destroy
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT

; 224  : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 225  : 	for (; _First != _Last; ++_First)

  00003	eb 09		 jmp	 SHORT $L188989
$L188990:
  00005	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00008	83 c0 44	 add	 eax, 68			; 00000044H
  0000b	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$L188989:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00014	74 0e		 je	 SHORT $L188988

; 226  : 		_Al.destroy(_First);

  00016	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00019	52		 push	 edx
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  0001d	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z ; std::allocator<_tagLMCItemInfo>::destroy
  00022	eb e1		 jmp	 SHORT $L188990
$L188988:

; 227  : 	}

  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Destroy_range@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@0AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z ; std::allocator<_tagLMCItemInfo>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
xdata$x	SEGMENT
$T189745 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T189747 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L189741
$T189746 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T189747
$T189743 DD	019930520H
	DD	02H
	DD	FLAT:$T189745
	DD	01H
	DD	FLAT:$T189746
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >, COMDAT

; 207  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	51		 push	 ecx
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00024	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 208  : 	_FwdIt _Next = _First;

  00027	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002a	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 209  : 
; 210  : 	_TRY_BEGIN

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 211  : 	for (; 0 < _Count; --_Count, ++_First)

  00034	eb 12		 jmp	 SHORT $L188995
$L188996:
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00039	83 e9 01	 sub	 ecx, 1
  0003c	89 4d 0c	 mov	 DWORD PTR __Count$[ebp], ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00042	83 c2 44	 add	 edx, 68			; 00000044H
  00045	89 55 08	 mov	 DWORD PTR __First$[ebp], edx
$L188995:
  00048	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0004c	76 12		 jbe	 SHORT $L188997

; 212  : 		_Al.construct(_First, _Val);

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00055	51		 push	 ecx
  00056	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00059	e8 00 00 00 00	 call	 ?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z ; std::allocator<_tagLMCItemInfo>::construct
  0005e	eb d6		 jmp	 SHORT $L188996
$L188997:
  00060	eb 2a		 jmp	 SHORT $L189740
$L189741:

; 213  : 	_CATCH_ALL
; 214  : 	for (; _Next != _First; ++_Next)

  00062	eb 09		 jmp	 SHORT $L188998
$L188999:
  00064	8b 55 ec	 mov	 edx, DWORD PTR __Next$[ebp]
  00067	83 c2 44	 add	 edx, 68			; 00000044H
  0006a	89 55 ec	 mov	 DWORD PTR __Next$[ebp], edx
$L188998:
  0006d	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00070	3b 45 08	 cmp	 eax, DWORD PTR __First$[ebp]
  00073	74 0e		 je	 SHORT $L189000

; 215  : 		_Al.destroy(_Next);

  00075	8b 4d ec	 mov	 ecx, DWORD PTR __Next$[ebp]
  00078	51		 push	 ecx
  00079	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0007c	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z ; std::allocator<_tagLMCItemInfo>::destroy
  00081	eb e1		 jmp	 SHORT $L188999
$L189000:

; 216  : 	_RERAISE;

  00083	6a 00		 push	 0
  00085	6a 00		 push	 0
  00087	e8 00 00 00 00	 call	 __CxxThrowException@8
$L189740:

; 217  : 	_CATCH_END

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$L189739:

; 218  : 	}

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189743
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Uninit_fill_n@PAU_tagLMCItemInfo@@IU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAXPAU_tagLMCItemInfo@@IABU1@AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<_tagLMCItemInfo *,unsigned int,_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >
PUBLIC	??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??$_Uninitialized_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@@Z
_TEXT	SEGMENT
$T189751 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  0000b	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000e	50		 push	 eax
  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAU_tagLMCItemInfo@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_tagLMCItemInfo@@0@Z ; std::_Ptr_cat<_tagLMCItemInfo *,_tagLMCItemInfo *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T189751[ebp], al
  0001e	8a 55 ff	 mov	 dl, BYTE PTR $T189751[ebp]
  00021	52		 push	 edx
  00022	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >
  00037	83 c4 14	 add	 esp, 20			; 00000014H

; 129  : 	}

  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??$_Uninitialized_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>, COMDAT

; 1048 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L189043:

; 1049 : 	while (_First != _Last)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 20		 je	 SHORT $L189044

; 1050 : 		*--_Dest = *--_Last;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000e	83 e9 44	 sub	 ecx, 68			; 00000044H
  00011	89 4d 0c	 mov	 DWORD PTR __Last$[ebp], ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00017	83 ea 44	 sub	 edx, 68			; 00000044H
  0001a	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00024	e8 00 00 00 00	 call	 ??4_tagLMCItemInfo@@QAEAAU0@ABU0@@Z
  00029	eb d8		 jmp	 SHORT $L189043
$L189044:

; 1051 : 	return (_Dest);

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1052 : 	}

  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??$_Copy_backward_opt@PAU_tagLMCItemInfo@@PAU1@@std@@YAPAU_tagLMCItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<_tagLMCItemInfo *,_tagLMCItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z ; std::_Construct<_tagLMCItemInfo,_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z PROC NEAR ; std::allocator<_tagLMCItemInfo>::construct, COMDAT
; _this$ = ecx

; 146  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 		_Construct(_Ptr, _Val);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z ; std::_Construct<_tagLMCItemInfo,_tagLMCItemInfo>
  0001b	83 c4 08	 add	 esp, 8

; 148  : 		}

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z ENDP ; std::allocator<_tagLMCItemInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@U_tagLMCItemInfo@@@std@@YAXPAU_tagLMCItemInfo@@@Z ; std::_Destroy<_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
;	COMDAT ?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z PROC NEAR ; std::allocator<_tagLMCItemInfo>::destroy, COMDAT
; _this$ = ecx

; 151  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 		_Destroy(_Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy@U_tagLMCItemInfo@@@std@@YAXPAU_tagLMCItemInfo@@@Z ; std::_Destroy<_tagLMCItemInfo>
  00017	83 c4 04	 add	 esp, 4

; 153  : 		}

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z ENDP ; std::allocator<_tagLMCItemInfo>::destroy
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  : 			iterator _Tmp = *this;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d f4	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 237  : 			++*this;

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAEAAV012@XZ ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++

; 238  : 			return (_Tmp);

  0002a	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8b 45 f4	 mov	 eax, DWORD PTR __Tmp$[ebp]
  00030	89 02		 mov	 DWORD PTR [edx], eax
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 239  : 			}

  00035	52		 push	 edx
  00036	8b cd		 mov	 ecx, ebp
  00038	50		 push	 eax
  00039	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189758
  0003f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00044	58		 pop	 eax
  00045	5a		 pop	 edx
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$L189758:
  00056	01 00 00 00	 DD	 1
  0005a	00 00 00 00	 DD	 $L189757
$L189757:
  0005e	f4 ff ff ff	 DD	 -12			; fffffff4H
  00062	04 00 00 00	 DD	 4
  00066	00 00 00 00	 DD	 $L189756
$L189756:
  0006a	5f		 DB	 95			; 0000005fH
  0006b	54		 DB	 84			; 00000054H
  0006c	6d		 DB	 109			; 0000006dH
  0006d	70		 DB	 112			; 00000070H
  0006e	00		 DB	 0
??Eiterator@?$vector@U_tagLMCItemInfo@@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::vector<_tagLMCItemInfo,std::allocator<_tagLMCItemInfo> >::iterator::operator++
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
xdata$x	SEGMENT
$T189765 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T189767 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L189761
$T189766 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T189767
$T189763 DD	019930520H
	DD	02H
	DD	FLAT:$T189765
	DD	01H
	DD	FLAT:$T189766
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >, COMDAT

; 77   : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	51		 push	 ecx
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00024	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 78   : 	_FwdIt _Next = _Dest;

  00027	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002a	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 79   : 
; 80   : 	_TRY_BEGIN

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00034	eb 12		 jmp	 SHORT $L189066
$L189067:
  00036	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00039	83 c1 44	 add	 ecx, 68			; 00000044H
  0003c	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00042	83 c2 44	 add	 edx, 68			; 00000044H
  00045	89 55 08	 mov	 DWORD PTR __First$[ebp], edx
$L189066:
  00048	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0004b	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004e	74 12		 je	 SHORT $L189068

; 82   : 		_Al.construct(_Dest, *_First);

  00050	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00053	51		 push	 ecx
  00054	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00057	52		 push	 edx
  00058	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0005b	e8 00 00 00 00	 call	 ?construct@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@ABU3@@Z ; std::allocator<_tagLMCItemInfo>::construct
  00060	eb d4		 jmp	 SHORT $L189067
$L189068:
  00062	eb 2a		 jmp	 SHORT $L189760
$L189761:

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)

  00064	eb 09		 jmp	 SHORT $L189069
$L189070:
  00066	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00069	83 c0 44	 add	 eax, 68			; 00000044H
  0006c	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$L189069:
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR __Next$[ebp]
  00072	3b 4d 10	 cmp	 ecx, DWORD PTR __Dest$[ebp]
  00075	74 0e		 je	 SHORT $L189071

; 85   : 		_Al.destroy(_Next);

  00077	8b 55 ec	 mov	 edx, DWORD PTR __Next$[ebp]
  0007a	52		 push	 edx
  0007b	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0007e	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_tagLMCItemInfo@@@std@@QAEXPAU_tagLMCItemInfo@@@Z ; std::allocator<_tagLMCItemInfo>::destroy
  00083	eb e1		 jmp	 SHORT $L189070
$L189071:

; 86   : 	_RERAISE;

  00085	6a 00		 push	 0
  00087	6a 00		 push	 0
  00089	e8 00 00 00 00	 call	 __CxxThrowException@8
$L189760:

; 87   : 	_CATCH_END

  0008e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 88   : 	return (_Dest);

  00095	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$L189759:

; 89   : 	}

  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	83 c4 14	 add	 esp, 20			; 00000014H
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189763
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Uninit_copy@PAU_tagLMCItemInfo@@PAU1@V?$allocator@U_tagLMCItemInfo@@@std@@@std@@YAPAU_tagLMCItemInfo@@PAU1@00AAV?$allocator@U_tagLMCItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<_tagLMCItemInfo *,_tagLMCItemInfo *,std::allocator<_tagLMCItemInfo> >
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T189779 DD	0ffffffffH
	DD	FLAT:$L189775
$T189777 DD	019930520H
	DD	01H
	DD	FLAT:$T189779
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T189772 = -20						; size = 4
$T189771 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z PROC NEAR ; std::_Construct<_tagLMCItemInfo,_tagLMCItemInfo>, COMDAT

; 41   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00030	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00033	50		 push	 eax
  00034	6a 44		 push	 68			; 00000044H
  00036	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0003b	83 c4 08	 add	 esp, 8
  0003e	89 45 ec	 mov	 DWORD PTR $T189772[ebp], eax
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	83 7d ec 00	 cmp	 DWORD PTR $T189772[ebp], 0
  0004c	74 11		 je	 SHORT $L189773
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00051	51		 push	 ecx
  00052	8b 4d ec	 mov	 ecx, DWORD PTR $T189772[ebp]
  00055	e8 00 00 00 00	 call	 ??0_tagLMCItemInfo@@QAE@ABU0@@Z
  0005a	89 45 e8	 mov	 DWORD PTR tv74[ebp], eax
  0005d	eb 07		 jmp	 SHORT $L189774
$L189773:
  0005f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$L189774:
  00066	8b 55 e8	 mov	 edx, DWORD PTR tv74[ebp]
  00069	89 55 f0	 mov	 DWORD PTR $T189771[ebp], edx
  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 43   : 	}

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189775:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ec	 mov	 ecx, DWORD PTR $T189772[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189777
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Construct@U_tagLMCItemInfo@@U1@@std@@YAXPAU_tagLMCItemInfo@@ABU1@@Z ENDP ; std::_Construct<_tagLMCItemInfo,_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_G_tagLMCItemInfo@@QAEPAXI@Z			; _tagLMCItemInfo::`scalar deleting destructor'
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@U_tagLMCItemInfo@@@std@@YAXPAU_tagLMCItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_tagLMCItemInfo@@@std@@YAXPAU_tagLMCItemInfo@@@Z PROC NEAR ; std::_Destroy<_tagLMCItemInfo>, COMDAT

; 48   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);

  00003	6a 00		 push	 0
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??_G_tagLMCItemInfo@@QAEPAXI@Z

; 50   : 	}

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Destroy@U_tagLMCItemInfo@@@std@@YAXPAU_tagLMCItemInfo@@@Z ENDP ; std::_Destroy<_tagLMCItemInfo>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_G_tagLMCItemInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_tagLMCItemInfo@@QAEPAXI@Z PROC NEAR		; _tagLMCItemInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_tagLMCItemInfo@@QAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L189083
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L189083:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_G_tagLMCItemInfo@@QAEPAXI@Z ENDP			; _tagLMCItemInfo::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 26   : 		{	// return pointer to message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 		return (_Str.c_str());

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00015	8b f4		 mov	 esi, esp
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   : 		}

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
EXTRN	__imp_??0exception@@QAE@XZ:NEAR
EXTRN	__imp_??1exception@@UAE@XZ:NEAR
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
$T189795 DD	0ffffffffH
	DD	FLAT:$L189790
$T189793 DD	019930520H
	DD	01H
	DD	FLAT:$T189795
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@A@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@exception@@8
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b f4		 mov	 esi, esp
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@@QAE@XZ
  0002f	3b f4		 cmp	 esi, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7logic_error@std@@6B@
  00046	8b f4		 mov	 esi, esp
  00048	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 20   : 		}

  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00073	5e		 pop	 esi
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189790:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189793
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L91647
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L91647:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T189805 DD	0ffffffffH
	DD	FLAT:$L189800
$T189803 DD	019930520H
	DD	01H
	DD	FLAT:$T189805
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1logic_error@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003a	8b f4		 mov	 esi, esp
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b f4		 mov	 esi, esp
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@@UAE@XZ
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006c	5e		 pop	 esi
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189800:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1logic_error@std@@UAE@XZ:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189803
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7length_error@std@@6B@
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L91713
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L91713:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@@QAE@ABV0@@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T189817 DD	0ffffffffH
	DD	FLAT:$L189812
$T189815 DD	019930520H
	DD	01H
	DD	FLAT:$T189817
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b f4		 mov	 esi, esp
  00026	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@@QAE@ABV0@@Z
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7logic_error@std@@6B@
  0004a	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0004d	83 c2 0c	 add	 edx, 12			; 0000000cH
  00050	8b f4		 mov	 esi, esp
  00052	52		 push	 edx
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189812:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189815
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
END
