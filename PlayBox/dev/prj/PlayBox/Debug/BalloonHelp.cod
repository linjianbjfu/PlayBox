; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\BalloonHelp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@JFAOIAID@m_mov?5?$DN?$DN?50xB9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EF@FBPFHFEG@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBalloonHelp@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CBalloonHelp@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBalloonHelp@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CBalloonHelp@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCBalloonHelp@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CBalloonHelp@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBalloonHelp@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?unCLOSE_ON_LBUTTON_UP@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_LBUTTON_UP
PUBLIC	?unCLOSE_ON_MBUTTON_UP@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_MBUTTON_UP
PUBLIC	?unCLOSE_ON_RBUTTON_UP@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_RBUTTON_UP
PUBLIC	?unCLOSE_ON_LBUTTON_DOWN@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_LBUTTON_DOWN
PUBLIC	?unCLOSE_ON_MBUTTON_DOWN@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_MBUTTON_DOWN
PUBLIC	?unCLOSE_ON_RBUTTON_DOWN@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_RBUTTON_DOWN
PUBLIC	?unCLOSE_ON_MOUSE_MOVE@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_MOUSE_MOVE
PUBLIC	?unCLOSE_ON_KEYPRESS@CBalloonHelp@@2IB		; CBalloonHelp::unCLOSE_ON_KEYPRESS
PUBLIC	?unCLOSE_ON_ANYTHING@CBalloonHelp@@2IB		; CBalloonHelp::unCLOSE_ON_ANYTHING
PUBLIC	?unDELAY_CLOSE@CBalloonHelp@@2IB		; CBalloonHelp::unDELAY_CLOSE
PUBLIC	?unDELETE_THIS_ON_CLOSE@CBalloonHelp@@2IB	; CBalloonHelp::unDELETE_THIS_ON_CLOSE
PUBLIC	?unSHOW_CLOSE_BUTTON@CBalloonHelp@@2IB		; CBalloonHelp::unSHOW_CLOSE_BUTTON
PUBLIC	?unSHOW_INNER_SHADOW@CBalloonHelp@@2IB		; CBalloonHelp::unSHOW_INNER_SHADOW
PUBLIC	?unSHOW_TOPMOST@CBalloonHelp@@2IB		; CBalloonHelp::unSHOW_TOPMOST
PUBLIC	?unDISABLE_XP_SHADOW@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_XP_SHADOW
PUBLIC	?unDISABLE_FADEIN@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_FADEIN
PUBLIC	?unDISABLE_FADEOUT@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_FADEOUT
PUBLIC	?unDISABLE_FADE@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_FADE
PUBLIC	?nTIP_TAIL@CBalloonHelp@@1HB			; CBalloonHelp::nTIP_TAIL
PUBLIC	?nTIP_MARGIN@CBalloonHelp@@1HB			; CBalloonHelp::nTIP_MARGIN
PUBLIC	?OnShowWindow@CBalloonHelp@@IAEXHI@Z		; CBalloonHelp::OnShowWindow
PUBLIC	?OnPrint@CBalloonHelp@@IAEJIJ@Z			; CBalloonHelp::OnPrint
PUBLIC	?OnPrintClient@CBalloonHelp@@IAEJIJ@Z		; CBalloonHelp::OnPrintClient
PUBLIC	?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z	; CBalloonHelp::OnEraseBkgnd
PUBLIC	?OnPaint@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnPaint
PUBLIC	?OnNcPaint@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnNcPaint
PUBLIC	?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z	; CBalloonHelp::OnLButtonDown
PUBLIC	?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z	; CBalloonHelp::OnLButtonUp
PUBLIC	?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z ; CBalloonHelp::OnNcCalcSize
PUBLIC	?OnTimer@CBalloonHelp@@IAEXI@Z			; CBalloonHelp::OnTimer
PUBLIC	?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z	; CBalloonHelp::OnMouseMove
PUBLIC	?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z	; CBalloonHelp::OnNcHitTest
PUBLIC	?OnClose@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnClose
PUBLIC	?OnDestroy@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnDestroy
PUBLIC	?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B ; CBalloonHelp::_messageEntries
PUBLIC	?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B	; CBalloonHelp::messageMap
PUBLIC	?s_ClassAtom@CBalloonHelp@@0GA			; CBalloonHelp::s_ClassAtom
PUBLIC	?s_ClassAtomShadowed@CBalloonHelp@@0GA		; CBalloonHelp::s_ClassAtomShadowed
PUBLIC	_g_pfnGetSystemMetrics
PUBLIC	_g_pfnMonitorFromWindow
PUBLIC	_g_pfnMonitorFromRect
PUBLIC	_g_pfnMonitorFromPoint
PUBLIC	_g_pfnGetMonitorInfo
PUBLIC	_g_pfnEnumDisplayMonitors
PUBLIC	_g_pfnEnumDisplayDevices
PUBLIC	_g_fMultiMonInitDone
PUBLIC	_g_fMultimonPlatformNT
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:NEAR ; CWnd::GetThisMessageMap
_BSS	SEGMENT
?s_ClassAtom@CBalloonHelp@@0GA DW 01H DUP (?)		; CBalloonHelp::s_ClassAtom
	ALIGN	4

?s_ClassAtomShadowed@CBalloonHelp@@0GA DW 01H DUP (?)	; CBalloonHelp::s_ClassAtomShadowed
	ALIGN	4

_g_pfnGetSystemMetrics DD 01H DUP (?)
_g_pfnMonitorFromWindow DD 01H DUP (?)
_g_pfnMonitorFromRect DD 01H DUP (?)
_g_pfnMonitorFromPoint DD 01H DUP (?)
_g_pfnGetMonitorInfo DD 01H DUP (?)
_g_pfnEnumDisplayMonitors DD 01H DUP (?)
_g_pfnEnumDisplayDevices DD 01H DUP (?)
_g_fMultiMonInitDone DD 01H DUP (?)
_g_fMultimonPlatformNT DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG187342 DB	'USER32', 00H
	ORG $+1
$SG187351 DB	'GetSystemMetrics', 00H
	ORG $+3
$SG187352 DB	'MonitorFromWindow', 00H
	ORG $+2
$SG187353 DB	'MonitorFromRect', 00H
$SG187354 DB	'MonitorFromPoint', 00H
	ORG $+3
$SG187355 DB	'EnumDisplayMonitors', 00H
$SG187356 DB	'GetMonitorInfoA', 00H
$SG187357 DB	'EnumDisplayDevicesA', 00H
$SG187411 DB	'DISPLAY', 00H
$SG187451 DB	'DISPLAY', 00H
$SG187454 DB	'DISPLAY', 00H
CONST	ENDS
_DATA	SEGMENT
_THIS_FILE DB	'.\src\Gui\util\BalloonHelp.cpp', 00H
_DATA	ENDS
CONST	SEGMENT
?unCLOSE_ON_LBUTTON_UP@CBalloonHelp@@2IB DD 01H		; CBalloonHelp::unCLOSE_ON_LBUTTON_UP
?unCLOSE_ON_MBUTTON_UP@CBalloonHelp@@2IB DD 02H		; CBalloonHelp::unCLOSE_ON_MBUTTON_UP
?unCLOSE_ON_RBUTTON_UP@CBalloonHelp@@2IB DD 04H		; CBalloonHelp::unCLOSE_ON_RBUTTON_UP
?unCLOSE_ON_LBUTTON_DOWN@CBalloonHelp@@2IB DD 08H	; CBalloonHelp::unCLOSE_ON_LBUTTON_DOWN
?unCLOSE_ON_MBUTTON_DOWN@CBalloonHelp@@2IB DD 010H	; CBalloonHelp::unCLOSE_ON_MBUTTON_DOWN
?unCLOSE_ON_RBUTTON_DOWN@CBalloonHelp@@2IB DD 020H	; CBalloonHelp::unCLOSE_ON_RBUTTON_DOWN
?unCLOSE_ON_MOUSE_MOVE@CBalloonHelp@@2IB DD 040H	; CBalloonHelp::unCLOSE_ON_MOUSE_MOVE
?unCLOSE_ON_KEYPRESS@CBalloonHelp@@2IB DD 080H		; CBalloonHelp::unCLOSE_ON_KEYPRESS
?unCLOSE_ON_ANYTHING@CBalloonHelp@@2IB DD 07fH		; CBalloonHelp::unCLOSE_ON_ANYTHING
?unDELAY_CLOSE@CBalloonHelp@@2IB DD 0100H		; CBalloonHelp::unDELAY_CLOSE
?unDELETE_THIS_ON_CLOSE@CBalloonHelp@@2IB DD 0200H	; CBalloonHelp::unDELETE_THIS_ON_CLOSE
?unSHOW_CLOSE_BUTTON@CBalloonHelp@@2IB DD 0400H		; CBalloonHelp::unSHOW_CLOSE_BUTTON
?unSHOW_INNER_SHADOW@CBalloonHelp@@2IB DD 0800H		; CBalloonHelp::unSHOW_INNER_SHADOW
?unSHOW_TOPMOST@CBalloonHelp@@2IB DD 01000H		; CBalloonHelp::unSHOW_TOPMOST
?unDISABLE_XP_SHADOW@CBalloonHelp@@2IB DD 02000H	; CBalloonHelp::unDISABLE_XP_SHADOW
?unDISABLE_FADEIN@CBalloonHelp@@2IB DD 04000H		; CBalloonHelp::unDISABLE_FADEIN
?unDISABLE_FADEOUT@CBalloonHelp@@2IB DD 08000H		; CBalloonHelp::unDISABLE_FADEOUT
?unDISABLE_FADE@CBalloonHelp@@2IB DD 0c000H		; CBalloonHelp::unDISABLE_FADE
?nTIP_TAIL@CBalloonHelp@@1HB DD 014H			; CBalloonHelp::nTIP_TAIL
?nTIP_MARGIN@CBalloonHelp@@1HB DD 08H			; CBalloonHelp::nTIP_MARGIN
$SG187477 DB	00H
$SG187478 DB	00H
	ORG $+2
$SG187480 DB	'USER32.DLL', 00H
	ORG $+1
$SG187483 DB	'AnimateWindow', 00H
	ORG $+2
$SG187855 DB	'BalloonHelpClassDS', 00H
	ORG $+1
$SG187856 DB	'BalloonHelpClass', 00H
CONST	ENDS
;	COMDAT ?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B DD 014H ; CBalloonHelp::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnPaint@CBalloonHelp@@IAEXXZ
	DD	085H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnNcPaint@CBalloonHelp@@IAEXXZ
	DD	0201H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z
	DD	0202H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z
	DD	083H
	DD	00H
	DD	00H
	DD	00H
	DD	02fH
	DD	FLAT:?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z
	DD	0113H
	DD	00H
	DD	00H
	DD	00H
	DD	011H
	DD	FLAT:?OnTimer@CBalloonHelp@@IAEXI@Z
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DD	02dH
	DD	FLAT:?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z
	DD	0200H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnDestroy@CBalloonHelp@@IAEXXZ
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnClose@CBalloonHelp@@IAEXXZ
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DD	012H
	DD	FLAT:?OnShowWindow@CBalloonHelp@@IAEXHI@Z
	DD	0317H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnPrint@CBalloonHelp@@IAEJIJ@Z
	DD	0318H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnPrintClient@CBalloonHelp@@IAEJIJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B
CONST	SEGMENT
?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; CBalloonHelp::messageMap
	DD	FLAT:?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	_IsPlatformNT
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__GetVersionExA@4:NEAR
;	COMDAT rtc$IMZ
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\multimon.h
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_osvi$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_IsPlatformNT PROC NEAR

; 169  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00011	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 170  :     OSVERSIONINFOA osvi = {0};

  00025	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _osvi$[ebp], 0
  0002f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00034	33 c0		 xor	 eax, eax
  00036	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR _osvi$[ebp+4]
  0003c	f3 ab		 rep stosd

; 171  :     osvi.dwOSVersionInfoSize = sizeof(osvi);

  0003e	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _osvi$[ebp], 148 ; 00000094H

; 172  :     GetVersionExA((OSVERSIONINFOA*)&osvi);

  00048	8b f4		 mov	 esi, esp
  0004a	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _osvi$[ebp]
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 173  :     return (VER_PLATFORM_WIN32_NT == osvi.dwPlatformId);    

  0005e	33 c0		 xor	 eax, eax
  00060	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _osvi$[ebp+16], 2
  00067	0f 94 c0	 sete	 al

; 174  : }

  0006a	52		 push	 edx
  0006b	8b cd		 mov	 ecx, ebp
  0006d	50		 push	 eax
  0006e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188739
  00074	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00079	58		 pop	 eax
  0007a	5a		 pop	 edx
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$L188739:
  00096	01 00 00 00	 DD	 1
  0009a	00 00 00 00	 DD	 $L188738
$L188738:
  0009e	64 ff ff ff	 DD	 -156			; ffffff64H
  000a2	94 00 00 00	 DD	 148			; 00000094H
  000a6	00 00 00 00	 DD	 $L188735
$L188735:
  000aa	6f		 DB	 111			; 0000006fH
  000ab	73		 DB	 115			; 00000073H
  000ac	76		 DB	 118			; 00000076H
  000ad	69		 DB	 105			; 00000069H
  000ae	00		 DB	 0
_IsPlatformNT ENDP
_TEXT	ENDS
PUBLIC	_InitMultipleMonitorStubs
EXTRN	__imp__GetProcAddress@8:NEAR
EXTRN	__imp__GetModuleHandleA@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_hUser32$ = -4						; size = 4
_InitMultipleMonitorStubs PROC NEAR

; 177  : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	51		 push	 ecx
  000b4	56		 push	 esi
  000b5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 178  :     HMODULE hUser32;
; 179  :     if (g_fMultiMonInitDone)

  000bc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fMultiMonInitDone, 0
  000c3	74 11		 je	 SHORT $L187341

; 180  :     {
; 181  :         return g_pfnGetMonitorInfo != NULL;

  000c5	33 c0		 xor	 eax, eax
  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnGetMonitorInfo, 0
  000ce	0f 95 c0	 setne	 al
  000d1	e9 a8 01 00 00	 jmp	 $L187339
$L187341:

; 182  :     }
; 183  : 
; 184  :     g_fMultimonPlatformNT = IsPlatformNT();

  000d6	e8 00 00 00 00	 call	 _IsPlatformNT
  000db	a3 00 00 00 00	 mov	 DWORD PTR _g_fMultimonPlatformNT, eax

; 185  :     hUser32 = GetModuleHandle(TEXT("USER32"));

  000e0	8b f4		 mov	 esi, esp
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:$SG187342
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  000ed	3b f4		 cmp	 esi, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	89 45 fc	 mov	 DWORD PTR _hUser32$[ebp], eax

; 186  :     if (hUser32 &&
; 187  :         (*(FARPROC*)&g_pfnGetSystemMetrics    = GetProcAddress(hUser32,"GetSystemMetrics")) != NULL &&
; 188  :         (*(FARPROC*)&g_pfnMonitorFromWindow   = GetProcAddress(hUser32,"MonitorFromWindow")) != NULL &&
; 189  :         (*(FARPROC*)&g_pfnMonitorFromRect     = GetProcAddress(hUser32,"MonitorFromRect")) != NULL &&
; 190  :         (*(FARPROC*)&g_pfnMonitorFromPoint    = GetProcAddress(hUser32,"MonitorFromPoint")) != NULL &&
; 191  :         (*(FARPROC*)&g_pfnEnumDisplayMonitors = GetProcAddress(hUser32,"EnumDisplayMonitors")) != NULL &&
; 192  : #ifdef UNICODE
; 193  :         (*(FARPROC*)&g_pfnEnumDisplayDevices  = GetProcAddress(hUser32,"EnumDisplayDevicesW")) != NULL &&
; 194  :         (*(FARPROC*)&g_pfnGetMonitorInfo      = g_fMultimonPlatformNT ? GetProcAddress(hUser32,"GetMonitorInfoW") : 
; 195  :                                                 GetProcAddress(hUser32,"GetMonitorInfoA")) != NULL
; 196  : #else
; 197  :         (*(FARPROC*)&g_pfnGetMonitorInfo      = GetProcAddress(hUser32,"GetMonitorInfoA")) != NULL &&
; 198  :         (*(FARPROC*)&g_pfnEnumDisplayDevices  = GetProcAddress(hUser32,"EnumDisplayDevicesA")) != NULL
; 199  : #endif
; 200  :     ) {

  000f7	83 7d fc 00	 cmp	 DWORD PTR _hUser32$[ebp], 0
  000fb	0f 84 2b 01 00
	00		 je	 $L187350
  00101	8b f4		 mov	 esi, esp
  00103	68 00 00 00 00	 push	 OFFSET FLAT:$SG187351
  00108	8b 45 fc	 mov	 eax, DWORD PTR _hUser32$[ebp]
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00112	3b f4		 cmp	 esi, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00119	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnGetSystemMetrics, eax
  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnGetSystemMetrics, 0
  00125	0f 84 01 01 00
	00		 je	 $L187350
  0012b	8b f4		 mov	 esi, esp
  0012d	68 00 00 00 00	 push	 OFFSET FLAT:$SG187352
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _hUser32$[ebp]
  00135	51		 push	 ecx
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0013c	3b f4		 cmp	 esi, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromWindow, eax
  00148	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnMonitorFromWindow, 0
  0014f	0f 84 d7 00 00
	00		 je	 $L187350
  00155	8b f4		 mov	 esi, esp
  00157	68 00 00 00 00	 push	 OFFSET FLAT:$SG187353
  0015c	8b 55 fc	 mov	 edx, DWORD PTR _hUser32$[ebp]
  0015f	52		 push	 edx
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromRect, eax
  00172	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnMonitorFromRect, 0
  00179	0f 84 ad 00 00
	00		 je	 $L187350
  0017f	8b f4		 mov	 esi, esp
  00181	68 00 00 00 00	 push	 OFFSET FLAT:$SG187354
  00186	8b 45 fc	 mov	 eax, DWORD PTR _hUser32$[ebp]
  00189	50		 push	 eax
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00190	3b f4		 cmp	 esi, esp
  00192	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00197	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromPoint, eax
  0019c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnMonitorFromPoint, 0
  001a3	0f 84 83 00 00
	00		 je	 $L187350
  001a9	8b f4		 mov	 esi, esp
  001ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG187355
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR _hUser32$[ebp]
  001b3	51		 push	 ecx
  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  001ba	3b f4		 cmp	 esi, esp
  001bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c1	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayMonitors, eax
  001c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnEnumDisplayMonitors, 0
  001cd	74 5d		 je	 SHORT $L187350
  001cf	8b f4		 mov	 esi, esp
  001d1	68 00 00 00 00	 push	 OFFSET FLAT:$SG187356
  001d6	8b 55 fc	 mov	 edx, DWORD PTR _hUser32$[ebp]
  001d9	52		 push	 edx
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  001e0	3b f4		 cmp	 esi, esp
  001e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e7	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnGetMonitorInfo, eax
  001ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnGetMonitorInfo, 0
  001f3	74 37		 je	 SHORT $L187350
  001f5	8b f4		 mov	 esi, esp
  001f7	68 00 00 00 00	 push	 OFFSET FLAT:$SG187357
  001fc	8b 45 fc	 mov	 eax, DWORD PTR _hUser32$[ebp]
  001ff	50		 push	 eax
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00206	3b f4		 cmp	 esi, esp
  00208	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020d	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayDevices, eax
  00212	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnEnumDisplayDevices, 0
  00219	74 11		 je	 SHORT $L187350

; 201  :         g_fMultiMonInitDone = TRUE;

  0021b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fMultiMonInitDone, 1

; 202  :         return TRUE;

  00225	b8 01 00 00 00	 mov	 eax, 1
  0022a	eb 52		 jmp	 SHORT $L187339
$L187350:

; 203  :     }
; 204  :     else
; 205  :     {
; 206  :         g_pfnGetSystemMetrics    = NULL;

  0022c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnGetSystemMetrics, 0

; 207  :         g_pfnMonitorFromWindow   = NULL;

  00236	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromWindow, 0

; 208  :         g_pfnMonitorFromRect     = NULL;

  00240	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromRect, 0

; 209  :         g_pfnMonitorFromPoint    = NULL;

  0024a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromPoint, 0

; 210  :         g_pfnGetMonitorInfo      = NULL;

  00254	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnGetMonitorInfo, 0

; 211  :         g_pfnEnumDisplayMonitors = NULL;

  0025e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayMonitors, 0

; 212  :         g_pfnEnumDisplayDevices  = NULL;

  00268	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayDevices, 0

; 213  : 
; 214  :         g_fMultiMonInitDone = TRUE;

  00272	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fMultiMonInitDone, 1

; 215  :         return FALSE;

  0027c	33 c0		 xor	 eax, eax
$L187339:

; 216  :     }
; 217  : }

  0027e	5e		 pop	 esi
  0027f	83 c4 04	 add	 esp, 4
  00282	3b ec		 cmp	 ebp, esp
  00284	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00289	8b e5		 mov	 esp, ebp
  0028b	5d		 pop	 ebp
  0028c	c3		 ret	 0
_InitMultipleMonitorStubs ENDP
_TEXT	ENDS
PUBLIC	_xGetSystemMetrics@4
EXTRN	__imp__GetSystemMetrics@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_nIndex$ = 8						; size = 4
_xGetSystemMetrics@4 PROC NEAR

; 228  : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	51		 push	 ecx
  00294	56		 push	 esi
  00295	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 229  :     if (InitMultipleMonitorStubs())

  0029c	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  002a1	85 c0		 test	 eax, eax
  002a3	74 15		 je	 SHORT $L187362

; 230  :         return g_pfnGetSystemMetrics(nIndex);

  002a5	8b f4		 mov	 esi, esp
  002a7	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  002aa	50		 push	 eax
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnGetSystemMetrics
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	eb 4d		 jmp	 SHORT $L187361
$L187362:

; 231  : 
; 232  :     switch (nIndex)

  002ba	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  002bd	89 4d fc	 mov	 DWORD PTR tv68[ebp], ecx
  002c0	8b 55 fc	 mov	 edx, DWORD PTR tv68[ebp]
  002c3	83 ea 4c	 sub	 edx, 76			; 0000004cH
  002c6	89 55 fc	 mov	 DWORD PTR tv68[ebp], edx
  002c9	83 7d fc 05	 cmp	 DWORD PTR tv68[ebp], 5
  002cd	77 25		 ja	 SHORT $L187364
  002cf	8b 45 fc	 mov	 eax, DWORD PTR tv68[ebp]
  002d2	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L188744[eax*4]
$L187367:

; 233  :     {
; 234  :     case SM_CMONITORS:
; 235  :     case SM_SAMEDISPLAYFORMAT:
; 236  :         return 1;

  002d9	b8 01 00 00 00	 mov	 eax, 1
  002de	eb 27		 jmp	 SHORT $L187361
$L187368:

; 237  : 
; 238  :     case SM_XVIRTUALSCREEN:
; 239  :     case SM_YVIRTUALSCREEN:
; 240  :         return 0;

  002e0	33 c0		 xor	 eax, eax
  002e2	eb 23		 jmp	 SHORT $L187361
$L187369:

; 241  : 
; 242  :     case SM_CXVIRTUALSCREEN:
; 243  :         nIndex = SM_CXSCREEN;

  002e4	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _nIndex$[ebp], 0

; 244  :         break;

  002eb	eb 07		 jmp	 SHORT $L187364
$L187370:

; 245  : 
; 246  :     case SM_CYVIRTUALSCREEN:
; 247  :         nIndex = SM_CYSCREEN;

  002ed	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _nIndex$[ebp], 1
$L187364:

; 248  :         break;
; 249  :     }
; 250  : 
; 251  :     return GetSystemMetrics(nIndex);

  002f4	8b f4		 mov	 esi, esp
  002f6	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  002f9	51		 push	 ecx
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187361:

; 252  : }

  00307	5e		 pop	 esi
  00308	83 c4 04	 add	 esp, 4
  0030b	3b ec		 cmp	 ebp, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	8b e5		 mov	 esp, ebp
  00314	5d		 pop	 ebp
  00315	c2 04 00	 ret	 4
$L188744:
  00318	00 00 00 00	 DD	 $L187368
  0031c	00 00 00 00	 DD	 $L187368
  00320	00 00 00 00	 DD	 $L187369
  00324	00 00 00 00	 DD	 $L187370
  00328	00 00 00 00	 DD	 $L187367
  0032c	00 00 00 00	 DD	 $L187367
_xGetSystemMetrics@4 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromPoint@12
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_ptScreenCoords$ = 8					; size = 8
_dwFlags$ = 16						; size = 4
_xMonitorFromPoint@12 PROC NEAR

; 258  : {

  00330	55		 push	 ebp
  00331	8b ec		 mov	 ebp, esp
  00333	56		 push	 esi

; 259  :     if (InitMultipleMonitorStubs())

  00334	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  00339	85 c0		 test	 eax, eax
  0033b	74 1d		 je	 SHORT $L187375

; 260  :         return g_pfnMonitorFromPoint(ptScreenCoords, dwFlags);

  0033d	8b f4		 mov	 esi, esp
  0033f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00342	50		 push	 eax
  00343	8b 4d 0c	 mov	 ecx, DWORD PTR _ptScreenCoords$[ebp+4]
  00346	51		 push	 ecx
  00347	8b 55 08	 mov	 edx, DWORD PTR _ptScreenCoords$[ebp]
  0034a	52		 push	 edx
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnMonitorFromPoint
  00351	3b f4		 cmp	 esi, esp
  00353	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00358	eb 49		 jmp	 SHORT $L187374
$L187375:

; 261  : 
; 262  :     if ((dwFlags & (MONITOR_DEFAULTTOPRIMARY | MONITOR_DEFAULTTONEAREST)) ||
; 263  :         ((ptScreenCoords.x >= 0) &&
; 264  :         (ptScreenCoords.x < GetSystemMetrics(SM_CXSCREEN)) &&
; 265  :         (ptScreenCoords.y >= 0) &&
; 266  :         (ptScreenCoords.y < GetSystemMetrics(SM_CYSCREEN))))

  0035a	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0035d	83 e0 03	 and	 eax, 3
  00360	75 38		 jne	 SHORT $L187377
  00362	83 7d 08 00	 cmp	 DWORD PTR _ptScreenCoords$[ebp], 0
  00366	7c 39		 jl	 SHORT $L187376
  00368	8b f4		 mov	 esi, esp
  0036a	6a 00		 push	 0
  0036c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00372	3b f4		 cmp	 esi, esp
  00374	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00379	39 45 08	 cmp	 DWORD PTR _ptScreenCoords$[ebp], eax
  0037c	7d 23		 jge	 SHORT $L187376
  0037e	83 7d 0c 00	 cmp	 DWORD PTR _ptScreenCoords$[ebp+4], 0
  00382	7c 1d		 jl	 SHORT $L187376
  00384	8b f4		 mov	 esi, esp
  00386	6a 01		 push	 1
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0038e	3b f4		 cmp	 esi, esp
  00390	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00395	39 45 0c	 cmp	 DWORD PTR _ptScreenCoords$[ebp+4], eax
  00398	7d 07		 jge	 SHORT $L187376
$L187377:

; 267  :     {
; 268  :         return xPRIMARY_MONITOR;

  0039a	b8 42 00 34 12	 mov	 eax, 305397826		; 12340042H
  0039f	eb 02		 jmp	 SHORT $L187374
$L187376:

; 269  :     }
; 270  : 
; 271  :     return NULL;

  003a1	33 c0		 xor	 eax, eax
$L187374:

; 272  : }

  003a3	5e		 pop	 esi
  003a4	3b ec		 cmp	 ebp, esp
  003a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ab	5d		 pop	 ebp
  003ac	c2 0c 00	 ret	 12			; 0000000cH
_xMonitorFromPoint@12 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromRect@8
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_lprcScreenCoords$ = 8					; size = 4
_dwFlags$ = 12						; size = 4
_xMonitorFromRect@8 PROC NEAR

; 276  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	56		 push	 esi

; 277  :     if (InitMultipleMonitorStubs())

  003b4	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  003b9	85 c0		 test	 eax, eax
  003bb	74 19		 je	 SHORT $L187383

; 278  :         return g_pfnMonitorFromRect(lprcScreenCoords, dwFlags);

  003bd	8b f4		 mov	 esi, esp
  003bf	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  003c2	50		 push	 eax
  003c3	8b 4d 08	 mov	 ecx, DWORD PTR _lprcScreenCoords$[ebp]
  003c6	51		 push	 ecx
  003c7	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnMonitorFromRect
  003cd	3b f4		 cmp	 esi, esp
  003cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d4	eb 54		 jmp	 SHORT $L187382
$L187383:

; 279  : 
; 280  :     if ((dwFlags & (MONITOR_DEFAULTTOPRIMARY | MONITOR_DEFAULTTONEAREST)) ||
; 281  :         ((lprcScreenCoords->right > 0) &&
; 282  :         (lprcScreenCoords->bottom > 0) &&
; 283  :         (lprcScreenCoords->left < GetSystemMetrics(SM_CXSCREEN)) &&
; 284  :         (lprcScreenCoords->top < GetSystemMetrics(SM_CYSCREEN))))

  003d6	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  003d9	83 e2 03	 and	 edx, 3
  003dc	75 43		 jne	 SHORT $L187385
  003de	8b 45 08	 mov	 eax, DWORD PTR _lprcScreenCoords$[ebp]
  003e1	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  003e5	7e 41		 jle	 SHORT $L187384
  003e7	8b 4d 08	 mov	 ecx, DWORD PTR _lprcScreenCoords$[ebp]
  003ea	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  003ee	7e 38		 jle	 SHORT $L187384
  003f0	8b f4		 mov	 esi, esp
  003f2	6a 00		 push	 0
  003f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  003fa	3b f4		 cmp	 esi, esp
  003fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00401	8b 55 08	 mov	 edx, DWORD PTR _lprcScreenCoords$[ebp]
  00404	39 02		 cmp	 DWORD PTR [edx], eax
  00406	7d 20		 jge	 SHORT $L187384
  00408	8b f4		 mov	 esi, esp
  0040a	6a 01		 push	 1
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00412	3b f4		 cmp	 esi, esp
  00414	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00419	8b 4d 08	 mov	 ecx, DWORD PTR _lprcScreenCoords$[ebp]
  0041c	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  0041f	7d 07		 jge	 SHORT $L187384
$L187385:

; 285  :     {
; 286  :         return xPRIMARY_MONITOR;

  00421	b8 42 00 34 12	 mov	 eax, 305397826		; 12340042H
  00426	eb 02		 jmp	 SHORT $L187382
$L187384:

; 287  :     }
; 288  : 
; 289  :     return NULL;

  00428	33 c0		 xor	 eax, eax
$L187382:

; 290  : }

  0042a	5e		 pop	 esi
  0042b	3b ec		 cmp	 ebp, esp
  0042d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00432	5d		 pop	 ebp
  00433	c2 08 00	 ret	 8
_xMonitorFromRect@8 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromWindow@8
EXTRN	__imp__GetWindowPlacement@8:NEAR
EXTRN	__imp__IsIconic@4:NEAR
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv80 = -56						; size = 4
_wp$ = -48						; size = 44
_hWnd$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_xMonitorFromWindow@8 PROC NEAR

; 294  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 38	 sub	 esp, 56			; 00000038H
  00446	56		 push	 esi
  00447	57		 push	 edi
  00448	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0044b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00450	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00455	f3 ab		 rep stosd

; 295  :     WINDOWPLACEMENT wp;
; 296  : 
; 297  :     if (InitMultipleMonitorStubs())

  00457	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  0045c	85 c0		 test	 eax, eax
  0045e	74 19		 je	 SHORT $L187392

; 298  :         return g_pfnMonitorFromWindow(hWnd, dwFlags);

  00460	8b f4		 mov	 esi, esp
  00462	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00465	50		 push	 eax
  00466	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00469	51		 push	 ecx
  0046a	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnMonitorFromWindow
  00470	3b f4		 cmp	 esi, esp
  00472	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00477	eb 73		 jmp	 SHORT $L187390
$L187392:

; 299  : 
; 300  :     if (dwFlags & (MONITOR_DEFAULTTOPRIMARY | MONITOR_DEFAULTTONEAREST))

  00479	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0047c	83 e2 03	 and	 edx, 3
  0047f	74 07		 je	 SHORT $L187393

; 301  :         return xPRIMARY_MONITOR;

  00481	b8 42 00 34 12	 mov	 eax, 305397826		; 12340042H
  00486	eb 64		 jmp	 SHORT $L187390
$L187393:

; 302  : 
; 303  :     if (IsIconic(hWnd) ?
; 304  :             GetWindowPlacement(hWnd, &wp) :
; 305  :             GetWindowRect(hWnd, &wp.rcNormalPosition)) {

  00488	8b f4		 mov	 esi, esp
  0048a	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0048d	50		 push	 eax
  0048e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsIconic@4
  00494	3b f4		 cmp	 esi, esp
  00496	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0049b	85 c0		 test	 eax, eax
  0049d	74 1c		 je	 SHORT $L188748
  0049f	8b f4		 mov	 esi, esp
  004a1	8d 4d d0	 lea	 ecx, DWORD PTR _wp$[ebp]
  004a4	51		 push	 ecx
  004a5	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  004a8	52		 push	 edx
  004a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowPlacement@8
  004af	3b f4		 cmp	 esi, esp
  004b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004b6	89 45 c8	 mov	 DWORD PTR tv80[ebp], eax
  004b9	eb 1a		 jmp	 SHORT $L188749
$L188748:
  004bb	8b f4		 mov	 esi, esp
  004bd	8d 45 ec	 lea	 eax, DWORD PTR _wp$[ebp+28]
  004c0	50		 push	 eax
  004c1	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  004c4	51		 push	 ecx
  004c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  004cb	3b f4		 cmp	 esi, esp
  004cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004d2	89 45 c8	 mov	 DWORD PTR tv80[ebp], eax
$L188749:
  004d5	83 7d c8 00	 cmp	 DWORD PTR tv80[ebp], 0
  004d9	74 0f		 je	 SHORT $L187395

; 306  : 
; 307  :         return xMonitorFromRect(&wp.rcNormalPosition, dwFlags);

  004db	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  004de	52		 push	 edx
  004df	8d 45 ec	 lea	 eax, DWORD PTR _wp$[ebp+28]
  004e2	50		 push	 eax
  004e3	e8 00 00 00 00	 call	 _xMonitorFromRect@8
  004e8	eb 02		 jmp	 SHORT $L187390
$L187395:

; 308  :     }
; 309  : 
; 310  :     return NULL;

  004ea	33 c0		 xor	 eax, eax
$L187390:

; 311  : }

  004ec	52		 push	 edx
  004ed	8b cd		 mov	 ecx, ebp
  004ef	50		 push	 eax
  004f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188752
  004f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004fb	58		 pop	 eax
  004fc	5a		 pop	 edx
  004fd	5f		 pop	 edi
  004fe	5e		 pop	 esi
  004ff	83 c4 38	 add	 esp, 56			; 00000038H
  00502	3b ec		 cmp	 ebp, esp
  00504	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00509	8b e5		 mov	 esp, ebp
  0050b	5d		 pop	 ebp
  0050c	c2 08 00	 ret	 8
$L188752:
  0050f	01 00 00 00	 DD	 1
  00513	00 00 00 00	 DD	 $L188751
$L188751:
  00517	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0051b	2c 00 00 00	 DD	 44			; 0000002cH
  0051f	00 00 00 00	 DD	 $L188750
$L188750:
  00523	77		 DB	 119			; 00000077H
  00524	70		 DB	 112			; 00000070H
  00525	00		 DB	 0
_xMonitorFromWindow@8 ENDP
_TEXT	ENDS
PUBLIC	_xGetMonitorInfo@8
EXTRN	__imp__lstrcpynA@12:NEAR
EXTRN	__imp__SystemParametersInfoA@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_f$187402 = -28						; size = 4
_rcWork$ = -20						; size = 16
_hMonitor$ = 8						; size = 4
_lpMonitorInfo$ = 12					; size = 4
_xGetMonitorInfo@8 PROC NEAR

; 315  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00536	56		 push	 esi
  00537	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0053c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0053f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00542	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00545	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00548	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0054b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0054e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 316  :     RECT rcWork;
; 317  : 
; 318  :     if (InitMultipleMonitorStubs())

  00551	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  00556	85 c0		 test	 eax, eax
  00558	74 22		 je	 SHORT $L187401

; 319  :     {
; 320  :         BOOL f = g_pfnGetMonitorInfo(hMonitor, lpMonitorInfo);

  0055a	8b f4		 mov	 esi, esp
  0055c	8b 45 0c	 mov	 eax, DWORD PTR _lpMonitorInfo$[ebp]
  0055f	50		 push	 eax
  00560	8b 4d 08	 mov	 ecx, DWORD PTR _hMonitor$[ebp]
  00563	51		 push	 ecx
  00564	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnGetMonitorInfo
  0056a	3b f4		 cmp	 esi, esp
  0056c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00571	89 45 e4	 mov	 DWORD PTR _f$187402[ebp], eax

; 321  : #ifdef UNICODE
; 322  :         if (f && !g_fMultimonPlatformNT && (lpMonitorInfo->cbSize >= sizeof(MONITORINFOEX)))
; 323  :         { 
; 324  :             MultiByteToWideChar(CP_ACP, 0,
; 325  :                 (LPSTR)((MONITORINFOEX*)lpMonitorInfo)->szDevice, -1,
; 326  :                 ((MONITORINFOEX*)lpMonitorInfo)->szDevice, (sizeof(((MONITORINFOEX*)lpMonitorInfo)->szDevice)/sizeof(TCHAR)));
; 327  :         }
; 328  : #endif
; 329  :         return f;

  00574	8b 45 e4	 mov	 eax, DWORD PTR _f$187402[ebp]
  00577	e9 db 00 00 00	 jmp	 $L187399
$L187401:

; 330  :     }
; 331  : 
; 332  :     if ((hMonitor == xPRIMARY_MONITOR) &&
; 333  :         lpMonitorInfo &&
; 334  :         (lpMonitorInfo->cbSize >= sizeof(MONITORINFO)) &&
; 335  :         SystemParametersInfoA(SPI_GETWORKAREA, 0, &rcWork, 0))

  0057c	81 7d 08 42 00
	34 12		 cmp	 DWORD PTR _hMonitor$[ebp], 305397826 ; 12340042H
  00583	0f 85 cc 00 00
	00		 jne	 $L187405
  00589	83 7d 0c 00	 cmp	 DWORD PTR _lpMonitorInfo$[ebp], 0
  0058d	0f 84 c2 00 00
	00		 je	 $L187405
  00593	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  00596	83 3a 28	 cmp	 DWORD PTR [edx], 40	; 00000028H
  00599	0f 82 b6 00 00
	00		 jb	 $L187405
  0059f	8b f4		 mov	 esi, esp
  005a1	6a 00		 push	 0
  005a3	8d 45 ec	 lea	 eax, DWORD PTR _rcWork$[ebp]
  005a6	50		 push	 eax
  005a7	6a 00		 push	 0
  005a9	6a 30		 push	 48			; 00000030H
  005ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  005b1	3b f4		 cmp	 esi, esp
  005b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005b8	85 c0		 test	 eax, eax
  005ba	0f 84 95 00 00
	00		 je	 $L187405

; 336  :     {
; 337  :         lpMonitorInfo->rcMonitor.left = 0;

  005c0	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMonitorInfo$[ebp]
  005c3	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 338  :         lpMonitorInfo->rcMonitor.top  = 0;

  005ca	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  005cd	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 339  :         lpMonitorInfo->rcMonitor.right  = GetSystemMetrics(SM_CXSCREEN);

  005d4	8b f4		 mov	 esi, esp
  005d6	6a 00		 push	 0
  005d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  005de	3b f4		 cmp	 esi, esp
  005e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005e5	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMonitorInfo$[ebp]
  005e8	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 340  :         lpMonitorInfo->rcMonitor.bottom = GetSystemMetrics(SM_CYSCREEN);

  005eb	8b f4		 mov	 esi, esp
  005ed	6a 01		 push	 1
  005ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  005f5	3b f4		 cmp	 esi, esp
  005f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005fc	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  005ff	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 341  :         lpMonitorInfo->rcWork = rcWork;

  00602	8b 45 0c	 mov	 eax, DWORD PTR _lpMonitorInfo$[ebp]
  00605	83 c0 14	 add	 eax, 20			; 00000014H
  00608	8b 4d ec	 mov	 ecx, DWORD PTR _rcWork$[ebp]
  0060b	89 08		 mov	 DWORD PTR [eax], ecx
  0060d	8b 55 f0	 mov	 edx, DWORD PTR _rcWork$[ebp+4]
  00610	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00613	8b 4d f4	 mov	 ecx, DWORD PTR _rcWork$[ebp+8]
  00616	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00619	8b 55 f8	 mov	 edx, DWORD PTR _rcWork$[ebp+12]
  0061c	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 342  :         lpMonitorInfo->dwFlags = MONITORINFOF_PRIMARY;

  0061f	8b 45 0c	 mov	 eax, DWORD PTR _lpMonitorInfo$[ebp]
  00622	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [eax+36], 1

; 343  : 
; 344  :         if (lpMonitorInfo->cbSize >= sizeof(MONITORINFOEX))

  00629	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMonitorInfo$[ebp]
  0062c	83 39 48	 cmp	 DWORD PTR [ecx], 72	; 00000048H
  0062f	72 1d		 jb	 SHORT $L187407

; 345  :         {
; 346  : #ifdef UNICODE
; 347  :             MultiByteToWideChar(CP_ACP, 0, "DISPLAY", -1, ((MONITORINFOEX*)lpMonitorInfo)->szDevice, (sizeof(((MONITORINFOEX*)lpMonitorInfo)->szDevice)/sizeof(TCHAR)));
; 348  : #else // UNICODE
; 349  :             lstrcpyn(((MONITORINFOEX*)lpMonitorInfo)->szDevice, TEXT("DISPLAY"), (sizeof(((MONITORINFOEX*)lpMonitorInfo)->szDevice)/sizeof(TCHAR)));

  00631	8b f4		 mov	 esi, esp
  00633	6a 20		 push	 32			; 00000020H
  00635	68 00 00 00 00	 push	 OFFSET FLAT:$SG187411
  0063a	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  0063d	83 c2 28	 add	 edx, 40			; 00000028H
  00640	52		 push	 edx
  00641	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
  00647	3b f4		 cmp	 esi, esp
  00649	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187407:

; 350  : #endif // UNICODE
; 351  :         }
; 352  : 
; 353  :         return TRUE;

  0064e	b8 01 00 00 00	 mov	 eax, 1
  00653	eb 02		 jmp	 SHORT $L187399
$L187405:

; 354  :     }
; 355  : 
; 356  :     return FALSE;

  00655	33 c0		 xor	 eax, eax
$L187399:

; 357  : }

  00657	52		 push	 edx
  00658	8b cd		 mov	 ecx, ebp
  0065a	50		 push	 eax
  0065b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188756
  00661	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00666	58		 pop	 eax
  00667	5a		 pop	 edx
  00668	5e		 pop	 esi
  00669	83 c4 1c	 add	 esp, 28			; 0000001cH
  0066c	3b ec		 cmp	 ebp, esp
  0066e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00673	8b e5		 mov	 esp, ebp
  00675	5d		 pop	 ebp
  00676	c2 08 00	 ret	 8
$L188756:
  00679	01 00 00 00	 DD	 1
  0067d	00 00 00 00	 DD	 $L188755
$L188755:
  00681	ec ff ff ff	 DD	 -20			; ffffffecH
  00685	10 00 00 00	 DD	 16			; 00000010H
  00689	00 00 00 00	 DD	 $L188754
$L188754:
  0068d	72		 DB	 114			; 00000072H
  0068e	63		 DB	 99			; 00000063H
  0068f	57		 DB	 87			; 00000057H
  00690	6f		 DB	 111			; 0000006fH
  00691	72		 DB	 114			; 00000072H
  00692	6b		 DB	 107			; 0000006bH
  00693	00		 DB	 0
_xGetMonitorInfo@8 ENDP
_TEXT	ENDS
PUBLIC	_xEnumDisplayMonitors@16
EXTRN	__imp__GetClipBox@8:NEAR
EXTRN	__imp__IntersectRect@12:NEAR
EXTRN	__imp__OffsetRect@12:NEAR
EXTRN	__imp__GetDCOrgEx@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv80 = -68						; size = 4
_ptOrg$187423 = -60					; size = 8
_rcClip$187422 = -44					; size = 16
_rcLimit$ = -20						; size = 16
_hdcOptionalForPainting$ = 8				; size = 4
_lprcEnumMonitorsThatIntersect$ = 12			; size = 4
_lpfnEnumProc$ = 16					; size = 4
_dwData$ = 20						; size = 4
_xEnumDisplayMonitors@16 PROC NEAR

; 365  : {

  006a0	55		 push	 ebp
  006a1	8b ec		 mov	 ebp, esp
  006a3	83 ec 44	 sub	 esp, 68			; 00000044H
  006a6	56		 push	 esi
  006a7	57		 push	 edi
  006a8	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  006ab	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  006b0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  006b5	f3 ab		 rep stosd

; 366  :     RECT rcLimit;
; 367  : 
; 368  :     if (InitMultipleMonitorStubs()) {

  006b7	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  006bc	85 c0		 test	 eax, eax
  006be	74 24		 je	 SHORT $L187419

; 369  :         return g_pfnEnumDisplayMonitors(
; 370  :                 hdcOptionalForPainting,
; 371  :                 lprcEnumMonitorsThatIntersect,
; 372  :                 lpfnEnumProc,
; 373  :                 dwData);

  006c0	8b f4		 mov	 esi, esp
  006c2	8b 45 14	 mov	 eax, DWORD PTR _dwData$[ebp]
  006c5	50		 push	 eax
  006c6	8b 4d 10	 mov	 ecx, DWORD PTR _lpfnEnumProc$[ebp]
  006c9	51		 push	 ecx
  006ca	8b 55 0c	 mov	 edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
  006cd	52		 push	 edx
  006ce	8b 45 08	 mov	 eax, DWORD PTR _hdcOptionalForPainting$[ebp]
  006d1	50		 push	 eax
  006d2	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnEnumDisplayMonitors
  006d8	3b f4		 cmp	 esi, esp
  006da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006df	e9 58 01 00 00	 jmp	 $L187417
$L187419:

; 374  :     }
; 375  : 
; 376  :     if (!lpfnEnumProc)

  006e4	83 7d 10 00	 cmp	 DWORD PTR _lpfnEnumProc$[ebp], 0
  006e8	75 07		 jne	 SHORT $L187420

; 377  :         return FALSE;

  006ea	33 c0		 xor	 eax, eax
  006ec	e9 4b 01 00 00	 jmp	 $L187417
$L187420:

; 378  : 
; 379  :     rcLimit.left   = 0;

  006f1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rcLimit$[ebp], 0

; 380  :     rcLimit.top    = 0;

  006f8	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rcLimit$[ebp+4], 0

; 381  :     rcLimit.right  = GetSystemMetrics(SM_CXSCREEN);

  006ff	8b f4		 mov	 esi, esp
  00701	6a 00		 push	 0
  00703	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00709	3b f4		 cmp	 esi, esp
  0070b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00710	89 45 f4	 mov	 DWORD PTR _rcLimit$[ebp+8], eax

; 382  :     rcLimit.bottom = GetSystemMetrics(SM_CYSCREEN);

  00713	8b f4		 mov	 esi, esp
  00715	6a 01		 push	 1
  00717	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0071d	3b f4		 cmp	 esi, esp
  0071f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00724	89 45 f8	 mov	 DWORD PTR _rcLimit$[ebp+12], eax

; 383  : 
; 384  :     if (hdcOptionalForPainting)

  00727	83 7d 08 00	 cmp	 DWORD PTR _hdcOptionalForPainting$[ebp], 0
  0072b	0f 84 c2 00 00
	00		 je	 $L187421

; 385  :     {
; 386  :         RECT    rcClip;
; 387  :         POINT   ptOrg;
; 388  : 
; 389  :         switch (GetClipBox(hdcOptionalForPainting, &rcClip))

  00731	8b f4		 mov	 esi, esp
  00733	8d 4d d4	 lea	 ecx, DWORD PTR _rcClip$187422[ebp]
  00736	51		 push	 ecx
  00737	8b 55 08	 mov	 edx, DWORD PTR _hdcOptionalForPainting$[ebp]
  0073a	52		 push	 edx
  0073b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClipBox@8
  00741	3b f4		 cmp	 esi, esp
  00743	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00748	89 45 bc	 mov	 DWORD PTR tv80[ebp], eax
  0074b	83 7d bc 00	 cmp	 DWORD PTR tv80[ebp], 0
  0074f	0f 84 98 00 00
	00		 je	 $L187433
  00755	83 7d bc 01	 cmp	 DWORD PTR tv80[ebp], 1
  00759	0f 84 87 00 00
	00		 je	 $L187432

; 390  :         {
; 391  :         default:
; 392  :             if (!GetDCOrgEx(hdcOptionalForPainting, &ptOrg))

  0075f	8b f4		 mov	 esi, esp
  00761	8d 45 c4	 lea	 eax, DWORD PTR _ptOrg$187423[ebp]
  00764	50		 push	 eax
  00765	8b 4d 08	 mov	 ecx, DWORD PTR _hdcOptionalForPainting$[ebp]
  00768	51		 push	 ecx
  00769	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDCOrgEx@8
  0076f	3b f4		 cmp	 esi, esp
  00771	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00776	85 c0		 test	 eax, eax
  00778	75 07		 jne	 SHORT $L187429

; 393  :                 return FALSE;

  0077a	33 c0		 xor	 eax, eax
  0077c	e9 bb 00 00 00	 jmp	 $L187417
$L187429:

; 394  : 
; 395  :             OffsetRect(&rcLimit, -ptOrg.x, -ptOrg.y);

  00781	8b 55 c8	 mov	 edx, DWORD PTR _ptOrg$187423[ebp+4]
  00784	f7 da		 neg	 edx
  00786	8b f4		 mov	 esi, esp
  00788	52		 push	 edx
  00789	8b 45 c4	 mov	 eax, DWORD PTR _ptOrg$187423[ebp]
  0078c	f7 d8		 neg	 eax
  0078e	50		 push	 eax
  0078f	8d 4d ec	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  00792	51		 push	 ecx
  00793	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRect@12
  00799	3b f4		 cmp	 esi, esp
  0079b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 396  :             if (IntersectRect(&rcLimit, &rcLimit, &rcClip) &&
; 397  :                 (!lprcEnumMonitorsThatIntersect ||
; 398  :                      IntersectRect(&rcLimit, &rcLimit, lprcEnumMonitorsThatIntersect))) {

  007a0	8b f4		 mov	 esi, esp
  007a2	8d 55 d4	 lea	 edx, DWORD PTR _rcClip$187422[ebp]
  007a5	52		 push	 edx
  007a6	8d 45 ec	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  007a9	50		 push	 eax
  007aa	8d 4d ec	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  007ad	51		 push	 ecx
  007ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IntersectRect@12
  007b4	3b f4		 cmp	 esi, esp
  007b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007bb	85 c0		 test	 eax, eax
  007bd	74 27		 je	 SHORT $L187432
  007bf	83 7d 0c 00	 cmp	 DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp], 0
  007c3	74 1f		 je	 SHORT $L187431
  007c5	8b f4		 mov	 esi, esp
  007c7	8b 55 0c	 mov	 edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
  007ca	52		 push	 edx
  007cb	8d 45 ec	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  007ce	50		 push	 eax
  007cf	8d 4d ec	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  007d2	51		 push	 ecx
  007d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IntersectRect@12
  007d9	3b f4		 cmp	 esi, esp
  007db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007e0	85 c0		 test	 eax, eax
  007e2	74 02		 je	 SHORT $L187432
$L187431:

; 399  : 
; 400  :                 break;

  007e4	eb 0b		 jmp	 SHORT $L187425
$L187432:

; 401  :             }
; 402  :             //fall thru
; 403  :         case NULLREGION:
; 404  :              return TRUE;

  007e6	b8 01 00 00 00	 mov	 eax, 1
  007eb	eb 4f		 jmp	 SHORT $L187417
$L187433:

; 405  :         case ERROR:
; 406  :              return FALSE;

  007ed	33 c0		 xor	 eax, eax
  007ef	eb 4b		 jmp	 SHORT $L187417
$L187425:

; 407  :         }
; 408  :     } else {

  007f1	eb 2c		 jmp	 SHORT $L187434
$L187421:

; 409  :         if (    lprcEnumMonitorsThatIntersect &&
; 410  :                 !IntersectRect(&rcLimit, &rcLimit, lprcEnumMonitorsThatIntersect)) {

  007f3	83 7d 0c 00	 cmp	 DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp], 0
  007f7	74 26		 je	 SHORT $L187434
  007f9	8b f4		 mov	 esi, esp
  007fb	8b 55 0c	 mov	 edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
  007fe	52		 push	 edx
  007ff	8d 45 ec	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  00802	50		 push	 eax
  00803	8d 4d ec	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  00806	51		 push	 ecx
  00807	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IntersectRect@12
  0080d	3b f4		 cmp	 esi, esp
  0080f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00814	85 c0		 test	 eax, eax
  00816	75 07		 jne	 SHORT $L187434

; 411  : 
; 412  :             return TRUE;

  00818	b8 01 00 00 00	 mov	 eax, 1
  0081d	eb 1d		 jmp	 SHORT $L187417
$L187434:

; 413  :         }
; 414  :     }
; 415  : 
; 416  :     return lpfnEnumProc(
; 417  :             xPRIMARY_MONITOR,
; 418  :             hdcOptionalForPainting,
; 419  :             &rcLimit,
; 420  :             dwData);

  0081f	8b f4		 mov	 esi, esp
  00821	8b 55 14	 mov	 edx, DWORD PTR _dwData$[ebp]
  00824	52		 push	 edx
  00825	8d 45 ec	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  00828	50		 push	 eax
  00829	8b 4d 08	 mov	 ecx, DWORD PTR _hdcOptionalForPainting$[ebp]
  0082c	51		 push	 ecx
  0082d	68 42 00 34 12	 push	 305397826		; 12340042H
  00832	ff 55 10	 call	 DWORD PTR _lpfnEnumProc$[ebp]
  00835	3b f4		 cmp	 esi, esp
  00837	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187417:

; 421  : }

  0083c	52		 push	 edx
  0083d	8b cd		 mov	 ecx, ebp
  0083f	50		 push	 eax
  00840	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188762
  00846	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0084b	58		 pop	 eax
  0084c	5a		 pop	 edx
  0084d	5f		 pop	 edi
  0084e	5e		 pop	 esi
  0084f	83 c4 44	 add	 esp, 68			; 00000044H
  00852	3b ec		 cmp	 ebp, esp
  00854	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00859	8b e5		 mov	 esp, ebp
  0085b	5d		 pop	 ebp
  0085c	c2 10 00	 ret	 16			; 00000010H
$L188762:
  0085f	03 00 00 00	 DD	 3
  00863	00 00 00 00	 DD	 $L188761
$L188761:
  00867	ec ff ff ff	 DD	 -20			; ffffffecH
  0086b	10 00 00 00	 DD	 16			; 00000010H
  0086f	00 00 00 00	 DD	 $L188758
  00873	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00877	10 00 00 00	 DD	 16			; 00000010H
  0087b	00 00 00 00	 DD	 $L188759
  0087f	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00883	08 00 00 00	 DD	 8
  00887	00 00 00 00	 DD	 $L188760
$L188760:
  0088b	70		 DB	 112			; 00000070H
  0088c	74		 DB	 116			; 00000074H
  0088d	4f		 DB	 79			; 0000004fH
  0088e	72		 DB	 114			; 00000072H
  0088f	67		 DB	 103			; 00000067H
  00890	00		 DB	 0
$L188759:
  00891	72		 DB	 114			; 00000072H
  00892	63		 DB	 99			; 00000063H
  00893	43		 DB	 67			; 00000043H
  00894	6c		 DB	 108			; 0000006cH
  00895	69		 DB	 105			; 00000069H
  00896	70		 DB	 112			; 00000070H
  00897	00		 DB	 0
$L188758:
  00898	72		 DB	 114			; 00000072H
  00899	63		 DB	 99			; 00000063H
  0089a	4c		 DB	 76			; 0000004cH
  0089b	69		 DB	 105			; 00000069H
  0089c	6d		 DB	 109			; 0000006dH
  0089d	69		 DB	 105			; 00000069H
  0089e	74		 DB	 116			; 00000074H
  0089f	00		 DB	 0
_xEnumDisplayMonitors@16 ENDP
_TEXT	ENDS
PUBLIC	_xEnumDisplayDevices@16
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_Unused$ = 8						; size = 4
_iDevNum$ = 12						; size = 4
_lpDisplayDevice$ = 16					; size = 4
_dwFlags$ = 20						; size = 4
_xEnumDisplayDevices@16 PROC NEAR

; 429  : {

  008a0	55		 push	 ebp
  008a1	8b ec		 mov	 ebp, esp
  008a3	56		 push	 esi

; 430  :     if (InitMultipleMonitorStubs())

  008a4	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  008a9	85 c0		 test	 eax, eax
  008ab	74 21		 je	 SHORT $L187443

; 431  :         return g_pfnEnumDisplayDevices(Unused, iDevNum, lpDisplayDevice, dwFlags);

  008ad	8b f4		 mov	 esi, esp
  008af	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  008b2	50		 push	 eax
  008b3	8b 4d 10	 mov	 ecx, DWORD PTR _lpDisplayDevice$[ebp]
  008b6	51		 push	 ecx
  008b7	8b 55 0c	 mov	 edx, DWORD PTR _iDevNum$[ebp]
  008ba	52		 push	 edx
  008bb	8b 45 08	 mov	 eax, DWORD PTR _Unused$[ebp]
  008be	50		 push	 eax
  008bf	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnEnumDisplayDevices
  008c5	3b f4		 cmp	 esi, esp
  008c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008cc	eb 78		 jmp	 SHORT $L187442
$L187443:

; 432  : 
; 433  :     if (Unused != NULL)

  008ce	83 7d 08 00	 cmp	 DWORD PTR _Unused$[ebp], 0
  008d2	74 04		 je	 SHORT $L187444

; 434  :         return FALSE;

  008d4	33 c0		 xor	 eax, eax
  008d6	eb 6e		 jmp	 SHORT $L187442
$L187444:

; 435  : 
; 436  :     if (iDevNum != 0)

  008d8	83 7d 0c 00	 cmp	 DWORD PTR _iDevNum$[ebp], 0
  008dc	74 04		 je	 SHORT $L187445

; 437  :         return FALSE;

  008de	33 c0		 xor	 eax, eax
  008e0	eb 64		 jmp	 SHORT $L187442
$L187445:

; 438  : 
; 439  :     if (lpDisplayDevice == NULL || lpDisplayDevice->cb < sizeof(DISPLAY_DEVICE))

  008e2	83 7d 10 00	 cmp	 DWORD PTR _lpDisplayDevice$[ebp], 0
  008e6	74 0b		 je	 SHORT $L187448
  008e8	8b 4d 10	 mov	 ecx, DWORD PTR _lpDisplayDevice$[ebp]
  008eb	81 39 a8 01 00
	00		 cmp	 DWORD PTR [ecx], 424	; 000001a8H
  008f1	73 04		 jae	 SHORT $L187447
$L187448:

; 440  :         return FALSE;

  008f3	33 c0		 xor	 eax, eax
  008f5	eb 4f		 jmp	 SHORT $L187442
$L187447:

; 441  : 
; 442  : #ifdef UNICODE
; 443  :     MultiByteToWideChar(CP_ACP, 0, "DISPLAY", -1, lpDisplayDevice->DeviceName, (sizeof(lpDisplayDevice->DeviceName)/sizeof(TCHAR)));
; 444  :     MultiByteToWideChar(CP_ACP, 0, "DISPLAY", -1, lpDisplayDevice->DeviceString, (sizeof(lpDisplayDevice->DeviceString)/sizeof(TCHAR)));
; 445  : #else // UNICODE
; 446  :     lstrcpyn((LPTSTR)lpDisplayDevice->DeviceName,   TEXT("DISPLAY"), (sizeof(lpDisplayDevice->DeviceName)/sizeof(TCHAR)));

  008f7	8b f4		 mov	 esi, esp
  008f9	6a 20		 push	 32			; 00000020H
  008fb	68 00 00 00 00	 push	 OFFSET FLAT:$SG187451
  00900	8b 55 10	 mov	 edx, DWORD PTR _lpDisplayDevice$[ebp]
  00903	83 c2 04	 add	 edx, 4
  00906	52		 push	 edx
  00907	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
  0090d	3b f4		 cmp	 esi, esp
  0090f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 447  :     lstrcpyn((LPTSTR)lpDisplayDevice->DeviceString, TEXT("DISPLAY"), (sizeof(lpDisplayDevice->DeviceString)/sizeof(TCHAR)));

  00914	8b f4		 mov	 esi, esp
  00916	68 80 00 00 00	 push	 128			; 00000080H
  0091b	68 00 00 00 00	 push	 OFFSET FLAT:$SG187454
  00920	8b 45 10	 mov	 eax, DWORD PTR _lpDisplayDevice$[ebp]
  00923	83 c0 24	 add	 eax, 36			; 00000024H
  00926	50		 push	 eax
  00927	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
  0092d	3b f4		 cmp	 esi, esp
  0092f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 448  : #endif // UNICODE
; 449  : 
; 450  :     lpDisplayDevice->StateFlags = DISPLAY_DEVICE_ATTACHED_TO_DESKTOP | DISPLAY_DEVICE_PRIMARY_DEVICE;

  00934	8b 4d 10	 mov	 ecx, DWORD PTR _lpDisplayDevice$[ebp]
  00937	c7 81 a4 00 00
	00 05 00 00 00	 mov	 DWORD PTR [ecx+164], 5

; 451  : 
; 452  :     return TRUE;

  00941	b8 01 00 00 00	 mov	 eax, 1
$L187442:

; 453  : }

  00946	5e		 pop	 esi
  00947	3b ec		 cmp	 ebp, esp
  00949	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0094e	5d		 pop	 ebp
  0094f	c2 10 00	 ret	 16			; 00000010H
_xEnumDisplayDevices@16 ENDP
_TEXT	ENDS
PUBLIC	??0CBalloonHelp@@QAE@XZ				; CBalloonHelp::CBalloonHelp
PUBLIC	?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z ; CBalloonHelp::Create
PUBLIC	?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z ; CBalloonHelp::LaunchBalloon
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??2CObject@@SGPAXIPBDH@Z:NEAR			; CObject::operator new
EXTRN	??3CObject@@SGXPAXPBDH@Z:NEAR			; CObject::operator delete
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T188779 DD	0ffffffffH
	DD	FLAT:$L188770
	DD	00H
	DD	FLAT:$L188771
$T188776 DD	019930520H
	DD	02H
	DD	FLAT:$T188779
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv138 = -36						; size = 4
tv76 = -32						; size = 4
$T188769 = -28						; size = 4
$T188766 = -24						; size = 4
$T188765 = -20						; size = 4
_pbh$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strTitle$ = 8						; size = 4
_strContent$ = 12					; size = 4
_ptAnchor$ = 16						; size = 4
_szIcon$ = 20						; size = 4
_unOptions$ = 24					; size = 4
_pParentWnd$ = 28					; size = 4
_strURL$ = 32						; size = 4
_unTimeout$ = 36					; size = 4
?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z PROC NEAR ; CBalloonHelp::LaunchBalloon

; 152  : {

  00960	55		 push	 ebp
  00961	8b ec		 mov	 ebp, esp
  00963	6a ff		 push	 -1
  00965	68 00 00 00 00	 push	 __ehhandler$?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z
  0096a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00970	50		 push	 eax
  00971	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00978	83 ec 18	 sub	 esp, 24			; 00000018H
  0097b	56		 push	 esi
  0097c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00981	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00984	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00987	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0098a	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0098d	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00990	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00993	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  :    CBalloonHelp* pbh = new CBalloonHelp;

  0099a	68 99 00 00 00	 push	 153			; 00000099H
  0099f	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  009a4	68 e4 00 00 00	 push	 228			; 000000e4H
  009a9	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  009ae	89 45 e8	 mov	 DWORD PTR $T188766[ebp], eax
  009b1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  009b5	83 7d e8 00	 cmp	 DWORD PTR $T188766[ebp], 0
  009b9	74 0d		 je	 SHORT $L188767
  009bb	8b 4d e8	 mov	 ecx, DWORD PTR $T188766[ebp]
  009be	e8 00 00 00 00	 call	 ??0CBalloonHelp@@QAE@XZ	; CBalloonHelp::CBalloonHelp
  009c3	89 45 e0	 mov	 DWORD PTR tv76[ebp], eax
  009c6	eb 07		 jmp	 SHORT $L188768
$L188767:
  009c8	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L188768:
  009cf	8b 45 e0	 mov	 eax, DWORD PTR tv76[ebp]
  009d2	89 45 ec	 mov	 DWORD PTR $T188765[ebp], eax
  009d5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  009d9	8b 4d ec	 mov	 ecx, DWORD PTR $T188765[ebp]
  009dc	89 4d f0	 mov	 DWORD PTR _pbh$[ebp], ecx

; 154  :    //if ( NULL != szIcon )
; 155  :    //{
; 156  :    //   CSize sizeIcon(max(::GetSystemMetrics(SM_CXSIZE), ::GetSystemMetrics(SM_CXSMICON)), max(::GetSystemMetrics(SM_CYSIZE), ::GetSystemMetrics(SM_CYSMICON)));
; 157  : 
; 158  : 	  //HBITMAP hIcon = LoadBitmap(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDB_BMPDrag));
; 159  :    //   if (NULL != hIcon)
; 160  : 		 // pbh->SetIcon(hIcon, RGB(255,255,255)); // bitmap, transparent color
; 161  : 	  //DeleteObject( hIcon );
; 162  :    //}
; 163  : 
; 164  :    pbh->Create(strTitle, strContent, ptAnchor, unOptions|unDELETE_THIS_ON_CLOSE, 
; 165  :                pParentWnd, strURL, unTimeout, NULL);

  009df	6a 00		 push	 0
  009e1	8b 55 24	 mov	 edx, DWORD PTR _unTimeout$[ebp]
  009e4	52		 push	 edx
  009e5	51		 push	 ecx
  009e6	8b cc		 mov	 ecx, esp
  009e8	89 65 e4	 mov	 DWORD PTR $T188769[ebp], esp
  009eb	8b f4		 mov	 esi, esp
  009ed	8d 45 20	 lea	 eax, DWORD PTR _strURL$[ebp]
  009f0	50		 push	 eax
  009f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  009f7	3b f4		 cmp	 esi, esp
  009f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009fe	89 45 dc	 mov	 DWORD PTR tv138[ebp], eax
  00a01	8b 4d 1c	 mov	 ecx, DWORD PTR _pParentWnd$[ebp]
  00a04	51		 push	 ecx
  00a05	8b 55 18	 mov	 edx, DWORD PTR _unOptions$[ebp]
  00a08	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  00a0e	52		 push	 edx
  00a0f	8b 45 10	 mov	 eax, DWORD PTR _ptAnchor$[ebp]
  00a12	50		 push	 eax
  00a13	8b 4d 0c	 mov	 ecx, DWORD PTR _strContent$[ebp]
  00a16	51		 push	 ecx
  00a17	8b 55 08	 mov	 edx, DWORD PTR _strTitle$[ebp]
  00a1a	52		 push	 edx
  00a1b	8b 4d f0	 mov	 ecx, DWORD PTR _pbh$[ebp]
  00a1e	e8 00 00 00 00	 call	 ?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z ; CBalloonHelp::Create

; 166  : }

  00a23	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a2a	8b f4		 mov	 esi, esp
  00a2c	8d 4d 20	 lea	 ecx, DWORD PTR _strURL$[ebp]
  00a2f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00a35	3b f4		 cmp	 esi, esp
  00a37	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a3c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00a3f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00a46	5e		 pop	 esi
  00a47	83 c4 24	 add	 esp, 36			; 00000024H
  00a4a	3b ec		 cmp	 ebp, esp
  00a4c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a51	8b e5		 mov	 esp, ebp
  00a53	5d		 pop	 ebp
  00a54	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L188770:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d 20	 lea	 ecx, DWORD PTR _strURL$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188771:
  00012	68 99 00 00 00	 push	 153			; 00000099H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0001c	8b 45 e8	 mov	 eax, DWORD PTR $T188766[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  00025	c3		 ret	 0
__ehhandler$?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z:
  00026	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188776
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z ENDP ; CBalloonHelp::LaunchBalloon
PUBLIC	??_R1A@?0A@A@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk
PUBLIC	?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z	; CBalloonHelp::DrawNonClientArea
PUBLIC	?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z	; CBalloonHelp::DrawClientArea
PUBLIC	?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z ; CBalloonHelp::DrawHeader
PUBLIC	?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z ; CBalloonHelp::DrawContent
PUBLIC	?PostNcDestroy@CBalloonHelp@@MAEXXZ		; CBalloonHelp::PostNcDestroy
PUBLIC	?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ ; CBalloonHelp::GetMessageMap
PUBLIC	?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z	; CBalloonHelp::KeyboardHookProc
PUBLIC	?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z		; CBalloonHelp::MouseHookProc
PUBLIC	?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z		; CBalloonHelp::CallWndRetProc
PUBLIC	??_R4CBalloonHelp@@6B@				; CBalloonHelp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBalloonHelp@@@8			; CBalloonHelp `RTTI Type Descriptor'
PUBLIC	??_R3CBalloonHelp@@8				; CBalloonHelp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBalloonHelp@@8				; CBalloonHelp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBalloonHelp@@8			; CBalloonHelp::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8 ; BHKeybHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,0)'
PUBLIC	??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8	; BHKeybHookThunk<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8	; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,2)'
PUBLIC	??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8	; _ThunkImpl<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8 ; BHMouseHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,0)'
PUBLIC	??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8	; BHMouseHookThunk<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8	; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,2)'
PUBLIC	??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8 ; BHCallWndRetHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,0)'
PUBLIC	??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8 ; BHCallWndRetHookThunk<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8	; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,2)'
PUBLIC	??_7CBalloonHelp@@6B@				; CBalloonHelp::`vftable'
PUBLIC	??_GCBalloonHelp@@UAEPAXI@Z			; CBalloonHelp::`scalar deleting destructor'
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CWnd::GetInterfaceMap
EXTRN	??1CImageList@@UAE@XZ:NEAR			; CImageList::~CImageList
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:NEAR			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:NEAR ; CWnd::get_accParent
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:NEAR		; CWnd::get_accChildCount
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:NEAR ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accValue
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDescription
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:NEAR ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDefaultAction
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:NEAR	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:NEAR ; CWnd::accLocation
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:NEAR	; CWnd::accHitTest
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:NEAR ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:NEAR ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:NEAR	; CWnd::CreateAccessibleProxy
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	??0CPoint@@QAE@HH@Z:NEAR			; CPoint::CPoint
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:NEAR ; CWnd::GetRuntimeClass
EXTRN	??0CWnd@@QAE@XZ:NEAR				; CWnd::CWnd
EXTRN	??0CRect@@QAE@HHHH@Z:NEAR			; CRect::CRect
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:NEAR	; CObject::Serialize
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	??0CRgn@@QAE@XZ:NEAR				; CRgn::CRgn
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z:NEAR ; CWnd::DoDataExchange
EXTRN	?BeginModalState@CWnd@@UAEXXZ:NEAR		; CWnd::BeginModalState
EXTRN	?EndModalState@CWnd@@UAEXXZ:NEAR		; CWnd::EndModalState
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	??1CWnd@@UAE@XZ:NEAR				; CWnd::~CWnd
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?AssertValid@CWnd@@UBEXXZ:NEAR			; CWnd::AssertValid
EXTRN	?Dump@CWnd@@UBEXAAVCDumpContext@@@Z:NEAR	; CWnd::Dump
EXTRN	??1CRgn@@UAE@XZ:NEAR				; CRgn::~CRgn
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
EXTRN	__imp__GetSysColor@4:NEAR
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:NEAR ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:NEAR ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	??_ECBalloonHelp@@UAEPAXI@Z:NEAR		; CBalloonHelp::`vector deleting destructor'
EXTRN	??0CImageList@@QAE@XZ:NEAR			; CImageList::CImageList
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::HtmlHelpA
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:NEAR		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
xdata$x	SEGMENT
$T188796 DD	0ffffffffH
	DD	FLAT:$L188785
	DD	00H
	DD	FLAT:$L188786
	DD	01H
	DD	FLAT:$L188787
	DD	02H
	DD	FLAT:$L188788
	DD	03H
	DD	FLAT:$L188789
$T188791 DD	019930520H
	DD	05H
	DD	FLAT:$T188796
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CBalloonHelp@@6B@
CONST	SEGMENT
??_7CBalloonHelp@@6B@ DD FLAT:??_R4CBalloonHelp@@6B@	; CBalloonHelp::`vftable'
	DD	FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBalloonHelp@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CWnd@@UBEXXZ
	DD	FLAT:?Dump@CWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CBalloonHelp@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z
	DD	FLAT:?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z
	DD	FLAT:?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z
	DD	FLAT:?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z
CONST	ENDS
;	COMDAT ??_R4CBalloonHelp@@6B@
rdata$r	SEGMENT
??_R4CBalloonHelp@@6B@ DD 00H				; CBalloonHelp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBalloonHelp@@@8
	DD	FLAT:??_R3CBalloonHelp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBalloonHelp@@@8
_DATA	SEGMENT
??_R0?AVCBalloonHelp@@@8 DD FLAT:??_7type_info@@6B@	; CBalloonHelp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBalloonHelp@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBalloonHelp@@8
rdata$r	SEGMENT
??_R3CBalloonHelp@@8 DD 00H				; CBalloonHelp::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CBalloonHelp@@8
rdata$r	ENDS
;	COMDAT ??_R2CBalloonHelp@@8
rdata$r	SEGMENT
??_R2CBalloonHelp@@8 DD FLAT:??_R1A@?0A@A@CBalloonHelp@@8 ; CBalloonHelp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CWnd@@8
	DD	FLAT:??_R1A@?0A@A@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
	DD	FLAT:??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8
	DD	FLAT:??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
	DD	FLAT:??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8
	DD	FLAT:??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
	DD	FLAT:??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8
	DD	FLAT:??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBalloonHelp@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBalloonHelp@@8 DD FLAT:??_R0?AVCBalloonHelp@@@8 ; CBalloonHelp::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8 ; BHKeybHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,0)'
	DD	01H
	DD	054H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; BHKeybHookThunk<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BHKeybHookThunk@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 ; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,2)'
	DD	00H
	DD	054H
	DD	0ffffffffH
	DD	00H
	DD	02H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; _ThunkImpl<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_ThunkImpl@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8 ; BHMouseHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,0)'
	DD	01H
	DD	05eH
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; BHMouseHookThunk<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BHMouseHookThunk@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 ; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,2)'
	DD	00H
	DD	05eH
	DD	0ffffffffH
	DD	00H
	DD	02H
rdata$r	ENDS
;	COMDAT ??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8 ; BHCallWndRetHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,0)'
	DD	01H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; BHCallWndRetHookThunk<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 ; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,2)'
	DD	00H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	02H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
_TEXT	SEGMENT
$T188784 = -56						; size = 8
$T188783 = -48						; size = 8
$T188782 = -40						; size = 8
_nTol$ = -28						; size = 4
_hUser32$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBalloonHelp@@QAE@XZ PROC NEAR			; CBalloonHelp::CBalloonHelp
; _this$ = ecx

; 193  : {

  00a60	55		 push	 ebp
  00a61	8b ec		 mov	 ebp, esp
  00a63	6a ff		 push	 -1
  00a65	68 00 00 00 00	 push	 __ehhandler$??0CBalloonHelp@@QAE@XZ
  00a6a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00a70	50		 push	 eax
  00a71	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00a78	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00a7b	56		 push	 esi
  00a7c	57		 push	 edi
  00a7d	51		 push	 ecx
  00a7e	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00a81	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00a86	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00a8b	f3 ab		 rep stosd
  00a8d	59		 pop	 ecx
  00a8e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00a91	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a94	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  00a99	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00aa0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00aa3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBalloonHelp@@6B@
  00aa9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00aac	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0
  00ab3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00ab6	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0
  00abd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00ac0	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0
  00ac7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00aca	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0
  00ad4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00ad7	c7 82 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+132], 0
  00ae1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00ae4	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0
  00aee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00af1	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0
  00afb	8b f4		 mov	 esi, esp
  00afd	68 00 00 00 00	 push	 OFFSET FLAT:$SG187477
  00b02	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b05	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00b0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00b11	3b f4		 cmp	 esi, esp
  00b13	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b18	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00b1c	8b f4		 mov	 esi, esp
  00b1e	68 00 00 00 00	 push	 OFFSET FLAT:$SG187478
  00b23	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b26	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00b2c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00b32	3b f4		 cmp	 esi, esp
  00b34	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b39	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00b3d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00b40	c7 82 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+152], 0
  00b4a	6a 00		 push	 0
  00b4c	6a 00		 push	 0
  00b4e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b51	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00b57	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  00b5c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b5f	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00b65	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  00b6a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00b6e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00b71	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0
  00b7b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b7e	c7 81 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+176], 0
  00b88	8b f4		 mov	 esi, esp
  00b8a	6a 18		 push	 24			; 00000018H
  00b8c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00b92	3b f4		 cmp	 esi, esp
  00b94	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b99	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00b9c	89 82 b4 00 00
	00		 mov	 DWORD PTR [edx+180], eax
  00ba2	8b f4		 mov	 esi, esp
  00ba4	6a 17		 push	 23			; 00000017H
  00ba6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00bac	3b f4		 cmp	 esi, esp
  00bae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bb3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb6	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax
  00bbc	6a 00		 push	 0
  00bbe	6a 00		 push	 0
  00bc0	6a 00		 push	 0
  00bc2	6a 00		 push	 0
  00bc4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bc7	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00bcd	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  00bd2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd5	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  00bdb	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  00be0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00be4	6a 00		 push	 0
  00be6	6a 00		 push	 0
  00be8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00beb	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00bf1	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  00bf6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00bf9	c7 82 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+220], 0
  00c03	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00c06	c7 80 e0 00 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+224], 3

; 194  :    // retrieve window animation API if available
; 195  :    HMODULE hUser32 = GetModuleHandle(_T("USER32.DLL"));

  00c10	8b f4		 mov	 esi, esp
  00c12	68 00 00 00 00	 push	 OFFSET FLAT:$SG187480
  00c17	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00c1d	3b f4		 cmp	 esi, esp
  00c1f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c24	89 45 ec	 mov	 DWORD PTR _hUser32$[ebp], eax

; 196  :    // can't imagine why that would fail, but might as well *look* safe...  ;~)
; 197  :    if ( NULL != hUser32 )

  00c27	83 7d ec 00	 cmp	 DWORD PTR _hUser32$[ebp], 0
  00c2b	74 20		 je	 SHORT $L187481

; 198  :       m_fnAnimateWindow = (FN_ANIMATE_WINDOW)GetProcAddress(hUser32, _T("AnimateWindow"));

  00c2d	8b f4		 mov	 esi, esp
  00c2f	68 00 00 00 00	 push	 OFFSET FLAT:$SG187483
  00c34	8b 4d ec	 mov	 ecx, DWORD PTR _hUser32$[ebp]
  00c37	51		 push	 ecx
  00c38	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00c3e	3b f4		 cmp	 esi, esp
  00c40	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c45	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00c48	89 42 74	 mov	 DWORD PTR [edx+116], eax

; 199  :    else

  00c4b	eb 0a		 jmp	 SHORT $L187484
$L187481:

; 200  :       m_fnAnimateWindow = NULL;

  00c4d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00c50	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0
$L187484:

; 201  : 
; 202  :    // get system tolerance values
; 203  :    int nTol = 0;

  00c57	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _nTol$[ebp], 0

; 204  :    if ( ::SystemParametersInfo(SPI_GETMOUSEHOVERWIDTH, 0, &nTol, 0) && nTol > 0 )

  00c5e	8b f4		 mov	 esi, esp
  00c60	6a 00		 push	 0
  00c62	8d 4d e4	 lea	 ecx, DWORD PTR _nTol$[ebp]
  00c65	51		 push	 ecx
  00c66	6a 00		 push	 0
  00c68	6a 62		 push	 98			; 00000062H
  00c6a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  00c70	3b f4		 cmp	 esi, esp
  00c72	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c77	85 c0		 test	 eax, eax
  00c79	74 12		 je	 SHORT $L187486
  00c7b	83 7d e4 00	 cmp	 DWORD PTR _nTol$[ebp], 0
  00c7f	7e 0c		 jle	 SHORT $L187486

; 205  :       m_nMouseMoveTolerance = nTol;

  00c81	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00c84	8b 45 e4	 mov	 eax, DWORD PTR _nTol$[ebp]
  00c87	89 82 e0 00 00
	00		 mov	 DWORD PTR [edx+224], eax
$L187486:

; 206  : 
; 207  :    // setup hook procedures
; 208  :    BHKeybHookThunk<CBalloonHelp>::InitThunk((TMFP)KeyboardHookProc, this);

  00c8d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T188782[ebp], OFFSET FLAT:?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z ; CBalloonHelp::KeyboardHookProc
  00c94	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T188782[ebp+4], 0
  00c9b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c9e	51		 push	 ecx
  00c9f	8b 55 dc	 mov	 edx, DWORD PTR $T188782[ebp+4]
  00ca2	52		 push	 edx
  00ca3	8b 45 d8	 mov	 eax, DWORD PTR $T188782[ebp]
  00ca6	50		 push	 eax
  00ca7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00caa	83 c1 54	 add	 ecx, 84			; 00000054H
  00cad	e8 00 00 00 00	 call	 ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk

; 209  :    BHMouseHookThunk<CBalloonHelp>::InitThunk((TMFP)MouseHookProc, this);

  00cb2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T188783[ebp], OFFSET FLAT:?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z ; CBalloonHelp::MouseHookProc
  00cb9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T188783[ebp+4], 0
  00cc0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00cc3	51		 push	 ecx
  00cc4	8b 55 d4	 mov	 edx, DWORD PTR $T188783[ebp+4]
  00cc7	52		 push	 edx
  00cc8	8b 45 d0	 mov	 eax, DWORD PTR $T188783[ebp]
  00ccb	50		 push	 eax
  00ccc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ccf	83 c1 5e	 add	 ecx, 94			; 0000005eH
  00cd2	e8 00 00 00 00	 call	 ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk

; 210  :    BHCallWndRetHookThunk<CBalloonHelp>::InitThunk((TMFP)CallWndRetProc, this);

  00cd7	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T188784[ebp], OFFSET FLAT:?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z ; CBalloonHelp::CallWndRetProc
  00cde	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T188784[ebp+4], 0
  00ce5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ce8	51		 push	 ecx
  00ce9	8b 55 cc	 mov	 edx, DWORD PTR $T188784[ebp+4]
  00cec	52		 push	 edx
  00ced	8b 45 c8	 mov	 eax, DWORD PTR $T188784[ebp]
  00cf0	50		 push	 eax
  00cf1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00cf4	83 c1 68	 add	 ecx, 104		; 00000068H
  00cf7	e8 00 00 00 00	 call	 ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk

; 211  : }

  00cfc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d03	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00d06	52		 push	 edx
  00d07	8b cd		 mov	 ecx, ebp
  00d09	50		 push	 eax
  00d0a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188795
  00d10	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00d15	58		 pop	 eax
  00d16	5a		 pop	 edx
  00d17	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00d1a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00d21	5f		 pop	 edi
  00d22	5e		 pop	 esi
  00d23	83 c4 38	 add	 esp, 56			; 00000038H
  00d26	3b ec		 cmp	 ebp, esp
  00d28	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d2d	8b e5		 mov	 esp, ebp
  00d2f	5d		 pop	 ebp
  00d30	c3		 ret	 0
$L188795:
  00d31	01 00 00 00	 DD	 1
  00d35	00 00 00 00	 DD	 $L188794
$L188794:
  00d39	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00d3d	04 00 00 00	 DD	 4
  00d41	00 00 00 00	 DD	 $L188792
$L188792:
  00d45	6e		 DB	 110			; 0000006eH
  00d46	54		 DB	 84			; 00000054H
  00d47	6f		 DB	 111			; 0000006fH
  00d48	6c		 DB	 108			; 0000006cH
  00d49	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188785:
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
$L188786:
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00041	8b f4		 mov	 esi, esp
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00049	3b f4		 cmp	 esi, esp
  0004b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188787:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00059	8b f4		 mov	 esi, esp
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00061	3b f4		 cmp	 esi, esp
  00063	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188788:
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00071	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L188789:
  00076	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  0007f	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$??0CBalloonHelp@@QAE@XZ:
  00084	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188791
  00089	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CBalloonHelp@@QAE@XZ ENDP				; CBalloonHelp::CBalloonHelp
PUBLIC	??1CBalloonHelp@@UAE@XZ				; CBalloonHelp::~CBalloonHelp
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCBalloonHelp@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBalloonHelp@@UAEPAXI@Z PROC NEAR			; CBalloonHelp::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CBalloonHelp@@UAE@XZ	; CBalloonHelp::~CBalloonHelp
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187496
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187496:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GCBalloonHelp@@UAEPAXI@Z ENDP			; CBalloonHelp::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
$T188815 DD	0ffffffffH
	DD	FLAT:$L188807
	DD	00H
	DD	FLAT:$L188808
	DD	01H
	DD	FLAT:$L188809
	DD	02H
	DD	FLAT:$L188810
	DD	03H
	DD	FLAT:$L188811
$T188813 DD	019930520H
	DD	05H
	DD	FLAT:$T188815
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv133 = -40						; size = 4
tv90 = -36						; size = 4
$T188804 = -32						; size = 4
$T188803 = -28						; size = 4
$T188800 = -24						; size = 4
$T188799 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBalloonHelp@@UAE@XZ PROC NEAR			; CBalloonHelp::~CBalloonHelp
; _this$ = ecx

; 214  : {

  00d50	55		 push	 ebp
  00d51	8b ec		 mov	 ebp, esp
  00d53	6a ff		 push	 -1
  00d55	68 00 00 00 00	 push	 __ehhandler$??1CBalloonHelp@@UAE@XZ
  00d5a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00d60	50		 push	 eax
  00d61	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00d68	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00d6b	56		 push	 esi
  00d6c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00d71	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00d74	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00d77	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00d7a	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00d7d	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00d80	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00d83	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00d86	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00d89	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00d8c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBalloonHelp@@6B@
  00d92	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 215  :    if ( NULL != m_pTitleFont )

  00d99	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9c	83 b9 ac 00 00
	00 00		 cmp	 DWORD PTR [ecx+172], 0
  00da3	74 3a		 je	 SHORT $L187500

; 216  :       delete m_pTitleFont;

  00da5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00da8	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  00dae	89 45 e8	 mov	 DWORD PTR $T188800[ebp], eax
  00db1	8b 4d e8	 mov	 ecx, DWORD PTR $T188800[ebp]
  00db4	89 4d ec	 mov	 DWORD PTR $T188799[ebp], ecx
  00db7	83 7d ec 00	 cmp	 DWORD PTR $T188799[ebp], 0
  00dbb	74 1b		 je	 SHORT $L188801
  00dbd	8b f4		 mov	 esi, esp
  00dbf	6a 01		 push	 1
  00dc1	8b 55 ec	 mov	 edx, DWORD PTR $T188799[ebp]
  00dc4	8b 02		 mov	 eax, DWORD PTR [edx]
  00dc6	8b 4d ec	 mov	 ecx, DWORD PTR $T188799[ebp]
  00dc9	ff 50 04	 call	 DWORD PTR [eax+4]
  00dcc	3b f4		 cmp	 esi, esp
  00dce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dd3	89 45 dc	 mov	 DWORD PTR tv90[ebp], eax
  00dd6	eb 07		 jmp	 SHORT $L187500
$L188801:
  00dd8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$L187500:

; 217  :    m_pTitleFont = NULL;

  00ddf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00de2	c7 81 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+172], 0

; 218  :    if ( NULL != m_pContentFont )

  00dec	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00def	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00df6	74 3a		 je	 SHORT $L187503

; 219  :       delete m_pContentFont;

  00df8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00dfb	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00e01	89 4d e0	 mov	 DWORD PTR $T188804[ebp], ecx
  00e04	8b 55 e0	 mov	 edx, DWORD PTR $T188804[ebp]
  00e07	89 55 e4	 mov	 DWORD PTR $T188803[ebp], edx
  00e0a	83 7d e4 00	 cmp	 DWORD PTR $T188803[ebp], 0
  00e0e	74 1b		 je	 SHORT $L188805
  00e10	8b f4		 mov	 esi, esp
  00e12	6a 01		 push	 1
  00e14	8b 45 e4	 mov	 eax, DWORD PTR $T188803[ebp]
  00e17	8b 10		 mov	 edx, DWORD PTR [eax]
  00e19	8b 4d e4	 mov	 ecx, DWORD PTR $T188803[ebp]
  00e1c	ff 52 04	 call	 DWORD PTR [edx+4]
  00e1f	3b f4		 cmp	 esi, esp
  00e21	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e26	89 45 d8	 mov	 DWORD PTR tv133[ebp], eax
  00e29	eb 07		 jmp	 SHORT $L187503
$L188805:
  00e2b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L187503:

; 220  :    m_pContentFont = NULL;

  00e32	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00e35	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 221  : }

  00e3f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00e43	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e46	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  00e4c	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  00e51	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00e55	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e58	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00e5e	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  00e63	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00e67	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e6a	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00e70	8b f4		 mov	 esi, esp
  00e72	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00e78	3b f4		 cmp	 esi, esp
  00e7a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e7f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00e83	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e86	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00e8c	8b f4		 mov	 esi, esp
  00e8e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00e94	3b f4		 cmp	 esi, esp
  00e96	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e9b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00ea2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea5	e8 00 00 00 00	 call	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
  00eaa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00ead	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00eb4	5e		 pop	 esi
  00eb5	83 c4 28	 add	 esp, 40			; 00000028H
  00eb8	3b ec		 cmp	 ebp, esp
  00eba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ebf	8b e5		 mov	 esp, ebp
  00ec1	5d		 pop	 ebp
  00ec2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L188807:
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e9 00 00 00 00	 jmp	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
$L188808:
  00096	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0009f	8b f4		 mov	 esi, esp
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188809:
  000ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  000b7	8b f4		 mov	 esi, esp
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000bf	3b f4		 cmp	 esi, esp
  000c1	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188810:
  000c6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  000cf	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L188811:
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  000dd	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$??1CBalloonHelp@@UAE@XZ:
  000e2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188813
  000e7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CBalloonHelp@@UAE@XZ ENDP				; CBalloonHelp::~CBalloonHelp
PUBLIC	?SetTitleFont@CBalloonHelp@@QAEXPAVCFont@@@Z	; CBalloonHelp::SetTitleFont
PUBLIC	?PositionWindow@CBalloonHelp@@IAEXXZ		; CBalloonHelp::PositionWindow
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv73 = -16						; size = 4
$T188818 = -12						; size = 4
$T188817 = -8						; size = 4
_this$ = -4						; size = 4
_pFont$ = 8						; size = 4
?SetTitleFont@CBalloonHelp@@QAEXPAVCFont@@@Z PROC NEAR	; CBalloonHelp::SetTitleFont
; _this$ = ecx

; 226  : {

  00ed0	55		 push	 ebp
  00ed1	8b ec		 mov	 ebp, esp
  00ed3	83 ec 10	 sub	 esp, 16			; 00000010H
  00ed6	56		 push	 esi
  00ed7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00edc	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00edf	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00ee2	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00ee5	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00ee8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 227  :    if ( NULL != m_pTitleFont )

  00eeb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eee	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00ef5	74 3a		 je	 SHORT $L187510

; 228  :       delete m_pTitleFont;

  00ef7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00efa	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00f00	89 55 f4	 mov	 DWORD PTR $T188818[ebp], edx
  00f03	8b 45 f4	 mov	 eax, DWORD PTR $T188818[ebp]
  00f06	89 45 f8	 mov	 DWORD PTR $T188817[ebp], eax
  00f09	83 7d f8 00	 cmp	 DWORD PTR $T188817[ebp], 0
  00f0d	74 1b		 je	 SHORT $L188819
  00f0f	8b f4		 mov	 esi, esp
  00f11	6a 01		 push	 1
  00f13	8b 4d f8	 mov	 ecx, DWORD PTR $T188817[ebp]
  00f16	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f18	8b 4d f8	 mov	 ecx, DWORD PTR $T188817[ebp]
  00f1b	ff 52 04	 call	 DWORD PTR [edx+4]
  00f1e	3b f4		 cmp	 esi, esp
  00f20	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f25	89 45 f0	 mov	 DWORD PTR tv73[ebp], eax
  00f28	eb 07		 jmp	 SHORT $L187510
$L188819:
  00f2a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L187510:

; 229  :    m_pTitleFont = pFont;

  00f31	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f34	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  00f37	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 230  :    // if already visible, resize & move
; 231  :    if ( NULL != m_hWnd )

  00f3d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f40	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00f44	74 08		 je	 SHORT $L187509

; 232  :       PositionWindow();

  00f46	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f49	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187509:

; 233  : }

  00f4e	5e		 pop	 esi
  00f4f	83 c4 10	 add	 esp, 16			; 00000010H
  00f52	3b ec		 cmp	 ebp, esp
  00f54	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f59	8b e5		 mov	 esp, ebp
  00f5b	5d		 pop	 ebp
  00f5c	c2 04 00	 ret	 4
?SetTitleFont@CBalloonHelp@@QAEXPAVCFont@@@Z ENDP	; CBalloonHelp::SetTitleFont
_TEXT	ENDS
PUBLIC	?SetContentFont@CBalloonHelp@@QAEXPAVCFont@@@Z	; CBalloonHelp::SetContentFont
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv73 = -16						; size = 4
$T188823 = -12						; size = 4
$T188822 = -8						; size = 4
_this$ = -4						; size = 4
_pFont$ = 8						; size = 4
?SetContentFont@CBalloonHelp@@QAEXPAVCFont@@@Z PROC NEAR ; CBalloonHelp::SetContentFont
; _this$ = ecx

; 237  : {

  00f60	55		 push	 ebp
  00f61	8b ec		 mov	 ebp, esp
  00f63	83 ec 10	 sub	 esp, 16			; 00000010H
  00f66	56		 push	 esi
  00f67	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00f6c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00f6f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00f72	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00f75	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00f78	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 238  :    if ( NULL != m_pContentFont )

  00f7b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f7e	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00f85	74 3a		 je	 SHORT $L187518

; 239  :       delete m_pContentFont;

  00f87	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f8a	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00f90	89 55 f4	 mov	 DWORD PTR $T188823[ebp], edx
  00f93	8b 45 f4	 mov	 eax, DWORD PTR $T188823[ebp]
  00f96	89 45 f8	 mov	 DWORD PTR $T188822[ebp], eax
  00f99	83 7d f8 00	 cmp	 DWORD PTR $T188822[ebp], 0
  00f9d	74 1b		 je	 SHORT $L188824
  00f9f	8b f4		 mov	 esi, esp
  00fa1	6a 01		 push	 1
  00fa3	8b 4d f8	 mov	 ecx, DWORD PTR $T188822[ebp]
  00fa6	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fa8	8b 4d f8	 mov	 ecx, DWORD PTR $T188822[ebp]
  00fab	ff 52 04	 call	 DWORD PTR [edx+4]
  00fae	3b f4		 cmp	 esi, esp
  00fb0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fb5	89 45 f0	 mov	 DWORD PTR tv73[ebp], eax
  00fb8	eb 07		 jmp	 SHORT $L187518
$L188824:
  00fba	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L187518:

; 240  :    m_pContentFont = pFont;

  00fc1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fc4	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  00fc7	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx

; 241  :    // if already visible, resize & move
; 242  :    if ( NULL != m_hWnd )

  00fcd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fd0	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00fd4	74 08		 je	 SHORT $L187517

; 243  :       PositionWindow();

  00fd6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd9	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187517:

; 244  : }

  00fde	5e		 pop	 esi
  00fdf	83 c4 10	 add	 esp, 16			; 00000010H
  00fe2	3b ec		 cmp	 ebp, esp
  00fe4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fe9	8b e5		 mov	 esp, ebp
  00feb	5d		 pop	 ebp
  00fec	c2 04 00	 ret	 4
?SetContentFont@CBalloonHelp@@QAEXPAVCFont@@@Z ENDP	; CBalloonHelp::SetContentFont
_TEXT	ENDS
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z	; CBalloonHelp::SetIcon
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z	; CBalloonHelp::SetIcon
EXTRN	__imp__GetIconInfo@8:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	?DeleteImageList@CImageList@@QAEHXZ:NEAR	; CImageList::DeleteImageList
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_iconinfo$ = -28					; size = 20
_this$ = -4						; size = 4
_hIcon$ = 8						; size = 4
?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 248  : {

  00ff0	55		 push	 ebp
  00ff1	8b ec		 mov	 ebp, esp
  00ff3	83 ec 20	 sub	 esp, 32			; 00000020H
  00ff6	56		 push	 esi
  00ff7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00ffc	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00fff	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01002	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01005	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  01008	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0100b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0100e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01011	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  :    if ( NULL != m_ilIcon.m_hImageList )

  01017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0101a	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  01021	74 0e		 je	 SHORT $L187526

; 250  :       m_ilIcon.DeleteImageList();

  01023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01026	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0102c	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList
$L187526:

; 251  :    ICONINFO iconinfo;
; 252  :    if ( NULL != hIcon && ::GetIconInfo(hIcon, &iconinfo) )

  01031	83 7d 08 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  01035	74 51		 je	 SHORT $L187528
  01037	8b f4		 mov	 esi, esp
  01039	8d 4d e4	 lea	 ecx, DWORD PTR _iconinfo$[ebp]
  0103c	51		 push	 ecx
  0103d	8b 55 08	 mov	 edx, DWORD PTR _hIcon$[ebp]
  01040	52		 push	 edx
  01041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetIconInfo@8
  01047	3b f4		 cmp	 esi, esp
  01049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0104e	85 c0		 test	 eax, eax
  01050	74 36		 je	 SHORT $L187528

; 253  :    {
; 254  :       SetIcon(iconinfo.hbmColor, iconinfo.hbmMask);

  01052	8b 45 f0	 mov	 eax, DWORD PTR _iconinfo$[ebp+12]
  01055	50		 push	 eax
  01056	8b 4d f4	 mov	 ecx, DWORD PTR _iconinfo$[ebp+16]
  01059	51		 push	 ecx
  0105a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0105d	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z ; CBalloonHelp::SetIcon

; 255  :       ::DeleteObject(iconinfo.hbmColor);

  01062	8b f4		 mov	 esi, esp
  01064	8b 55 f4	 mov	 edx, DWORD PTR _iconinfo$[ebp+16]
  01067	52		 push	 edx
  01068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  0106e	3b f4		 cmp	 esi, esp
  01070	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 256  :       ::DeleteObject(iconinfo.hbmMask);

  01075	8b f4		 mov	 esi, esp
  01077	8b 45 f0	 mov	 eax, DWORD PTR _iconinfo$[ebp+12]
  0107a	50		 push	 eax
  0107b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  01081	3b f4		 cmp	 esi, esp
  01083	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187528:

; 257  :    }
; 258  :    // if already visible, resize & move (icon size may have changed)
; 259  :    if ( NULL != m_hWnd )

  01088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0108b	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  0108f	74 08		 je	 SHORT $L187525

; 260  :       PositionWindow();

  01091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01094	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187525:

; 261  : }

  01099	52		 push	 edx
  0109a	8b cd		 mov	 ecx, ebp
  0109c	50		 push	 eax
  0109d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188829
  010a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  010a8	58		 pop	 eax
  010a9	5a		 pop	 edx
  010aa	5e		 pop	 esi
  010ab	83 c4 20	 add	 esp, 32			; 00000020H
  010ae	3b ec		 cmp	 ebp, esp
  010b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010b5	8b e5		 mov	 esp, ebp
  010b7	5d		 pop	 ebp
  010b8	c2 04 00	 ret	 4
$L188829:
  010bb	01 00 00 00	 DD	 1
  010bf	00 00 00 00	 DD	 $L188828
$L188828:
  010c3	e4 ff ff ff	 DD	 -28			; ffffffe4H
  010c7	14 00 00 00	 DD	 20			; 00000014H
  010cb	00 00 00 00	 DD	 $L188827
$L188827:
  010cf	69		 DB	 105			; 00000069H
  010d0	63		 DB	 99			; 00000063H
  010d1	6f		 DB	 111			; 0000006fH
  010d2	6e		 DB	 110			; 0000006eH
  010d3	69		 DB	 105			; 00000069H
  010d4	6e		 DB	 110			; 0000006eH
  010d5	66		 DB	 102			; 00000066H
  010d6	6f		 DB	 111			; 0000006fH
  010d7	00		 DB	 0
?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z ENDP		; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z ; CBalloonHelp::SetIconScaled
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z	; CBalloonHelp::SetIcon
EXTRN	__imp__DrawIconEx@36:NEAR
EXTRN	?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z:NEAR	; CDC::StretchBlt
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__ReleaseDC@8:NEAR
EXTRN	?FillSolidRect@CDC@@QAEXHHHHK@Z:NEAR		; CDC::FillSolidRect
EXTRN	??1CDC@@UAE@XZ:NEAR				; CDC::~CDC
EXTRN	??0CBitmap@@QAE@XZ:NEAR				; CBitmap::CBitmap
EXTRN	?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z:NEAR ; CBitmap::CreateCompatibleBitmap
EXTRN	??BCBitmap@@QBEPAUHBITMAP__@@XZ:NEAR		; CBitmap::operator HBITMAP__ *
EXTRN	??1CBitmap@@UAE@XZ:NEAR				; CBitmap::~CBitmap
EXTRN	??BCDC@@QBEPAUHDC__@@XZ:NEAR			; CDC::operator HDC__ *
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:NEAR		; CDC::Attach
EXTRN	?Detach@CDC@@QAEPAUHDC__@@XZ:NEAR		; CDC::Detach
EXTRN	??0CDC@@QAE@XZ:NEAR				; CDC::CDC
EXTRN	__imp__GetObjectA@12:NEAR
EXTRN	?CreateCompatibleDC@CDC@@QAEHPAV1@@Z:NEAR	; CDC::CreateCompatibleDC
EXTRN	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?SetStretchBltMode@CDC@@QAEHH@Z:NEAR		; CDC::SetStretchBltMode
xdata$x	SEGMENT
$T188848 DD	0ffffffffH
	DD	FLAT:$L188831
	DD	00H
	DD	FLAT:$L188832
	DD	01H
	DD	FLAT:$L188833
	DD	02H
	DD	FLAT:$L188834
	DD	03H
	DD	FLAT:$L188835
$T188837 DD	019930520H
	DD	05H
	DD	FLAT:$T188848
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_pbmpOld2$187547 = -188					; size = 4
_pbmpOld1$187546 = -184					; size = 4
_bmpIconScaled$187545 = -176				; size = 8
_bmpIcon$187544 = -160					; size = 8
_dcTmp2$187543 = -144					; size = 16
_dcTmp1$187542 = -120					; size = 16
_dc$187541 = -96					; size = 16
_bm$187538 = -72					; size = 24
_iconinfo$ = -40					; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hIcon$ = 8						; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z PROC NEAR ; CBalloonHelp::SetIconScaled
; _this$ = ecx

; 265  : {

  010e0	55		 push	 ebp
  010e1	8b ec		 mov	 ebp, esp
  010e3	6a ff		 push	 -1
  010e5	68 00 00 00 00	 push	 __ehhandler$?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z
  010ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  010f0	50		 push	 eax
  010f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  010f8	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  010fe	56		 push	 esi
  010ff	57		 push	 edi
  01100	51		 push	 ecx
  01101	8d bd 44 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-188]
  01107	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0110c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01111	f3 ab		 rep stosd
  01113	59		 pop	 ecx
  01114	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :    // i now have two device contexts and two bitmaps.
; 267  :    // i will select a bitmap in each device context,
; 268  :    // draw the icon into the first one,
; 269  :    // scale it into the second one,
; 270  :    // and set the second one as the balloon icon.
; 271  :    // This is a rather long process to get a scaled icon,
; 272  :    // but ensures maximum compatibility between different
; 273  :    // versions of Windows, while producing the best possible
; 274  :    // results on each version (quite good in WinNT and better, sorta ok in Win9x).
; 275  :    ICONINFO iconinfo;
; 276  :    if ( NULL != hIcon && ::GetIconInfo(hIcon, &iconinfo) )

  01117	83 7d 08 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  0111b	0f 84 64 02 00
	00		 je	 $L187535
  01121	8b f4		 mov	 esi, esp
  01123	8d 45 d8	 lea	 eax, DWORD PTR _iconinfo$[ebp]
  01126	50		 push	 eax
  01127	8b 4d 08	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  0112a	51		 push	 ecx
  0112b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetIconInfo@8
  01131	3b f4		 cmp	 esi, esp
  01133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01138	85 c0		 test	 eax, eax
  0113a	0f 84 45 02 00
	00		 je	 $L187535

; 277  :    {
; 278  :       BITMAP bm;
; 279  :       if (::GetObject(iconinfo.hbmColor, sizeof(bm),(LPVOID)&bm))

  01140	8b f4		 mov	 esi, esp
  01142	8d 55 b8	 lea	 edx, DWORD PTR _bm$187538[ebp]
  01145	52		 push	 edx
  01146	6a 18		 push	 24			; 00000018H
  01148	8b 45 e8	 mov	 eax, DWORD PTR _iconinfo$[ebp+16]
  0114b	50		 push	 eax
  0114c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  01152	3b f4		 cmp	 esi, esp
  01154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01159	85 c0		 test	 eax, eax
  0115b	0f 84 fe 01 00
	00		 je	 $L187540

; 280  :       {
; 281  :          CDC dc;

  01161	8d 4d a0	 lea	 ecx, DWORD PTR _dc$187541[ebp]
  01164	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  01169	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 282  :          CDC dcTmp1;

  01170	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  01173	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  01178	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 283  :          CDC dcTmp2;

  0117c	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  01182	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  01187	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 284  :          CBitmap bmpIcon;

  0118b	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIcon$187544[ebp]
  01191	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  01196	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 285  :          CBitmap bmpIconScaled;

  0119a	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIconScaled$187545[ebp]
  011a0	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  011a5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 286  :          dc.Attach(::GetDC(NULL));

  011a9	8b f4		 mov	 esi, esp
  011ab	6a 00		 push	 0
  011ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  011b3	3b f4		 cmp	 esi, esp
  011b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011ba	50		 push	 eax
  011bb	8d 4d a0	 lea	 ecx, DWORD PTR _dc$187541[ebp]
  011be	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach

; 287  :          dcTmp1.CreateCompatibleDC(&dc);

  011c3	8d 4d a0	 lea	 ecx, DWORD PTR _dc$187541[ebp]
  011c6	51		 push	 ecx
  011c7	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  011ca	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 288  :          dcTmp2.CreateCompatibleDC(&dc);

  011cf	8d 55 a0	 lea	 edx, DWORD PTR _dc$187541[ebp]
  011d2	52		 push	 edx
  011d3	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  011d9	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 289  :          bmpIcon.CreateCompatibleBitmap(&dc, bm.bmWidth, bm.bmHeight);

  011de	8b 45 c0	 mov	 eax, DWORD PTR _bm$187538[ebp+8]
  011e1	50		 push	 eax
  011e2	8b 4d bc	 mov	 ecx, DWORD PTR _bm$187538[ebp+4]
  011e5	51		 push	 ecx
  011e6	8d 55 a0	 lea	 edx, DWORD PTR _dc$187541[ebp]
  011e9	52		 push	 edx
  011ea	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIcon$187544[ebp]
  011f0	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 290  :          bmpIconScaled.CreateCompatibleBitmap(&dc, cx, cy);

  011f5	8b 45 10	 mov	 eax, DWORD PTR _cy$[ebp]
  011f8	50		 push	 eax
  011f9	8b 4d 0c	 mov	 ecx, DWORD PTR _cx$[ebp]
  011fc	51		 push	 ecx
  011fd	8d 55 a0	 lea	 edx, DWORD PTR _dc$187541[ebp]
  01200	52		 push	 edx
  01201	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIconScaled$187545[ebp]
  01207	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 291  :          ::ReleaseDC(NULL, dc.Detach());

  0120c	8d 4d a0	 lea	 ecx, DWORD PTR _dc$187541[ebp]
  0120f	e8 00 00 00 00	 call	 ?Detach@CDC@@QAEPAUHDC__@@XZ ; CDC::Detach
  01214	8b f4		 mov	 esi, esp
  01216	50		 push	 eax
  01217	6a 00		 push	 0
  01219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  0121f	3b f4		 cmp	 esi, esp
  01221	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : 
; 293  :          CBitmap* pbmpOld1 = dcTmp1.SelectObject(&bmpIcon);

  01226	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _bmpIcon$187544[ebp]
  0122c	50		 push	 eax
  0122d	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  01230	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  01235	89 85 48 ff ff
	ff		 mov	 DWORD PTR _pbmpOld1$187546[ebp], eax

; 294  :          CBitmap* pbmpOld2 = dcTmp2.SelectObject(&bmpIconScaled);

  0123b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIconScaled$187545[ebp]
  01241	51		 push	 ecx
  01242	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  01248	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  0124d	89 85 44 ff ff
	ff		 mov	 DWORD PTR _pbmpOld2$187547[ebp], eax

; 295  :          dcTmp1.FillSolidRect(0,0,bm.bmWidth,bm.bmHeight, m_crBackground);

  01253	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01256	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0125c	50		 push	 eax
  0125d	8b 4d c0	 mov	 ecx, DWORD PTR _bm$187538[ebp+8]
  01260	51		 push	 ecx
  01261	8b 55 bc	 mov	 edx, DWORD PTR _bm$187538[ebp+4]
  01264	52		 push	 edx
  01265	6a 00		 push	 0
  01267	6a 00		 push	 0
  01269	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  0126c	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXHHHHK@Z ; CDC::FillSolidRect

; 296  :          ::DrawIconEx(dcTmp1, 0,0,hIcon,bm.bmWidth,bm.bmHeight,0,NULL,DI_NORMAL);

  01271	8b f4		 mov	 esi, esp
  01273	6a 03		 push	 3
  01275	6a 00		 push	 0
  01277	6a 00		 push	 0
  01279	8b 45 c0	 mov	 eax, DWORD PTR _bm$187538[ebp+8]
  0127c	50		 push	 eax
  0127d	8b 4d bc	 mov	 ecx, DWORD PTR _bm$187538[ebp+4]
  01280	51		 push	 ecx
  01281	8b 55 08	 mov	 edx, DWORD PTR _hIcon$[ebp]
  01284	52		 push	 edx
  01285	6a 00		 push	 0
  01287	6a 00		 push	 0
  01289	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  0128c	e8 00 00 00 00	 call	 ??BCDC@@QBEPAUHDC__@@XZ	; CDC::operator HDC__ *
  01291	50		 push	 eax
  01292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawIconEx@36
  01298	3b f4		 cmp	 esi, esp
  0129a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 297  :          dcTmp2.SetStretchBltMode(HALFTONE);

  0129f	6a 04		 push	 4
  012a1	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  012a7	e8 00 00 00 00	 call	 ?SetStretchBltMode@CDC@@QAEHH@Z ; CDC::SetStretchBltMode

; 298  :          dcTmp2.StretchBlt(0,0,cx,cy,&dcTmp1, 0,0,bm.bmWidth,bm.bmHeight,SRCCOPY);

  012ac	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  012b1	8b 45 c0	 mov	 eax, DWORD PTR _bm$187538[ebp+8]
  012b4	50		 push	 eax
  012b5	8b 4d bc	 mov	 ecx, DWORD PTR _bm$187538[ebp+4]
  012b8	51		 push	 ecx
  012b9	6a 00		 push	 0
  012bb	6a 00		 push	 0
  012bd	8d 55 88	 lea	 edx, DWORD PTR _dcTmp1$187542[ebp]
  012c0	52		 push	 edx
  012c1	8b 45 10	 mov	 eax, DWORD PTR _cy$[ebp]
  012c4	50		 push	 eax
  012c5	8b 4d 0c	 mov	 ecx, DWORD PTR _cx$[ebp]
  012c8	51		 push	 ecx
  012c9	6a 00		 push	 0
  012cb	6a 00		 push	 0
  012cd	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  012d3	e8 00 00 00 00	 call	 ?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z ; CDC::StretchBlt

; 299  :          dcTmp1.SelectObject(pbmpOld1);

  012d8	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _pbmpOld1$187546[ebp]
  012de	52		 push	 edx
  012df	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  012e2	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 300  :          dcTmp2.SelectObject(pbmpOld2);

  012e7	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _pbmpOld2$187547[ebp]
  012ed	50		 push	 eax
  012ee	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  012f4	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 301  : 
; 302  :          SetIcon(bmpIconScaled, m_crBackground);

  012f9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  012fc	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  01302	52		 push	 edx
  01303	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIconScaled$187545[ebp]
  01309	e8 00 00 00 00	 call	 ??BCBitmap@@QBEPAUHBITMAP__@@XZ ; CBitmap::operator HBITMAP__ *
  0130e	50		 push	 eax
  0130f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01312	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z ; CBalloonHelp::SetIcon

; 303  :       }

  01317	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0131b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIconScaled$187545[ebp]
  01321	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  01326	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0132a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIcon$187544[ebp]
  01330	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  01335	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01339	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  0133f	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  01344	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01348	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  0134b	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  01350	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01357	8d 4d a0	 lea	 ecx, DWORD PTR _dc$187541[ebp]
  0135a	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L187540:

; 304  :       ::DeleteObject(iconinfo.hbmColor);

  0135f	8b f4		 mov	 esi, esp
  01361	8b 45 e8	 mov	 eax, DWORD PTR _iconinfo$[ebp+16]
  01364	50		 push	 eax
  01365	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  0136b	3b f4		 cmp	 esi, esp
  0136d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 305  :       ::DeleteObject(iconinfo.hbmMask);

  01372	8b f4		 mov	 esi, esp
  01374	8b 4d e4	 mov	 ecx, DWORD PTR _iconinfo$[ebp+12]
  01377	51		 push	 ecx
  01378	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  0137e	3b f4		 cmp	 esi, esp
  01380	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187535:

; 306  :    }
; 307  : }

  01385	52		 push	 edx
  01386	8b cd		 mov	 ecx, ebp
  01388	50		 push	 eax
  01389	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188847
  0138f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01394	58		 pop	 eax
  01395	5a		 pop	 edx
  01396	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01399	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  013a0	5f		 pop	 edi
  013a1	5e		 pop	 esi
  013a2	81 c4 bc 00 00
	00		 add	 esp, 188		; 000000bcH
  013a8	3b ec		 cmp	 ebp, esp
  013aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  013af	8b e5		 mov	 esp, ebp
  013b1	5d		 pop	 ebp
  013b2	c2 0c 00	 ret	 12			; 0000000cH
$L188847:
  013b5	07 00 00 00	 DD	 7
  013b9	00 00 00 00	 DD	 $L188846
$L188846:
  013bd	d8 ff ff ff	 DD	 -40			; ffffffd8H
  013c1	14 00 00 00	 DD	 20			; 00000014H
  013c5	00 00 00 00	 DD	 $L188838
  013c9	b8 ff ff ff	 DD	 -72			; ffffffb8H
  013cd	18 00 00 00	 DD	 24			; 00000018H
  013d1	00 00 00 00	 DD	 $L188839
  013d5	a0 ff ff ff	 DD	 -96			; ffffffa0H
  013d9	10 00 00 00	 DD	 16			; 00000010H
  013dd	00 00 00 00	 DD	 $L188840
  013e1	88 ff ff ff	 DD	 -120			; ffffff88H
  013e5	10 00 00 00	 DD	 16			; 00000010H
  013e9	00 00 00 00	 DD	 $L188841
  013ed	70 ff ff ff	 DD	 -144			; ffffff70H
  013f1	10 00 00 00	 DD	 16			; 00000010H
  013f5	00 00 00 00	 DD	 $L188842
  013f9	60 ff ff ff	 DD	 -160			; ffffff60H
  013fd	08 00 00 00	 DD	 8
  01401	00 00 00 00	 DD	 $L188843
  01405	50 ff ff ff	 DD	 -176			; ffffff50H
  01409	08 00 00 00	 DD	 8
  0140d	00 00 00 00	 DD	 $L188844
$L188844:
  01411	62		 DB	 98			; 00000062H
  01412	6d		 DB	 109			; 0000006dH
  01413	70		 DB	 112			; 00000070H
  01414	49		 DB	 73			; 00000049H
  01415	63		 DB	 99			; 00000063H
  01416	6f		 DB	 111			; 0000006fH
  01417	6e		 DB	 110			; 0000006eH
  01418	53		 DB	 83			; 00000053H
  01419	63		 DB	 99			; 00000063H
  0141a	61		 DB	 97			; 00000061H
  0141b	6c		 DB	 108			; 0000006cH
  0141c	65		 DB	 101			; 00000065H
  0141d	64		 DB	 100			; 00000064H
  0141e	00		 DB	 0
$L188843:
  0141f	62		 DB	 98			; 00000062H
  01420	6d		 DB	 109			; 0000006dH
  01421	70		 DB	 112			; 00000070H
  01422	49		 DB	 73			; 00000049H
  01423	63		 DB	 99			; 00000063H
  01424	6f		 DB	 111			; 0000006fH
  01425	6e		 DB	 110			; 0000006eH
  01426	00		 DB	 0
$L188842:
  01427	64		 DB	 100			; 00000064H
  01428	63		 DB	 99			; 00000063H
  01429	54		 DB	 84			; 00000054H
  0142a	6d		 DB	 109			; 0000006dH
  0142b	70		 DB	 112			; 00000070H
  0142c	32		 DB	 50			; 00000032H
  0142d	00		 DB	 0
$L188841:
  0142e	64		 DB	 100			; 00000064H
  0142f	63		 DB	 99			; 00000063H
  01430	54		 DB	 84			; 00000054H
  01431	6d		 DB	 109			; 0000006dH
  01432	70		 DB	 112			; 00000070H
  01433	31		 DB	 49			; 00000031H
  01434	00		 DB	 0
$L188840:
  01435	64		 DB	 100			; 00000064H
  01436	63		 DB	 99			; 00000063H
  01437	00		 DB	 0
$L188839:
  01438	62		 DB	 98			; 00000062H
  01439	6d		 DB	 109			; 0000006dH
  0143a	00		 DB	 0
$L188838:
  0143b	69		 DB	 105			; 00000069H
  0143c	63		 DB	 99			; 00000063H
  0143d	6f		 DB	 111			; 0000006fH
  0143e	6e		 DB	 110			; 0000006eH
  0143f	69		 DB	 105			; 00000069H
  01440	6e		 DB	 110			; 0000006eH
  01441	66		 DB	 102			; 00000066H
  01442	6f		 DB	 111			; 0000006fH
  01443	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188831:
  000ec	8d 4d a0	 lea	 ecx, DWORD PTR _dc$187541[ebp]
  000ef	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L188832:
  000f4	8d 4d 88	 lea	 ecx, DWORD PTR _dcTmp1$187542[ebp]
  000f7	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L188833:
  000fc	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _dcTmp2$187543[ebp]
  00102	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L188834:
  00107	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIcon$187544[ebp]
  0010d	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L188835:
  00112	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _bmpIconScaled$187545[ebp]
  00118	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z:
  0011d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188837
  00122	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z ENDP	; CBalloonHelp::SetIconScaled
EXTRN	?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z:NEAR ; CBitmap::FromHandle
EXTRN	?Create@CImageList@@QAEHHHIHH@Z:NEAR		; CImageList::Create
EXTRN	?Add@CImageList@@QAEHPAVCBitmap@@K@Z:NEAR	; CImageList::Add
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_bm$187556 = -32					; size = 24
_this$ = -4						; size = 4
_hBitmap$ = 8						; size = 4
_crMask$ = 12						; size = 4
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 311  : {

  01450	55		 push	 ebp
  01451	8b ec		 mov	 ebp, esp
  01453	83 ec 24	 sub	 esp, 36			; 00000024H
  01456	56		 push	 esi
  01457	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0145c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0145f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  01462	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01465	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01468	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0146b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0146e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01471	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01474	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01477	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 312  :    if ( NULL != m_ilIcon.m_hImageList )

  0147a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0147d	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  01484	74 0e		 je	 SHORT $L187554

; 313  :       m_ilIcon.DeleteImageList();

  01486	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01489	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0148f	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList
$L187554:

; 314  : 
; 315  :    if ( NULL != hBitmap )

  01494	83 7d 08 00	 cmp	 DWORD PTR _hBitmap$[ebp], 0
  01498	74 55		 je	 SHORT $L187555

; 316  :    {
; 317  :       BITMAP bm;
; 318  :       if (::GetObject(hBitmap, sizeof(bm),(LPVOID)&bm))

  0149a	8b f4		 mov	 esi, esp
  0149c	8d 4d e0	 lea	 ecx, DWORD PTR _bm$187556[ebp]
  0149f	51		 push	 ecx
  014a0	6a 18		 push	 24			; 00000018H
  014a2	8b 55 08	 mov	 edx, DWORD PTR _hBitmap$[ebp]
  014a5	52		 push	 edx
  014a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  014ac	3b f4		 cmp	 esi, esp
  014ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014b3	85 c0		 test	 eax, eax
  014b5	74 38		 je	 SHORT $L187555

; 319  :       {
; 320  :          m_ilIcon.Create(bm.bmWidth, bm.bmHeight, ILC_COLOR24|ILC_MASK,1,0);

  014b7	6a 00		 push	 0
  014b9	6a 01		 push	 1
  014bb	6a 19		 push	 25			; 00000019H
  014bd	8b 45 e8	 mov	 eax, DWORD PTR _bm$187556[ebp+8]
  014c0	50		 push	 eax
  014c1	8b 4d e4	 mov	 ecx, DWORD PTR _bm$187556[ebp+4]
  014c4	51		 push	 ecx
  014c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014c8	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  014ce	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 321  :          m_ilIcon.Add(CBitmap::FromHandle(hBitmap), crMask);

  014d3	8b 55 0c	 mov	 edx, DWORD PTR _crMask$[ebp]
  014d6	52		 push	 edx
  014d7	8b 45 08	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  014da	50		 push	 eax
  014db	e8 00 00 00 00	 call	 ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ; CBitmap::FromHandle
  014e0	50		 push	 eax
  014e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e4	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  014ea	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L187555:

; 322  :       }
; 323  :    }
; 324  :    // if already visible, resize & move (icon size may have changed)
; 325  :    if ( NULL != m_hWnd )

  014ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014f2	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  014f6	74 08		 je	 SHORT $L187553

; 326  :       PositionWindow();

  014f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014fb	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187553:

; 327  : }

  01500	52		 push	 edx
  01501	8b cd		 mov	 ecx, ebp
  01503	50		 push	 eax
  01504	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188852
  0150a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0150f	58		 pop	 eax
  01510	5a		 pop	 edx
  01511	5e		 pop	 esi
  01512	83 c4 24	 add	 esp, 36			; 00000024H
  01515	3b ec		 cmp	 ebp, esp
  01517	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0151c	8b e5		 mov	 esp, ebp
  0151e	5d		 pop	 ebp
  0151f	c2 08 00	 ret	 8
$L188852:
  01522	01 00 00 00	 DD	 1
  01526	00 00 00 00	 DD	 $L188851
$L188851:
  0152a	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0152e	18 00 00 00	 DD	 24			; 00000018H
  01532	00 00 00 00	 DD	 $L188850
$L188850:
  01536	62		 DB	 98			; 00000062H
  01537	6d		 DB	 109			; 0000006dH
  01538	00		 DB	 0
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z ENDP	; CBalloonHelp::SetIcon
_TEXT	ENDS
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
EXTRN	?Add@CImageList@@QAEHPAVCBitmap@@0@Z:NEAR	; CImageList::Add
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_bm$ = -32						; size = 24
_this$ = -4						; size = 4
_hBitmap$ = 8						; size = 4
_hMask$ = 12						; size = 4
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 331  : {

  01540	55		 push	 ebp
  01541	8b ec		 mov	 ebp, esp
  01543	83 ec 24	 sub	 esp, 36			; 00000024H
  01546	56		 push	 esi
  01547	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0154c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0154f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  01552	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01555	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01558	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0155b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0155e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01561	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01564	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01567	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 332  :    if ( NULL != m_ilIcon.m_hImageList )

  0156a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0156d	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  01574	74 0e		 je	 SHORT $L187565

; 333  :       m_ilIcon.DeleteImageList();

  01576	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01579	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0157f	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList
$L187565:

; 334  : 
; 335  :    ASSERT(NULL != hBitmap);

  01584	83 7d 08 00	 cmp	 DWORD PTR _hBitmap$[ebp], 0
  01588	75 14		 jne	 SHORT $L188854
  0158a	68 4f 01 00 00	 push	 335			; 0000014fH
  0158f	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  01594	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  01599	85 c0		 test	 eax, eax
  0159b	74 01		 je	 SHORT $L188854
  0159d	cc		 int	 3
$L188854:

; 336  :    ASSERT(NULL != hMask);

  0159e	83 7d 0c 00	 cmp	 DWORD PTR _hMask$[ebp], 0
  015a2	75 14		 jne	 SHORT $L188855
  015a4	68 50 01 00 00	 push	 336			; 00000150H
  015a9	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  015ae	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  015b3	85 c0		 test	 eax, eax
  015b5	74 01		 je	 SHORT $L188855
  015b7	cc		 int	 3
$L188855:

; 337  : 
; 338  :    BITMAP bm;
; 339  :    if (::GetObject(hBitmap, sizeof(bm),(LPVOID)&bm))

  015b8	8b f4		 mov	 esi, esp
  015ba	8d 45 e0	 lea	 eax, DWORD PTR _bm$[ebp]
  015bd	50		 push	 eax
  015be	6a 18		 push	 24			; 00000018H
  015c0	8b 4d 08	 mov	 ecx, DWORD PTR _hBitmap$[ebp]
  015c3	51		 push	 ecx
  015c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  015ca	3b f4		 cmp	 esi, esp
  015cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  015d1	85 c0		 test	 eax, eax
  015d3	74 3e		 je	 SHORT $L187570

; 340  :    {
; 341  :       m_ilIcon.Create(bm.bmWidth, bm.bmHeight, ILC_COLOR24|ILC_MASK,1,0);

  015d5	6a 00		 push	 0
  015d7	6a 01		 push	 1
  015d9	6a 19		 push	 25			; 00000019H
  015db	8b 55 e8	 mov	 edx, DWORD PTR _bm$[ebp+8]
  015de	52		 push	 edx
  015df	8b 45 e4	 mov	 eax, DWORD PTR _bm$[ebp+4]
  015e2	50		 push	 eax
  015e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015e6	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  015ec	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 342  :       m_ilIcon.Add(CBitmap::FromHandle(hBitmap), CBitmap::FromHandle(hMask));

  015f1	8b 4d 0c	 mov	 ecx, DWORD PTR _hMask$[ebp]
  015f4	51		 push	 ecx
  015f5	e8 00 00 00 00	 call	 ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ; CBitmap::FromHandle
  015fa	50		 push	 eax
  015fb	8b 55 08	 mov	 edx, DWORD PTR _hBitmap$[ebp]
  015fe	52		 push	 edx
  015ff	e8 00 00 00 00	 call	 ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ; CBitmap::FromHandle
  01604	50		 push	 eax
  01605	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01608	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0160e	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@0@Z ; CImageList::Add
$L187570:

; 343  :    }
; 344  :    // if already visible, resize & move (icon size may have changed)
; 345  :    if ( NULL != m_hWnd )

  01613	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01616	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0161a	74 08		 je	 SHORT $L187564

; 346  :       PositionWindow();

  0161c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0161f	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187564:

; 347  : }

  01624	52		 push	 edx
  01625	8b cd		 mov	 ecx, ebp
  01627	50		 push	 eax
  01628	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188858
  0162e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01633	58		 pop	 eax
  01634	5a		 pop	 edx
  01635	5e		 pop	 esi
  01636	83 c4 24	 add	 esp, 36			; 00000024H
  01639	3b ec		 cmp	 ebp, esp
  0163b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01640	8b e5		 mov	 esp, ebp
  01642	5d		 pop	 ebp
  01643	c2 08 00	 ret	 8
$L188858:
  01646	01 00 00 00	 DD	 1
  0164a	00 00 00 00	 DD	 $L188857
$L188857:
  0164e	e0 ff ff ff	 DD	 -32			; ffffffe0H
  01652	18 00 00 00	 DD	 24			; 00000018H
  01656	00 00 00 00	 DD	 $L188856
$L188856:
  0165a	62		 DB	 98			; 00000062H
  0165b	6d		 DB	 109			; 0000006dH
  0165c	00		 DB	 0
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z ENDP	; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAVCImageList@@H@Z	; CBalloonHelp::SetIcon
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:NEAR ; AfxAssertValidObject
EXTRN	__imp__DestroyIcon@4:NEAR
EXTRN	?GetImageCount@CImageList@@QBEHXZ:NEAR		; CImageList::GetImageCount
EXTRN	?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z:NEAR ; CImageList::ExtractIconA
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_hIcon$ = -8						; size = 4
_this$ = -4						; size = 4
_pImageList$ = 8					; size = 4
_nIconIndex$ = 12					; size = 4
?SetIcon@CBalloonHelp@@QAEXPAVCImageList@@H@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 351  : {

  01660	55		 push	 ebp
  01661	8b ec		 mov	 ebp, esp
  01663	83 ec 08	 sub	 esp, 8
  01666	56		 push	 esi
  01667	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0166e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  01675	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 352  :    // sanity checks
; 353  :    ASSERT_VALID(pImageList);

  01678	68 61 01 00 00	 push	 353			; 00000161H
  0167d	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  01682	8b 45 08	 mov	 eax, DWORD PTR _pImageList$[ebp]
  01685	50		 push	 eax
  01686	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 354  :    ASSERT(nIconIndex >= 0 && nIconIndex < pImageList->GetImageCount() );

  0168b	83 7d 0c 00	 cmp	 DWORD PTR _nIconIndex$[ebp], 0
  0168f	7c 0d		 jl	 SHORT $L188860
  01691	8b 4d 08	 mov	 ecx, DWORD PTR _pImageList$[ebp]
  01694	e8 00 00 00 00	 call	 ?GetImageCount@CImageList@@QBEHXZ ; CImageList::GetImageCount
  01699	39 45 0c	 cmp	 DWORD PTR _nIconIndex$[ebp], eax
  0169c	7c 14		 jl	 SHORT $L188861
$L188860:
  0169e	68 62 01 00 00	 push	 354			; 00000162H
  016a3	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  016a8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  016ad	85 c0		 test	 eax, eax
  016af	74 01		 je	 SHORT $L188861
  016b1	cc		 int	 3
$L188861:

; 355  : 
; 356  :    HICON hIcon = NULL;

  016b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hIcon$[ebp], 0

; 357  :    if ( NULL != pImageList && nIconIndex >= 0 && nIconIndex < pImageList->GetImageCount() )

  016b9	83 7d 08 00	 cmp	 DWORD PTR _pImageList$[ebp], 0
  016bd	74 22		 je	 SHORT $L187579
  016bf	83 7d 0c 00	 cmp	 DWORD PTR _nIconIndex$[ebp], 0
  016c3	7c 1c		 jl	 SHORT $L187579
  016c5	8b 4d 08	 mov	 ecx, DWORD PTR _pImageList$[ebp]
  016c8	e8 00 00 00 00	 call	 ?GetImageCount@CImageList@@QBEHXZ ; CImageList::GetImageCount
  016cd	39 45 0c	 cmp	 DWORD PTR _nIconIndex$[ebp], eax
  016d0	7d 0f		 jge	 SHORT $L187579

; 358  :       hIcon = pImageList->ExtractIcon(nIconIndex);

  016d2	8b 55 0c	 mov	 edx, DWORD PTR _nIconIndex$[ebp]
  016d5	52		 push	 edx
  016d6	8b 4d 08	 mov	 ecx, DWORD PTR _pImageList$[ebp]
  016d9	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  016de	89 45 f8	 mov	 DWORD PTR _hIcon$[ebp], eax
$L187579:

; 359  :    SetIcon(hIcon);

  016e1	8b 45 f8	 mov	 eax, DWORD PTR _hIcon$[ebp]
  016e4	50		 push	 eax
  016e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016e8	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z ; CBalloonHelp::SetIcon

; 360  :    if ( NULL != hIcon )

  016ed	83 7d f8 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  016f1	74 13		 je	 SHORT $L187580

; 361  :       ::DestroyIcon(hIcon);

  016f3	8b f4		 mov	 esi, esp
  016f5	8b 4d f8	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  016f8	51		 push	 ecx
  016f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  016ff	3b f4		 cmp	 esi, esp
  01701	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187580:

; 362  :    // if already visible, resize & move (icon size may have changed)
; 363  :    if ( NULL != m_hWnd )

  01706	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01709	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0170d	74 08		 je	 SHORT $L187576

; 364  :       PositionWindow();

  0170f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01712	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187576:

; 365  : }

  01717	5e		 pop	 esi
  01718	83 c4 08	 add	 esp, 8
  0171b	3b ec		 cmp	 ebp, esp
  0171d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01722	8b e5		 mov	 esp, ebp
  01724	5d		 pop	 ebp
  01725	c2 08 00	 ret	 8
?SetIcon@CBalloonHelp@@QAEXPAVCImageList@@H@Z ENDP	; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	?SetURL@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CBalloonHelp::SetURL
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strURL$ = 8						; size = 4
?SetURL@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CBalloonHelp::SetURL
; _this$ = ecx

; 369  : {

  01730	55		 push	 ebp
  01731	8b ec		 mov	 ebp, esp
  01733	51		 push	 ecx
  01734	56		 push	 esi
  01735	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0173c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  :    m_strURL = strURL;

  0173f	8b f4		 mov	 esi, esp
  01741	8b 45 08	 mov	 eax, DWORD PTR _strURL$[ebp]
  01744	50		 push	 eax
  01745	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01748	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0174e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01754	3b f4		 cmp	 esi, esp
  01756	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 371  : }

  0175b	5e		 pop	 esi
  0175c	83 c4 04	 add	 esp, 4
  0175f	3b ec		 cmp	 ebp, esp
  01761	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01766	8b e5		 mov	 esp, ebp
  01768	5d		 pop	 ebp
  01769	c2 04 00	 ret	 4
?SetURL@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CBalloonHelp::SetURL
_TEXT	ENDS
PUBLIC	?SetTimeout@CBalloonHelp@@QAEXI@Z		; CBalloonHelp::SetTimeout
EXTRN	?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z:NEAR ; CWnd::SetTimer
EXTRN	?KillTimer@CWnd@@QAEHI@Z:NEAR			; CWnd::KillTimer
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unTimeout$ = 8						; size = 4
?SetTimeout@CBalloonHelp@@QAEXI@Z PROC NEAR		; CBalloonHelp::SetTimeout
; _this$ = ecx

; 375  : {

  01770	55		 push	 ebp
  01771	8b ec		 mov	 ebp, esp
  01773	51		 push	 ecx
  01774	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0177b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 376  :    m_unTimeout = unTimeout;

  0177e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01781	8b 4d 08	 mov	 ecx, DWORD PTR _unTimeout$[ebp]
  01784	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 377  :    // if timer is already set, reset.
; 378  :    if ( NULL != m_hWnd )

  0178a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0178d	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  01791	74 3f		 je	 SHORT $L187589

; 379  :    {
; 380  :       if ( m_unTimeout > 0 )

  01793	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01796	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  0179d	76 21		 jbe	 SHORT $L187591

; 381  :       {
; 382  :          m_unTimerClose = (unsigned int) SetTimer(ID_TIMER_CLOSE, m_unTimeout, NULL);

  0179f	6a 00		 push	 0
  017a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017a4	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  017aa	52		 push	 edx
  017ab	6a 01		 push	 1
  017ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017b0	e8 00 00 00 00	 call	 ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ; CWnd::SetTimer
  017b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017b8	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 383  :       }
; 384  :       else

  017be	eb 12		 jmp	 SHORT $L187589
$L187591:

; 385  :       {
; 386  :          KillTimer(m_unTimerClose);

  017c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  017c3	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  017c9	50		 push	 eax
  017ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017cd	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer
$L187589:

; 387  :       }
; 388  :    }
; 389  : }

  017d2	83 c4 04	 add	 esp, 4
  017d5	3b ec		 cmp	 ebp, esp
  017d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  017dc	8b e5		 mov	 esp, ebp
  017de	5d		 pop	 ebp
  017df	c2 04 00	 ret	 4
?SetTimeout@CBalloonHelp@@QAEXI@Z ENDP			; CBalloonHelp::SetTimeout
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00011	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00025	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0002f	8b f4		 mov	 esi, esp
  00031	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00045	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0004c	75 15		 jne	 SHORT $L24163
  0004e	83 bd 68 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00055	72 0c		 jb	 SHORT $L24163

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00057	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00061	eb 0a		 jmp	 SHORT $L24164
$L24163:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00063	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24164:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0006d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00079	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  0007e	8b f4		 mov	 esi, esp
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188869
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$L188869:
  000b9	01 00 00 00	 DD	 1
  000bd	00 00 00 00	 DD	 $L188868
$L188868:
  000c1	64 ff ff ff	 DD	 -156			; ffffff64H
  000c5	94 00 00 00	 DD	 148			; 00000094H
  000c9	00 00 00 00	 DD	 $L188866
$L188866:
  000cd	76		 DB	 118			; 00000076H
  000ce	65		 DB	 101			; 00000065H
  000cf	72		 DB	 114			; 00000072H
  000d0	00		 DB	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24151 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	89 45 f4	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00045	8b f4		 mov	 esi, esp
  00047	6a 07		 push	 7
  00049	8d 45 e8	 lea	 eax, DWORD PTR _szACP$[ebp]
  0004c	50		 push	 eax
  0004d	68 04 10 00 00	 push	 4100			; 00001004H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  00055	51		 push	 ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	74 34		 je	 SHORT $L24150

; 111  : 	{
; 112  : 		char* pch = szACP;

  00067	8d 55 e8	 lea	 edx, DWORD PTR _szACP$[ebp]
  0006a	89 55 e0	 mov	 DWORD PTR _pch$24151[ebp], edx
$L24153:

; 113  : 		while (*pch != '\0')

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00070	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00073	85 c9		 test	 ecx, ecx
  00075	74 24		 je	 SHORT $L24150

; 114  : 		{
; 115  : 			nACP *= 10;

  00077	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  0007a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0007d	89 55 f8	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00080	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  00089	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0008d	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _pch$24151[ebp]
  00093	83 c1 01	 add	 ecx, 1
  00096	89 4d e0	 mov	 DWORD PTR _pch$24151[ebp], ecx

; 117  : 		}

  00099	eb d2		 jmp	 SHORT $L24153
$L24150:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0009f	75 12		 jne	 SHORT $L24155

; 121  : 		nACP = ::GetACP();

  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
$L24155:

; 122  : 
; 123  : 	return nACP;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188876
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	5e		 pop	 esi
  000d0	83 c4 20	 add	 esp, 32			; 00000020H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$L188876:
  000de	01 00 00 00	 DD	 1
  000e2	00 00 00 00	 DD	 $L188875
$L188875:
  000e6	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ea	07 00 00 00	 DD	 7
  000ee	00 00 00 00	 DD	 $L188873
$L188873:
  000f2	73		 DB	 115			; 00000073H
  000f3	7a		 DB	 122			; 0000007aH
  000f4	41		 DB	 65			; 00000041H
  000f5	43		 DB	 67			; 00000043H
  000f6	50		 DB	 80			; 00000050H
  000f7	00		 DB	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z ; CBalloonHelp::SetAnchorPoint
PUBLIC	?SetCallWndRetHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::SetCallWndRetHook
PUBLIC	?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ	; CBalloonHelp::RemoveCallWndRetHook
EXTRN	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ:NEAR	; CWnd::GetSafeHwnd
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptAnchor$ = 8						; size = 8
_pWndAnchor$ = 16					; size = 4
?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z PROC NEAR ; CBalloonHelp::SetAnchorPoint
; _this$ = ecx

; 393  : {

  017f0	55		 push	 ebp
  017f1	8b ec		 mov	 ebp, esp
  017f3	51		 push	 ecx
  017f4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  017fb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :    m_ptAnchor = ptAnchor;

  017fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01801	8b 4d 08	 mov	 ecx, DWORD PTR _ptAnchor$[ebp]
  01804	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx
  0180a	8b 55 0c	 mov	 edx, DWORD PTR _ptAnchor$[ebp+4]
  0180d	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 395  :    m_hwndAnchor = pWndAnchor->GetSafeHwnd();

  01813	8b 4d 10	 mov	 ecx, DWORD PTR _pWndAnchor$[ebp]
  01816	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  0181b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0181e	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 396  : 
; 397  :    // if we're anchored to a window, set hook
; 398  :    if ( NULL != m_hwndAnchor )

  01824	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01827	83 ba 98 00 00
	00 00		 cmp	 DWORD PTR [edx+152], 0
  0182e	74 0a		 je	 SHORT $L187599

; 399  :       SetCallWndRetHook();

  01830	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01833	e8 00 00 00 00	 call	 ?SetCallWndRetHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::SetCallWndRetHook

; 400  :    else

  01838	eb 08		 jmp	 SHORT $L187600
$L187599:

; 401  :       RemoveCallWndRetHook();

  0183a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0183d	e8 00 00 00 00	 call	 ?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveCallWndRetHook
$L187600:

; 402  : 
; 403  :    // if already visible, move
; 404  :    if ( NULL != m_hWnd )

  01842	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01845	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  01849	74 08		 je	 SHORT $L187598

; 405  :    {
; 406  :       // reposition
; 407  :       PositionWindow();

  0184b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0184e	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187598:

; 408  :    }
; 409  : }

  01853	83 c4 04	 add	 esp, 4
  01856	3b ec		 cmp	 ebp, esp
  01858	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0185d	8b e5		 mov	 esp, ebp
  0185f	5d		 pop	 ebp
  01860	c2 0c 00	 ret	 12			; 0000000cH
?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z ENDP ; CBalloonHelp::SetAnchorPoint
_TEXT	ENDS
PUBLIC	?SetTitle@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CBalloonHelp::SetTitle
EXTRN	?SetWindowTextA@CWnd@@QAEXPBD@Z:NEAR		; CWnd::SetWindowTextA
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strTitle$ = 8						; size = 4
?SetTitle@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CBalloonHelp::SetTitle
; _this$ = ecx

; 413  : {

  01870	55		 push	 ebp
  01871	8b ec		 mov	 ebp, esp
  01873	51		 push	 ecx
  01874	56		 push	 esi
  01875	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0187c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  :    SetWindowText(strTitle);

  0187f	8b f4		 mov	 esi, esp
  01881	8b 4d 08	 mov	 ecx, DWORD PTR _strTitle$[ebp]
  01884	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0188a	3b f4		 cmp	 esi, esp
  0188c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01891	50		 push	 eax
  01892	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01895	e8 00 00 00 00	 call	 ?SetWindowTextA@CWnd@@QAEXPBD@Z ; CWnd::SetWindowTextA

; 415  :    // if already visible, resize & move
; 416  :    if ( NULL != m_hWnd )

  0189a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0189d	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  018a1	74 08		 je	 SHORT $L187605

; 417  :       PositionWindow();

  018a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018a6	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187605:

; 418  : }

  018ab	5e		 pop	 esi
  018ac	83 c4 04	 add	 esp, 4
  018af	3b ec		 cmp	 ebp, esp
  018b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018b6	8b e5		 mov	 esp, ebp
  018b8	5d		 pop	 ebp
  018b9	c2 04 00	 ret	 4
?SetTitle@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CBalloonHelp::SetTitle
_TEXT	ENDS
PUBLIC	?SetContent@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CBalloonHelp::SetContent
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strContent$ = 8					; size = 4
?SetContent@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CBalloonHelp::SetContent
; _this$ = ecx

; 422  : {

  018c0	55		 push	 ebp
  018c1	8b ec		 mov	 ebp, esp
  018c3	51		 push	 ecx
  018c4	56		 push	 esi
  018c5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  018cc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 423  :    m_strContent = strContent;

  018cf	8b f4		 mov	 esi, esp
  018d1	8b 45 08	 mov	 eax, DWORD PTR _strContent$[ebp]
  018d4	50		 push	 eax
  018d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018d8	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  018de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  018e4	3b f4		 cmp	 esi, esp
  018e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 424  :    // if already visible, resize & move
; 425  :    if ( NULL != m_hWnd )

  018eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018ee	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  018f2	74 08		 je	 SHORT $L187610

; 426  :       PositionWindow();

  018f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018f7	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L187610:

; 427  : }

  018fc	5e		 pop	 esi
  018fd	83 c4 04	 add	 esp, 4
  01900	3b ec		 cmp	 ebp, esp
  01902	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01907	8b e5		 mov	 esp, ebp
  01909	5d		 pop	 ebp
  0190a	c2 04 00	 ret	 4
?SetContent@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CBalloonHelp::SetContent
_TEXT	ENDS
PUBLIC	?SetForegroundColor@CBalloonHelp@@QAEXK@Z	; CBalloonHelp::SetForegroundColor
EXTRN	?Invalidate@CWnd@@QAEXH@Z:NEAR			; CWnd::Invalidate
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crForeground$ = 8					; size = 4
?SetForegroundColor@CBalloonHelp@@QAEXK@Z PROC NEAR	; CBalloonHelp::SetForegroundColor
; _this$ = ecx

; 431  : {

  01910	55		 push	 ebp
  01911	8b ec		 mov	 ebp, esp
  01913	51		 push	 ecx
  01914	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0191b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 432  :    m_crForeground = crForeground;

  0191e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01921	8b 4d 08	 mov	 ecx, DWORD PTR _crForeground$[ebp]
  01924	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx

; 433  :    // repaint if visible
; 434  :    if ( NULL != m_hWnd )

  0192a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0192d	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  01931	74 0a		 je	 SHORT $L187615

; 435  :       Invalidate(FALSE);

  01933	6a 00		 push	 0
  01935	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01938	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L187615:

; 436  : }

  0193d	83 c4 04	 add	 esp, 4
  01940	3b ec		 cmp	 ebp, esp
  01942	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01947	8b e5		 mov	 esp, ebp
  01949	5d		 pop	 ebp
  0194a	c2 04 00	 ret	 4
?SetForegroundColor@CBalloonHelp@@QAEXK@Z ENDP		; CBalloonHelp::SetForegroundColor
_TEXT	ENDS
PUBLIC	?SetBackgroundColor@CBalloonHelp@@QAEXK@Z	; CBalloonHelp::SetBackgroundColor
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crBackground$ = 8					; size = 4
?SetBackgroundColor@CBalloonHelp@@QAEXK@Z PROC NEAR	; CBalloonHelp::SetBackgroundColor
; _this$ = ecx

; 440  : {

  01950	55		 push	 ebp
  01951	8b ec		 mov	 ebp, esp
  01953	51		 push	 ecx
  01954	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0195b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 441  :    m_crBackground = crBackground;

  0195e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01961	8b 4d 08	 mov	 ecx, DWORD PTR _crBackground$[ebp]
  01964	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 442  :    // repaint if visible
; 443  :    if ( NULL != m_hWnd )

  0196a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0196d	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  01971	74 0a		 je	 SHORT $L187620

; 444  :       Invalidate(FALSE);

  01973	6a 00		 push	 0
  01975	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01978	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L187620:

; 445  : }

  0197d	83 c4 04	 add	 esp, 4
  01980	3b ec		 cmp	 ebp, esp
  01982	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01987	8b e5		 mov	 esp, ebp
  01989	5d		 pop	 ebp
  0198a	c2 04 00	 ret	 4
?SetBackgroundColor@CBalloonHelp@@QAEXK@Z ENDP		; CBalloonHelp::SetBackgroundColor
_TEXT	ENDS
PUBLIC	?SetMouseMoveTolerance@CBalloonHelp@@QAEXH@Z	; CBalloonHelp::SetMouseMoveTolerance
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nTolerance$ = 8					; size = 4
?SetMouseMoveTolerance@CBalloonHelp@@QAEXH@Z PROC NEAR	; CBalloonHelp::SetMouseMoveTolerance
; _this$ = ecx

; 449  : {

  01990	55		 push	 ebp
  01991	8b ec		 mov	 ebp, esp
  01993	51		 push	 ecx
  01994	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0199b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 450  :    m_nMouseMoveTolerance = nTolerance;

  0199e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019a1	8b 4d 08	 mov	 ecx, DWORD PTR _nTolerance$[ebp]
  019a4	89 88 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ecx

; 451  : }

  019aa	8b e5		 mov	 esp, ebp
  019ac	5d		 pop	 ebp
  019ad	c2 04 00	 ret	 4
?SetMouseMoveTolerance@CBalloonHelp@@QAEXH@Z ENDP	; CBalloonHelp::SetMouseMoveTolerance
_TEXT	ENDS
PUBLIC	?ShowBalloon@CBalloonHelp@@IAEXXZ		; CBalloonHelp::ShowBalloon
PUBLIC	?GetClassAtom@CBalloonHelp@@KAGH@Z		; CBalloonHelp::GetClassAtom
PUBLIC	?SetKeyboardHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::SetKeyboardHook
PUBLIC	?SetMouseHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::SetMouseHook
EXTRN	?CreateStockObject@CGdiObject@@QAEHH@Z:NEAR	; CGdiObject::CreateStockObject
EXTRN	??0CFont@@QAE@XZ:NEAR				; CFont::CFont
EXTRN	?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z:NEAR ; CFont::CreateFontIndirectA
EXTRN	?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z:NEAR	; CFont::GetLogFont
EXTRN	?GetSafeOwner@CWnd@@SGPAV1@PAV1@PAPAUHWND__@@@Z:NEAR ; CWnd::GetSafeOwner
EXTRN	__imp__GetCursorPos@4:NEAR
EXTRN	?GetCapture@CWnd@@SGPAV1@XZ:NEAR		; CWnd::GetCapture
EXTRN	?SetCapture@CWnd@@QAEPAV1@XZ:NEAR		; CWnd::SetCapture
xdata$x	SEGMENT
$T188913 DD	0ffffffffH
	DD	FLAT:$L188902
	DD	00H
	DD	FLAT:$L188903
	DD	00H
	DD	FLAT:$L188904
$T188906 DD	019930520H
	DD	03H
	DD	FLAT:$T188913
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv155 = -172						; size = 4
tv135 = -168						; size = 4
$T188901 = -164						; size = 4
$T188900 = -160						; size = 4
$T188899 = -156						; size = 16
$T188898 = -140						; size = 4
$T188897 = -136						; size = 4
$T188894 = -132						; size = 4
$T188893 = -128						; size = 4
$T188892 = -124						; size = 4
$T188889 = -120						; size = 4
$T188888 = -116						; size = 4
$T188887 = -112						; size = 4
_dwExStyle$ = -108					; size = 4
_bFade$ = -100						; size = 4
_wndClass$ = -92					; size = 2
_LogFont$187657 = -84					; size = 60
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_strTitle$ = 8						; size = 4
_strContent$ = 12					; size = 4
_ptAnchor$ = 16						; size = 4
_unOptions$ = 20					; size = 4
_pParentWnd$ = 24					; size = 4
_strURL$ = 28						; size = 4
_unTimeout$ = 32					; size = 4
_hIcon$ = 36						; size = 4
?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z PROC NEAR ; CBalloonHelp::Create
; _this$ = ecx

; 493  : {

  019b0	55		 push	 ebp
  019b1	8b ec		 mov	 ebp, esp
  019b3	6a ff		 push	 -1
  019b5	68 00 00 00 00	 push	 __ehhandler$?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z
  019ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  019c0	50		 push	 eax
  019c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  019c8	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  019ce	56		 push	 esi
  019cf	57		 push	 edi
  019d0	51		 push	 ecx
  019d1	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  019d7	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  019dc	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  019e1	f3 ab		 rep stosd
  019e3	59		 pop	 ecx
  019e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  019e9	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  019ec	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  019ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 494  :    m_strContent   = strContent;

  019f6	8b f4		 mov	 esi, esp
  019f8	8b 45 0c	 mov	 eax, DWORD PTR _strContent$[ebp]
  019fb	50		 push	 eax
  019fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  019ff	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  01a05	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01a0b	3b f4		 cmp	 esi, esp
  01a0d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 495  :    SetAnchorPoint(ptAnchor, pParentWnd);

  01a12	8b 4d 18	 mov	 ecx, DWORD PTR _pParentWnd$[ebp]
  01a15	51		 push	 ecx
  01a16	8b 55 10	 mov	 edx, DWORD PTR _ptAnchor$[ebp]
  01a19	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01a1c	50		 push	 eax
  01a1d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01a1f	51		 push	 ecx
  01a20	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a23	e8 00 00 00 00	 call	 ?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z ; CBalloonHelp::SetAnchorPoint

; 496  :    m_unOptions    = unOptions;

  01a28	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01a2b	8b 45 14	 mov	 eax, DWORD PTR _unOptions$[ebp]
  01a2e	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 497  :    m_strURL       = strURL;

  01a34	8b f4		 mov	 esi, esp
  01a36	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01a39	51		 push	 ecx
  01a3a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a3d	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  01a43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01a49	3b f4		 cmp	 esi, esp
  01a4b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 498  :    m_unTimeout    = unTimeout;

  01a50	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01a53	8b 45 20	 mov	 eax, DWORD PTR _unTimeout$[ebp]
  01a56	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 499  : 
; 500  :    if ( NULL != hIcon )

  01a5c	83 7d 24 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  01a60	74 0c		 je	 SHORT $L187637

; 501  :       SetIcon(hIcon);

  01a62	8b 4d 24	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  01a65	51		 push	 ecx
  01a66	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a69	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z ; CBalloonHelp::SetIcon
$L187637:

; 502  :    
; 503  :    pParentWnd = GetSafeOwner(pParentWnd);

  01a6e	6a 00		 push	 0
  01a70	8b 55 18	 mov	 edx, DWORD PTR _pParentWnd$[ebp]
  01a73	52		 push	 edx
  01a74	e8 00 00 00 00	 call	 ?GetSafeOwner@CWnd@@SGPAV1@PAV1@PAPAUHWND__@@@Z ; CWnd::GetSafeOwner
  01a79	89 45 18	 mov	 DWORD PTR _pParentWnd$[ebp], eax

; 504  :    if ( NULL == pParentWnd )

  01a7c	83 7d 18 00	 cmp	 DWORD PTR _pParentWnd$[ebp], 0
  01a80	75 40		 jne	 SHORT $L187638

; 505  :    {
; 506  :       // something is wrong; MFC should be able to find a main window.
; 507  :       ASSERT(FALSE);

  01a82	33 c0		 xor	 eax, eax
  01a84	75 14		 jne	 SHORT $L188886
  01a86	68 fb 01 00 00	 push	 507			; 000001fbH
  01a8b	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  01a90	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  01a95	85 c0		 test	 eax, eax
  01a97	74 01		 je	 SHORT $L188886
  01a99	cc		 int	 3
$L188886:

; 508  :       return FALSE;

  01a9a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T188887[ebp], 0
  01aa1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01aa8	8b f4		 mov	 esi, esp
  01aaa	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01aad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01ab3	3b f4		 cmp	 esi, esp
  01ab5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01aba	8b 45 90	 mov	 eax, DWORD PTR $T188887[ebp]
  01abd	e9 db 03 00 00	 jmp	 $L187636
$L187638:

; 509  :    }
; 510  : 
; 511  :    // if no fonts set, use defaults
; 512  :    if ( NULL == m_pContentFont )

  01ac2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01ac5	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  01acc	0f 85 8d 00 00
	00		 jne	 $L187641

; 513  :    {
; 514  :       m_pContentFont = new CFont;

  01ad2	68 02 02 00 00	 push	 514			; 00000202H
  01ad7	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  01adc	6a 08		 push	 8
  01ade	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  01ae3	89 45 88	 mov	 DWORD PTR $T188889[ebp], eax
  01ae6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01aea	83 7d 88 00	 cmp	 DWORD PTR $T188889[ebp], 0
  01aee	74 10		 je	 SHORT $L188890
  01af0	8b 4d 88	 mov	 ecx, DWORD PTR $T188889[ebp]
  01af3	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  01af8	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  01afe	eb 0a		 jmp	 SHORT $L188891
$L188890:
  01b00	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$L188891:
  01b0a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  01b10	89 45 8c	 mov	 DWORD PTR $T188888[ebp], eax
  01b13	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01b17	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01b1a	8b 55 8c	 mov	 edx, DWORD PTR $T188888[ebp]
  01b1d	89 91 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], edx

; 515  :       if ( !m_pContentFont->CreateStockObject(DEFAULT_GUI_FONT) )

  01b23	6a 11		 push	 17			; 00000011H
  01b25	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01b28	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01b2e	e8 00 00 00 00	 call	 ?CreateStockObject@CGdiObject@@QAEHH@Z ; CGdiObject::CreateStockObject
  01b33	85 c0		 test	 eax, eax
  01b35	75 28		 jne	 SHORT $L187641

; 516  :          return FALSE;

  01b37	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T188892[ebp], 0
  01b3e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01b45	8b f4		 mov	 esi, esp
  01b47	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01b4a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01b50	3b f4		 cmp	 esi, esp
  01b52	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01b57	8b 45 84	 mov	 eax, DWORD PTR $T188892[ebp]
  01b5a	e9 3e 03 00 00	 jmp	 $L187636
$L187641:

; 517  :    }
; 518  : 
; 519  :    // title font defaults to bold version of content font
; 520  :    if ( NULL == m_pTitleFont )

  01b5f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01b62	83 b9 ac 00 00
	00 00		 cmp	 DWORD PTR [ecx+172], 0
  01b69	0f 85 b7 00 00
	00		 jne	 $L187650

; 521  :    {
; 522  :       m_pTitleFont = new CFont;

  01b6f	68 0a 02 00 00	 push	 522			; 0000020aH
  01b74	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  01b79	6a 08		 push	 8
  01b7b	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  01b80	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T188894[ebp], eax
  01b86	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01b8a	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR $T188894[ebp], 0
  01b91	74 13		 je	 SHORT $L188895
  01b93	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T188894[ebp]
  01b99	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  01b9e	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  01ba4	eb 0a		 jmp	 SHORT $L188896
$L188895:
  01ba6	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv155[ebp], 0
$L188896:
  01bb0	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR tv155[ebp]
  01bb6	89 55 80	 mov	 DWORD PTR $T188893[ebp], edx
  01bb9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01bbd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01bc0	8b 4d 80	 mov	 ecx, DWORD PTR $T188893[ebp]
  01bc3	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 523  :       LOGFONT LogFont;
; 524  :       m_pContentFont->GetLogFont(&LogFont);

  01bc9	8d 55 ac	 lea	 edx, DWORD PTR _LogFont$187657[ebp]
  01bcc	52		 push	 edx
  01bcd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01bd0	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  01bd6	e8 00 00 00 00	 call	 ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z ; CFont::GetLogFont

; 525  :       LogFont.lfWeight = FW_BOLD;

  01bdb	c7 45 bc bc 02
	00 00		 mov	 DWORD PTR _LogFont$187657[ebp+16], 700 ; 000002bcH

; 526  :       if ( !m_pTitleFont->CreateFontIndirect(&LogFont) )

  01be2	8d 4d ac	 lea	 ecx, DWORD PTR _LogFont$187657[ebp]
  01be5	51		 push	 ecx
  01be6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01be9	8b 8a ac 00 00
	00		 mov	 ecx, DWORD PTR [edx+172]
  01bef	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
  01bf4	85 c0		 test	 eax, eax
  01bf6	75 2e		 jne	 SHORT $L187650

; 527  :          return FALSE;

  01bf8	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T188897[ebp], 0
  01c02	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01c09	8b f4		 mov	 esi, esp
  01c0b	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01c0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01c14	3b f4		 cmp	 esi, esp
  01c16	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c1b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T188897[ebp]
  01c21	e9 77 02 00 00	 jmp	 $L187636
$L187650:

; 528  :    }
; 529  : 
; 530  :    ATOM wndClass = GetClassAtom(!(m_unOptions&unDISABLE_XP_SHADOW));

  01c26	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01c29	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01c2f	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  01c35	f7 d9		 neg	 ecx
  01c37	1b c9		 sbb	 ecx, ecx
  01c39	41		 inc	 ecx
  01c3a	51		 push	 ecx
  01c3b	e8 00 00 00 00	 call	 ?GetClassAtom@CBalloonHelp@@KAGH@Z ; CBalloonHelp::GetClassAtom
  01c40	83 c4 04	 add	 esp, 4
  01c43	66 89 45 a4	 mov	 WORD PTR _wndClass$[ebp], ax

; 531  :    if ( NULL == wndClass )  // couldn't register class

  01c47	0f b7 55 a4	 movzx	 edx, WORD PTR _wndClass$[ebp]
  01c4b	85 d2		 test	 edx, edx
  01c4d	75 2e		 jne	 SHORT $L187661

; 532  :       return FALSE;

  01c4f	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T188898[ebp], 0
  01c59	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01c60	8b f4		 mov	 esi, esp
  01c62	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01c65	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01c6b	3b f4		 cmp	 esi, esp
  01c6d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c72	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T188898[ebp]
  01c78	e9 20 02 00 00	 jmp	 $L187636
$L187661:

; 533  : 
; 534  :    // check system settings: if fade effects are disabled or unavailable, disable here too
; 535  :    BOOL bFade = FALSE;

  01c7d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _bFade$[ebp], 0

; 536  :    ::SystemParametersInfo(SPI_GETTOOLTIPANIMATION, 0, &bFade, 0);

  01c84	8b f4		 mov	 esi, esp
  01c86	6a 00		 push	 0
  01c88	8d 45 9c	 lea	 eax, DWORD PTR _bFade$[ebp]
  01c8b	50		 push	 eax
  01c8c	6a 00		 push	 0
  01c8e	68 16 10 00 00	 push	 4118			; 00001016H
  01c93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  01c99	3b f4		 cmp	 esi, esp
  01c9b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 537  :    if (bFade)

  01ca0	83 7d 9c 00	 cmp	 DWORD PTR _bFade$[ebp], 0
  01ca4	74 1c		 je	 SHORT $L187664

; 538  :       ::SystemParametersInfo(SPI_GETTOOLTIPFADE, 0, &bFade, 0);

  01ca6	8b f4		 mov	 esi, esp
  01ca8	6a 00		 push	 0
  01caa	8d 4d 9c	 lea	 ecx, DWORD PTR _bFade$[ebp]
  01cad	51		 push	 ecx
  01cae	6a 00		 push	 0
  01cb0	68 18 10 00 00	 push	 4120			; 00001018H
  01cb5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  01cbb	3b f4		 cmp	 esi, esp
  01cbd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187664:

; 539  :    if (!bFade || NULL == m_fnAnimateWindow)

  01cc2	83 7d 9c 00	 cmp	 DWORD PTR _bFade$[ebp], 0
  01cc6	74 09		 je	 SHORT $L187666
  01cc8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01ccb	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  01ccf	75 18		 jne	 SHORT $L187665
$L187666:

; 540  :       m_unOptions |= unDISABLE_FADE;

  01cd1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01cd4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01cda	81 c9 00 c0 00
	00		 or	 ecx, 49152		; 0000c000H
  01ce0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01ce3	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx
$L187665:

; 541  : 
; 542  :    // create invisible at arbitrary position; then position, set region, and finally show
; 543  : 
; 544  :    // the idea with WS_EX_TOOLWINDOW is, you can't switch to this using alt+tab
; 545  :    DWORD dwExStyle = WS_EX_TOOLWINDOW;

  01ce9	c7 45 94 80 00
	00 00		 mov	 DWORD PTR _dwExStyle$[ebp], 128 ; 00000080H

; 546  :    if ( m_unOptions&unSHOW_TOPMOST )      // make topmost, if requested

  01cf0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01cf3	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01cf9	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  01cff	74 09		 je	 SHORT $L187668

; 547  :       dwExStyle |= WS_EX_TOPMOST;

  01d01	8b 55 94	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  01d04	83 ca 08	 or	 edx, 8
  01d07	89 55 94	 mov	 DWORD PTR _dwExStyle$[ebp], edx
$L187668:

; 548  :    if ( !CreateEx(dwExStyle, (LPCTSTR)wndClass, strTitle, WS_POPUP, CRect(0,0,10,10), pParentWnd, 0, NULL) )

  01d0a	8b f4		 mov	 esi, esp
  01d0c	6a 00		 push	 0
  01d0e	6a 00		 push	 0
  01d10	8b 45 18	 mov	 eax, DWORD PTR _pParentWnd$[ebp]
  01d13	50		 push	 eax
  01d14	6a 0a		 push	 10			; 0000000aH
  01d16	6a 0a		 push	 10			; 0000000aH
  01d18	6a 00		 push	 0
  01d1a	6a 00		 push	 0
  01d1c	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T188899[ebp]
  01d22	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  01d27	50		 push	 eax
  01d28	68 00 00 00 80	 push	 -2147483648		; 80000000H
  01d2d	8b fc		 mov	 edi, esp
  01d2f	8b 4d 08	 mov	 ecx, DWORD PTR _strTitle$[ebp]
  01d32	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  01d38	3b fc		 cmp	 edi, esp
  01d3a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d3f	50		 push	 eax
  01d40	0f b7 4d a4	 movzx	 ecx, WORD PTR _wndClass$[ebp]
  01d44	51		 push	 ecx
  01d45	8b 55 94	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  01d48	52		 push	 edx
  01d49	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01d4c	8b 10		 mov	 edx, DWORD PTR [eax]
  01d4e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01d51	ff 52 60	 call	 DWORD PTR [edx+96]
  01d54	3b f4		 cmp	 esi, esp
  01d56	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d5b	85 c0		 test	 eax, eax
  01d5d	75 2e		 jne	 SHORT $L187671

; 549  :       return FALSE;

  01d5f	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T188900[ebp], 0
  01d69	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01d70	8b f4		 mov	 esi, esp
  01d72	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01d75	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01d7b	3b f4		 cmp	 esi, esp
  01d7d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d82	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T188900[ebp]
  01d88	e9 10 01 00 00	 jmp	 $L187636
$L187671:

; 550  :    PositionWindow();

  01d8d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01d90	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow

; 551  : 
; 552  :    if ( (m_unOptions&unCLOSE_ON_MOUSE_MOVE)
; 553  :       ||(m_unOptions&unCLOSE_ON_LBUTTON_UP)
; 554  :       ||(m_unOptions&unCLOSE_ON_LBUTTON_DOWN)
; 555  :       ||(m_unOptions&unCLOSE_ON_MBUTTON_UP)
; 556  :       ||(m_unOptions&unCLOSE_ON_MBUTTON_DOWN)
; 557  :       ||(m_unOptions&unCLOSE_ON_RBUTTON_UP)
; 558  :       ||(m_unOptions&unCLOSE_ON_RBUTTON_DOWN) )

  01d95	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01d98	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01d9e	83 e1 40	 and	 ecx, 64			; 00000040H
  01da1	75 54		 jne	 SHORT $L187674
  01da3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01da6	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  01dac	83 e0 01	 and	 eax, 1
  01daf	75 46		 jne	 SHORT $L187674
  01db1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01db4	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01dba	83 e2 08	 and	 edx, 8
  01dbd	75 38		 jne	 SHORT $L187674
  01dbf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01dc2	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01dc8	83 e1 02	 and	 ecx, 2
  01dcb	75 2a		 jne	 SHORT $L187674
  01dcd	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01dd0	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  01dd6	83 e0 10	 and	 eax, 16			; 00000010H
  01dd9	75 1c		 jne	 SHORT $L187674
  01ddb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01dde	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01de4	83 e2 04	 and	 edx, 4
  01de7	75 0e		 jne	 SHORT $L187674
  01de9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01dec	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01df2	83 e1 20	 and	 ecx, 32			; 00000020H
  01df5	74 21		 je	 SHORT $L187673
$L187674:

; 559  :    {
; 560  :       ::GetCursorPos(&m_ptMouseOrig);

  01df7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01dfa	81 c2 d4 00 00
	00		 add	 edx, 212		; 000000d4H
  01e00	8b f4		 mov	 esi, esp
  01e02	52		 push	 edx
  01e03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4
  01e09	3b f4		 cmp	 esi, esp
  01e0b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 561  :       SetMouseHook();

  01e10	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01e13	e8 00 00 00 00	 call	 ?SetMouseHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::SetMouseHook
$L187673:

; 562  :    }
; 563  : 
; 564  :    // these need to take effect even if the window receiving them
; 565  :    // is not owned by this process.  So, if this process does not
; 566  :    // already have the mouse captured, capture it!
; 567  :    if ( (m_unOptions&unCLOSE_ON_LBUTTON_UP)
; 568  :       ||(m_unOptions&unCLOSE_ON_MBUTTON_UP)
; 569  :       ||(m_unOptions&unCLOSE_ON_RBUTTON_UP) )

  01e18	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01e1b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01e21	83 e1 01	 and	 ecx, 1
  01e24	75 1c		 jne	 SHORT $L187676
  01e26	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01e29	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  01e2f	83 e0 02	 and	 eax, 2
  01e32	75 0e		 jne	 SHORT $L187676
  01e34	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01e37	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01e3d	83 e2 04	 and	 edx, 4
  01e40	74 11		 je	 SHORT $L187675
$L187676:

; 570  :    {
; 571  :       // no, i don't particularly need or want to deal with a situation
; 572  :       // where a balloon is being created and another program has captured
; 573  :       // the mouse.  If you need it, it shouldn't be too hard, just do it here.
; 574  :       if ( NULL == GetCapture() )

  01e42	e8 00 00 00 00	 call	 ?GetCapture@CWnd@@SGPAV1@XZ ; CWnd::GetCapture
  01e47	85 c0		 test	 eax, eax
  01e49	75 08		 jne	 SHORT $L187675

; 575  :          SetCapture();

  01e4b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01e4e	e8 00 00 00 00	 call	 ?SetCapture@CWnd@@QAEPAV1@XZ ; CWnd::SetCapture
$L187675:

; 576  :    }
; 577  : 
; 578  :    if ( m_unOptions&unCLOSE_ON_KEYPRESS )

  01e53	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01e56	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01e5c	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  01e62	74 08		 je	 SHORT $L187678

; 579  :       SetKeyboardHook();

  01e64	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01e67	e8 00 00 00 00	 call	 ?SetKeyboardHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::SetKeyboardHook
$L187678:

; 580  : 
; 581  :    ShowBalloon();

  01e6c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01e6f	e8 00 00 00 00	 call	 ?ShowBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::ShowBalloon

; 582  :    return TRUE;

  01e74	c7 85 5c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T188901[ebp], 1
  01e7e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01e85	8b f4		 mov	 esi, esp
  01e87	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01e8a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01e90	3b f4		 cmp	 esi, esp
  01e92	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01e97	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T188901[ebp]
$L187636:

; 583  : }

  01e9d	52		 push	 edx
  01e9e	8b cd		 mov	 ecx, ebp
  01ea0	50		 push	 eax
  01ea1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188912
  01ea7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01eac	58		 pop	 eax
  01ead	5a		 pop	 edx
  01eae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01eb1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01eb8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01ebb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01ec0	5f		 pop	 edi
  01ec1	5e		 pop	 esi
  01ec2	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  01ec8	3b ec		 cmp	 ebp, esp
  01eca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01ecf	8b e5		 mov	 esp, ebp
  01ed1	5d		 pop	 ebp
  01ed2	c2 20 00	 ret	 32			; 00000020H
$L188912:
  01ed5	02 00 00 00	 DD	 2
  01ed9	00 00 00 00	 DD	 $L188911
$L188911:
  01edd	ac ff ff ff	 DD	 -84			; ffffffacH
  01ee1	3c 00 00 00	 DD	 60			; 0000003cH
  01ee5	00 00 00 00	 DD	 $L188907
  01ee9	9c ff ff ff	 DD	 -100			; ffffff9cH
  01eed	04 00 00 00	 DD	 4
  01ef1	00 00 00 00	 DD	 $L188908
$L188908:
  01ef5	62		 DB	 98			; 00000062H
  01ef6	46		 DB	 70			; 00000046H
  01ef7	61		 DB	 97			; 00000061H
  01ef8	64		 DB	 100			; 00000064H
  01ef9	65		 DB	 101			; 00000065H
  01efa	00		 DB	 0
$L188907:
  01efb	4c		 DB	 76			; 0000004cH
  01efc	6f		 DB	 111			; 0000006fH
  01efd	67		 DB	 103			; 00000067H
  01efe	46		 DB	 70			; 00000046H
  01eff	6f		 DB	 111			; 0000006fH
  01f00	6e		 DB	 110			; 0000006eH
  01f01	74		 DB	 116			; 00000074H
  01f02	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188902:
  00127	8b f4		 mov	 esi, esp
  00129	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00132	3b f4		 cmp	 esi, esp
  00134	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L188903:
  00139	68 02 02 00 00	 push	 514			; 00000202H
  0013e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00143	8b 45 88	 mov	 eax, DWORD PTR $T188889[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  0014c	c3		 ret	 0
$L188904:
  0014d	68 0a 02 00 00	 push	 522			; 0000020aH
  00152	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00157	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T188894[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  00163	c3		 ret	 0
__ehhandler$?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z:
  00164	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188906
  00169	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z ENDP ; CBalloonHelp::Create
PUBLIC	?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ	; CBalloonHelp::GetAnchorPoint
EXTRN	__imp__ClientToScreen@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_ptAnchor$ = -16					; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ PROC NEAR ; CBalloonHelp::GetAnchorPoint
; _this$ = ecx

; 587  : {

  01f10	55		 push	 ebp
  01f11	8b ec		 mov	 ebp, esp
  01f13	83 ec 14	 sub	 esp, 20			; 00000014H
  01f16	56		 push	 esi
  01f17	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01f1c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  01f1f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  01f22	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01f25	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01f28	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01f2b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 588  :    CPoint ptAnchor = m_ptAnchor;

  01f2e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f31	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01f37	8b 90 a0 00 00
	00		 mov	 edx, DWORD PTR [eax+160]
  01f3d	89 4d f0	 mov	 DWORD PTR _ptAnchor$[ebp], ecx
  01f40	89 55 f4	 mov	 DWORD PTR _ptAnchor$[ebp+4], edx

; 589  :    // assume if window was given, point is in client coords
; 590  :    if ( NULL != m_hwndAnchor )

  01f43	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f46	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  01f4d	74 1d		 je	 SHORT $L187685

; 591  :       ::ClientToScreen(m_hwndAnchor, &ptAnchor);

  01f4f	8b f4		 mov	 esi, esp
  01f51	8d 4d f0	 lea	 ecx, DWORD PTR _ptAnchor$[ebp]
  01f54	51		 push	 ecx
  01f55	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01f58	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  01f5e	50		 push	 eax
  01f5f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
  01f65	3b f4		 cmp	 esi, esp
  01f67	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187685:

; 592  :    return ptAnchor;

  01f6c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01f6f	8b 55 f0	 mov	 edx, DWORD PTR _ptAnchor$[ebp]
  01f72	89 11		 mov	 DWORD PTR [ecx], edx
  01f74	8b 45 f4	 mov	 eax, DWORD PTR _ptAnchor$[ebp+4]
  01f77	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  01f7a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : }

  01f7d	52		 push	 edx
  01f7e	8b cd		 mov	 ecx, ebp
  01f80	50		 push	 eax
  01f81	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188917
  01f87	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01f8c	58		 pop	 eax
  01f8d	5a		 pop	 edx
  01f8e	5e		 pop	 esi
  01f8f	83 c4 14	 add	 esp, 20			; 00000014H
  01f92	3b ec		 cmp	 ebp, esp
  01f94	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01f99	8b e5		 mov	 esp, ebp
  01f9b	5d		 pop	 ebp
  01f9c	c2 04 00	 ret	 4
$L188917:
  01f9f	01 00 00 00	 DD	 1
  01fa3	00 00 00 00	 DD	 $L188916
$L188916:
  01fa7	f0 ff ff ff	 DD	 -16			; fffffff0H
  01fab	08 00 00 00	 DD	 8
  01faf	00 00 00 00	 DD	 $L188915
$L188915:
  01fb3	70		 DB	 112			; 00000070H
  01fb4	74		 DB	 116			; 00000074H
  01fb5	41		 DB	 65			; 00000041H
  01fb6	6e		 DB	 110			; 0000006eH
  01fb7	63		 DB	 99			; 00000063H
  01fb8	68		 DB	 104			; 00000068H
  01fb9	6f		 DB	 111			; 0000006fH
  01fba	72		 DB	 114			; 00000072H
  01fbb	00		 DB	 0
?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ENDP	; CBalloonHelp::GetAnchorPoint
_TEXT	ENDS
PUBLIC	?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds
EXTRN	?IsRectEmpty@CRect@@QBEHXZ:NEAR			; CRect::IsRectEmpty
EXTRN	??4CRect@@QAEXABUtagRECT@@@Z:NEAR		; CRect::operator=
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T188920 = -72						; size = 8
$T188919 = -64						; size = 8
_mi$187694 = -52					; size = 40
_hMonitor$187691 = -8					; size = 4
_this$ = -4						; size = 4
_rect$ = 8						; size = 4
?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z PROC NEAR ; CBalloonHelp::GetAnchorScreenBounds
; _this$ = ecx

; 597  : {

  01fc0	55		 push	 ebp
  01fc1	8b ec		 mov	 ebp, esp
  01fc3	83 ec 48	 sub	 esp, 72			; 00000048H
  01fc6	57		 push	 edi
  01fc7	51		 push	 ecx
  01fc8	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  01fcb	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  01fd0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01fd5	f3 ab		 rep stosd
  01fd7	59		 pop	 ecx
  01fd8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 598  :    if ( m_screenRect.IsRectEmpty() )

  01fdb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01fde	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  01fe4	e8 00 00 00 00	 call	 ?IsRectEmpty@CRect@@QBEHXZ ; CRect::IsRectEmpty
  01fe9	85 c0		 test	 eax, eax
  01feb	74 4f		 je	 SHORT $L187690

; 599  :    {     
; 600  :       // get the nearest monitor to the anchor
; 601  :       HMONITOR hMonitor = MonitorFromPoint(GetAnchorPoint(), MONITOR_DEFAULTTONEAREST);

  01fed	8d 45 b8	 lea	 eax, DWORD PTR $T188920[ebp]
  01ff0	50		 push	 eax
  01ff1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ff4	e8 00 00 00 00	 call	 ?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ; CBalloonHelp::GetAnchorPoint
  01ff9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ffb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01ffe	89 4d c0	 mov	 DWORD PTR $T188919[ebp], ecx
  02001	89 55 c4	 mov	 DWORD PTR $T188919[ebp+4], edx
  02004	6a 02		 push	 2
  02006	8b 45 c4	 mov	 eax, DWORD PTR $T188919[ebp+4]
  02009	50		 push	 eax
  0200a	8b 4d c0	 mov	 ecx, DWORD PTR $T188919[ebp]
  0200d	51		 push	 ecx
  0200e	e8 00 00 00 00	 call	 _xMonitorFromPoint@12
  02013	89 45 f8	 mov	 DWORD PTR _hMonitor$187691[ebp], eax

; 602  : 
; 603  :       // get the monitor bounds
; 604  :       MONITORINFO mi;
; 605  :       mi.cbSize = sizeof(mi);

  02016	c7 45 cc 28 00
	00 00		 mov	 DWORD PTR _mi$187694[ebp], 40 ; 00000028H

; 606  :       GetMonitorInfo(hMonitor, &mi);

  0201d	8d 55 cc	 lea	 edx, DWORD PTR _mi$187694[ebp]
  02020	52		 push	 edx
  02021	8b 45 f8	 mov	 eax, DWORD PTR _hMonitor$187691[ebp]
  02024	50		 push	 eax
  02025	e8 00 00 00 00	 call	 _xGetMonitorInfo@8

; 607  : 
; 608  :       // work area (area not obscured by task bar, etc.)
; 609  :       m_screenRect = mi.rcWork;

  0202a	8d 4d e0	 lea	 ecx, DWORD PTR _mi$187694[ebp+20]
  0202d	51		 push	 ecx
  0202e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02031	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  02037	e8 00 00 00 00	 call	 ??4CRect@@QAEXABUtagRECT@@@Z ; CRect::operator=
$L187690:

; 610  :    }
; 611  :    rect = m_screenRect;

  0203c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0203f	81 c2 bc 00 00
	00		 add	 edx, 188		; 000000bcH
  02045	8b 45 08	 mov	 eax, DWORD PTR _rect$[ebp]
  02048	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0204a	89 08		 mov	 DWORD PTR [eax], ecx
  0204c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0204f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  02052	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  02055	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  02058	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0205b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 612  : }

  0205e	52		 push	 edx
  0205f	8b cd		 mov	 ecx, ebp
  02061	50		 push	 eax
  02062	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188923
  02068	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0206d	58		 pop	 eax
  0206e	5a		 pop	 edx
  0206f	5f		 pop	 edi
  02070	83 c4 48	 add	 esp, 72			; 00000048H
  02073	3b ec		 cmp	 ebp, esp
  02075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0207a	8b e5		 mov	 esp, ebp
  0207c	5d		 pop	 ebp
  0207d	c2 04 00	 ret	 4
$L188923:
  02080	01 00 00 00	 DD	 1
  02084	00 00 00 00	 DD	 $L188922
$L188922:
  02088	cc ff ff ff	 DD	 -52			; ffffffccH
  0208c	28 00 00 00	 DD	 40			; 00000028H
  02090	00 00 00 00	 DD	 $L188921
$L188921:
  02094	6d		 DB	 109			; 0000006dH
  02095	69		 DB	 105			; 00000069H
  02096	00		 DB	 0
?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ENDP ; CBalloonHelp::GetAnchorScreenBounds
_TEXT	ENDS
PUBLIC	?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ; CBalloonHelp::GetBalloonQuadrant
EXTRN	??0CRect@@QAE@XZ:NEAR				; CRect::CRect
EXTRN	?Width@CRect@@QBEHXZ:NEAR			; CRect::Width
EXTRN	?Height@CRect@@QBEHXZ:NEAR			; CRect::Height
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_ptAnchor$ = -40					; size = 8
_rectDesktop$ = -24					; size = 16
_this$ = -4						; size = 4
?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ PROC NEAR ; CBalloonHelp::GetBalloonQuadrant
; _this$ = ecx

; 617  : {

  020a0	55		 push	 ebp
  020a1	8b ec		 mov	 ebp, esp
  020a3	83 ec 2c	 sub	 esp, 44			; 0000002cH
  020a6	57		 push	 edi
  020a7	51		 push	 ecx
  020a8	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  020ab	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  020b0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  020b5	f3 ab		 rep stosd
  020b7	59		 pop	 ecx
  020b8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 618  :    CRect rectDesktop;

  020bb	8d 4d e8	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  020be	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 619  :    GetAnchorScreenBounds(rectDesktop);

  020c3	8d 45 e8	 lea	 eax, DWORD PTR _rectDesktop$[ebp]
  020c6	50		 push	 eax
  020c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020ca	e8 00 00 00 00	 call	 ?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds

; 620  :    CPoint ptAnchor = GetAnchorPoint();

  020cf	8d 4d d8	 lea	 ecx, DWORD PTR _ptAnchor$[ebp]
  020d2	51		 push	 ecx
  020d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020d6	e8 00 00 00 00	 call	 ?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ; CBalloonHelp::GetAnchorPoint

; 621  :    
; 622  :    if ( ptAnchor.y < rectDesktop.top + rectDesktop.Height()/2 )

  020db	8d 4d e8	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  020de	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  020e3	99		 cdq
  020e4	2b c2		 sub	 eax, edx
  020e6	d1 f8		 sar	 eax, 1
  020e8	03 45 ec	 add	 eax, DWORD PTR _rectDesktop$[ebp+4]
  020eb	39 45 dc	 cmp	 DWORD PTR _ptAnchor$[ebp+4], eax
  020ee	7d 20		 jge	 SHORT $L187701

; 623  :    {
; 624  :       if ( ptAnchor.x < rectDesktop.left + rectDesktop.Width()/2 )

  020f0	8d 4d e8	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  020f3	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  020f8	99		 cdq
  020f9	2b c2		 sub	 eax, edx
  020fb	d1 f8		 sar	 eax, 1
  020fd	03 45 e8	 add	 eax, DWORD PTR _rectDesktop$[ebp]
  02100	39 45 d8	 cmp	 DWORD PTR _ptAnchor$[ebp], eax
  02103	7d 07		 jge	 SHORT $L187702

; 625  :       {
; 626  :          return BQ_TOPLEFT;

  02105	b8 01 00 00 00	 mov	 eax, 1
  0210a	eb 25		 jmp	 SHORT $L187697
$L187702:

; 627  :       }
; 628  :       else
; 629  :       {
; 630  :          return BQ_TOPRIGHT;

  0210c	33 c0		 xor	 eax, eax
  0210e	eb 21		 jmp	 SHORT $L187697
$L187701:

; 631  :       }
; 632  :    }
; 633  :    else
; 634  :    {
; 635  :       if ( ptAnchor.x < rectDesktop.left + rectDesktop.Width()/2 )

  02110	8d 4d e8	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  02113	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  02118	99		 cdq
  02119	2b c2		 sub	 eax, edx
  0211b	d1 f8		 sar	 eax, 1
  0211d	03 45 e8	 add	 eax, DWORD PTR _rectDesktop$[ebp]
  02120	39 45 d8	 cmp	 DWORD PTR _ptAnchor$[ebp], eax
  02123	7d 07		 jge	 SHORT $L187705

; 636  :       {
; 637  :          return BQ_BOTTOMLEFT;

  02125	b8 03 00 00 00	 mov	 eax, 3
  0212a	eb 05		 jmp	 SHORT $L187697
$L187705:

; 638  :       }
; 639  :       else
; 640  :       {
; 641  :          return BQ_BOTTOMRIGHT;

  0212c	b8 02 00 00 00	 mov	 eax, 2
$L187697:

; 642  :       }
; 643  :    }
; 644  : 
; 645  :    // unreachable
; 646  : }

  02131	52		 push	 edx
  02132	8b cd		 mov	 ecx, ebp
  02134	50		 push	 eax
  02135	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188928
  0213b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02140	58		 pop	 eax
  02141	5a		 pop	 edx
  02142	5f		 pop	 edi
  02143	83 c4 2c	 add	 esp, 44			; 0000002cH
  02146	3b ec		 cmp	 ebp, esp
  02148	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0214d	8b e5		 mov	 esp, ebp
  0214f	5d		 pop	 ebp
  02150	c3		 ret	 0
$L188928:
  02151	02 00 00 00	 DD	 2
  02155	00 00 00 00	 DD	 $L188927
$L188927:
  02159	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0215d	10 00 00 00	 DD	 16			; 00000010H
  02161	00 00 00 00	 DD	 $L188925
  02165	d8 ff ff ff	 DD	 -40			; ffffffd8H
  02169	08 00 00 00	 DD	 8
  0216d	00 00 00 00	 DD	 $L188926
$L188926:
  02171	70		 DB	 112			; 00000070H
  02172	74		 DB	 116			; 00000074H
  02173	41		 DB	 65			; 00000041H
  02174	6e		 DB	 110			; 0000006eH
  02175	63		 DB	 99			; 00000063H
  02176	68		 DB	 104			; 00000068H
  02177	6f		 DB	 111			; 0000006fH
  02178	72		 DB	 114			; 00000072H
  02179	00		 DB	 0
$L188925:
  0217a	72		 DB	 114			; 00000072H
  0217b	65		 DB	 101			; 00000065H
  0217c	63		 DB	 99			; 00000063H
  0217d	74		 DB	 116			; 00000074H
  0217e	44		 DB	 68			; 00000044H
  0217f	65		 DB	 101			; 00000065H
  02180	73		 DB	 115			; 00000073H
  02181	6b		 DB	 107			; 0000006bH
  02182	74		 DB	 116			; 00000074H
  02183	6f		 DB	 111			; 0000006fH
  02184	70		 DB	 112			; 00000070H
  02185	00		 DB	 0
?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ENDP ; CBalloonHelp::GetBalloonQuadrant
_TEXT	ENDS
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
EXTRN	??0CBrush@@QAE@XZ:NEAR				; CBrush::CBrush
EXTRN	?CreateSolidBrush@CBrush@@QAEHK@Z:NEAR		; CBrush::CreateSolidBrush
EXTRN	??1CBrush@@UAE@XZ:NEAR				; CBrush::~CBrush
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:NEAR	; CDC::FillSolidRect
EXTRN	?OffsetRect@CRect@@QAEXHH@Z:NEAR		; CRect::OffsetRect
EXTRN	?OffsetRgn@CRgn@@QAEHHH@Z:NEAR			; CRgn::OffsetRgn
EXTRN	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::GetWindowRect
EXTRN	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::GetClientRect
EXTRN	?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::ScreenToClient
EXTRN	?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z:NEAR ; CDC::FrameRgn
EXTRN	?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z:NEAR	; CDC::SelectClipRgn
EXTRN	?ExcludeClipRect@CDC@@QAEHPBUtagRECT@@@Z:NEAR	; CDC::ExcludeClipRect
xdata$x	SEGMENT
$T188942 DD	0ffffffffH
	DD	FLAT:$L188931
	DD	00H
	DD	FLAT:$L188932
$T188934 DD	019930520H
	DD	02H
	DD	FLAT:$T188942
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_blue$187722 = -108					; size = 4
_green$187719 = -104					; size = 4
_red$187717 = -100					; size = 4
_brushHL$187716 = -92					; size = 8
_brushFg$ = -76						; size = 8
_rectClient$ = -60					; size = 16
_rect$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z PROC NEAR ; CBalloonHelp::DrawNonClientArea
; _this$ = ecx

; 650  : {

  02190	55		 push	 ebp
  02191	8b ec		 mov	 ebp, esp
  02193	6a ff		 push	 -1
  02195	68 00 00 00 00	 push	 __ehhandler$?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z
  0219a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  021a0	50		 push	 eax
  021a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  021a8	83 ec 60	 sub	 esp, 96			; 00000060H
  021ab	56		 push	 esi
  021ac	57		 push	 edi
  021ad	51		 push	 ecx
  021ae	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  021b1	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  021b6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  021bb	f3 ab		 rep stosd
  021bd	59		 pop	 ecx
  021be	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 651  :    CRect rect;

  021c1	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  021c4	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 652  :    GetWindowRect(&rect);

  021c9	8d 45 dc	 lea	 eax, DWORD PTR _rect$[ebp]
  021cc	50		 push	 eax
  021cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  021d0	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 653  :    ScreenToClient(&rect);

  021d5	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  021d8	51		 push	 ecx
  021d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  021dc	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 654  :    CRect rectClient;

  021e1	8d 4d c4	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  021e4	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 655  :    GetClientRect(&rectClient);

  021e9	8d 55 c4	 lea	 edx, DWORD PTR _rectClient$[ebp]
  021ec	52		 push	 edx
  021ed	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  021f0	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 656  :    rectClient.OffsetRect(-rect.left, -rect.top);

  021f5	8b 45 e0	 mov	 eax, DWORD PTR _rect$[ebp+4]
  021f8	f7 d8		 neg	 eax
  021fa	50		 push	 eax
  021fb	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp]
  021fe	f7 d9		 neg	 ecx
  02200	51		 push	 ecx
  02201	8d 4d c4	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  02204	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 657  :    rect.OffsetRect(-rect.left, -rect.top);

  02209	8b 55 e0	 mov	 edx, DWORD PTR _rect$[ebp+4]
  0220c	f7 da		 neg	 edx
  0220e	52		 push	 edx
  0220f	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp]
  02212	f7 d8		 neg	 eax
  02214	50		 push	 eax
  02215	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  02218	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 658  :    pDC->ExcludeClipRect(&rectClient);

  0221d	8d 4d c4	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  02220	51		 push	 ecx
  02221	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02224	e8 00 00 00 00	 call	 ?ExcludeClipRect@CDC@@QAEHPBUtagRECT@@@Z ; CDC::ExcludeClipRect

; 659  :    pDC->FillSolidRect(&rect, m_crBackground);

  02229	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0222c	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  02232	50		 push	 eax
  02233	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  02236	51		 push	 ecx
  02237	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0223a	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 660  :    pDC->SelectClipRgn(NULL);

  0223f	6a 00		 push	 0
  02241	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02244	e8 00 00 00 00	 call	 ?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z ; CDC::SelectClipRgn

; 661  : 
; 662  :    ASSERT(NULL != m_rgnComplete.m_hObject);

  02249	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0224c	83 ba d0 00 00
	00 00		 cmp	 DWORD PTR [edx+208], 0
  02253	75 14		 jne	 SHORT $L188930
  02255	68 96 02 00 00	 push	 662			; 00000296H
  0225a	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0225f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  02264	85 c0		 test	 eax, eax
  02266	74 01		 je	 SHORT $L188930
  02268	cc		 int	 3
$L188930:

; 663  :    CBrush   brushFg;

  02269	8d 4d b4	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  0226c	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  02271	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 664  :    brushFg.CreateSolidBrush(m_crForeground);

  02278	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0227b	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  02281	52		 push	 edx
  02282	8d 4d b4	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  02285	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 665  :    if ( m_unOptions & unSHOW_INNER_SHADOW )

  0228a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0228d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02293	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  02299	0f 84 b9 01 00
	00		 je	 $L187715

; 666  :    {
; 667  :       CBrush   brushHL;

  0229f	8d 4d a4	 lea	 ecx, DWORD PTR _brushHL$187716[ebp]
  022a2	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  022a7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 668  :       // slightly lighter color
; 669  :       int red = 170 + GetRValue(m_crBackground)/3;

  022ab	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  022ae	0f b6 82 b4 00
	00 00		 movzx	 eax, BYTE PTR [edx+180]
  022b5	99		 cdq
  022b6	b9 03 00 00 00	 mov	 ecx, 3
  022bb	f7 f9		 idiv	 ecx
  022bd	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  022c2	89 45 9c	 mov	 DWORD PTR _red$187717[ebp], eax

; 670  :       int green = 170 + GetGValue(m_crBackground)/3;

  022c5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  022c8	0f b7 82 b4 00
	00 00		 movzx	 eax, WORD PTR [edx+180]
  022cf	c1 f8 08	 sar	 eax, 8
  022d2	0f b6 c0	 movzx	 eax, al
  022d5	99		 cdq
  022d6	b9 03 00 00 00	 mov	 ecx, 3
  022db	f7 f9		 idiv	 ecx
  022dd	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  022e2	89 45 98	 mov	 DWORD PTR _green$187719[ebp], eax

; 671  :       int blue = 170 + GetBValue(m_crBackground)/3;

  022e5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  022e8	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  022ee	c1 e8 10	 shr	 eax, 16			; 00000010H
  022f1	0f b6 c0	 movzx	 eax, al
  022f4	99		 cdq
  022f5	b9 03 00 00 00	 mov	 ecx, 3
  022fa	f7 f9		 idiv	 ecx
  022fc	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  02301	89 45 94	 mov	 DWORD PTR _blue$187722[ebp], eax

; 672  :       brushHL.CreateSolidBrush(RGB(red,green,blue));

  02304	0f b6 55 9c	 movzx	 edx, BYTE PTR _red$187717[ebp]
  02308	0f b6 45 98	 movzx	 eax, BYTE PTR _green$187719[ebp]
  0230c	c1 e0 08	 shl	 eax, 8
  0230f	0b d0		 or	 edx, eax
  02311	0f b6 4d 94	 movzx	 ecx, BYTE PTR _blue$187722[ebp]
  02315	c1 e1 10	 shl	 ecx, 16			; 00000010H
  02318	0b d1		 or	 edx, ecx
  0231a	52		 push	 edx
  0231b	8d 4d a4	 lea	 ecx, DWORD PTR _brushHL$187716[ebp]
  0231e	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 673  :       m_rgnComplete.OffsetRgn(1,1);

  02323	6a 01		 push	 1
  02325	6a 01		 push	 1
  02327	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0232a	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  02330	e8 00 00 00 00	 call	 ?OffsetRgn@CRgn@@QAEHHH@Z ; CRgn::OffsetRgn

; 674  :       pDC->FrameRgn(&m_rgnComplete, &brushHL, 2, 2);

  02335	6a 02		 push	 2
  02337	6a 02		 push	 2
  02339	8d 55 a4	 lea	 edx, DWORD PTR _brushHL$187716[ebp]
  0233c	52		 push	 edx
  0233d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  02340	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  02345	50		 push	 eax
  02346	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02349	e8 00 00 00 00	 call	 ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ; CDC::FrameRgn

; 675  :       // slightly darker color
; 676  :       red = GetRValue(m_crForeground)/3 + GetRValue(m_crBackground)/3*2;

  0234e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02351	0f b6 81 b8 00
	00 00		 movzx	 eax, BYTE PTR [ecx+184]
  02358	99		 cdq
  02359	b9 03 00 00 00	 mov	 ecx, 3
  0235e	f7 f9		 idiv	 ecx
  02360	8b c8		 mov	 ecx, eax
  02362	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  02365	0f b6 82 b4 00
	00 00		 movzx	 eax, BYTE PTR [edx+180]
  0236c	99		 cdq
  0236d	be 03 00 00 00	 mov	 esi, 3
  02372	f7 fe		 idiv	 esi
  02374	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  02377	89 45 9c	 mov	 DWORD PTR _red$187717[ebp], eax

; 677  :       green = GetGValue(m_crForeground)/3 + GetGValue(m_crBackground)/3*2;

  0237a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0237d	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  02384	c1 fa 08	 sar	 edx, 8
  02387	0f b6 c2	 movzx	 eax, dl
  0238a	99		 cdq
  0238b	b9 03 00 00 00	 mov	 ecx, 3
  02390	f7 f9		 idiv	 ecx
  02392	8b c8		 mov	 ecx, eax
  02394	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  02397	0f b7 82 b4 00
	00 00		 movzx	 eax, WORD PTR [edx+180]
  0239e	c1 f8 08	 sar	 eax, 8
  023a1	0f b6 c0	 movzx	 eax, al
  023a4	99		 cdq
  023a5	be 03 00 00 00	 mov	 esi, 3
  023aa	f7 fe		 idiv	 esi
  023ac	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  023af	89 4d 98	 mov	 DWORD PTR _green$187719[ebp], ecx

; 678  :       blue = GetBValue(m_crForeground)/3 + GetBValue(m_crBackground)/3*2;

  023b2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  023b5	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  023bb	c1 e8 10	 shr	 eax, 16			; 00000010H
  023be	0f b6 c0	 movzx	 eax, al
  023c1	99		 cdq
  023c2	b9 03 00 00 00	 mov	 ecx, 3
  023c7	f7 f9		 idiv	 ecx
  023c9	8b c8		 mov	 ecx, eax
  023cb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  023ce	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  023d4	c1 e8 10	 shr	 eax, 16			; 00000010H
  023d7	0f b6 c0	 movzx	 eax, al
  023da	99		 cdq
  023db	be 03 00 00 00	 mov	 esi, 3
  023e0	f7 fe		 idiv	 esi
  023e2	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  023e5	89 4d 94	 mov	 DWORD PTR _blue$187722[ebp], ecx

; 679  :       brushHL.DeleteObject();

  023e8	8d 4d a4	 lea	 ecx, DWORD PTR _brushHL$187716[ebp]
  023eb	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 680  :       m_rgnComplete.OffsetRgn(-2,-2);

  023f0	6a fe		 push	 -2			; fffffffeH
  023f2	6a fe		 push	 -2			; fffffffeH
  023f4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  023f7	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  023fd	e8 00 00 00 00	 call	 ?OffsetRgn@CRgn@@QAEHHH@Z ; CRgn::OffsetRgn

; 681  :       brushHL.CreateSolidBrush(RGB(red,green,blue));

  02402	0f b6 55 9c	 movzx	 edx, BYTE PTR _red$187717[ebp]
  02406	0f b6 45 98	 movzx	 eax, BYTE PTR _green$187719[ebp]
  0240a	c1 e0 08	 shl	 eax, 8
  0240d	0b d0		 or	 edx, eax
  0240f	0f b6 4d 94	 movzx	 ecx, BYTE PTR _blue$187722[ebp]
  02413	c1 e1 10	 shl	 ecx, 16			; 00000010H
  02416	0b d1		 or	 edx, ecx
  02418	52		 push	 edx
  02419	8d 4d a4	 lea	 ecx, DWORD PTR _brushHL$187716[ebp]
  0241c	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 682  :       pDC->FrameRgn(&m_rgnComplete, &brushHL, 2, 2);

  02421	6a 02		 push	 2
  02423	6a 02		 push	 2
  02425	8d 55 a4	 lea	 edx, DWORD PTR _brushHL$187716[ebp]
  02428	52		 push	 edx
  02429	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0242c	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  02431	50		 push	 eax
  02432	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02435	e8 00 00 00 00	 call	 ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ; CDC::FrameRgn

; 683  :       m_rgnComplete.OffsetRgn(1,1);

  0243a	6a 01		 push	 1
  0243c	6a 01		 push	 1
  0243e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02441	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  02447	e8 00 00 00 00	 call	 ?OffsetRgn@CRgn@@QAEHHH@Z ; CRgn::OffsetRgn

; 684  :    }

  0244c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02450	8d 4d a4	 lea	 ecx, DWORD PTR _brushHL$187716[ebp]
  02453	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L187715:

; 685  :    // outline
; 686  :    pDC->FrameRgn(&m_rgnComplete, &brushFg, 1, 1);

  02458	6a 01		 push	 1
  0245a	6a 01		 push	 1
  0245c	8d 4d b4	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  0245f	51		 push	 ecx
  02460	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  02463	81 c2 cc 00 00
	00		 add	 edx, 204		; 000000ccH
  02469	52		 push	 edx
  0246a	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0246d	e8 00 00 00 00	 call	 ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ; CDC::FrameRgn

; 687  : }

  02472	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02479	8d 4d b4	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  0247c	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  02481	52		 push	 edx
  02482	8b cd		 mov	 ecx, ebp
  02484	50		 push	 eax
  02485	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188941
  0248b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02490	58		 pop	 eax
  02491	5a		 pop	 edx
  02492	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02495	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0249c	5f		 pop	 edi
  0249d	5e		 pop	 esi
  0249e	83 c4 6c	 add	 esp, 108		; 0000006cH
  024a1	3b ec		 cmp	 ebp, esp
  024a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  024a8	8b e5		 mov	 esp, ebp
  024aa	5d		 pop	 ebp
  024ab	c2 04 00	 ret	 4
$L188941:
  024ae	04 00 00 00	 DD	 4
  024b2	00 00 00 00	 DD	 $L188940
$L188940:
  024b6	dc ff ff ff	 DD	 -36			; ffffffdcH
  024ba	10 00 00 00	 DD	 16			; 00000010H
  024be	00 00 00 00	 DD	 $L188935
  024c2	c4 ff ff ff	 DD	 -60			; ffffffc4H
  024c6	10 00 00 00	 DD	 16			; 00000010H
  024ca	00 00 00 00	 DD	 $L188936
  024ce	b4 ff ff ff	 DD	 -76			; ffffffb4H
  024d2	08 00 00 00	 DD	 8
  024d6	00 00 00 00	 DD	 $L188937
  024da	a4 ff ff ff	 DD	 -92			; ffffffa4H
  024de	08 00 00 00	 DD	 8
  024e2	00 00 00 00	 DD	 $L188938
$L188938:
  024e6	62		 DB	 98			; 00000062H
  024e7	72		 DB	 114			; 00000072H
  024e8	75		 DB	 117			; 00000075H
  024e9	73		 DB	 115			; 00000073H
  024ea	68		 DB	 104			; 00000068H
  024eb	48		 DB	 72			; 00000048H
  024ec	4c		 DB	 76			; 0000004cH
  024ed	00		 DB	 0
$L188937:
  024ee	62		 DB	 98			; 00000062H
  024ef	72		 DB	 114			; 00000072H
  024f0	75		 DB	 117			; 00000075H
  024f1	73		 DB	 115			; 00000073H
  024f2	68		 DB	 104			; 00000068H
  024f3	46		 DB	 70			; 00000046H
  024f4	67		 DB	 103			; 00000067H
  024f5	00		 DB	 0
$L188936:
  024f6	72		 DB	 114			; 00000072H
  024f7	65		 DB	 101			; 00000065H
  024f8	63		 DB	 99			; 00000063H
  024f9	74		 DB	 116			; 00000074H
  024fa	43		 DB	 67			; 00000043H
  024fb	6c		 DB	 108			; 0000006cH
  024fc	69		 DB	 105			; 00000069H
  024fd	65		 DB	 101			; 00000065H
  024fe	6e		 DB	 110			; 0000006eH
  024ff	74		 DB	 116			; 00000074H
  02500	00		 DB	 0
$L188935:
  02501	72		 DB	 114			; 00000072H
  02502	65		 DB	 101			; 00000065H
  02503	63		 DB	 99			; 00000063H
  02504	74		 DB	 116			; 00000074H
  02505	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188931:
  0016e	8d 4d b4	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  00171	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L188932:
  00176	8d 4d a4	 lea	 ecx, DWORD PTR _brushHL$187716[ebp]
  00179	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z:
  0017e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188934
  00183	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z ENDP	; CBalloonHelp::DrawNonClientArea
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T188944 = -28						; size = 8
_sizeHeader$ = -16					; size = 8
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z PROC NEAR	; CBalloonHelp::DrawClientArea
; _this$ = ecx

; 691  : {

  02510	55		 push	 ebp
  02511	8b ec		 mov	 ebp, esp
  02513	83 ec 1c	 sub	 esp, 28			; 0000001cH
  02516	56		 push	 esi
  02517	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0251c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0251f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  02522	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  02525	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  02528	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0252b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0252e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  02531	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 692  :    CSize sizeHeader = DrawHeader(pDC);

  02534	8b f4		 mov	 esi, esp
  02536	6a 01		 push	 1
  02538	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  0253b	50		 push	 eax
  0253c	8d 4d f0	 lea	 ecx, DWORD PTR _sizeHeader$[ebp]
  0253f	51		 push	 ecx
  02540	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02543	8b 02		 mov	 eax, DWORD PTR [edx]
  02545	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02548	ff 90 40 01 00
	00		 call	 DWORD PTR [eax+320]
  0254e	3b f4		 cmp	 esi, esp
  02550	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 693  :    DrawContent(pDC, sizeHeader.cy+nTIP_MARGIN);

  02555	8b f4		 mov	 esi, esp
  02557	6a 01		 push	 1
  02559	8b 4d f4	 mov	 ecx, DWORD PTR _sizeHeader$[ebp+4]
  0255c	83 c1 08	 add	 ecx, 8
  0255f	51		 push	 ecx
  02560	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  02563	52		 push	 edx
  02564	8d 45 e4	 lea	 eax, DWORD PTR $T188944[ebp]
  02567	50		 push	 eax
  02568	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0256b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0256d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02570	ff 92 44 01 00
	00		 call	 DWORD PTR [edx+324]
  02576	3b f4		 cmp	 esi, esp
  02578	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 694  : }

  0257d	52		 push	 edx
  0257e	8b cd		 mov	 ecx, ebp
  02580	50		 push	 eax
  02581	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188947
  02587	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0258c	58		 pop	 eax
  0258d	5a		 pop	 edx
  0258e	5e		 pop	 esi
  0258f	83 c4 1c	 add	 esp, 28			; 0000001cH
  02592	3b ec		 cmp	 ebp, esp
  02594	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02599	8b e5		 mov	 esp, ebp
  0259b	5d		 pop	 ebp
  0259c	c2 04 00	 ret	 4
$L188947:
  0259f	01 00 00 00	 DD	 1
  025a3	00 00 00 00	 DD	 $L188946
$L188946:
  025a7	f0 ff ff ff	 DD	 -16			; fffffff0H
  025ab	08 00 00 00	 DD	 8
  025af	00 00 00 00	 DD	 $L188945
$L188945:
  025b3	73		 DB	 115			; 00000073H
  025b4	69		 DB	 105			; 00000069H
  025b5	7a		 DB	 122			; 0000007aH
  025b6	65		 DB	 101			; 00000065H
  025b7	48		 DB	 72			; 00000048H
  025b8	65		 DB	 101			; 00000065H
  025b9	61		 DB	 97			; 00000061H
  025ba	64		 DB	 100			; 00000064H
  025bb	65		 DB	 101			; 00000065H
  025bc	72		 DB	 114			; 00000072H
  025bd	00		 DB	 0
?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z ENDP	; CBalloonHelp::DrawClientArea
_TEXT	ENDS
EXTRN	?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z:NEAR ; CDC::DrawTextA
EXTRN	?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z:NEAR ; CDC::DrawFrameControl
EXTRN	??0CSize@@QAE@HH@Z:NEAR				; CSize::CSize
EXTRN	??BCRect@@QAEPAUtagRECT@@XZ:NEAR		; CRect::operator tagRECT *
EXTRN	?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:NEAR ; CWnd::GetWindowTextA
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:NEAR
EXTRN	__imp__ImageList_GetIconSize@12:NEAR
EXTRN	?SetBkMode@CDC@@QAEHH@Z:NEAR			; CDC::SetBkMode
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	??BCImageList@@QBEPAU_IMAGELIST@@XZ:NEAR	; CImageList::operator _IMAGELIST *
EXTRN	?SetBkColor@CImageList@@QAEKK@Z:NEAR		; CImageList::SetBkColor
EXTRN	?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z:NEAR ; CImageList::Draw
xdata$x	SEGMENT
$T188970 DD	0ffffffffH
	DD	FLAT:$L188958
$T188960 DD	019930520H
	DD	01H
	DD	FLAT:$T188970
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv194 = -168						; size = 4
tv143 = -164						; size = 4
tv81 = -160						; size = 4
$T188955 = -156						; size = 16
$T188952 = -140						; size = 8
$T188951 = -132						; size = 8
_rectTitle$187774 = -120				; size = 16
_pOldFont$187772 = -100					; size = 4
_strTitle$ = -92					; size = 4
_nBtnWidth$187766 = -84					; size = 4
_y$187761 = -76						; size = 4
_x$187760 = -64						; size = 4
_rectClient$ = -52					; size = 16
_sizeHdr$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
_bDraw$ = 16						; size = 1
?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z PROC NEAR ; CBalloonHelp::DrawHeader
; _this$ = ecx

; 698  : {

  025c0	55		 push	 ebp
  025c1	8b ec		 mov	 ebp, esp
  025c3	6a ff		 push	 -1
  025c5	68 00 00 00 00	 push	 __ehhandler$?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z
  025ca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  025d0	50		 push	 eax
  025d1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  025d8	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  025de	56		 push	 esi
  025df	57		 push	 edi
  025e0	51		 push	 ecx
  025e1	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-168]
  025e7	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  025ec	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  025f1	f3 ab		 rep stosd
  025f3	59		 pop	 ecx
  025f4	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 699  :    CSize sizeHdr(0,0);

  025f7	6a 00		 push	 0
  025f9	6a 00		 push	 0
  025fb	8d 4d e4	 lea	 ecx, DWORD PTR _sizeHdr$[ebp]
  025fe	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize

; 700  :    CRect rectClient;

  02603	8d 4d cc	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  02606	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 701  :    GetClientRect(&rectClient);   // use this for positioning when drawing

  0260b	8d 45 cc	 lea	 eax, DWORD PTR _rectClient$[ebp]
  0260e	50		 push	 eax
  0260f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02612	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 702  :                                  // else if content is wider than title, centering wouldn't work
; 703  : 
; 704  :    // calc & draw icon
; 705  :    if ( NULL != m_ilIcon.m_hImageList )

  02617	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0261a	83 b9 a8 00 00
	00 00		 cmp	 DWORD PTR [ecx+168], 0
  02621	0f 84 c9 00 00
	00		 je	 $L187759

; 706  :    {
; 707  :       int x = 0;

  02627	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _x$187760[ebp], 0

; 708  :       int y = 0;

  0262e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _y$187761[ebp], 0

; 709  :       ImageList_GetIconSize(m_ilIcon, &x, &y);

  02635	8b f4		 mov	 esi, esp
  02637	8d 55 b4	 lea	 edx, DWORD PTR _y$187761[ebp]
  0263a	52		 push	 edx
  0263b	8d 45 c0	 lea	 eax, DWORD PTR _x$187760[ebp]
  0263e	50		 push	 eax
  0263f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02642	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  02648	e8 00 00 00 00	 call	 ??BCImageList@@QBEPAU_IMAGELIST@@XZ ; CImageList::operator _IMAGELIST *
  0264d	50		 push	 eax
  0264e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetIconSize@12
  02654	3b f4		 cmp	 esi, esp
  02656	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 710  :       sizeHdr.cx += x;

  0265b	8b 4d e4	 mov	 ecx, DWORD PTR _sizeHdr$[ebp]
  0265e	03 4d c0	 add	 ecx, DWORD PTR _x$187760[ebp]
  02661	89 4d e4	 mov	 DWORD PTR _sizeHdr$[ebp], ecx

; 711  :       sizeHdr.cy = max(sizeHdr.cy, y);

  02664	8b 55 e8	 mov	 edx, DWORD PTR _sizeHdr$[ebp+4]
  02667	3b 55 b4	 cmp	 edx, DWORD PTR _y$187761[ebp]
  0266a	7e 0b		 jle	 SHORT $L188949
  0266c	8b 45 e8	 mov	 eax, DWORD PTR _sizeHdr$[ebp+4]
  0266f	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv81[ebp], eax
  02675	eb 09		 jmp	 SHORT $L188950
$L188949:
  02677	8b 4d b4	 mov	 ecx, DWORD PTR _y$187761[ebp]
  0267a	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv81[ebp], ecx
$L188950:
  02680	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR tv81[ebp]
  02686	89 55 e8	 mov	 DWORD PTR _sizeHdr$[ebp+4], edx

; 712  :       m_ilIcon.SetBkColor(m_crBackground);

  02689	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0268c	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  02692	51		 push	 ecx
  02693	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02696	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0269c	e8 00 00 00 00	 call	 ?SetBkColor@CImageList@@QAEKK@Z ; CImageList::SetBkColor

; 713  :       if (bDraw)

  026a1	0f b6 55 10	 movzx	 edx, BYTE PTR _bDraw$[ebp]
  026a5	85 d2		 test	 edx, edx
  026a7	74 3e		 je	 SHORT $L187762

; 714  :          m_ilIcon.Draw(pDC, 0, CPoint(0,0), ILD_NORMAL);//ILD_TRANSPARENT);

  026a9	6a 00		 push	 0
  026ab	6a 00		 push	 0
  026ad	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T188952[ebp]
  026b3	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  026b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  026ba	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  026bd	89 8d 7c ff ff
	ff		 mov	 DWORD PTR $T188951[ebp], ecx
  026c3	89 55 80	 mov	 DWORD PTR $T188951[ebp+4], edx
  026c6	6a 00		 push	 0
  026c8	8b 45 80	 mov	 eax, DWORD PTR $T188951[ebp+4]
  026cb	50		 push	 eax
  026cc	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T188951[ebp]
  026d2	51		 push	 ecx
  026d3	6a 00		 push	 0
  026d5	8b 55 0c	 mov	 edx, DWORD PTR _pDC$[ebp]
  026d8	52		 push	 edx
  026d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  026dc	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  026e2	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L187762:

; 715  :       rectClient.left += x;

  026e7	8b 45 cc	 mov	 eax, DWORD PTR _rectClient$[ebp]
  026ea	03 45 c0	 add	 eax, DWORD PTR _x$187760[ebp]
  026ed	89 45 cc	 mov	 DWORD PTR _rectClient$[ebp], eax
$L187759:

; 716  :    }
; 717  : 
; 718  :    // calc & draw close button
; 719  :    if ( m_unOptions & unSHOW_CLOSE_BUTTON )

  026f0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  026f3	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  026f9	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  026ff	0f 84 8e 00 00
	00		 je	 $L187765

; 720  :    {
; 721  :       int nBtnWidth = nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  02705	c7 45 ac 0e 00
	00 00		 mov	 DWORD PTR _nBtnWidth$187766[ebp], 14 ; 0000000eH

; 722  :       // if something is already in the header (icon) leave space
; 723  :       if ( sizeHdr.cx > 0 )

  0270c	83 7d e4 00	 cmp	 DWORD PTR _sizeHdr$[ebp], 0
  02710	7e 09		 jle	 SHORT $L187767

; 724  :          sizeHdr.cx += nTIP_MARGIN;

  02712	8b 45 e4	 mov	 eax, DWORD PTR _sizeHdr$[ebp]
  02715	83 c0 08	 add	 eax, 8
  02718	89 45 e4	 mov	 DWORD PTR _sizeHdr$[ebp], eax
$L187767:

; 725  :       sizeHdr.cx += nBtnWidth;

  0271b	8b 4d e4	 mov	 ecx, DWORD PTR _sizeHdr$[ebp]
  0271e	03 4d ac	 add	 ecx, DWORD PTR _nBtnWidth$187766[ebp]
  02721	89 4d e4	 mov	 DWORD PTR _sizeHdr$[ebp], ecx

; 726  :       sizeHdr.cy = max(sizeHdr.cy, ::GetSystemMetrics(SM_CYSIZE));

  02724	6a 1f		 push	 31			; 0000001fH
  02726	e8 00 00 00 00	 call	 _xGetSystemMetrics@4
  0272b	39 45 e8	 cmp	 DWORD PTR _sizeHdr$[ebp+4], eax
  0272e	7e 0b		 jle	 SHORT $L188953
  02730	8b 55 e8	 mov	 edx, DWORD PTR _sizeHdr$[ebp+4]
  02733	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv143[ebp], edx
  02739	eb 0d		 jmp	 SHORT $L188954
$L188953:
  0273b	6a 1f		 push	 31			; 0000001fH
  0273d	e8 00 00 00 00	 call	 _xGetSystemMetrics@4
  02742	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv143[ebp], eax
$L188954:
  02748	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv143[ebp]
  0274e	89 45 e8	 mov	 DWORD PTR _sizeHdr$[ebp+4], eax

; 727  :       if (bDraw)

  02751	0f b6 4d 10	 movzx	 ecx, BYTE PTR _bDraw$[ebp]
  02755	85 c9		 test	 ecx, ecx
  02757	74 31		 je	 SHORT $L187768

; 728  :          pDC->DrawFrameControl(CRect(rectClient.right-nBtnWidth,0,rectClient.right,nCYCloseBtn/*::GetSystemMetrics(SM_CYSIZE)*/), DFC_CAPTION, DFCS_CAPTIONCLOSE|DFCS_FLAT);

  02759	68 00 40 00 00	 push	 16384			; 00004000H
  0275e	6a 01		 push	 1
  02760	6a 0e		 push	 14			; 0000000eH
  02762	8b 55 d4	 mov	 edx, DWORD PTR _rectClient$[ebp+8]
  02765	52		 push	 edx
  02766	6a 00		 push	 0
  02768	8b 45 d4	 mov	 eax, DWORD PTR _rectClient$[ebp+8]
  0276b	2b 45 ac	 sub	 eax, DWORD PTR _nBtnWidth$187766[ebp]
  0276e	50		 push	 eax
  0276f	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T188955[ebp]
  02775	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  0277a	8b c8		 mov	 ecx, eax
  0277c	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02781	50		 push	 eax
  02782	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02785	e8 00 00 00 00	 call	 ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawFrameControl
$L187768:

; 729  :       rectClient.right -= nBtnWidth;

  0278a	8b 4d d4	 mov	 ecx, DWORD PTR _rectClient$[ebp+8]
  0278d	2b 4d ac	 sub	 ecx, DWORD PTR _nBtnWidth$187766[ebp]
  02790	89 4d d4	 mov	 DWORD PTR _rectClient$[ebp+8], ecx
$L187765:

; 730  :    }
; 731  : 
; 732  :    // calc title size
; 733  :    CString strTitle;

  02793	8b f4		 mov	 esi, esp
  02795	8d 4d a4	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  02798	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0279e	3b f4		 cmp	 esi, esp
  027a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  027a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 734  :    GetWindowText(strTitle);

  027ac	8d 55 a4	 lea	 edx, DWORD PTR _strTitle$[ebp]
  027af	52		 push	 edx
  027b0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  027b3	e8 00 00 00 00	 call	 ?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CWnd::GetWindowTextA

; 735  :    if ( !strTitle.IsEmpty() )

  027b8	8b f4		 mov	 esi, esp
  027ba	8d 4d a4	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  027bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  027c3	3b f4		 cmp	 esi, esp
  027c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  027ca	0f b6 c0	 movzx	 eax, al
  027cd	85 c0		 test	 eax, eax
  027cf	0f 85 ef 00 00
	00		 jne	 $L187771

; 736  :    {
; 737  :       CFont* pOldFont = pDC->SelectObject(m_pTitleFont);

  027d5	8b f4		 mov	 esi, esp
  027d7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  027da	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  027e0	52		 push	 edx
  027e1	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  027e4	8b 10		 mov	 edx, DWORD PTR [eax]
  027e6	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027e9	ff 52 30	 call	 DWORD PTR [edx+48]
  027ec	3b f4		 cmp	 esi, esp
  027ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  027f3	89 45 9c	 mov	 DWORD PTR _pOldFont$187772[ebp], eax

; 738  : 
; 739  :       // if something is already in the header (icon or close button) leave space
; 740  :       if ( sizeHdr.cx > 0 ) 

  027f6	83 7d e4 00	 cmp	 DWORD PTR _sizeHdr$[ebp], 0
  027fa	7e 09		 jle	 SHORT $L187773

; 741  :          sizeHdr.cx += nTIP_MARGIN;

  027fc	8b 45 e4	 mov	 eax, DWORD PTR _sizeHdr$[ebp]
  027ff	83 c0 08	 add	 eax, 8
  02802	89 45 e4	 mov	 DWORD PTR _sizeHdr$[ebp], eax
$L187773:

; 742  :       CRect rectTitle(0,0,0,0);

  02805	6a 00		 push	 0
  02807	6a 00		 push	 0
  02809	6a 00		 push	 0
  0280b	6a 00		 push	 0
  0280d	8d 4d 88	 lea	 ecx, DWORD PTR _rectTitle$187774[ebp]
  02810	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 743  :       pDC->DrawText(strTitle, &rectTitle, DT_CALCRECT | DT_NOPREFIX | DT_EXPANDTABS | DT_SINGLELINE);

  02815	68 60 0c 00 00	 push	 3168			; 00000c60H
  0281a	8d 4d 88	 lea	 ecx, DWORD PTR _rectTitle$187774[ebp]
  0281d	51		 push	 ecx
  0281e	8d 55 a4	 lea	 edx, DWORD PTR _strTitle$[ebp]
  02821	52		 push	 edx
  02822	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02825	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 744  :       sizeHdr.cx += rectTitle.Width();

  0282a	8d 4d 88	 lea	 ecx, DWORD PTR _rectTitle$187774[ebp]
  0282d	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  02832	03 45 e4	 add	 eax, DWORD PTR _sizeHdr$[ebp]
  02835	89 45 e4	 mov	 DWORD PTR _sizeHdr$[ebp], eax

; 745  :       sizeHdr.cy = max(sizeHdr.cy, rectTitle.Height());

  02838	8d 4d 88	 lea	 ecx, DWORD PTR _rectTitle$187774[ebp]
  0283b	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  02840	39 45 e8	 cmp	 DWORD PTR _sizeHdr$[ebp+4], eax
  02843	7e 0b		 jle	 SHORT $L188956
  02845	8b 45 e8	 mov	 eax, DWORD PTR _sizeHdr$[ebp+4]
  02848	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  0284e	eb 0e		 jmp	 SHORT $L188957
$L188956:
  02850	8d 4d 88	 lea	 ecx, DWORD PTR _rectTitle$187774[ebp]
  02853	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  02858	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
$L188957:
  0285e	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  02864	89 4d e8	 mov	 DWORD PTR _sizeHdr$[ebp+4], ecx

; 746  : 
; 747  :       // draw title
; 748  :       if ( bDraw )

  02867	0f b6 55 10	 movzx	 edx, BYTE PTR _bDraw$[ebp]
  0286b	85 d2		 test	 edx, edx
  0286d	74 3d		 je	 SHORT $L187775

; 749  :       {
; 750  :          pDC->SetBkMode(TRANSPARENT);

  0286f	6a 01		 push	 1
  02871	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02874	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 751  :          pDC->SetTextColor(m_crForeground);

  02879	8b f4		 mov	 esi, esp
  0287b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0287e	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  02884	51		 push	 ecx
  02885	8b 55 0c	 mov	 edx, DWORD PTR _pDC$[ebp]
  02888	8b 02		 mov	 eax, DWORD PTR [edx]
  0288a	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0288d	ff 50 38	 call	 DWORD PTR [eax+56]
  02890	3b f4		 cmp	 esi, esp
  02892	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 752  :          pDC->DrawText(strTitle, &rectClient, DT_CENTER | DT_NOPREFIX  | DT_EXPANDTABS | DT_SINGLELINE);

  02897	68 61 08 00 00	 push	 2145			; 00000861H
  0289c	8d 4d cc	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  0289f	51		 push	 ecx
  028a0	8d 55 a4	 lea	 edx, DWORD PTR _strTitle$[ebp]
  028a3	52		 push	 edx
  028a4	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  028a7	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L187775:

; 753  :       }
; 754  : 
; 755  :       // cleanup
; 756  :       pDC->SelectObject(pOldFont);

  028ac	8b f4		 mov	 esi, esp
  028ae	8b 45 9c	 mov	 eax, DWORD PTR _pOldFont$187772[ebp]
  028b1	50		 push	 eax
  028b2	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  028b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  028b7	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  028ba	ff 52 30	 call	 DWORD PTR [edx+48]
  028bd	3b f4		 cmp	 esi, esp
  028bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187771:

; 757  :    }
; 758  : 
; 759  :    return sizeHdr;

  028c4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  028c7	8b 4d e4	 mov	 ecx, DWORD PTR _sizeHdr$[ebp]
  028ca	89 08		 mov	 DWORD PTR [eax], ecx
  028cc	8b 55 e8	 mov	 edx, DWORD PTR _sizeHdr$[ebp+4]
  028cf	89 50 04	 mov	 DWORD PTR [eax+4], edx
  028d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  028d9	8b f4		 mov	 esi, esp
  028db	8d 4d a4	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  028de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  028e4	3b f4		 cmp	 esi, esp
  028e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  028eb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 760  : }

  028ee	52		 push	 edx
  028ef	8b cd		 mov	 ecx, ebp
  028f1	50		 push	 eax
  028f2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188969
  028f8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  028fd	58		 pop	 eax
  028fe	5a		 pop	 edx
  028ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02902	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02909	5f		 pop	 edi
  0290a	5e		 pop	 esi
  0290b	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  02911	3b ec		 cmp	 ebp, esp
  02913	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02918	8b e5		 mov	 esp, ebp
  0291a	5d		 pop	 ebp
  0291b	c2 0c 00	 ret	 12			; 0000000cH
$L188969:
  0291e	06 00 00 00	 DD	 6
  02922	00 00 00 00	 DD	 $L188968
$L188968:
  02926	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0292a	08 00 00 00	 DD	 8
  0292e	00 00 00 00	 DD	 $L188961
  02932	cc ff ff ff	 DD	 -52			; ffffffccH
  02936	10 00 00 00	 DD	 16			; 00000010H
  0293a	00 00 00 00	 DD	 $L188962
  0293e	c0 ff ff ff	 DD	 -64			; ffffffc0H
  02942	04 00 00 00	 DD	 4
  02946	00 00 00 00	 DD	 $L188963
  0294a	b4 ff ff ff	 DD	 -76			; ffffffb4H
  0294e	04 00 00 00	 DD	 4
  02952	00 00 00 00	 DD	 $L188964
  02956	a4 ff ff ff	 DD	 -92			; ffffffa4H
  0295a	04 00 00 00	 DD	 4
  0295e	00 00 00 00	 DD	 $L188965
  02962	88 ff ff ff	 DD	 -120			; ffffff88H
  02966	10 00 00 00	 DD	 16			; 00000010H
  0296a	00 00 00 00	 DD	 $L188966
$L188966:
  0296e	72		 DB	 114			; 00000072H
  0296f	65		 DB	 101			; 00000065H
  02970	63		 DB	 99			; 00000063H
  02971	74		 DB	 116			; 00000074H
  02972	54		 DB	 84			; 00000054H
  02973	69		 DB	 105			; 00000069H
  02974	74		 DB	 116			; 00000074H
  02975	6c		 DB	 108			; 0000006cH
  02976	65		 DB	 101			; 00000065H
  02977	00		 DB	 0
$L188965:
  02978	73		 DB	 115			; 00000073H
  02979	74		 DB	 116			; 00000074H
  0297a	72		 DB	 114			; 00000072H
  0297b	54		 DB	 84			; 00000054H
  0297c	69		 DB	 105			; 00000069H
  0297d	74		 DB	 116			; 00000074H
  0297e	6c		 DB	 108			; 0000006cH
  0297f	65		 DB	 101			; 00000065H
  02980	00		 DB	 0
$L188964:
  02981	79		 DB	 121			; 00000079H
  02982	00		 DB	 0
$L188963:
  02983	78		 DB	 120			; 00000078H
  02984	00		 DB	 0
$L188962:
  02985	72		 DB	 114			; 00000072H
  02986	65		 DB	 101			; 00000065H
  02987	63		 DB	 99			; 00000063H
  02988	74		 DB	 116			; 00000074H
  02989	43		 DB	 67			; 00000043H
  0298a	6c		 DB	 108			; 0000006cH
  0298b	69		 DB	 105			; 00000069H
  0298c	65		 DB	 101			; 00000065H
  0298d	6e		 DB	 110			; 0000006eH
  0298e	74		 DB	 116			; 00000074H
  0298f	00		 DB	 0
$L188961:
  02990	73		 DB	 115			; 00000073H
  02991	69		 DB	 105			; 00000069H
  02992	7a		 DB	 122			; 0000007aH
  02993	65		 DB	 101			; 00000065H
  02994	48		 DB	 72			; 00000048H
  02995	64		 DB	 100			; 00000064H
  02996	72		 DB	 114			; 00000072H
  02997	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188958:
  00188	8b f4		 mov	 esi, esp
  0018a	8d 4d a4	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00193	3b f4		 cmp	 esi, esp
  00195	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z:
  0019a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188960
  0019f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z ENDP ; CBalloonHelp::DrawHeader
EXTRN	?Size@CRect@@QBE?AVCSize@@XZ:NEAR		; CRect::Size
EXTRN	?SetRectEmpty@CRect@@QAEXXZ:NEAR		; CRect::SetRectEmpty
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pOldFont$ = -32					; size = 4
_rectContent$ = -24					; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
_nTop$ = 16						; size = 4
_bDraw$ = 20						; size = 1
?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z PROC NEAR ; CBalloonHelp::DrawContent
; _this$ = ecx

; 764  : {

  029a0	55		 push	 ebp
  029a1	8b ec		 mov	 ebp, esp
  029a3	83 ec 20	 sub	 esp, 32			; 00000020H
  029a6	56		 push	 esi
  029a7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  029ac	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  029af	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  029b2	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  029b5	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  029b8	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  029bb	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  029be	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  029c1	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  029c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 765  :    CRect rectContent;

  029c7	8d 4d e8	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  029ca	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 766  :    GetAnchorScreenBounds(rectContent);

  029cf	8d 45 e8	 lea	 eax, DWORD PTR _rectContent$[ebp]
  029d2	50		 push	 eax
  029d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  029d6	e8 00 00 00 00	 call	 ?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds

; 767  :    rectContent.OffsetRect(-rectContent.left, -rectContent.top);

  029db	8b 4d ec	 mov	 ecx, DWORD PTR _rectContent$[ebp+4]
  029de	f7 d9		 neg	 ecx
  029e0	51		 push	 ecx
  029e1	8b 55 e8	 mov	 edx, DWORD PTR _rectContent$[ebp]
  029e4	f7 da		 neg	 edx
  029e6	52		 push	 edx
  029e7	8d 4d e8	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  029ea	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 768  :    rectContent.top = nTop;

  029ef	8b 45 10	 mov	 eax, DWORD PTR _nTop$[ebp]
  029f2	89 45 ec	 mov	 DWORD PTR _rectContent$[ebp+4], eax

; 769  : 
; 770  :    // limit to half screen width
; 771  :    rectContent.right -= rectContent.Width()/2;

  029f5	8d 4d e8	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  029f8	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  029fd	99		 cdq
  029fe	2b c2		 sub	 eax, edx
  02a00	d1 f8		 sar	 eax, 1
  02a02	8b 4d f0	 mov	 ecx, DWORD PTR _rectContent$[ebp+8]
  02a05	2b c8		 sub	 ecx, eax
  02a07	89 4d f0	 mov	 DWORD PTR _rectContent$[ebp+8], ecx

; 772  : 
; 773  :    // calc size
; 774  :    CFont* pOldFont = pDC->SelectObject(m_pContentFont);

  02a0a	8b f4		 mov	 esi, esp
  02a0c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02a0f	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  02a15	50		 push	 eax
  02a16	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02a19	8b 11		 mov	 edx, DWORD PTR [ecx]
  02a1b	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02a1e	ff 52 30	 call	 DWORD PTR [edx+48]
  02a21	3b f4		 cmp	 esi, esp
  02a23	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02a28	89 45 e0	 mov	 DWORD PTR _pOldFont$[ebp], eax

; 775  :    if ( !m_strContent.IsEmpty() )

  02a2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a2e	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  02a34	8b f4		 mov	 esi, esp
  02a36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  02a3c	3b f4		 cmp	 esi, esp
  02a3e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02a43	0f b6 c0	 movzx	 eax, al
  02a46	85 c0		 test	 eax, eax
  02a48	75 1d		 jne	 SHORT $L187785

; 776  :       pDC->DrawText(m_strContent, &rectContent, DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_EXPANDTABS | DT_WORDBREAK);

  02a4a	68 50 0c 00 00	 push	 3152			; 00000c50H
  02a4f	8d 4d e8	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  02a52	51		 push	 ecx
  02a53	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02a56	81 c2 90 00 00
	00		 add	 edx, 144		; 00000090H
  02a5c	52		 push	 edx
  02a5d	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02a60	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 777  :    else

  02a65	eb 08		 jmp	 SHORT $L187786
$L187785:

; 778  :       rectContent.SetRectEmpty();   // don't want to leave half the screen for empty strings ;)

  02a67	8d 4d e8	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  02a6a	e8 00 00 00 00	 call	 ?SetRectEmpty@CRect@@QAEXXZ ; CRect::SetRectEmpty
$L187786:

; 779  :    
; 780  :    // draw
; 781  :    if (bDraw)

  02a6f	0f b6 45 14	 movzx	 eax, BYTE PTR _bDraw$[ebp]
  02a73	85 c0		 test	 eax, eax
  02a75	74 43		 je	 SHORT $L187787

; 782  :    {
; 783  :       pDC->SetBkMode(TRANSPARENT);

  02a77	6a 01		 push	 1
  02a79	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02a7c	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 784  :       pDC->SetTextColor(m_crForeground);

  02a81	8b f4		 mov	 esi, esp
  02a83	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a86	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  02a8c	52		 push	 edx
  02a8d	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  02a90	8b 10		 mov	 edx, DWORD PTR [eax]
  02a92	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02a95	ff 52 38	 call	 DWORD PTR [edx+56]
  02a98	3b f4		 cmp	 esi, esp
  02a9a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 785  :       pDC->DrawText(m_strContent, &rectContent, DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_EXPANDTABS);

  02a9f	68 50 08 00 00	 push	 2128			; 00000850H
  02aa4	8d 45 e8	 lea	 eax, DWORD PTR _rectContent$[ebp]
  02aa7	50		 push	 eax
  02aa8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02aab	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  02ab1	51		 push	 ecx
  02ab2	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02ab5	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L187787:

; 786  :    }
; 787  : 
; 788  :    // cleanup
; 789  :    pDC->SelectObject(pOldFont);

  02aba	8b f4		 mov	 esi, esp
  02abc	8b 55 e0	 mov	 edx, DWORD PTR _pOldFont$[ebp]
  02abf	52		 push	 edx
  02ac0	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  02ac3	8b 10		 mov	 edx, DWORD PTR [eax]
  02ac5	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02ac8	ff 52 30	 call	 DWORD PTR [edx+48]
  02acb	3b f4		 cmp	 esi, esp
  02acd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 790  : 
; 791  :    return rectContent.Size();

  02ad2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  02ad5	50		 push	 eax
  02ad6	8d 4d e8	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  02ad9	e8 00 00 00 00	 call	 ?Size@CRect@@QBE?AVCSize@@XZ ; CRect::Size
  02ade	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 792  : }

  02ae1	52		 push	 edx
  02ae2	8b cd		 mov	 ecx, ebp
  02ae4	50		 push	 eax
  02ae5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188974
  02aeb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02af0	58		 pop	 eax
  02af1	5a		 pop	 edx
  02af2	5e		 pop	 esi
  02af3	83 c4 20	 add	 esp, 32			; 00000020H
  02af6	3b ec		 cmp	 ebp, esp
  02af8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02afd	8b e5		 mov	 esp, ebp
  02aff	5d		 pop	 ebp
  02b00	c2 10 00	 ret	 16			; 00000010H
$L188974:
  02b03	01 00 00 00	 DD	 1
  02b07	00 00 00 00	 DD	 $L188973
$L188973:
  02b0b	e8 ff ff ff	 DD	 -24			; ffffffe8H
  02b0f	10 00 00 00	 DD	 16			; 00000010H
  02b13	00 00 00 00	 DD	 $L188972
$L188972:
  02b17	72		 DB	 114			; 00000072H
  02b18	65		 DB	 101			; 00000065H
  02b19	63		 DB	 99			; 00000063H
  02b1a	74		 DB	 116			; 00000074H
  02b1b	43		 DB	 67			; 00000043H
  02b1c	6f		 DB	 111			; 0000006fH
  02b1d	6e		 DB	 110			; 0000006eH
  02b1e	74		 DB	 116			; 00000074H
  02b1f	65		 DB	 101			; 00000065H
  02b20	6e		 DB	 110			; 0000006eH
  02b21	74		 DB	 116			; 00000074H
  02b22	00		 DB	 0
?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z ENDP ; CBalloonHelp::DrawContent
_TEXT	ENDS
PUBLIC	?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcHeaderSize
PUBLIC	?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcContentSize
PUBLIC	?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ	; CBalloonHelp::CalcClientSize
EXTRN	??0CWindowDC@@QAE@PAVCWnd@@@Z:NEAR		; CWindowDC::CWindowDC
EXTRN	??1CWindowDC@@UAE@XZ:NEAR			; CWindowDC::~CWindowDC
xdata$x	SEGMENT
$T188988 DD	0ffffffffH
	DD	FLAT:$L188979
$T188981 DD	019930520H
	DD	01H
	DD	FLAT:$T188988
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv87 = -80						; size = 4
_sizeContent$ = -72					; size = 8
_sizeHeader$ = -56					; size = 8
_dc$ = -40						; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ PROC NEAR	; CBalloonHelp::CalcClientSize
; _this$ = ecx

; 796  : {

  02b30	55		 push	 ebp
  02b31	8b ec		 mov	 ebp, esp
  02b33	6a ff		 push	 -1
  02b35	68 00 00 00 00	 push	 __ehhandler$?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ
  02b3a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02b40	50		 push	 eax
  02b41	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02b48	83 ec 44	 sub	 esp, 68			; 00000044H
  02b4b	57		 push	 edi
  02b4c	51		 push	 ecx
  02b4d	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  02b50	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  02b55	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  02b5a	f3 ab		 rep stosd
  02b5c	59		 pop	 ecx
  02b5d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 797  :    ASSERT(NULL != m_hWnd);

  02b60	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  02b63	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  02b67	75 14		 jne	 SHORT $L188976
  02b69	68 1d 03 00 00	 push	 797			; 0000031dH
  02b6e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  02b73	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  02b78	85 c0		 test	 eax, eax
  02b7a	74 01		 je	 SHORT $L188976
  02b7c	cc		 int	 3
$L188976:

; 798  :    CWindowDC dc(this);

  02b7d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  02b80	52		 push	 edx
  02b81	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  02b84	e8 00 00 00 00	 call	 ??0CWindowDC@@QAE@PAVCWnd@@@Z ; CWindowDC::CWindowDC
  02b89	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 799  : 
; 800  :    CSize sizeHeader = CalcHeaderSize(&dc);

  02b90	8d 45 d8	 lea	 eax, DWORD PTR _dc$[ebp]
  02b93	50		 push	 eax
  02b94	8d 4d c8	 lea	 ecx, DWORD PTR _sizeHeader$[ebp]
  02b97	51		 push	 ecx
  02b98	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b9b	e8 00 00 00 00	 call	 ?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcHeaderSize

; 801  :    CSize sizeContent = CalcContentSize(&dc);

  02ba0	8d 55 d8	 lea	 edx, DWORD PTR _dc$[ebp]
  02ba3	52		 push	 edx
  02ba4	8d 45 b8	 lea	 eax, DWORD PTR _sizeContent$[ebp]
  02ba7	50		 push	 eax
  02ba8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02bab	e8 00 00 00 00	 call	 ?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcContentSize

; 802  : 
; 803  :    return CSize(max(sizeHeader.cx,sizeContent.cx), sizeHeader.cy + nTIP_MARGIN + sizeContent.cy);

  02bb0	8b 4d c8	 mov	 ecx, DWORD PTR _sizeHeader$[ebp]
  02bb3	3b 4d b8	 cmp	 ecx, DWORD PTR _sizeContent$[ebp]
  02bb6	7e 08		 jle	 SHORT $L188977
  02bb8	8b 55 c8	 mov	 edx, DWORD PTR _sizeHeader$[ebp]
  02bbb	89 55 b0	 mov	 DWORD PTR tv87[ebp], edx
  02bbe	eb 06		 jmp	 SHORT $L188978
$L188977:
  02bc0	8b 45 b8	 mov	 eax, DWORD PTR _sizeContent$[ebp]
  02bc3	89 45 b0	 mov	 DWORD PTR tv87[ebp], eax
$L188978:
  02bc6	8b 4d bc	 mov	 ecx, DWORD PTR _sizeContent$[ebp+4]
  02bc9	8b 55 cc	 mov	 edx, DWORD PTR _sizeHeader$[ebp+4]
  02bcc	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  02bd0	50		 push	 eax
  02bd1	8b 4d b0	 mov	 ecx, DWORD PTR tv87[ebp]
  02bd4	51		 push	 ecx
  02bd5	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  02bd8	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize
  02bdd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02be4	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  02be7	e8 00 00 00 00	 call	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
  02bec	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 804  : }

  02bef	52		 push	 edx
  02bf0	8b cd		 mov	 ecx, ebp
  02bf2	50		 push	 eax
  02bf3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188987
  02bf9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02bfe	58		 pop	 eax
  02bff	5a		 pop	 edx
  02c00	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02c03	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02c0a	5f		 pop	 edi
  02c0b	83 c4 50	 add	 esp, 80			; 00000050H
  02c0e	3b ec		 cmp	 ebp, esp
  02c10	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02c15	8b e5		 mov	 esp, ebp
  02c17	5d		 pop	 ebp
  02c18	c2 04 00	 ret	 4
$L188987:
  02c1b	03 00 00 00	 DD	 3
  02c1f	00 00 00 00	 DD	 $L188986
$L188986:
  02c23	d8 ff ff ff	 DD	 -40			; ffffffd8H
  02c27	14 00 00 00	 DD	 20			; 00000014H
  02c2b	00 00 00 00	 DD	 $L188982
  02c2f	c8 ff ff ff	 DD	 -56			; ffffffc8H
  02c33	08 00 00 00	 DD	 8
  02c37	00 00 00 00	 DD	 $L188983
  02c3b	b8 ff ff ff	 DD	 -72			; ffffffb8H
  02c3f	08 00 00 00	 DD	 8
  02c43	00 00 00 00	 DD	 $L188984
$L188984:
  02c47	73		 DB	 115			; 00000073H
  02c48	69		 DB	 105			; 00000069H
  02c49	7a		 DB	 122			; 0000007aH
  02c4a	65		 DB	 101			; 00000065H
  02c4b	43		 DB	 67			; 00000043H
  02c4c	6f		 DB	 111			; 0000006fH
  02c4d	6e		 DB	 110			; 0000006eH
  02c4e	74		 DB	 116			; 00000074H
  02c4f	65		 DB	 101			; 00000065H
  02c50	6e		 DB	 110			; 0000006eH
  02c51	74		 DB	 116			; 00000074H
  02c52	00		 DB	 0
$L188983:
  02c53	73		 DB	 115			; 00000073H
  02c54	69		 DB	 105			; 00000069H
  02c55	7a		 DB	 122			; 0000007aH
  02c56	65		 DB	 101			; 00000065H
  02c57	48		 DB	 72			; 00000048H
  02c58	65		 DB	 101			; 00000065H
  02c59	61		 DB	 97			; 00000061H
  02c5a	64		 DB	 100			; 00000064H
  02c5b	65		 DB	 101			; 00000065H
  02c5c	72		 DB	 114			; 00000072H
  02c5d	00		 DB	 0
$L188982:
  02c5e	64		 DB	 100			; 00000064H
  02c5f	63		 DB	 99			; 00000063H
  02c60	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L188979:
  001a4	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  001a7	e9 00 00 00 00	 jmp	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
__ehhandler$?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ:
  001ac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188981
  001b1	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ ENDP	; CBalloonHelp::CalcClientSize
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.h
;	COMDAT ?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z PROC NEAR ; CBalloonHelp::CalcHeaderSize, COMDAT
; _this$ = ecx

; 221  :    CSize CalcHeaderSize(CDC* pDC) { return DrawHeader(pDC, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	6a 00		 push	 0
  00013	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	ff 90 40 01 00
	00		 call	 DWORD PTR [eax+320]
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00033	5e		 pop	 esi
  00034	83 c4 04	 add	 esp, 4
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ENDP ; CBalloonHelp::CalcHeaderSize
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z PROC NEAR ; CBalloonHelp::CalcContentSize, COMDAT
; _this$ = ecx

; 223  :    CSize CalcContentSize(CDC* pDC) { return DrawContent(pDC, 0, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	ff 90 44 01 00
	00		 call	 DWORD PTR [eax+324]
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00035	5e		 pop	 esi
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ENDP ; CBalloonHelp::CalcContentSize
_TEXT	ENDS
PUBLIC	?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ	; CBalloonHelp::CalcWindowSize
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.cpp
_TEXT	SEGMENT
_size$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ PROC NEAR	; CBalloonHelp::CalcWindowSize
; _this$ = ecx

; 808  : {

  02c70	55		 push	 ebp
  02c71	8b ec		 mov	 ebp, esp
  02c73	83 ec 14	 sub	 esp, 20			; 00000014H
  02c76	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  02c7b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  02c7e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  02c81	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  02c84	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  02c87	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  02c8a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :    CSize size = CalcClientSize();

  02c8d	8d 45 f0	 lea	 eax, DWORD PTR _size$[ebp]
  02c90	50		 push	 eax
  02c91	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c94	e8 00 00 00 00	 call	 ?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ ; CBalloonHelp::CalcClientSize

; 810  :    size.cx += nTIP_MARGIN*2;

  02c99	8b 4d f0	 mov	 ecx, DWORD PTR _size$[ebp]
  02c9c	83 c1 10	 add	 ecx, 16			; 00000010H
  02c9f	89 4d f0	 mov	 DWORD PTR _size$[ebp], ecx

; 811  :    size.cy += nTIP_TAIL+nTIP_MARGIN*2;

  02ca2	8b 55 f4	 mov	 edx, DWORD PTR _size$[ebp+4]
  02ca5	83 c2 24	 add	 edx, 36			; 00000024H
  02ca8	89 55 f4	 mov	 DWORD PTR _size$[ebp+4], edx

; 812  :    //size.cx = max(size.cx, nTIP_MARGIN*2+nTIP_TAIL*4);
; 813  :    return size;

  02cab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  02cae	8b 4d f0	 mov	 ecx, DWORD PTR _size$[ebp]
  02cb1	89 08		 mov	 DWORD PTR [eax], ecx
  02cb3	8b 55 f4	 mov	 edx, DWORD PTR _size$[ebp+4]
  02cb6	89 50 04	 mov	 DWORD PTR [eax+4], edx
  02cb9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 814  : }

  02cbc	52		 push	 edx
  02cbd	8b cd		 mov	 ecx, ebp
  02cbf	50		 push	 eax
  02cc0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L188994
  02cc6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  02ccb	58		 pop	 eax
  02ccc	5a		 pop	 edx
  02ccd	83 c4 14	 add	 esp, 20			; 00000014H
  02cd0	3b ec		 cmp	 ebp, esp
  02cd2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02cd7	8b e5		 mov	 esp, ebp
  02cd9	5d		 pop	 ebp
  02cda	c2 04 00	 ret	 4
$L188994:
  02cdd	01 00 00 00	 DD	 1
  02ce1	00 00 00 00	 DD	 $L188993
$L188993:
  02ce5	f0 ff ff ff	 DD	 -16			; fffffff0H
  02ce9	08 00 00 00	 DD	 8
  02ced	00 00 00 00	 DD	 $L188992
$L188992:
  02cf1	73		 DB	 115			; 00000073H
  02cf2	69		 DB	 105			; 00000069H
  02cf3	7a		 DB	 122			; 0000007aH
  02cf4	65		 DB	 101			; 00000065H
  02cf5	00		 DB	 0
?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ ENDP	; CBalloonHelp::CalcWindowSize
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	?Detach@CGdiObject@@QAEPAXXZ:NEAR		; CGdiObject::Detach
EXTRN	??0CPoint@@QAE@XZ:NEAR				; CPoint::CPoint
EXTRN	?CreateRectRgn@CRgn@@QAEHHHHH@Z:NEAR		; CRgn::CreateRectRgn
EXTRN	?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z:NEAR ; CRgn::CreatePolygonRgn
EXTRN	?CombineRgn@CRgn@@QAEHPAV1@0H@Z:NEAR		; CRgn::CombineRgn
EXTRN	?CopyRgn@CRgn@@QAEHPAV1@@Z:NEAR			; CRgn::CopyRgn
EXTRN	?EqualRgn@CRgn@@QBEHPAV1@@Z:NEAR		; CRgn::EqualRgn
EXTRN	?MoveWindow@CWnd@@QAEXHHHHH@Z:NEAR		; CWnd::MoveWindow
EXTRN	?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z:NEAR	; CWnd::SetWindowRgn
EXTRN	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z:NEAR ; CWnd::RedrawWindow
xdata$x	SEGMENT
$T189015 DD	0ffffffffH
	DD	FLAT:$L188996
	DD	00H
	DD	FLAT:$L188997
	DD	01H
	DD	FLAT:$L188998
$T189000 DD	019930520H
	DD	03H
	DD	FLAT:$T189015
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv80 = -212						; size = 4
_regionComplete$ = -204					; size = 8
_regionRound$ = -188					; size = 8
_region$ = -172						; size = 8
_nAdjustY$ = -160					; size = 4
_nAdjustX$ = -156					; size = 4
_rectScreen$ = -148					; size = 16
_ptOffs$ = -124						; size = 8
_ptAnchor$ = -108					; size = 8
_ptBottomRight$ = -92					; size = 8
_ptTopLeft$ = -76					; size = 8
_ptTail$ = -60						; size = 24
_sizeWnd$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?PositionWindow@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::PositionWindow
; _this$ = ecx

; 821  : {

  02d00	55		 push	 ebp
  02d01	8b ec		 mov	 ebp, esp
  02d03	6a ff		 push	 -1
  02d05	68 00 00 00 00	 push	 __ehhandler$?PositionWindow@CBalloonHelp@@IAEXXZ
  02d0a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02d10	50		 push	 eax
  02d11	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02d18	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  02d1e	57		 push	 edi
  02d1f	51		 push	 ecx
  02d20	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  02d26	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  02d2b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  02d30	f3 ab		 rep stosd
  02d32	59		 pop	 ecx
  02d33	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 822  :    CSize sizeWnd = CalcWindowSize();

  02d36	8d 45 e4	 lea	 eax, DWORD PTR _sizeWnd$[ebp]
  02d39	50		 push	 eax
  02d3a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02d3d	e8 00 00 00 00	 call	 ?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ ; CBalloonHelp::CalcWindowSize

; 823  : 
; 824  :    CPoint ptTail[3];

  02d42	68 00 00 00 00	 push	 OFFSET FLAT:??0CPoint@@QAE@XZ ; CPoint::CPoint
  02d47	6a 03		 push	 3
  02d49	6a 08		 push	 8
  02d4b	8d 4d c4	 lea	 ecx, DWORD PTR _ptTail$[ebp]
  02d4e	51		 push	 ecx
  02d4f	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z

; 825  :    CPoint ptTopLeft(0,0);

  02d54	6a 00		 push	 0
  02d56	6a 00		 push	 0
  02d58	8d 4d b4	 lea	 ecx, DWORD PTR _ptTopLeft$[ebp]
  02d5b	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 826  :    CPoint ptBottomRight(sizeWnd.cx, sizeWnd.cy);

  02d60	8b 55 e8	 mov	 edx, DWORD PTR _sizeWnd$[ebp+4]
  02d63	52		 push	 edx
  02d64	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02d67	50		 push	 eax
  02d68	8d 4d a4	 lea	 ecx, DWORD PTR _ptBottomRight$[ebp]
  02d6b	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 827  : 
; 828  :    // force recalculation of desktop
; 829  :    m_screenRect.SetRectEmpty();

  02d70	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02d73	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  02d79	e8 00 00 00 00	 call	 ?SetRectEmpty@CRect@@QAEXXZ ; CRect::SetRectEmpty

; 830  : 
; 831  :    switch (GetBalloonQuadrant())

  02d7e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02d81	e8 00 00 00 00	 call	 ?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ; CBalloonHelp::GetBalloonQuadrant
  02d86	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  02d8c	83 bd 2c ff ff
	ff 03		 cmp	 DWORD PTR tv80[ebp], 3
  02d93	0f 87 51 01 00
	00		 ja	 $L187816
  02d99	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv80[ebp]
  02d9f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L189014[ecx*4]
$L187819:

; 832  :    {
; 833  :    case BQ_TOPLEFT:
; 834  :       ptTopLeft.y = nTIP_TAIL;

  02da6	c7 45 b8 14 00
	00 00		 mov	 DWORD PTR _ptTopLeft$[ebp+4], 20 ; 00000014H

; 835  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4 + nTIP_TAIL;

  02dad	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02db0	83 e8 14	 sub	 eax, 20			; 00000014H
  02db3	99		 cdq
  02db4	83 e2 03	 and	 edx, 3
  02db7	03 c2		 add	 eax, edx
  02db9	c1 f8 02	 sar	 eax, 2
  02dbc	83 c0 14	 add	 eax, 20			; 00000014H
  02dbf	89 45 c4	 mov	 DWORD PTR _ptTail$[ebp], eax

; 836  :       ptTail[0].y = nTIP_TAIL+1;

  02dc2	c7 45 c8 15 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+4], 21 ; 00000015H

; 837  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4;

  02dc9	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02dcc	83 e8 14	 sub	 eax, 20			; 00000014H
  02dcf	99		 cdq
  02dd0	83 e2 03	 and	 edx, 3
  02dd3	03 c2		 add	 eax, edx
  02dd5	c1 f8 02	 sar	 eax, 2
  02dd8	89 45 d4	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 838  :       ptTail[2].y = ptTail[0].y;

  02ddb	8b 55 c8	 mov	 edx, DWORD PTR _ptTail$[ebp+4]
  02dde	89 55 d8	 mov	 DWORD PTR _ptTail$[ebp+20], edx

; 839  :       ptTail[1].x = ptTail[2].x;

  02de1	8b 45 d4	 mov	 eax, DWORD PTR _ptTail$[ebp+16]
  02de4	89 45 cc	 mov	 DWORD PTR _ptTail$[ebp+8], eax

; 840  :       ptTail[1].y = 1;

  02de7	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+12], 1

; 841  :       break;

  02dee	e9 f7 00 00 00	 jmp	 $L187816
$L187820:

; 842  :    case BQ_TOPRIGHT:
; 843  :       ptTopLeft.y = nTIP_TAIL;

  02df3	c7 45 b8 14 00
	00 00		 mov	 DWORD PTR _ptTopLeft$[ebp+4], 20 ; 00000014H

; 844  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4*3;

  02dfa	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02dfd	83 e8 14	 sub	 eax, 20			; 00000014H
  02e00	99		 cdq
  02e01	83 e2 03	 and	 edx, 3
  02e04	03 c2		 add	 eax, edx
  02e06	c1 f8 02	 sar	 eax, 2
  02e09	6b c0 03	 imul	 eax, 3
  02e0c	89 45 c4	 mov	 DWORD PTR _ptTail$[ebp], eax

; 845  :       ptTail[0].y = nTIP_TAIL+1;

  02e0f	c7 45 c8 15 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+4], 21 ; 00000015H

; 846  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4*3 + nTIP_TAIL;

  02e16	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02e19	83 e8 14	 sub	 eax, 20			; 00000014H
  02e1c	99		 cdq
  02e1d	83 e2 03	 and	 edx, 3
  02e20	03 c2		 add	 eax, edx
  02e22	c1 f8 02	 sar	 eax, 2
  02e25	6b c0 03	 imul	 eax, 3
  02e28	83 c0 14	 add	 eax, 20			; 00000014H
  02e2b	89 45 d4	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 847  :       ptTail[2].y = ptTail[0].y;

  02e2e	8b 4d c8	 mov	 ecx, DWORD PTR _ptTail$[ebp+4]
  02e31	89 4d d8	 mov	 DWORD PTR _ptTail$[ebp+20], ecx

; 848  :       ptTail[1].x = ptTail[2].x;

  02e34	8b 55 d4	 mov	 edx, DWORD PTR _ptTail$[ebp+16]
  02e37	89 55 cc	 mov	 DWORD PTR _ptTail$[ebp+8], edx

; 849  :       ptTail[1].y = 1;

  02e3a	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+12], 1

; 850  :       break;

  02e41	e9 a4 00 00 00	 jmp	 $L187816
$L187821:

; 851  :    case BQ_BOTTOMLEFT:
; 852  :       ptBottomRight.y = sizeWnd.cy-nTIP_TAIL;

  02e46	8b 45 e8	 mov	 eax, DWORD PTR _sizeWnd$[ebp+4]
  02e49	83 e8 14	 sub	 eax, 20			; 00000014H
  02e4c	89 45 a8	 mov	 DWORD PTR _ptBottomRight$[ebp+4], eax

; 853  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4 + nTIP_TAIL;

  02e4f	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02e52	83 e8 14	 sub	 eax, 20			; 00000014H
  02e55	99		 cdq
  02e56	83 e2 03	 and	 edx, 3
  02e59	03 c2		 add	 eax, edx
  02e5b	c1 f8 02	 sar	 eax, 2
  02e5e	83 c0 14	 add	 eax, 20			; 00000014H
  02e61	89 45 c4	 mov	 DWORD PTR _ptTail$[ebp], eax

; 854  :       ptTail[0].y = sizeWnd.cy-nTIP_TAIL-2;

  02e64	8b 4d e8	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  02e67	83 e9 16	 sub	 ecx, 22			; 00000016H
  02e6a	89 4d c8	 mov	 DWORD PTR _ptTail$[ebp+4], ecx

; 855  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4;

  02e6d	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02e70	83 e8 14	 sub	 eax, 20			; 00000014H
  02e73	99		 cdq
  02e74	83 e2 03	 and	 edx, 3
  02e77	03 c2		 add	 eax, edx
  02e79	c1 f8 02	 sar	 eax, 2
  02e7c	89 45 d4	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 856  :       ptTail[2].y = ptTail[0].y;

  02e7f	8b 55 c8	 mov	 edx, DWORD PTR _ptTail$[ebp+4]
  02e82	89 55 d8	 mov	 DWORD PTR _ptTail$[ebp+20], edx

; 857  :       ptTail[1].x = ptTail[2].x;

  02e85	8b 45 d4	 mov	 eax, DWORD PTR _ptTail$[ebp+16]
  02e88	89 45 cc	 mov	 DWORD PTR _ptTail$[ebp+8], eax

; 858  :       ptTail[1].y = sizeWnd.cy-2;

  02e8b	8b 4d e8	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  02e8e	83 e9 02	 sub	 ecx, 2
  02e91	89 4d d0	 mov	 DWORD PTR _ptTail$[ebp+12], ecx

; 859  :       break;

  02e94	eb 54		 jmp	 SHORT $L187816
$L187822:

; 860  :    case BQ_BOTTOMRIGHT:
; 861  :       ptBottomRight.y = sizeWnd.cy-nTIP_TAIL;

  02e96	8b 55 e8	 mov	 edx, DWORD PTR _sizeWnd$[ebp+4]
  02e99	83 ea 14	 sub	 edx, 20			; 00000014H
  02e9c	89 55 a8	 mov	 DWORD PTR _ptBottomRight$[ebp+4], edx

; 862  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4*3;

  02e9f	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02ea2	83 e8 14	 sub	 eax, 20			; 00000014H
  02ea5	99		 cdq
  02ea6	83 e2 03	 and	 edx, 3
  02ea9	03 c2		 add	 eax, edx
  02eab	c1 f8 02	 sar	 eax, 2
  02eae	6b c0 03	 imul	 eax, 3
  02eb1	89 45 c4	 mov	 DWORD PTR _ptTail$[ebp], eax

; 863  :       ptTail[0].y = sizeWnd.cy-nTIP_TAIL-2;

  02eb4	8b 45 e8	 mov	 eax, DWORD PTR _sizeWnd$[ebp+4]
  02eb7	83 e8 16	 sub	 eax, 22			; 00000016H
  02eba	89 45 c8	 mov	 DWORD PTR _ptTail$[ebp+4], eax

; 864  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4*3 + nTIP_TAIL;

  02ebd	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02ec0	83 e8 14	 sub	 eax, 20			; 00000014H
  02ec3	99		 cdq
  02ec4	83 e2 03	 and	 edx, 3
  02ec7	03 c2		 add	 eax, edx
  02ec9	c1 f8 02	 sar	 eax, 2
  02ecc	6b c0 03	 imul	 eax, 3
  02ecf	83 c0 14	 add	 eax, 20			; 00000014H
  02ed2	89 45 d4	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 865  :       ptTail[2].y = ptTail[0].y;

  02ed5	8b 4d c8	 mov	 ecx, DWORD PTR _ptTail$[ebp+4]
  02ed8	89 4d d8	 mov	 DWORD PTR _ptTail$[ebp+20], ecx

; 866  :       ptTail[1].x = ptTail[2].x;

  02edb	8b 55 d4	 mov	 edx, DWORD PTR _ptTail$[ebp+16]
  02ede	89 55 cc	 mov	 DWORD PTR _ptTail$[ebp+8], edx

; 867  :       ptTail[1].y = sizeWnd.cy-2;

  02ee1	8b 45 e8	 mov	 eax, DWORD PTR _sizeWnd$[ebp+4]
  02ee4	83 e8 02	 sub	 eax, 2
  02ee7	89 45 d0	 mov	 DWORD PTR _ptTail$[ebp+12], eax
$L187816:

; 868  :       break;
; 869  :    }
; 870  : 
; 871  :    // adjust for very narrow balloons
; 872  :    if ( ptTail[0].x < nTIP_MARGIN )

  02eea	83 7d c4 08	 cmp	 DWORD PTR _ptTail$[ebp], 8
  02eee	7d 07		 jge	 SHORT $L187823

; 873  :       ptTail[0].x = nTIP_MARGIN;

  02ef0	c7 45 c4 08 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp], 8
$L187823:

; 874  :    if ( ptTail[0].x > sizeWnd.cx - nTIP_MARGIN )

  02ef7	8b 4d e4	 mov	 ecx, DWORD PTR _sizeWnd$[ebp]
  02efa	83 e9 08	 sub	 ecx, 8
  02efd	39 4d c4	 cmp	 DWORD PTR _ptTail$[ebp], ecx
  02f00	7e 09		 jle	 SHORT $L187824

; 875  :       ptTail[0].x = sizeWnd.cx - nTIP_MARGIN;

  02f02	8b 55 e4	 mov	 edx, DWORD PTR _sizeWnd$[ebp]
  02f05	83 ea 08	 sub	 edx, 8
  02f08	89 55 c4	 mov	 DWORD PTR _ptTail$[ebp], edx
$L187824:

; 876  :    if ( ptTail[1].x < nTIP_MARGIN )

  02f0b	83 7d cc 08	 cmp	 DWORD PTR _ptTail$[ebp+8], 8
  02f0f	7d 07		 jge	 SHORT $L187825

; 877  :       ptTail[1].x = nTIP_MARGIN;

  02f11	c7 45 cc 08 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+8], 8
$L187825:

; 878  :    if ( ptTail[1].x > sizeWnd.cx - nTIP_MARGIN )

  02f18	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02f1b	83 e8 08	 sub	 eax, 8
  02f1e	39 45 cc	 cmp	 DWORD PTR _ptTail$[ebp+8], eax
  02f21	7e 09		 jle	 SHORT $L187826

; 879  :       ptTail[1].x = sizeWnd.cx - nTIP_MARGIN;

  02f23	8b 4d e4	 mov	 ecx, DWORD PTR _sizeWnd$[ebp]
  02f26	83 e9 08	 sub	 ecx, 8
  02f29	89 4d cc	 mov	 DWORD PTR _ptTail$[ebp+8], ecx
$L187826:

; 880  :    if ( ptTail[2].x < nTIP_MARGIN )

  02f2c	83 7d d4 08	 cmp	 DWORD PTR _ptTail$[ebp+16], 8
  02f30	7d 07		 jge	 SHORT $L187827

; 881  :       ptTail[2].x = nTIP_MARGIN;

  02f32	c7 45 d4 08 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+16], 8
$L187827:

; 882  :    if ( ptTail[2].x > sizeWnd.cx - nTIP_MARGIN )

  02f39	8b 55 e4	 mov	 edx, DWORD PTR _sizeWnd$[ebp]
  02f3c	83 ea 08	 sub	 edx, 8
  02f3f	39 55 d4	 cmp	 DWORD PTR _ptTail$[ebp+16], edx
  02f42	7e 09		 jle	 SHORT $L187828

; 883  :       ptTail[2].x = sizeWnd.cx - nTIP_MARGIN;

  02f44	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02f47	83 e8 08	 sub	 eax, 8
  02f4a	89 45 d4	 mov	 DWORD PTR _ptTail$[ebp+16], eax
$L187828:

; 884  : 
; 885  :    // get window position
; 886  :    CPoint ptAnchor = GetAnchorPoint();

  02f4d	8d 4d 94	 lea	 ecx, DWORD PTR _ptAnchor$[ebp]
  02f50	51		 push	 ecx
  02f51	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02f54	e8 00 00 00 00	 call	 ?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ; CBalloonHelp::GetAnchorPoint

; 887  :    CPoint ptOffs(ptAnchor.x - ptTail[1].x, ptAnchor.y - ptTail[1].y);

  02f59	8b 55 98	 mov	 edx, DWORD PTR _ptAnchor$[ebp+4]
  02f5c	2b 55 d0	 sub	 edx, DWORD PTR _ptTail$[ebp+12]
  02f5f	52		 push	 edx
  02f60	8b 45 94	 mov	 eax, DWORD PTR _ptAnchor$[ebp]
  02f63	2b 45 cc	 sub	 eax, DWORD PTR _ptTail$[ebp+8]
  02f66	50		 push	 eax
  02f67	8d 4d 84	 lea	 ecx, DWORD PTR _ptOffs$[ebp]
  02f6a	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 888  : 
; 889  :    // adjust position so all is visible
; 890  :    CRect rectScreen;

  02f6f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _rectScreen$[ebp]
  02f75	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 891  :    GetAnchorScreenBounds(rectScreen);

  02f7a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _rectScreen$[ebp]
  02f80	51		 push	 ecx
  02f81	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02f84	e8 00 00 00 00	 call	 ?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds

; 892  :    int nAdjustX = 0;

  02f89	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nAdjustX$[ebp], 0

; 893  :    int nAdjustY = 0;

  02f93	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nAdjustY$[ebp], 0

; 894  :    if ( ptOffs.x < rectScreen.left )

  02f9d	8b 55 84	 mov	 edx, DWORD PTR _ptOffs$[ebp]
  02fa0	3b 95 6c ff ff
	ff		 cmp	 edx, DWORD PTR _rectScreen$[ebp]
  02fa6	7d 11		 jge	 SHORT $L187835

; 895  :       nAdjustX = rectScreen.left-ptOffs.x;

  02fa8	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _rectScreen$[ebp]
  02fae	2b 45 84	 sub	 eax, DWORD PTR _ptOffs$[ebp]
  02fb1	89 85 64 ff ff
	ff		 mov	 DWORD PTR _nAdjustX$[ebp], eax

; 896  :    else if ( ptOffs.x + sizeWnd.cx >= rectScreen.right )

  02fb7	eb 22		 jmp	 SHORT $L187836
$L187835:
  02fb9	8b 4d 84	 mov	 ecx, DWORD PTR _ptOffs$[ebp]
  02fbc	03 4d e4	 add	 ecx, DWORD PTR _sizeWnd$[ebp]
  02fbf	3b 8d 74 ff ff
	ff		 cmp	 ecx, DWORD PTR _rectScreen$[ebp+8]
  02fc5	7c 14		 jl	 SHORT $L187836

; 897  :       nAdjustX = rectScreen.right - (ptOffs.x + sizeWnd.cx);

  02fc7	8b 55 84	 mov	 edx, DWORD PTR _ptOffs$[ebp]
  02fca	03 55 e4	 add	 edx, DWORD PTR _sizeWnd$[ebp]
  02fcd	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _rectScreen$[ebp+8]
  02fd3	2b c2		 sub	 eax, edx
  02fd5	89 85 64 ff ff
	ff		 mov	 DWORD PTR _nAdjustX$[ebp], eax
$L187836:

; 898  :    if ( ptOffs.y + nTIP_TAIL < rectScreen.top )

  02fdb	8b 4d 88	 mov	 ecx, DWORD PTR _ptOffs$[ebp+4]
  02fde	83 c1 14	 add	 ecx, 20			; 00000014H
  02fe1	3b 8d 70 ff ff
	ff		 cmp	 ecx, DWORD PTR _rectScreen$[ebp+4]
  02fe7	7d 16		 jge	 SHORT $L187838

; 899  :       nAdjustY = rectScreen.top - (ptOffs.y + nTIP_TAIL);

  02fe9	8b 55 88	 mov	 edx, DWORD PTR _ptOffs$[ebp+4]
  02fec	83 c2 14	 add	 edx, 20			; 00000014H
  02fef	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _rectScreen$[ebp+4]
  02ff5	2b c2		 sub	 eax, edx
  02ff7	89 85 60 ff ff
	ff		 mov	 DWORD PTR _nAdjustY$[ebp], eax

; 900  :    else if ( ptOffs.y + sizeWnd.cy - nTIP_TAIL >= rectScreen.bottom )

  02ffd	eb 2a		 jmp	 SHORT $L187839
$L187838:
  02fff	8b 4d e8	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  03002	8b 55 88	 mov	 edx, DWORD PTR _ptOffs$[ebp+4]
  03005	8d 44 0a ec	 lea	 eax, DWORD PTR [edx+ecx-20]
  03009	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _rectScreen$[ebp+12]
  0300f	7c 18		 jl	 SHORT $L187839

; 901  :       nAdjustY = rectScreen.bottom - (ptOffs.y + sizeWnd.cy - nTIP_TAIL);

  03011	8b 4d e8	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  03014	8b 55 88	 mov	 edx, DWORD PTR _ptOffs$[ebp+4]
  03017	8d 44 0a ec	 lea	 eax, DWORD PTR [edx+ecx-20]
  0301b	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _rectScreen$[ebp+12]
  03021	2b c8		 sub	 ecx, eax
  03023	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _nAdjustY$[ebp], ecx
$L187839:

; 902  : 
; 903  :    // reposition tail
; 904  :    // uncomment two commented lines below to move entire tail 
; 905  :    // instead of just anchor point
; 906  : 
; 907  :    //ptTail[0].x -= nAdjustX;
; 908  :    ptTail[1].x -= nAdjustX;

  03029	8b 55 cc	 mov	 edx, DWORD PTR _ptTail$[ebp+8]
  0302c	2b 95 64 ff ff
	ff		 sub	 edx, DWORD PTR _nAdjustX$[ebp]
  03032	89 55 cc	 mov	 DWORD PTR _ptTail$[ebp+8], edx

; 909  :    //ptTail[2].x -= nAdjustX;
; 910  :    ptOffs.x    += nAdjustX;

  03035	8b 45 84	 mov	 eax, DWORD PTR _ptOffs$[ebp]
  03038	03 85 64 ff ff
	ff		 add	 eax, DWORD PTR _nAdjustX$[ebp]
  0303e	89 45 84	 mov	 DWORD PTR _ptOffs$[ebp], eax

; 911  :    ptOffs.y    += nAdjustY;

  03041	8b 4d 88	 mov	 ecx, DWORD PTR _ptOffs$[ebp+4]
  03044	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _nAdjustY$[ebp]
  0304a	89 4d 88	 mov	 DWORD PTR _ptOffs$[ebp+4], ecx

; 912  : 
; 913  :    // place window
; 914  :    MoveWindow(ptOffs.x, ptOffs.y, sizeWnd.cx, sizeWnd.cy, TRUE);

  0304d	6a 01		 push	 1
  0304f	8b 55 e8	 mov	 edx, DWORD PTR _sizeWnd$[ebp+4]
  03052	52		 push	 edx
  03053	8b 45 e4	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  03056	50		 push	 eax
  03057	8b 4d 88	 mov	 ecx, DWORD PTR _ptOffs$[ebp+4]
  0305a	51		 push	 ecx
  0305b	8b 55 84	 mov	 edx, DWORD PTR _ptOffs$[ebp]
  0305e	52		 push	 edx
  0305f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03062	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXHHHHH@Z ; CWnd::MoveWindow

; 915  : 
; 916  :    // apply region
; 917  :    CRgn region;

  03067	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _region$[ebp]
  0306d	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  03072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 918  :    CRgn regionRound;

  03079	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _regionRound$[ebp]
  0307f	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  03084	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 919  :    CRgn regionComplete;

  03088	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  0308e	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  03093	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 920  :    region.CreatePolygonRgn(&ptTail[0], 3, ALTERNATE);

  03097	6a 01		 push	 1
  03099	6a 03		 push	 3
  0309b	8d 45 c4	 lea	 eax, DWORD PTR _ptTail$[ebp]
  0309e	50		 push	 eax
  0309f	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _region$[ebp]
  030a5	e8 00 00 00 00	 call	 ?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z ; CRgn::CreatePolygonRgn

; 921  :    //regionRound.CreateRoundRectRgn(ptTopLeft.x,ptTopLeft.y,ptBottomRight.x,ptBottomRight.y,nTIP_MARGIN*3,nTIP_MARGIN*3);
; 922  :    regionRound.CreateRectRgn(ptTopLeft.x,ptTopLeft.y,ptBottomRight.x,ptBottomRight.y);

  030aa	8b 4d a8	 mov	 ecx, DWORD PTR _ptBottomRight$[ebp+4]
  030ad	51		 push	 ecx
  030ae	8b 55 a4	 mov	 edx, DWORD PTR _ptBottomRight$[ebp]
  030b1	52		 push	 edx
  030b2	8b 45 b8	 mov	 eax, DWORD PTR _ptTopLeft$[ebp+4]
  030b5	50		 push	 eax
  030b6	8b 4d b4	 mov	 ecx, DWORD PTR _ptTopLeft$[ebp]
  030b9	51		 push	 ecx
  030ba	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _regionRound$[ebp]
  030c0	e8 00 00 00 00	 call	 ?CreateRectRgn@CRgn@@QAEHHHHH@Z ; CRgn::CreateRectRgn

; 923  :    regionComplete.CreateRectRgn(0,0,1,1);

  030c5	6a 01		 push	 1
  030c7	6a 01		 push	 1
  030c9	6a 00		 push	 0
  030cb	6a 00		 push	 0
  030cd	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  030d3	e8 00 00 00 00	 call	 ?CreateRectRgn@CRgn@@QAEHHHHH@Z ; CRgn::CreateRectRgn

; 924  :    regionComplete.CombineRgn(&region, &regionRound, RGN_OR);

  030d8	6a 02		 push	 2
  030da	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _regionRound$[ebp]
  030e0	52		 push	 edx
  030e1	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _region$[ebp]
  030e7	50		 push	 eax
  030e8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  030ee	e8 00 00 00 00	 call	 ?CombineRgn@CRgn@@QAEHPAV1@0H@Z ; CRgn::CombineRgn

; 925  : 
; 926  :    if ( NULL == m_rgnComplete.m_hObject )

  030f3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  030f6	83 b9 d0 00 00
	00 00		 cmp	 DWORD PTR [ecx+208], 0
  030fd	75 16		 jne	 SHORT $L187844

; 927  :       m_rgnComplete.CreateRectRgn(0,0,1,1);

  030ff	6a 01		 push	 1
  03101	6a 01		 push	 1
  03103	6a 00		 push	 0
  03105	6a 00		 push	 0
  03107	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0310a	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  03110	e8 00 00 00 00	 call	 ?CreateRectRgn@CRgn@@QAEHHHHH@Z ; CRgn::CreateRectRgn
$L187844:

; 928  : 
; 929  :    if ( !m_rgnComplete.EqualRgn(&regionComplete) )

  03115	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _regionComplete$[ebp]
  0311b	52		 push	 edx
  0311c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0311f	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  03125	e8 00 00 00 00	 call	 ?EqualRgn@CRgn@@QBEHPAV1@@Z ; CRgn::EqualRgn
  0312a	85 c0		 test	 eax, eax
  0312c	75 3c		 jne	 SHORT $L187845

; 930  :    {
; 931  :       m_rgnComplete.CopyRgn(&regionComplete);

  0312e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _regionComplete$[ebp]
  03134	50		 push	 eax
  03135	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03138	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  0313e	e8 00 00 00 00	 call	 ?CopyRgn@CRgn@@QAEHPAV1@@Z ; CRgn::CopyRgn

; 932  :       SetWindowRgn((HRGN)regionComplete.Detach(), TRUE);

  03143	6a 01		 push	 1
  03145	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  0314b	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
  03150	50		 push	 eax
  03151	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03154	e8 00 00 00 00	 call	 ?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z ; CWnd::SetWindowRgn

; 933  : 
; 934  :       // There is a bug with layered windows and NC changes in Win2k
; 935  :       // As a workaround, redraw the entire window if the NC area changed.
; 936  :       // Changing the anchor point is the ONLY thing that will change the
; 937  :       // position of the client area relative to the window during normal
; 938  :       // operation.
; 939  :       RedrawWindow(NULL, NULL, RDW_UPDATENOW| RDW_ERASE | RDW_INVALIDATE | RDW_FRAME | RDW_ALLCHILDREN);

  03159	68 85 05 00 00	 push	 1413			; 00000585H
  0315e	6a 00		 push	 0
  03160	6a 00		 push	 0
  03162	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03165	e8 00 00 00 00	 call	 ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$L187845:

; 940  :    }
; 941  : }

  0316a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0316e	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  03174	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  03179	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0317d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _regionRound$[ebp]
  03183	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  03188	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0318f	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _region$[ebp]
  03195	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  0319a	52		 push	 edx
  0319b	8b cd		 mov	 ecx, ebp
  0319d	50		 push	 eax
  0319e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189013
  031a4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  031a9	58		 pop	 eax
  031aa	5a		 pop	 edx
  031ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  031ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  031b5	5f		 pop	 edi
  031b6	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  031bc	3b ec		 cmp	 ebp, esp
  031be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  031c3	8b e5		 mov	 esp, ebp
  031c5	5d		 pop	 ebp
  031c6	c3		 ret	 0
$L189013:
  031c7	0a 00 00 00	 DD	 10			; 0000000aH
  031cb	00 00 00 00	 DD	 $L189012
$L189012:
  031cf	e4 ff ff ff	 DD	 -28			; ffffffe4H
  031d3	08 00 00 00	 DD	 8
  031d7	00 00 00 00	 DD	 $L189001
  031db	c4 ff ff ff	 DD	 -60			; ffffffc4H
  031df	18 00 00 00	 DD	 24			; 00000018H
  031e3	00 00 00 00	 DD	 $L189002
  031e7	b4 ff ff ff	 DD	 -76			; ffffffb4H
  031eb	08 00 00 00	 DD	 8
  031ef	00 00 00 00	 DD	 $L189003
  031f3	a4 ff ff ff	 DD	 -92			; ffffffa4H
  031f7	08 00 00 00	 DD	 8
  031fb	00 00 00 00	 DD	 $L189004
  031ff	94 ff ff ff	 DD	 -108			; ffffff94H
  03203	08 00 00 00	 DD	 8
  03207	00 00 00 00	 DD	 $L189005
  0320b	84 ff ff ff	 DD	 -124			; ffffff84H
  0320f	08 00 00 00	 DD	 8
  03213	00 00 00 00	 DD	 $L189006
  03217	6c ff ff ff	 DD	 -148			; ffffff6cH
  0321b	10 00 00 00	 DD	 16			; 00000010H
  0321f	00 00 00 00	 DD	 $L189007
  03223	54 ff ff ff	 DD	 -172			; ffffff54H
  03227	08 00 00 00	 DD	 8
  0322b	00 00 00 00	 DD	 $L189008
  0322f	44 ff ff ff	 DD	 -188			; ffffff44H
  03233	08 00 00 00	 DD	 8
  03237	00 00 00 00	 DD	 $L189009
  0323b	34 ff ff ff	 DD	 -204			; ffffff34H
  0323f	08 00 00 00	 DD	 8
  03243	00 00 00 00	 DD	 $L189010
$L189010:
  03247	72		 DB	 114			; 00000072H
  03248	65		 DB	 101			; 00000065H
  03249	67		 DB	 103			; 00000067H
  0324a	69		 DB	 105			; 00000069H
  0324b	6f		 DB	 111			; 0000006fH
  0324c	6e		 DB	 110			; 0000006eH
  0324d	43		 DB	 67			; 00000043H
  0324e	6f		 DB	 111			; 0000006fH
  0324f	6d		 DB	 109			; 0000006dH
  03250	70		 DB	 112			; 00000070H
  03251	6c		 DB	 108			; 0000006cH
  03252	65		 DB	 101			; 00000065H
  03253	74		 DB	 116			; 00000074H
  03254	65		 DB	 101			; 00000065H
  03255	00		 DB	 0
$L189009:
  03256	72		 DB	 114			; 00000072H
  03257	65		 DB	 101			; 00000065H
  03258	67		 DB	 103			; 00000067H
  03259	69		 DB	 105			; 00000069H
  0325a	6f		 DB	 111			; 0000006fH
  0325b	6e		 DB	 110			; 0000006eH
  0325c	52		 DB	 82			; 00000052H
  0325d	6f		 DB	 111			; 0000006fH
  0325e	75		 DB	 117			; 00000075H
  0325f	6e		 DB	 110			; 0000006eH
  03260	64		 DB	 100			; 00000064H
  03261	00		 DB	 0
$L189008:
  03262	72		 DB	 114			; 00000072H
  03263	65		 DB	 101			; 00000065H
  03264	67		 DB	 103			; 00000067H
  03265	69		 DB	 105			; 00000069H
  03266	6f		 DB	 111			; 0000006fH
  03267	6e		 DB	 110			; 0000006eH
  03268	00		 DB	 0
$L189007:
  03269	72		 DB	 114			; 00000072H
  0326a	65		 DB	 101			; 00000065H
  0326b	63		 DB	 99			; 00000063H
  0326c	74		 DB	 116			; 00000074H
  0326d	53		 DB	 83			; 00000053H
  0326e	63		 DB	 99			; 00000063H
  0326f	72		 DB	 114			; 00000072H
  03270	65		 DB	 101			; 00000065H
  03271	65		 DB	 101			; 00000065H
  03272	6e		 DB	 110			; 0000006eH
  03273	00		 DB	 0
$L189006:
  03274	70		 DB	 112			; 00000070H
  03275	74		 DB	 116			; 00000074H
  03276	4f		 DB	 79			; 0000004fH
  03277	66		 DB	 102			; 00000066H
  03278	66		 DB	 102			; 00000066H
  03279	73		 DB	 115			; 00000073H
  0327a	00		 DB	 0
$L189005:
  0327b	70		 DB	 112			; 00000070H
  0327c	74		 DB	 116			; 00000074H
  0327d	41		 DB	 65			; 00000041H
  0327e	6e		 DB	 110			; 0000006eH
  0327f	63		 DB	 99			; 00000063H
  03280	68		 DB	 104			; 00000068H
  03281	6f		 DB	 111			; 0000006fH
  03282	72		 DB	 114			; 00000072H
  03283	00		 DB	 0
$L189004:
  03284	70		 DB	 112			; 00000070H
  03285	74		 DB	 116			; 00000074H
  03286	42		 DB	 66			; 00000042H
  03287	6f		 DB	 111			; 0000006fH
  03288	74		 DB	 116			; 00000074H
  03289	74		 DB	 116			; 00000074H
  0328a	6f		 DB	 111			; 0000006fH
  0328b	6d		 DB	 109			; 0000006dH
  0328c	52		 DB	 82			; 00000052H
  0328d	69		 DB	 105			; 00000069H
  0328e	67		 DB	 103			; 00000067H
  0328f	68		 DB	 104			; 00000068H
  03290	74		 DB	 116			; 00000074H
  03291	00		 DB	 0
$L189003:
  03292	70		 DB	 112			; 00000070H
  03293	74		 DB	 116			; 00000074H
  03294	54		 DB	 84			; 00000054H
  03295	6f		 DB	 111			; 0000006fH
  03296	70		 DB	 112			; 00000070H
  03297	4c		 DB	 76			; 0000004cH
  03298	65		 DB	 101			; 00000065H
  03299	66		 DB	 102			; 00000066H
  0329a	74		 DB	 116			; 00000074H
  0329b	00		 DB	 0
$L189002:
  0329c	70		 DB	 112			; 00000070H
  0329d	74		 DB	 116			; 00000074H
  0329e	54		 DB	 84			; 00000054H
  0329f	61		 DB	 97			; 00000061H
  032a0	69		 DB	 105			; 00000069H
  032a1	6c		 DB	 108			; 0000006cH
  032a2	00		 DB	 0
$L189001:
  032a3	73		 DB	 115			; 00000073H
  032a4	69		 DB	 105			; 00000069H
  032a5	7a		 DB	 122			; 0000007aH
  032a6	65		 DB	 101			; 00000065H
  032a7	57		 DB	 87			; 00000057H
  032a8	6e		 DB	 110			; 0000006eH
  032a9	64		 DB	 100			; 00000064H
  032aa	00		 DB	 0
$L189014:
  032ab	00 00 00 00	 DD	 $L187820
  032af	00 00 00 00	 DD	 $L187819
  032b3	00 00 00 00	 DD	 $L187822
  032b7	00 00 00 00	 DD	 $L187821
_TEXT	ENDS
text$x	SEGMENT
$L188996:
  001b6	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _region$[ebp]
  001bc	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
$L188997:
  001c1	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _regionRound$[ebp]
  001c7	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
$L188998:
  001cc	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  001d2	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$?PositionWindow@CBalloonHelp@@IAEXXZ:
  001d7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189000
  001dc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?PositionWindow@CBalloonHelp@@IAEXXZ ENDP		; CBalloonHelp::PositionWindow
EXTRN	__imp__RegisterClassExA@4:NEAR
EXTRN	?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ:NEAR ; AfxGetInstanceHandle
EXTRN	__imp__GetSysColorBrush@4:NEAR
EXTRN	?AfxGetAfxWndProc@@YGP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; AfxGetAfxWndProc
EXTRN	__imp__LoadCursorA@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_wcx$187851 = -52					; size = 48
_bShadowed$ = 8						; size = 4
?GetClassAtom@CBalloonHelp@@KAGH@Z PROC NEAR		; CBalloonHelp::GetClassAtom

; 947  : {

  032c0	55		 push	 ebp
  032c1	8b ec		 mov	 ebp, esp
  032c3	83 ec 38	 sub	 esp, 56			; 00000038H
  032c6	56		 push	 esi
  032c7	57		 push	 edi
  032c8	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  032cb	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  032d0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  032d5	f3 ab		 rep stosd

; 948  :    if ( NULL == s_ClassAtom )

  032d7	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?s_ClassAtom@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtom
  032de	85 c0		 test	 eax, eax
  032e0	0f 85 ba 00 00
	00		 jne	 $L187850

; 949  :    {
; 950  :       WNDCLASSEX wcx; 
; 951  : 
; 952  :       // Fill in the window class structure with parameters 
; 953  :       // that describe the main window. 
; 954  : 
; 955  :       wcx.cbSize = sizeof(wcx);                 // size of structure 

  032e6	c7 45 cc 30 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp], 48 ; 00000030H

; 956  :       wcx.style = CS_DBLCLKS|CS_SAVEBITS
; 957  :          |CS_DROPSHADOW;                        // notify of double clicks, save screen under, show dropshadow

  032ed	c7 45 d0 08 08
	02 00		 mov	 DWORD PTR _wcx$187851[ebp+4], 133128 ; 00020808H

; 958  :       wcx.lpfnWndProc = AfxWndProc;             // points to window procedure 

  032f4	e8 00 00 00 00	 call	 ?AfxGetAfxWndProc@@YGP6GJPAUHWND__@@IIJ@ZXZ ; AfxGetAfxWndProc
  032f9	89 45 d4	 mov	 DWORD PTR _wcx$187851[ebp+8], eax

; 959  :       wcx.cbClsExtra = 0;                       // no extra class memory 

  032fc	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+12], 0

; 960  :       wcx.cbWndExtra = 0;                       // no extra window memory 

  03303	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+16], 0

; 961  :       wcx.hInstance = AfxGetInstanceHandle();   // handle to instance 

  0330a	e8 00 00 00 00	 call	 ?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ ; AfxGetInstanceHandle
  0330f	89 45 e0	 mov	 DWORD PTR _wcx$187851[ebp+20], eax

; 962  :       wcx.hIcon = NULL;                         // no app. icon 

  03312	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+24], 0

; 963  :       wcx.hCursor = LoadCursor(NULL,IDC_ARROW); // predefined arrow 

  03319	8b f4		 mov	 esi, esp
  0331b	68 00 7f 00 00	 push	 32512			; 00007f00H
  03320	6a 00		 push	 0
  03322	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  03328	3b f4		 cmp	 esi, esp
  0332a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0332f	89 45 e8	 mov	 DWORD PTR _wcx$187851[ebp+28], eax

; 964  :       wcx.hbrBackground = ::GetSysColorBrush(COLOR_WINDOW);                 // no background brush 

  03332	8b f4		 mov	 esi, esp
  03334	6a 05		 push	 5
  03336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColorBrush@4
  0333c	3b f4		 cmp	 esi, esp
  0333e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03343	89 45 ec	 mov	 DWORD PTR _wcx$187851[ebp+32], eax

; 965  :       wcx.lpszMenuName =  NULL;                 // no menu resource 

  03346	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+36], 0

; 966  :       wcx.lpszClassName = "BalloonHelpClassDS"; // name of window class 

  0334d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+40], OFFSET FLAT:$SG187855

; 967  :       wcx.hIconSm = NULL;                       // no small class icon

  03354	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+44], 0

; 968  : 
; 969  :       // Register the window class (this may not work if dropshadows are not supported)
; 970  :       s_ClassAtomShadowed = RegisterClassEx(&wcx);

  0335b	8b f4		 mov	 esi, esp
  0335d	8d 4d cc	 lea	 ecx, DWORD PTR _wcx$187851[ebp]
  03360	51		 push	 ecx
  03361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4
  03367	3b f4		 cmp	 esi, esp
  03369	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0336e	66 a3 00 00 00
	00		 mov	 WORD PTR ?s_ClassAtomShadowed@CBalloonHelp@@0GA, ax ; CBalloonHelp::s_ClassAtomShadowed

; 971  : 
; 972  :       // Register shadow-less class
; 973  :       wcx.style &= ~CS_DROPSHADOW;

  03374	8b 55 d0	 mov	 edx, DWORD PTR _wcx$187851[ebp+4]
  03377	81 e2 ff ff fd
	ff		 and	 edx, -131073		; fffdffffH
  0337d	89 55 d0	 mov	 DWORD PTR _wcx$187851[ebp+4], edx

; 974  :       wcx.lpszClassName = "BalloonHelpClass";

  03380	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wcx$187851[ebp+40], OFFSET FLAT:$SG187856

; 975  :       s_ClassAtom = RegisterClassEx(&wcx);

  03387	8b f4		 mov	 esi, esp
  03389	8d 45 cc	 lea	 eax, DWORD PTR _wcx$187851[ebp]
  0338c	50		 push	 eax
  0338d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4
  03393	3b f4		 cmp	 esi, esp
  03395	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0339a	66 a3 00 00 00
	00		 mov	 WORD PTR ?s_ClassAtom@CBalloonHelp@@0GA, ax ; CBalloonHelp::s_ClassAtom
$L187850:

; 976  :    }
; 977  : 
; 978  :    if ( bShadowed && NULL != s_ClassAtomShadowed )

  033a0	83 7d 08 00	 cmp	 DWORD PTR _bShadowed$[ebp], 0
  033a4	74 13		 je	 SHORT $L187857
  033a6	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?s_ClassAtomShadowed@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtomShadowed
  033ad	85 c9		 test	 ecx, ecx
  033af	74 08		 je	 SHORT $L187857

; 979  :       return s_ClassAtomShadowed;

  033b1	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?s_ClassAtomShadowed@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtomShadowed
  033b7	eb 06		 jmp	 SHORT $L187849
$L187857:

; 980  :    return s_ClassAtom;

  033b9	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?s_ClassAtom@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtom
$L187849:

; 981  : }

  033bf	52		 push	 edx
  033c0	8b cd		 mov	 ecx, ebp
  033c2	50		 push	 eax
  033c3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189019
  033c9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  033ce	58		 pop	 eax
  033cf	5a		 pop	 edx
  033d0	5f		 pop	 edi
  033d1	5e		 pop	 esi
  033d2	83 c4 38	 add	 esp, 56			; 00000038H
  033d5	3b ec		 cmp	 ebp, esp
  033d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  033dc	8b e5		 mov	 esp, ebp
  033de	5d		 pop	 ebp
  033df	c3		 ret	 0
$L189019:
  033e0	01 00 00 00	 DD	 1
  033e4	00 00 00 00	 DD	 $L189018
$L189018:
  033e8	cc ff ff ff	 DD	 -52			; ffffffccH
  033ec	30 00 00 00	 DD	 48			; 00000030H
  033f0	00 00 00 00	 DD	 $L189017
$L189017:
  033f4	77		 DB	 119			; 00000077H
  033f5	63		 DB	 99			; 00000063H
  033f6	78		 DB	 120			; 00000078H
  033f7	00		 DB	 0
?GetClassAtom@CBalloonHelp@@KAGH@Z ENDP			; CBalloonHelp::GetClassAtom
_TEXT	ENDS
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowBalloon@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::ShowBalloon
; _this$ = ecx

; 986  : {

  03400	55		 push	 ebp
  03401	8b ec		 mov	 ebp, esp
  03403	51		 push	 ecx
  03404	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0340b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 987  :    ShowWindow(SW_SHOWNOACTIVATE);

  0340e	6a 04		 push	 4
  03410	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03413	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 988  :    if ( !(m_unOptions&unDELAY_CLOSE) )

  03418	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0341b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  03421	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  03427	75 12		 jne	 SHORT $L187861

; 989  :       SetTimeout(m_unTimeout);     // start close timer

  03429	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0342c	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  03432	50		 push	 eax
  03433	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03436	e8 00 00 00 00	 call	 ?SetTimeout@CBalloonHelp@@QAEXI@Z ; CBalloonHelp::SetTimeout
$L187861:

; 990  : }

  0343b	83 c4 04	 add	 esp, 4
  0343e	3b ec		 cmp	 ebp, esp
  03440	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03445	8b e5		 mov	 esp, ebp
  03447	5d		 pop	 ebp
  03448	c3		 ret	 0
?ShowBalloon@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::ShowBalloon
_TEXT	ENDS
PUBLIC	?HideBalloon@CBalloonHelp@@IAEXXZ		; CBalloonHelp::HideBalloon
EXTRN	__imp__ReleaseCapture@0:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HideBalloon@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::HideBalloon
; _this$ = ecx

; 994  : {

  03450	55		 push	 ebp
  03451	8b ec		 mov	 ebp, esp
  03453	51		 push	 ecx
  03454	56		 push	 esi
  03455	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0345c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 995  :    if ( m_unOptions&unDELAY_CLOSE )

  0345f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03462	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  03468	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0346e	74 2b		 je	 SHORT $L187867

; 996  :    {
; 997  :       m_unOptions &= ~(unDELAY_CLOSE|unCLOSE_ON_ANYTHING);  // close only via timer or button

  03470	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03473	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  03479	25 80 fe ff ff	 and	 eax, -384		; fffffe80H
  0347e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03481	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 998  :       SetTimeout(m_unTimeout);     // start close timer

  03487	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0348a	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  03490	50		 push	 eax
  03491	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03494	e8 00 00 00 00	 call	 ?SetTimeout@CBalloonHelp@@QAEXI@Z ; CBalloonHelp::SetTimeout

; 999  :       return;

  03499	eb 37		 jmp	 SHORT $L187866
$L187867:

; 1000 :    }
; 1001 :    ShowWindow( SW_HIDE );

  0349b	6a 00		 push	 0
  0349d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  034a0	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 1002 :    if ( GetCapture() == this ) 

  034a5	e8 00 00 00 00	 call	 ?GetCapture@CWnd@@SGPAV1@XZ ; CWnd::GetCapture
  034aa	3b 45 fc	 cmp	 eax, DWORD PTR _this$[ebp]
  034ad	75 0f		 jne	 SHORT $L187868

; 1003 :       ReleaseCapture();

  034af	8b f4		 mov	 esi, esp
  034b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  034b7	3b f4		 cmp	 esi, esp
  034b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187868:

; 1004 :    DestroyWindow();

  034be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  034c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  034c3	8b f4		 mov	 esi, esp
  034c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  034c8	ff 52 68	 call	 DWORD PTR [edx+104]
  034cb	3b f4		 cmp	 esi, esp
  034cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187866:

; 1005 : }

  034d2	5e		 pop	 esi
  034d3	83 c4 04	 add	 esp, 4
  034d6	3b ec		 cmp	 ebp, esp
  034d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  034dd	8b e5		 mov	 esp, ebp
  034df	5d		 pop	 ebp
  034e0	c3		 ret	 0
?HideBalloon@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::HideBalloon
_TEXT	ENDS
PUBLIC	?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
EXTRN	__imp__GetCurrentThreadId@0:NEAR
EXTRN	__imp__SetWindowsHookExA@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetKeyboardHook@CBalloonHelp@@AAEXXZ PROC NEAR		; CBalloonHelp::SetKeyboardHook
; _this$ = ecx

; 1012 : {

  034f0	55		 push	 ebp
  034f1	8b ec		 mov	 ebp, esp
  034f3	51		 push	 ecx
  034f4	56		 push	 esi
  034f5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  034fc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1013 :    if ( NULL==m_hKeyboardHook )

  034ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03502	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  03506	75 35		 jne	 SHORT $L187871

; 1014 :    {
; 1015 :       m_hKeyboardHook = ::SetWindowsHookEx(WH_KEYBOARD,
; 1016 :          (HOOKPROC)BHKeybHookThunk<CBalloonHelp>::GetThunk(),
; 1017 :          NULL, ::GetCurrentThreadId());

  03508	8b f4		 mov	 esi, esp
  0350a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  03510	3b f4		 cmp	 esi, esp
  03512	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03517	8b f4		 mov	 esi, esp
  03519	50		 push	 eax
  0351a	6a 00		 push	 0
  0351c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0351f	83 c1 54	 add	 ecx, 84			; 00000054H
  03522	e8 00 00 00 00	 call	 ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
  03527	50		 push	 eax
  03528	6a 02		 push	 2
  0352a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowsHookExA@16
  03530	3b f4		 cmp	 esi, esp
  03532	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03537	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0353a	89 41 78	 mov	 DWORD PTR [ecx+120], eax
$L187871:

; 1018 :    }
; 1019 : }

  0353d	5e		 pop	 esi
  0353e	83 c4 04	 add	 esp, 4
  03541	3b ec		 cmp	 ebp, esp
  03543	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03548	8b e5		 mov	 esp, ebp
  0354a	5d		 pop	 ebp
  0354b	c3		 ret	 0
?SetKeyboardHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::SetKeyboardHook
_TEXT	ENDS
PUBLIC	?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ	; CBalloonHelp::RemoveKeyboardHook
EXTRN	__imp__UnhookWindowsHookEx@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ PROC NEAR	; CBalloonHelp::RemoveKeyboardHook
; _this$ = ecx

; 1022 : {

  03550	55		 push	 ebp
  03551	8b ec		 mov	 ebp, esp
  03553	51		 push	 ecx
  03554	56		 push	 esi
  03555	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0355c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1023 :    if ( NULL!=m_hKeyboardHook )

  0355f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03562	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  03566	74 20		 je	 SHORT $L187876

; 1024 :    {
; 1025 :       ::UnhookWindowsHookEx(m_hKeyboardHook);

  03568	8b f4		 mov	 esi, esp
  0356a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0356d	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  03570	52		 push	 edx
  03571	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4
  03577	3b f4		 cmp	 esi, esp
  03579	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1026 :       m_hKeyboardHook=NULL;

  0357e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03581	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0
$L187876:

; 1027 :    }
; 1028 : }

  03588	5e		 pop	 esi
  03589	83 c4 04	 add	 esp, 4
  0358c	3b ec		 cmp	 ebp, esp
  0358e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03593	8b e5		 mov	 esp, ebp
  03595	5d		 pop	 ebp
  03596	c3		 ret	 0
?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::RemoveKeyboardHook
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
?SetMouseHook@CBalloonHelp@@AAEXXZ PROC NEAR		; CBalloonHelp::SetMouseHook
; _this$ = ecx

; 1036 : {

  035a0	55		 push	 ebp
  035a1	8b ec		 mov	 ebp, esp
  035a3	51		 push	 ecx
  035a4	56		 push	 esi
  035a5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  035ac	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1037 :    if ( NULL==m_hMouseHook )

  035af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  035b2	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  035b6	75 35		 jne	 SHORT $L187880

; 1038 :    {
; 1039 :       m_hMouseHook = ::SetWindowsHookEx(WH_MOUSE,
; 1040 :          (HOOKPROC)BHMouseHookThunk<CBalloonHelp>::GetThunk(),
; 1041 :          NULL, ::GetCurrentThreadId());

  035b8	8b f4		 mov	 esi, esp
  035ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  035c0	3b f4		 cmp	 esi, esp
  035c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  035c7	8b f4		 mov	 esi, esp
  035c9	50		 push	 eax
  035ca	6a 00		 push	 0
  035cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  035cf	83 c1 5e	 add	 ecx, 94			; 0000005eH
  035d2	e8 00 00 00 00	 call	 ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
  035d7	50		 push	 eax
  035d8	6a 07		 push	 7
  035da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowsHookExA@16
  035e0	3b f4		 cmp	 esi, esp
  035e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  035e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  035ea	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
$L187880:

; 1042 :    }
; 1043 : }

  035ed	5e		 pop	 esi
  035ee	83 c4 04	 add	 esp, 4
  035f1	3b ec		 cmp	 ebp, esp
  035f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  035f8	8b e5		 mov	 esp, ebp
  035fa	5d		 pop	 ebp
  035fb	c3		 ret	 0
?SetMouseHook@CBalloonHelp@@AAEXXZ ENDP			; CBalloonHelp::SetMouseHook
_TEXT	ENDS
PUBLIC	?RemoveMouseHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::RemoveMouseHook
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveMouseHook@CBalloonHelp@@AAEXXZ PROC NEAR		; CBalloonHelp::RemoveMouseHook
; _this$ = ecx

; 1046 : {

  03600	55		 push	 ebp
  03601	8b ec		 mov	 ebp, esp
  03603	51		 push	 ecx
  03604	56		 push	 esi
  03605	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0360c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1047 :    if ( NULL!=m_hMouseHook )

  0360f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03612	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  03616	74 20		 je	 SHORT $L187885

; 1048 :    {
; 1049 :       ::UnhookWindowsHookEx(m_hMouseHook);

  03618	8b f4		 mov	 esi, esp
  0361a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0361d	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  03620	52		 push	 edx
  03621	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4
  03627	3b f4		 cmp	 esi, esp
  03629	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1050 :       m_hMouseHook=NULL;

  0362e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03631	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0
$L187885:

; 1051 :    }
; 1052 : }

  03638	5e		 pop	 esi
  03639	83 c4 04	 add	 esp, 4
  0363c	3b ec		 cmp	 ebp, esp
  0363e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03643	8b e5		 mov	 esp, ebp
  03645	5d		 pop	 ebp
  03646	c3		 ret	 0
?RemoveMouseHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::RemoveMouseHook
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
?SetCallWndRetHook@CBalloonHelp@@AAEXXZ PROC NEAR	; CBalloonHelp::SetCallWndRetHook
; _this$ = ecx

; 1059 : {

  03650	55		 push	 ebp
  03651	8b ec		 mov	 ebp, esp
  03653	51		 push	 ecx
  03654	56		 push	 esi
  03655	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0365c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1060 :    if ( NULL==m_hCallWndRetHook )

  0365f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03662	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  03669	75 38		 jne	 SHORT $L187889

; 1061 :    {
; 1062 :       m_hCallWndRetHook = ::SetWindowsHookEx(WH_CALLWNDPROCRET,
; 1063 :          (HOOKPROC)BHCallWndRetHookThunk<CBalloonHelp>::GetThunk(),
; 1064 :          NULL, ::GetCurrentThreadId());

  0366b	8b f4		 mov	 esi, esp
  0366d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  03673	3b f4		 cmp	 esi, esp
  03675	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0367a	8b f4		 mov	 esi, esp
  0367c	50		 push	 eax
  0367d	6a 00		 push	 0
  0367f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03682	83 c1 68	 add	 ecx, 104		; 00000068H
  03685	e8 00 00 00 00	 call	 ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
  0368a	50		 push	 eax
  0368b	6a 0c		 push	 12			; 0000000cH
  0368d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowsHookExA@16
  03693	3b f4		 cmp	 esi, esp
  03695	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0369a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0369d	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
$L187889:

; 1065 :    }
; 1066 : }

  036a3	5e		 pop	 esi
  036a4	83 c4 04	 add	 esp, 4
  036a7	3b ec		 cmp	 ebp, esp
  036a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  036ae	8b e5		 mov	 esp, ebp
  036b0	5d		 pop	 ebp
  036b1	c3		 ret	 0
?SetCallWndRetHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::SetCallWndRetHook
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ PROC NEAR	; CBalloonHelp::RemoveCallWndRetHook
; _this$ = ecx

; 1069 : {

  036c0	55		 push	 ebp
  036c1	8b ec		 mov	 ebp, esp
  036c3	51		 push	 ecx
  036c4	56		 push	 esi
  036c5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  036cc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1070 :    if ( NULL!=m_hCallWndRetHook )

  036cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  036d2	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  036d9	74 26		 je	 SHORT $L187894

; 1071 :    {
; 1072 :       ::UnhookWindowsHookEx(m_hCallWndRetHook);

  036db	8b f4		 mov	 esi, esp
  036dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  036e0	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  036e6	52		 push	 edx
  036e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4
  036ed	3b f4		 cmp	 esi, esp
  036ef	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1073 :       m_hCallWndRetHook=NULL;

  036f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  036f7	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
$L187894:

; 1074 :    }
; 1075 : }

  03701	5e		 pop	 esi
  03702	83 c4 04	 add	 esp, 4
  03705	3b ec		 cmp	 ebp, esp
  03707	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0370c	8b e5		 mov	 esp, ebp
  0370e	5d		 pop	 ebp
  0370f	c3		 ret	 0
?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::RemoveCallWndRetHook
_TEXT	ENDS
PUBLIC	?GetThisMessageMap@CBalloonHelp@@KGPBUAFX_MSGMAP@@XZ ; CBalloonHelp::GetThisMessageMap
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?GetThisMessageMap@CBalloonHelp@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CBalloonHelp::GetThisMessageMap

; 1081 : BEGIN_MESSAGE_MAP(CBalloonHelp, CWnd)

  03710	55		 push	 ebp
  03711	8b ec		 mov	 ebp, esp
  03713	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B ; CBalloonHelp::messageMap
  03718	5d		 pop	 ebp
  03719	c3		 ret	 0
?GetThisMessageMap@CBalloonHelp@@KGPBUAFX_MSGMAP@@XZ ENDP ; CBalloonHelp::GetThisMessageMap
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CBalloonHelp::GetMessageMap
; _this$ = ecx

; 1081 : BEGIN_MESSAGE_MAP(CBalloonHelp, CWnd)

  03720	55		 push	 ebp
  03721	8b ec		 mov	 ebp, esp
  03723	51		 push	 ecx
  03724	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0372b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0372e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B ; CBalloonHelp::messageMap
  03733	8b e5		 mov	 esp, ebp
  03735	5d		 pop	 ebp
  03736	c3		 ret	 0
?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CBalloonHelp::GetMessageMap
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_bShow$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnShowWindow@CBalloonHelp@@IAEXHI@Z PROC NEAR		; CBalloonHelp::OnShowWindow
; _this$ = ecx

; 1099 : {

  03740	55		 push	 ebp
  03741	8b ec		 mov	 ebp, esp
  03743	51		 push	 ecx
  03744	56		 push	 esi
  03745	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0374c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1100 :    if ( NULL != m_fnAnimateWindow )

  0374f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03752	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  03756	74 70		 je	 SHORT $L187983

; 1101 :    {
; 1102 :       if ( bShow && !(m_unOptions&unDISABLE_FADEIN) )

  03758	83 7d 08 00	 cmp	 DWORD PTR _bShow$[ebp], 0
  0375c	74 33		 je	 SHORT $L187985
  0375e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03761	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  03767	81 e2 00 40 00
	00		 and	 edx, 16384		; 00004000H
  0376d	75 22		 jne	 SHORT $L187985

; 1103 :          m_fnAnimateWindow( m_hWnd, 200, AW_BLEND);

  0376f	8b f4		 mov	 esi, esp
  03771	68 00 00 08 00	 push	 524288			; 00080000H
  03776	68 c8 00 00 00	 push	 200			; 000000c8H
  0377b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0377e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  03781	51		 push	 ecx
  03782	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03785	ff 52 74	 call	 DWORD PTR [edx+116]
  03788	3b f4		 cmp	 esi, esp
  0378a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1104 :       else if ( !bShow && !(m_unOptions&unDISABLE_FADEOUT) )

  0378f	eb 37		 jmp	 SHORT $L187983
$L187985:
  03791	83 7d 08 00	 cmp	 DWORD PTR _bShow$[ebp], 0
  03795	75 31		 jne	 SHORT $L187983
  03797	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0379a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  037a0	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  037a6	75 20		 jne	 SHORT $L187983

; 1105 :          m_fnAnimateWindow( m_hWnd, 200, AW_HIDE | AW_BLEND );

  037a8	8b f4		 mov	 esi, esp
  037aa	68 00 00 09 00	 push	 589824			; 00090000H
  037af	68 c8 00 00 00	 push	 200			; 000000c8H
  037b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  037b7	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  037ba	50		 push	 eax
  037bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  037be	ff 51 74	 call	 DWORD PTR [ecx+116]
  037c1	3b f4		 cmp	 esi, esp
  037c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187983:

; 1106 :    }
; 1107 : }

  037c8	5e		 pop	 esi
  037c9	83 c4 04	 add	 esp, 4
  037cc	3b ec		 cmp	 ebp, esp
  037ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  037d3	8b e5		 mov	 esp, ebp
  037d5	5d		 pop	 ebp
  037d6	c2 08 00	 ret	 8
?OnShowWindow@CBalloonHelp@@IAEXHI@Z ENDP		; CBalloonHelp::OnShowWindow
; Function compile flags: /Odt /RTCsu
_rect$ = -24						; size = 16
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z PROC NEAR	; CBalloonHelp::OnEraseBkgnd
; _this$ = ecx

; 1111 : {

  037e0	55		 push	 ebp
  037e1	8b ec		 mov	 ebp, esp
  037e3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  037e6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  037eb	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  037ee	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  037f1	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  037f4	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  037f7	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  037fa	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  037fd	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  03800	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1112 :    CRect rect;

  03803	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  03806	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1113 :    GetClientRect(&rect);

  0380b	8d 45 e8	 lea	 eax, DWORD PTR _rect$[ebp]
  0380e	50		 push	 eax
  0380f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03812	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1114 :    pDC->FillSolidRect(&rect, m_crBackground);

  03817	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0381a	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  03820	52		 push	 edx
  03821	8d 45 e8	 lea	 eax, DWORD PTR _rect$[ebp]
  03824	50		 push	 eax
  03825	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03828	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 1115 :    return TRUE;

  0382d	b8 01 00 00 00	 mov	 eax, 1

; 1116 : }

  03832	52		 push	 edx
  03833	8b cd		 mov	 ecx, ebp
  03835	50		 push	 eax
  03836	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189034
  0383c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03841	58		 pop	 eax
  03842	5a		 pop	 edx
  03843	83 c4 1c	 add	 esp, 28			; 0000001cH
  03846	3b ec		 cmp	 ebp, esp
  03848	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0384d	8b e5		 mov	 esp, ebp
  0384f	5d		 pop	 ebp
  03850	c2 04 00	 ret	 4
$L189034:
  03853	01 00 00 00	 DD	 1
  03857	00 00 00 00	 DD	 $L189033
$L189033:
  0385b	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0385f	10 00 00 00	 DD	 16			; 00000010H
  03863	00 00 00 00	 DD	 $L189032
$L189032:
  03867	72		 DB	 114			; 00000072H
  03868	65		 DB	 101			; 00000065H
  03869	63		 DB	 99			; 00000063H
  0386a	74		 DB	 116			; 00000074H
  0386b	00		 DB	 0
?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z ENDP		; CBalloonHelp::OnEraseBkgnd
_TEXT	ENDS
EXTRN	??0CPaintDC@@QAE@PAVCWnd@@@Z:NEAR		; CPaintDC::CPaintDC
EXTRN	??1CPaintDC@@UAE@XZ:NEAR			; CPaintDC::~CPaintDC
xdata$x	SEGMENT
$T189045 DD	0ffffffffH
	DD	FLAT:$L189037
$T189039 DD	019930520H
	DD	01H
	DD	FLAT:$T189045
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_dc$ = -108						; size = 84
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
?OnPaint@CBalloonHelp@@IAEXXZ PROC NEAR			; CBalloonHelp::OnPaint
; _this$ = ecx

; 1120 : {

  03870	55		 push	 ebp
  03871	8b ec		 mov	 ebp, esp
  03873	6a ff		 push	 -1
  03875	68 00 00 00 00	 push	 __ehhandler$?OnPaint@CBalloonHelp@@IAEXXZ
  0387a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03880	50		 push	 eax
  03881	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03888	83 ec 64	 sub	 esp, 100		; 00000064H
  0388b	56		 push	 esi
  0388c	57		 push	 edi
  0388d	51		 push	 ecx
  0388e	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  03891	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  03896	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0389b	f3 ab		 rep stosd
  0389d	59		 pop	 ecx
  0389e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  038a3	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  038a6	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1121 :    CPaintDC dc(this); // device context for painting

  038a9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  038ac	50		 push	 eax
  038ad	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  038b0	e8 00 00 00 00	 call	 ??0CPaintDC@@QAE@PAVCWnd@@@Z ; CPaintDC::CPaintDC
  038b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1122 :    DrawClientArea(&dc);

  038bc	8b f4		 mov	 esi, esp
  038be	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  038c1	51		 push	 ecx
  038c2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  038c5	8b 02		 mov	 eax, DWORD PTR [edx]
  038c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  038ca	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  038d0	3b f4		 cmp	 esi, esp
  038d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1123 : }

  038d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  038de	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  038e1	e8 00 00 00 00	 call	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
  038e6	52		 push	 edx
  038e7	8b cd		 mov	 ecx, ebp
  038e9	50		 push	 eax
  038ea	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189044
  038f0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  038f5	58		 pop	 eax
  038f6	5a		 pop	 edx
  038f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  038fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03901	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03904	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03909	5f		 pop	 edi
  0390a	5e		 pop	 esi
  0390b	83 c4 70	 add	 esp, 112		; 00000070H
  0390e	3b ec		 cmp	 ebp, esp
  03910	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03915	8b e5		 mov	 esp, ebp
  03917	5d		 pop	 ebp
  03918	c3		 ret	 0
$L189044:
  03919	01 00 00 00	 DD	 1
  0391d	00 00 00 00	 DD	 $L189043
$L189043:
  03921	94 ff ff ff	 DD	 -108			; ffffff94H
  03925	54 00 00 00	 DD	 84			; 00000054H
  03929	00 00 00 00	 DD	 $L189040
$L189040:
  0392d	64		 DB	 100			; 00000064H
  0392e	63		 DB	 99			; 00000063H
  0392f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L189037:
  001e1	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  001e4	e9 00 00 00 00	 jmp	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
__ehhandler$?OnPaint@CBalloonHelp@@IAEXXZ:
  001e9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189039
  001ee	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnPaint@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnPaint
xdata$x	SEGMENT
$T189054 DD	0ffffffffH
	DD	FLAT:$L189047
$T189049 DD	019930520H
	DD	01H
	DD	FLAT:$T189054
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_dc$ = -40						; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnNcPaint@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::OnNcPaint
; _this$ = ecx

; 1127 : {

  03930	55		 push	 ebp
  03931	8b ec		 mov	 ebp, esp
  03933	6a ff		 push	 -1
  03935	68 00 00 00 00	 push	 __ehhandler$?OnNcPaint@CBalloonHelp@@IAEXXZ
  0393a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03940	50		 push	 eax
  03941	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03948	83 ec 20	 sub	 esp, 32			; 00000020H
  0394b	56		 push	 esi
  0394c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03951	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  03954	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  03957	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0395a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0395d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  03960	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  03963	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  03966	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  03969	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1128 :    CWindowDC dc(this);

  0396c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0396f	50		 push	 eax
  03970	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  03973	e8 00 00 00 00	 call	 ??0CWindowDC@@QAE@PAVCWnd@@@Z ; CWindowDC::CWindowDC
  03978	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1129 :    DrawNonClientArea(&dc);

  0397f	8b f4		 mov	 esi, esp
  03981	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  03984	51		 push	 ecx
  03985	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  03988	8b 02		 mov	 eax, DWORD PTR [edx]
  0398a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0398d	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]
  03993	3b f4		 cmp	 esi, esp
  03995	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1130 : }

  0399a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  039a1	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  039a4	e8 00 00 00 00	 call	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
  039a9	52		 push	 edx
  039aa	8b cd		 mov	 ecx, ebp
  039ac	50		 push	 eax
  039ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189053
  039b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  039b8	58		 pop	 eax
  039b9	5a		 pop	 edx
  039ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  039bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  039c4	5e		 pop	 esi
  039c5	83 c4 2c	 add	 esp, 44			; 0000002cH
  039c8	3b ec		 cmp	 ebp, esp
  039ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  039cf	8b e5		 mov	 esp, ebp
  039d1	5d		 pop	 ebp
  039d2	c3		 ret	 0
$L189053:
  039d3	01 00 00 00	 DD	 1
  039d7	00 00 00 00	 DD	 $L189052
$L189052:
  039db	d8 ff ff ff	 DD	 -40			; ffffffd8H
  039df	14 00 00 00	 DD	 20			; 00000014H
  039e3	00 00 00 00	 DD	 $L189050
$L189050:
  039e7	64		 DB	 100			; 00000064H
  039e8	63		 DB	 99			; 00000063H
  039e9	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L189047:
  001f3	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  001f6	e9 00 00 00 00	 jmp	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
__ehhandler$?OnNcPaint@CBalloonHelp@@IAEXXZ:
  001fb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189049
  00200	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnNcPaint@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnNcPaint
EXTRN	?Default@CWnd@@IAEJXZ:NEAR			; CWnd::Default
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pDC$ = -8						; size = 4
_this$ = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnPrint@CBalloonHelp@@IAEJIJ@Z PROC NEAR		; CBalloonHelp::OnPrint
; _this$ = ecx

; 1134 : {

  039f0	55		 push	 ebp
  039f1	8b ec		 mov	 ebp, esp
  039f3	83 ec 08	 sub	 esp, 8
  039f6	56		 push	 esi
  039f7	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  039fe	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  03a05	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1135 :    CDC* pDC = CDC::FromHandle((HDC)wParam);

  03a08	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  03a0b	50		 push	 eax
  03a0c	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  03a11	89 45 f8	 mov	 DWORD PTR _pDC$[ebp], eax

; 1136 :    if ( lParam & PRF_NONCLIENT  ) 

  03a14	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam$[ebp]
  03a17	83 e1 02	 and	 ecx, 2
  03a1a	74 1b		 je	 SHORT $L188008

; 1137 :       DrawNonClientArea(pDC);

  03a1c	8b f4		 mov	 esi, esp
  03a1e	8b 55 f8	 mov	 edx, DWORD PTR _pDC$[ebp]
  03a21	52		 push	 edx
  03a22	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03a25	8b 10		 mov	 edx, DWORD PTR [eax]
  03a27	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a2a	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]
  03a30	3b f4		 cmp	 esi, esp
  03a32	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188008:

; 1138 :    return Default();

  03a37	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a3a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default

; 1139 : }

  03a3f	5e		 pop	 esi
  03a40	83 c4 08	 add	 esp, 8
  03a43	3b ec		 cmp	 ebp, esp
  03a45	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03a4a	8b e5		 mov	 esp, ebp
  03a4c	5d		 pop	 ebp
  03a4d	c2 08 00	 ret	 8
?OnPrint@CBalloonHelp@@IAEJIJ@Z ENDP			; CBalloonHelp::OnPrint
_TEXT	ENDS
EXTRN	?SendMessageA@CWnd@@QAEJIIJ@Z:NEAR		; CWnd::SendMessageA
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pDC$ = -8						; size = 4
_this$ = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnPrintClient@CBalloonHelp@@IAEJIJ@Z PROC NEAR		; CBalloonHelp::OnPrintClient
; _this$ = ecx

; 1143 : {

  03a50	55		 push	 ebp
  03a51	8b ec		 mov	 ebp, esp
  03a53	83 ec 08	 sub	 esp, 8
  03a56	56		 push	 esi
  03a57	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  03a5e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  03a65	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1144 :    CDC* pDC = CDC::FromHandle((HDC)wParam);

  03a68	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  03a6b	50		 push	 eax
  03a6c	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  03a71	89 45 f8	 mov	 DWORD PTR _pDC$[ebp], eax

; 1145 :    if ( lParam & PRF_ERASEBKGND ) 

  03a74	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam$[ebp]
  03a77	83 e1 08	 and	 ecx, 8
  03a7a	74 10		 je	 SHORT $L188016

; 1146 :       SendMessage( WM_ERASEBKGND, wParam );

  03a7c	6a 00		 push	 0
  03a7e	8b 55 08	 mov	 edx, DWORD PTR _wParam$[ebp]
  03a81	52		 push	 edx
  03a82	6a 14		 push	 20			; 00000014H
  03a84	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03a87	e8 00 00 00 00	 call	 ?SendMessageA@CWnd@@QAEJIIJ@Z ; CWnd::SendMessageA
$L188016:

; 1147 :    if ( lParam & PRF_CLIENT ) 

  03a8c	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  03a8f	83 e0 04	 and	 eax, 4
  03a92	74 1b		 je	 SHORT $L188017

; 1148 :       DrawClientArea(pDC);

  03a94	8b f4		 mov	 esi, esp
  03a96	8b 4d f8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03a99	51		 push	 ecx
  03a9a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03a9d	8b 02		 mov	 eax, DWORD PTR [edx]
  03a9f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03aa2	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  03aa8	3b f4		 cmp	 esi, esp
  03aaa	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188017:

; 1149 :    return 0;

  03aaf	33 c0		 xor	 eax, eax

; 1150 : }

  03ab1	5e		 pop	 esi
  03ab2	83 c4 08	 add	 esp, 8
  03ab5	3b ec		 cmp	 ebp, esp
  03ab7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03abc	8b e5		 mov	 esp, ebp
  03abe	5d		 pop	 ebp
  03abf	c2 08 00	 ret	 8
?OnPrintClient@CBalloonHelp@@IAEJIJ@Z ENDP		; CBalloonHelp::OnPrintClient
_TEXT	ENDS
EXTRN	?PtInRect@CRect@@QBEHUtagPOINT@@@Z:NEAR		; CRect::PtInRect
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T189058 = -36						; size = 8
_rect$188024 = -24					; size = 16
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnLButtonDown
; _this$ = ecx

; 1154 : {

  03ad0	55		 push	 ebp
  03ad1	8b ec		 mov	 ebp, esp
  03ad3	83 ec 24	 sub	 esp, 36			; 00000024H
  03ad6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03adb	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  03ade	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  03ae1	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  03ae4	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  03ae7	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  03aea	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  03aed	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  03af0	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  03af3	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  03af6	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1155 :    if (m_unOptions & unSHOW_CLOSE_BUTTON)

  03af9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03afc	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  03b02	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  03b08	74 78		 je	 SHORT $L188022

; 1156 :    {
; 1157 :       CRect rect;

  03b0a	8d 4d e8	 lea	 ecx, DWORD PTR _rect$188024[ebp]
  03b0d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1158 :       GetClientRect(&rect);

  03b12	8d 55 e8	 lea	 edx, DWORD PTR _rect$188024[ebp]
  03b15	52		 push	 edx
  03b16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b19	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1159 :       rect.left = rect.right - nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  03b1e	8b 45 f0	 mov	 eax, DWORD PTR _rect$188024[ebp+8]
  03b21	83 e8 0e	 sub	 eax, 14			; 0000000eH
  03b24	89 45 e8	 mov	 DWORD PTR _rect$188024[ebp], eax

; 1160 :       rect.bottom = rect.top + nCYCloseBtn;//::GetSystemMetrics(SM_CYSIZE);

  03b27	8b 4d ec	 mov	 ecx, DWORD PTR _rect$188024[ebp+4]
  03b2a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  03b2d	89 4d f4	 mov	 DWORD PTR _rect$188024[ebp+12], ecx

; 1161 :       if ( rect.PtInRect(point) )

  03b30	8b 55 0c	 mov	 edx, DWORD PTR _point$[ebp]
  03b33	89 55 dc	 mov	 DWORD PTR $T189058[ebp], edx
  03b36	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  03b39	89 45 e0	 mov	 DWORD PTR $T189058[ebp+4], eax
  03b3c	8b 4d e0	 mov	 ecx, DWORD PTR $T189058[ebp+4]
  03b3f	51		 push	 ecx
  03b40	8b 55 dc	 mov	 edx, DWORD PTR $T189058[ebp]
  03b43	52		 push	 edx
  03b44	8d 4d e8	 lea	 ecx, DWORD PTR _rect$188024[ebp]
  03b47	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  03b4c	85 c0		 test	 eax, eax
  03b4e	74 32		 je	 SHORT $L188022

; 1162 :       {
; 1163 :          m_uCloseState |= DFCS_PUSHED;

  03b50	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03b53	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  03b59	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  03b5f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03b62	89 8a dc 00 00
	00		 mov	 DWORD PTR [edx+220], ecx

; 1164 :          SetCapture();

  03b68	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b6b	e8 00 00 00 00	 call	 ?SetCapture@CWnd@@QAEPAV1@XZ ; CWnd::SetCapture

; 1165 :          OnMouseMove(0, point);

  03b70	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  03b73	50		 push	 eax
  03b74	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  03b77	51		 push	 ecx
  03b78	6a 00		 push	 0
  03b7a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03b7d	e8 00 00 00 00	 call	 ?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z ; CBalloonHelp::OnMouseMove
$L188022:

; 1166 :       }
; 1167 :    }
; 1168 : }

  03b82	52		 push	 edx
  03b83	8b cd		 mov	 ecx, ebp
  03b85	50		 push	 eax
  03b86	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189061
  03b8c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03b91	58		 pop	 eax
  03b92	5a		 pop	 edx
  03b93	83 c4 24	 add	 esp, 36			; 00000024H
  03b96	3b ec		 cmp	 ebp, esp
  03b98	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03b9d	8b e5		 mov	 esp, ebp
  03b9f	5d		 pop	 ebp
  03ba0	c2 0c 00	 ret	 12			; 0000000cH
$L189061:
  03ba3	01 00 00 00	 DD	 1
  03ba7	00 00 00 00	 DD	 $L189060
$L189060:
  03bab	e8 ff ff ff	 DD	 -24			; ffffffe8H
  03baf	10 00 00 00	 DD	 16			; 00000010H
  03bb3	00 00 00 00	 DD	 $L189059
$L189059:
  03bb7	72		 DB	 114			; 00000072H
  03bb8	65		 DB	 101			; 00000065H
  03bb9	63		 DB	 99			; 00000063H
  03bba	74		 DB	 116			; 00000074H
  03bbb	00		 DB	 0
?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z ENDP	; CBalloonHelp::OnLButtonDown
_TEXT	ENDS
EXTRN	__imp__ShellExecuteA@24:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T189064 = -68						; size = 8
$T189063 = -60						; size = 8
_rect$188038 = -48					; size = 16
_rect$188033 = -24					; size = 16
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnLButtonUp
; _this$ = ecx

; 1173 : {

  03bc0	55		 push	 ebp
  03bc1	8b ec		 mov	 ebp, esp
  03bc3	83 ec 44	 sub	 esp, 68			; 00000044H
  03bc6	56		 push	 esi
  03bc7	57		 push	 edi
  03bc8	51		 push	 ecx
  03bc9	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  03bcc	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  03bd1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03bd6	f3 ab		 rep stosd
  03bd8	59		 pop	 ecx
  03bd9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1174 :    if ( (m_unOptions & unSHOW_CLOSE_BUTTON) && (m_uCloseState & DFCS_PUSHED) )

  03bdc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03bdf	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  03be5	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  03beb	0f 84 8a 00 00
	00		 je	 $L188032
  03bf1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03bf4	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  03bfa	25 00 02 00 00	 and	 eax, 512		; 00000200H
  03bff	74 7a		 je	 SHORT $L188032

; 1175 :    {
; 1176 :       ReleaseCapture();

  03c01	8b f4		 mov	 esi, esp
  03c03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  03c09	3b f4		 cmp	 esi, esp
  03c0b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1177 :       m_uCloseState &= ~DFCS_PUSHED;

  03c10	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c13	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  03c19	81 e2 ff fd ff
	ff		 and	 edx, -513		; fffffdffH
  03c1f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03c22	89 90 dc 00 00
	00		 mov	 DWORD PTR [eax+220], edx

; 1178 :       CRect rect;

  03c28	8d 4d e8	 lea	 ecx, DWORD PTR _rect$188033[ebp]
  03c2b	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1179 :       GetClientRect(&rect);

  03c30	8d 4d e8	 lea	 ecx, DWORD PTR _rect$188033[ebp]
  03c33	51		 push	 ecx
  03c34	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c37	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1180 :       rect.left = rect.right - nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  03c3c	8b 55 f0	 mov	 edx, DWORD PTR _rect$188033[ebp+8]
  03c3f	83 ea 0e	 sub	 edx, 14			; 0000000eH
  03c42	89 55 e8	 mov	 DWORD PTR _rect$188033[ebp], edx

; 1181 :       rect.bottom = rect.top + nCYCloseBtn;//::GetSystemMetrics(SM_CYSIZE);

  03c45	8b 45 ec	 mov	 eax, DWORD PTR _rect$188033[ebp+4]
  03c48	83 c0 0e	 add	 eax, 14			; 0000000eH
  03c4b	89 45 f4	 mov	 DWORD PTR _rect$188033[ebp+12], eax

; 1182 :       if ( rect.PtInRect(point) )

  03c4e	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  03c51	89 4d c4	 mov	 DWORD PTR $T189063[ebp], ecx
  03c54	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  03c57	89 55 c8	 mov	 DWORD PTR $T189063[ebp+4], edx
  03c5a	8b 45 c8	 mov	 eax, DWORD PTR $T189063[ebp+4]
  03c5d	50		 push	 eax
  03c5e	8b 4d c4	 mov	 ecx, DWORD PTR $T189063[ebp]
  03c61	51		 push	 ecx
  03c62	8d 4d e8	 lea	 ecx, DWORD PTR _rect$188033[ebp]
  03c65	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  03c6a	85 c0		 test	 eax, eax
  03c6c	74 08		 je	 SHORT $L188035

; 1183 :          HideBalloon();

  03c6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c71	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon
$L188035:

; 1184 :    }
; 1185 :    else if ( !m_strURL.IsEmpty() )

  03c76	e9 8d 00 00 00	 jmp	 $L188031
$L188032:
  03c7b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c7e	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  03c84	8b f4		 mov	 esi, esp
  03c86	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  03c8c	3b f4		 cmp	 esi, esp
  03c8e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03c93	0f b6 d0	 movzx	 edx, al
  03c96	85 d2		 test	 edx, edx
  03c98	75 6e		 jne	 SHORT $L188031

; 1186 :    {
; 1187 :       CRect rect;

  03c9a	8d 4d d0	 lea	 ecx, DWORD PTR _rect$188038[ebp]
  03c9d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1188 :       GetClientRect(&rect);

  03ca2	8d 45 d0	 lea	 eax, DWORD PTR _rect$188038[ebp]
  03ca5	50		 push	 eax
  03ca6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03ca9	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1189 :       if ( rect.PtInRect(point) )

  03cae	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  03cb1	89 4d bc	 mov	 DWORD PTR $T189064[ebp], ecx
  03cb4	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  03cb7	89 55 c0	 mov	 DWORD PTR $T189064[ebp+4], edx
  03cba	8b 45 c0	 mov	 eax, DWORD PTR $T189064[ebp+4]
  03cbd	50		 push	 eax
  03cbe	8b 4d bc	 mov	 ecx, DWORD PTR $T189064[ebp]
  03cc1	51		 push	 ecx
  03cc2	8d 4d d0	 lea	 ecx, DWORD PTR _rect$188038[ebp]
  03cc5	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  03cca	85 c0		 test	 eax, eax
  03ccc	74 3a		 je	 SHORT $L188031

; 1190 :       {
; 1191 :          ::ShellExecute(NULL, NULL, m_strURL, NULL, NULL, SW_SHOWNORMAL);

  03cce	8b f4		 mov	 esi, esp
  03cd0	6a 01		 push	 1
  03cd2	6a 00		 push	 0
  03cd4	6a 00		 push	 0
  03cd6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cd9	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  03cdf	8b fc		 mov	 edi, esp
  03ce1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  03ce7	3b fc		 cmp	 edi, esp
  03ce9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03cee	50		 push	 eax
  03cef	6a 00		 push	 0
  03cf1	6a 00		 push	 0
  03cf3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  03cf9	3b f4		 cmp	 esi, esp
  03cfb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1192 :          HideBalloon();

  03d00	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d03	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon
$L188031:

; 1193 :       }
; 1194 :    }
; 1195 : }

  03d08	52		 push	 edx
  03d09	8b cd		 mov	 ecx, ebp
  03d0b	50		 push	 eax
  03d0c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189068
  03d12	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03d17	58		 pop	 eax
  03d18	5a		 pop	 edx
  03d19	5f		 pop	 edi
  03d1a	5e		 pop	 esi
  03d1b	83 c4 44	 add	 esp, 68			; 00000044H
  03d1e	3b ec		 cmp	 ebp, esp
  03d20	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03d25	8b e5		 mov	 esp, ebp
  03d27	5d		 pop	 ebp
  03d28	c2 0c 00	 ret	 12			; 0000000cH
$L189068:
  03d2b	02 00 00 00	 DD	 2
  03d2f	00 00 00 00	 DD	 $L189067
$L189067:
  03d33	e8 ff ff ff	 DD	 -24			; ffffffe8H
  03d37	10 00 00 00	 DD	 16			; 00000010H
  03d3b	00 00 00 00	 DD	 $L189065
  03d3f	d0 ff ff ff	 DD	 -48			; ffffffd0H
  03d43	10 00 00 00	 DD	 16			; 00000010H
  03d47	00 00 00 00	 DD	 $L189066
$L189066:
  03d4b	72		 DB	 114			; 00000072H
  03d4c	65		 DB	 101			; 00000065H
  03d4d	63		 DB	 99			; 00000063H
  03d4e	74		 DB	 116			; 00000074H
  03d4f	00		 DB	 0
$L189065:
  03d50	72		 DB	 114			; 00000072H
  03d51	65		 DB	 101			; 00000065H
  03d52	63		 DB	 99			; 00000063H
  03d53	74		 DB	 116			; 00000074H
  03d54	00		 DB	 0
?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z ENDP	; CBalloonHelp::OnLButtonUp
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnNcHitTest
; _this$ = ecx

; 1201 : {

  03d60	55		 push	 ebp
  03d61	8b ec		 mov	 ebp, esp
  03d63	51		 push	 ecx
  03d64	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  03d6b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1202 :    return HTCLIENT;

  03d6e	b8 01 00 00 00	 mov	 eax, 1

; 1203 : }

  03d73	8b e5		 mov	 esp, ebp
  03d75	5d		 pop	 ebp
  03d76	c2 08 00	 ret	 8
?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z ENDP		; CBalloonHelp::OnNcHitTest
_TEXT	ENDS
EXTRN	??0CClientDC@@QAE@PAVCWnd@@@Z:NEAR		; CClientDC::CClientDC
EXTRN	??1CClientDC@@UAE@XZ:NEAR			; CClientDC::~CClientDC
xdata$x	SEGMENT
$T189080 DD	0ffffffffH
	DD	FLAT:$L189072
$T189074 DD	019930520H
	DD	01H
	DD	FLAT:$T189080
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T189071 = -84						; size = 8
_bPushed$188054 = -76					; size = 4
_uState$188053 = -72					; size = 4
_dc$188052 = -64					; size = 20
_rect$188051 = -36					; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnMouseMove
; _this$ = ecx

; 1210 : {

  03d80	55		 push	 ebp
  03d81	8b ec		 mov	 ebp, esp
  03d83	6a ff		 push	 -1
  03d85	68 00 00 00 00	 push	 __ehhandler$?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z
  03d8a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03d90	50		 push	 eax
  03d91	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03d98	83 ec 48	 sub	 esp, 72			; 00000048H
  03d9b	57		 push	 edi
  03d9c	51		 push	 ecx
  03d9d	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  03da0	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  03da5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03daa	f3 ab		 rep stosd
  03dac	59		 pop	 ecx
  03dad	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1211 :    if (m_unOptions & unSHOW_CLOSE_BUTTON)

  03db0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  03db3	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  03db9	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  03dbf	0f 84 0d 01 00
	00		 je	 $L188049

; 1212 :    {
; 1213 :       CRect rect;

  03dc5	8d 4d dc	 lea	 ecx, DWORD PTR _rect$188051[ebp]
  03dc8	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1214 :       GetClientRect(&rect);

  03dcd	8d 55 dc	 lea	 edx, DWORD PTR _rect$188051[ebp]
  03dd0	52		 push	 edx
  03dd1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03dd4	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1215 :       rect.left = rect.right - nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  03dd9	8b 45 e4	 mov	 eax, DWORD PTR _rect$188051[ebp+8]
  03ddc	83 e8 0e	 sub	 eax, 14			; 0000000eH
  03ddf	89 45 dc	 mov	 DWORD PTR _rect$188051[ebp], eax

; 1216 :       rect.bottom = rect.top + nCYCloseBtn;//::GetSystemMetrics(SM_CYSIZE);

  03de2	8b 4d e0	 mov	 ecx, DWORD PTR _rect$188051[ebp+4]
  03de5	83 c1 0e	 add	 ecx, 14			; 0000000eH
  03de8	89 4d e8	 mov	 DWORD PTR _rect$188051[ebp+12], ecx

; 1217 :       CClientDC dc(this);

  03deb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  03dee	52		 push	 edx
  03def	8d 4d c0	 lea	 ecx, DWORD PTR _dc$188052[ebp]
  03df2	e8 00 00 00 00	 call	 ??0CClientDC@@QAE@PAVCWnd@@@Z ; CClientDC::CClientDC
  03df7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1218 :       UINT uState = DFCS_CAPTIONCLOSE;

  03dfe	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _uState$188053[ebp], 0

; 1219 :       BOOL bPushed = m_uCloseState&DFCS_PUSHED;

  03e05	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  03e08	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  03e0e	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  03e14	89 4d b4	 mov	 DWORD PTR _bPushed$188054[ebp], ecx

; 1220 :       m_uCloseState &= ~DFCS_PUSHED;

  03e17	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  03e1a	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  03e20	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  03e25	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03e28	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax

; 1221 :       if ( rect.PtInRect(point) )

  03e2e	8b 55 0c	 mov	 edx, DWORD PTR _point$[ebp]
  03e31	89 55 ac	 mov	 DWORD PTR $T189071[ebp], edx
  03e34	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  03e37	89 45 b0	 mov	 DWORD PTR $T189071[ebp+4], eax
  03e3a	8b 4d b0	 mov	 ecx, DWORD PTR $T189071[ebp+4]
  03e3d	51		 push	 ecx
  03e3e	8b 55 ac	 mov	 edx, DWORD PTR $T189071[ebp]
  03e41	52		 push	 edx
  03e42	8d 4d dc	 lea	 ecx, DWORD PTR _rect$188051[ebp]
  03e45	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  03e4a	85 c0		 test	 eax, eax
  03e4c	74 1f		 je	 SHORT $L188056

; 1222 :       {
; 1223 :          uState |= DFCS_HOT;

  03e4e	8b 45 b8	 mov	 eax, DWORD PTR _uState$188053[ebp]
  03e51	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  03e56	89 45 b8	 mov	 DWORD PTR _uState$188053[ebp], eax

; 1224 :          if ( bPushed )

  03e59	83 7d b4 00	 cmp	 DWORD PTR _bPushed$188054[ebp], 0
  03e5d	74 0c		 je	 SHORT $L188057

; 1225 :             uState |= DFCS_PUSHED;

  03e5f	8b 4d b8	 mov	 ecx, DWORD PTR _uState$188053[ebp]
  03e62	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  03e68	89 4d b8	 mov	 DWORD PTR _uState$188053[ebp], ecx
$L188057:

; 1226 :       }
; 1227 :       else

  03e6b	eb 0c		 jmp	 SHORT $L188058
$L188056:

; 1228 :       {
; 1229 :          uState |= DFCS_FLAT;

  03e6d	8b 55 b8	 mov	 edx, DWORD PTR _uState$188053[ebp]
  03e70	81 ca 00 40 00
	00		 or	 edx, 16384		; 00004000H
  03e76	89 55 b8	 mov	 DWORD PTR _uState$188053[ebp], edx
$L188058:

; 1230 :       }
; 1231 :       if ( uState != m_uCloseState )

  03e79	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  03e7c	8b 4d b8	 mov	 ecx, DWORD PTR _uState$188053[ebp]
  03e7f	3b 88 dc 00 00
	00		 cmp	 ecx, DWORD PTR [eax+220]
  03e85	74 1e		 je	 SHORT $L188059

; 1232 :       {
; 1233 :          dc.DrawFrameControl(&rect, DFC_CAPTION, uState);

  03e87	8b 55 b8	 mov	 edx, DWORD PTR _uState$188053[ebp]
  03e8a	52		 push	 edx
  03e8b	6a 01		 push	 1
  03e8d	8d 45 dc	 lea	 eax, DWORD PTR _rect$188051[ebp]
  03e90	50		 push	 eax
  03e91	8d 4d c0	 lea	 ecx, DWORD PTR _dc$188052[ebp]
  03e94	e8 00 00 00 00	 call	 ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawFrameControl

; 1234 :          m_uCloseState = uState;

  03e99	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03e9c	8b 55 b8	 mov	 edx, DWORD PTR _uState$188053[ebp]
  03e9f	89 91 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], edx
$L188059:

; 1235 :       }
; 1236 :       if ( bPushed )

  03ea5	83 7d b4 00	 cmp	 DWORD PTR _bPushed$188054[ebp], 0
  03ea9	74 18		 je	 SHORT $L188060

; 1237 :          m_uCloseState |= DFCS_PUSHED;

  03eab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  03eae	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  03eb4	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  03eba	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  03ebd	89 8a dc 00 00
	00		 mov	 DWORD PTR [edx+220], ecx
$L188060:

; 1238 :    }

  03ec3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03eca	8d 4d c0	 lea	 ecx, DWORD PTR _dc$188052[ebp]
  03ecd	e8 00 00 00 00	 call	 ??1CClientDC@@UAE@XZ	; CClientDC::~CClientDC
$L188049:

; 1239 : }

  03ed2	52		 push	 edx
  03ed3	8b cd		 mov	 ecx, ebp
  03ed5	50		 push	 eax
  03ed6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189079
  03edc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03ee1	58		 pop	 eax
  03ee2	5a		 pop	 edx
  03ee3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03ee6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03eed	5f		 pop	 edi
  03eee	83 c4 54	 add	 esp, 84			; 00000054H
  03ef1	3b ec		 cmp	 ebp, esp
  03ef3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03ef8	8b e5		 mov	 esp, ebp
  03efa	5d		 pop	 ebp
  03efb	c2 0c 00	 ret	 12			; 0000000cH
$L189079:
  03efe	02 00 00 00	 DD	 2
  03f02	00 00 00 00	 DD	 $L189078
$L189078:
  03f06	dc ff ff ff	 DD	 -36			; ffffffdcH
  03f0a	10 00 00 00	 DD	 16			; 00000010H
  03f0e	00 00 00 00	 DD	 $L189075
  03f12	c0 ff ff ff	 DD	 -64			; ffffffc0H
  03f16	14 00 00 00	 DD	 20			; 00000014H
  03f1a	00 00 00 00	 DD	 $L189076
$L189076:
  03f1e	64		 DB	 100			; 00000064H
  03f1f	63		 DB	 99			; 00000063H
  03f20	00		 DB	 0
$L189075:
  03f21	72		 DB	 114			; 00000072H
  03f22	65		 DB	 101			; 00000065H
  03f23	63		 DB	 99			; 00000063H
  03f24	74		 DB	 116			; 00000074H
  03f25	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L189072:
  00205	8d 4d c0	 lea	 ecx, DWORD PTR _dc$188052[ebp]
  00208	e9 00 00 00 00	 jmp	 ??1CClientDC@@UAE@XZ	; CClientDC::~CClientDC
__ehhandler$?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z:
  0020d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189074
  00212	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z ENDP	; CBalloonHelp::OnMouseMove
EXTRN	__imp__SetRectEmpty@4:NEAR
EXTRN	__imp__InflateRect@12:NEAR
EXTRN	__imp__EqualRect@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_bCalcValidRects$ = 8					; size = 4
_lpncsp$ = 12						; size = 4
?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z PROC NEAR ; CBalloonHelp::OnNcCalcSize
; _this$ = ecx

; 1244 : {

  03f30	55		 push	 ebp
  03f31	8b ec		 mov	 ebp, esp
  03f33	83 ec 08	 sub	 esp, 8
  03f36	56		 push	 esi
  03f37	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  03f3e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  03f45	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1245 :    // nTIP_MARGIN pixel margin on all sides
; 1246 :    ::InflateRect(&lpncsp->rgrc[0], -nTIP_MARGIN,-nTIP_MARGIN);

  03f48	8b f4		 mov	 esi, esp
  03f4a	6a f8		 push	 -8			; fffffff8H
  03f4c	6a f8		 push	 -8			; fffffff8H
  03f4e	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  03f51	50		 push	 eax
  03f52	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
  03f58	3b f4		 cmp	 esi, esp
  03f5a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1247 : 
; 1248 :    // nTIP_TAIL pixel "tail" on side closest to anchor
; 1249 :    switch ( GetBalloonQuadrant() )

  03f5f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f62	e8 00 00 00 00	 call	 ?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ; CBalloonHelp::GetBalloonQuadrant
  03f67	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  03f6a	83 7d f8 03	 cmp	 DWORD PTR tv69[ebp], 3
  03f6e	77 2a		 ja	 SHORT $L188067
  03f70	8b 4d f8	 mov	 ecx, DWORD PTR tv69[ebp]
  03f73	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L189082[ecx*4]
$L188070:

; 1250 :    {
; 1251 :    case BQ_TOPRIGHT:
; 1252 :    case BQ_TOPLEFT:
; 1253 :       lpncsp->rgrc[0].top += nTIP_TAIL;

  03f7a	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03f7d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  03f80	83 c0 14	 add	 eax, 20			; 00000014H
  03f83	8b 4d 0c	 mov	 ecx, DWORD PTR _lpncsp$[ebp]
  03f86	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1254 :       break;

  03f89	eb 0f		 jmp	 SHORT $L188067
$L188071:

; 1255 :    case BQ_BOTTOMRIGHT:
; 1256 :    case BQ_BOTTOMLEFT:
; 1257 :       lpncsp->rgrc[0].bottom -= nTIP_TAIL;

  03f8b	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03f8e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  03f91	83 e8 14	 sub	 eax, 20			; 00000014H
  03f94	8b 4d 0c	 mov	 ecx, DWORD PTR _lpncsp$[ebp]
  03f97	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L188067:

; 1258 :       break;
; 1259 :    }
; 1260 : 
; 1261 :    // sanity: ensure rect does not have negative size
; 1262 :    if ( lpncsp->rgrc[0].right < lpncsp->rgrc[0].left )

  03f9a	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03f9d	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  03fa0	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  03fa3	3b 08		 cmp	 ecx, DWORD PTR [eax]
  03fa5	7d 0b		 jge	 SHORT $L188072

; 1263 :       lpncsp->rgrc[0].right = lpncsp->rgrc[0].left;

  03fa7	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03faa	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  03fad	8b 08		 mov	 ecx, DWORD PTR [eax]
  03faf	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L188072:

; 1264 :    if ( lpncsp->rgrc[0].bottom < lpncsp->rgrc[0].top )

  03fb2	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03fb5	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  03fb8	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  03fbb	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  03fbe	7d 0c		 jge	 SHORT $L188073

; 1265 :       lpncsp->rgrc[0].bottom = lpncsp->rgrc[0].top;

  03fc0	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03fc3	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  03fc6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03fc9	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L188073:

; 1266 : 
; 1267 :    if ( bCalcValidRects )

  03fcc	83 7d 08 00	 cmp	 DWORD PTR _bCalcValidRects$[ebp], 0
  03fd0	74 34		 je	 SHORT $L188065

; 1268 :    {
; 1269 :       // determine if client position has changed relative to the window position
; 1270 :       // if so, don't bother presearving anything.
; 1271 :       if ( !::EqualRect(&lpncsp->rgrc[0], &lpncsp->rgrc[2]) )

  03fd2	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  03fd5	83 c2 20	 add	 edx, 32			; 00000020H
  03fd8	8b f4		 mov	 esi, esp
  03fda	52		 push	 edx
  03fdb	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  03fde	50		 push	 eax
  03fdf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EqualRect@8
  03fe5	3b f4		 cmp	 esi, esp
  03fe7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03fec	85 c0		 test	 eax, eax
  03fee	75 16		 jne	 SHORT $L188065

; 1272 :       {
; 1273 :          ::SetRectEmpty(&lpncsp->rgrc[2]);

  03ff0	8b 4d 0c	 mov	 ecx, DWORD PTR _lpncsp$[ebp]
  03ff3	83 c1 20	 add	 ecx, 32			; 00000020H
  03ff6	8b f4		 mov	 esi, esp
  03ff8	51		 push	 ecx
  03ff9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRectEmpty@4
  03fff	3b f4		 cmp	 esi, esp
  04001	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188065:

; 1274 :       }
; 1275 :    }
; 1276 : }

  04006	5e		 pop	 esi
  04007	83 c4 08	 add	 esp, 8
  0400a	3b ec		 cmp	 ebp, esp
  0400c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04011	8b e5		 mov	 esp, ebp
  04013	5d		 pop	 ebp
  04014	c2 08 00	 ret	 8
$L189082:
  04017	00 00 00 00	 DD	 $L188070
  0401b	00 00 00 00	 DD	 $L188070
  0401f	00 00 00 00	 DD	 $L188071
  04023	00 00 00 00	 DD	 $L188071
?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z ENDP ; CBalloonHelp::OnNcCalcSize
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
?OnTimer@CBalloonHelp@@IAEXI@Z PROC NEAR		; CBalloonHelp::OnTimer
; _this$ = ecx

; 1280 : {

  04030	55		 push	 ebp
  04031	8b ec		 mov	 ebp, esp
  04033	51		 push	 ecx
  04034	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0403b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1281 :    // really shouldn't be any other timers firing, but might as well make sure
; 1282 :    if ( nIDEvent == ID_TIMER_CLOSE )

  0403e	83 7d 08 01	 cmp	 DWORD PTR _nIDEvent$[ebp], 1
  04042	75 1a		 jne	 SHORT $L188079

; 1283 :    {
; 1284 :       KillTimer(m_unTimerClose);

  04044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04047	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0404d	51		 push	 ecx
  0404e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04051	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer

; 1285 :       HideBalloon();

  04056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04059	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon
$L188079:

; 1286 :    }
; 1287 : }

  0405e	83 c4 04	 add	 esp, 4
  04061	3b ec		 cmp	 ebp, esp
  04063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04068	8b e5		 mov	 esp, ebp
  0406a	5d		 pop	 ebp
  0406b	c2 04 00	 ret	 4
?OnTimer@CBalloonHelp@@IAEXI@Z ENDP			; CBalloonHelp::OnTimer
_TEXT	ENDS
EXTRN	?OnDestroy@CWnd@@IAEXXZ:NEAR			; CWnd::OnDestroy
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnDestroy@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::OnDestroy
; _this$ = ecx

; 1291 : {

  04070	55		 push	 ebp
  04071	8b ec		 mov	 ebp, esp
  04073	51		 push	 ecx
  04074	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0407b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1292 :    // remove hooks
; 1293 :    RemoveMouseHook();

  0407e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04081	e8 00 00 00 00	 call	 ?RemoveMouseHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveMouseHook

; 1294 :    RemoveKeyboardHook();

  04086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04089	e8 00 00 00 00	 call	 ?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveKeyboardHook

; 1295 :    RemoveCallWndRetHook();

  0408e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04091	e8 00 00 00 00	 call	 ?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveCallWndRetHook

; 1296 : 
; 1297 :    // destroy
; 1298 :    CWnd::OnDestroy();

  04096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04099	e8 00 00 00 00	 call	 ?OnDestroy@CWnd@@IAEXXZ	; CWnd::OnDestroy

; 1299 : }

  0409e	83 c4 04	 add	 esp, 4
  040a1	3b ec		 cmp	 ebp, esp
  040a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  040a8	8b e5		 mov	 esp, ebp
  040aa	5d		 pop	 ebp
  040ab	c3		 ret	 0
?OnDestroy@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnDestroy
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
?OnClose@CBalloonHelp@@IAEXXZ PROC NEAR			; CBalloonHelp::OnClose
; _this$ = ecx

; 1303 : {

  040b0	55		 push	 ebp
  040b1	8b ec		 mov	 ebp, esp
  040b3	51		 push	 ecx
  040b4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  040bb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1304 :    HideBalloon();

  040be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  040c1	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon

; 1305 : }

  040c6	83 c4 04	 add	 esp, 4
  040c9	3b ec		 cmp	 ebp, esp
  040cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  040d0	8b e5		 mov	 esp, ebp
  040d2	5d		 pop	 ebp
  040d3	c3		 ret	 0
?OnClose@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnClose
_TEXT	ENDS
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T189088 = -12						; size = 4
$T189087 = -8						; size = 4
_this$ = -4						; size = 4
?PostNcDestroy@CBalloonHelp@@MAEXXZ PROC NEAR		; CBalloonHelp::PostNcDestroy
; _this$ = ecx

; 1309 : {

  040e0	55		 push	 ebp
  040e1	8b ec		 mov	 ebp, esp
  040e3	83 ec 10	 sub	 esp, 16			; 00000010H
  040e6	56		 push	 esi
  040e7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  040ec	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  040ef	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  040f2	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  040f5	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  040f8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1310 :    CWnd::PostNcDestroy();

  040fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  040fe	e8 00 00 00 00	 call	 ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy

; 1311 :   
; 1312 :    // free object if requested
; 1313 :    // be careful with this one :D
; 1314 :    if ( m_unOptions & unDELETE_THIS_ON_CLOSE )

  04103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04106	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0410c	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  04112	74 34		 je	 SHORT $L188089

; 1315 :       delete this;

  04114	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  04117	89 55 f4	 mov	 DWORD PTR $T189088[ebp], edx
  0411a	8b 45 f4	 mov	 eax, DWORD PTR $T189088[ebp]
  0411d	89 45 f8	 mov	 DWORD PTR $T189087[ebp], eax
  04120	83 7d f8 00	 cmp	 DWORD PTR $T189087[ebp], 0
  04124	74 1b		 je	 SHORT $L189089
  04126	8b f4		 mov	 esi, esp
  04128	6a 01		 push	 1
  0412a	8b 4d f8	 mov	 ecx, DWORD PTR $T189087[ebp]
  0412d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0412f	8b 4d f8	 mov	 ecx, DWORD PTR $T189087[ebp]
  04132	ff 52 04	 call	 DWORD PTR [edx+4]
  04135	3b f4		 cmp	 esi, esp
  04137	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0413c	89 45 f0	 mov	 DWORD PTR tv74[ebp], eax
  0413f	eb 07		 jmp	 SHORT $L188089
$L189089:
  04141	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$L188089:

; 1316 : }

  04148	5e		 pop	 esi
  04149	83 c4 10	 add	 esp, 16			; 00000010H
  0414c	3b ec		 cmp	 ebp, esp
  0414e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04153	8b e5		 mov	 esp, ebp
  04155	5d		 pop	 ebp
  04156	c3		 ret	 0
?PostNcDestroy@CBalloonHelp@@MAEXXZ ENDP		; CBalloonHelp::PostNcDestroy
_TEXT	ENDS
EXTRN	?PostMessageA@CWnd@@QAEHIIJ@Z:NEAR		; CWnd::PostMessageA
EXTRN	__imp__CallNextHookEx@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_code$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z PROC NEAR	; CBalloonHelp::KeyboardHookProc
; _this$ = ecx

; 1320 : {

  04160	55		 push	 ebp
  04161	8b ec		 mov	 ebp, esp
  04163	51		 push	 ecx
  04164	56		 push	 esi
  04165	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0416c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1321 :    // Skip if the key was released or if it's a repeat
; 1322 :    // Bit 31:  Specifies the transition state. The value is 0 if the key  
; 1323 :    //       is being pressed and 1 if it is being released (see MSDN).
; 1324 :    if ( code>=0 && !(lParam&0x80000000) && NULL != m_hWnd )

  0416f	83 7d 08 00	 cmp	 DWORD PTR _code$[ebp], 0
  04173	7c 21		 jl	 SHORT $L188099
  04175	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  04178	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0417d	75 17		 jne	 SHORT $L188099
  0417f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04182	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  04186	74 0e		 je	 SHORT $L188099

; 1325 :    {
; 1326 :       PostMessage(WM_CLOSE);

  04188	6a 00		 push	 0
  0418a	6a 00		 push	 0
  0418c	6a 10		 push	 16			; 00000010H
  0418e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04191	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188099:

; 1327 :    }
; 1328 :    return ::CallNextHookEx(m_hKeyboardHook, code, wParam, lParam);

  04196	8b f4		 mov	 esi, esp
  04198	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  0419b	52		 push	 edx
  0419c	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  0419f	50		 push	 eax
  041a0	8b 4d 08	 mov	 ecx, DWORD PTR _code$[ebp]
  041a3	51		 push	 ecx
  041a4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  041a7	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  041aa	50		 push	 eax
  041ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallNextHookEx@16
  041b1	3b f4		 cmp	 esi, esp
  041b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1329 : }

  041b8	5e		 pop	 esi
  041b9	83 c4 04	 add	 esp, 4
  041bc	3b ec		 cmp	 ebp, esp
  041be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  041c3	8b e5		 mov	 esp, ebp
  041c5	5d		 pop	 ebp
  041c6	c2 0c 00	 ret	 12			; 0000000cH
?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z ENDP		; CBalloonHelp::KeyboardHookProc
_TEXT	ENDS
EXTRN	_abs:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv67 = -24						; size = 4
_pt$188114 = -16					; size = 8
_this$ = -4						; size = 4
_code$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z PROC NEAR	; CBalloonHelp::MouseHookProc
; _this$ = ecx

; 1333 : {

  041d0	55		 push	 ebp
  041d1	8b ec		 mov	 ebp, esp
  041d3	83 ec 18	 sub	 esp, 24			; 00000018H
  041d6	56		 push	 esi
  041d7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  041dc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  041df	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  041e2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  041e5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  041e8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  041eb	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  041ee	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1334 :    if (code>=0 && NULL != m_hWnd )

  041f1	83 7d 08 00	 cmp	 DWORD PTR _code$[ebp], 0
  041f5	0f 8c 96 01 00
	00		 jl	 $L188106
  041fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  041fe	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  04202	0f 84 89 01 00
	00		 je	 $L188106

; 1335 :    {
; 1336 :       switch ( (UINT)wParam )

  04208	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0420b	89 4d e8	 mov	 DWORD PTR tv67[ebp], ecx
  0420e	81 7d e8 00 02
	00 00		 cmp	 DWORD PTR tv67[ebp], 512 ; 00000200H
  04215	77 29		 ja	 SHORT $L189093
  04217	81 7d e8 00 02
	00 00		 cmp	 DWORD PTR tv67[ebp], 512 ; 00000200H
  0421e	74 40		 je	 SHORT $L188112
  04220	8b 55 e8	 mov	 edx, DWORD PTR tv67[ebp]
  04223	81 ea a0 00 00
	00		 sub	 edx, 160		; 000000a0H
  04229	89 55 e8	 mov	 DWORD PTR tv67[ebp], edx
  0422c	83 7d e8 08	 cmp	 DWORD PTR tv67[ebp], 8
  04230	0f 87 5b 01 00
	00		 ja	 $L188106
  04236	8b 45 e8	 mov	 eax, DWORD PTR tv67[ebp]
  04239	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L189097[eax*4]
$L189093:
  04240	8b 4d e8	 mov	 ecx, DWORD PTR tv67[ebp]
  04243	81 e9 01 02 00
	00		 sub	 ecx, 513		; 00000201H
  04249	89 4d e8	 mov	 DWORD PTR tv67[ebp], ecx
  0424c	83 7d e8 07	 cmp	 DWORD PTR tv67[ebp], 7
  04250	0f 87 3b 01 00
	00		 ja	 $L188106
  04256	8b 55 e8	 mov	 edx, DWORD PTR tv67[ebp]
  04259	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L189098[edx*4]
$L188112:

; 1337 :       {
; 1338 :       case WM_NCMOUSEMOVE:
; 1339 :       case WM_MOUSEMOVE:
; 1340 :          if ((m_unOptions & unCLOSE_ON_MOUSE_MOVE))

  04260	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04263	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  04269	83 e1 40	 and	 ecx, 64			; 00000040H
  0426c	74 69		 je	 SHORT $L188113

; 1341 :          {
; 1342 :             CPoint pt;

  0426e	8d 4d f0	 lea	 ecx, DWORD PTR _pt$188114[ebp]
  04271	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint

; 1343 :             ::GetCursorPos(&pt);

  04276	8b f4		 mov	 esi, esp
  04278	8d 55 f0	 lea	 edx, DWORD PTR _pt$188114[ebp]
  0427b	52		 push	 edx
  0427c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4
  04282	3b f4		 cmp	 esi, esp
  04284	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1344 :             if ((abs(pt.x-m_ptMouseOrig.x) > m_nMouseMoveTolerance || abs(pt.y-m_ptMouseOrig.y) > m_nMouseMoveTolerance) )

  04289	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0428c	8b 4d f0	 mov	 ecx, DWORD PTR _pt$188114[ebp]
  0428f	2b 88 d4 00 00
	00		 sub	 ecx, DWORD PTR [eax+212]
  04295	51		 push	 ecx
  04296	e8 00 00 00 00	 call	 _abs
  0429b	83 c4 04	 add	 esp, 4
  0429e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  042a1	3b 82 e0 00 00
	00		 cmp	 eax, DWORD PTR [edx+224]
  042a7	7f 20		 jg	 SHORT $L188116
  042a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  042ac	8b 4d f4	 mov	 ecx, DWORD PTR _pt$188114[ebp+4]
  042af	2b 88 d8 00 00
	00		 sub	 ecx, DWORD PTR [eax+216]
  042b5	51		 push	 ecx
  042b6	e8 00 00 00 00	 call	 _abs
  042bb	83 c4 04	 add	 esp, 4
  042be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  042c1	3b 82 e0 00 00
	00		 cmp	 eax, DWORD PTR [edx+224]
  042c7	7e 0e		 jle	 SHORT $L188113
$L188116:

; 1345 :                PostMessage(WM_CLOSE);

  042c9	6a 00		 push	 0
  042cb	6a 00		 push	 0
  042cd	6a 10		 push	 16			; 00000010H
  042cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  042d2	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188113:

; 1346 :          }
; 1347 :          break;

  042d7	e9 b5 00 00 00	 jmp	 $L188106
$L188117:

; 1348 :       case WM_NCLBUTTONDOWN:
; 1349 :       case WM_LBUTTONDOWN:
; 1350 :          if ((m_unOptions & unCLOSE_ON_LBUTTON_DOWN))

  042dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  042df	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  042e5	83 e1 08	 and	 ecx, 8
  042e8	74 0e		 je	 SHORT $L188118

; 1351 :             PostMessage(WM_CLOSE);

  042ea	6a 00		 push	 0
  042ec	6a 00		 push	 0
  042ee	6a 10		 push	 16			; 00000010H
  042f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  042f3	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188118:

; 1352 :          break;

  042f8	e9 94 00 00 00	 jmp	 $L188106
$L188119:

; 1353 :       case WM_NCMBUTTONDOWN:
; 1354 :       case WM_MBUTTONDOWN:
; 1355 :          if ((m_unOptions & unCLOSE_ON_MBUTTON_DOWN))

  042fd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  04300	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  04306	83 e0 10	 and	 eax, 16			; 00000010H
  04309	74 0e		 je	 SHORT $L188120

; 1356 :             PostMessage(WM_CLOSE);

  0430b	6a 00		 push	 0
  0430d	6a 00		 push	 0
  0430f	6a 10		 push	 16			; 00000010H
  04311	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04314	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188120:

; 1357 :          break;

  04319	eb 76		 jmp	 SHORT $L188106
$L188121:

; 1358 :       case WM_NCRBUTTONDOWN:
; 1359 :       case WM_RBUTTONDOWN:
; 1360 :          if ((m_unOptions& unCLOSE_ON_RBUTTON_DOWN))

  0431b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0431e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  04324	83 e2 20	 and	 edx, 32			; 00000020H
  04327	74 0e		 je	 SHORT $L188122

; 1361 :             PostMessage(WM_CLOSE);

  04329	6a 00		 push	 0
  0432b	6a 00		 push	 0
  0432d	6a 10		 push	 16			; 00000010H
  0432f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04332	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188122:

; 1362 :          break;

  04337	eb 58		 jmp	 SHORT $L188106
$L188123:

; 1363 :       case WM_NCLBUTTONUP:
; 1364 :       case WM_LBUTTONUP:
; 1365 :          if ((m_unOptions & unCLOSE_ON_LBUTTON_UP))

  04339	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0433c	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  04342	83 e1 01	 and	 ecx, 1
  04345	74 0e		 je	 SHORT $L188124

; 1366 :             PostMessage(WM_CLOSE);

  04347	6a 00		 push	 0
  04349	6a 00		 push	 0
  0434b	6a 10		 push	 16			; 00000010H
  0434d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04350	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188124:

; 1367 :          break;

  04355	eb 3a		 jmp	 SHORT $L188106
$L188125:

; 1368 :       case WM_NCMBUTTONUP:
; 1369 :       case WM_MBUTTONUP:
; 1370 :          if ((m_unOptions & unCLOSE_ON_MBUTTON_UP))

  04357	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0435a	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  04360	83 e0 02	 and	 eax, 2
  04363	74 0e		 je	 SHORT $L188126

; 1371 :             PostMessage(WM_CLOSE);

  04365	6a 00		 push	 0
  04367	6a 00		 push	 0
  04369	6a 10		 push	 16			; 00000010H
  0436b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0436e	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188126:

; 1372 :          break;

  04373	eb 1c		 jmp	 SHORT $L188106
$L188127:

; 1373 :       case WM_NCRBUTTONUP:
; 1374 :       case WM_RBUTTONUP:
; 1375 :          if ((m_unOptions & unCLOSE_ON_RBUTTON_UP))

  04375	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04378	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0437e	83 e2 04	 and	 edx, 4
  04381	74 0e		 je	 SHORT $L188106

; 1376 :             PostMessage(WM_CLOSE);

  04383	6a 00		 push	 0
  04385	6a 00		 push	 0
  04387	6a 10		 push	 16			; 00000010H
  04389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0438c	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L188106:

; 1377 :          break;
; 1378 :       }
; 1379 :    }
; 1380 :    return ::CallNextHookEx(m_hMouseHook, code, wParam, lParam);

  04391	8b f4		 mov	 esi, esp
  04393	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  04396	50		 push	 eax
  04397	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0439a	51		 push	 ecx
  0439b	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  0439e	52		 push	 edx
  0439f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  043a2	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  043a5	51		 push	 ecx
  043a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallNextHookEx@16
  043ac	3b f4		 cmp	 esi, esp
  043ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1381 : }

  043b3	52		 push	 edx
  043b4	8b cd		 mov	 ecx, ebp
  043b6	50		 push	 eax
  043b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189096
  043bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  043c2	58		 pop	 eax
  043c3	5a		 pop	 edx
  043c4	5e		 pop	 esi
  043c5	83 c4 18	 add	 esp, 24			; 00000018H
  043c8	3b ec		 cmp	 ebp, esp
  043ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  043cf	8b e5		 mov	 esp, ebp
  043d1	5d		 pop	 ebp
  043d2	c2 0c 00	 ret	 12			; 0000000cH
$L189096:
  043d5	01 00 00 00	 DD	 1
  043d9	00 00 00 00	 DD	 $L189095
$L189095:
  043dd	f0 ff ff ff	 DD	 -16			; fffffff0H
  043e1	08 00 00 00	 DD	 8
  043e5	00 00 00 00	 DD	 $L189094
$L189094:
  043e9	70		 DB	 112			; 00000070H
  043ea	74		 DB	 116			; 00000074H
  043eb	00		 DB	 0
$L189097:
  043ec	00 00 00 00	 DD	 $L188112
  043f0	00 00 00 00	 DD	 $L188117
  043f4	00 00 00 00	 DD	 $L188123
  043f8	00 00 00 00	 DD	 $L188106
  043fc	00 00 00 00	 DD	 $L188121
  04400	00 00 00 00	 DD	 $L188127
  04404	00 00 00 00	 DD	 $L188106
  04408	00 00 00 00	 DD	 $L188119
  0440c	00 00 00 00	 DD	 $L188125
$L189098:
  04410	00 00 00 00	 DD	 $L188117
  04414	00 00 00 00	 DD	 $L188123
  04418	00 00 00 00	 DD	 $L188106
  0441c	00 00 00 00	 DD	 $L188121
  04420	00 00 00 00	 DD	 $L188127
  04424	00 00 00 00	 DD	 $L188106
  04428	00 00 00 00	 DD	 $L188119
  0442c	00 00 00 00	 DD	 $L188125
?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z ENDP		; CBalloonHelp::MouseHookProc
; Function compile flags: /Odt /RTCsu
_pcwpr$188136 = -8					; size = 4
_this$ = -4						; size = 4
_code$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z PROC NEAR	; CBalloonHelp::CallWndRetProc
; _this$ = ecx

; 1385 : {

  04430	55		 push	 ebp
  04431	8b ec		 mov	 ebp, esp
  04433	83 ec 08	 sub	 esp, 8
  04436	56		 push	 esi
  04437	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0443e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  04445	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1386 :    if (code>=0 && NULL != m_hWnd )

  04448	83 7d 08 00	 cmp	 DWORD PTR _code$[ebp], 0
  0444c	7c 31		 jl	 SHORT $L188135
  0444e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04451	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  04455	74 28		 je	 SHORT $L188135

; 1387 :    {
; 1388 :       CWPRETSTRUCT* pcwpr = (CWPRETSTRUCT*)lParam;

  04457	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0445a	89 4d f8	 mov	 DWORD PTR _pcwpr$188136[ebp], ecx

; 1389 :       if ( WM_MOVE == pcwpr->message && pcwpr->hwnd == m_hwndAnchor )

  0445d	8b 55 f8	 mov	 edx, DWORD PTR _pcwpr$188136[ebp]
  04460	83 7a 0c 03	 cmp	 DWORD PTR [edx+12], 3
  04464	75 19		 jne	 SHORT $L188135
  04466	8b 45 f8	 mov	 eax, DWORD PTR _pcwpr$188136[ebp]
  04469	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0446c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0446f	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  04475	75 08		 jne	 SHORT $L188135

; 1390 :          PositionWindow();

  04477	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0447a	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L188135:

; 1391 :    }
; 1392 : 
; 1393 :    return ::CallNextHookEx(m_hCallWndRetHook, code, wParam, lParam);

  0447f	8b f4		 mov	 esi, esp
  04481	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  04484	50		 push	 eax
  04485	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  04488	51		 push	 ecx
  04489	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  0448c	52		 push	 edx
  0448d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  04490	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  04496	51		 push	 ecx
  04497	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallNextHookEx@16
  0449d	3b f4		 cmp	 esi, esp
  0449f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1394 : }

  044a4	5e		 pop	 esi
  044a5	83 c4 08	 add	 esp, 8
  044a8	3b ec		 cmp	 ebp, esp
  044aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  044af	8b e5		 mov	 esp, ebp
  044b1	5d		 pop	 ebp
  044b2	c2 0c 00	 ret	 12			; 0000000cH
?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z ENDP		; CBalloonHelp::CallWndRetProc
_TEXT	ENDS
EXTRN	__imp__FlushInstructionCache@12:NEAR
EXTRN	__imp__GetCurrentProcess@0:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.h
;	COMDAT ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z
_TEXT	SEGMENT
_addr$ = -16						; size = 8
_this$ = -4						; size = 4
_method$ = 8						; size = 8
_pThis$ = 16						; size = 4
?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z PROC NEAR ; _ThunkImpl<CBalloonHelp>::InitThunk, COMDAT
; _this$ = ecx

; 90   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000d	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00010	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00013	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00016	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00019	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 		union { DWORD func; TMFP method; } addr;
; 92   : 		addr.method = (TMFP)method;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
  00022	89 45 f0	 mov	 DWORD PTR _addr$[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _method$[ebp+4]
  00028	89 4d f4	 mov	 DWORD PTR _addr$[ebp+4], ecx

; 93   : 		m_mov  = 0xB9;

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	c6 02 b9	 mov	 BYTE PTR [edx], 185	; 000000b9H

; 94   : 		m_this = (DWORD)pThis;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 10	 mov	 ecx, DWORD PTR _pThis$[ebp]
  00037	89 48 01	 mov	 DWORD PTR [eax+1], ecx

; 95   : 		m_jmp  = 0xE9;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	c6 42 05 e9	 mov	 BYTE PTR [edx+5], 233	; 000000e9H

; 96   : 		m_relproc = addr.func - (DWORD)(this+1);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 c0 0a	 add	 eax, 10			; 0000000aH
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _addr$[ebp]
  0004a	2b c8		 sub	 ecx, eax
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 4a 06	 mov	 DWORD PTR [edx+6], ecx

; 97   : 
; 98   : 		::FlushInstructionCache(GetCurrentProcess(), this, sizeof(*this));

  00052	8b f4		 mov	 esi, esp
  00054	6a 0a		 push	 10			; 0000000aH
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	50		 push	 eax
  0005a	8b fc		 mov	 edi, esp
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00062	3b fc		 cmp	 edi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushInstructionCache@12
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 99   : 	}

  00077	52		 push	 edx
  00078	8b cd		 mov	 ecx, ebp
  0007a	50		 push	 eax
  0007b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L189103
  00081	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00086	58		 pop	 eax
  00087	5a		 pop	 edx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	83 c4 14	 add	 esp, 20			; 00000014H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
$L189103:
  0009a	01 00 00 00	 DD	 1
  0009e	00 00 00 00	 DD	 $L189102
$L189102:
  000a2	f0 ff ff ff	 DD	 -16			; fffffff0H
  000a6	08 00 00 00	 DD	 8
  000aa	00 00 00 00	 DD	 $L189101
$L189101:
  000ae	61		 DB	 97			; 00000061H
  000af	64		 DB	 100			; 00000064H
  000b0	64		 DB	 100			; 00000064H
  000b1	72		 DB	 114			; 00000072H
  000b2	00		 DB	 0
?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ENDP ; _ThunkImpl<CBalloonHelp>::InitThunk
_TEXT	ENDS
PUBLIC	??_C@_0O@JFAOIAID@m_mov?5?$DN?$DN?50xB9?$AA@	; `string'
PUBLIC	??_C@_0EF@FBPFHFEG@d?3?2boxgit?2playbox?2playbox?2dev?2pr@ ; `string'
EXTRN	__imp___CrtDbgReport:NEAR
;	COMDAT ??_C@_0O@JFAOIAID@m_mov?5?$DN?$DN?50xB9?$AA@
CONST	SEGMENT
??_C@_0O@JFAOIAID@m_mov?5?$DN?$DN?50xB9?$AA@ DB 'm_mov == 0xB9', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FBPFHFEG@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
CONST	SEGMENT
??_C@_0EF@FBPFHFEG@d?3?2boxgit?2playbox?2playbox?2dev?2pr@ DB 'd:\boxgit\'
	DB	'playbox\playbox\dev\prj\playbox\src\gui\util\BalloonHelp.h', 00H ; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ PROC NEAR ; _ThunkImpl<CBalloonHelp>::GetThunk, COMDAT
; _this$ = ecx

; 101  :    {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 		_ASSERTE(m_mov == 0xB9);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00015	81 f9 b9 00 00
	00		 cmp	 ecx, 185		; 000000b9H
  0001b	74 28		 je	 SHORT $L189105
  0001d	8b f4		 mov	 esi, esp
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@JFAOIAID@m_mov?5?$DN?$DN?50xB9?$AA@
  00024	6a 00		 push	 0
  00026	6a 66		 push	 102			; 00000066H
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@FBPFHFEG@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
  0002d	6a 02		 push	 2
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	83 f8 01	 cmp	 eax, 1
  00042	75 01		 jne	 SHORT $L189105
  00044	cc		 int	 3
$L189105:

; 103  : 		return (FARPROC)this; 

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 104  :    }

  00048	5e		 pop	 esi
  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ENDP ; _ThunkImpl<CBalloonHelp>::GetThunk
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
$L117265:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	83 e8 01	 sub	 eax, 1
  0000a	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000d	78 1a		 js	 SHORT $L117263
  0000f	8b f4		 mov	 esi, esp
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00014	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  00024	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00027	eb db		 jmp	 SHORT $L117265
$L117263:
  00029	5e		 pop	 esi
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
