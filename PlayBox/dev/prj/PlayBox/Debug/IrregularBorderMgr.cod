; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\IrregularBorder\IrregularBorderMgr.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?DeleteImage@CTranslucentDialog@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DIBINFO@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDIBINFO@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiPlusBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@CGdiPlusBitmap@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CGdiPlusBitmap@@QAE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiPlusBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IData@@MAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DataAppStart@IData@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DataAppExit@IData@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIData@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiPlusBitmap@CSkinButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@CGdiPlusBitmap@CSkinButton@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CGdiPlusBitmap@CSkinButton@@QAE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiPlusBitmap@CSkinButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1HTTPObserver@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownStart@HTTPObserver@@UAEXPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownFinish@HTTPObserver@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownFailed@HTTPObserver@@UAEXPBDW4HTTP_DOWN_FAILED_REASON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownProgress@HTTPObserver@@UAEXPBDII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownloadPause@HTTPObserver@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GHTTPObserver@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1P2PObserver@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownStart@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownFinish@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownFailed@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4P2P_DOWN_FAILED_REASON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownProgress@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownPause@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_SigChange@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GP2PObserver@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClsid@CShockwaveFlash@@QAEABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIrregularBorderMgr@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3P2PObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiPlusBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiPlusBitmap@CSkinButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3HTTPObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3DIBINFO@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2P2PObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiPlusBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiPlusBitmap@CSkinButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2HTTPObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2DIBINFO@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@P2PObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiPlusBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiPlusBitmap@CSkinButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@HTTPObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@DIBINFO@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVP2PObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCGdiPlusBitmap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVIData@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCGdiPlusBitmap@CSkinButton@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVHTTPObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVDIBINFO@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4P2PObserver@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CGdiPlusBitmap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IData@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CGdiPlusBitmap@CSkinButton@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4HTTPObserver@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4DIBINFO@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@OBIGOAOM@AtlIsValidString?$CI?5pszFormat?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rect@Gdiplus@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Graphics@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@Image@Gdiplus@@UAEPAV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2GdiplusBase@Gdiplus@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3GdiplusBase@Gdiplus@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Image@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4Image@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVImage@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVGdiplusBase@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GImage@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHeight@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWidth@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Image@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clsid@?1??GetClsid@CShockwaveFlash@@QAEABU_GUID@@XZ@4U3@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7P2PObserver@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7HTTPObserver@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CGdiPlusBitmap@CSkinButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7IData@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromFile@Bitmap@Gdiplus@@SAPAV12@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Bitmap@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4Bitmap@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVBitmap@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GBitmap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Bitmap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiPlusBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7DIBINFO@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?m_pMgr@CIrregularBorderMgr@@0PAV1@A		; CIrregularBorderMgr::m_pMgr
_BSS	SEGMENT
?m_pMgr@CIrregularBorderMgr@@0PAV1@A DD 01H DUP (?)	; CIrregularBorderMgr::m_pMgr
_BSS	ENDS
CONST	SEGMENT
$SG191789 DB	00H
$SG191794 DB	00H
$SG191799 DB	00H
$SG191804 DB	00H
$SG191844 DB	'.\src\module\IrregularBorder\IrregularBorderMgr.cpp', 00H
$SG191845 DB	'w: %d ,h: %d, %s', 0dH, 0aH, 00H
	ORG $+1
$SG191857 DB	'Enter InitTransDlg', 00H
	ORG $+1
$SG191858 DB	'USRCLK', 00H
	ORG $+1
$SG191866 DB	'\topleft.png', 00H
	ORG $+3
$SG191867 DB	'\sbujectskin\', 00H
	ORG $+2
$SG191870 DB	'USRCLK', 00H
	ORG $+1
$SG191874 DB	'cloneTopLeft: %d ,h: %d, %s', 0dH, 0aH, 00H
	ORG $+2
$SG191877 DB	'USRCLK', 00H
	ORG $+1
$SG191881 DB	'TopLeft hide', 00H
	ORG $+3
$SG191882 DB	'USRCLK', 00H
	ORG $+1
$SG191886 DB	'\topright.png', 00H
	ORG $+2
$SG191887 DB	'\sbujectskin\', 00H
	ORG $+2
$SG191890 DB	'USRCLK', 00H
	ORG $+1
$SG191894 DB	'cloneTopRight: %d ,h: %d, %s', 0dH, 0aH, 00H
	ORG $+1
$SG191897 DB	'USRCLK', 00H
	ORG $+1
$SG191901 DB	'TopRight Hide', 00H
	ORG $+2
$SG191902 DB	'USRCLK', 00H
	ORG $+1
$SG191906 DB	'\bottomright.png', 00H
	ORG $+3
$SG191907 DB	'\sbujectskin\', 00H
	ORG $+2
$SG191914 DB	'\bottomleft.png', 00H
$SG191915 DB	'\sbujectskin\', 00H
	ORG $+2
$SG191961 DB	'toppanel', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__GetVersionExA@4:NEAR
;	COMDAT rtc$IMZ
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00011	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00025	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0002f	8b f4		 mov	 esi, esp
  00031	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00045	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0004c	75 15		 jne	 SHORT $L24163
  0004e	83 bd 68 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00055	72 0c		 jb	 SHORT $L24163

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00057	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00061	eb 0a		 jmp	 SHORT $L24164
$L24163:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00063	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24164:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0006d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00079	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  0007e	8b f4		 mov	 esi, esp
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192642
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$L192642:
  000b9	01 00 00 00	 DD	 1
  000bd	00 00 00 00	 DD	 $L192641
$L192641:
  000c1	64 ff ff ff	 DD	 -156			; ffffff64H
  000c5	94 00 00 00	 DD	 148			; 00000094H
  000c9	00 00 00 00	 DD	 $L192638
$L192638:
  000cd	76		 DB	 118			; 00000076H
  000ce	65		 DB	 101			; 00000065H
  000cf	72		 DB	 114			; 00000072H
  000d0	00		 DB	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24151 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	89 45 f4	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00045	8b f4		 mov	 esi, esp
  00047	6a 07		 push	 7
  00049	8d 45 e8	 lea	 eax, DWORD PTR _szACP$[ebp]
  0004c	50		 push	 eax
  0004d	68 04 10 00 00	 push	 4100			; 00001004H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  00055	51		 push	 ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	74 34		 je	 SHORT $L24150

; 111  : 	{
; 112  : 		char* pch = szACP;

  00067	8d 55 e8	 lea	 edx, DWORD PTR _szACP$[ebp]
  0006a	89 55 e0	 mov	 DWORD PTR _pch$24151[ebp], edx
$L24153:

; 113  : 		while (*pch != '\0')

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00070	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00073	85 c9		 test	 ecx, ecx
  00075	74 24		 je	 SHORT $L24150

; 114  : 		{
; 115  : 			nACP *= 10;

  00077	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  0007a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0007d	89 55 f8	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00080	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  00089	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0008d	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _pch$24151[ebp]
  00093	83 c1 01	 add	 ecx, 1
  00096	89 4d e0	 mov	 DWORD PTR _pch$24151[ebp], ecx

; 117  : 		}

  00099	eb d2		 jmp	 SHORT $L24153
$L24150:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0009f	75 12		 jne	 SHORT $L24155

; 121  : 		nACP = ::GetACP();

  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
$L24155:

; 122  : 
; 123  : 	return nACP;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192653
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	5e		 pop	 esi
  000d0	83 c4 20	 add	 esp, 32			; 00000020H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$L192653:
  000de	01 00 00 00	 DD	 1
  000e2	00 00 00 00	 DD	 $L192652
$L192652:
  000e6	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ea	07 00 00 00	 DD	 7
  000ee	00 00 00 00	 DD	 $L192650
$L192650:
  000f2	73		 DB	 115			; 00000073H
  000f3	7a		 DB	 122			; 0000007aH
  000f4	41		 DB	 65			; 00000041H
  000f5	43		 DB	 67			; 00000043H
  000f6	50		 DB	 80			; 00000050H
  000f7	00		 DB	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ	; CIrregularBorderMgr::GetInstance
PUBLIC	??0CIrregularBorderMgr@@QAE@XZ			; CIrregularBorderMgr::CIrregularBorderMgr
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T192667 DD	0ffffffffH
	DD	FLAT:$L192660
$T192664 DD	019930520H
	DD	01H
	DD	FLAT:$T192667
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\irregularbordermgr.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -24						; size = 4
$T192657 = -20						; size = 4
$T192656 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ PROC NEAR	; CIrregularBorderMgr::GetInstance

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH

; 13   : 	if(CIrregularBorderMgr::m_pMgr == NULL)

  00030	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A, 0 ; CIrregularBorderMgr::m_pMgr
  00037	75 44		 jne	 SHORT $L191768

; 14   : 		CIrregularBorderMgr::m_pMgr = new CIrregularBorderMgr();

  00039	6a 1c		 push	 28			; 0000001cH
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 ec	 mov	 DWORD PTR $T192657[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	83 7d ec 00	 cmp	 DWORD PTR $T192657[ebp], 0
  00051	74 0d		 je	 SHORT $L192658
  00053	8b 4d ec	 mov	 ecx, DWORD PTR $T192657[ebp]
  00056	e8 00 00 00 00	 call	 ??0CIrregularBorderMgr@@QAE@XZ ; CIrregularBorderMgr::CIrregularBorderMgr
  0005b	89 45 e8	 mov	 DWORD PTR tv72[ebp], eax
  0005e	eb 07		 jmp	 SHORT $L192659
$L192658:
  00060	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L192659:
  00067	8b 45 e8	 mov	 eax, DWORD PTR tv72[ebp]
  0006a	89 45 f0	 mov	 DWORD PTR $T192656[ebp], eax
  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	8b 4d f0	 mov	 ecx, DWORD PTR $T192656[ebp]
  00077	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A, ecx ; CIrregularBorderMgr::m_pMgr
$L191768:

; 15   : 	
; 16   : 	return CIrregularBorderMgr::m_pMgr;

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A ; CIrregularBorderMgr::m_pMgr

; 17   : }

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0008c	83 c4 18	 add	 esp, 24			; 00000018H
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L192660:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T192657[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192664
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ ENDP	; CIrregularBorderMgr::GetInstance
PUBLIC	?DelInstance@CIrregularBorderMgr@@SAXXZ		; CIrregularBorderMgr::DelInstance
PUBLIC	??_GCIrregularBorderMgr@@QAEPAXI@Z		; CIrregularBorderMgr::`scalar deleting destructor'
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T192671 = -8						; size = 4
$T192670 = -4						; size = 4
?DelInstance@CIrregularBorderMgr@@SAXXZ PROC NEAR	; CIrregularBorderMgr::DelInstance

; 20   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000a6	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  000ad	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  000b4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 21   : 	delete CIrregularBorderMgr::m_pMgr;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A ; CIrregularBorderMgr::m_pMgr
  000c0	89 45 f8	 mov	 DWORD PTR $T192671[ebp], eax
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR $T192671[ebp]
  000c6	89 4d fc	 mov	 DWORD PTR $T192670[ebp], ecx
  000c9	83 7d fc 00	 cmp	 DWORD PTR $T192670[ebp], 0
  000cd	74 0f		 je	 SHORT $L192672
  000cf	6a 01		 push	 1
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR $T192670[ebp]
  000d4	e8 00 00 00 00	 call	 ??_GCIrregularBorderMgr@@QAEPAXI@Z
  000d9	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  000dc	eb 07		 jmp	 SHORT $L191775
$L192672:
  000de	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L191775:

; 22   : }

  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e8	3b ec		 cmp	 ebp, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
?DelInstance@CIrregularBorderMgr@@SAXXZ ENDP		; CIrregularBorderMgr::DelInstance
_TEXT	ENDS
PUBLIC	??1CIrregularBorderMgr@@QAE@XZ			; CIrregularBorderMgr::~CIrregularBorderMgr
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCIrregularBorderMgr@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCIrregularBorderMgr@@QAEPAXI@Z PROC NEAR		; CIrregularBorderMgr::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CIrregularBorderMgr@@QAE@XZ ; CIrregularBorderMgr::~CIrregularBorderMgr
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L191781
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L191781:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GCIrregularBorderMgr@@QAEPAXI@Z ENDP			; CIrregularBorderMgr::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?AfxGetMainWindow@@YAPAVCWnd@@XZ:NEAR		; AfxGetMainWindow
EXTRN	?SetOwner@CWnd@@QAEXPAV1@@Z:NEAR		; CWnd::SetOwner
EXTRN	??2CObject@@SGPAXI@Z:NEAR			; CObject::operator new
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
EXTRN	??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z:NEAR	; CTranslucentDialog::CTranslucentDialog
xdata$x	SEGMENT
$T192699 DD	0ffffffffH
	DD	FLAT:$L192692
	DD	0ffffffffH
	DD	FLAT:$L192693
	DD	0ffffffffH
	DD	FLAT:$L192694
	DD	0ffffffffH
	DD	FLAT:$L192695
$T192697 DD	019930520H
	DD	04H
	DD	FLAT:$T192699
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv141 = -68						; size = 4
tv130 = -64						; size = 4
tv87 = -60						; size = 4
tv76 = -56						; size = 4
$T192689 = -52						; size = 4
$T192688 = -48						; size = 4
$T192685 = -44						; size = 4
$T192684 = -40						; size = 4
$T192681 = -36						; size = 4
$T192680 = -32						; size = 4
$T192677 = -28						; size = 4
$T192676 = -24						; size = 4
_pWnd$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CIrregularBorderMgr@@QAE@XZ PROC NEAR		; CIrregularBorderMgr::CIrregularBorderMgr
; _this$ = ecx

; 25   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	6a ff		 push	 -1
  00105	68 00 00 00 00	 push	 __ehhandler$??0CIrregularBorderMgr@@QAE@XZ
  0010a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00110	50		 push	 eax
  00111	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00118	83 ec 38	 sub	 esp, 56			; 00000038H
  0011b	56		 push	 esi
  0011c	57		 push	 edi
  0011d	51		 push	 ecx
  0011e	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  00121	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00126	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0012b	f3 ab		 rep stosd
  0012d	59		 pop	 ecx
  0012e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	m_pMainWnd = AfxGetMainWindow();

  00131	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00136	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	89 01		 mov	 DWORD PTR [ecx], eax

; 27   : 	m_pBottomLeftWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  0013b	68 98 00 00 00	 push	 152			; 00000098H
  00140	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00145	89 45 e4	 mov	 DWORD PTR $T192677[ebp], eax
  00148	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0014f	83 7d e4 00	 cmp	 DWORD PTR $T192677[ebp], 0
  00153	74 19		 je	 SHORT $L192678
  00155	6a 00		 push	 0
  00157	68 00 00 00 00	 push	 OFFSET FLAT:$SG191789
  0015c	68 88 00 00 00	 push	 136			; 00000088H
  00161	8b 4d e4	 mov	 ecx, DWORD PTR $T192677[ebp]
  00164	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  00169	89 45 c8	 mov	 DWORD PTR tv76[ebp], eax
  0016c	eb 07		 jmp	 SHORT $L192679
$L192678:
  0016e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L192679:
  00175	8b 55 c8	 mov	 edx, DWORD PTR tv76[ebp]
  00178	89 55 e8	 mov	 DWORD PTR $T192676[ebp], edx
  0017b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00182	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 4d e8	 mov	 ecx, DWORD PTR $T192676[ebp]
  00188	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 28   : 	m_pBottomRightWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  0018b	68 98 00 00 00	 push	 152			; 00000098H
  00190	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00195	89 45 dc	 mov	 DWORD PTR $T192681[ebp], eax
  00198	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0019f	83 7d dc 00	 cmp	 DWORD PTR $T192681[ebp], 0
  001a3	74 19		 je	 SHORT $L192682
  001a5	6a 00		 push	 0
  001a7	68 00 00 00 00	 push	 OFFSET FLAT:$SG191794
  001ac	68 88 00 00 00	 push	 136			; 00000088H
  001b1	8b 4d dc	 mov	 ecx, DWORD PTR $T192681[ebp]
  001b4	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  001b9	89 45 c4	 mov	 DWORD PTR tv87[ebp], eax
  001bc	eb 07		 jmp	 SHORT $L192683
$L192682:
  001be	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L192683:
  001c5	8b 55 c4	 mov	 edx, DWORD PTR tv87[ebp]
  001c8	89 55 e0	 mov	 DWORD PTR $T192680[ebp], edx
  001cb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001d5	8b 4d e0	 mov	 ecx, DWORD PTR $T192680[ebp]
  001d8	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 29   : 	m_pTopRightWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  001db	68 98 00 00 00	 push	 152			; 00000098H
  001e0	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  001e5	89 45 d4	 mov	 DWORD PTR $T192685[ebp], eax
  001e8	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001ef	83 7d d4 00	 cmp	 DWORD PTR $T192685[ebp], 0
  001f3	74 19		 je	 SHORT $L192686
  001f5	6a 00		 push	 0
  001f7	68 00 00 00 00	 push	 OFFSET FLAT:$SG191799
  001fc	68 88 00 00 00	 push	 136			; 00000088H
  00201	8b 4d d4	 mov	 ecx, DWORD PTR $T192685[ebp]
  00204	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  00209	89 45 c0	 mov	 DWORD PTR tv130[ebp], eax
  0020c	eb 07		 jmp	 SHORT $L192687
$L192686:
  0020e	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$L192687:
  00215	8b 55 c0	 mov	 edx, DWORD PTR tv130[ebp]
  00218	89 55 d8	 mov	 DWORD PTR $T192684[ebp], edx
  0021b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00222	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00225	8b 4d d8	 mov	 ecx, DWORD PTR $T192684[ebp]
  00228	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 30   : 	m_pTopLeftWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  0022b	68 98 00 00 00	 push	 152			; 00000098H
  00230	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00235	89 45 cc	 mov	 DWORD PTR $T192689[ebp], eax
  00238	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0023f	83 7d cc 00	 cmp	 DWORD PTR $T192689[ebp], 0
  00243	74 19		 je	 SHORT $L192690
  00245	6a 00		 push	 0
  00247	68 00 00 00 00	 push	 OFFSET FLAT:$SG191804
  0024c	68 88 00 00 00	 push	 136			; 00000088H
  00251	8b 4d cc	 mov	 ecx, DWORD PTR $T192689[ebp]
  00254	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  00259	89 45 bc	 mov	 DWORD PTR tv141[ebp], eax
  0025c	eb 07		 jmp	 SHORT $L192691
$L192690:
  0025e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$L192691:
  00265	8b 55 bc	 mov	 edx, DWORD PTR tv141[ebp]
  00268	89 55 d0	 mov	 DWORD PTR $T192688[ebp], edx
  0026b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00272	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00275	8b 4d d0	 mov	 ecx, DWORD PTR $T192688[ebp]
  00278	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 31   : 
; 32   : 	m_pTopLeftWnd->m_position = LEFT_TOP_CORNER;

  0027b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0027e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00281	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 33   : 	m_pTopRightWnd->m_position = RIGHT_TOP_CORNER;

  00288	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0028b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0028e	c7 42 74 02 00
	00 00		 mov	 DWORD PTR [edx+116], 2

; 34   : 	m_pBottomLeftWnd->m_position = LEFT_BOTTOM_CORNER;

  00295	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00298	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0029b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1

; 35   : 	m_pBottomRightWnd->m_position = RIGHT_BOTTOM_CORNER;

  002a2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002a5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002a8	c7 40 74 03 00
	00 00		 mov	 DWORD PTR [eax+116], 3

; 36   : 
; 37   : 	m_pBottomLeftWnd->Create(IDD_TRANS_DLG,::AfxGetMainWindow());

  002af	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  002b4	8b f4		 mov	 esi, esp
  002b6	50		 push	 eax
  002b7	68 88 00 00 00	 push	 136			; 00000088H
  002bc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002c2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002c5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002c8	8b 12		 mov	 edx, DWORD PTR [edx]
  002ca	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]
  002d0	3b f4		 cmp	 esi, esp
  002d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 38   : 	m_pBottomRightWnd->Create(IDD_TRANS_DLG,::AfxGetMainWindow());

  002d7	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  002dc	8b f4		 mov	 esi, esp
  002de	50		 push	 eax
  002df	68 88 00 00 00	 push	 136			; 00000088H
  002e4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002e7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002ea	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002ed	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f2	8b c8		 mov	 ecx, eax
  002f4	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]
  002fa	3b f4		 cmp	 esi, esp
  002fc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 	m_pTopRightWnd->Create(IDD_TRANS_DLG,m_pBottomRightWnd);

  00301	8b f4		 mov	 esi, esp
  00303	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00306	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00309	51		 push	 ecx
  0030a	68 88 00 00 00	 push	 136			; 00000088H
  0030f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00312	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00315	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00318	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0031b	8b 10		 mov	 edx, DWORD PTR [eax]
  0031d	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]
  00323	3b f4		 cmp	 esi, esp
  00325	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 40   : 	m_pTopLeftWnd->Create(IDD_TRANS_DLG,m_pBottomRightWnd);

  0032a	8b f4		 mov	 esi, esp
  0032c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0032f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00332	51		 push	 ecx
  00333	68 88 00 00 00	 push	 136			; 00000088H
  00338	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0033b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0033e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00341	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00344	8b 10		 mov	 edx, DWORD PTR [eax]
  00346	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]
  0034c	3b f4		 cmp	 esi, esp
  0034e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 41   : 
; 42   : 	CWnd * pWnd = AfxGetMainWindow();

  00353	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00358	89 45 ec	 mov	 DWORD PTR _pWnd$[ebp], eax

; 43   : 	m_pTopRightWnd->SetOwner(AfxGetMainWindow());

  0035b	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00360	50		 push	 eax
  00361	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00364	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00367	e8 00 00 00 00	 call	 ?SetOwner@CWnd@@QAEXPAV1@@Z ; CWnd::SetOwner

; 44   : 	m_curSubject = NULL;

  0036c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 45   : 
; 46   : 	m_bUpdateView = false;

  00376	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00379	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 47   : }

  00380	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00383	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00386	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0038d	5f		 pop	 edi
  0038e	5e		 pop	 esi
  0038f	83 c4 44	 add	 esp, 68			; 00000044H
  00392	3b ec		 cmp	 ebp, esp
  00394	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00399	8b e5		 mov	 esp, ebp
  0039b	5d		 pop	 ebp
  0039c	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L192692:
  00015	8b 45 e4	 mov	 eax, DWORD PTR $T192677[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0001e	c3		 ret	 0
$L192693:
  0001f	8b 45 dc	 mov	 eax, DWORD PTR $T192681[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00028	c3		 ret	 0
$L192694:
  00029	8b 45 d4	 mov	 eax, DWORD PTR $T192685[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00032	c3		 ret	 0
$L192695:
  00033	8b 45 cc	 mov	 eax, DWORD PTR $T192689[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0003c	c3		 ret	 0
__ehhandler$??0CIrregularBorderMgr@@QAE@XZ:
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192697
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CIrregularBorderMgr@@QAE@XZ ENDP			; CIrregularBorderMgr::CIrregularBorderMgr
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv95 = -52						; size = 4
tv87 = -48						; size = 4
tv79 = -44						; size = 4
tv71 = -40						; size = 4
$T192714 = -36						; size = 4
$T192713 = -32						; size = 4
$T192710 = -28						; size = 4
$T192709 = -24						; size = 4
$T192706 = -20						; size = 4
$T192705 = -16						; size = 4
$T192702 = -12						; size = 4
$T192701 = -8						; size = 4
_this$ = -4						; size = 4
??1CIrregularBorderMgr@@QAE@XZ PROC NEAR		; CIrregularBorderMgr::~CIrregularBorderMgr
; _this$ = ecx

; 50   : {

  003a0	55		 push	 ebp
  003a1	8b ec		 mov	 ebp, esp
  003a3	83 ec 34	 sub	 esp, 52			; 00000034H
  003a6	56		 push	 esi
  003a7	57		 push	 edi
  003a8	51		 push	 ecx
  003a9	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  003ac	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  003b1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  003b6	f3 ab		 rep stosd
  003b8	59		 pop	 ecx
  003b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 	delete m_pBottomLeftWnd;

  003bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003bf	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003c2	89 4d f4	 mov	 DWORD PTR $T192702[ebp], ecx
  003c5	8b 55 f4	 mov	 edx, DWORD PTR $T192702[ebp]
  003c8	89 55 f8	 mov	 DWORD PTR $T192701[ebp], edx
  003cb	83 7d f8 00	 cmp	 DWORD PTR $T192701[ebp], 0
  003cf	74 1b		 je	 SHORT $L192703
  003d1	8b f4		 mov	 esi, esp
  003d3	6a 01		 push	 1
  003d5	8b 45 f8	 mov	 eax, DWORD PTR $T192701[ebp]
  003d8	8b 10		 mov	 edx, DWORD PTR [eax]
  003da	8b 4d f8	 mov	 ecx, DWORD PTR $T192701[ebp]
  003dd	ff 52 04	 call	 DWORD PTR [edx+4]
  003e0	3b f4		 cmp	 esi, esp
  003e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e7	89 45 d8	 mov	 DWORD PTR tv71[ebp], eax
  003ea	eb 07		 jmp	 SHORT $L192704
$L192703:
  003ec	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L192704:

; 52   : 	delete m_pBottomRightWnd;

  003f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003f9	89 4d ec	 mov	 DWORD PTR $T192706[ebp], ecx
  003fc	8b 55 ec	 mov	 edx, DWORD PTR $T192706[ebp]
  003ff	89 55 f0	 mov	 DWORD PTR $T192705[ebp], edx
  00402	83 7d f0 00	 cmp	 DWORD PTR $T192705[ebp], 0
  00406	74 1b		 je	 SHORT $L192707
  00408	8b f4		 mov	 esi, esp
  0040a	6a 01		 push	 1
  0040c	8b 45 f0	 mov	 eax, DWORD PTR $T192705[ebp]
  0040f	8b 10		 mov	 edx, DWORD PTR [eax]
  00411	8b 4d f0	 mov	 ecx, DWORD PTR $T192705[ebp]
  00414	ff 52 04	 call	 DWORD PTR [edx+4]
  00417	3b f4		 cmp	 esi, esp
  00419	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0041e	89 45 d4	 mov	 DWORD PTR tv79[ebp], eax
  00421	eb 07		 jmp	 SHORT $L192708
$L192707:
  00423	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$L192708:

; 53   : 	delete m_pTopRightWnd;

  0042a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00430	89 4d e4	 mov	 DWORD PTR $T192710[ebp], ecx
  00433	8b 55 e4	 mov	 edx, DWORD PTR $T192710[ebp]
  00436	89 55 e8	 mov	 DWORD PTR $T192709[ebp], edx
  00439	83 7d e8 00	 cmp	 DWORD PTR $T192709[ebp], 0
  0043d	74 1b		 je	 SHORT $L192711
  0043f	8b f4		 mov	 esi, esp
  00441	6a 01		 push	 1
  00443	8b 45 e8	 mov	 eax, DWORD PTR $T192709[ebp]
  00446	8b 10		 mov	 edx, DWORD PTR [eax]
  00448	8b 4d e8	 mov	 ecx, DWORD PTR $T192709[ebp]
  0044b	ff 52 04	 call	 DWORD PTR [edx+4]
  0044e	3b f4		 cmp	 esi, esp
  00450	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00455	89 45 d0	 mov	 DWORD PTR tv87[ebp], eax
  00458	eb 07		 jmp	 SHORT $L192712
$L192711:
  0045a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L192712:

; 54   : 	delete m_pTopLeftWnd;

  00461	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00464	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00467	89 4d dc	 mov	 DWORD PTR $T192714[ebp], ecx
  0046a	8b 55 dc	 mov	 edx, DWORD PTR $T192714[ebp]
  0046d	89 55 e0	 mov	 DWORD PTR $T192713[ebp], edx
  00470	83 7d e0 00	 cmp	 DWORD PTR $T192713[ebp], 0
  00474	74 1b		 je	 SHORT $L192715
  00476	8b f4		 mov	 esi, esp
  00478	6a 01		 push	 1
  0047a	8b 45 e0	 mov	 eax, DWORD PTR $T192713[ebp]
  0047d	8b 10		 mov	 edx, DWORD PTR [eax]
  0047f	8b 4d e0	 mov	 ecx, DWORD PTR $T192713[ebp]
  00482	ff 52 04	 call	 DWORD PTR [edx+4]
  00485	3b f4		 cmp	 esi, esp
  00487	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048c	89 45 cc	 mov	 DWORD PTR tv95[ebp], eax
  0048f	eb 07		 jmp	 SHORT $L191808
$L192715:
  00491	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$L191808:

; 55   : }

  00498	5f		 pop	 edi
  00499	5e		 pop	 esi
  0049a	83 c4 34	 add	 esp, 52			; 00000034H
  0049d	3b ec		 cmp	 ebp, esp
  0049f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a4	8b e5		 mov	 esp, ebp
  004a6	5d		 pop	 ebp
  004a7	c3		 ret	 0
??1CIrregularBorderMgr@@QAE@XZ ENDP			; CIrregularBorderMgr::~CIrregularBorderMgr
_TEXT	ENDS
PUBLIC	?LoadSubject@CIrregularBorderMgr@@QAEXXZ	; CIrregularBorderMgr::LoadSubject
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LoadSubject@CIrregularBorderMgr@@QAEXXZ PROC NEAR	; CIrregularBorderMgr::LoadSubject
; _this$ = ecx

; 58   : {

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	51		 push	 ecx
  004b4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  004bb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : }

  004be	8b e5		 mov	 esp, ebp
  004c0	5d		 pop	 ebp
  004c1	c3		 ret	 0
?LoadSubject@CIrregularBorderMgr@@QAEXXZ ENDP		; CIrregularBorderMgr::LoadSubject
_TEXT	ENDS
PUBLIC	?DeletePngImage@CIrregularBorderMgr@@QAEXXZ	; CIrregularBorderMgr::DeletePngImage
PUBLIC	?DeleteImage@CTranslucentDialog@@QAEXXZ		; CTranslucentDialog::DeleteImage
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeletePngImage@CIrregularBorderMgr@@QAEXXZ PROC NEAR	; CIrregularBorderMgr::DeletePngImage
; _this$ = ecx

; 62   : {

  004d0	55		 push	 ebp
  004d1	8b ec		 mov	 ebp, esp
  004d3	51		 push	 ecx
  004d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  004db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	m_pBottomLeftWnd->DeleteImage();

  004de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004e1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004e4	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 64   : 	m_pBottomRightWnd->DeleteImage();

  004e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ec	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  004ef	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 65   : 	m_pTopLeftWnd->DeleteImage();

  004f4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004f7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  004fa	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 66   : 	m_pTopRightWnd->DeleteImage();

  004ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00502	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00505	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 67   : }

  0050a	83 c4 04	 add	 esp, 4
  0050d	3b ec		 cmp	 ebp, esp
  0050f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00514	8b e5		 mov	 esp, ebp
  00516	5d		 pop	 ebp
  00517	c3		 ret	 0
?DeletePngImage@CIrregularBorderMgr@@QAEXXZ ENDP	; CIrregularBorderMgr::DeletePngImage
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\translucentdialog.h
_TEXT	ENDS
;	COMDAT ?DeleteImage@CTranslucentDialog@@QAEXXZ
_TEXT	SEGMENT
tv73 = -16						; size = 4
$T192721 = -12						; size = 4
$T192720 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteImage@CTranslucentDialog@@QAEXXZ PROC NEAR	; CTranslucentDialog::DeleteImage, COMDAT
; _this$ = ecx

; 33   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 		if( m_pImage != NULL)

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00025	74 39		 je	 SHORT $L187112

; 35   : 			delete m_pImage; 

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00030	89 55 f4	 mov	 DWORD PTR $T192721[ebp], edx
  00033	8b 45 f4	 mov	 eax, DWORD PTR $T192721[ebp]
  00036	89 45 f8	 mov	 DWORD PTR $T192720[ebp], eax
  00039	83 7d f8 00	 cmp	 DWORD PTR $T192720[ebp], 0
  0003d	74 1a		 je	 SHORT $L192722
  0003f	8b f4		 mov	 esi, esp
  00041	6a 01		 push	 1
  00043	8b 4d f8	 mov	 ecx, DWORD PTR $T192720[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	8b 4d f8	 mov	 ecx, DWORD PTR $T192720[ebp]
  0004b	ff 12		 call	 DWORD PTR [edx]
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 45 f0	 mov	 DWORD PTR tv73[ebp], eax
  00057	eb 07		 jmp	 SHORT $L187112
$L192722:
  00059	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L187112:

; 36   : 		m_pImage = NULL;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0

; 37   : 	};

  0006d	5e		 pop	 esi
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?DeleteImage@CTranslucentDialog@@QAEXXZ ENDP		; CTranslucentDialog::DeleteImage
_TEXT	ENDS
PUBLIC	?ShowTransDlg@CIrregularBorderMgr@@QAEX_N@Z	; CIrregularBorderMgr::ShowTransDlg
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\irregularbordermgr.cpp
_TEXT	SEGMENT
_nShow$ = -8						; size = 4
_this$ = -4						; size = 4
_bShow$ = 8						; size = 1
?ShowTransDlg@CIrregularBorderMgr@@QAEX_N@Z PROC NEAR	; CIrregularBorderMgr::ShowTransDlg
; _this$ = ecx

; 70   : {

  00520	55		 push	 ebp
  00521	8b ec		 mov	 ebp, esp
  00523	83 ec 08	 sub	 esp, 8
  00526	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0052d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00534	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	int nShow = bShow? SW_SHOWNOACTIVATE: SW_HIDE;

  00537	0f b6 45 08	 movzx	 eax, BYTE PTR _bShow$[ebp]
  0053b	f7 d8		 neg	 eax
  0053d	1b c0		 sbb	 eax, eax
  0053f	83 e0 04	 and	 eax, 4
  00542	89 45 f8	 mov	 DWORD PTR _nShow$[ebp], eax

; 72   : 
; 73   : 	m_pTopLeftWnd->ShowWindow(m_pTopLeftWnd->m_pImage ? nShow: SW_HIDE);

  00545	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00548	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0054b	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00551	f7 d8		 neg	 eax
  00553	1b c0		 sbb	 eax, eax
  00555	23 45 f8	 and	 eax, DWORD PTR _nShow$[ebp]
  00558	50		 push	 eax
  00559	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0055f	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 74   : 	m_pTopRightWnd->ShowWindow(m_pTopRightWnd->m_pImage ? nShow: SW_HIDE);

  00564	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00567	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0056a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00570	f7 d9		 neg	 ecx
  00572	1b c9		 sbb	 ecx, ecx
  00574	23 4d f8	 and	 ecx, DWORD PTR _nShow$[ebp]
  00577	51		 push	 ecx
  00578	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0057b	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0057e	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 75   : 	m_pBottomRightWnd->ShowWindow(m_pBottomRightWnd->m_pImage ? nShow: SW_HIDE);

  00583	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00586	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00589	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0058f	f7 da		 neg	 edx
  00591	1b d2		 sbb	 edx, edx
  00593	23 55 f8	 and	 edx, DWORD PTR _nShow$[ebp]
  00596	52		 push	 edx
  00597	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0059a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0059d	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 76   : 	m_pBottomLeftWnd->ShowWindow(m_pBottomLeftWnd->m_pImage ? nShow: SW_HIDE);

  005a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005a5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  005a8	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  005ae	f7 d8		 neg	 eax
  005b0	1b c0		 sbb	 eax, eax
  005b2	23 45 f8	 and	 eax, DWORD PTR _nShow$[ebp]
  005b5	50		 push	 eax
  005b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005b9	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  005bc	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 77   : }

  005c1	83 c4 08	 add	 esp, 8
  005c4	3b ec		 cmp	 ebp, esp
  005c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005cb	8b e5		 mov	 esp, ebp
  005cd	5d		 pop	 ebp
  005ce	c2 04 00	 ret	 4
?ShowTransDlg@CIrregularBorderMgr@@QAEX_N@Z ENDP	; CIrregularBorderMgr::ShowTransDlg
_TEXT	ENDS
PUBLIC	?SetMainWnd@CIrregularBorderMgr@@QAEXPAVCWnd@@@Z ; CIrregularBorderMgr::SetMainWnd
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pWnd$ = 8						; size = 4
?SetMainWnd@CIrregularBorderMgr@@QAEXPAVCWnd@@@Z PROC NEAR ; CIrregularBorderMgr::SetMainWnd
; _this$ = ecx

; 80   : {

  005e0	55		 push	 ebp
  005e1	8b ec		 mov	 ebp, esp
  005e3	51		 push	 ecx
  005e4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  005eb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : }

  005ee	8b e5		 mov	 esp, ebp
  005f0	5d		 pop	 ebp
  005f1	c2 04 00	 ret	 4
?SetMainWnd@CIrregularBorderMgr@@QAEXPAVCWnd@@@Z ENDP	; CIrregularBorderMgr::SetMainWnd
_TEXT	ENDS
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ		; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
PUBLIC	??0Image@Gdiplus@@QAE@PB_WH@Z			; Gdiplus::Image::Image
PUBLIC	??1Image@Gdiplus@@UAE@XZ			; Gdiplus::Image::~Image
PUBLIC	?Clone@Image@Gdiplus@@UAEPAV12@XZ		; Gdiplus::Image::Clone
PUBLIC	?GetWidth@Image@Gdiplus@@QAEIXZ			; Gdiplus::Image::GetWidth
PUBLIC	?GetHeight@Image@Gdiplus@@QAEIXZ		; Gdiplus::Image::GetHeight
PUBLIC	?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ ; Gdiplus::Image::GetLastStatus
EXTRN	__chkstk:NEAR
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
xdata$x	SEGMENT
$T192742 DD	0ffffffffH
	DD	FLAT:$L192731
	DD	00H
	DD	FLAT:$L192732
$T192734 DD	019930520H
	DD	02H
	DD	FLAT:$T192742
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192730 = -4172					; size = 4
$T192729 = -4168					; size = 8
$T192728 = -4160					; size = 4
_h$ = -4156						; size = 4
_w$ = -4152						; size = 4
_image$ = -4144						; size = 16
_lLen$ = -4124						; size = 4
_szWidePath$ = -4116					; size = 4096
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_path$ = 8						; size = 28
?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CloneImage

; 84   : {

  00600	55		 push	 ebp
  00601	8b ec		 mov	 ebp, esp
  00603	6a ff		 push	 -1
  00605	68 00 00 00 00	 push	 __ehhandler$?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0060a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00610	50		 push	 eax
  00611	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00618	b8 40 10 00 00	 mov	 eax, 4160		; 00001040H
  0061d	e8 00 00 00 00	 call	 __chkstk
  00622	56		 push	 esi
  00623	57		 push	 edi
  00624	8d bd b4 ef ff
	ff		 lea	 edi, DWORD PTR [ebp-4172]
  0062a	b9 10 04 00 00	 mov	 ecx, 1040		; 00000410H
  0062f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00634	f3 ab		 rep stosd
  00636	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0063b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0063e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 85   : 	WCHAR szWidePath[2048];   
; 86   : 	long lLen = MultiByteToWideChar(CP_ACP,0,path.c_str(),path.length(),szWidePath,sizeof(szWidePath)); 

  00645	8b f4		 mov	 esi, esp
  00647	68 00 10 00 00	 push	 4096			; 00001000H
  0064c	8d 85 ec ef ff
	ff		 lea	 eax, DWORD PTR _szWidePath$[ebp]
  00652	50		 push	 eax
  00653	8b fc		 mov	 edi, esp
  00655	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  00658	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  0065e	3b fc		 cmp	 edi, esp
  00660	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00665	50		 push	 eax
  00666	8b fc		 mov	 edi, esp
  00668	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  0066b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00671	3b fc		 cmp	 edi, esp
  00673	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00678	50		 push	 eax
  00679	6a 00		 push	 0
  0067b	6a 00		 push	 0
  0067d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00683	3b f4		 cmp	 esi, esp
  00685	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0068a	89 85 e4 ef ff
	ff		 mov	 DWORD PTR _lLen$[ebp], eax

; 87   : 	szWidePath[lLen] = '\0';     

  00690	8b 8d e4 ef ff
	ff		 mov	 ecx, DWORD PTR _lLen$[ebp]
  00696	66 c7 84 4d ec
	ef ff ff 00 00	 mov	 WORD PTR _szWidePath$[ebp+ecx*2], 0

; 88   : 
; 89   : 	Image image(szWidePath);

  006a0	6a 00		 push	 0
  006a2	8d 95 ec ef ff
	ff		 lea	 edx, DWORD PTR _szWidePath$[ebp]
  006a8	52		 push	 edx
  006a9	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  006af	e8 00 00 00 00	 call	 ??0Image@Gdiplus@@QAE@PB_WH@Z ; Gdiplus::Image::Image
  006b4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 90   : 	if(image.GetLastStatus() != S_OK)

  006b8	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  006be	e8 00 00 00 00	 call	 ?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ ; Gdiplus::Image::GetLastStatus
  006c3	85 c0		 test	 eax, eax
  006c5	74 3d		 je	 SHORT $L191839

; 91   : 	{
; 92   : 		return NULL;

  006c7	c7 85 c0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR $T192728[ebp], 0
  006d1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  006d5	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  006db	e8 00 00 00 00	 call	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
  006e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006e7	8b f4		 mov	 esi, esp
  006e9	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  006ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  006f2	3b f4		 cmp	 esi, esp
  006f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006f9	8b 85 c0 ef ff
	ff		 mov	 eax, DWORD PTR $T192728[ebp]
  006ff	e9 a2 00 00 00	 jmp	 $L191834
$L191839:

; 93   : 	}
; 94   : 	int w = image.GetWidth();

  00704	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  0070a	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  0070f	89 85 c8 ef ff
	ff		 mov	 DWORD PTR _w$[ebp], eax

; 95   : 	int h = image.GetHeight(); 

  00715	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  0071b	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  00720	89 85 c4 ef ff
	ff		 mov	 DWORD PTR _h$[ebp], eax

; 96   : 	TRACE("w: %d ,h: %d, %s\r\n", w,h,path.c_str());

  00726	8b f4		 mov	 esi, esp
  00728	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  0072b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00731	3b f4		 cmp	 esi, esp
  00733	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00738	50		 push	 eax
  00739	8b 85 c4 ef ff
	ff		 mov	 eax, DWORD PTR _h$[ebp]
  0073f	50		 push	 eax
  00740	8b 8d c8 ef ff
	ff		 mov	 ecx, DWORD PTR _w$[ebp]
  00746	51		 push	 ecx
  00747	68 00 00 00 00	 push	 OFFSET FLAT:$SG191845
  0074c	6a 60		 push	 96			; 00000060H
  0074e	68 00 00 00 00	 push	 OFFSET FLAT:$SG191844
  00753	8d 8d b8 ef ff
	ff		 lea	 ecx, DWORD PTR $T192729[ebp]
  00759	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0075e	50		 push	 eax
  0075f	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00764	83 c4 14	 add	 esp, 20			; 00000014H

; 97   : 	return image.Clone();

  00767	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  0076d	e8 00 00 00 00	 call	 ?Clone@Image@Gdiplus@@UAEPAV12@XZ ; Gdiplus::Image::Clone
  00772	89 85 b4 ef ff
	ff		 mov	 DWORD PTR $T192730[ebp], eax
  00778	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0077c	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  00782	e8 00 00 00 00	 call	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
  00787	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0078e	8b f4		 mov	 esi, esp
  00790	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  00793	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00799	3b f4		 cmp	 esi, esp
  0079b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007a0	8b 85 b4 ef ff
	ff		 mov	 eax, DWORD PTR $T192730[ebp]
$L191834:

; 98   : }

  007a6	52		 push	 edx
  007a7	8b cd		 mov	 ecx, ebp
  007a9	50		 push	 eax
  007aa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192741
  007b0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007b5	58		 pop	 eax
  007b6	5a		 pop	 edx
  007b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  007c1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007c9	5f		 pop	 edi
  007ca	5e		 pop	 esi
  007cb	81 c4 4c 10 00
	00		 add	 esp, 4172		; 0000104cH
  007d1	3b ec		 cmp	 ebp, esp
  007d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007d8	8b e5		 mov	 esp, ebp
  007da	5d		 pop	 ebp
  007db	c3		 ret	 0
$L192741:
  007dc	02 00 00 00	 DD	 2
  007e0	00 00 00 00	 DD	 $L192740
$L192740:
  007e4	ec ef ff ff	 DD	 -4116			; ffffefecH
  007e8	00 10 00 00	 DD	 4096			; 00001000H
  007ec	00 00 00 00	 DD	 $L192735
  007f0	d0 ef ff ff	 DD	 -4144			; ffffefd0H
  007f4	10 00 00 00	 DD	 16			; 00000010H
  007f8	00 00 00 00	 DD	 $L192736
$L192736:
  007fc	69		 DB	 105			; 00000069H
  007fd	6d		 DB	 109			; 0000006dH
  007fe	61		 DB	 97			; 00000061H
  007ff	67		 DB	 103			; 00000067H
  00800	65		 DB	 101			; 00000065H
  00801	00		 DB	 0
$L192735:
  00802	73		 DB	 115			; 00000073H
  00803	7a		 DB	 122			; 0000007aH
  00804	57		 DB	 87			; 00000057H
  00805	69		 DB	 105			; 00000069H
  00806	64		 DB	 100			; 00000064H
  00807	65		 DB	 101			; 00000065H
  00808	50		 DB	 80			; 00000050H
  00809	61		 DB	 97			; 00000061H
  0080a	74		 DB	 116			; 00000074H
  0080b	68		 DB	 104			; 00000068H
  0080c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192731:
  00047	8b f4		 mov	 esi, esp
  00049	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192732:
  00059	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  0005f	e9 00 00 00 00	 jmp	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
__ehhandler$?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00064	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192734
  00069	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CloneImage
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z	; CIrregularBorderMgr::InitTransDlg
PUBLIC	?OnMove@CIrregularBorderMgr@@QAEXHH@Z		; CIrregularBorderMgr::OnMove
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:NEAR
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	__imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:NEAR
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z:NEAR ; CTranslucentDialog::UpdatePosition
EXTRN	?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:NEAR ; YL_FileInfo::IsValid
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T192819 DD	0ffffffffH
	DD	FLAT:$L192775
	DD	00H
	DD	FLAT:$L192776
	DD	0ffffffffH
	DD	FLAT:$L192777
	DD	02H
	DD	FLAT:$L192778
	DD	0ffffffffH
	DD	FLAT:$L192778
	DD	04H
	DD	FLAT:$L192779
	DD	05H
	DD	FLAT:$L192780
	DD	06H
	DD	FLAT:$L192781
	DD	04H
	DD	FLAT:$L192781
	DD	08H
	DD	FLAT:$L192780
	DD	08H
	DD	FLAT:$L192782
	DD	0aH
	DD	FLAT:$L192783
	DD	08H
	DD	FLAT:$L192785
	DD	0cH
	DD	FLAT:$L192786
	DD	0dH
	DD	FLAT:$L192787
	DD	08H
	DD	FLAT:$L192788
	DD	0fH
	DD	FLAT:$L192789
	DD	08H
	DD	FLAT:$L192790
	DD	011H
	DD	FLAT:$L192791
	DD	012H
	DD	FLAT:$L192792
	DD	08H
	DD	FLAT:$L192793
	DD	014H
	DD	FLAT:$L192794
	DD	08H
	DD	FLAT:$L192796
	DD	016H
	DD	FLAT:$L192797
	DD	017H
	DD	FLAT:$L192798
	DD	08H
	DD	FLAT:$L192799
	DD	019H
	DD	FLAT:$L192800
	DD	08H
	DD	FLAT:$L192801
	DD	01bH
	DD	FLAT:$L192802
	DD	01cH
	DD	FLAT:$L192803
	DD	08H
	DD	FLAT:$L192805
	DD	01eH
	DD	FLAT:$L192806
	DD	01fH
	DD	FLAT:$L192807
$T192810 DD	019930520H
	DD	021H
	DD	FLAT:$T192819
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv596 = -992						; size = 4
tv595 = -988						; size = 4
tv593 = -984						; size = 4
tv652 = -980						; size = 4
tv591 = -976						; size = 4
tv649 = -972						; size = 4
tv589 = -968						; size = 4
tv646 = -964						; size = 4
tv587 = -960						; size = 4
tv586 = -956						; size = 4
tv584 = -952						; size = 4
tv643 = -948						; size = 4
tv582 = -944						; size = 4
tv640 = -940						; size = 4
tv580 = -936						; size = 4
tv637 = -932						; size = 4
tv576 = -928						; size = 4
tv632 = -924						; size = 4
tv572 = -920						; size = 4
tv571 = -916						; size = 4
tv567 = -912						; size = 4
tv625 = -908						; size = 4
tv565 = -904						; size = 4
tv622 = -900						; size = 4
tv563 = -896						; size = 4
tv619 = -892						; size = 4
tv559 = -888						; size = 4
tv614 = -884						; size = 4
tv555 = -880						; size = 4
tv554 = -876						; size = 4
tv549 = -872						; size = 4
tv606 = -868						; size = 4
tv547 = -864						; size = 4
tv603 = -860						; size = 4
tv543 = -856						; size = 4
tv599 = -852						; size = 4
tv66 = -848						; size = 4
$T192774 = -844						; size = 4
$T192773 = -840						; size = 28
$T192772 = -812						; size = 28
$T192771 = -784						; size = 28
$T192770 = -756						; size = 4
$T192769 = -752						; size = 28
$T192768 = -724						; size = 28
$T192767 = -696						; size = 28
$T192766 = -668						; size = 28
$T192765 = -640						; size = 28
$T192764 = -612						; size = 28
$T192763 = -584						; size = 28
$T192762 = -556						; size = 4
$T192761 = -552						; size = 28
$T192760 = -524						; size = 28
$T192759 = -496						; size = 28
$T192758 = -468						; size = 28
$T192757 = -440						; size = 28
$T192756 = -412						; size = 28
$T192755 = -384						; size = 28
$T192754 = -356						; size = 28
$T192753 = -328						; size = 28
$T192752 = -300						; size = 4
$T192751 = -296						; size = 28
$T192750 = -268						; size = 28
$T192749 = -240						; size = 28
$T192748 = -212						; size = 28
$T192747 = -184						; size = 4
$T192746 = -180						; size = 28
$T192745 = -152						; size = 28
_strLog$191893 = -120					; size = 4
_strLog$191873 = -108					; size = 4
_pngpath$191862 = -96					; size = 28
_path$191859 = -60					; size = 28
_pCurSubject$ = -28					; size = 4
_pSkin$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_bMustInit$ = 8						; size = 4
?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z PROC NEAR	; CIrregularBorderMgr::InitTransDlg
; _this$ = ecx

; 101  : {

  00810	55		 push	 ebp
  00811	8b ec		 mov	 ebp, esp
  00813	6a ff		 push	 -1
  00815	68 00 00 00 00	 push	 __ehhandler$?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z
  0081a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00820	50		 push	 eax
  00821	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00828	81 ec d4 03 00
	00		 sub	 esp, 980		; 000003d4H
  0082e	56		 push	 esi
  0082f	57		 push	 edi
  00830	51		 push	 ecx
  00831	8d bd 20 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-992]
  00837	b9 f5 00 00 00	 mov	 ecx, 245		; 000000f5H
  0083c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00841	f3 ab		 rep stosd
  00843	59		 pop	 ecx
  00844	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00849	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0084c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	ISkinMgr *pSkin = AfxGetUIManager()->UIGetSkinMgr();

  0084f	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  00854	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  0085a	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  00860	8b 10		 mov	 edx, DWORD PTR [eax]
  00862	8b f4		 mov	 esi, esp
  00864	8b 8d b0 fc ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  0086a	ff 52 28	 call	 DWORD PTR [edx+40]
  0086d	3b f4		 cmp	 esi, esp
  0086f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00874	89 45 e8	 mov	 DWORD PTR _pSkin$[ebp], eax

; 103  : 	OneSubject *pCurSubject = pSkin->GetCurSubject();

  00877	8b 45 e8	 mov	 eax, DWORD PTR _pSkin$[ebp]
  0087a	8b 10		 mov	 edx, DWORD PTR [eax]
  0087c	8b f4		 mov	 esi, esp
  0087e	8b 4d e8	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  00881	ff 52 28	 call	 DWORD PTR [edx+40]
  00884	3b f4		 cmp	 esi, esp
  00886	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0088b	89 45 e4	 mov	 DWORD PTR _pCurSubject$[ebp], eax

; 104  : 
; 105  : 	if(pCurSubject != m_curSubject || bMustInit)

  0088e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00891	8b 4d e4	 mov	 ecx, DWORD PTR _pCurSubject$[ebp]
  00894	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00897	75 0a		 jne	 SHORT $L191854
  00899	83 7d 08 00	 cmp	 DWORD PTR _bMustInit$[ebp], 0
  0089d	0f 84 c9 0c 00
	00		 je	 $L191850
$L191854:

; 106  : 	{
; 107  : 		LogUserActMsg(STR_USER_CLICK, "Enter InitTransDlg");

  008a3	8b f4		 mov	 esi, esp
  008a5	68 00 00 00 00	 push	 OFFSET FLAT:$SG191857
  008aa	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T192745[ebp]
  008b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  008b6	3b f4		 cmp	 esi, esp
  008b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  008c4	8b f4		 mov	 esi, esp
  008c6	68 00 00 00 00	 push	 OFFSET FLAT:$SG191858
  008cb	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T192746[ebp]
  008d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  008d7	3b f4		 cmp	 esi, esp
  008d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008de	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  008e2	8b f4		 mov	 esi, esp
  008e4	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T192745[ebp]
  008ea	52		 push	 edx
  008eb	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T192746[ebp]
  008f1	50		 push	 eax
  008f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  008f8	83 c4 08	 add	 esp, 8
  008fb	3b f4		 cmp	 esi, esp
  008fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00902	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00906	8b f4		 mov	 esi, esp
  00908	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T192746[ebp]
  0090e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00914	3b f4		 cmp	 esi, esp
  00916	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0091b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00922	8b f4		 mov	 esi, esp
  00924	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T192745[ebp]
  0092a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00930	3b f4		 cmp	 esi, esp
  00932	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 		m_curSubject = pCurSubject;

  00937	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0093a	8b 55 e4	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  0093d	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 109  : 
; 110  : 		string path = pSkin->GetSkinPath();

  00940	8b f4		 mov	 esi, esp
  00942	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T192747[ebp]
  00948	50		 push	 eax
  00949	8b 4d e8	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  0094c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0094e	8b 4d e8	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  00951	ff 52 40	 call	 DWORD PTR [edx+64]
  00954	3b f4		 cmp	 esi, esp
  00956	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0095b	89 85 ac fc ff
	ff		 mov	 DWORD PTR tv599[ebp], eax
  00961	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR tv599[ebp]
  00967	89 85 a8 fc ff
	ff		 mov	 DWORD PTR tv543[ebp], eax
  0096d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00974	8b f4		 mov	 esi, esp
  00976	8b 8d a8 fc ff
	ff		 mov	 ecx, DWORD PTR tv543[ebp]
  0097c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00982	3b f4		 cmp	 esi, esp
  00984	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00989	8b f4		 mov	 esi, esp
  0098b	50		 push	 eax
  0098c	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  0098f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00995	3b f4		 cmp	 esi, esp
  00997	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0099c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  009a0	8b f4		 mov	 esi, esp
  009a2	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T192747[ebp]
  009a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  009ae	3b f4		 cmp	 esi, esp
  009b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 111  : 
; 112  : 		DeletePngImage();

  009b5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009b8	e8 00 00 00 00	 call	 ?DeletePngImage@CIrregularBorderMgr@@QAEXXZ ; CIrregularBorderMgr::DeletePngImage

; 113  : 		if(m_curSubject == NULL)

  009bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009c0	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  009c4	75 52		 jne	 SHORT $L191861

; 114  : 		{
; 115  : 			m_pTopLeftWnd->ShowWindow(SW_HIDE);

  009c6	6a 00		 push	 0
  009c8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  009cb	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  009ce	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 116  : 			m_pTopRightWnd->ShowWindow(SW_HIDE);

  009d3	6a 00		 push	 0
  009d5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  009d8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009db	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 117  : 			m_pBottomRightWnd->ShowWindow(SW_HIDE);

  009e0	6a 00		 push	 0
  009e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009e5	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  009e8	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 118  : 			m_pBottomLeftWnd->ShowWindow(SW_HIDE);

  009ed	6a 00		 push	 0
  009ef	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  009f2	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  009f5	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 119  : 			return;

  009fa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a01	8b f4		 mov	 esi, esp
  00a03	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  00a06	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00a0c	3b f4		 cmp	 esi, esp
  00a0e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a13	e9 54 0b 00 00	 jmp	 $L191850
$L191861:

; 120  : 		}
; 121  : 		string pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\topleft.png";

  00a18	68 00 00 00 00	 push	 OFFSET FLAT:$SG191867
  00a1d	8d 45 c4	 lea	 eax, DWORD PTR _path$191859[ebp]
  00a20	50		 push	 eax
  00a21	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T192748[ebp]
  00a27	51		 push	 ecx
  00a28	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00a2d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a30	89 85 a4 fc ff
	ff		 mov	 DWORD PTR tv603[ebp], eax
  00a36	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR tv603[ebp]
  00a3c	89 95 a0 fc ff
	ff		 mov	 DWORD PTR tv547[ebp], edx
  00a42	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00a46	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00a49	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00a4c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00a4f	51		 push	 ecx
  00a50	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR tv547[ebp]
  00a56	52		 push	 edx
  00a57	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T192749[ebp]
  00a5d	50		 push	 eax
  00a5e	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00a63	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a66	89 85 9c fc ff
	ff		 mov	 DWORD PTR tv606[ebp], eax
  00a6c	8b 8d 9c fc ff
	ff		 mov	 ecx, DWORD PTR tv606[ebp]
  00a72	89 8d 98 fc ff
	ff		 mov	 DWORD PTR tv549[ebp], ecx
  00a78	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00a7c	68 00 00 00 00	 push	 OFFSET FLAT:$SG191866
  00a81	8b 95 98 fc ff
	ff		 mov	 edx, DWORD PTR tv549[ebp]
  00a87	52		 push	 edx
  00a88	8d 45 a0	 lea	 eax, DWORD PTR _pngpath$191862[ebp]
  00a8b	50		 push	 eax
  00a8c	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00a91	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a94	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00a98	8b f4		 mov	 esi, esp
  00a9a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T192749[ebp]
  00aa0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00aa6	3b f4		 cmp	 esi, esp
  00aa8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aad	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00ab1	8b f4		 mov	 esi, esp
  00ab3	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T192748[ebp]
  00ab9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00abf	3b f4		 cmp	 esi, esp
  00ac1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 122  : 		LogUserActMsg(STR_USER_CLICK, pngpath.c_str());

  00ac6	8b f4		 mov	 esi, esp
  00ac8	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  00acb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00ad1	3b f4		 cmp	 esi, esp
  00ad3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ad8	8b f4		 mov	 esi, esp
  00ada	50		 push	 eax
  00adb	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T192750[ebp]
  00ae1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00ae7	3b f4		 cmp	 esi, esp
  00ae9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aee	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00af2	8b f4		 mov	 esi, esp
  00af4	68 00 00 00 00	 push	 OFFSET FLAT:$SG191870
  00af9	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T192751[ebp]
  00aff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00b05	3b f4		 cmp	 esi, esp
  00b07	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b0c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00b10	8b f4		 mov	 esi, esp
  00b12	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T192750[ebp]
  00b18	51		 push	 ecx
  00b19	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR $T192751[ebp]
  00b1f	52		 push	 edx
  00b20	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00b26	83 c4 08	 add	 esp, 8
  00b29	3b f4		 cmp	 esi, esp
  00b2b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b30	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00b34	8b f4		 mov	 esi, esp
  00b36	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T192751[ebp]
  00b3c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00b42	3b f4		 cmp	 esi, esp
  00b44	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b49	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00b4d	8b f4		 mov	 esi, esp
  00b4f	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T192750[ebp]
  00b55	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00b5b	3b f4		 cmp	 esi, esp
  00b5d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 		if( YL_FileInfo::IsValid(pngpath) && pCurSubject->ptLeftTop.x != -1000)

  00b62	8d 45 a0	 lea	 eax, DWORD PTR _pngpath$191862[ebp]
  00b65	50		 push	 eax
  00b66	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  00b6b	83 c4 04	 add	 esp, 4
  00b6e	0f b6 c8	 movzx	 ecx, al
  00b71	85 c9		 test	 ecx, ecx
  00b73	0f 84 b7 01 00
	00		 je	 $L191871
  00b79	8b 55 e4	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  00b7c	81 7a 70 18 fc
	ff ff		 cmp	 DWORD PTR [edx+112], -1000 ; fffffc18H
  00b83	0f 84 a7 01 00
	00		 je	 $L191871

; 124  : 		{
; 125  : 			m_pTopLeftWnd->ShowWindow(SW_SHOWNOACTIVATE);

  00b89	6a 04		 push	 4
  00b8b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00b8e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b91	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 126  : 			m_pTopLeftWnd->m_pImage = CloneImage(pngpath.c_str());

  00b96	8b f4		 mov	 esi, esp
  00b98	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  00b9b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00ba1	3b f4		 cmp	 esi, esp
  00ba3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ba8	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00bab	8b cc		 mov	 ecx, esp
  00bad	89 a5 d4 fe ff
	ff		 mov	 DWORD PTR $T192752[ebp], esp
  00bb3	8b f4		 mov	 esi, esp
  00bb5	50		 push	 eax
  00bb6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00bbc	3b f4		 cmp	 esi, esp
  00bbe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bc3	89 85 94 fc ff
	ff		 mov	 DWORD PTR tv554[ebp], eax
  00bc9	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  00bce	83 c4 1c	 add	 esp, 28			; 0000001cH
  00bd1	89 85 90 fc ff
	ff		 mov	 DWORD PTR tv555[ebp], eax
  00bd7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bda	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00bdd	8b 85 90 fc ff
	ff		 mov	 eax, DWORD PTR tv555[ebp]
  00be3	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 127  : 			CString strLog;

  00be9	8b f4		 mov	 esi, esp
  00beb	8d 4d 94	 lea	 ecx, DWORD PTR _strLog$191873[ebp]
  00bee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00bf4	3b f4		 cmp	 esi, esp
  00bf6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bfb	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 128  : 			strLog.Format("cloneTopLeft: %d ,h: %d, %s\r\n", m_pTopLeftWnd->m_pImage->GetWidth(),m_pTopLeftWnd->m_pImage->GetHeight(),path.c_str());

  00bff	8b f4		 mov	 esi, esp
  00c01	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  00c04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00c0a	3b f4		 cmp	 esi, esp
  00c0c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c11	8b f4		 mov	 esi, esp
  00c13	50		 push	 eax
  00c14	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00c17	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00c1a	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00c20	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  00c25	50		 push	 eax
  00c26	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00c29	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00c2c	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  00c32	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  00c37	50		 push	 eax
  00c38	68 00 00 00 00	 push	 OFFSET FLAT:$SG191874
  00c3d	8d 55 94	 lea	 edx, DWORD PTR _strLog$191873[ebp]
  00c40	52		 push	 edx
  00c41	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00c47	83 c4 14	 add	 esp, 20			; 00000014H
  00c4a	3b f4		 cmp	 esi, esp
  00c4c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 129  : 			LogUserActMsg(STR_USER_CLICK, string(strLog));

  00c51	8b f4		 mov	 esi, esp
  00c53	68 00 00 00 00	 push	 OFFSET FLAT:$SG191877
  00c58	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T192754[ebp]
  00c5e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00c64	3b f4		 cmp	 esi, esp
  00c66	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c6b	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00c6f	8b f4		 mov	 esi, esp
  00c71	8d 4d 94	 lea	 ecx, DWORD PTR _strLog$191873[ebp]
  00c74	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00c7a	3b f4		 cmp	 esi, esp
  00c7c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c81	8b f4		 mov	 esi, esp
  00c83	50		 push	 eax
  00c84	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T192753[ebp]
  00c8a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00c90	3b f4		 cmp	 esi, esp
  00c92	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c97	89 85 8c fc ff
	ff		 mov	 DWORD PTR tv614[ebp], eax
  00c9d	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR tv614[ebp]
  00ca3	89 85 88 fc ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
  00ca9	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00cad	8b f4		 mov	 esi, esp
  00caf	8b 8d 88 fc ff
	ff		 mov	 ecx, DWORD PTR tv559[ebp]
  00cb5	51		 push	 ecx
  00cb6	8d 95 9c fe ff
	ff		 lea	 edx, DWORD PTR $T192754[ebp]
  00cbc	52		 push	 edx
  00cbd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00cc3	83 c4 08	 add	 esp, 8
  00cc6	3b f4		 cmp	 esi, esp
  00cc8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ccd	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00cd1	8b f4		 mov	 esi, esp
  00cd3	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T192753[ebp]
  00cd9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00cdf	3b f4		 cmp	 esi, esp
  00ce1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ce6	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00cea	8b f4		 mov	 esi, esp
  00cec	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T192754[ebp]
  00cf2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00cf8	3b f4		 cmp	 esi, esp
  00cfa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 130  : 			m_pTopLeftWnd->UpdatePosition( pCurSubject->ptLeftTop);

  00cff	8b 45 e4	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  00d02	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00d05	51		 push	 ecx
  00d06	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00d09	52		 push	 edx
  00d0a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00d0d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d10	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 131  : 		}else

  00d15	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00d19	8b f4		 mov	 esi, esp
  00d1b	8d 4d 94	 lea	 ecx, DWORD PTR _strLog$191873[ebp]
  00d1e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00d24	3b f4		 cmp	 esi, esp
  00d26	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d2b	e9 9b 00 00 00	 jmp	 $L191878
$L191871:

; 132  : 		{
; 133  : 			m_pTopLeftWnd->ShowWindow(SW_HIDE);

  00d30	6a 00		 push	 0
  00d32	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d35	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00d38	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 134  : 			LogUserActMsg(STR_USER_CLICK, "TopLeft hide");

  00d3d	8b f4		 mov	 esi, esp
  00d3f	68 00 00 00 00	 push	 OFFSET FLAT:$SG191881
  00d44	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T192755[ebp]
  00d4a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00d50	3b f4		 cmp	 esi, esp
  00d52	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d57	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00d5b	8b f4		 mov	 esi, esp
  00d5d	68 00 00 00 00	 push	 OFFSET FLAT:$SG191882
  00d62	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T192756[ebp]
  00d68	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00d6e	3b f4		 cmp	 esi, esp
  00d70	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d75	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00d79	8b f4		 mov	 esi, esp
  00d7b	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T192755[ebp]
  00d81	52		 push	 edx
  00d82	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR $T192756[ebp]
  00d88	50		 push	 eax
  00d89	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00d8f	83 c4 08	 add	 esp, 8
  00d92	3b f4		 cmp	 esi, esp
  00d94	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d99	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00d9d	8b f4		 mov	 esi, esp
  00d9f	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T192756[ebp]
  00da5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00dab	3b f4		 cmp	 esi, esp
  00dad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00db2	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00db6	8b f4		 mov	 esi, esp
  00db8	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T192755[ebp]
  00dbe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00dc4	3b f4		 cmp	 esi, esp
  00dc6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L191878:

; 135  : 		}
; 136  : 
; 137  : 		pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\topright.png";

  00dcb	68 00 00 00 00	 push	 OFFSET FLAT:$SG191887
  00dd0	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  00dd3	51		 push	 ecx
  00dd4	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR $T192757[ebp]
  00dda	52		 push	 edx
  00ddb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00de0	83 c4 0c	 add	 esp, 12			; 0000000cH
  00de3	89 85 84 fc ff
	ff		 mov	 DWORD PTR tv619[ebp], eax
  00de9	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR tv619[ebp]
  00def	89 85 80 fc ff
	ff		 mov	 DWORD PTR tv563[ebp], eax
  00df5	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00df9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00dfc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00dff	83 c2 1c	 add	 edx, 28			; 0000001cH
  00e02	52		 push	 edx
  00e03	8b 85 80 fc ff
	ff		 mov	 eax, DWORD PTR tv563[ebp]
  00e09	50		 push	 eax
  00e0a	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T192758[ebp]
  00e10	51		 push	 ecx
  00e11	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00e16	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e19	89 85 7c fc ff
	ff		 mov	 DWORD PTR tv622[ebp], eax
  00e1f	8b 95 7c fc ff
	ff		 mov	 edx, DWORD PTR tv622[ebp]
  00e25	89 95 78 fc ff
	ff		 mov	 DWORD PTR tv565[ebp], edx
  00e2b	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00e2f	68 00 00 00 00	 push	 OFFSET FLAT:$SG191886
  00e34	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR tv565[ebp]
  00e3a	50		 push	 eax
  00e3b	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T192759[ebp]
  00e41	51		 push	 ecx
  00e42	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00e47	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e4a	89 85 74 fc ff
	ff		 mov	 DWORD PTR tv625[ebp], eax
  00e50	8b 95 74 fc ff
	ff		 mov	 edx, DWORD PTR tv625[ebp]
  00e56	89 95 70 fc ff
	ff		 mov	 DWORD PTR tv567[ebp], edx
  00e5c	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  00e60	8b f4		 mov	 esi, esp
  00e62	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR tv567[ebp]
  00e68	50		 push	 eax
  00e69	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  00e6c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00e72	3b f4		 cmp	 esi, esp
  00e74	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e79	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00e7d	8b f4		 mov	 esi, esp
  00e7f	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T192759[ebp]
  00e85	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00e8b	3b f4		 cmp	 esi, esp
  00e8d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e92	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00e96	8b f4		 mov	 esi, esp
  00e98	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T192758[ebp]
  00e9e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00ea4	3b f4		 cmp	 esi, esp
  00ea6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eab	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00eaf	8b f4		 mov	 esi, esp
  00eb1	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T192757[ebp]
  00eb7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00ebd	3b f4		 cmp	 esi, esp
  00ebf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 138  : 		LogUserActMsg(STR_USER_CLICK, pngpath.c_str());

  00ec4	8b f4		 mov	 esi, esp
  00ec6	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  00ec9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00ecf	3b f4		 cmp	 esi, esp
  00ed1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ed6	8b f4		 mov	 esi, esp
  00ed8	50		 push	 eax
  00ed9	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192760[ebp]
  00edf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00ee5	3b f4		 cmp	 esi, esp
  00ee7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eec	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00ef0	8b f4		 mov	 esi, esp
  00ef2	68 00 00 00 00	 push	 OFFSET FLAT:$SG191890
  00ef7	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192761[ebp]
  00efd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00f03	3b f4		 cmp	 esi, esp
  00f05	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f0a	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00f0e	8b f4		 mov	 esi, esp
  00f10	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192760[ebp]
  00f16	51		 push	 ecx
  00f17	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR $T192761[ebp]
  00f1d	52		 push	 edx
  00f1e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00f24	83 c4 08	 add	 esp, 8
  00f27	3b f4		 cmp	 esi, esp
  00f29	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f2e	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00f32	8b f4		 mov	 esi, esp
  00f34	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192761[ebp]
  00f3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00f40	3b f4		 cmp	 esi, esp
  00f42	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f47	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00f4b	8b f4		 mov	 esi, esp
  00f4d	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192760[ebp]
  00f53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00f59	3b f4		 cmp	 esi, esp
  00f5b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 139  : 		if( YL_FileInfo::IsValid(pngpath)&& pCurSubject->ptRightTop.x != -1000)

  00f60	8d 45 a0	 lea	 eax, DWORD PTR _pngpath$191862[ebp]
  00f63	50		 push	 eax
  00f64	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  00f69	83 c4 04	 add	 esp, 4
  00f6c	0f b6 c8	 movzx	 ecx, al
  00f6f	85 c9		 test	 ecx, ecx
  00f71	0f 84 b7 01 00
	00		 je	 $L191891
  00f77	8b 55 e4	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  00f7a	81 7a 78 18 fc
	ff ff		 cmp	 DWORD PTR [edx+120], -1000 ; fffffc18H
  00f81	0f 84 a7 01 00
	00		 je	 $L191891

; 140  : 		{
; 141  : 			m_pTopRightWnd->ShowWindow(SW_SHOWNOACTIVATE);

  00f87	6a 04		 push	 4
  00f89	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00f8c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00f8f	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 142  : 			m_pTopRightWnd->m_pImage = CloneImage(pngpath.c_str());

  00f94	8b f4		 mov	 esi, esp
  00f96	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  00f99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00f9f	3b f4		 cmp	 esi, esp
  00fa1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fa6	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00fa9	8b cc		 mov	 ecx, esp
  00fab	89 a5 d4 fd ff
	ff		 mov	 DWORD PTR $T192762[ebp], esp
  00fb1	8b f4		 mov	 esi, esp
  00fb3	50		 push	 eax
  00fb4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00fba	3b f4		 cmp	 esi, esp
  00fbc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fc1	89 85 6c fc ff
	ff		 mov	 DWORD PTR tv571[ebp], eax
  00fc7	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  00fcc	83 c4 1c	 add	 esp, 28			; 0000001cH
  00fcf	89 85 68 fc ff
	ff		 mov	 DWORD PTR tv572[ebp], eax
  00fd5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00fdb	8b 85 68 fc ff
	ff		 mov	 eax, DWORD PTR tv572[ebp]
  00fe1	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 143  : 
; 144  : 			CString strLog;

  00fe7	8b f4		 mov	 esi, esp
  00fe9	8d 4d 88	 lea	 ecx, DWORD PTR _strLog$191893[ebp]
  00fec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00ff2	3b f4		 cmp	 esi, esp
  00ff4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ff9	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H

; 145  : 			strLog.Format("cloneTopRight: %d ,h: %d, %s\r\n", m_pTopRightWnd->m_pImage->GetWidth(),m_pTopRightWnd->m_pImage->GetHeight(),path.c_str());

  00ffd	8b f4		 mov	 esi, esp
  00fff	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  01002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  01008	3b f4		 cmp	 esi, esp
  0100a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0100f	8b f4		 mov	 esi, esp
  01011	50		 push	 eax
  01012	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01015	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01018	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0101e	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  01023	50		 push	 eax
  01024	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01027	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0102a	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  01030	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  01035	50		 push	 eax
  01036	68 00 00 00 00	 push	 OFFSET FLAT:$SG191894
  0103b	8d 55 88	 lea	 edx, DWORD PTR _strLog$191893[ebp]
  0103e	52		 push	 edx
  0103f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  01045	83 c4 14	 add	 esp, 20			; 00000014H
  01048	3b f4		 cmp	 esi, esp
  0104a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 146  : 			LogUserActMsg(STR_USER_CLICK, string(strLog));

  0104f	8b f4		 mov	 esi, esp
  01051	68 00 00 00 00	 push	 OFFSET FLAT:$SG191897
  01056	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T192764[ebp]
  0105c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  01062	3b f4		 cmp	 esi, esp
  01064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01069	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  0106d	8b f4		 mov	 esi, esp
  0106f	8d 4d 88	 lea	 ecx, DWORD PTR _strLog$191893[ebp]
  01072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  01078	3b f4		 cmp	 esi, esp
  0107a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0107f	8b f4		 mov	 esi, esp
  01081	50		 push	 eax
  01082	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192763[ebp]
  01088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0108e	3b f4		 cmp	 esi, esp
  01090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01095	89 85 64 fc ff
	ff		 mov	 DWORD PTR tv632[ebp], eax
  0109b	8b 85 64 fc ff
	ff		 mov	 eax, DWORD PTR tv632[ebp]
  010a1	89 85 60 fc ff
	ff		 mov	 DWORD PTR tv576[ebp], eax
  010a7	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  010ab	8b f4		 mov	 esi, esp
  010ad	8b 8d 60 fc ff
	ff		 mov	 ecx, DWORD PTR tv576[ebp]
  010b3	51		 push	 ecx
  010b4	8d 95 9c fd ff
	ff		 lea	 edx, DWORD PTR $T192764[ebp]
  010ba	52		 push	 edx
  010bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  010c1	83 c4 08	 add	 esp, 8
  010c4	3b f4		 cmp	 esi, esp
  010c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010cb	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  010cf	8b f4		 mov	 esi, esp
  010d1	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192763[ebp]
  010d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  010dd	3b f4		 cmp	 esi, esp
  010df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010e4	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  010e8	8b f4		 mov	 esi, esp
  010ea	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T192764[ebp]
  010f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  010f6	3b f4		 cmp	 esi, esp
  010f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  : 
; 148  : 			m_pTopRightWnd->UpdatePosition(pCurSubject->ptRightTop);

  010fd	8b 45 e4	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01100	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  01103	51		 push	 ecx
  01104	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  01107	52		 push	 edx
  01108	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0110b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0110e	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 149  : 		}

  01113	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  01117	8b f4		 mov	 esi, esp
  01119	8d 4d 88	 lea	 ecx, DWORD PTR _strLog$191893[ebp]
  0111c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01122	3b f4		 cmp	 esi, esp
  01124	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 150  : 		else

  01129	e9 9b 00 00 00	 jmp	 $L191898
$L191891:

; 151  : 		{
; 152  : 			m_pTopRightWnd->ShowWindow(SW_HIDE);

  0112e	6a 00		 push	 0
  01130	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01133	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  01136	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 153  : 			LogUserActMsg(STR_USER_CLICK, "TopRight Hide");

  0113b	8b f4		 mov	 esi, esp
  0113d	68 00 00 00 00	 push	 OFFSET FLAT:$SG191901
  01142	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T192765[ebp]
  01148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0114e	3b f4		 cmp	 esi, esp
  01150	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01155	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  01159	8b f4		 mov	 esi, esp
  0115b	68 00 00 00 00	 push	 OFFSET FLAT:$SG191902
  01160	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR $T192766[ebp]
  01166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0116c	3b f4		 cmp	 esi, esp
  0116e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01173	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  01177	8b f4		 mov	 esi, esp
  01179	8d 95 80 fd ff
	ff		 lea	 edx, DWORD PTR $T192765[ebp]
  0117f	52		 push	 edx
  01180	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR $T192766[ebp]
  01186	50		 push	 eax
  01187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0118d	83 c4 08	 add	 esp, 8
  01190	3b f4		 cmp	 esi, esp
  01192	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01197	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  0119b	8b f4		 mov	 esi, esp
  0119d	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR $T192766[ebp]
  011a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  011a9	3b f4		 cmp	 esi, esp
  011ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011b0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  011b4	8b f4		 mov	 esi, esp
  011b6	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T192765[ebp]
  011bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  011c2	3b f4		 cmp	 esi, esp
  011c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L191898:

; 154  : 		}
; 155  : 
; 156  : 		pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\bottomright.png";

  011c9	68 00 00 00 00	 push	 OFFSET FLAT:$SG191907
  011ce	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  011d1	51		 push	 ecx
  011d2	8d 95 48 fd ff
	ff		 lea	 edx, DWORD PTR $T192767[ebp]
  011d8	52		 push	 edx
  011d9	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  011de	83 c4 0c	 add	 esp, 12			; 0000000cH
  011e1	89 85 5c fc ff
	ff		 mov	 DWORD PTR tv637[ebp], eax
  011e7	8b 85 5c fc ff
	ff		 mov	 eax, DWORD PTR tv637[ebp]
  011ed	89 85 58 fc ff
	ff		 mov	 DWORD PTR tv580[ebp], eax
  011f3	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  011f7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  011fa	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  011fd	83 c2 1c	 add	 edx, 28			; 0000001cH
  01200	52		 push	 edx
  01201	8b 85 58 fc ff
	ff		 mov	 eax, DWORD PTR tv580[ebp]
  01207	50		 push	 eax
  01208	8d 8d 2c fd ff
	ff		 lea	 ecx, DWORD PTR $T192768[ebp]
  0120e	51		 push	 ecx
  0120f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01214	83 c4 0c	 add	 esp, 12			; 0000000cH
  01217	89 85 54 fc ff
	ff		 mov	 DWORD PTR tv640[ebp], eax
  0121d	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR tv640[ebp]
  01223	89 95 50 fc ff
	ff		 mov	 DWORD PTR tv582[ebp], edx
  01229	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0122d	68 00 00 00 00	 push	 OFFSET FLAT:$SG191906
  01232	8b 85 50 fc ff
	ff		 mov	 eax, DWORD PTR tv582[ebp]
  01238	50		 push	 eax
  01239	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T192769[ebp]
  0123f	51		 push	 ecx
  01240	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01245	83 c4 0c	 add	 esp, 12			; 0000000cH
  01248	89 85 4c fc ff
	ff		 mov	 DWORD PTR tv643[ebp], eax
  0124e	8b 95 4c fc ff
	ff		 mov	 edx, DWORD PTR tv643[ebp]
  01254	89 95 48 fc ff
	ff		 mov	 DWORD PTR tv584[ebp], edx
  0125a	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0125e	8b f4		 mov	 esi, esp
  01260	8b 85 48 fc ff
	ff		 mov	 eax, DWORD PTR tv584[ebp]
  01266	50		 push	 eax
  01267	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  0126a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  01270	3b f4		 cmp	 esi, esp
  01272	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01277	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0127b	8b f4		 mov	 esi, esp
  0127d	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T192769[ebp]
  01283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01289	3b f4		 cmp	 esi, esp
  0128b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01290	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  01294	8b f4		 mov	 esi, esp
  01296	8d 8d 2c fd ff
	ff		 lea	 ecx, DWORD PTR $T192768[ebp]
  0129c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  012a2	3b f4		 cmp	 esi, esp
  012a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  012a9	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  012ad	8b f4		 mov	 esi, esp
  012af	8d 8d 48 fd ff
	ff		 lea	 ecx, DWORD PTR $T192767[ebp]
  012b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  012bb	3b f4		 cmp	 esi, esp
  012bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 157  : 		if( YL_FileInfo::IsValid(pngpath)&& pCurSubject->ptRightBottom.x != -1000)

  012c2	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  012c5	51		 push	 ecx
  012c6	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  012cb	83 c4 04	 add	 esp, 4
  012ce	0f b6 d0	 movzx	 edx, al
  012d1	85 d2		 test	 edx, edx
  012d3	0f 84 8d 00 00
	00		 je	 $L191908
  012d9	8b 45 e4	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  012dc	81 b8 88 00 00
	00 18 fc ff ff	 cmp	 DWORD PTR [eax+136], -1000 ; fffffc18H
  012e6	74 7e		 je	 SHORT $L191908

; 158  : 		{
; 159  : 			m_pBottomRightWnd->ShowWindow(SW_SHOWNOACTIVATE);

  012e8	6a 04		 push	 4
  012ea	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  012ed	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  012f0	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 160  : 			m_pBottomRightWnd->m_pImage = CloneImage(pngpath.c_str());

  012f5	8b f4		 mov	 esi, esp
  012f7	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  012fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  01300	3b f4		 cmp	 esi, esp
  01302	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01307	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0130a	8b cc		 mov	 ecx, esp
  0130c	89 a5 0c fd ff
	ff		 mov	 DWORD PTR $T192770[ebp], esp
  01312	8b f4		 mov	 esi, esp
  01314	50		 push	 eax
  01315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0131b	3b f4		 cmp	 esi, esp
  0131d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01322	89 85 44 fc ff
	ff		 mov	 DWORD PTR tv586[ebp], eax
  01328	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  0132d	83 c4 1c	 add	 esp, 28			; 0000001cH
  01330	89 85 40 fc ff
	ff		 mov	 DWORD PTR tv587[ebp], eax
  01336	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01339	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0133c	8b 8d 40 fc ff
	ff		 mov	 ecx, DWORD PTR tv587[ebp]
  01342	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 161  : 			m_pBottomRightWnd->UpdatePosition(pCurSubject->ptRightBottom);

  01348	8b 55 e4	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  0134b	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  01351	50		 push	 eax
  01352	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  01358	51		 push	 ecx
  01359	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0135c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0135f	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 162  : 		}
; 163  : 		else

  01364	eb 0d		 jmp	 SHORT $L191910
$L191908:

; 164  : 		{
; 165  : 			m_pBottomRightWnd->ShowWindow(SW_HIDE);

  01366	6a 00		 push	 0
  01368	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0136b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0136e	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L191910:

; 166  : 		}
; 167  : 
; 168  : 		pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\bottomleft.png";

  01373	68 00 00 00 00	 push	 OFFSET FLAT:$SG191915
  01378	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  0137b	51		 push	 ecx
  0137c	8d 95 f0 fc ff
	ff		 lea	 edx, DWORD PTR $T192771[ebp]
  01382	52		 push	 edx
  01383	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  01388	83 c4 0c	 add	 esp, 12			; 0000000cH
  0138b	89 85 3c fc ff
	ff		 mov	 DWORD PTR tv646[ebp], eax
  01391	8b 85 3c fc ff
	ff		 mov	 eax, DWORD PTR tv646[ebp]
  01397	89 85 38 fc ff
	ff		 mov	 DWORD PTR tv589[ebp], eax
  0139d	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  013a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  013a4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  013a7	83 c2 1c	 add	 edx, 28			; 0000001cH
  013aa	52		 push	 edx
  013ab	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR tv589[ebp]
  013b1	50		 push	 eax
  013b2	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T192772[ebp]
  013b8	51		 push	 ecx
  013b9	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  013be	83 c4 0c	 add	 esp, 12			; 0000000cH
  013c1	89 85 34 fc ff
	ff		 mov	 DWORD PTR tv649[ebp], eax
  013c7	8b 95 34 fc ff
	ff		 mov	 edx, DWORD PTR tv649[ebp]
  013cd	89 95 30 fc ff
	ff		 mov	 DWORD PTR tv591[ebp], edx
  013d3	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  013d7	68 00 00 00 00	 push	 OFFSET FLAT:$SG191914
  013dc	8b 85 30 fc ff
	ff		 mov	 eax, DWORD PTR tv591[ebp]
  013e2	50		 push	 eax
  013e3	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T192773[ebp]
  013e9	51		 push	 ecx
  013ea	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  013ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  013f2	89 85 2c fc ff
	ff		 mov	 DWORD PTR tv652[ebp], eax
  013f8	8b 95 2c fc ff
	ff		 mov	 edx, DWORD PTR tv652[ebp]
  013fe	89 95 28 fc ff
	ff		 mov	 DWORD PTR tv593[ebp], edx
  01404	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  01408	8b f4		 mov	 esi, esp
  0140a	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR tv593[ebp]
  01410	50		 push	 eax
  01411	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  01414	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0141a	3b f4		 cmp	 esi, esp
  0141c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01421	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  01425	8b f4		 mov	 esi, esp
  01427	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T192773[ebp]
  0142d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01433	3b f4		 cmp	 esi, esp
  01435	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0143a	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  0143e	8b f4		 mov	 esi, esp
  01440	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T192772[ebp]
  01446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0144c	3b f4		 cmp	 esi, esp
  0144e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01453	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  01457	8b f4		 mov	 esi, esp
  01459	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T192771[ebp]
  0145f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01465	3b f4		 cmp	 esi, esp
  01467	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 169  : 		if( YL_FileInfo::IsValid(pngpath)&& pCurSubject->ptLeftBottom.x != -1000)

  0146c	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  0146f	51		 push	 ecx
  01470	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  01475	83 c4 04	 add	 esp, 4
  01478	0f b6 d0	 movzx	 edx, al
  0147b	85 d2		 test	 edx, edx
  0147d	0f 84 8d 00 00
	00		 je	 $L191916
  01483	8b 45 e4	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01486	81 b8 80 00 00
	00 18 fc ff ff	 cmp	 DWORD PTR [eax+128], -1000 ; fffffc18H
  01490	74 7e		 je	 SHORT $L191916

; 170  : 		{
; 171  : 			m_pBottomLeftWnd->ShowWindow(SW_SHOWNOACTIVATE);

  01492	6a 04		 push	 4
  01494	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01497	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0149a	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 172  : 			m_pBottomLeftWnd->m_pImage = CloneImage(pngpath.c_str());

  0149f	8b f4		 mov	 esi, esp
  014a1	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  014a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  014aa	3b f4		 cmp	 esi, esp
  014ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014b1	83 ec 1c	 sub	 esp, 28			; 0000001cH
  014b4	8b cc		 mov	 ecx, esp
  014b6	89 a5 b4 fc ff
	ff		 mov	 DWORD PTR $T192774[ebp], esp
  014bc	8b f4		 mov	 esi, esp
  014be	50		 push	 eax
  014bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  014c5	3b f4		 cmp	 esi, esp
  014c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014cc	89 85 24 fc ff
	ff		 mov	 DWORD PTR tv595[ebp], eax
  014d2	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  014d7	83 c4 1c	 add	 esp, 28			; 0000001cH
  014da	89 85 20 fc ff
	ff		 mov	 DWORD PTR tv596[ebp], eax
  014e0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  014e3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  014e6	8b 8d 20 fc ff
	ff		 mov	 ecx, DWORD PTR tv596[ebp]
  014ec	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 173  : 			m_pBottomLeftWnd->UpdatePosition(pCurSubject->ptLeftBottom);

  014f2	8b 55 e4	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  014f5	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  014fb	50		 push	 eax
  014fc	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  01502	51		 push	 ecx
  01503	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01506	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01509	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 174  : 		}
; 175  : 		else

  0150e	eb 0d		 jmp	 SHORT $L191918
$L191916:

; 176  : 		{
; 177  : 			m_pBottomLeftWnd->ShowWindow(SW_HIDE);

  01510	6a 00		 push	 0
  01512	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01515	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01518	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L191918:

; 178  : 		}
; 179  : 
; 180  : 		m_bUpdateView = true;

  0151d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01520	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 181  : 		OnMove(0,0);

  01527	6a 00		 push	 0
  01529	6a 00		 push	 0
  0152b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0152e	e8 00 00 00 00	 call	 ?OnMove@CIrregularBorderMgr@@QAEXHH@Z ; CIrregularBorderMgr::OnMove

; 182  : 		m_bUpdateView = false;

  01533	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01536	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 183  : 	}

  0153d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  01541	8b f4		 mov	 esi, esp
  01543	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  01546	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0154c	3b f4		 cmp	 esi, esp
  0154e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01553	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0155a	8b f4		 mov	 esi, esp
  0155c	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  0155f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01565	3b f4		 cmp	 esi, esp
  01567	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L191850:

; 184  : 
; 185  : 
; 186  : }

  0156c	52		 push	 edx
  0156d	8b cd		 mov	 ecx, ebp
  0156f	50		 push	 eax
  01570	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192818
  01576	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0157b	58		 pop	 eax
  0157c	5a		 pop	 edx
  0157d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01580	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01587	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0158a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0158f	5f		 pop	 edi
  01590	5e		 pop	 esi
  01591	81 c4 e0 03 00
	00		 add	 esp, 992		; 000003e0H
  01597	3b ec		 cmp	 ebp, esp
  01599	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0159e	8b e5		 mov	 esp, ebp
  015a0	5d		 pop	 ebp
  015a1	c2 04 00	 ret	 4
$L192818:
  015a4	04 00 00 00	 DD	 4
  015a8	00 00 00 00	 DD	 $L192817
$L192817:
  015ac	c4 ff ff ff	 DD	 -60			; ffffffc4H
  015b0	1c 00 00 00	 DD	 28			; 0000001cH
  015b4	00 00 00 00	 DD	 $L192811
  015b8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  015bc	1c 00 00 00	 DD	 28			; 0000001cH
  015c0	00 00 00 00	 DD	 $L192812
  015c4	94 ff ff ff	 DD	 -108			; ffffff94H
  015c8	04 00 00 00	 DD	 4
  015cc	00 00 00 00	 DD	 $L192813
  015d0	88 ff ff ff	 DD	 -120			; ffffff88H
  015d4	04 00 00 00	 DD	 4
  015d8	00 00 00 00	 DD	 $L192814
$L192814:
  015dc	73		 DB	 115			; 00000073H
  015dd	74		 DB	 116			; 00000074H
  015de	72		 DB	 114			; 00000072H
  015df	4c		 DB	 76			; 0000004cH
  015e0	6f		 DB	 111			; 0000006fH
  015e1	67		 DB	 103			; 00000067H
  015e2	00		 DB	 0
$L192813:
  015e3	73		 DB	 115			; 00000073H
  015e4	74		 DB	 116			; 00000074H
  015e5	72		 DB	 114			; 00000072H
  015e6	4c		 DB	 76			; 0000004cH
  015e7	6f		 DB	 111			; 0000006fH
  015e8	67		 DB	 103			; 00000067H
  015e9	00		 DB	 0
$L192812:
  015ea	70		 DB	 112			; 00000070H
  015eb	6e		 DB	 110			; 0000006eH
  015ec	67		 DB	 103			; 00000067H
  015ed	70		 DB	 112			; 00000070H
  015ee	61		 DB	 97			; 00000061H
  015ef	74		 DB	 116			; 00000074H
  015f0	68		 DB	 104			; 00000068H
  015f1	00		 DB	 0
$L192811:
  015f2	70		 DB	 112			; 00000070H
  015f3	61		 DB	 97			; 00000061H
  015f4	74		 DB	 116			; 00000074H
  015f5	68		 DB	 104			; 00000068H
  015f6	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192775:
  0006e	8b f4		 mov	 esi, esp
  00070	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T192745[ebp]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0007c	3b f4		 cmp	 esi, esp
  0007e	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192776:
  00083	8b f4		 mov	 esi, esp
  00085	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T192746[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00091	3b f4		 cmp	 esi, esp
  00093	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192777:
  00098	8b f4		 mov	 esi, esp
  0009a	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T192747[ebp]
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a6	3b f4		 cmp	 esi, esp
  000a8	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192778:
  000ad	8b f4		 mov	 esi, esp
  000af	8d 4d c4	 lea	 ecx, DWORD PTR _path$191859[ebp]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192779:
  000bf	8b f4		 mov	 esi, esp
  000c1	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T192748[ebp]
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000cd	3b f4		 cmp	 esi, esp
  000cf	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192780:
  000d4	8b f4		 mov	 esi, esp
  000d6	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T192749[ebp]
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000e2	3b f4		 cmp	 esi, esp
  000e4	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192781:
  000e9	8b f4		 mov	 esi, esp
  000eb	8d 4d a0	 lea	 ecx, DWORD PTR _pngpath$191862[ebp]
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000f4	3b f4		 cmp	 esi, esp
  000f6	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192782:
  000fb	8b f4		 mov	 esi, esp
  000fd	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T192750[ebp]
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00109	3b f4		 cmp	 esi, esp
  0010b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192783:
  00110	8b f4		 mov	 esi, esp
  00112	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T192751[ebp]
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0011e	3b f4		 cmp	 esi, esp
  00120	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192785:
  00125	8b f4		 mov	 esi, esp
  00127	8d 4d 94	 lea	 ecx, DWORD PTR _strLog$191873[ebp]
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00130	3b f4		 cmp	 esi, esp
  00132	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192786:
  00137	8b f4		 mov	 esi, esp
  00139	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T192754[ebp]
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00145	3b f4		 cmp	 esi, esp
  00147	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192787:
  0014c	8b f4		 mov	 esi, esp
  0014e	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T192753[ebp]
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0015a	3b f4		 cmp	 esi, esp
  0015c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192788:
  00161	8b f4		 mov	 esi, esp
  00163	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T192755[ebp]
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0016f	3b f4		 cmp	 esi, esp
  00171	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192789:
  00176	8b f4		 mov	 esi, esp
  00178	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T192756[ebp]
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00184	3b f4		 cmp	 esi, esp
  00186	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192790:
  0018b	8b f4		 mov	 esi, esp
  0018d	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T192757[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00199	3b f4		 cmp	 esi, esp
  0019b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192791:
  001a0	8b f4		 mov	 esi, esp
  001a2	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T192758[ebp]
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001ae	3b f4		 cmp	 esi, esp
  001b0	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192792:
  001b5	8b f4		 mov	 esi, esp
  001b7	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T192759[ebp]
  001bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001c3	3b f4		 cmp	 esi, esp
  001c5	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192793:
  001ca	8b f4		 mov	 esi, esp
  001cc	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192760[ebp]
  001d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001d8	3b f4		 cmp	 esi, esp
  001da	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192794:
  001df	8b f4		 mov	 esi, esp
  001e1	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192761[ebp]
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001ed	3b f4		 cmp	 esi, esp
  001ef	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192796:
  001f4	8b f4		 mov	 esi, esp
  001f6	8d 4d 88	 lea	 ecx, DWORD PTR _strLog$191893[ebp]
  001f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001ff	3b f4		 cmp	 esi, esp
  00201	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192797:
  00206	8b f4		 mov	 esi, esp
  00208	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T192764[ebp]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00214	3b f4		 cmp	 esi, esp
  00216	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192798:
  0021b	8b f4		 mov	 esi, esp
  0021d	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192763[ebp]
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00229	3b f4		 cmp	 esi, esp
  0022b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192799:
  00230	8b f4		 mov	 esi, esp
  00232	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T192765[ebp]
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0023e	3b f4		 cmp	 esi, esp
  00240	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192800:
  00245	8b f4		 mov	 esi, esp
  00247	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR $T192766[ebp]
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00253	3b f4		 cmp	 esi, esp
  00255	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192801:
  0025a	8b f4		 mov	 esi, esp
  0025c	8d 8d 48 fd ff
	ff		 lea	 ecx, DWORD PTR $T192767[ebp]
  00262	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00268	3b f4		 cmp	 esi, esp
  0026a	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192802:
  0026f	8b f4		 mov	 esi, esp
  00271	8d 8d 2c fd ff
	ff		 lea	 ecx, DWORD PTR $T192768[ebp]
  00277	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0027d	3b f4		 cmp	 esi, esp
  0027f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192803:
  00284	8b f4		 mov	 esi, esp
  00286	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T192769[ebp]
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00292	3b f4		 cmp	 esi, esp
  00294	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192805:
  00299	8b f4		 mov	 esi, esp
  0029b	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T192771[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002a7	3b f4		 cmp	 esi, esp
  002a9	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192806:
  002ae	8b f4		 mov	 esi, esp
  002b0	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T192772[ebp]
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002bc	3b f4		 cmp	 esi, esp
  002be	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192807:
  002c3	8b f4		 mov	 esi, esp
  002c5	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T192773[ebp]
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002d1	3b f4		 cmp	 esi, esp
  002d3	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z:
  002d8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192810
  002dd	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z ENDP		; CIrregularBorderMgr::InitTransDlg
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _nLineNo$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z		; Gdiplus::Graphics::Graphics
PUBLIC	??1Graphics@Gdiplus@@QAE@XZ			; Gdiplus::Graphics::~Graphics
PUBLIC	?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode
PUBLIC	??0Rect@Gdiplus@@QAE@HHHH@Z			; Gdiplus::Rect::Rect
PUBLIC	?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z ; CIrregularBorderMgr::DrawToppanelPng
PUBLIC	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ; Gdiplus::Graphics::DrawImage
xdata$x	SEGMENT
$T192831 DD	0ffffffffH
	DD	FLAT:$L192822
$T192824 DD	019930520H
	DD	01H
	DD	FLAT:$T192831
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\irregularbordermgr.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_rr$191937 = -88					; size = 16
_h$191936 = -68						; size = 4
_rr$191930 = -60					; size = 16
_graph$ = -36						; size = 8
_pImgLeft$ = -24					; size = 4
_pImgRight$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_rc$ = 12						; size = 16
?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z PROC NEAR ; CIrregularBorderMgr::DrawToppanelPng
; _this$ = ecx

; 188  : {

  01600	55		 push	 ebp
  01601	8b ec		 mov	 ebp, esp
  01603	6a ff		 push	 -1
  01605	68 00 00 00 00	 push	 __ehhandler$?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z
  0160a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01610	50		 push	 eax
  01611	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01618	83 ec 50	 sub	 esp, 80			; 00000050H
  0161b	57		 push	 edi
  0161c	51		 push	 ecx
  0161d	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  01620	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  01625	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0162a	f3 ab		 rep stosd
  0162c	59		 pop	 ecx
  0162d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 	InitTransDlg();

  01630	6a 00		 push	 0
  01632	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01635	e8 00 00 00 00	 call	 ?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z ; CIrregularBorderMgr::InitTransDlg

; 190  : 	if(m_curSubject == NULL)

  0163a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0163d	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  01641	75 05		 jne	 SHORT $L191924

; 191  : 		return ;

  01643	e9 9c 01 00 00	 jmp	 $L191923
$L191924:

; 192  : 
; 193  : 	Gdiplus::Image* pImgRight = m_pTopRightWnd->m_pImage;

  01648	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0164b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0164e	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  01654	89 45 ec	 mov	 DWORD PTR _pImgRight$[ebp], eax

; 194  : 	Gdiplus::Image* pImgLeft = m_pTopLeftWnd->m_pImage;

  01657	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0165a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0165d	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  01663	89 45 e8	 mov	 DWORD PTR _pImgLeft$[ebp], eax

; 195  : 
; 196  : 	if(pImgRight == NULL && pImgLeft == NULL)

  01666	83 7d ec 00	 cmp	 DWORD PTR _pImgRight$[ebp], 0
  0166a	75 0b		 jne	 SHORT $L191927
  0166c	83 7d e8 00	 cmp	 DWORD PTR _pImgLeft$[ebp], 0
  01670	75 05		 jne	 SHORT $L191927

; 197  : 		return;

  01672	e9 6d 01 00 00	 jmp	 $L191923
$L191927:

; 198  : 
; 199  : 	Gdiplus::Graphics graph(pDC->m_hDC);

  01677	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0167a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0167d	52		 push	 edx
  0167e	8d 4d dc	 lea	 ecx, DWORD PTR _graph$[ebp]
  01681	e8 00 00 00 00	 call	 ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ; Gdiplus::Graphics::Graphics
  01686	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 200  : 	graph.SetSmoothingMode(Gdiplus::SmoothingModeNone);

  0168d	6a 03		 push	 3
  0168f	8d 4d dc	 lea	 ecx, DWORD PTR _graph$[ebp]
  01692	e8 00 00 00 00	 call	 ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode

; 201  : 
; 202  : 	if(pImgLeft)

  01697	83 7d e8 00	 cmp	 DWORD PTR _pImgLeft$[ebp], 0
  0169b	0f 84 9a 00 00
	00		 je	 $L191929

; 203  : 	{
; 204  : 		Rect rr(0,0, pImgLeft->GetWidth() - (m_curSubject->ptLeftTop.x + 2), pImgLeft->GetHeight() - (m_curSubject->ptLeftTop.y + 2));

  016a1	8b 4d e8	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  016a4	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  016a9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  016ac	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  016af	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  016b2	83 c1 02	 add	 ecx, 2
  016b5	2b c1		 sub	 eax, ecx
  016b7	50		 push	 eax
  016b8	8b 4d e8	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  016bb	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  016c0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  016c3	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  016c6	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  016c9	83 c2 02	 add	 edx, 2
  016cc	2b c2		 sub	 eax, edx
  016ce	50		 push	 eax
  016cf	6a 00		 push	 0
  016d1	6a 00		 push	 0
  016d3	8d 4d c4	 lea	 ecx, DWORD PTR _rr$191930[ebp]
  016d6	e8 00 00 00 00	 call	 ??0Rect@Gdiplus@@QAE@HHHH@Z ; Gdiplus::Rect::Rect

; 205  : 		graph.DrawImage(pImgLeft,
; 206  : 			rr,
; 207  : 			(int)m_curSubject->ptLeftTop.x + 2, 
; 208  : 			(int)m_curSubject->ptLeftTop.y + 2,
; 209  : 			(int)pImgLeft->GetWidth() - (m_curSubject->ptLeftTop.x + 2), 
; 210  : 			(int)pImgLeft->GetHeight() - (m_curSubject->ptLeftTop.y + 2),
; 211  : 			UnitPixel );

  016db	6a 00		 push	 0
  016dd	6a 00		 push	 0
  016df	6a 00		 push	 0
  016e1	6a 02		 push	 2
  016e3	8b 4d e8	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  016e6	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  016eb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  016ee	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  016f1	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  016f4	83 c1 02	 add	 ecx, 2
  016f7	2b c1		 sub	 eax, ecx
  016f9	50		 push	 eax
  016fa	8b 4d e8	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  016fd	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  01702	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01705	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  01708	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0170b	83 c2 02	 add	 edx, 2
  0170e	2b c2		 sub	 eax, edx
  01710	50		 push	 eax
  01711	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01714	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01717	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  0171a	83 c2 02	 add	 edx, 2
  0171d	52		 push	 edx
  0171e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01721	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01724	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  01727	83 c2 02	 add	 edx, 2
  0172a	52		 push	 edx
  0172b	8d 45 c4	 lea	 eax, DWORD PTR _rr$191930[ebp]
  0172e	50		 push	 eax
  0172f	8b 4d e8	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  01732	51		 push	 ecx
  01733	8d 4d dc	 lea	 ecx, DWORD PTR _graph$[ebp]
  01736	e8 00 00 00 00	 call	 ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ; Gdiplus::Graphics::DrawImage
$L191929:

; 212  : 	}
; 213  : 	if(pImgRight)

  0173b	83 7d ec 00	 cmp	 DWORD PTR _pImgRight$[ebp], 0
  0173f	0f 84 90 00 00
	00		 je	 $L191935

; 214  : 	{
; 215  : 		int h = pImgRight->GetHeight();

  01745	8b 4d ec	 mov	 ecx, DWORD PTR _pImgRight$[ebp]
  01748	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  0174d	89 45 bc	 mov	 DWORD PTR _h$191936[ebp], eax

; 216  : 		Rect rr(rc.right - m_curSubject->ptRightTop.x + 2,0,m_curSubject->ptRightTop.x - 2, pImgRight->GetHeight() - m_curSubject->ptRightTop.y - 2);

  01750	8b 4d ec	 mov	 ecx, DWORD PTR _pImgRight$[ebp]
  01753	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  01758	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0175b	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0175e	2b 41 7c	 sub	 eax, DWORD PTR [ecx+124]
  01761	83 e8 02	 sub	 eax, 2
  01764	50		 push	 eax
  01765	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01768	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0176b	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0176e	83 e9 02	 sub	 ecx, 2
  01771	51		 push	 ecx
  01772	6a 00		 push	 0
  01774	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01777	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0177a	8b 4d 14	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  0177d	2b 48 78	 sub	 ecx, DWORD PTR [eax+120]
  01780	83 c1 02	 add	 ecx, 2
  01783	51		 push	 ecx
  01784	8d 4d a8	 lea	 ecx, DWORD PTR _rr$191937[ebp]
  01787	e8 00 00 00 00	 call	 ??0Rect@Gdiplus@@QAE@HHHH@Z ; Gdiplus::Rect::Rect

; 217  : 		graph.DrawImage(pImgRight, 
; 218  : 			rr,
; 219  : 			(int)0, 
; 220  : 			(int)m_curSubject->ptRightTop.y + 2,
; 221  : 			(int)m_curSubject->ptRightTop.x - 2, 
; 222  : 			(int)pImgRight->GetHeight() - m_curSubject->ptRightTop.y - 2,
; 223  : 			UnitPixel);

  0178c	6a 00		 push	 0
  0178e	6a 00		 push	 0
  01790	6a 00		 push	 0
  01792	6a 02		 push	 2
  01794	8b 4d ec	 mov	 ecx, DWORD PTR _pImgRight$[ebp]
  01797	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  0179c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0179f	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  017a2	2b 41 7c	 sub	 eax, DWORD PTR [ecx+124]
  017a5	83 e8 02	 sub	 eax, 2
  017a8	50		 push	 eax
  017a9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  017ac	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  017af	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  017b2	83 e9 02	 sub	 ecx, 2
  017b5	51		 push	 ecx
  017b6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  017b9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  017bc	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  017bf	83 c1 02	 add	 ecx, 2
  017c2	51		 push	 ecx
  017c3	6a 00		 push	 0
  017c5	8d 55 a8	 lea	 edx, DWORD PTR _rr$191937[ebp]
  017c8	52		 push	 edx
  017c9	8b 45 ec	 mov	 eax, DWORD PTR _pImgRight$[ebp]
  017cc	50		 push	 eax
  017cd	8d 4d dc	 lea	 ecx, DWORD PTR _graph$[ebp]
  017d0	e8 00 00 00 00	 call	 ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ; Gdiplus::Graphics::DrawImage
$L191935:

; 224  : 	}
; 225  : }

  017d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  017dc	8d 4d dc	 lea	 ecx, DWORD PTR _graph$[ebp]
  017df	e8 00 00 00 00	 call	 ??1Graphics@Gdiplus@@QAE@XZ ; Gdiplus::Graphics::~Graphics
$L191923:
  017e4	52		 push	 edx
  017e5	8b cd		 mov	 ecx, ebp
  017e7	50		 push	 eax
  017e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192830
  017ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  017f3	58		 pop	 eax
  017f4	5a		 pop	 edx
  017f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  017f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  017ff	5f		 pop	 edi
  01800	83 c4 5c	 add	 esp, 92			; 0000005cH
  01803	3b ec		 cmp	 ebp, esp
  01805	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0180a	8b e5		 mov	 esp, ebp
  0180c	5d		 pop	 ebp
  0180d	c2 14 00	 ret	 20			; 00000014H
$L192830:
  01810	03 00 00 00	 DD	 3
  01814	00 00 00 00	 DD	 $L192829
$L192829:
  01818	dc ff ff ff	 DD	 -36			; ffffffdcH
  0181c	08 00 00 00	 DD	 8
  01820	00 00 00 00	 DD	 $L192825
  01824	c4 ff ff ff	 DD	 -60			; ffffffc4H
  01828	10 00 00 00	 DD	 16			; 00000010H
  0182c	00 00 00 00	 DD	 $L192826
  01830	a8 ff ff ff	 DD	 -88			; ffffffa8H
  01834	10 00 00 00	 DD	 16			; 00000010H
  01838	00 00 00 00	 DD	 $L192827
$L192827:
  0183c	72		 DB	 114			; 00000072H
  0183d	72		 DB	 114			; 00000072H
  0183e	00		 DB	 0
$L192826:
  0183f	72		 DB	 114			; 00000072H
  01840	72		 DB	 114			; 00000072H
  01841	00		 DB	 0
$L192825:
  01842	67		 DB	 103			; 00000067H
  01843	72		 DB	 114			; 00000072H
  01844	61		 DB	 97			; 00000061H
  01845	70		 DB	 112			; 00000070H
  01846	68		 DB	 104			; 00000068H
  01847	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192822:
  002e2	8d 4d dc	 lea	 ecx, DWORD PTR _graph$[ebp]
  002e5	e9 00 00 00 00	 jmp	 ??1Graphics@Gdiplus@@QAE@XZ ; Gdiplus::Graphics::~Graphics
__ehhandler$?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z:
  002ea	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192824
  002ef	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z ENDP ; CIrregularBorderMgr::DrawToppanelPng
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
EXTRN	?atlTraceGeneral@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceGeneral
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_this$ = 8						; size = 4
_pszFmt$ = 12						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 173  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 174  : 		va_list ptr; va_start(ptr, pszFmt);

  0000b	8d 45 10	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0000e	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 175  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, atlTraceGeneral, 0, pszFmt, ptr);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 0c	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  00018	52		 push	 edx
  00019	6a 00		 push	 0
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?atlTraceGeneral@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceGeneral
  00020	e8 00 00 00 00	 call	 ??BCTraceCategory@ATL@@QBEKXZ ; ATL::CTraceCategory::operator unsigned long
  00025	50		 push	 eax
  00026	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002c	51		 push	 ecx
  0002d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
  00038	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ; ATL::CTrace::TraceV
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 176  : 		va_end(ptr);

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 177  : 	}

  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVA:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z PROC NEAR		; ATL::CTrace::TraceV, COMDAT

; 121  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 		AtlTraceVA(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

  00003	8b 45 20	 mov	 eax, DWORD PTR _args$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 1c	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 18	 mov	 edx, DWORD PTR _nLevel$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 14	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _AtlTraceVA
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH

; 123  : 	}

  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 204  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
EXTRN	__imp__IsWindowVisible@4:NEAR
EXTRN	??0CRect@@QAE@XZ:NEAR				; CRect::CRect
EXTRN	?Width@CRect@@QBEHXZ:NEAR			; CRect::Width
EXTRN	?Height@CRect@@QBEHXZ:NEAR			; CRect::Height
EXTRN	?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z:NEAR	; CWnd::MoveWindow
EXTRN	?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z:NEAR	; CWnd::SetWindowPos
EXTRN	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::GetWindowRect
EXTRN	?UpdateView@CTranslucentDialog@@QAEXH@Z:NEAR	; CTranslucentDialog::UpdateView
EXTRN	?GetImageHeight@CTranslucentDialog@@QAEHXZ:NEAR	; CTranslucentDialog::GetImageHeight
EXTRN	?GetImageWidth@CTranslucentDialog@@QAEHXZ:NEAR	; CTranslucentDialog::GetImageWidth
EXTRN	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z:NEAR ; CWnd::RedrawWindow
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
xdata$x	SEGMENT
$T192844 DD	0ffffffffH
	DD	FLAT:$L192837
$T192839 DD	019930520H
	DD	01H
	DD	FLAT:$T192844
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\irregularbordermgr.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv333 = -104						; size = 4
tv308 = -100						; size = 4
tv303 = -96						; size = 4
tv332 = -92						; size = 4
tv334 = -88						; size = 4
tv276 = -84						; size = 4
tv271 = -80						; size = 4
tv185 = -76						; size = 4
tv180 = -72						; size = 4
tv67 = -68						; size = 4
$T192836 = -64						; size = 4
_pWnd$191959 = -60					; size = 4
_pWnd$191957 = -56					; size = 4
_pWnd$191954 = -52					; size = 4
_pCurSubject$ = -48					; size = 4
_pSkin$ = -44						; size = 4
_rc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?OnMove@CIrregularBorderMgr@@QAEXHH@Z PROC NEAR		; CIrregularBorderMgr::OnMove
; _this$ = ecx

; 228  : {

  01850	55		 push	 ebp
  01851	8b ec		 mov	 ebp, esp
  01853	6a ff		 push	 -1
  01855	68 00 00 00 00	 push	 __ehhandler$?OnMove@CIrregularBorderMgr@@QAEXHH@Z
  0185a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01860	50		 push	 eax
  01861	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01868	83 ec 5c	 sub	 esp, 92			; 0000005cH
  0186b	56		 push	 esi
  0186c	57		 push	 edi
  0186d	51		 push	 ecx
  0186e	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  01871	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  01876	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0187b	f3 ab		 rep stosd
  0187d	59		 pop	 ecx
  0187e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	CRect rc;

  01881	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01884	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 230  : 
; 231  : 	ISkinMgr *pSkin = AfxGetUIManager()->UIGetSkinMgr();

  01889	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  0188e	89 45 bc	 mov	 DWORD PTR tv67[ebp], eax
  01891	8b 45 bc	 mov	 eax, DWORD PTR tv67[ebp]
  01894	8b 10		 mov	 edx, DWORD PTR [eax]
  01896	8b f4		 mov	 esi, esp
  01898	8b 4d bc	 mov	 ecx, DWORD PTR tv67[ebp]
  0189b	ff 52 28	 call	 DWORD PTR [edx+40]
  0189e	3b f4		 cmp	 esi, esp
  018a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018a5	89 45 d4	 mov	 DWORD PTR _pSkin$[ebp], eax

; 232  : 	if(pSkin == NULL)

  018a8	83 7d d4 00	 cmp	 DWORD PTR _pSkin$[ebp], 0
  018ac	75 05		 jne	 SHORT $L191949

; 233  : 		return;

  018ae	e9 eb 03 00 00	 jmp	 $L191946
$L191949:

; 234  : 	OneSubject *pCurSubject = pSkin->GetCurSubject();

  018b3	8b 45 d4	 mov	 eax, DWORD PTR _pSkin$[ebp]
  018b6	8b 10		 mov	 edx, DWORD PTR [eax]
  018b8	8b f4		 mov	 esi, esp
  018ba	8b 4d d4	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  018bd	ff 52 28	 call	 DWORD PTR [edx+40]
  018c0	3b f4		 cmp	 esi, esp
  018c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018c7	89 45 d0	 mov	 DWORD PTR _pCurSubject$[ebp], eax

; 235  : 	m_pMainWnd = AfxGetMainWindow();

  018ca	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  018cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  018d2	89 01		 mov	 DWORD PTR [ecx], eax

; 236  : 
; 237  : 	if(pCurSubject == NULL)

  018d4	83 7d d0 00	 cmp	 DWORD PTR _pCurSubject$[ebp], 0
  018d8	75 05		 jne	 SHORT $L191951

; 238  : 		return;

  018da	e9 bf 03 00 00	 jmp	 $L191946
$L191951:

; 239  : 	m_pMainWnd->GetWindowRect(&rc);

  018df	8d 55 dc	 lea	 edx, DWORD PTR _rc$[ebp]
  018e2	52		 push	 edx
  018e3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  018e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  018e8	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 240  : 	rc.top -= 162;

  018ed	8b 4d e0	 mov	 ecx, DWORD PTR _rc$[ebp+4]
  018f0	81 e9 a2 00 00
	00		 sub	 ecx, 162		; 000000a2H
  018f6	89 4d e0	 mov	 DWORD PTR _rc$[ebp+4], ecx

; 241  : 	rc.bottom = rc.top + 164;

  018f9	8b 55 e0	 mov	 edx, DWORD PTR _rc$[ebp+4]
  018fc	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  01902	89 55 e8	 mov	 DWORD PTR _rc$[ebp+12], edx

; 242  : 	rc.right = rc.left + 209;

  01905	8b 45 dc	 mov	 eax, DWORD PTR _rc$[ebp]
  01908	05 d1 00 00 00	 add	 eax, 209		; 000000d1H
  0190d	89 45 e4	 mov	 DWORD PTR _rc$[ebp+8], eax

; 243  : 
; 244  : 	if(m_pTopLeftWnd != NULL && IsWindowVisible(m_pTopLeftWnd->m_hWnd))

  01910	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01913	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  01917	0f 84 88 00 00
	00		 je	 $L191952
  0191d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01920	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01923	8b f4		 mov	 esi, esp
  01925	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01928	51		 push	 ecx
  01929	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  0192f	3b f4		 cmp	 esi, esp
  01931	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01936	85 c0		 test	 eax, eax
  01938	74 6b		 je	 SHORT $L191952

; 245  : 	{
; 246  : 		m_pMainWnd->GetWindowRect(&rc);

  0193a	8d 55 dc	 lea	 edx, DWORD PTR _rc$[ebp]
  0193d	52		 push	 edx
  0193e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01941	8b 08		 mov	 ecx, DWORD PTR [eax]
  01943	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 247  : 		rc.left = rc.left - pCurSubject->ptLeftTop.x;

  01948	8b 4d d0	 mov	 ecx, DWORD PTR _pCurSubject$[ebp]
  0194b	8b 55 dc	 mov	 edx, DWORD PTR _rc$[ebp]
  0194e	2b 51 70	 sub	 edx, DWORD PTR [ecx+112]
  01951	89 55 dc	 mov	 DWORD PTR _rc$[ebp], edx

; 248  : 		rc.top = rc.top - pCurSubject->ptLeftTop.y;

  01954	8b 45 d0	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01957	8b 4d e0	 mov	 ecx, DWORD PTR _rc$[ebp+4]
  0195a	2b 48 74	 sub	 ecx, DWORD PTR [eax+116]
  0195d	89 4d e0	 mov	 DWORD PTR _rc$[ebp+4], ecx

; 249  : 		rc.bottom = rc.top + m_pTopLeftWnd->GetImageHeight();

  01960	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01963	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01966	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  0196b	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp+4]
  0196e	89 45 e8	 mov	 DWORD PTR _rc$[ebp+12], eax

; 250  : 		rc.right = rc.left + m_pTopLeftWnd->GetImageWidth();

  01971	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01974	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01977	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  0197c	03 45 dc	 add	 eax, DWORD PTR _rc$[ebp]
  0197f	89 45 e4	 mov	 DWORD PTR _rc$[ebp+8], eax

; 251  : 		m_pTopLeftWnd->MoveWindow(&rc);

  01982	6a 01		 push	 1
  01984	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01987	51		 push	 ecx
  01988	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0198b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0198e	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 252  : 		m_pTopLeftWnd->UpdateView(m_bUpdateView);

  01993	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01996	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01999	51		 push	 ecx
  0199a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0199d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  019a0	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L191952:

; 253  : 	}
; 254  : 	if(m_pTopRightWnd != NULL  && IsWindowVisible(m_pTopRightWnd->m_hWnd))

  019a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  019a8	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  019ac	0f 84 dc 00 00
	00		 je	 $L191953
  019b2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  019b5	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  019b8	8b f4		 mov	 esi, esp
  019ba	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  019bd	50		 push	 eax
  019be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  019c4	3b f4		 cmp	 esi, esp
  019c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019cb	85 c0		 test	 eax, eax
  019cd	0f 84 bb 00 00
	00		 je	 $L191953

; 255  : 	{
; 256  : 		m_pMainWnd->GetWindowRect(&rc);

  019d3	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  019d6	51		 push	 ecx
  019d7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  019da	8b 0a		 mov	 ecx, DWORD PTR [edx]
  019dc	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 257  : 		rc.left = rc.right - pCurSubject->ptRightTop.x;

  019e1	8b 45 d0	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  019e4	8b 4d e4	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  019e7	2b 48 78	 sub	 ecx, DWORD PTR [eax+120]
  019ea	89 4d dc	 mov	 DWORD PTR _rc$[ebp], ecx

; 258  : 		rc.top = rc.top - pCurSubject->ptRightTop.y;

  019ed	8b 55 d0	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  019f0	8b 45 e0	 mov	 eax, DWORD PTR _rc$[ebp+4]
  019f3	2b 42 7c	 sub	 eax, DWORD PTR [edx+124]
  019f6	89 45 e0	 mov	 DWORD PTR _rc$[ebp+4], eax

; 259  : 		rc.bottom = rc.top + m_pTopRightWnd->GetImageHeight();

  019f9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  019fc	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  019ff	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  01a04	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp+4]
  01a07	89 45 e8	 mov	 DWORD PTR _rc$[ebp+12], eax

; 260  : 		rc.right = rc.left + m_pTopRightWnd->GetImageWidth();

  01a0a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01a0d	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  01a10	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  01a15	03 45 dc	 add	 eax, DWORD PTR _rc$[ebp]
  01a18	89 45 e4	 mov	 DWORD PTR _rc$[ebp+8], eax

; 261  : 	//	m_pTopRightWnd->MoveWindow(&rc);
; 262  : 		CWnd *pWnd = AfxGetUIManager()->UIGetChangeColorMgr()->GetSkinWnd();

  01a1b	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  01a20	89 45 b8	 mov	 DWORD PTR tv180[ebp], eax
  01a23	8b 45 b8	 mov	 eax, DWORD PTR tv180[ebp]
  01a26	8b 10		 mov	 edx, DWORD PTR [eax]
  01a28	8b f4		 mov	 esi, esp
  01a2a	8b 4d b8	 mov	 ecx, DWORD PTR tv180[ebp]
  01a2d	ff 52 2c	 call	 DWORD PTR [edx+44]
  01a30	3b f4		 cmp	 esi, esp
  01a32	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a37	89 45 b4	 mov	 DWORD PTR tv185[ebp], eax
  01a3a	8b 45 b4	 mov	 eax, DWORD PTR tv185[ebp]
  01a3d	8b 10		 mov	 edx, DWORD PTR [eax]
  01a3f	8b f4		 mov	 esi, esp
  01a41	8b 4d b4	 mov	 ecx, DWORD PTR tv185[ebp]
  01a44	ff 52 14	 call	 DWORD PTR [edx+20]
  01a47	3b f4		 cmp	 esi, esp
  01a49	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a4e	89 45 cc	 mov	 DWORD PTR _pWnd$191954[ebp], eax

; 263  : 		m_pTopRightWnd->SetWindowPos(pWnd, rc.left, rc.top, rc.Width(),rc.Height(), SWP_NOACTIVATE);

  01a51	6a 10		 push	 16			; 00000010H
  01a53	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01a56	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  01a5b	50		 push	 eax
  01a5c	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01a5f	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  01a64	50		 push	 eax
  01a65	8b 45 e0	 mov	 eax, DWORD PTR _rc$[ebp+4]
  01a68	50		 push	 eax
  01a69	8b 4d dc	 mov	 ecx, DWORD PTR _rc$[ebp]
  01a6c	51		 push	 ecx
  01a6d	8b 55 cc	 mov	 edx, DWORD PTR _pWnd$191954[ebp]
  01a70	52		 push	 edx
  01a71	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01a74	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a77	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 264  : 		m_pTopRightWnd->UpdateView(m_bUpdateView);

  01a7c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a7f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01a82	52		 push	 edx
  01a83	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01a86	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a89	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L191953:

; 265  : 	}
; 266  : 
; 267  : 	if(m_pBottomLeftWnd != NULL && IsWindowVisible(m_pBottomLeftWnd->m_hWnd))

  01a8e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a91	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  01a95	0f 84 8e 00 00
	00		 je	 $L191955
  01a9b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01a9e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01aa1	8b f4		 mov	 esi, esp
  01aa3	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01aa6	51		 push	 ecx
  01aa7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  01aad	3b f4		 cmp	 esi, esp
  01aaf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01ab4	85 c0		 test	 eax, eax
  01ab6	74 71		 je	 SHORT $L191955

; 268  : 	{
; 269  : 		m_pMainWnd->GetWindowRect(&rc);

  01ab8	8d 55 dc	 lea	 edx, DWORD PTR _rc$[ebp]
  01abb	52		 push	 edx
  01abc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01abf	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ac1	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 270  : 		rc.left = rc.left - pCurSubject->ptLeftBottom.x;

  01ac6	8b 4d d0	 mov	 ecx, DWORD PTR _pCurSubject$[ebp]
  01ac9	8b 55 dc	 mov	 edx, DWORD PTR _rc$[ebp]
  01acc	2b 91 80 00 00
	00		 sub	 edx, DWORD PTR [ecx+128]
  01ad2	89 55 dc	 mov	 DWORD PTR _rc$[ebp], edx

; 271  : 		rc.top = rc.bottom - pCurSubject->ptLeftBottom.y;

  01ad5	8b 45 d0	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01ad8	8b 4d e8	 mov	 ecx, DWORD PTR _rc$[ebp+12]
  01adb	2b 88 84 00 00
	00		 sub	 ecx, DWORD PTR [eax+132]
  01ae1	89 4d e0	 mov	 DWORD PTR _rc$[ebp+4], ecx

; 272  : 		rc.bottom = rc.top + m_pBottomLeftWnd->GetImageHeight();

  01ae4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01ae7	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01aea	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  01aef	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp+4]
  01af2	89 45 e8	 mov	 DWORD PTR _rc$[ebp+12], eax

; 273  : 		rc.right = rc.left + m_pBottomLeftWnd->GetImageWidth();

  01af5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01af8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01afb	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  01b00	03 45 dc	 add	 eax, DWORD PTR _rc$[ebp]
  01b03	89 45 e4	 mov	 DWORD PTR _rc$[ebp+8], eax

; 274  : 		m_pBottomLeftWnd->MoveWindow(&rc);

  01b06	6a 01		 push	 1
  01b08	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01b0b	51		 push	 ecx
  01b0c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01b0f	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01b12	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 275  : 		m_pBottomLeftWnd->UpdateView(m_bUpdateView);

  01b17	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01b1a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01b1d	51		 push	 ecx
  01b1e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01b21	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01b24	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L191955:

; 276  : 	}
; 277  : 	if(m_pBottomRightWnd != NULL  && IsWindowVisible(m_pBottomRightWnd->m_hWnd))

  01b29	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01b2c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  01b30	0f 84 e4 00 00
	00		 je	 $L191956
  01b36	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01b39	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01b3c	8b f4		 mov	 esi, esp
  01b3e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  01b41	50		 push	 eax
  01b42	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  01b48	3b f4		 cmp	 esi, esp
  01b4a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01b4f	85 c0		 test	 eax, eax
  01b51	0f 84 c3 00 00
	00		 je	 $L191956

; 278  : 	{
; 279  : 		m_pMainWnd->GetWindowRect(&rc);

  01b57	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01b5a	51		 push	 ecx
  01b5b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01b5e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01b60	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 280  : 		rc.left = rc.right - pCurSubject->ptRightBottom.x;

  01b65	8b 45 d0	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01b68	8b 4d e4	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  01b6b	2b 88 88 00 00
	00		 sub	 ecx, DWORD PTR [eax+136]
  01b71	89 4d dc	 mov	 DWORD PTR _rc$[ebp], ecx

; 281  : 		rc.top = rc.bottom - pCurSubject->ptRightBottom.y;

  01b74	8b 55 d0	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  01b77	8b 45 e8	 mov	 eax, DWORD PTR _rc$[ebp+12]
  01b7a	2b 82 8c 00 00
	00		 sub	 eax, DWORD PTR [edx+140]
  01b80	89 45 e0	 mov	 DWORD PTR _rc$[ebp+4], eax

; 282  : 		rc.bottom = rc.top + m_pBottomRightWnd->GetImageHeight();

  01b83	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01b86	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  01b89	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  01b8e	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp+4]
  01b91	89 45 e8	 mov	 DWORD PTR _rc$[ebp+12], eax

; 283  : 		rc.right = rc.left + m_pBottomRightWnd->GetImageWidth();

  01b94	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01b97	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  01b9a	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  01b9f	03 45 dc	 add	 eax, DWORD PTR _rc$[ebp]
  01ba2	89 45 e4	 mov	 DWORD PTR _rc$[ebp+8], eax

; 284  : 		//m_pBottomRightWnd->MoveWindow(&rc);
; 285  : 		CWnd *pWnd = AfxGetUIManager()->UIGetChangeColorMgr()->GetSkinWnd();

  01ba5	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  01baa	89 45 b0	 mov	 DWORD PTR tv271[ebp], eax
  01bad	8b 45 b0	 mov	 eax, DWORD PTR tv271[ebp]
  01bb0	8b 10		 mov	 edx, DWORD PTR [eax]
  01bb2	8b f4		 mov	 esi, esp
  01bb4	8b 4d b0	 mov	 ecx, DWORD PTR tv271[ebp]
  01bb7	ff 52 2c	 call	 DWORD PTR [edx+44]
  01bba	3b f4		 cmp	 esi, esp
  01bbc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01bc1	89 45 ac	 mov	 DWORD PTR tv276[ebp], eax
  01bc4	8b 45 ac	 mov	 eax, DWORD PTR tv276[ebp]
  01bc7	8b 10		 mov	 edx, DWORD PTR [eax]
  01bc9	8b f4		 mov	 esi, esp
  01bcb	8b 4d ac	 mov	 ecx, DWORD PTR tv276[ebp]
  01bce	ff 52 14	 call	 DWORD PTR [edx+20]
  01bd1	3b f4		 cmp	 esi, esp
  01bd3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01bd8	89 45 c8	 mov	 DWORD PTR _pWnd$191957[ebp], eax

; 286  : 		m_pBottomRightWnd->SetWindowPos(AfxGetMainWindow(), rc.left, rc.top, rc.Width(),rc.Height(), SWP_NOACTIVATE);

  01bdb	6a 10		 push	 16			; 00000010H
  01bdd	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01be0	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  01be5	50		 push	 eax
  01be6	8d 4d dc	 lea	 ecx, DWORD PTR _rc$[ebp]
  01be9	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  01bee	50		 push	 eax
  01bef	8b 45 e0	 mov	 eax, DWORD PTR _rc$[ebp+4]
  01bf2	50		 push	 eax
  01bf3	8b 4d dc	 mov	 ecx, DWORD PTR _rc$[ebp]
  01bf6	51		 push	 ecx
  01bf7	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  01bfc	50		 push	 eax
  01bfd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01c00	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  01c03	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 287  : 		m_pBottomRightWnd->UpdateView(m_bUpdateView);

  01c08	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01c0b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01c0e	51		 push	 ecx
  01c0f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01c12	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  01c15	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L191956:

; 288  : 
; 289  : 	}
; 290  : 	if(m_bUpdateView)

  01c1a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01c1d	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  01c21	74 7b		 je	 SHORT $L191946

; 291  : 	{
; 292  : 		CWnd *pWnd = AfxGetUIManager()->UIGetLayoutMgr()->GetWnd("toppanel");

  01c23	51		 push	 ecx
  01c24	8b cc		 mov	 ecx, esp
  01c26	89 65 c0	 mov	 DWORD PTR $T192836[ebp], esp
  01c29	8b f4		 mov	 esi, esp
  01c2b	68 00 00 00 00	 push	 OFFSET FLAT:$SG191961
  01c30	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  01c36	3b f4		 cmp	 esi, esp
  01c38	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c3d	89 45 a8	 mov	 DWORD PTR tv334[ebp], eax
  01c40	8b 4d a8	 mov	 ecx, DWORD PTR tv334[ebp]
  01c43	89 4d a4	 mov	 DWORD PTR tv332[ebp], ecx
  01c46	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01c4d	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  01c52	89 45 a0	 mov	 DWORD PTR tv303[ebp], eax
  01c55	8b f4		 mov	 esi, esp
  01c57	8b 55 a0	 mov	 edx, DWORD PTR tv303[ebp]
  01c5a	8b 02		 mov	 eax, DWORD PTR [edx]
  01c5c	8b 4d a0	 mov	 ecx, DWORD PTR tv303[ebp]
  01c5f	ff 50 24	 call	 DWORD PTR [eax+36]
  01c62	3b f4		 cmp	 esi, esp
  01c64	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c69	89 45 9c	 mov	 DWORD PTR tv308[ebp], eax
  01c6c	8b 4d 9c	 mov	 ecx, DWORD PTR tv308[ebp]
  01c6f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c71	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01c78	8b 4d 9c	 mov	 ecx, DWORD PTR tv308[ebp]
  01c7b	ff 52 2c	 call	 DWORD PTR [edx+44]
  01c7e	89 45 98	 mov	 DWORD PTR tv333[ebp], eax
  01c81	8b 45 98	 mov	 eax, DWORD PTR tv333[ebp]
  01c84	89 45 c4	 mov	 DWORD PTR _pWnd$191959[ebp], eax

; 293  : 		if(pWnd)

  01c87	83 7d c4 00	 cmp	 DWORD PTR _pWnd$191959[ebp], 0
  01c8b	74 11		 je	 SHORT $L191946

; 294  : 			pWnd->RedrawWindow(NULL, NULL, RDW_INVALIDATE | RDW_UPDATENOW | RDW_ERASE | RDW_ALLCHILDREN);

  01c8d	68 85 01 00 00	 push	 389			; 00000185H
  01c92	6a 00		 push	 0
  01c94	6a 00		 push	 0
  01c96	8b 4d c4	 mov	 ecx, DWORD PTR _pWnd$191959[ebp]
  01c99	e8 00 00 00 00	 call	 ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$L191946:

; 295  : 	}
; 296  : }

  01c9e	52		 push	 edx
  01c9f	8b cd		 mov	 ecx, ebp
  01ca1	50		 push	 eax
  01ca2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192843
  01ca8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01cad	58		 pop	 eax
  01cae	5a		 pop	 edx
  01caf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01cb2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01cb9	5f		 pop	 edi
  01cba	5e		 pop	 esi
  01cbb	83 c4 68	 add	 esp, 104		; 00000068H
  01cbe	3b ec		 cmp	 ebp, esp
  01cc0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01cc5	8b e5		 mov	 esp, ebp
  01cc7	5d		 pop	 ebp
  01cc8	c2 08 00	 ret	 8
$L192843:
  01ccb	01 00 00 00	 DD	 1
  01ccf	00 00 00 00	 DD	 $L192842
$L192842:
  01cd3	dc ff ff ff	 DD	 -36			; ffffffdcH
  01cd7	10 00 00 00	 DD	 16			; 00000010H
  01cdb	00 00 00 00	 DD	 $L192840
$L192840:
  01cdf	72		 DB	 114			; 00000072H
  01ce0	63		 DB	 99			; 00000063H
  01ce1	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192837:
  002f4	8b f4		 mov	 esi, esp
  002f6	8b 4d c0	 mov	 ecx, DWORD PTR $T192836[ebp]
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002ff	3b f4		 cmp	 esi, esp
  00301	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?OnMove@CIrregularBorderMgr@@QAEXHH@Z:
  00306	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192839
  0030b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnMove@CIrregularBorderMgr@@QAEXHH@Z ENDP		; CIrregularBorderMgr::OnMove
PUBLIC	?OnSize@CIrregularBorderMgr@@QAEXXZ		; CIrregularBorderMgr::OnSize
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnSize@CIrregularBorderMgr@@QAEXXZ PROC NEAR		; CIrregularBorderMgr::OnSize
; _this$ = ecx

; 299  : {

  01cf0	55		 push	 ebp
  01cf1	8b ec		 mov	 ebp, esp
  01cf3	51		 push	 ecx
  01cf4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  01cfb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  : 	OnMove(0,0);

  01cfe	6a 00		 push	 0
  01d00	6a 00		 push	 0
  01d02	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d05	e8 00 00 00 00	 call	 ?OnMove@CIrregularBorderMgr@@QAEXHH@Z ; CIrregularBorderMgr::OnMove

; 301  : }

  01d0a	83 c4 04	 add	 esp, 4
  01d0d	3b ec		 cmp	 ebp, esp
  01d0f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d14	8b e5		 mov	 esp, ebp
  01d16	5d		 pop	 ebp
  01d17	c3		 ret	 0
?OnSize@CIrregularBorderMgr@@QAEXXZ ENDP		; CIrregularBorderMgr::OnSize
_TEXT	ENDS
PUBLIC	?LoadChangeSubjectData@CIrregularBorderMgr@@AAEXXZ ; CIrregularBorderMgr::LoadChangeSubjectData
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv66 = -16						; size = 4
_pCurSubject$ = -12					; size = 4
_pSkin$ = -8						; size = 4
_this$ = -4						; size = 4
?LoadChangeSubjectData@CIrregularBorderMgr@@AAEXXZ PROC NEAR ; CIrregularBorderMgr::LoadChangeSubjectData
; _this$ = ecx

; 304  : {

  01d20	55		 push	 ebp
  01d21	8b ec		 mov	 ebp, esp
  01d23	83 ec 10	 sub	 esp, 16			; 00000010H
  01d26	56		 push	 esi
  01d27	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01d2c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  01d2f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01d32	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01d35	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  01d38	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 305  : 	ISkinMgr *pSkin = AfxGetUIManager()->UIGetSkinMgr();

  01d3b	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  01d40	89 45 f0	 mov	 DWORD PTR tv66[ebp], eax
  01d43	8b 45 f0	 mov	 eax, DWORD PTR tv66[ebp]
  01d46	8b 10		 mov	 edx, DWORD PTR [eax]
  01d48	8b f4		 mov	 esi, esp
  01d4a	8b 4d f0	 mov	 ecx, DWORD PTR tv66[ebp]
  01d4d	ff 52 28	 call	 DWORD PTR [edx+40]
  01d50	3b f4		 cmp	 esi, esp
  01d52	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d57	89 45 f8	 mov	 DWORD PTR _pSkin$[ebp], eax

; 306  : 	OneSubject *pCurSubject = pSkin->GetCurSubject();

  01d5a	8b 45 f8	 mov	 eax, DWORD PTR _pSkin$[ebp]
  01d5d	8b 10		 mov	 edx, DWORD PTR [eax]
  01d5f	8b f4		 mov	 esi, esp
  01d61	8b 4d f8	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  01d64	ff 52 28	 call	 DWORD PTR [edx+40]
  01d67	3b f4		 cmp	 esi, esp
  01d69	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d6e	89 45 f4	 mov	 DWORD PTR _pCurSubject$[ebp], eax

; 307  : }

  01d71	5e		 pop	 esi
  01d72	83 c4 10	 add	 esp, 16			; 00000010H
  01d75	3b ec		 cmp	 ebp, esp
  01d77	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d7c	8b e5		 mov	 esp, ebp
  01d7e	5d		 pop	 ebp
  01d7f	c3		 ret	 0
?LoadChangeSubjectData@CIrregularBorderMgr@@AAEXXZ ENDP	; CIrregularBorderMgr::LoadChangeSubjectData
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplustypes.h
_TEXT	ENDS
;	COMDAT ??0Rect@Gdiplus@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
??0Rect@Gdiplus@@QAE@HHHH@Z PROC NEAR			; Gdiplus::Rect::Rect, COMDAT
; _this$ = ecx

; 527  :     Rect(IN INT x,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 528  :          IN INT y,
; 529  :          IN INT width,
; 530  :          IN INT height)
; 531  :     {
; 532  :         X = x;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 533  :         Y = y;

  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 534  :         Width = width;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 535  :         Height = height;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 14	 mov	 ecx, DWORD PTR _height$[ebp]
  0002e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 536  :     }

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
??0Rect@Gdiplus@@QAE@HHHH@Z ENDP			; Gdiplus::Rect::Rect
_TEXT	ENDS
PUBLIC	?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics
EXTRN	_GdipCreateFromHDC@8:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusgraphics.h
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT
_graphics$ = -12					; size = 4
_this$ = -4						; size = 4
_hdc$ = 8						; size = 4
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z PROC NEAR		; Gdiplus::Graphics::Graphics, COMDAT
; _this$ = ecx

; 53   :     Graphics(IN HDC hdc)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :     {
; 55   :         GpGraphics *graphics = NULL;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _graphics$[ebp], 0

; 56   : 
; 57   :         lastResult = DllExports::GdipCreateFromHDC(hdc, &graphics);

  00021	8d 45 f4	 lea	 eax, DWORD PTR _graphics$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _hdc$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _GdipCreateFromHDC@8
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 
; 59   :         SetNativeGraphics(graphics);

  00034	8b 45 f4	 mov	 eax, DWORD PTR _graphics$[ebp]
  00037	50		 push	 eax
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics

; 60   :     }

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	52		 push	 edx
  00044	8b cd		 mov	 ecx, ebp
  00046	50		 push	 eax
  00047	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192851
  0004d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00052	58		 pop	 eax
  00053	5a		 pop	 edx
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$L192851:
  00064	01 00 00 00	 DD	 1
  00068	00 00 00 00	 DD	 $L192850
$L192850:
  0006c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00070	04 00 00 00	 DD	 4
  00074	00 00 00 00	 DD	 $L192849
$L192849:
  00078	67		 DB	 103			; 00000067H
  00079	72		 DB	 114			; 00000072H
  0007a	61		 DB	 97			; 00000061H
  0007b	70		 DB	 112			; 00000070H
  0007c	68		 DB	 104			; 00000068H
  0007d	69		 DB	 105			; 00000069H
  0007e	63		 DB	 99			; 00000063H
  0007f	73		 DB	 115			; 00000073H
  00080	00		 DB	 0
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ENDP		; Gdiplus::Graphics::Graphics
_TEXT	ENDS
EXTRN	_GdipDeleteGraphics@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1Graphics@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Graphics@Gdiplus@@QAE@XZ PROC NEAR			; Gdiplus::Graphics::~Graphics, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :         DllExports::GdipDeleteGraphics(nativeGraphics);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _GdipDeleteGraphics@4

; 104  :     }

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1Graphics@Gdiplus@@QAE@XZ ENDP			; Gdiplus::Graphics::~Graphics
_TEXT	ENDS
PUBLIC	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus
EXTRN	_GdipSetSmoothingMode@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_smoothingMode$ = 8					; size = 4
?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z PROC NEAR ; Gdiplus::Graphics::SetSmoothingMode, COMDAT
; _this$ = ecx

; 246  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  :         return SetStatus(DllExports::GdipSetSmoothingMode(nativeGraphics,
; 248  :                                                           smoothingMode));

  0000e	8b 45 08	 mov	 eax, DWORD PTR _smoothingMode$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _GdipSetSmoothingMode@8
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 249  :     }

  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ENDP ; Gdiplus::Graphics::SetSmoothingMode
_TEXT	ENDS
EXTRN	_GdipDrawImageRectRectI@56:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z
_TEXT	SEGMENT
tv86 = -12						; size = 4
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_image$ = 8						; size = 4
_destRect$ = 12						; size = 4
_srcx$ = 16						; size = 4
_srcy$ = 20						; size = 4
_srcwidth$ = 24						; size = 4
_srcheight$ = 28					; size = 4
_srcUnit$ = 32						; size = 4
_imageAttributes$ = 36					; size = 4
_callback$ = 40						; size = 4
_callbackData$ = 44					; size = 4
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z PROC NEAR ; Gdiplus::Graphics::DrawImage, COMDAT
; _this$ = ecx

; 1707 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1708 :         return SetStatus(DllExports::GdipDrawImageRectRectI(nativeGraphics,
; 1709 :                                                             image ? image->nativeImage
; 1710 :                                                                   : NULL,
; 1711 :                                                             destRect.X,
; 1712 :                                                             destRect.Y,
; 1713 :                                                             destRect.Width,
; 1714 :                                                             destRect.Height,
; 1715 :                                                             srcx,
; 1716 :                                                             srcy,
; 1717 :                                                             srcwidth,
; 1718 :                                                             srcheight,
; 1719 :                                                             srcUnit,
; 1720 :                                                             imageAttributes
; 1721 :                                                             ? imageAttributes->nativeImageAttr
; 1722 :                                                             : NULL,
; 1723 :                                                             callback,
; 1724 :                                                             callbackData));

  0001e	83 7d 24 00	 cmp	 DWORD PTR _imageAttributes$[ebp], 0
  00022	74 0a		 je	 SHORT $L192855
  00024	8b 45 24	 mov	 eax, DWORD PTR _imageAttributes$[ebp]
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	89 4d f8	 mov	 DWORD PTR tv70[ebp], ecx
  0002c	eb 07		 jmp	 SHORT $L192856
$L192855:
  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L192856:
  00035	83 7d 08 00	 cmp	 DWORD PTR _image$[ebp], 0
  00039	74 0b		 je	 SHORT $L192857
  0003b	8b 55 08	 mov	 edx, DWORD PTR _image$[ebp]
  0003e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00041	89 45 f4	 mov	 DWORD PTR tv86[ebp], eax
  00044	eb 07		 jmp	 SHORT $L192858
$L192857:
  00046	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$L192858:
  0004d	8b 4d 2c	 mov	 ecx, DWORD PTR _callbackData$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 28	 mov	 edx, DWORD PTR _callback$[ebp]
  00054	52		 push	 edx
  00055	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
  00058	50		 push	 eax
  00059	8b 4d 20	 mov	 ecx, DWORD PTR _srcUnit$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 1c	 mov	 edx, DWORD PTR _srcheight$[ebp]
  00060	52		 push	 edx
  00061	8b 45 18	 mov	 eax, DWORD PTR _srcwidth$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 14	 mov	 ecx, DWORD PTR _srcy$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 10	 mov	 edx, DWORD PTR _srcx$[ebp]
  0006c	52		 push	 edx
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _destRect$[ebp]
  00070	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00073	51		 push	 ecx
  00074	8b 55 0c	 mov	 edx, DWORD PTR _destRect$[ebp]
  00077	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0007a	50		 push	 eax
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _destRect$[ebp]
  0007e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00081	52		 push	 edx
  00082	8b 45 0c	 mov	 eax, DWORD PTR _destRect$[ebp]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	51		 push	 ecx
  00088	8b 55 f4	 mov	 edx, DWORD PTR tv86[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _GdipDrawImageRectRectI@56
  00097	50		 push	 eax
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1725 :     }

  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 28 00	 ret	 40			; 00000028H
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ENDP ; Gdiplus::Graphics::DrawImage
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_graphics$ = 8						; size = 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z PROC NEAR ; Gdiplus::Graphics::SetNativeGraphics, COMDAT
; _this$ = ecx

; 2339 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2340 :         this->nativeGraphics = graphics;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _graphics$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 2341 :     }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ENDP ; Gdiplus::Graphics::SetNativeGraphics
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC NEAR ; Gdiplus::Graphics::SetStatus, COMDAT
; _this$ = ecx

; 2344 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2345 :         if (status != Ok)

  0000e	83 7d 08 00	 cmp	 DWORD PTR _status$[ebp], 0
  00012	74 0e		 je	 SHORT $L116181

; 2346 :             return (lastResult = status);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _status$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00020	eb 03		 jmp	 SHORT $L116180
$L116181:

; 2347 :         else
; 2348 :             return status;

  00022	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$L116180:

; 2349 :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::Graphics::SetStatus
_TEXT	ENDS
PUBLIC	??_R13?0A@A@GdiplusBase@Gdiplus@@8		; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (4,-1,0,0)'
PUBLIC	??_R0?AVGdiplusBase@Gdiplus@@@8			; Gdiplus::GdiplusBase `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@Image@Gdiplus@@8			; Gdiplus::Image::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVImage@Gdiplus@@@8			; Gdiplus::Image `RTTI Type Descriptor'
PUBLIC	??_R4Image@Gdiplus@@6B@				; Gdiplus::Image::`RTTI Complete Object Locator'
PUBLIC	??_R3Image@Gdiplus@@8				; Gdiplus::Image::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Image@Gdiplus@@8				; Gdiplus::Image::`RTTI Base Class Array'
PUBLIC	??_7Image@Gdiplus@@6B@				; Gdiplus::Image::`vftable'
PUBLIC	??_GImage@Gdiplus@@UAEPAXI@Z			; Gdiplus::Image::`scalar deleting destructor'
EXTRN	_GdipLoadImageFromFile@8:NEAR
EXTRN	_GdipLoadImageFromFileICM@8:NEAR
EXTRN	??_EImage@Gdiplus@@UAEPAXI@Z:NEAR		; Gdiplus::Image::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7Image@Gdiplus@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
CONST	SEGMENT
??_7Image@Gdiplus@@6B@ DD FLAT:??_R4Image@Gdiplus@@6B@	; Gdiplus::Image::`vftable'
	DD	FLAT:??_EImage@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Image@Gdiplus@@UAEPAV12@XZ
CONST	ENDS
;	COMDAT ??_R4Image@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4Image@Gdiplus@@6B@ DD 00H				; Gdiplus::Image::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVImage@Gdiplus@@@8
	DD	FLAT:??_R3Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVImage@Gdiplus@@@8
_DATA	SEGMENT
??_R0?AVImage@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@	; Gdiplus::Image `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVImage@Gdiplus@@', 00H
_DATA	ENDS
;	COMDAT ??_R3Image@Gdiplus@@8
rdata$r	SEGMENT
??_R3Image@Gdiplus@@8 DD 00H				; Gdiplus::Image::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R2Image@Gdiplus@@8
rdata$r	SEGMENT
??_R2Image@Gdiplus@@8 DD FLAT:??_R1A@?0A@A@Image@Gdiplus@@8 ; Gdiplus::Image::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Image@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@A@Image@Gdiplus@@8 DD FLAT:??_R0?AVImage@Gdiplus@@@8 ; Gdiplus::Image::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT
??_R13?0A@A@GdiplusBase@Gdiplus@@8 DD FLAT:??_R0?AVGdiplusBase@Gdiplus@@@8 ; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (4,-1,0,0)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVGdiplusBase@Gdiplus@@@8
_DATA	SEGMENT
??_R0?AVGdiplusBase@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@ ; Gdiplus::GdiplusBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGdiplusBase@Gdiplus@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??0Image@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_useEmbeddedColorManagement$ = 12			; size = 4
??0Image@Gdiplus@@QAE@PB_WH@Z PROC NEAR			; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Image@Gdiplus@@6B@

; 24   :     nativeImage = NULL;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 25   :     if(useEmbeddedColorManagement)

  00021	83 7d 0c 00	 cmp	 DWORD PTR _useEmbeddedColorManagement$[ebp], 0
  00025	74 18		 je	 SHORT $L116797

; 26   :     {
; 27   :         lastResult = DllExports::GdipLoadImageFromFileICM(
; 28   :             filename, 
; 29   :             &nativeImage
; 30   :         );

  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 c2 04	 add	 edx, 4
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _GdipLoadImageFromFileICM@8
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 31   :     }
; 32   :     else

  0003d	eb 16		 jmp	 SHORT $L116796
$L116797:

; 33   :     {      
; 34   :         lastResult = DllExports::GdipLoadImageFromFile(
; 35   :             filename, 
; 36   :             &nativeImage
; 37   :         );

  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	83 c2 04	 add	 edx, 4
  00045	52		 push	 edx
  00046	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _GdipLoadImageFromFile@8
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L116796:

; 38   :     }
; 39   : }

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 c4 04	 add	 esp, 4
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
??0Image@Gdiplus@@QAE@PB_WH@Z ENDP			; Gdiplus::Image::Image
_TEXT	ENDS
PUBLIC	??3GdiplusBase@Gdiplus@@SAXPAX@Z		; Gdiplus::GdiplusBase::operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GImage@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GImage@Gdiplus@@UAEPAXI@Z PROC NEAR			; Gdiplus::Image::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L109528
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3GdiplusBase@Gdiplus@@SAXPAX@Z ; Gdiplus::GdiplusBase::operator delete
  00027	83 c4 04	 add	 esp, 4
$L109528:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GImage@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::Image::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_GdipFree@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbase.h
;	COMDAT ??3GdiplusBase@Gdiplus@@SAXPAX@Z
_TEXT	SEGMENT
_in_pVoid$ = 8						; size = 4
??3GdiplusBase@Gdiplus@@SAXPAX@Z PROC NEAR		; Gdiplus::GdiplusBase::operator delete, COMDAT

; 22   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :        DllExports::GdipFree(in_pVoid);

  00003	8b 45 08	 mov	 eax, DWORD PTR _in_pVoid$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _GdipFree@4

; 24   :     }

  0000c	3b ec		 cmp	 ebp, esp
  0000e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??3GdiplusBase@Gdiplus@@SAXPAX@Z ENDP			; Gdiplus::GdiplusBase::operator delete
_TEXT	ENDS
EXTRN	_GdipDisposeImage@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
;	COMDAT ??1Image@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Image@Gdiplus@@UAE@XZ PROC NEAR			; Gdiplus::Image::~Image, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Image@Gdiplus@@6B@

; 91   :     DllExports::GdipDisposeImage(nativeImage);

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 _GdipDisposeImage@4

; 92   : }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??1Image@Gdiplus@@UAE@XZ ENDP				; Gdiplus::Image::~Image
_TEXT	ENDS
PUBLIC	??2GdiplusBase@Gdiplus@@SAPAXI@Z		; Gdiplus::GdiplusBase::operator new
PUBLIC	??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ; Gdiplus::Image::Image
PUBLIC	?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus
EXTRN	_GdipCloneImage@8:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T192877 DD	0ffffffffH
	DD	FLAT:$L192870
$T192872 DD	019930520H
	DD	01H
	DD	FLAT:$T192877
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?Clone@Image@Gdiplus@@UAEPAV12@XZ
_TEXT	SEGMENT
tv80 = -40						; size = 4
$T192867 = -36						; size = 4
$T192866 = -32						; size = 4
_cloneimage$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Image@Gdiplus@@UAEPAV12@XZ PROC NEAR		; Gdiplus::Image::Clone, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@Image@Gdiplus@@UAEPAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00023	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00026	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00029	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00032	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00035	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 97   :     GpImage *cloneimage = NULL;

  00038	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cloneimage$[ebp], 0

; 98   : 
; 99   :     SetStatus(DllExports::GdipCloneImage(nativeImage, &cloneimage));

  0003f	8d 45 e8	 lea	 eax, DWORD PTR _cloneimage$[ebp]
  00042	50		 push	 eax
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 _GdipCloneImage@8
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 100  : 
; 101  :     return new Image(cloneimage, lastResult);

  00058	6a 10		 push	 16			; 00000010H
  0005a	e8 00 00 00 00	 call	 ??2GdiplusBase@Gdiplus@@SAPAXI@Z ; Gdiplus::GdiplusBase::operator new
  0005f	83 c4 04	 add	 esp, 4
  00062	89 45 dc	 mov	 DWORD PTR $T192867[ebp], eax
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	83 7d dc 00	 cmp	 DWORD PTR $T192867[ebp], 0
  00070	74 18		 je	 SHORT $L192868
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00078	51		 push	 ecx
  00079	8b 55 e8	 mov	 edx, DWORD PTR _cloneimage$[ebp]
  0007c	52		 push	 edx
  0007d	8b 4d dc	 mov	 ecx, DWORD PTR $T192867[ebp]
  00080	e8 00 00 00 00	 call	 ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ; Gdiplus::Image::Image
  00085	89 45 d8	 mov	 DWORD PTR tv80[ebp], eax
  00088	eb 07		 jmp	 SHORT $L192869
$L192868:
  0008a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$L192869:
  00091	8b 45 d8	 mov	 eax, DWORD PTR tv80[ebp]
  00094	89 45 e0	 mov	 DWORD PTR $T192866[ebp], eax
  00097	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	8b 45 e0	 mov	 eax, DWORD PTR $T192866[ebp]

; 102  : }

  000a1	52		 push	 edx
  000a2	8b cd		 mov	 ecx, ebp
  000a4	50		 push	 eax
  000a5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192876
  000ab	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b0	58		 pop	 eax
  000b1	5a		 pop	 edx
  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000bc	83 c4 28	 add	 esp, 40			; 00000028H
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$L192876:
  000ca	01 00 00 00	 DD	 1
  000ce	00 00 00 00	 DD	 $L192875
$L192875:
  000d2	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d6	04 00 00 00	 DD	 4
  000da	00 00 00 00	 DD	 $L192873
$L192873:
  000de	63		 DB	 99			; 00000063H
  000df	6c		 DB	 108			; 0000006cH
  000e0	6f		 DB	 111			; 0000006fH
  000e1	6e		 DB	 110			; 0000006eH
  000e2	65		 DB	 101			; 00000065H
  000e3	69		 DB	 105			; 00000069H
  000e4	6d		 DB	 109			; 0000006dH
  000e5	61		 DB	 97			; 00000061H
  000e6	67		 DB	 103			; 00000067H
  000e7	65		 DB	 101			; 00000065H
  000e8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192870:
  00000	8b 45 dc	 mov	 eax, DWORD PTR $T192867[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3GdiplusBase@Gdiplus@@SAXPAX@Z ; Gdiplus::GdiplusBase::operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Clone@Image@Gdiplus@@UAEPAV12@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192872
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Clone@Image@Gdiplus@@UAEPAV12@XZ ENDP			; Gdiplus::Image::Clone
EXTRN	_GdipAlloc@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbase.h
;	COMDAT ??2GdiplusBase@Gdiplus@@SAPAXI@Z
_TEXT	SEGMENT
_in_size$ = 8						; size = 4
??2GdiplusBase@Gdiplus@@SAPAXI@Z PROC NEAR		; Gdiplus::GdiplusBase::operator new, COMDAT

; 26   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   :        return DllExports::GdipAlloc(in_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR _in_size$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _GdipAlloc@4

; 28   :     }

  0000c	3b ec		 cmp	 ebp, esp
  0000e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??2GdiplusBase@Gdiplus@@SAPAXI@Z ENDP			; Gdiplus::GdiplusBase::operator new
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusheaders.h
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC NEAR ; Gdiplus::Image::SetStatus, COMDAT
; _this$ = ecx

; 472  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 473  :         if (status != Ok)

  0000e	83 7d 08 00	 cmp	 DWORD PTR _status$[ebp], 0
  00012	74 0e		 je	 SHORT $L109523

; 474  :             return (lastResult = status);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _status$[ebp]
  0001a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00020	eb 03		 jmp	 SHORT $L109522
$L109523:

; 475  :         else
; 476  :             return status;

  00022	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$L109522:

; 477  :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Image::SetStatus
_TEXT	ENDS
EXTRN	_GdipGetImageWidth@8:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
;	COMDAT ?GetWidth@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT
_width$ = -12						; size = 4
_this$ = -4						; size = 4
?GetWidth@Image@Gdiplus@@QAEIXZ PROC NEAR		; Gdiplus::Image::GetWidth, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :     UINT width = 0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _width$[ebp], 0

; 227  : 
; 228  :     SetStatus(DllExports::GdipGetImageWidth(nativeImage, &width));

  00021	8d 45 f4	 lea	 eax, DWORD PTR _width$[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 _GdipGetImageWidth@8
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 229  : 
; 230  :     return width;

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]

; 231  : }

  0003d	52		 push	 edx
  0003e	8b cd		 mov	 ecx, ebp
  00040	50		 push	 eax
  00041	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192885
  00047	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0004c	58		 pop	 eax
  0004d	5a		 pop	 edx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$L192885:
  0005c	01 00 00 00	 DD	 1
  00060	00 00 00 00	 DD	 $L192884
$L192884:
  00064	f4 ff ff ff	 DD	 -12			; fffffff4H
  00068	04 00 00 00	 DD	 4
  0006c	00 00 00 00	 DD	 $L192883
$L192883:
  00070	77		 DB	 119			; 00000077H
  00071	69		 DB	 105			; 00000069H
  00072	64		 DB	 100			; 00000064H
  00073	74		 DB	 116			; 00000074H
  00074	68		 DB	 104			; 00000068H
  00075	00		 DB	 0
?GetWidth@Image@Gdiplus@@QAEIXZ ENDP			; Gdiplus::Image::GetWidth
_TEXT	ENDS
EXTRN	_GdipGetImageHeight@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?GetHeight@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT
_height$ = -12						; size = 4
_this$ = -4						; size = 4
?GetHeight@Image@Gdiplus@@QAEIXZ PROC NEAR		; Gdiplus::Image::GetHeight, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  :     UINT height = 0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _height$[ebp], 0

; 237  : 
; 238  :     SetStatus(DllExports::GdipGetImageHeight(nativeImage, &height));

  00021	8d 45 f4	 lea	 eax, DWORD PTR _height$[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 _GdipGetImageHeight@8
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 239  : 
; 240  :     return height;

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _height$[ebp]

; 241  : }

  0003d	52		 push	 edx
  0003e	8b cd		 mov	 ecx, ebp
  00040	50		 push	 eax
  00041	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192889
  00047	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0004c	58		 pop	 eax
  0004d	5a		 pop	 edx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$L192889:
  0005c	01 00 00 00	 DD	 1
  00060	00 00 00 00	 DD	 $L192888
$L192888:
  00064	f4 ff ff ff	 DD	 -12			; fffffff4H
  00068	04 00 00 00	 DD	 4
  0006c	00 00 00 00	 DD	 $L192887
$L192887:
  00070	68		 DB	 104			; 00000068H
  00071	65		 DB	 101			; 00000065H
  00072	69		 DB	 105			; 00000069H
  00073	67		 DB	 103			; 00000067H
  00074	68		 DB	 104			; 00000068H
  00075	74		 DB	 116			; 00000074H
  00076	00		 DB	 0
?GetHeight@Image@Gdiplus@@QAEIXZ ENDP			; Gdiplus::Image::GetHeight
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ
_TEXT	SEGMENT
_lastStatus$ = -8					; size = 4
_this$ = -4						; size = 4
?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ PROC NEAR ; Gdiplus::Image::GetLastStatus, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 489  :     Status lastStatus = lastResult;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	89 4d f8	 mov	 DWORD PTR _lastStatus$[ebp], ecx

; 490  :     lastResult = Ok;

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 491  : 
; 492  :     return lastStatus;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _lastStatus$[ebp]

; 493  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ ENDP	; Gdiplus::Image::GetLastStatus
_TEXT	ENDS
PUBLIC	?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativeImage$ = 8					; size = 4
_status$ = 12						; size = 4
??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z PROC NEAR ; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Image@Gdiplus@@6B@

; 498  :     SetNativeImage(nativeImage);

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nativeImage$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage

; 499  :     lastResult = status;

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _status$[ebp]
  00029	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 500  : }

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ENDP	; Gdiplus::Image::Image
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativeImage$ = 8					; size = 4
?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z PROC NEAR ; Gdiplus::Image::SetNativeImage, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 505  :     this->nativeImage = nativeImage;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _nativeImage$[ebp]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 506  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ENDP	; Gdiplus::Image::SetNativeImage
_TEXT	ENDS
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T192902 DD	0ffffffffH
	DD	FLAT:$L192896
	DD	00H
	DD	FLAT:$L192895
$T192900 DD	019930520H
	DD	02H
	DD	FLAT:$T192902
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T192897 = -44						; size = 4
$T192894 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T192897[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T192894[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T192897[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T192897[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T192894[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192895:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T192894[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192896:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T192897[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L192898
  0001e	83 65 d4 fe	 and	 DWORD PTR $T192897[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192898:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192900
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T192914 DD	0ffffffffH
	DD	FLAT:$L192908
	DD	00H
	DD	FLAT:$L192907
$T192912 DD	019930520H
	DD	02H
	DD	FLAT:$T192914
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T192909 = -44						; size = 4
$T192906 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T192909[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T192906[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T192909[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T192909[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T192906[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192907:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T192906[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192908:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T192909[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L192910
  0001e	83 65 d4 fe	 and	 DWORD PTR $T192909[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192910:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192912
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
END
