; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	\boxgit\PlayBox\CommonLib\common\YL_Ini.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsncpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsrev
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GYL_Ini@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3YL_Ini@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVYL_Ini@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@YL_Ini@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_7YL_Ini@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2YL_Ini@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4YL_Ini@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG56194 DB	00H
$SG56203 DB	00H
$SG56212 DB	00H
$SG56220 DB	00H
$SG56228 DB	00H
$SG56237 DB	00H
$SG56246 DB	00H
	ORG $+1
$SG56255 DB	'%f', 00H
	ORG $+1
$SG56257 DB	'%%.%df', 00H
$SG56259 DB	00H
$SG56273 DB	00H
$SG56315 DB	00H
	ORG $+2
$SG56336 DB	'%02X', 00H
$SG56379 DB	00H
$SG56404 DB	00H
$SG56411 DB	00H
$SG56444 DB	'%d', 00H
	ORG $+1
$SG56456 DB	'%o', 00H
	ORG $+1
$SG56458 DB	'%X', 00H
	ORG $+1
$SG56460 DB	'%u', 00H
	ORG $+1
$SG56467 DB	'true', 00H
	ORG $+3
$SG56468 DB	'yes', 00H
CONST	ENDS
PUBLIC	??_R4YL_Ini@@6B@				; YL_Ini::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVYL_Ini@@@8				; YL_Ini `RTTI Type Descriptor'
PUBLIC	??_R3YL_Ini@@8					; YL_Ini::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2YL_Ini@@8					; YL_Ini::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@YL_Ini@@8				; YL_Ini::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0YL_Ini@@QAE@XZ				; YL_Ini::YL_Ini
PUBLIC	??_7YL_Ini@@6B@					; YL_Ini::`vftable'
PUBLIC	??_GYL_Ini@@UAEPAXI@Z				; YL_Ini::`scalar deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	??_EYL_Ini@@UAEPAXI@Z:NEAR			; YL_Ini::`vector deleting destructor'
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\commonlib\common\yl_ini.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT ??_7YL_Ini@@6B@
CONST	SEGMENT
??_7YL_Ini@@6B@ DD FLAT:??_R4YL_Ini@@6B@		; YL_Ini::`vftable'
	DD	FLAT:??_EYL_Ini@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4YL_Ini@@6B@
rdata$r	SEGMENT
??_R4YL_Ini@@6B@ DD 00H					; YL_Ini::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVYL_Ini@@@8
	DD	FLAT:??_R3YL_Ini@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVYL_Ini@@@8
_DATA	SEGMENT
??_R0?AVYL_Ini@@@8 DD FLAT:??_7type_info@@6B@		; YL_Ini `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVYL_Ini@@', 00H
_DATA	ENDS
;	COMDAT ??_R3YL_Ini@@8
rdata$r	SEGMENT
??_R3YL_Ini@@8 DD 00H					; YL_Ini::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2YL_Ini@@8
rdata$r	ENDS
;	COMDAT ??_R2YL_Ini@@8
rdata$r	SEGMENT
??_R2YL_Ini@@8 DD FLAT:??_R1A@?0A@A@YL_Ini@@8		; YL_Ini::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@YL_Ini@@8
rdata$r	SEGMENT
??_R1A@?0A@A@YL_Ini@@8 DD FLAT:??_R0?AVYL_Ini@@@8	; YL_Ini::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0YL_Ini@@QAE@XZ PROC NEAR				; YL_Ini::YL_Ini
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7YL_Ini@@6B@

; 22   : 	m_pszPathName = NULL;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 23   : }

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0YL_Ini@@QAE@XZ ENDP					; YL_Ini::YL_Ini
_TEXT	ENDS
PUBLIC	??1YL_Ini@@UAE@XZ				; YL_Ini::~YL_Ini
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__RTC_CheckEsp:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GYL_Ini@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GYL_Ini@@UAEPAXI@Z PROC NEAR				; YL_Ini::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1YL_Ini@@UAE@XZ	; YL_Ini::~YL_Ini
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L56155
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L56155:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GYL_Ini@@UAEPAXI@Z ENDP				; YL_Ini::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0YL_Ini@@QAE@PBD@Z				; YL_Ini::YL_Ini
PUBLIC	?SetPathName@YL_Ini@@QAEXPBD@Z			; YL_Ini::SetPathName
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpPathName$ = 8					; size = 4
??0YL_Ini@@QAE@PBD@Z PROC NEAR				; YL_Ini::YL_Ini
; _this$ = ecx

; 26   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	51		 push	 ecx
  00034	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0003b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7YL_Ini@@6B@

; 27   : 	m_pszPathName = NULL;

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 28   : 	SetPathName(lpPathName);

  00051	8b 55 08	 mov	 edx, DWORD PTR _lpPathName$[ebp]
  00054	52		 push	 edx
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?SetPathName@YL_Ini@@QAEXPBD@Z ; YL_Ini::SetPathName

; 29   : }

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	83 c4 04	 add	 esp, 4
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
??0YL_Ini@@QAE@PBD@Z ENDP				; YL_Ini::YL_Ini
_TEXT	ENDS
EXTRN	__imp__free:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1YL_Ini@@UAE@XZ PROC NEAR				; YL_Ini::~YL_Ini
; _this$ = ecx

; 32   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	51		 push	 ecx
  00074	56		 push	 esi
  00075	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0007c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7YL_Ini@@6B@

; 33   : 	if (m_pszPathName != NULL)

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0008f	74 23		 je	 SHORT $L56162

; 34   : 	{
; 35   : 	//因为m_pszPathName是用_strdup生成，而_strdup调用的malloc来分配内存，因此需要用free来释放空间
; 36   : 		free(m_pszPathName);

  00091	8b f4		 mov	 esi, esp
  00093	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00096	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00099	50		 push	 eax
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000a0	83 c4 04	 add	 esp, 4
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : 		m_pszPathName = NULL;

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$L56162:

; 38   : 	}
; 39   : }

  000b4	5e		 pop	 esi
  000b5	83 c4 04	 add	 esp, 4
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
??1YL_Ini@@UAE@XZ ENDP					; YL_Ini::~YL_Ini
_TEXT	ENDS
EXTRN	__imp___strdup:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpPathName$ = 8					; size = 4
?SetPathName@YL_Ini@@QAEXPBD@Z PROC NEAR		; YL_Ini::SetPathName
; _this$ = ecx

; 47   : {

  000d0	55		 push	 ebp
  000d1	8b ec		 mov	 ebp, esp
  000d3	51		 push	 ecx
  000d4	56		 push	 esi
  000d5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  000dc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	if (lpPathName == NULL)

  000df	83 7d 08 00	 cmp	 DWORD PTR _lpPathName$[ebp], 0
  000e3	75 14		 jne	 SHORT $L56168

; 49   : 	{
; 50   : 		if (m_pszPathName != NULL)

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000ec	74 09		 je	 SHORT $L56169

; 51   : 			*m_pszPathName = _T('\0');

  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f4	c6 02 00	 mov	 BYTE PTR [edx], 0
$L56169:

; 52   : 	}
; 53   : 	else

  000f7	eb 48		 jmp	 SHORT $L56167
$L56168:

; 54   : 	{
; 55   : 		if (m_pszPathName != NULL)

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00100	74 23		 je	 SHORT $L56171

; 56   : 		{
; 57   : 			free(m_pszPathName);

  00102	8b f4		 mov	 esi, esp
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0010a	52		 push	 edx
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00111	83 c4 04	 add	 esp, 4
  00114	3b f4		 cmp	 esi, esp
  00116	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 58   : 			m_pszPathName = NULL;

  0011b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L56171:

; 59   : 		}
; 60   : 		m_pszPathName = _tcsdup(lpPathName);

  00125	8b f4		 mov	 esi, esp
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _lpPathName$[ebp]
  0012a	51		 push	 ecx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  00131	83 c4 04	 add	 esp, 4
  00134	3b f4		 cmp	 esi, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013e	89 42 04	 mov	 DWORD PTR [edx+4], eax
$L56167:

; 61   : 	}
; 62   : }

  00141	5e		 pop	 esi
  00142	83 c4 04	 add	 esp, 4
  00145	3b ec		 cmp	 ebp, esp
  00147	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 04 00	 ret	 4
?SetPathName@YL_Ini@@QAEXPBD@Z ENDP			; YL_Ini::SetPathName
_TEXT	ENDS
PUBLIC	__tcsncpy
PUBLIC	?GetString@YL_Ini@@QBEKPBD0PADK0@Z		; YL_Ini::GetString
PUBLIC	?__GetStringDynamic@YL_Ini@@IBEPADPBD00@Z	; YL_Ini::__GetStringDynamic
EXTRN	_strlen:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv77 = -20						; size = 4
$T56587 = -16						; size = 4
_dwLen$ = -12						; size = 4
_psz$ = -8						; size = 4
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_lpBuffer$ = 16						; size = 4
_dwBufSize$ = 20					; size = 4
_lpDefault$ = 24					; size = 4
?GetString@YL_Ini@@QBEKPBD0PADK0@Z PROC NEAR		; YL_Ini::GetString
; _this$ = ecx

; 71   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	83 ec 14	 sub	 esp, 20			; 00000014H
  00166	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0016b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0016e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00171	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00174	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00177	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0017a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 	if (lpBuffer != NULL)

  0017d	83 7d 10 00	 cmp	 DWORD PTR _lpBuffer$[ebp], 0
  00181	74 06		 je	 SHORT $L56180

; 73   : 		*lpBuffer = _T('\0');

  00183	8b 45 10	 mov	 eax, DWORD PTR _lpBuffer$[ebp]
  00186	c6 00 00	 mov	 BYTE PTR [eax], 0
$L56180:

; 74   : 
; 75   : 	LPTSTR psz = __GetStringDynamic(lpSection, lpKey, lpDefault);

  00189	8b 4d 18	 mov	 ecx, DWORD PTR _lpDefault$[ebp]
  0018c	51		 push	 ecx
  0018d	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00190	52		 push	 edx
  00191	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00194	50		 push	 eax
  00195	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00198	e8 00 00 00 00	 call	 ?__GetStringDynamic@YL_Ini@@IBEPADPBD00@Z ; YL_Ini::__GetStringDynamic
  0019d	89 45 f8	 mov	 DWORD PTR _psz$[ebp], eax

; 76   : 	DWORD dwLen = (DWORD)_tcslen(psz);

  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _psz$[ebp]
  001a3	51		 push	 ecx
  001a4	e8 00 00 00 00	 call	 _strlen
  001a9	83 c4 04	 add	 esp, 4
  001ac	89 45 f4	 mov	 DWORD PTR _dwLen$[ebp], eax

; 77   : 
; 78   : 	if (lpBuffer != NULL)

  001af	83 7d 10 00	 cmp	 DWORD PTR _lpBuffer$[ebp], 0
  001b3	74 30		 je	 SHORT $L56184

; 79   : 	{
; 80   : 		_tcsncpy(lpBuffer, psz, dwBufSize);

  001b5	8b 55 14	 mov	 edx, DWORD PTR _dwBufSize$[ebp]
  001b8	52		 push	 edx
  001b9	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  001bc	50		 push	 eax
  001bd	8b 4d 10	 mov	 ecx, DWORD PTR _lpBuffer$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 __tcsncpy
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 81   : 		dwLen = min(dwLen, dwBufSize);

  001c9	8b 55 f4	 mov	 edx, DWORD PTR _dwLen$[ebp]
  001cc	3b 55 14	 cmp	 edx, DWORD PTR _dwBufSize$[ebp]
  001cf	73 08		 jae	 SHORT $L56585
  001d1	8b 45 f4	 mov	 eax, DWORD PTR _dwLen$[ebp]
  001d4	89 45 ec	 mov	 DWORD PTR tv77[ebp], eax
  001d7	eb 06		 jmp	 SHORT $L56586
$L56585:
  001d9	8b 4d 14	 mov	 ecx, DWORD PTR _dwBufSize$[ebp]
  001dc	89 4d ec	 mov	 DWORD PTR tv77[ebp], ecx
$L56586:
  001df	8b 55 ec	 mov	 edx, DWORD PTR tv77[ebp]
  001e2	89 55 f4	 mov	 DWORD PTR _dwLen$[ebp], edx
$L56184:

; 82   : 	}
; 83   : 
; 84   : 	delete [] psz;

  001e5	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  001e8	89 45 f0	 mov	 DWORD PTR $T56587[ebp], eax
  001eb	8b 4d f0	 mov	 ecx, DWORD PTR $T56587[ebp]
  001ee	51		 push	 ecx
  001ef	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f4	83 c4 04	 add	 esp, 4

; 85   : 	return dwLen;

  001f7	8b 45 f4	 mov	 eax, DWORD PTR _dwLen$[ebp]

; 86   : }

  001fa	83 c4 14	 add	 esp, 20			; 00000014H
  001fd	3b ec		 cmp	 ebp, esp
  001ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c2 14 00	 ret	 20			; 00000014H
?GetString@YL_Ini@@QBEKPBD0PADK0@Z ENDP			; YL_Ini::GetString
_TEXT	ENDS
EXTRN	__imp___mbsnbcpy:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__n$ = 16						; size = 4
__tcsncpy PROC NEAR					; COMDAT

; 843  : __inline _PC _tcsncpy(_PC _s1,_CPC _s2,size_t _n) {return (_PC)_mbsnbcpy((_PUC)_s1,(_CPUC)_s2,_n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR __n$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __s2$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR __s1$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
__tcsncpy ENDP
_TEXT	ENDS
PUBLIC	?WriteString@YL_Ini@@QBEHPBD00@Z		; YL_Ini::WriteString
EXTRN	__imp__WritePrivateProfileStringA@16:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\commonlib\common\yl_ini.cpp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_lpValue$ = 16						; size = 4
?WriteString@YL_Ini@@QBEHPBD00@Z PROC NEAR		; YL_Ini::WriteString
; _this$ = ecx

; 90   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	83 ec 08	 sub	 esp, 8
  00216	56		 push	 esi
  00217	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0021e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00225	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	if (lpSection == NULL || lpKey == NULL)

  00228	83 7d 08 00	 cmp	 DWORD PTR _lpSection$[ebp], 0
  0022c	74 06		 je	 SHORT $L56193
  0022e	83 7d 0c 00	 cmp	 DWORD PTR _lpKey$[ebp], 0
  00232	75 04		 jne	 SHORT $L56192
$L56193:

; 92   : 		return FALSE;

  00234	33 c0		 xor	 eax, eax
  00236	eb 37		 jmp	 SHORT $L56191
$L56192:

; 93   : 
; 94   : 	return ::WritePrivateProfileString(lpSection, lpKey, lpValue == NULL ? _T("") : lpValue, m_pszPathName);

  00238	83 7d 10 00	 cmp	 DWORD PTR _lpValue$[ebp], 0
  0023c	75 09		 jne	 SHORT $L56590
  0023e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], OFFSET FLAT:$SG56194
  00245	eb 06		 jmp	 SHORT $L56591
$L56590:
  00247	8b 45 10	 mov	 eax, DWORD PTR _lpValue$[ebp]
  0024a	89 45 f8	 mov	 DWORD PTR tv70[ebp], eax
$L56591:
  0024d	8b f4		 mov	 esi, esp
  0024f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00252	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00255	52		 push	 edx
  00256	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
  00259	50		 push	 eax
  0025a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  0025d	51		 push	 ecx
  0025e	8b 55 08	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00261	52		 push	 edx
  00262	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WritePrivateProfileStringA@16
  00268	3b f4		 cmp	 esi, esp
  0026a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L56191:

; 95   : }

  0026f	5e		 pop	 esi
  00270	83 c4 08	 add	 esp, 8
  00273	3b ec		 cmp	 ebp, esp
  00275	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027a	8b e5		 mov	 esp, ebp
  0027c	5d		 pop	 ebp
  0027d	c2 0c 00	 ret	 12			; 0000000cH
?WriteString@YL_Ini@@QBEHPBD00@Z ENDP			; YL_Ini::WriteString
_TEXT	ENDS
PUBLIC	?GetInt@YL_Ini@@QBEHPBD0HH@Z			; YL_Ini::GetInt
PUBLIC	?__ValidateBase@YL_Ini@@KAHH@Z			; YL_Ini::__ValidateBase
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__strtoul:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv86 = -88						; size = 4
_sz$ = -80						; size = 65
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_nDefault$ = 16						; size = 4
_nBase$ = 20						; size = 4
?GetInt@YL_Ini@@QBEHPBD0HH@Z PROC NEAR			; YL_Ini::GetInt
; _this$ = ecx

; 103  : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	83 ec 58	 sub	 esp, 88			; 00000058H
  00286	56		 push	 esi
  00287	57		 push	 edi
  00288	51		 push	 ecx
  00289	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0028c	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00291	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00296	f3 ab		 rep stosd
  00298	59		 pop	 ecx
  00299	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0029e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002a1	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 	TCHAR sz[DEF_PROFILE_NUM_LEN + 1] = _T("");

  002a4	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56203
  002a9	88 45 b0	 mov	 BYTE PTR _sz$[ebp], al
  002ac	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002b1	33 c0		 xor	 eax, eax
  002b3	8d 7d b1	 lea	 edi, DWORD PTR _sz$[ebp+1]
  002b6	f3 ab		 rep stosd

; 105  : 	GetString(lpSection, lpKey, sz, DEF_PROFILE_NUM_LEN);

  002b8	6a 00		 push	 0
  002ba	6a 40		 push	 64			; 00000040H
  002bc	8d 4d b0	 lea	 ecx, DWORD PTR _sz$[ebp]
  002bf	51		 push	 ecx
  002c0	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  002c3	52		 push	 edx
  002c4	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  002c7	50		 push	 eax
  002c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cb	e8 00 00 00 00	 call	 ?GetString@YL_Ini@@QBEKPBD0PADK0@Z ; YL_Ini::GetString

; 106  : 	return *sz == _T('\0') ? nDefault : int(_tcstoul(sz, NULL, __ValidateBase(nBase)));

  002d0	0f be 4d b0	 movsx	 ecx, BYTE PTR _sz$[ebp]
  002d4	85 c9		 test	 ecx, ecx
  002d6	75 08		 jne	 SHORT $L56594
  002d8	8b 55 10	 mov	 edx, DWORD PTR _nDefault$[ebp]
  002db	89 55 a8	 mov	 DWORD PTR tv86[ebp], edx
  002de	eb 28		 jmp	 SHORT $L56595
$L56594:
  002e0	8b 45 14	 mov	 eax, DWORD PTR _nBase$[ebp]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 ?__ValidateBase@YL_Ini@@KAHH@Z ; YL_Ini::__ValidateBase
  002e9	83 c4 04	 add	 esp, 4
  002ec	8b f4		 mov	 esi, esp
  002ee	50		 push	 eax
  002ef	6a 00		 push	 0
  002f1	8d 4d b0	 lea	 ecx, DWORD PTR _sz$[ebp]
  002f4	51		 push	 ecx
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtoul
  002fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fe	3b f4		 cmp	 esi, esp
  00300	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00305	89 45 a8	 mov	 DWORD PTR tv86[ebp], eax
$L56595:
  00308	8b 45 a8	 mov	 eax, DWORD PTR tv86[ebp]

; 107  : }

  0030b	52		 push	 edx
  0030c	8b cd		 mov	 ecx, ebp
  0030e	50		 push	 eax
  0030f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56600
  00315	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0031a	58		 pop	 eax
  0031b	5a		 pop	 edx
  0031c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00324	5f		 pop	 edi
  00325	5e		 pop	 esi
  00326	83 c4 58	 add	 esp, 88			; 00000058H
  00329	3b ec		 cmp	 ebp, esp
  0032b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 10 00	 ret	 16			; 00000010H
$L56600:
  00336	01 00 00 00	 DD	 1
  0033a	00 00 00 00	 DD	 $L56599
$L56599:
  0033e	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00342	41 00 00 00	 DD	 65			; 00000041H
  00346	00 00 00 00	 DD	 $L56596
$L56596:
  0034a	73		 DB	 115			; 00000073H
  0034b	7a		 DB	 122			; 0000007aH
  0034c	00		 DB	 0
?GetInt@YL_Ini@@QBEHPBD0HH@Z ENDP			; YL_Ini::GetInt
_TEXT	ENDS
PUBLIC	?GetUInt@YL_Ini@@QBEIPBD0IH@Z			; YL_Ini::GetUInt
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv86 = -88						; size = 4
_sz$ = -80						; size = 65
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_nDefault$ = 16						; size = 4
_nBase$ = 20						; size = 4
?GetUInt@YL_Ini@@QBEIPBD0IH@Z PROC NEAR			; YL_Ini::GetUInt
; _this$ = ecx

; 111  : {

  00350	55		 push	 ebp
  00351	8b ec		 mov	 ebp, esp
  00353	83 ec 58	 sub	 esp, 88			; 00000058H
  00356	56		 push	 esi
  00357	57		 push	 edi
  00358	51		 push	 ecx
  00359	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0035c	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00361	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00366	f3 ab		 rep stosd
  00368	59		 pop	 ecx
  00369	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0036e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00371	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	TCHAR sz[DEF_PROFILE_NUM_LEN + 1] = _T("");

  00374	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56212
  00379	88 45 b0	 mov	 BYTE PTR _sz$[ebp], al
  0037c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00381	33 c0		 xor	 eax, eax
  00383	8d 7d b1	 lea	 edi, DWORD PTR _sz$[ebp+1]
  00386	f3 ab		 rep stosd

; 113  : 	GetString(lpSection, lpKey, sz, DEF_PROFILE_NUM_LEN);

  00388	6a 00		 push	 0
  0038a	6a 40		 push	 64			; 00000040H
  0038c	8d 4d b0	 lea	 ecx, DWORD PTR _sz$[ebp]
  0038f	51		 push	 ecx
  00390	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00393	52		 push	 edx
  00394	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00397	50		 push	 eax
  00398	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0039b	e8 00 00 00 00	 call	 ?GetString@YL_Ini@@QBEKPBD0PADK0@Z ; YL_Ini::GetString

; 114  : 	return *sz == _T('\0') ? nDefault : UINT(_tcstoul(sz, NULL, __ValidateBase(nBase)));

  003a0	0f be 4d b0	 movsx	 ecx, BYTE PTR _sz$[ebp]
  003a4	85 c9		 test	 ecx, ecx
  003a6	75 08		 jne	 SHORT $L56605
  003a8	8b 55 10	 mov	 edx, DWORD PTR _nDefault$[ebp]
  003ab	89 55 a8	 mov	 DWORD PTR tv86[ebp], edx
  003ae	eb 28		 jmp	 SHORT $L56606
$L56605:
  003b0	8b 45 14	 mov	 eax, DWORD PTR _nBase$[ebp]
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 ?__ValidateBase@YL_Ini@@KAHH@Z ; YL_Ini::__ValidateBase
  003b9	83 c4 04	 add	 esp, 4
  003bc	8b f4		 mov	 esi, esp
  003be	50		 push	 eax
  003bf	6a 00		 push	 0
  003c1	8d 4d b0	 lea	 ecx, DWORD PTR _sz$[ebp]
  003c4	51		 push	 ecx
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtoul
  003cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d5	89 45 a8	 mov	 DWORD PTR tv86[ebp], eax
$L56606:
  003d8	8b 45 a8	 mov	 eax, DWORD PTR tv86[ebp]

; 115  : }

  003db	52		 push	 edx
  003dc	8b cd		 mov	 ecx, ebp
  003de	50		 push	 eax
  003df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56610
  003e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ea	58		 pop	 eax
  003eb	5a		 pop	 edx
  003ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003f4	5f		 pop	 edi
  003f5	5e		 pop	 esi
  003f6	83 c4 58	 add	 esp, 88			; 00000058H
  003f9	3b ec		 cmp	 ebp, esp
  003fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00400	8b e5		 mov	 esp, ebp
  00402	5d		 pop	 ebp
  00403	c2 10 00	 ret	 16			; 00000010H
$L56610:
  00406	01 00 00 00	 DD	 1
  0040a	00 00 00 00	 DD	 $L56609
$L56609:
  0040e	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00412	41 00 00 00	 DD	 65			; 00000041H
  00416	00 00 00 00	 DD	 $L56607
$L56607:
  0041a	73		 DB	 115			; 00000073H
  0041b	7a		 DB	 122			; 0000007aH
  0041c	00		 DB	 0
?GetUInt@YL_Ini@@QBEIPBD0IH@Z ENDP			; YL_Ini::GetUInt
_TEXT	ENDS
PUBLIC	?GetBool@YL_Ini@@QBEHPBD0H@Z			; YL_Ini::GetBool
PUBLIC	?StringToBool@YL_Ini@@SAHPBDH@Z			; YL_Ini::StringToBool
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sz$ = -80						; size = 65
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_bDefault$ = 16						; size = 4
?GetBool@YL_Ini@@QBEHPBD0H@Z PROC NEAR			; YL_Ini::GetBool
; _this$ = ecx

; 119  : {

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	83 ec 54	 sub	 esp, 84			; 00000054H
  00426	57		 push	 edi
  00427	51		 push	 ecx
  00428	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0042b	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00430	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00435	f3 ab		 rep stosd
  00437	59		 pop	 ecx
  00438	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0043d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00440	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	TCHAR sz[DEF_PROFILE_NUM_LEN + 1] = _T("");

  00443	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56220
  00448	88 45 b0	 mov	 BYTE PTR _sz$[ebp], al
  0044b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00450	33 c0		 xor	 eax, eax
  00452	8d 7d b1	 lea	 edi, DWORD PTR _sz$[ebp+1]
  00455	f3 ab		 rep stosd

; 121  : 	GetString(lpSection, lpKey, sz, DEF_PROFILE_NUM_LEN);

  00457	6a 00		 push	 0
  00459	6a 40		 push	 64			; 00000040H
  0045b	8d 4d b0	 lea	 ecx, DWORD PTR _sz$[ebp]
  0045e	51		 push	 ecx
  0045f	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00462	52		 push	 edx
  00463	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00466	50		 push	 eax
  00467	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0046a	e8 00 00 00 00	 call	 ?GetString@YL_Ini@@QBEKPBD0PADK0@Z ; YL_Ini::GetString

; 122  : 	return StringToBool(sz, bDefault);

  0046f	8b 4d 10	 mov	 ecx, DWORD PTR _bDefault$[ebp]
  00472	51		 push	 ecx
  00473	8d 55 b0	 lea	 edx, DWORD PTR _sz$[ebp]
  00476	52		 push	 edx
  00477	e8 00 00 00 00	 call	 ?StringToBool@YL_Ini@@SAHPBDH@Z ; YL_Ini::StringToBool
  0047c	83 c4 08	 add	 esp, 8

; 123  : }

  0047f	52		 push	 edx
  00480	8b cd		 mov	 ecx, ebp
  00482	50		 push	 eax
  00483	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56616
  00489	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0048e	58		 pop	 eax
  0048f	5a		 pop	 edx
  00490	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00493	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00498	5f		 pop	 edi
  00499	83 c4 54	 add	 esp, 84			; 00000054H
  0049c	3b ec		 cmp	 ebp, esp
  0049e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a3	8b e5		 mov	 esp, ebp
  004a5	5d		 pop	 ebp
  004a6	c2 0c 00	 ret	 12			; 0000000cH
$L56616:
  004a9	01 00 00 00	 DD	 1
  004ad	00 00 00 00	 DD	 $L56615
$L56615:
  004b1	b0 ff ff ff	 DD	 -80			; ffffffb0H
  004b5	41 00 00 00	 DD	 65			; 00000041H
  004b9	00 00 00 00	 DD	 $L56613
$L56613:
  004bd	73		 DB	 115			; 00000073H
  004be	7a		 DB	 122			; 0000007aH
  004bf	00		 DB	 0
?GetBool@YL_Ini@@QBEHPBD0H@Z ENDP			; YL_Ini::GetBool
_TEXT	ENDS
PUBLIC	?GetDouble@YL_Ini@@QBENPBD0N@Z			; YL_Ini::GetDouble
EXTRN	__fltused:NEAR
EXTRN	__imp__strtod:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv83 = -92						; size = 8
_sz$ = -80						; size = 65
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_fDefault$ = 16						; size = 8
?GetDouble@YL_Ini@@QBENPBD0N@Z PROC NEAR		; YL_Ini::GetDouble
; _this$ = ecx

; 127  : {

  004c0	55		 push	 ebp
  004c1	8b ec		 mov	 ebp, esp
  004c3	83 ec 5c	 sub	 esp, 92			; 0000005cH
  004c6	56		 push	 esi
  004c7	57		 push	 edi
  004c8	51		 push	 ecx
  004c9	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  004cc	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  004d1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  004d6	f3 ab		 rep stosd
  004d8	59		 pop	 ecx
  004d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  004de	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  004e1	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 	TCHAR sz[DEF_PROFILE_NUM_LEN + 1] = _T("");

  004e4	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56228
  004e9	88 45 b0	 mov	 BYTE PTR _sz$[ebp], al
  004ec	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004f1	33 c0		 xor	 eax, eax
  004f3	8d 7d b1	 lea	 edi, DWORD PTR _sz$[ebp+1]
  004f6	f3 ab		 rep stosd

; 129  : 	GetString(lpSection, lpKey, sz, DEF_PROFILE_NUM_LEN);

  004f8	6a 00		 push	 0
  004fa	6a 40		 push	 64			; 00000040H
  004fc	8d 4d b0	 lea	 ecx, DWORD PTR _sz$[ebp]
  004ff	51		 push	 ecx
  00500	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00503	52		 push	 edx
  00504	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00507	50		 push	 eax
  00508	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0050b	e8 00 00 00 00	 call	 ?GetString@YL_Ini@@QBEKPBD0PADK0@Z ; YL_Ini::GetString

; 130  : 	return *sz == _T('\0') ? fDefault : _tcstod(sz, NULL);

  00510	0f be 4d b0	 movsx	 ecx, BYTE PTR _sz$[ebp]
  00514	85 c9		 test	 ecx, ecx
  00516	75 08		 jne	 SHORT $L56619
  00518	dd 45 10	 fld	 QWORD PTR _fDefault$[ebp]
  0051b	dd 5d a4	 fstp	 QWORD PTR tv83[ebp]
  0051e	eb 1b		 jmp	 SHORT $L56620
$L56619:
  00520	8b f4		 mov	 esi, esp
  00522	6a 00		 push	 0
  00524	8d 55 b0	 lea	 edx, DWORD PTR _sz$[ebp]
  00527	52		 push	 edx
  00528	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtod
  0052e	83 c4 08	 add	 esp, 8
  00531	3b f4		 cmp	 esi, esp
  00533	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00538	dd 5d a4	 fstp	 QWORD PTR tv83[ebp]
$L56620:
  0053b	dd 45 a4	 fld	 QWORD PTR tv83[ebp]

; 131  : }

  0053e	52		 push	 edx
  0053f	8b cd		 mov	 ecx, ebp
  00541	50		 push	 eax
  00542	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56624
  00548	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0054d	58		 pop	 eax
  0054e	5a		 pop	 edx
  0054f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00552	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00557	5f		 pop	 edi
  00558	5e		 pop	 esi
  00559	83 c4 5c	 add	 esp, 92			; 0000005cH
  0055c	3b ec		 cmp	 ebp, esp
  0055e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00563	8b e5		 mov	 esp, ebp
  00565	5d		 pop	 ebp
  00566	c2 10 00	 ret	 16			; 00000010H
$L56624:
  00569	01 00 00 00	 DD	 1
  0056d	00 00 00 00	 DD	 $L56623
$L56623:
  00571	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00575	41 00 00 00	 DD	 65			; 00000041H
  00579	00 00 00 00	 DD	 $L56621
$L56621:
  0057d	73		 DB	 115			; 00000073H
  0057e	7a		 DB	 122			; 0000007aH
  0057f	00		 DB	 0
?GetDouble@YL_Ini@@QBENPBD0N@Z ENDP			; YL_Ini::GetDouble
_TEXT	ENDS
PUBLIC	?WriteInt@YL_Ini@@QBEHPBD0HH@Z			; YL_Ini::WriteInt
PUBLIC	?__IntToString@YL_Ini@@KAXHPADH@Z		; YL_Ini::__IntToString
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_szValue$ = -80						; size = 65
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_nValue$ = 16						; size = 4
_nBase$ = 20						; size = 4
?WriteInt@YL_Ini@@QBEHPBD0HH@Z PROC NEAR		; YL_Ini::WriteInt
; _this$ = ecx

; 135  : {

  00580	55		 push	 ebp
  00581	8b ec		 mov	 ebp, esp
  00583	83 ec 54	 sub	 esp, 84			; 00000054H
  00586	57		 push	 edi
  00587	51		 push	 ecx
  00588	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0058b	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00590	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00595	f3 ab		 rep stosd
  00597	59		 pop	 ecx
  00598	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0059d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  005a0	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 	TCHAR szValue[DEF_PROFILE_NUM_LEN + 1] = _T("");

  005a3	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56237
  005a8	88 45 b0	 mov	 BYTE PTR _szValue$[ebp], al
  005ab	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005b0	33 c0		 xor	 eax, eax
  005b2	8d 7d b1	 lea	 edi, DWORD PTR _szValue$[ebp+1]
  005b5	f3 ab		 rep stosd

; 137  : 	__IntToString(nValue, szValue, nBase);

  005b7	8b 4d 14	 mov	 ecx, DWORD PTR _nBase$[ebp]
  005ba	51		 push	 ecx
  005bb	8d 55 b0	 lea	 edx, DWORD PTR _szValue$[ebp]
  005be	52		 push	 edx
  005bf	8b 45 10	 mov	 eax, DWORD PTR _nValue$[ebp]
  005c2	50		 push	 eax
  005c3	e8 00 00 00 00	 call	 ?__IntToString@YL_Ini@@KAXHPADH@Z ; YL_Ini::__IntToString
  005c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 138  : 	return WriteString(lpSection, lpKey, szValue);

  005cb	8d 4d b0	 lea	 ecx, DWORD PTR _szValue$[ebp]
  005ce	51		 push	 ecx
  005cf	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  005d2	52		 push	 edx
  005d3	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  005d6	50		 push	 eax
  005d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005da	e8 00 00 00 00	 call	 ?WriteString@YL_Ini@@QBEHPBD00@Z ; YL_Ini::WriteString

; 139  : }

  005df	52		 push	 edx
  005e0	8b cd		 mov	 ecx, ebp
  005e2	50		 push	 eax
  005e3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56631
  005e9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005ee	58		 pop	 eax
  005ef	5a		 pop	 edx
  005f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005f8	5f		 pop	 edi
  005f9	83 c4 54	 add	 esp, 84			; 00000054H
  005fc	3b ec		 cmp	 ebp, esp
  005fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00603	8b e5		 mov	 esp, ebp
  00605	5d		 pop	 ebp
  00606	c2 10 00	 ret	 16			; 00000010H
$L56631:
  00609	01 00 00 00	 DD	 1
  0060d	00 00 00 00	 DD	 $L56630
$L56630:
  00611	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00615	41 00 00 00	 DD	 65			; 00000041H
  00619	00 00 00 00	 DD	 $L56628
$L56628:
  0061d	73		 DB	 115			; 00000073H
  0061e	7a		 DB	 122			; 0000007aH
  0061f	56		 DB	 86			; 00000056H
  00620	61		 DB	 97			; 00000061H
  00621	6c		 DB	 108			; 0000006cH
  00622	75		 DB	 117			; 00000075H
  00623	65		 DB	 101			; 00000065H
  00624	00		 DB	 0
?WriteInt@YL_Ini@@QBEHPBD0HH@Z ENDP			; YL_Ini::WriteInt
_TEXT	ENDS
PUBLIC	?WriteUInt@YL_Ini@@QBEHPBD0IH@Z			; YL_Ini::WriteUInt
PUBLIC	?__UIntToString@YL_Ini@@KAXIPADH@Z		; YL_Ini::__UIntToString
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_szValue$ = -80						; size = 65
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_nValue$ = 16						; size = 4
_nBase$ = 20						; size = 4
?WriteUInt@YL_Ini@@QBEHPBD0IH@Z PROC NEAR		; YL_Ini::WriteUInt
; _this$ = ecx

; 143  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	83 ec 54	 sub	 esp, 84			; 00000054H
  00636	57		 push	 edi
  00637	51		 push	 ecx
  00638	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0063b	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00640	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00645	f3 ab		 rep stosd
  00647	59		 pop	 ecx
  00648	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0064d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00650	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 144  : 	TCHAR szValue[DEF_PROFILE_NUM_LEN + 1] = _T("");

  00653	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56246
  00658	88 45 b0	 mov	 BYTE PTR _szValue$[ebp], al
  0065b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00660	33 c0		 xor	 eax, eax
  00662	8d 7d b1	 lea	 edi, DWORD PTR _szValue$[ebp+1]
  00665	f3 ab		 rep stosd

; 145  : 	__UIntToString(nValue, szValue, nBase);

  00667	8b 4d 14	 mov	 ecx, DWORD PTR _nBase$[ebp]
  0066a	51		 push	 ecx
  0066b	8d 55 b0	 lea	 edx, DWORD PTR _szValue$[ebp]
  0066e	52		 push	 edx
  0066f	8b 45 10	 mov	 eax, DWORD PTR _nValue$[ebp]
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 ?__UIntToString@YL_Ini@@KAXIPADH@Z ; YL_Ini::__UIntToString
  00678	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : 	return WriteString(lpSection, lpKey, szValue);

  0067b	8d 4d b0	 lea	 ecx, DWORD PTR _szValue$[ebp]
  0067e	51		 push	 ecx
  0067f	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00682	52		 push	 edx
  00683	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00686	50		 push	 eax
  00687	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0068a	e8 00 00 00 00	 call	 ?WriteString@YL_Ini@@QBEHPBD00@Z ; YL_Ini::WriteString

; 147  : }

  0068f	52		 push	 edx
  00690	8b cd		 mov	 ecx, ebp
  00692	50		 push	 eax
  00693	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56637
  00699	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0069e	58		 pop	 eax
  0069f	5a		 pop	 edx
  006a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006a8	5f		 pop	 edi
  006a9	83 c4 54	 add	 esp, 84			; 00000054H
  006ac	3b ec		 cmp	 ebp, esp
  006ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006b3	8b e5		 mov	 esp, ebp
  006b5	5d		 pop	 ebp
  006b6	c2 10 00	 ret	 16			; 00000010H
$L56637:
  006b9	01 00 00 00	 DD	 1
  006bd	00 00 00 00	 DD	 $L56636
$L56636:
  006c1	b0 ff ff ff	 DD	 -80			; ffffffb0H
  006c5	41 00 00 00	 DD	 65			; 00000041H
  006c9	00 00 00 00	 DD	 $L56634
$L56634:
  006cd	73		 DB	 115			; 00000073H
  006ce	7a		 DB	 122			; 0000007aH
  006cf	56		 DB	 86			; 00000056H
  006d0	61		 DB	 97			; 00000061H
  006d1	6c		 DB	 108			; 0000006cH
  006d2	75		 DB	 117			; 00000075H
  006d3	65		 DB	 101			; 00000065H
  006d4	00		 DB	 0
?WriteUInt@YL_Ini@@QBEHPBD0IH@Z ENDP			; YL_Ini::WriteUInt
_TEXT	ENDS
PUBLIC	?WriteDouble@YL_Ini@@QBEHPBD0NH@Z		; YL_Ini::WriteDouble
EXTRN	__imp___snprintf:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_szValue$ = -104					; size = 65
_szFmt$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_fValue$ = 16						; size = 8
_nPrecision$ = 24					; size = 4
?WriteDouble@YL_Ini@@QBEHPBD0NH@Z PROC NEAR		; YL_Ini::WriteDouble
; _this$ = ecx

; 151  : {

  006e0	55		 push	 ebp
  006e1	8b ec		 mov	 ebp, esp
  006e3	83 ec 6c	 sub	 esp, 108		; 0000006cH
  006e6	56		 push	 esi
  006e7	57		 push	 edi
  006e8	51		 push	 ecx
  006e9	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  006ec	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  006f1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  006f6	f3 ab		 rep stosd
  006f8	59		 pop	 ecx
  006f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  006fe	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00701	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 	TCHAR szFmt[16] = _T("%f");

  00704	66 a1 00 00 00
	00		 mov	 ax, WORD PTR $SG56255
  0070a	66 89 45 e4	 mov	 WORD PTR _szFmt$[ebp], ax
  0070e	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR $SG56255+2
  00714	88 4d e6	 mov	 BYTE PTR _szFmt$[ebp+2], cl
  00717	33 d2		 xor	 edx, edx
  00719	89 55 e7	 mov	 DWORD PTR _szFmt$[ebp+3], edx
  0071c	89 55 eb	 mov	 DWORD PTR _szFmt$[ebp+7], edx
  0071f	89 55 ef	 mov	 DWORD PTR _szFmt$[ebp+11], edx
  00722	88 55 f3	 mov	 BYTE PTR _szFmt$[ebp+15], dl

; 153  : 
; 154  : 	if (nPrecision > 0)

  00725	83 7d 18 00	 cmp	 DWORD PTR _nPrecision$[ebp], 0
  00729	7e 21		 jle	 SHORT $L56256

; 155  : 		_sntprintf(szFmt, sizeof(szFmt)-1, _T("%%.%df"), nPrecision);

  0072b	8b f4		 mov	 esi, esp
  0072d	8b 45 18	 mov	 eax, DWORD PTR _nPrecision$[ebp]
  00730	50		 push	 eax
  00731	68 00 00 00 00	 push	 OFFSET FLAT:$SG56257
  00736	6a 0f		 push	 15			; 0000000fH
  00738	8d 4d e4	 lea	 ecx, DWORD PTR _szFmt$[ebp]
  0073b	51		 push	 ecx
  0073c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00742	83 c4 10	 add	 esp, 16			; 00000010H
  00745	3b f4		 cmp	 esi, esp
  00747	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L56256:

; 156  : 
; 157  : 	TCHAR szValue[DEF_PROFILE_NUM_LEN + 1] = _T("");

  0074c	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR $SG56259
  00752	88 55 98	 mov	 BYTE PTR _szValue$[ebp], dl
  00755	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0075a	33 c0		 xor	 eax, eax
  0075c	8d 7d 99	 lea	 edi, DWORD PTR _szValue$[ebp+1]
  0075f	f3 ab		 rep stosd

; 158  : 	_sntprintf(szValue, DEF_PROFILE_NUM_LEN, szFmt, fValue);

  00761	dd 45 10	 fld	 QWORD PTR _fValue$[ebp]
  00764	8b f4		 mov	 esi, esp
  00766	83 ec 08	 sub	 esp, 8
  00769	dd 1c 24	 fstp	 QWORD PTR [esp]
  0076c	8d 45 e4	 lea	 eax, DWORD PTR _szFmt$[ebp]
  0076f	50		 push	 eax
  00770	6a 40		 push	 64			; 00000040H
  00772	8d 4d 98	 lea	 ecx, DWORD PTR _szValue$[ebp]
  00775	51		 push	 ecx
  00776	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  0077c	83 c4 14	 add	 esp, 20			; 00000014H
  0077f	3b f4		 cmp	 esi, esp
  00781	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  : 	return WriteString(lpSection, lpKey, szValue);

  00786	8d 55 98	 lea	 edx, DWORD PTR _szValue$[ebp]
  00789	52		 push	 edx
  0078a	8b 45 0c	 mov	 eax, DWORD PTR _lpKey$[ebp]
  0078d	50		 push	 eax
  0078e	8b 4d 08	 mov	 ecx, DWORD PTR _lpSection$[ebp]
  00791	51		 push	 ecx
  00792	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00795	e8 00 00 00 00	 call	 ?WriteString@YL_Ini@@QBEHPBD00@Z ; YL_Ini::WriteString

; 160  : }

  0079a	52		 push	 edx
  0079b	8b cd		 mov	 ecx, ebp
  0079d	50		 push	 eax
  0079e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56644
  007a4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007a9	58		 pop	 eax
  007aa	5a		 pop	 edx
  007ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007b3	5f		 pop	 edi
  007b4	5e		 pop	 esi
  007b5	83 c4 6c	 add	 esp, 108		; 0000006cH
  007b8	3b ec		 cmp	 ebp, esp
  007ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007bf	8b e5		 mov	 esp, ebp
  007c1	5d		 pop	 ebp
  007c2	c2 14 00	 ret	 20			; 00000014H
$L56644:
  007c5	02 00 00 00	 DD	 2
  007c9	00 00 00 00	 DD	 $L56643
$L56643:
  007cd	e4 ff ff ff	 DD	 -28			; ffffffe4H
  007d1	10 00 00 00	 DD	 16			; 00000010H
  007d5	00 00 00 00	 DD	 $L56640
  007d9	98 ff ff ff	 DD	 -104			; ffffff98H
  007dd	41 00 00 00	 DD	 65			; 00000041H
  007e1	00 00 00 00	 DD	 $L56641
$L56641:
  007e5	73		 DB	 115			; 00000073H
  007e6	7a		 DB	 122			; 0000007aH
  007e7	56		 DB	 86			; 00000056H
  007e8	61		 DB	 97			; 00000061H
  007e9	6c		 DB	 108			; 0000006cH
  007ea	75		 DB	 117			; 00000075H
  007eb	65		 DB	 101			; 00000065H
  007ec	00		 DB	 0
$L56640:
  007ed	73		 DB	 115			; 00000073H
  007ee	7a		 DB	 122			; 0000007aH
  007ef	46		 DB	 70			; 00000046H
  007f0	6d		 DB	 109			; 0000006dH
  007f1	74		 DB	 116			; 00000074H
  007f2	00		 DB	 0
?WriteDouble@YL_Ini@@QBEHPBD0NH@Z ENDP			; YL_Ini::WriteDouble
_TEXT	ENDS
PUBLIC	?WriteBool@YL_Ini@@QBEHPBD0H@Z			; YL_Ini::WriteBool
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_bValue$ = 16						; size = 4
?WriteBool@YL_Ini@@QBEHPBD0H@Z PROC NEAR		; YL_Ini::WriteBool
; _this$ = ecx

; 165  : {

  00800	55		 push	 ebp
  00801	8b ec		 mov	 ebp, esp
  00803	51		 push	 ecx
  00804	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0080b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	return WriteInt(lpSection, lpKey, bValue ? 1 : 0, BASE_DECIMAL);

  0080e	6a 0a		 push	 10			; 0000000aH
  00810	33 c0		 xor	 eax, eax
  00812	83 7d 10 00	 cmp	 DWORD PTR _bValue$[ebp], 0
  00816	0f 95 c0	 setne	 al
  00819	50		 push	 eax
  0081a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  0081d	51		 push	 ecx
  0081e	8b 55 08	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00821	52		 push	 edx
  00822	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00825	e8 00 00 00 00	 call	 ?WriteInt@YL_Ini@@QBEHPBD0HH@Z ; YL_Ini::WriteInt

; 167  : }

  0082a	83 c4 04	 add	 esp, 4
  0082d	3b ec		 cmp	 ebp, esp
  0082f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00834	8b e5		 mov	 esp, ebp
  00836	5d		 pop	 ebp
  00837	c2 0c 00	 ret	 12			; 0000000cH
?WriteBool@YL_Ini@@QBEHPBD0H@Z ENDP			; YL_Ini::WriteBool
_TEXT	ENDS
PUBLIC	?GetChar@YL_Ini@@QBEDPBD0D@Z			; YL_Ini::GetChar
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv80 = -17						; size = 1
_sz$ = -12						; size = 2
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_cDefault$ = 16						; size = 1
?GetChar@YL_Ini@@QBEDPBD0D@Z PROC NEAR			; YL_Ini::GetChar
; _this$ = ecx

; 170  : {

  00840	55		 push	 ebp
  00841	8b ec		 mov	 ebp, esp
  00843	83 ec 14	 sub	 esp, 20			; 00000014H
  00846	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0084b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0084e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00851	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00854	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00857	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0085a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 	TCHAR sz[2] = _T("");

  0085d	a0 00 00 00 00	 mov	 al, BYTE PTR $SG56273
  00862	88 45 f4	 mov	 BYTE PTR _sz$[ebp], al
  00865	33 c9		 xor	 ecx, ecx
  00867	88 4d f5	 mov	 BYTE PTR _sz$[ebp+1], cl

; 172  : 	GetString(lpSection, lpKey, sz, 1);

  0086a	6a 00		 push	 0
  0086c	6a 01		 push	 1
  0086e	8d 55 f4	 lea	 edx, DWORD PTR _sz$[ebp]
  00871	52		 push	 edx
  00872	8b 45 0c	 mov	 eax, DWORD PTR _lpKey$[ebp]
  00875	50		 push	 eax
  00876	8b 4d 08	 mov	 ecx, DWORD PTR _lpSection$[ebp]
  00879	51		 push	 ecx
  0087a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0087d	e8 00 00 00 00	 call	 ?GetString@YL_Ini@@QBEKPBD0PADK0@Z ; YL_Ini::GetString

; 173  : 	return *sz == _T('\0') ? cDefault : sz[0];

  00882	0f be 55 f4	 movsx	 edx, BYTE PTR _sz$[ebp]
  00886	85 d2		 test	 edx, edx
  00888	75 08		 jne	 SHORT $L56647
  0088a	8a 45 10	 mov	 al, BYTE PTR _cDefault$[ebp]
  0088d	88 45 ef	 mov	 BYTE PTR tv80[ebp], al
  00890	eb 06		 jmp	 SHORT $L56648
$L56647:
  00892	8a 4d f4	 mov	 cl, BYTE PTR _sz$[ebp]
  00895	88 4d ef	 mov	 BYTE PTR tv80[ebp], cl
$L56648:
  00898	8a 45 ef	 mov	 al, BYTE PTR tv80[ebp]

; 174  : }

  0089b	52		 push	 edx
  0089c	8b cd		 mov	 ecx, ebp
  0089e	50		 push	 eax
  0089f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56651
  008a5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  008aa	58		 pop	 eax
  008ab	5a		 pop	 edx
  008ac	83 c4 14	 add	 esp, 20			; 00000014H
  008af	3b ec		 cmp	 ebp, esp
  008b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008b6	8b e5		 mov	 esp, ebp
  008b8	5d		 pop	 ebp
  008b9	c2 0c 00	 ret	 12			; 0000000cH
$L56651:
  008bc	01 00 00 00	 DD	 1
  008c0	00 00 00 00	 DD	 $L56650
$L56650:
  008c4	f4 ff ff ff	 DD	 -12			; fffffff4H
  008c8	02 00 00 00	 DD	 2
  008cc	00 00 00 00	 DD	 $L56649
$L56649:
  008d0	73		 DB	 115			; 00000073H
  008d1	7a		 DB	 122			; 0000007aH
  008d2	00		 DB	 0
?GetChar@YL_Ini@@QBEDPBD0D@Z ENDP			; YL_Ini::GetChar
_TEXT	ENDS
PUBLIC	?WriteChar@YL_Ini@@QBEHPBD0D@Z			; YL_Ini::WriteChar
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_sz$ = -12						; size = 2
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_c$ = 16						; size = 1
?WriteChar@YL_Ini@@QBEHPBD0D@Z PROC NEAR		; YL_Ini::WriteChar
; _this$ = ecx

; 177  : {

  008e0	55		 push	 ebp
  008e1	8b ec		 mov	 ebp, esp
  008e3	83 ec 10	 sub	 esp, 16			; 00000010H
  008e6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  008eb	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  008ee	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  008f1	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  008f4	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  008f7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	TCHAR sz[2] = { c, _T('\0') };

  008fa	8a 45 10	 mov	 al, BYTE PTR _c$[ebp]
  008fd	88 45 f4	 mov	 BYTE PTR _sz$[ebp], al
  00900	c6 45 f5 00	 mov	 BYTE PTR _sz$[ebp+1], 0

; 179  : 	return WriteString(lpSection, lpKey, sz);

  00904	8d 4d f4	 lea	 ecx, DWORD PTR _sz$[ebp]
  00907	51		 push	 ecx
  00908	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  0090b	52		 push	 edx
  0090c	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  0090f	50		 push	 eax
  00910	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00913	e8 00 00 00 00	 call	 ?WriteString@YL_Ini@@QBEHPBD00@Z ; YL_Ini::WriteString

; 180  : }

  00918	52		 push	 edx
  00919	8b cd		 mov	 ecx, ebp
  0091b	50		 push	 eax
  0091c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56655
  00922	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00927	58		 pop	 eax
  00928	5a		 pop	 edx
  00929	83 c4 10	 add	 esp, 16			; 00000010H
  0092c	3b ec		 cmp	 ebp, esp
  0092e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00933	8b e5		 mov	 esp, ebp
  00935	5d		 pop	 ebp
  00936	c2 0c 00	 ret	 12			; 0000000cH
$L56655:
  00939	01 00 00 00	 DD	 1
  0093d	00 00 00 00	 DD	 $L56654
$L56654:
  00941	f4 ff ff ff	 DD	 -12			; fffffff4H
  00945	02 00 00 00	 DD	 2
  00949	00 00 00 00	 DD	 $L56653
$L56653:
  0094d	73		 DB	 115			; 00000073H
  0094e	7a		 DB	 122			; 0000007aH
  0094f	00		 DB	 0
?WriteChar@YL_Ini@@QBEHPBD0D@Z ENDP			; YL_Ini::WriteChar
_TEXT	ENDS
PUBLIC	?GetDataBlock@YL_Ini@@QBEKPBD0PAXKK@Z		; YL_Ini::GetDataBlock
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv128 = -64						; size = 4
$T56661 = -60						; size = 4
$T56658 = -56						; size = 4
$T56657 = -52						; size = 4
_sz$56314 = -44						; size = 3
_i$56310 = -36						; size = 4
_p$56309 = -32						; size = 4
_lpb$ = -28						; size = 4
_dwProcLen$ = -24					; size = 4
_c$56298 = -17						; size = 1
_i$56294 = -16						; size = 4
_dwLen$ = -12						; size = 4
_psz$ = -8						; size = 4
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_lpBuffer$ = 16						; size = 4
_dwBufSize$ = 20					; size = 4
_dwOffset$ = 24						; size = 4
?GetDataBlock@YL_Ini@@QBEKPBD0PAXKK@Z PROC NEAR		; YL_Ini::GetDataBlock
; _this$ = ecx

; 188  : {

  00950	55		 push	 ebp
  00951	8b ec		 mov	 ebp, esp
  00953	83 ec 40	 sub	 esp, 64			; 00000040H
  00956	56		 push	 esi
  00957	57		 push	 edi
  00958	51		 push	 ecx
  00959	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0095c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00961	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00966	f3 ab		 rep stosd
  00968	59		 pop	 ecx
  00969	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 	LPTSTR psz = __GetStringDynamic(lpSection, lpKey);

  0096c	6a 00		 push	 0
  0096e	8b 45 0c	 mov	 eax, DWORD PTR _lpKey$[ebp]
  00971	50		 push	 eax
  00972	8b 4d 08	 mov	 ecx, DWORD PTR _lpSection$[ebp]
  00975	51		 push	 ecx
  00976	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00979	e8 00 00 00 00	 call	 ?__GetStringDynamic@YL_Ini@@IBEPADPBD00@Z ; YL_Ini::__GetStringDynamic
  0097e	89 45 f8	 mov	 DWORD PTR _psz$[ebp], eax

; 190  : 	DWORD dwLen = (DWORD)_tcslen(psz) / 2;

  00981	8b 55 f8	 mov	 edx, DWORD PTR _psz$[ebp]
  00984	52		 push	 edx
  00985	e8 00 00 00 00	 call	 _strlen
  0098a	83 c4 04	 add	 esp, 4
  0098d	d1 e8		 shr	 eax, 1
  0098f	89 45 f4	 mov	 DWORD PTR _dwLen$[ebp], eax

; 191  : 	if (dwLen <= dwOffset)

  00992	8b 45 f4	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00995	3b 45 18	 cmp	 eax, DWORD PTR _dwOffset$[ebp]
  00998	77 19		 ja	 SHORT $L56292

; 192  : 	{
; 193  : 		delete [] psz;

  0099a	8b 4d f8	 mov	 ecx, DWORD PTR _psz$[ebp]
  0099d	89 4d cc	 mov	 DWORD PTR $T56657[ebp], ecx
  009a0	8b 55 cc	 mov	 edx, DWORD PTR $T56657[ebp]
  009a3	52		 push	 edx
  009a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  009a9	83 c4 04	 add	 esp, 4

; 194  : 		return 0;

  009ac	33 c0		 xor	 eax, eax
  009ae	e9 4a 01 00 00	 jmp	 $L56288
$L56292:

; 195  : 	}
; 196  : 
; 197  : 	// verify psz, must be all in hex format
; 198  : 	for (int i = 0; psz[i] != _T('\0'); i++)

  009b3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$56294[ebp], 0
  009ba	eb 09		 jmp	 SHORT $L56295
$L56296:
  009bc	8b 45 f0	 mov	 eax, DWORD PTR _i$56294[ebp]
  009bf	83 c0 01	 add	 eax, 1
  009c2	89 45 f0	 mov	 DWORD PTR _i$56294[ebp], eax
$L56295:
  009c5	8b 4d f8	 mov	 ecx, DWORD PTR _psz$[ebp]
  009c8	03 4d f0	 add	 ecx, DWORD PTR _i$56294[ebp]
  009cb	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  009ce	85 d2		 test	 edx, edx
  009d0	74 5e		 je	 SHORT $L56297

; 199  : 	{
; 200  : 		TCHAR c = psz[i];

  009d2	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  009d5	03 45 f0	 add	 eax, DWORD PTR _i$56294[ebp]
  009d8	8a 08		 mov	 cl, BYTE PTR [eax]
  009da	88 4d ef	 mov	 BYTE PTR _c$56298[ebp], cl

; 201  : 		if ((c >= _T('0') && c <= _T('9'))
; 202  : 			|| (c >= _T('a') && c <= _T('f'))
; 203  : 			|| (c >= _T('A') && c <= _T('F')))

  009dd	0f be 55 ef	 movsx	 edx, BYTE PTR _c$56298[ebp]
  009e1	83 fa 30	 cmp	 edx, 48			; 00000030H
  009e4	7c 09		 jl	 SHORT $L56301
  009e6	0f be 45 ef	 movsx	 eax, BYTE PTR _c$56298[ebp]
  009ea	83 f8 39	 cmp	 eax, 57			; 00000039H
  009ed	7e 24		 jle	 SHORT $L56300
$L56301:
  009ef	0f be 4d ef	 movsx	 ecx, BYTE PTR _c$56298[ebp]
  009f3	83 f9 61	 cmp	 ecx, 97			; 00000061H
  009f6	7c 09		 jl	 SHORT $L56302
  009f8	0f be 55 ef	 movsx	 edx, BYTE PTR _c$56298[ebp]
  009fc	83 fa 66	 cmp	 edx, 102		; 00000066H
  009ff	7e 12		 jle	 SHORT $L56300
$L56302:
  00a01	0f be 45 ef	 movsx	 eax, BYTE PTR _c$56298[ebp]
  00a05	83 f8 41	 cmp	 eax, 65			; 00000041H
  00a08	7c 0b		 jl	 SHORT $L56299
  00a0a	0f be 4d ef	 movsx	 ecx, BYTE PTR _c$56298[ebp]
  00a0e	83 f9 46	 cmp	 ecx, 70			; 00000046H
  00a11	7f 02		 jg	 SHORT $L56299
$L56300:

; 204  : 		{
; 205  : 			// valid
; 206  : 		}
; 207  : 		else

  00a13	eb 19		 jmp	 SHORT $L56303
$L56299:

; 208  : 		{
; 209  : 			delete [] psz;

  00a15	8b 55 f8	 mov	 edx, DWORD PTR _psz$[ebp]
  00a18	89 55 c8	 mov	 DWORD PTR $T56658[ebp], edx
  00a1b	8b 45 c8	 mov	 eax, DWORD PTR $T56658[ebp]
  00a1e	50		 push	 eax
  00a1f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00a24	83 c4 04	 add	 esp, 4

; 210  : 			return 0;

  00a27	33 c0		 xor	 eax, eax
  00a29	e9 cf 00 00 00	 jmp	 $L56288
$L56303:

; 211  : 		}
; 212  : 	}

  00a2e	eb 8c		 jmp	 SHORT $L56296
$L56297:

; 213  : 
; 214  : 	DWORD dwProcLen = 0;

  00a30	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwProcLen$[ebp], 0

; 215  : 	LPBYTE lpb = (LPBYTE)lpBuffer;

  00a37	8b 4d 10	 mov	 ecx, DWORD PTR _lpBuffer$[ebp]
  00a3a	89 4d e4	 mov	 DWORD PTR _lpb$[ebp], ecx

; 216  : 
; 217  : 	if (lpb != NULL)

  00a3d	83 7d e4 00	 cmp	 DWORD PTR _lpb$[ebp], 0
  00a41	0f 84 98 00 00
	00		 je	 $L56308

; 218  : 	{
; 219  : 		dwProcLen = min(dwLen - dwOffset, dwBufSize);

  00a47	8b 55 f4	 mov	 edx, DWORD PTR _dwLen$[ebp]
  00a4a	2b 55 18	 sub	 edx, DWORD PTR _dwOffset$[ebp]
  00a4d	3b 55 14	 cmp	 edx, DWORD PTR _dwBufSize$[ebp]
  00a50	73 0b		 jae	 SHORT $L56659
  00a52	8b 45 f4	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00a55	2b 45 18	 sub	 eax, DWORD PTR _dwOffset$[ebp]
  00a58	89 45 c0	 mov	 DWORD PTR tv128[ebp], eax
  00a5b	eb 06		 jmp	 SHORT $L56660
$L56659:
  00a5d	8b 4d 14	 mov	 ecx, DWORD PTR _dwBufSize$[ebp]
  00a60	89 4d c0	 mov	 DWORD PTR tv128[ebp], ecx
$L56660:
  00a63	8b 55 c0	 mov	 edx, DWORD PTR tv128[ebp]
  00a66	89 55 e8	 mov	 DWORD PTR _dwProcLen$[ebp], edx

; 220  : 		LPCTSTR p = &psz[dwOffset * 2];

  00a69	8b 45 18	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00a6c	8b 4d f8	 mov	 ecx, DWORD PTR _psz$[ebp]
  00a6f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00a72	89 55 e0	 mov	 DWORD PTR _p$56309[ebp], edx

; 221  : 		for (DWORD i = 0; i < dwProcLen; i++)

  00a75	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$56310[ebp], 0
  00a7c	eb 09		 jmp	 SHORT $L56311
$L56312:
  00a7e	8b 45 dc	 mov	 eax, DWORD PTR _i$56310[ebp]
  00a81	83 c0 01	 add	 eax, 1
  00a84	89 45 dc	 mov	 DWORD PTR _i$56310[ebp], eax
$L56311:
  00a87	8b 4d dc	 mov	 ecx, DWORD PTR _i$56310[ebp]
  00a8a	3b 4d e8	 cmp	 ecx, DWORD PTR _dwProcLen$[ebp]
  00a8d	73 4e		 jae	 SHORT $L56313

; 222  : 		{			
; 223  : 			TCHAR sz[3] = _T("");

  00a8f	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR $SG56315
  00a95	88 55 d4	 mov	 BYTE PTR _sz$56314[ebp], dl
  00a98	33 c0		 xor	 eax, eax
  00a9a	66 89 45 d5	 mov	 WORD PTR _sz$56314[ebp+1], ax

; 224  : 			_tcsncpy(sz, p, 2);			

  00a9e	6a 02		 push	 2
  00aa0	8b 4d e0	 mov	 ecx, DWORD PTR _p$56309[ebp]
  00aa3	51		 push	 ecx
  00aa4	8d 55 d4	 lea	 edx, DWORD PTR _sz$56314[ebp]
  00aa7	52		 push	 edx
  00aa8	e8 00 00 00 00	 call	 __tcsncpy
  00aad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 225  : 			lpb[i] = BYTE(_tcstoul(sz, NULL, 16));

  00ab0	8b f4		 mov	 esi, esp
  00ab2	6a 10		 push	 16			; 00000010H
  00ab4	6a 00		 push	 0
  00ab6	8d 45 d4	 lea	 eax, DWORD PTR _sz$56314[ebp]
  00ab9	50		 push	 eax
  00aba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtoul
  00ac0	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ac3	3b f4		 cmp	 esi, esp
  00ac5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aca	8b 4d e4	 mov	 ecx, DWORD PTR _lpb$[ebp]
  00acd	03 4d dc	 add	 ecx, DWORD PTR _i$56310[ebp]
  00ad0	88 01		 mov	 BYTE PTR [ecx], al

; 226  : 			p = &p[2];

  00ad2	8b 55 e0	 mov	 edx, DWORD PTR _p$56309[ebp]
  00ad5	83 c2 02	 add	 edx, 2
  00ad8	89 55 e0	 mov	 DWORD PTR _p$56309[ebp], edx

; 227  : 		}			

  00adb	eb a1		 jmp	 SHORT $L56312
$L56313:

; 228  : 	}
; 229  : 	else

  00add	eb 09		 jmp	 SHORT $L56316
$L56308:

; 230  : 	{
; 231  : 		dwProcLen = dwLen - dwOffset;

  00adf	8b 45 f4	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00ae2	2b 45 18	 sub	 eax, DWORD PTR _dwOffset$[ebp]
  00ae5	89 45 e8	 mov	 DWORD PTR _dwProcLen$[ebp], eax
$L56316:

; 232  : 	}
; 233  : 	delete [] psz;

  00ae8	8b 4d f8	 mov	 ecx, DWORD PTR _psz$[ebp]
  00aeb	89 4d c4	 mov	 DWORD PTR $T56661[ebp], ecx
  00aee	8b 55 c4	 mov	 edx, DWORD PTR $T56661[ebp]
  00af1	52		 push	 edx
  00af2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00af7	83 c4 04	 add	 esp, 4

; 234  : 	return dwProcLen;

  00afa	8b 45 e8	 mov	 eax, DWORD PTR _dwProcLen$[ebp]
$L56288:

; 235  : }

  00afd	52		 push	 edx
  00afe	8b cd		 mov	 ecx, ebp
  00b00	50		 push	 eax
  00b01	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56664
  00b07	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b0c	58		 pop	 eax
  00b0d	5a		 pop	 edx
  00b0e	5f		 pop	 edi
  00b0f	5e		 pop	 esi
  00b10	83 c4 40	 add	 esp, 64			; 00000040H
  00b13	3b ec		 cmp	 ebp, esp
  00b15	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b1a	8b e5		 mov	 esp, ebp
  00b1c	5d		 pop	 ebp
  00b1d	c2 14 00	 ret	 20			; 00000014H
$L56664:
  00b20	01 00 00 00	 DD	 1
  00b24	00 00 00 00	 DD	 $L56663
$L56663:
  00b28	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00b2c	03 00 00 00	 DD	 3
  00b30	00 00 00 00	 DD	 $L56662
$L56662:
  00b34	73		 DB	 115			; 00000073H
  00b35	7a		 DB	 122			; 0000007aH
  00b36	00		 DB	 0
?GetDataBlock@YL_Ini@@QBEKPBD0PAXKK@Z ENDP		; YL_Ini::GetDataBlock
_TEXT	ENDS
PUBLIC	?WriteDataBlock@YL_Ini@@QBEHPBD0PBXK@Z		; YL_Ini::WriteDataBlock
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	__imp__sprintf:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T56667 = -32						; size = 4
$T56666 = -28						; size = 4
_RES$ = -24						; size = 4
_j$56332 = -20						; size = 4
_i$56331 = -16						; size = 4
_psz$ = -12						; size = 4
_lpb$ = -8						; size = 4
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_lpData$ = 16						; size = 4
_dwDataSize$ = 20					; size = 4
?WriteDataBlock@YL_Ini@@QBEHPBD0PBXK@Z PROC NEAR	; YL_Ini::WriteDataBlock
; _this$ = ecx

; 239  : {

  00b40	55		 push	 ebp
  00b41	8b ec		 mov	 ebp, esp
  00b43	83 ec 20	 sub	 esp, 32			; 00000020H
  00b46	56		 push	 esi
  00b47	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00b4c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00b4f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00b52	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00b55	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00b58	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00b5b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00b5e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00b61	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00b64	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 240  : 	const BYTE* lpb = (const BYTE*)lpData;

  00b67	8b 45 10	 mov	 eax, DWORD PTR _lpData$[ebp]
  00b6a	89 45 f8	 mov	 DWORD PTR _lpb$[ebp], eax

; 241  : 	if (lpb == NULL)

  00b6d	83 7d f8 00	 cmp	 DWORD PTR _lpb$[ebp], 0
  00b71	75 07		 jne	 SHORT $L56327

; 242  : 		return FALSE;

  00b73	33 c0		 xor	 eax, eax
  00b75	e9 99 00 00 00	 jmp	 $L56324
$L56327:

; 243  : 
; 244  : 	LPTSTR psz = new TCHAR[dwDataSize * 2 + 1];

  00b7a	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00b7d	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  00b81	52		 push	 edx
  00b82	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00b87	83 c4 04	 add	 esp, 4
  00b8a	89 45 e4	 mov	 DWORD PTR $T56666[ebp], eax
  00b8d	8b 45 e4	 mov	 eax, DWORD PTR $T56666[ebp]
  00b90	89 45 f4	 mov	 DWORD PTR _psz$[ebp], eax

; 245  : 	for (DWORD i = 0, j = 0; i < dwDataSize; i++, j += 2)

  00b93	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$56331[ebp], 0
  00b9a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$56332[ebp], 0
  00ba1	eb 12		 jmp	 SHORT $L56333
$L56334:
  00ba3	8b 4d f0	 mov	 ecx, DWORD PTR _i$56331[ebp]
  00ba6	83 c1 01	 add	 ecx, 1
  00ba9	89 4d f0	 mov	 DWORD PTR _i$56331[ebp], ecx
  00bac	8b 55 ec	 mov	 edx, DWORD PTR _j$56332[ebp]
  00baf	83 c2 02	 add	 edx, 2
  00bb2	89 55 ec	 mov	 DWORD PTR _j$56332[ebp], edx
$L56333:
  00bb5	8b 45 f0	 mov	 eax, DWORD PTR _i$56331[ebp]
  00bb8	3b 45 14	 cmp	 eax, DWORD PTR _dwDataSize$[ebp]
  00bbb	73 2a		 jae	 SHORT $L56335

; 246  : 		_stprintf(&psz[j], _T("%02X"), lpb[i]);

  00bbd	8b 4d f8	 mov	 ecx, DWORD PTR _lpb$[ebp]
  00bc0	03 4d f0	 add	 ecx, DWORD PTR _i$56331[ebp]
  00bc3	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00bc6	8b f4		 mov	 esi, esp
  00bc8	52		 push	 edx
  00bc9	68 00 00 00 00	 push	 OFFSET FLAT:$SG56336
  00bce	8b 45 f4	 mov	 eax, DWORD PTR _psz$[ebp]
  00bd1	03 45 ec	 add	 eax, DWORD PTR _j$56332[ebp]
  00bd4	50		 push	 eax
  00bd5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  00bdb	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bde	3b f4		 cmp	 esi, esp
  00be0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00be5	eb bc		 jmp	 SHORT $L56334
$L56335:

; 247  : 	const BOOL RES = WriteString(lpSection, lpKey, psz);

  00be7	8b 4d f4	 mov	 ecx, DWORD PTR _psz$[ebp]
  00bea	51		 push	 ecx
  00beb	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00bee	52		 push	 edx
  00bef	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00bf2	50		 push	 eax
  00bf3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf6	e8 00 00 00 00	 call	 ?WriteString@YL_Ini@@QBEHPBD00@Z ; YL_Ini::WriteString
  00bfb	89 45 e8	 mov	 DWORD PTR _RES$[ebp], eax

; 248  : 	delete [] psz;

  00bfe	8b 4d f4	 mov	 ecx, DWORD PTR _psz$[ebp]
  00c01	89 4d e0	 mov	 DWORD PTR $T56667[ebp], ecx
  00c04	8b 55 e0	 mov	 edx, DWORD PTR $T56667[ebp]
  00c07	52		 push	 edx
  00c08	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c0d	83 c4 04	 add	 esp, 4

; 249  : 	return RES;

  00c10	8b 45 e8	 mov	 eax, DWORD PTR _RES$[ebp]
$L56324:

; 250  : }

  00c13	5e		 pop	 esi
  00c14	83 c4 20	 add	 esp, 32			; 00000020H
  00c17	3b ec		 cmp	 ebp, esp
  00c19	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c1e	8b e5		 mov	 esp, ebp
  00c20	5d		 pop	 ebp
  00c21	c2 10 00	 ret	 16			; 00000010H
?WriteDataBlock@YL_Ini@@QBEHPBD0PBXK@Z ENDP		; YL_Ini::WriteDataBlock
_TEXT	ENDS
PUBLIC	?GetPoint@YL_Ini@@QBE?AUtagPOINT@@PBD0U2@@Z	; YL_Ini::GetPoint
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pt$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_lpSection$ = 12					; size = 4
_lpKey$ = 16						; size = 4
_ptDefault$ = 20					; size = 8
?GetPoint@YL_Ini@@QBE?AUtagPOINT@@PBD0U2@@Z PROC NEAR	; YL_Ini::GetPoint
; _this$ = ecx

; 254  : {

  00c30	55		 push	 ebp
  00c31	8b ec		 mov	 ebp, esp
  00c33	83 ec 14	 sub	 esp, 20			; 00000014H
  00c36	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00c3b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00c3e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00c41	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00c44	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00c47	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00c4a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 255  : 	POINT pt;
; 256  : 	if (GetDataBlock(lpSection, lpKey, &pt, sizeof(POINT)) != sizeof(POINT))

  00c4d	6a 00		 push	 0
  00c4f	6a 08		 push	 8
  00c51	8d 45 f0	 lea	 eax, DWORD PTR _pt$[ebp]
  00c54	50		 push	 eax
  00c55	8b 4d 10	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  00c58	51		 push	 ecx
  00c59	8b 55 0c	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00c5c	52		 push	 edx
  00c5d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c60	e8 00 00 00 00	 call	 ?GetDataBlock@YL_Ini@@QBEKPBD0PAXKK@Z ; YL_Ini::GetDataBlock
  00c65	83 f8 08	 cmp	 eax, 8
  00c68	74 0c		 je	 SHORT $L56349

; 257  : 		pt = ptDefault;

  00c6a	8b 45 14	 mov	 eax, DWORD PTR _ptDefault$[ebp]
  00c6d	89 45 f0	 mov	 DWORD PTR _pt$[ebp], eax
  00c70	8b 4d 18	 mov	 ecx, DWORD PTR _ptDefault$[ebp+4]
  00c73	89 4d f4	 mov	 DWORD PTR _pt$[ebp+4], ecx
$L56349:

; 258  : 	return pt;

  00c76	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00c79	8b 45 f0	 mov	 eax, DWORD PTR _pt$[ebp]
  00c7c	89 02		 mov	 DWORD PTR [edx], eax
  00c7e	8b 4d f4	 mov	 ecx, DWORD PTR _pt$[ebp+4]
  00c81	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00c84	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 259  : }

  00c87	52		 push	 edx
  00c88	8b cd		 mov	 ecx, ebp
  00c8a	50		 push	 eax
  00c8b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56671
  00c91	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00c96	58		 pop	 eax
  00c97	5a		 pop	 edx
  00c98	83 c4 14	 add	 esp, 20			; 00000014H
  00c9b	3b ec		 cmp	 ebp, esp
  00c9d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ca2	8b e5		 mov	 esp, ebp
  00ca4	5d		 pop	 ebp
  00ca5	c2 14 00	 ret	 20			; 00000014H
$L56671:
  00ca8	01 00 00 00	 DD	 1
  00cac	00 00 00 00	 DD	 $L56670
$L56670:
  00cb0	f0 ff ff ff	 DD	 -16			; fffffff0H
  00cb4	08 00 00 00	 DD	 8
  00cb8	00 00 00 00	 DD	 $L56669
$L56669:
  00cbc	70		 DB	 112			; 00000070H
  00cbd	74		 DB	 116			; 00000074H
  00cbe	00		 DB	 0
?GetPoint@YL_Ini@@QBE?AUtagPOINT@@PBD0U2@@Z ENDP	; YL_Ini::GetPoint
_TEXT	ENDS
PUBLIC	?GetRect@YL_Ini@@QBE?AUtagRECT@@PBD0U2@@Z	; YL_Ini::GetRect
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_rc$ = -24						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_lpSection$ = 12					; size = 4
_lpKey$ = 16						; size = 4
_rcDefault$ = 20					; size = 16
?GetRect@YL_Ini@@QBE?AUtagRECT@@PBD0U2@@Z PROC NEAR	; YL_Ini::GetRect
; _this$ = ecx

; 263  : {

  00cc0	55		 push	 ebp
  00cc1	8b ec		 mov	 ebp, esp
  00cc3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00cc6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00ccb	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00cce	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00cd1	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00cd4	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00cd7	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00cda	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00cdd	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00ce0	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 264  : 	RECT rc;
; 265  : 	if (GetDataBlock(lpSection, lpKey, &rc, sizeof(RECT)) != sizeof(RECT))

  00ce3	6a 00		 push	 0
  00ce5	6a 10		 push	 16			; 00000010H
  00ce7	8d 45 e8	 lea	 eax, DWORD PTR _rc$[ebp]
  00cea	50		 push	 eax
  00ceb	8b 4d 10	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  00cee	51		 push	 ecx
  00cef	8b 55 0c	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00cf2	52		 push	 edx
  00cf3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cf6	e8 00 00 00 00	 call	 ?GetDataBlock@YL_Ini@@QBEKPBD0PAXKK@Z ; YL_Ini::GetDataBlock
  00cfb	83 f8 10	 cmp	 eax, 16			; 00000010H
  00cfe	74 18		 je	 SHORT $L56360

; 266  : 		rc = rcDefault;

  00d00	8b 45 14	 mov	 eax, DWORD PTR _rcDefault$[ebp]
  00d03	89 45 e8	 mov	 DWORD PTR _rc$[ebp], eax
  00d06	8b 4d 18	 mov	 ecx, DWORD PTR _rcDefault$[ebp+4]
  00d09	89 4d ec	 mov	 DWORD PTR _rc$[ebp+4], ecx
  00d0c	8b 55 1c	 mov	 edx, DWORD PTR _rcDefault$[ebp+8]
  00d0f	89 55 f0	 mov	 DWORD PTR _rc$[ebp+8], edx
  00d12	8b 45 20	 mov	 eax, DWORD PTR _rcDefault$[ebp+12]
  00d15	89 45 f4	 mov	 DWORD PTR _rc$[ebp+12], eax
$L56360:

; 267  : 	return rc;

  00d18	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00d1b	8b 55 e8	 mov	 edx, DWORD PTR _rc$[ebp]
  00d1e	89 11		 mov	 DWORD PTR [ecx], edx
  00d20	8b 45 ec	 mov	 eax, DWORD PTR _rc$[ebp+4]
  00d23	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00d26	8b 55 f0	 mov	 edx, DWORD PTR _rc$[ebp+8]
  00d29	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00d2c	8b 45 f4	 mov	 eax, DWORD PTR _rc$[ebp+12]
  00d2f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00d32	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : }

  00d35	52		 push	 edx
  00d36	8b cd		 mov	 ecx, ebp
  00d38	50		 push	 eax
  00d39	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L56675
  00d3f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00d44	58		 pop	 eax
  00d45	5a		 pop	 edx
  00d46	83 c4 1c	 add	 esp, 28			; 0000001cH
  00d49	3b ec		 cmp	 ebp, esp
  00d4b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d50	8b e5		 mov	 esp, ebp
  00d52	5d		 pop	 ebp
  00d53	c2 1c 00	 ret	 28			; 0000001cH
$L56675:
  00d56	01 00 00 00	 DD	 1
  00d5a	00 00 00 00	 DD	 $L56674
$L56674:
  00d5e	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00d62	10 00 00 00	 DD	 16			; 00000010H
  00d66	00 00 00 00	 DD	 $L56673
$L56673:
  00d6a	72		 DB	 114			; 00000072H
  00d6b	63		 DB	 99			; 00000063H
  00d6c	00		 DB	 0
?GetRect@YL_Ini@@QBE?AUtagRECT@@PBD0U2@@Z ENDP		; YL_Ini::GetRect
_TEXT	ENDS
PUBLIC	?WritePoint@YL_Ini@@QBEHPBD0UtagPOINT@@@Z	; YL_Ini::WritePoint
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_pt$ = 16						; size = 8
?WritePoint@YL_Ini@@QBEHPBD0UtagPOINT@@@Z PROC NEAR	; YL_Ini::WritePoint
; _this$ = ecx

; 272  : {

  00d70	55		 push	 ebp
  00d71	8b ec		 mov	 ebp, esp
  00d73	51		 push	 ecx
  00d74	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00d7b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 273  : 	return WriteDataBlock(lpSection, lpKey, &pt, sizeof(POINT));

  00d7e	6a 08		 push	 8
  00d80	8d 45 10	 lea	 eax, DWORD PTR _pt$[ebp]
  00d83	50		 push	 eax
  00d84	8b 4d 0c	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  00d87	51		 push	 ecx
  00d88	8b 55 08	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00d8b	52		 push	 edx
  00d8c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d8f	e8 00 00 00 00	 call	 ?WriteDataBlock@YL_Ini@@QBEHPBD0PBXK@Z ; YL_Ini::WriteDataBlock

; 274  : }

  00d94	83 c4 04	 add	 esp, 4
  00d97	3b ec		 cmp	 ebp, esp
  00d99	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d9e	8b e5		 mov	 esp, ebp
  00da0	5d		 pop	 ebp
  00da1	c2 10 00	 ret	 16			; 00000010H
?WritePoint@YL_Ini@@QBEHPBD0UtagPOINT@@@Z ENDP		; YL_Ini::WritePoint
_TEXT	ENDS
PUBLIC	?WriteRect@YL_Ini@@QBEHPBD0UtagRECT@@@Z		; YL_Ini::WriteRect
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_rc$ = 16						; size = 16
?WriteRect@YL_Ini@@QBEHPBD0UtagRECT@@@Z PROC NEAR	; YL_Ini::WriteRect
; _this$ = ecx

; 278  : {

  00db0	55		 push	 ebp
  00db1	8b ec		 mov	 ebp, esp
  00db3	51		 push	 ecx
  00db4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00dbb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 279  : 	return WriteDataBlock(lpSection, lpKey, &rc, sizeof(RECT));

  00dbe	6a 10		 push	 16			; 00000010H
  00dc0	8d 45 10	 lea	 eax, DWORD PTR _rc$[ebp]
  00dc3	50		 push	 eax
  00dc4	8b 4d 0c	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  00dc7	51		 push	 ecx
  00dc8	8b 55 08	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00dcb	52		 push	 edx
  00dcc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dcf	e8 00 00 00 00	 call	 ?WriteDataBlock@YL_Ini@@QBEHPBD0PBXK@Z ; YL_Ini::WriteDataBlock

; 280  : }

  00dd4	83 c4 04	 add	 esp, 4
  00dd7	3b ec		 cmp	 ebp, esp
  00dd9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dde	8b e5		 mov	 esp, ebp
  00de0	5d		 pop	 ebp
  00de1	c2 18 00	 ret	 24			; 00000018H
?WriteRect@YL_Ini@@QBEHPBD0UtagRECT@@@Z ENDP		; YL_Ini::WriteRect
_TEXT	ENDS
PUBLIC	?DeleteSection@YL_Ini@@QBEHPBD@Z		; YL_Ini::DeleteSection
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
?DeleteSection@YL_Ini@@QBEHPBD@Z PROC NEAR		; YL_Ini::DeleteSection
; _this$ = ecx

; 284  : {

  00df0	55		 push	 ebp
  00df1	8b ec		 mov	 ebp, esp
  00df3	51		 push	 ecx
  00df4	56		 push	 esi
  00df5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00dfc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 285  : 	return ::WritePrivateProfileString(lpSection, NULL, _T(""), m_pszPathName);

  00dff	8b f4		 mov	 esi, esp
  00e01	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e04	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e07	51		 push	 ecx
  00e08	68 00 00 00 00	 push	 OFFSET FLAT:$SG56379
  00e0d	6a 00		 push	 0
  00e0f	8b 55 08	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00e12	52		 push	 edx
  00e13	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WritePrivateProfileStringA@16
  00e19	3b f4		 cmp	 esi, esp
  00e1b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 286  : }

  00e20	5e		 pop	 esi
  00e21	83 c4 04	 add	 esp, 4
  00e24	3b ec		 cmp	 ebp, esp
  00e26	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e2b	8b e5		 mov	 esp, ebp
  00e2d	5d		 pop	 ebp
  00e2e	c2 04 00	 ret	 4
?DeleteSection@YL_Ini@@QBEHPBD@Z ENDP			; YL_Ini::DeleteSection
_TEXT	ENDS
PUBLIC	?DeleteValue@YL_Ini@@QBEHPBD0@Z			; YL_Ini::DeleteValue
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
?DeleteValue@YL_Ini@@QBEHPBD0@Z PROC NEAR		; YL_Ini::DeleteValue
; _this$ = ecx

; 290  : {

  00e40	55		 push	 ebp
  00e41	8b ec		 mov	 ebp, esp
  00e43	51		 push	 ecx
  00e44	56		 push	 esi
  00e45	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00e4c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 	return ::WritePrivateProfileString(lpSection, lpKey, NULL, m_pszPathName);

  00e4f	8b f4		 mov	 esi, esp
  00e51	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e54	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e57	51		 push	 ecx
  00e58	6a 00		 push	 0
  00e5a	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00e5d	52		 push	 edx
  00e5e	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00e61	50		 push	 eax
  00e62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WritePrivateProfileStringA@16
  00e68	3b f4		 cmp	 esi, esp
  00e6a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : }

  00e6f	5e		 pop	 esi
  00e70	83 c4 04	 add	 esp, 4
  00e73	3b ec		 cmp	 ebp, esp
  00e75	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e7a	8b e5		 mov	 esp, ebp
  00e7c	5d		 pop	 ebp
  00e7d	c2 08 00	 ret	 8
?DeleteValue@YL_Ini@@QBEHPBD0@Z ENDP			; YL_Ini::DeleteValue
_TEXT	ENDS
EXTRN	__imp__GetPrivateProfileStringA@24:NEAR
EXTRN	_strcpy:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv85 = -40						; size = 4
$T56687 = -36						; size = 4
$T56686 = -32						; size = 4
$T56683 = -28						; size = 4
$T56682 = -24						; size = 4
$T56681 = -20						; size = 4
_dwCopied$ = -16					; size = 4
_dwLen$ = -12						; size = 4
_psz$ = -8						; size = 4
_this$ = -4						; size = 4
_lpSection$ = 8						; size = 4
_lpKey$ = 12						; size = 4
_lpDefault$ = 16					; size = 4
?__GetStringDynamic@YL_Ini@@IBEPADPBD00@Z PROC NEAR	; YL_Ini::__GetStringDynamic
; _this$ = ecx

; 303  : {

  00e80	55		 push	 ebp
  00e81	8b ec		 mov	 ebp, esp
  00e83	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00e86	56		 push	 esi
  00e87	57		 push	 edi
  00e88	51		 push	 ecx
  00e89	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  00e8c	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00e91	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00e96	f3 ab		 rep stosd
  00e98	59		 pop	 ecx
  00e99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	TCHAR* psz = NULL;

  00e9c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _psz$[ebp], 0

; 305  : 	if (lpSection == NULL || lpKey == NULL)

  00ea3	83 7d 08 00	 cmp	 DWORD PTR _lpSection$[ebp], 0
  00ea7	74 06		 je	 SHORT $L56393
  00ea9	83 7d 0c 00	 cmp	 DWORD PTR _lpKey$[ebp], 0
  00ead	75 5a		 jne	 SHORT $L56392
$L56393:

; 306  : 	{
; 307  : 		// Invalid section or key name, just return the default string
; 308  : 		if (lpDefault == NULL)

  00eaf	83 7d 10 00	 cmp	 DWORD PTR _lpDefault$[ebp], 0
  00eb3	75 1b		 jne	 SHORT $L56394

; 309  : 		{
; 310  : 			// Empty string
; 311  : 			psz = new TCHAR[1];

  00eb5	6a 01		 push	 1
  00eb7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00ebc	83 c4 04	 add	 esp, 4
  00ebf	89 45 ec	 mov	 DWORD PTR $T56681[ebp], eax
  00ec2	8b 45 ec	 mov	 eax, DWORD PTR $T56681[ebp]
  00ec5	89 45 f8	 mov	 DWORD PTR _psz$[ebp], eax

; 312  : 			*psz = _T('\0');

  00ec8	8b 4d f8	 mov	 ecx, DWORD PTR _psz$[ebp]
  00ecb	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 313  : 		}
; 314  : 		else

  00ece	eb 31		 jmp	 SHORT $L56397
$L56394:

; 315  : 		{
; 316  : 			psz = new TCHAR[_tcslen(lpDefault) + 1];

  00ed0	8b 55 10	 mov	 edx, DWORD PTR _lpDefault$[ebp]
  00ed3	52		 push	 edx
  00ed4	e8 00 00 00 00	 call	 _strlen
  00ed9	83 c4 04	 add	 esp, 4
  00edc	83 c0 01	 add	 eax, 1
  00edf	50		 push	 eax
  00ee0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00ee5	83 c4 04	 add	 esp, 4
  00ee8	89 45 e8	 mov	 DWORD PTR $T56682[ebp], eax
  00eeb	8b 45 e8	 mov	 eax, DWORD PTR $T56682[ebp]
  00eee	89 45 f8	 mov	 DWORD PTR _psz$[ebp], eax

; 317  : 			_tcscpy(psz, lpDefault);

  00ef1	8b 4d 10	 mov	 ecx, DWORD PTR _lpDefault$[ebp]
  00ef4	51		 push	 ecx
  00ef5	8b 55 f8	 mov	 edx, DWORD PTR _psz$[ebp]
  00ef8	52		 push	 edx
  00ef9	e8 00 00 00 00	 call	 _strcpy
  00efe	83 c4 08	 add	 esp, 8
$L56397:

; 318  : 		}
; 319  : 		
; 320  : 		return psz;

  00f01	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  00f04	e9 ec 00 00 00	 jmp	 $L56390
$L56392:

; 321  : 	}
; 322  : 	
; 323  : 	// Keep enlarging the buffer size until being certain on that the string we
; 324  : 	// retrieved was original(not truncated).
; 325  : 	DWORD dwLen = DEF_PROFILE_THRESHOLD;

  00f09	c7 45 f4 00 02
	00 00		 mov	 DWORD PTR _dwLen$[ebp], 512 ; 00000200H

; 326  : 	psz = new TCHAR[dwLen + 1];

  00f10	8b 45 f4	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00f13	83 c0 01	 add	 eax, 1
  00f16	50		 push	 eax
  00f17	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00f1c	83 c4 04	 add	 esp, 4
  00f1f	89 45 e4	 mov	 DWORD PTR $T56683[ebp], eax
  00f22	8b 4d e4	 mov	 ecx, DWORD PTR $T56683[ebp]
  00f25	89 4d f8	 mov	 DWORD PTR _psz$[ebp], ecx

; 327  : 	DWORD dwCopied = ::GetPrivateProfileString(lpSection, lpKey, lpDefault == NULL ? _T("") : lpDefault, psz, dwLen, m_pszPathName);

  00f28	83 7d 10 00	 cmp	 DWORD PTR _lpDefault$[ebp], 0
  00f2c	75 09		 jne	 SHORT $L56684
  00f2e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], OFFSET FLAT:$SG56404
  00f35	eb 06		 jmp	 SHORT $L56685
$L56684:
  00f37	8b 55 10	 mov	 edx, DWORD PTR _lpDefault$[ebp]
  00f3a	89 55 d8	 mov	 DWORD PTR tv85[ebp], edx
$L56685:
  00f3d	8b f4		 mov	 esi, esp
  00f3f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f42	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00f45	51		 push	 ecx
  00f46	8b 55 f4	 mov	 edx, DWORD PTR _dwLen$[ebp]
  00f49	52		 push	 edx
  00f4a	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  00f4d	50		 push	 eax
  00f4e	8b 4d d8	 mov	 ecx, DWORD PTR tv85[ebp]
  00f51	51		 push	 ecx
  00f52	8b 55 0c	 mov	 edx, DWORD PTR _lpKey$[ebp]
  00f55	52		 push	 edx
  00f56	8b 45 08	 mov	 eax, DWORD PTR _lpSection$[ebp]
  00f59	50		 push	 eax
  00f5a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24
  00f60	3b f4		 cmp	 esi, esp
  00f62	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f67	89 45 f0	 mov	 DWORD PTR _dwCopied$[ebp], eax
$L56406:

; 328  : 	while (dwCopied + 1 >= dwLen)

  00f6a	8b 4d f0	 mov	 ecx, DWORD PTR _dwCopied$[ebp]
  00f6d	83 c1 01	 add	 ecx, 1
  00f70	3b 4d f4	 cmp	 ecx, DWORD PTR _dwLen$[ebp]
  00f73	72 7d		 jb	 SHORT $L56407

; 329  : 	{		
; 330  : 		dwLen += DEF_PROFILE_THRESHOLD;

  00f75	8b 55 f4	 mov	 edx, DWORD PTR _dwLen$[ebp]
  00f78	81 c2 00 02 00
	00		 add	 edx, 512		; 00000200H
  00f7e	89 55 f4	 mov	 DWORD PTR _dwLen$[ebp], edx

; 331  : 		delete [] psz;

  00f81	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  00f84	89 45 e0	 mov	 DWORD PTR $T56686[ebp], eax
  00f87	8b 4d e0	 mov	 ecx, DWORD PTR $T56686[ebp]
  00f8a	51		 push	 ecx
  00f8b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00f90	83 c4 04	 add	 esp, 4

; 332  : 		psz = new TCHAR[dwLen + 1];

  00f93	8b 55 f4	 mov	 edx, DWORD PTR _dwLen$[ebp]
  00f96	83 c2 01	 add	 edx, 1
  00f99	52		 push	 edx
  00f9a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00f9f	83 c4 04	 add	 esp, 4
  00fa2	89 45 dc	 mov	 DWORD PTR $T56687[ebp], eax
  00fa5	8b 45 dc	 mov	 eax, DWORD PTR $T56687[ebp]
  00fa8	89 45 f8	 mov	 DWORD PTR _psz$[ebp], eax

; 333  : 		dwCopied = ::GetPrivateProfileString(lpSection, lpKey, lpDefault == NULL ? _T("") : lpDefault, psz, dwLen, m_pszPathName);

  00fab	83 7d 10 00	 cmp	 DWORD PTR _lpDefault$[ebp], 0
  00faf	75 09		 jne	 SHORT $L56688
  00fb1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], OFFSET FLAT:$SG56411
  00fb8	eb 06		 jmp	 SHORT $L56689
$L56688:
  00fba	8b 4d 10	 mov	 ecx, DWORD PTR _lpDefault$[ebp]
  00fbd	89 4d d4	 mov	 DWORD PTR tv134[ebp], ecx
$L56689:
  00fc0	8b f4		 mov	 esi, esp
  00fc2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fc5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00fc8	50		 push	 eax
  00fc9	8b 4d f4	 mov	 ecx, DWORD PTR _dwLen$[ebp]
  00fcc	51		 push	 ecx
  00fcd	8b 55 f8	 mov	 edx, DWORD PTR _psz$[ebp]
  00fd0	52		 push	 edx
  00fd1	8b 45 d4	 mov	 eax, DWORD PTR tv134[ebp]
  00fd4	50		 push	 eax
  00fd5	8b 4d 0c	 mov	 ecx, DWORD PTR _lpKey$[ebp]
  00fd8	51		 push	 ecx
  00fd9	8b 55 08	 mov	 edx, DWORD PTR _lpSection$[ebp]
  00fdc	52		 push	 edx
  00fdd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24
  00fe3	3b f4		 cmp	 esi, esp
  00fe5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fea	89 45 f0	 mov	 DWORD PTR _dwCopied$[ebp], eax

; 334  : 	}

  00fed	e9 78 ff ff ff	 jmp	 $L56406
$L56407:

; 335  : 	
; 336  : 	return psz; // !!! Requires the caller to free this memory !!!

  00ff2	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
$L56390:

; 337  : }

  00ff5	5f		 pop	 edi
  00ff6	5e		 pop	 esi
  00ff7	83 c4 2c	 add	 esp, 44			; 0000002cH
  00ffa	3b ec		 cmp	 ebp, esp
  00ffc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01001	8b e5		 mov	 esp, ebp
  01003	5d		 pop	 ebp
  01004	c2 0c 00	 ret	 12			; 0000000cH
?__GetStringDynamic@YL_Ini@@IBEPADPBD00@Z ENDP		; YL_Ini::__GetStringDynamic
_TEXT	ENDS
PUBLIC	__tcsrev
PUBLIC	?__ToBinaryString@YL_Ini@@KAXIPADK@Z		; YL_Ini::__ToBinaryString
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_nNumber$ = 8						; size = 4
_lpBuffer$ = 12						; size = 4
_dwBufSize$ = 16					; size = 4
?__ToBinaryString@YL_Ini@@KAXIPADK@Z PROC NEAR		; YL_Ini::__ToBinaryString

; 342  : {

  01010	55		 push	 ebp
  01011	8b ec		 mov	 ebp, esp
  01013	51		 push	 ecx
  01014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 343  : 	if (dwBufSize == 0)

  0101b	83 7d 10 00	 cmp	 DWORD PTR _dwBufSize$[ebp], 0
  0101f	75 02		 jne	 SHORT $L56417

; 344  : 		return;

  01021	eb 57		 jmp	 SHORT $L56416
$L56417:

; 345  : 	
; 346  : 	DWORD dwIndex = 0;	

  01023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwIndex$[ebp], 0
$L56419:

; 347  : 	do
; 348  : 	{
; 349  : 		lpBuffer[dwIndex++] = (nNumber % 2) ? _T('1') : _T('0');

  0102a	8b 45 08	 mov	 eax, DWORD PTR _nNumber$[ebp]
  0102d	33 d2		 xor	 edx, edx
  0102f	b9 02 00 00 00	 mov	 ecx, 2
  01034	f7 f1		 div	 ecx
  01036	85 d2		 test	 edx, edx
  01038	0f 95 c2	 setne	 dl
  0103b	80 c2 30	 add	 dl, 48			; 00000030H
  0103e	8b 45 0c	 mov	 eax, DWORD PTR _lpBuffer$[ebp]
  01041	03 45 fc	 add	 eax, DWORD PTR _dwIndex$[ebp]
  01044	88 10		 mov	 BYTE PTR [eax], dl
  01046	8b 4d fc	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  01049	83 c1 01	 add	 ecx, 1
  0104c	89 4d fc	 mov	 DWORD PTR _dwIndex$[ebp], ecx

; 350  : 		nNumber /= 2;

  0104f	8b 55 08	 mov	 edx, DWORD PTR _nNumber$[ebp]
  01052	d1 ea		 shr	 edx, 1
  01054	89 55 08	 mov	 DWORD PTR _nNumber$[ebp], edx

; 351  : 	} while (nNumber > 0 && dwIndex < dwBufSize);

  01057	83 7d 08 00	 cmp	 DWORD PTR _nNumber$[ebp], 0
  0105b	76 08		 jbe	 SHORT $L56421
  0105d	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  01060	3b 45 10	 cmp	 eax, DWORD PTR _dwBufSize$[ebp]
  01063	72 c5		 jb	 SHORT $L56419
$L56421:

; 352  : 
; 353  : 	lpBuffer[dwIndex] = _T('\0');

  01065	8b 4d 0c	 mov	 ecx, DWORD PTR _lpBuffer$[ebp]
  01068	03 4d fc	 add	 ecx, DWORD PTR _dwIndex$[ebp]
  0106b	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 354  : 	_tcsrev(lpBuffer);

  0106e	8b 55 0c	 mov	 edx, DWORD PTR _lpBuffer$[ebp]
  01071	52		 push	 edx
  01072	e8 00 00 00 00	 call	 __tcsrev
  01077	83 c4 04	 add	 esp, 4
$L56416:

; 355  : }

  0107a	83 c4 04	 add	 esp, 4
  0107d	3b ec		 cmp	 ebp, esp
  0107f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01084	8b e5		 mov	 esp, ebp
  01086	5d		 pop	 ebp
  01087	c3		 ret	 0
?__ToBinaryString@YL_Ini@@KAXIPADK@Z ENDP		; YL_Ini::__ToBinaryString
_TEXT	ENDS
EXTRN	__imp___mbsrev:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsrev
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__tcsrev PROC NEAR					; COMDAT

; 851  : __inline _PC _tcsrev(_PC _s1) {return (_PC)_mbsrev((_PUC)_s1);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR __s1$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsrev
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
__tcsrev ENDP
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\commonlib\common\yl_ini.cpp
_TEXT	ENDS
_TEXT	SEGMENT
tv64 = -4						; size = 4
_nBase$ = 8						; size = 4
?__ValidateBase@YL_Ini@@KAHH@Z PROC NEAR		; YL_Ini::__ValidateBase

; 359  : {

  01090	55		 push	 ebp
  01091	8b ec		 mov	 ebp, esp
  01093	51		 push	 ecx
  01094	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 360  : 	switch (nBase)

  0109b	8b 45 08	 mov	 eax, DWORD PTR _nBase$[ebp]
  0109e	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  010a1	83 7d fc 02	 cmp	 DWORD PTR tv64[ebp], 2
  010a5	74 0e		 je	 SHORT $L56430
  010a7	83 7d fc 08	 cmp	 DWORD PTR tv64[ebp], 8
  010ab	74 08		 je	 SHORT $L56430
  010ad	83 7d fc 10	 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  010b1	74 02		 je	 SHORT $L56430
  010b3	eb 02		 jmp	 SHORT $L56431
$L56430:

; 361  : 	{
; 362  : 	case BASE_BINARY:
; 363  : 	case BASE_OCTAL:
; 364  : 	case BASE_HEXADECIMAL:
; 365  : 		break;

  010b5	eb 07		 jmp	 SHORT $L56427
$L56431:

; 366  : 
; 367  : 	default:
; 368  : 		nBase = BASE_DECIMAL;

  010b7	c7 45 08 0a 00
	00 00		 mov	 DWORD PTR _nBase$[ebp], 10 ; 0000000aH
$L56427:

; 369  : 	}
; 370  : 
; 371  : 	return nBase;

  010be	8b 45 08	 mov	 eax, DWORD PTR _nBase$[ebp]

; 372  : }

  010c1	8b e5		 mov	 esp, ebp
  010c3	5d		 pop	 ebp
  010c4	c3		 ret	 0
?__ValidateBase@YL_Ini@@KAHH@Z ENDP			; YL_Ini::__ValidateBase
; Function compile flags: /Odt /RTCsu
tv64 = -4						; size = 4
_nNumber$ = 8						; size = 4
_lpBuffer$ = 12						; size = 4
_nBase$ = 16						; size = 4
?__IntToString@YL_Ini@@KAXHPADH@Z PROC NEAR		; YL_Ini::__IntToString

; 376  : {

  010d0	55		 push	 ebp
  010d1	8b ec		 mov	 ebp, esp
  010d3	51		 push	 ecx
  010d4	56		 push	 esi
  010d5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 377  : 	switch (nBase)

  010dc	8b 45 10	 mov	 eax, DWORD PTR _nBase$[ebp]
  010df	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  010e2	83 7d fc 02	 cmp	 DWORD PTR tv64[ebp], 2
  010e6	74 0e		 je	 SHORT $L56441
  010e8	83 7d fc 08	 cmp	 DWORD PTR tv64[ebp], 8
  010ec	74 08		 je	 SHORT $L56441
  010ee	83 7d fc 10	 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  010f2	74 02		 je	 SHORT $L56441
  010f4	eb 16		 jmp	 SHORT $L56443
$L56441:

; 378  : 	{
; 379  : 	case BASE_BINARY:
; 380  : 	case BASE_OCTAL:
; 381  : 	case BASE_HEXADECIMAL:
; 382  : 		__UIntToString((UINT)nNumber, lpBuffer, nBase);

  010f6	8b 4d 10	 mov	 ecx, DWORD PTR _nBase$[ebp]
  010f9	51		 push	 ecx
  010fa	8b 55 0c	 mov	 edx, DWORD PTR _lpBuffer$[ebp]
  010fd	52		 push	 edx
  010fe	8b 45 08	 mov	 eax, DWORD PTR _nNumber$[ebp]
  01101	50		 push	 eax
  01102	e8 00 00 00 00	 call	 ?__UIntToString@YL_Ini@@KAXIPADH@Z ; YL_Ini::__UIntToString
  01107	83 c4 0c	 add	 esp, 12			; 0000000cH

; 383  : 		break;

  0110a	eb 1f		 jmp	 SHORT $L56436
$L56443:

; 384  : 
; 385  : 	default:
; 386  : 		_stprintf(lpBuffer, _T("%d"), nNumber);

  0110c	8b f4		 mov	 esi, esp
  0110e	8b 4d 08	 mov	 ecx, DWORD PTR _nNumber$[ebp]
  01111	51		 push	 ecx
  01112	68 00 00 00 00	 push	 OFFSET FLAT:$SG56444
  01117	8b 55 0c	 mov	 edx, DWORD PTR _lpBuffer$[ebp]
  0111a	52		 push	 edx
  0111b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  01121	83 c4 0c	 add	 esp, 12			; 0000000cH
  01124	3b f4		 cmp	 esi, esp
  01126	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L56436:

; 387  : 		break;
; 388  : 	}	
; 389  : }

  0112b	5e		 pop	 esi
  0112c	83 c4 04	 add	 esp, 4
  0112f	3b ec		 cmp	 ebp, esp
  01131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01136	8b e5		 mov	 esp, ebp
  01138	5d		 pop	 ebp
  01139	c3		 ret	 0
?__IntToString@YL_Ini@@KAXHPADH@Z ENDP			; YL_Ini::__IntToString
; Function compile flags: /Odt /RTCsu
tv64 = -4						; size = 4
_nNumber$ = 8						; size = 4
_lpBuffer$ = 12						; size = 4
_nBase$ = 16						; size = 4
?__UIntToString@YL_Ini@@KAXIPADH@Z PROC NEAR		; YL_Ini::__UIntToString

; 393  : {

  01140	55		 push	 ebp
  01141	8b ec		 mov	 ebp, esp
  01143	51		 push	 ecx
  01144	56		 push	 esi
  01145	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 394  : 	switch (nBase)

  0114c	8b 45 10	 mov	 eax, DWORD PTR _nBase$[ebp]
  0114f	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  01152	83 7d fc 02	 cmp	 DWORD PTR tv64[ebp], 2
  01156	74 0e		 je	 SHORT $L56454
  01158	83 7d fc 08	 cmp	 DWORD PTR tv64[ebp], 8
  0115c	74 1c		 je	 SHORT $L56455
  0115e	83 7d fc 10	 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  01162	74 37		 je	 SHORT $L56457
  01164	eb 56		 jmp	 SHORT $L56459
$L56454:

; 395  : 	{
; 396  : 	case BASE_BINARY:
; 397  : 		__ToBinaryString(nNumber, lpBuffer, DEF_PROFILE_NUM_LEN);

  01166	6a 40		 push	 64			; 00000040H
  01168	8b 4d 0c	 mov	 ecx, DWORD PTR _lpBuffer$[ebp]
  0116b	51		 push	 ecx
  0116c	8b 55 08	 mov	 edx, DWORD PTR _nNumber$[ebp]
  0116f	52		 push	 edx
  01170	e8 00 00 00 00	 call	 ?__ToBinaryString@YL_Ini@@KAXIPADK@Z ; YL_Ini::__ToBinaryString
  01175	83 c4 0c	 add	 esp, 12			; 0000000cH

; 398  : 		break;

  01178	eb 61		 jmp	 SHORT $L56449
$L56455:

; 399  : 
; 400  : 	case BASE_OCTAL:
; 401  : 		_stprintf(lpBuffer, _T("%o"), nNumber);

  0117a	8b f4		 mov	 esi, esp
  0117c	8b 45 08	 mov	 eax, DWORD PTR _nNumber$[ebp]
  0117f	50		 push	 eax
  01180	68 00 00 00 00	 push	 OFFSET FLAT:$SG56456
  01185	8b 4d 0c	 mov	 ecx, DWORD PTR _lpBuffer$[ebp]
  01188	51		 push	 ecx
  01189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  0118f	83 c4 0c	 add	 esp, 12			; 0000000cH
  01192	3b f4		 cmp	 esi, esp
  01194	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 402  : 		break;

  01199	eb 40		 jmp	 SHORT $L56449
$L56457:

; 403  : 
; 404  : 	case BASE_HEXADECIMAL:
; 405  : 		_stprintf(lpBuffer, _T("%X"), nNumber);

  0119b	8b f4		 mov	 esi, esp
  0119d	8b 55 08	 mov	 edx, DWORD PTR _nNumber$[ebp]
  011a0	52		 push	 edx
  011a1	68 00 00 00 00	 push	 OFFSET FLAT:$SG56458
  011a6	8b 45 0c	 mov	 eax, DWORD PTR _lpBuffer$[ebp]
  011a9	50		 push	 eax
  011aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  011b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  011b3	3b f4		 cmp	 esi, esp
  011b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 406  : 		break;

  011ba	eb 1f		 jmp	 SHORT $L56449
$L56459:

; 407  : 
; 408  : 	default:
; 409  : 		_stprintf(lpBuffer, _T("%u"), nNumber);

  011bc	8b f4		 mov	 esi, esp
  011be	8b 4d 08	 mov	 ecx, DWORD PTR _nNumber$[ebp]
  011c1	51		 push	 ecx
  011c2	68 00 00 00 00	 push	 OFFSET FLAT:$SG56460
  011c7	8b 55 0c	 mov	 edx, DWORD PTR _lpBuffer$[ebp]
  011ca	52		 push	 edx
  011cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  011d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  011d4	3b f4		 cmp	 esi, esp
  011d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L56449:

; 410  : 		break;
; 411  : 	}	
; 412  : }

  011db	5e		 pop	 esi
  011dc	83 c4 04	 add	 esp, 4
  011df	3b ec		 cmp	 ebp, esp
  011e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011e6	8b e5		 mov	 esp, ebp
  011e8	5d		 pop	 ebp
  011e9	c3		 ret	 0
?__UIntToString@YL_Ini@@KAXIPADH@Z ENDP			; YL_Ini::__UIntToString
_TEXT	ENDS
PUBLIC	__tcsicmp
EXTRN	__imp__strtol:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv80 = -4						; size = 4
_lpString$ = 8						; size = 4
_bDefault$ = 12						; size = 4
?StringToBool@YL_Ini@@SAHPBDH@Z PROC NEAR		; YL_Ini::StringToBool

; 415  : {

  011f0	55		 push	 ebp
  011f1	8b ec		 mov	 ebp, esp
  011f3	51		 push	 ecx
  011f4	56		 push	 esi
  011f5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 416  : 	// Default: empty string
; 417  : 	// TRUE: "true", "yes", non-zero decimal numner
; 418  : 	// FALSE: all other cases
; 419  : 	if (lpString == NULL || *lpString == _T('\0'))

  011fc	83 7d 08 00	 cmp	 DWORD PTR _lpString$[ebp], 0
  01200	74 0a		 je	 SHORT $L56466
  01202	8b 45 08	 mov	 eax, DWORD PTR _lpString$[ebp]
  01205	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  01208	85 c9		 test	 ecx, ecx
  0120a	75 05		 jne	 SHORT $L56465
$L56466:

; 420  : 		return bDefault;

  0120c	8b 45 0c	 mov	 eax, DWORD PTR _bDefault$[ebp]
  0120f	eb 5b		 jmp	 SHORT $L56464
$L56465:

; 421  : 
; 422  : 	return (_tcsicmp(lpString, _T("true")) == 0
; 423  : 		|| _tcsicmp(lpString, _T("yes")) == 0
; 424  : 		|| _tcstol(lpString, NULL, BASE_DECIMAL) != 0);

  01211	68 00 00 00 00	 push	 OFFSET FLAT:$SG56467
  01216	8b 55 08	 mov	 edx, DWORD PTR _lpString$[ebp]
  01219	52		 push	 edx
  0121a	e8 00 00 00 00	 call	 __tcsicmp
  0121f	83 c4 08	 add	 esp, 8
  01222	85 c0		 test	 eax, eax
  01224	74 3c		 je	 SHORT $L56696
  01226	68 00 00 00 00	 push	 OFFSET FLAT:$SG56468
  0122b	8b 45 08	 mov	 eax, DWORD PTR _lpString$[ebp]
  0122e	50		 push	 eax
  0122f	e8 00 00 00 00	 call	 __tcsicmp
  01234	83 c4 08	 add	 esp, 8
  01237	85 c0		 test	 eax, eax
  01239	74 27		 je	 SHORT $L56696
  0123b	8b f4		 mov	 esi, esp
  0123d	6a 0a		 push	 10			; 0000000aH
  0123f	6a 00		 push	 0
  01241	8b 4d 08	 mov	 ecx, DWORD PTR _lpString$[ebp]
  01244	51		 push	 ecx
  01245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtol
  0124b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0124e	3b f4		 cmp	 esi, esp
  01250	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01255	85 c0		 test	 eax, eax
  01257	75 09		 jne	 SHORT $L56696
  01259	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
  01260	eb 07		 jmp	 SHORT $L56697
$L56696:
  01262	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
$L56697:
  01269	8b 45 fc	 mov	 eax, DWORD PTR tv80[ebp]
$L56464:

; 425  : }

  0126c	5e		 pop	 esi
  0126d	83 c4 04	 add	 esp, 4
  01270	3b ec		 cmp	 ebp, esp
  01272	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01277	8b e5		 mov	 esp, ebp
  01279	5d		 pop	 ebp
  0127a	c3		 ret	 0
?StringToBool@YL_Ini@@SAHPBDH@Z ENDP			; YL_Ini::StringToBool
_TEXT	ENDS
EXTRN	__imp___mbsicmp:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsicmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcsicmp PROC NEAR					; COMDAT

; 855  : __inline int _tcsicmp(_CPC _s1,_CPC _s2) {return _mbsicmp((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsicmp
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcsicmp ENDP
_TEXT	ENDS
PUBLIC	?__TrimString@YL_Ini@@KAHPAD@Z			; YL_Ini::__TrimString
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\commonlib\common\yl_ini.cpp
_TEXT	SEGMENT
$T56700 = -20						; size = 4
_psz$56486 = -16					; size = 4
_p$ = -12						; size = 4
_nLen$ = -8						; size = 4
_bTrimmed$ = -4						; size = 4
_lpString$ = 8						; size = 4
?__TrimString@YL_Ini@@KAHPAD@Z PROC NEAR		; YL_Ini::__TrimString

; 428  : {

  01280	55		 push	 ebp
  01281	8b ec		 mov	 ebp, esp
  01283	83 ec 14	 sub	 esp, 20			; 00000014H
  01286	56		 push	 esi
  01287	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0128c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0128f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  01292	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01295	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01298	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 429  : 	if (lpString == NULL)

  0129b	83 7d 08 00	 cmp	 DWORD PTR _lpString$[ebp], 0
  0129f	75 07		 jne	 SHORT $L56472

; 430  : 		return FALSE;

  012a1	33 c0		 xor	 eax, eax
  012a3	e9 fd 00 00 00	 jmp	 $L56471
$L56472:

; 431  : 
; 432  : 	BOOL bTrimmed = FALSE;

  012a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bTrimmed$[ebp], 0

; 433  : 	int nLen = (int)_tcslen(lpString);

  012af	8b 45 08	 mov	 eax, DWORD PTR _lpString$[ebp]
  012b2	50		 push	 eax
  012b3	e8 00 00 00 00	 call	 _strlen
  012b8	83 c4 04	 add	 esp, 4
  012bb	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
$L56477:

; 434  : 
; 435  : 	// '\n' and '\r' are actually not possible in this case, but anyway...
; 436  : 	
; 437  : 	// Trim right side
; 438  : 	while (nLen >= 0
; 439  : 		&& (lpString[nLen - 1] == _T(' ')
; 440  : 			|| lpString[nLen - 1] == _T('\t')
; 441  : 			|| lpString[nLen - 1] == _T('\r')
; 442  : 			|| lpString[nLen - 1] == _T('\n')))

  012be	83 7d f8 00	 cmp	 DWORD PTR _nLen$[ebp], 0
  012c2	7c 57		 jl	 SHORT $L56478
  012c4	8b 4d 08	 mov	 ecx, DWORD PTR _lpString$[ebp]
  012c7	03 4d f8	 add	 ecx, DWORD PTR _nLen$[ebp]
  012ca	0f be 51 ff	 movsx	 edx, BYTE PTR [ecx-1]
  012ce	83 fa 20	 cmp	 edx, 32			; 00000020H
  012d1	74 2d		 je	 SHORT $L56479
  012d3	8b 45 08	 mov	 eax, DWORD PTR _lpString$[ebp]
  012d6	03 45 f8	 add	 eax, DWORD PTR _nLen$[ebp]
  012d9	0f be 48 ff	 movsx	 ecx, BYTE PTR [eax-1]
  012dd	83 f9 09	 cmp	 ecx, 9
  012e0	74 1e		 je	 SHORT $L56479
  012e2	8b 55 08	 mov	 edx, DWORD PTR _lpString$[ebp]
  012e5	03 55 f8	 add	 edx, DWORD PTR _nLen$[ebp]
  012e8	0f be 42 ff	 movsx	 eax, BYTE PTR [edx-1]
  012ec	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  012ef	74 0f		 je	 SHORT $L56479
  012f1	8b 4d 08	 mov	 ecx, DWORD PTR _lpString$[ebp]
  012f4	03 4d f8	 add	 ecx, DWORD PTR _nLen$[ebp]
  012f7	0f be 51 ff	 movsx	 edx, BYTE PTR [ecx-1]
  012fb	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  012fe	75 1b		 jne	 SHORT $L56478
$L56479:

; 443  : 	{
; 444  : 		lpString[--nLen] = _T('\0');

  01300	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  01303	83 e8 01	 sub	 eax, 1
  01306	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  01309	8b 4d 08	 mov	 ecx, DWORD PTR _lpString$[ebp]
  0130c	03 4d f8	 add	 ecx, DWORD PTR _nLen$[ebp]
  0130f	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 445  : 		bTrimmed = TRUE;		

  01312	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bTrimmed$[ebp], 1

; 446  : 	}

  01319	eb a3		 jmp	 SHORT $L56477
$L56478:

; 447  : 
; 448  : 	// Trim left side
; 449  : 	LPCTSTR p = lpString; 

  0131b	8b 55 08	 mov	 edx, DWORD PTR _lpString$[ebp]
  0131e	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx
$L56482:

; 450  : 	while (*p == _T(' ')
; 451  : 			|| *p == _T('\t')
; 452  : 			|| *p == _T('\r')
; 453  : 			|| *p == _T('\n'))

  01321	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01324	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  01327	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0132a	74 21		 je	 SHORT $L56484
  0132c	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  0132f	0f be 02	 movsx	 eax, BYTE PTR [edx]
  01332	83 f8 09	 cmp	 eax, 9
  01335	74 16		 je	 SHORT $L56484
  01337	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  0133a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0133d	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  01340	74 0b		 je	 SHORT $L56484
  01342	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01345	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  01348	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0134b	75 12		 jne	 SHORT $L56483
$L56484:

; 454  : 	{
; 455  : 		p = &p[1];

  0134d	8b 55 f4	 mov	 edx, DWORD PTR _p$[ebp]
  01350	83 c2 01	 add	 edx, 1
  01353	89 55 f4	 mov	 DWORD PTR _p$[ebp], edx

; 456  : 		bTrimmed = TRUE;

  01356	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bTrimmed$[ebp], 1

; 457  : 	}

  0135d	eb c2		 jmp	 SHORT $L56482
$L56483:

; 458  : 
; 459  : 	if (p != lpString)

  0135f	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  01362	3b 45 08	 cmp	 eax, DWORD PTR _lpString$[ebp]
  01365	74 3b		 je	 SHORT $L56485

; 460  : 	{
; 461  : 		LPTSTR psz = _tcsdup(p);

  01367	8b f4		 mov	 esi, esp
  01369	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  0136c	51		 push	 ecx
  0136d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strdup
  01373	83 c4 04	 add	 esp, 4
  01376	3b f4		 cmp	 esi, esp
  01378	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0137d	89 45 f0	 mov	 DWORD PTR _psz$56486[ebp], eax

; 462  : 		_tcscpy(lpString, psz);

  01380	8b 55 f0	 mov	 edx, DWORD PTR _psz$56486[ebp]
  01383	52		 push	 edx
  01384	8b 45 08	 mov	 eax, DWORD PTR _lpString$[ebp]
  01387	50		 push	 eax
  01388	e8 00 00 00 00	 call	 _strcpy
  0138d	83 c4 08	 add	 esp, 8

; 463  : 		delete [] psz;

  01390	8b 4d f0	 mov	 ecx, DWORD PTR _psz$56486[ebp]
  01393	89 4d ec	 mov	 DWORD PTR $T56700[ebp], ecx
  01396	8b 55 ec	 mov	 edx, DWORD PTR $T56700[ebp]
  01399	52		 push	 edx
  0139a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0139f	83 c4 04	 add	 esp, 4
$L56485:

; 464  : 	}
; 465  : 
; 466  : 	return bTrimmed;

  013a2	8b 45 fc	 mov	 eax, DWORD PTR _bTrimmed$[ebp]
$L56471:

; 467  : }

  013a5	5e		 pop	 esi
  013a6	83 c4 14	 add	 esp, 20			; 00000014H
  013a9	3b ec		 cmp	 ebp, esp
  013ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  013b0	8b e5		 mov	 esp, ebp
  013b2	5d		 pop	 ebp
  013b3	c3		 ret	 0
?__TrimString@YL_Ini@@KAHPAD@Z ENDP			; YL_Ini::__TrimString
_TEXT	ENDS
PUBLIC	?__StrDupEx@YL_Ini@@KAPADPBD0@Z			; YL_Ini::__StrDupEx
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T56702 = -12						; size = 4
_psz$ = -8						; size = 4
_LEN$ = -4						; size = 4
_lpStart$ = 8						; size = 4
_lpEnd$ = 12						; size = 4
?__StrDupEx@YL_Ini@@KAPADPBD0@Z PROC NEAR		; YL_Ini::__StrDupEx

; 470  : {

  013c0	55		 push	 ebp
  013c1	8b ec		 mov	 ebp, esp
  013c3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  013c6	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  013cd	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  013d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 471  : 	const DWORD LEN = ((DWORD)(lpEnd - lpStart)) / sizeof(TCHAR);

  013db	8b 45 0c	 mov	 eax, DWORD PTR _lpEnd$[ebp]
  013de	2b 45 08	 sub	 eax, DWORD PTR _lpStart$[ebp]
  013e1	89 45 fc	 mov	 DWORD PTR _LEN$[ebp], eax

; 472  : 	LPTSTR psz = new TCHAR[LEN + 1];

  013e4	8b 4d fc	 mov	 ecx, DWORD PTR _LEN$[ebp]
  013e7	83 c1 01	 add	 ecx, 1
  013ea	51		 push	 ecx
  013eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  013f0	83 c4 04	 add	 esp, 4
  013f3	89 45 f4	 mov	 DWORD PTR $T56702[ebp], eax
  013f6	8b 55 f4	 mov	 edx, DWORD PTR $T56702[ebp]
  013f9	89 55 f8	 mov	 DWORD PTR _psz$[ebp], edx

; 473  : 	_tcsncpy(psz, lpStart, LEN);

  013fc	8b 45 fc	 mov	 eax, DWORD PTR _LEN$[ebp]
  013ff	50		 push	 eax
  01400	8b 4d 08	 mov	 ecx, DWORD PTR _lpStart$[ebp]
  01403	51		 push	 ecx
  01404	8b 55 f8	 mov	 edx, DWORD PTR _psz$[ebp]
  01407	52		 push	 edx
  01408	e8 00 00 00 00	 call	 __tcsncpy
  0140d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 	psz[LEN] = _T('\0');

  01410	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]
  01413	03 45 fc	 add	 eax, DWORD PTR _LEN$[ebp]
  01416	c6 00 00	 mov	 BYTE PTR [eax], 0

; 475  : 	return psz; // !!! Requires the caller to free this memory !!!

  01419	8b 45 f8	 mov	 eax, DWORD PTR _psz$[ebp]

; 476  : }

  0141c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0141f	3b ec		 cmp	 ebp, esp
  01421	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01426	8b e5		 mov	 esp, ebp
  01428	5d		 pop	 ebp
  01429	c3		 ret	 0
?__StrDupEx@YL_Ini@@KAPADPBD0@Z ENDP			; YL_Ini::__StrDupEx
_TEXT	ENDS
END
