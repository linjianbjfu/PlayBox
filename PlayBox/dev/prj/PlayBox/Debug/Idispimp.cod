; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\WebInteract\Idispimp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0P@CLMBAKJD@JSCall?5Error?3?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??0IDispatch@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIHTMLDocument2@@@ATL@@QBEPAUIHTMLDocument2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocSysString@?$ChTraitsCRT@D@ATL@@SAPA_WPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CImpIDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3IDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CImpIDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CImpIDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IUnknown@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@IDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCImpIDispatch@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AUIDispatch@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CImpIDispatch@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IDispatch@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CImpIDispatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
CONST	SEGMENT
$SG187197 DB	'calllhbox', 00H
	ORG $+2
$SG187212 DB	'.\src\module\WebInteract\Idispimp.cpp', 00H
$SG187274 DB	00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	??_R0?AUIDispatch@@@8				; IDispatch `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@IDispatch@@8			; IDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R4CImpIDispatch@@6B@				; CImpIDispatch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImpIDispatch@@@8			; CImpIDispatch `RTTI Type Descriptor'
PUBLIC	??_R3CImpIDispatch@@8				; CImpIDispatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImpIDispatch@@8				; CImpIDispatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CImpIDispatch@@8			; CImpIDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??0CImpIDispatch@@QAE@XZ			; CImpIDispatch::CImpIDispatch
PUBLIC	?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z ; CImpIDispatch::QueryInterface
PUBLIC	?AddRef@CImpIDispatch@@UAGKXZ			; CImpIDispatch::AddRef
PUBLIC	?Release@CImpIDispatch@@UAGKXZ			; CImpIDispatch::Release
PUBLIC	?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z	; CImpIDispatch::GetTypeInfoCount
PUBLIC	?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z ; CImpIDispatch::GetTypeInfo
PUBLIC	?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z ; CImpIDispatch::GetIDsOfNames
PUBLIC	?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z ; CImpIDispatch::Invoke
PUBLIC	??_7CImpIDispatch@@6B@				; CImpIDispatch::`vftable'
PUBLIC	??0IDispatch@@QAE@XZ				; IDispatch::IDispatch
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\webinteract\idispimp.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT ??_7CImpIDispatch@@6B@
CONST	SEGMENT
??_7CImpIDispatch@@6B@ DD FLAT:??_R4CImpIDispatch@@6B@	; CImpIDispatch::`vftable'
	DD	FLAT:?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CImpIDispatch@@UAGKXZ
	DD	FLAT:?Release@CImpIDispatch@@UAGKXZ
	DD	FLAT:?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z
	DD	FLAT:?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z
	DD	FLAT:?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z
	DD	FLAT:?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z
CONST	ENDS
;	COMDAT ??_R4CImpIDispatch@@6B@
rdata$r	SEGMENT
??_R4CImpIDispatch@@6B@ DD 00H				; CImpIDispatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImpIDispatch@@@8
	DD	FLAT:??_R3CImpIDispatch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImpIDispatch@@@8
_DATA	SEGMENT
??_R0?AVCImpIDispatch@@@8 DD FLAT:??_7type_info@@6B@	; CImpIDispatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImpIDispatch@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CImpIDispatch@@8
rdata$r	SEGMENT
??_R3CImpIDispatch@@8 DD 00H				; CImpIDispatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CImpIDispatch@@8
rdata$r	ENDS
;	COMDAT ??_R2CImpIDispatch@@8
rdata$r	SEGMENT
??_R2CImpIDispatch@@8 DD FLAT:??_R1A@?0A@A@CImpIDispatch@@8 ; CImpIDispatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@IDispatch@@8
	DD	FLAT:??_R1A@?0A@A@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CImpIDispatch@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CImpIDispatch@@8 DD FLAT:??_R0?AVCImpIDispatch@@@8 ; CImpIDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IDispatch@@8
rdata$r	SEGMENT
??_R1A@?0A@A@IDispatch@@8 DD FLAT:??_R0?AUIDispatch@@@8	; IDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AUIDispatch@@@8
_DATA	SEGMENT
??_R0?AUIDispatch@@@8 DD FLAT:??_7type_info@@6B@	; IDispatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIDispatch@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@A@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CImpIDispatch@@QAE@XZ PROC NEAR			; CImpIDispatch::CImpIDispatch
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IDispatch@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CImpIDispatch@@6B@

; 26   :     m_cRef = 0;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 27   : }

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??0CImpIDispatch@@QAE@XZ ENDP				; CImpIDispatch::CImpIDispatch
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0IDispatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDispatch@@QAE@XZ PROC NEAR				; IDispatch::IDispatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IDispatch@@QAE@XZ ENDP				; IDispatch::IDispatch
_TEXT	ENDS
PUBLIC	??1CImpIDispatch@@QAE@XZ			; CImpIDispatch::~CImpIDispatch
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImpIDispatch@@QAE@XZ PROC NEAR			; CImpIDispatch::~CImpIDispatch
; _this$ = ecx

; 30   : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	51		 push	 ecx
  00044	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0004b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CImpIDispatch@@6B@

; 31   : 	ASSERT( m_cRef == 0 );

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0005e	74 11		 je	 SHORT $L187210
  00060	6a 1f		 push	 31			; 0000001fH
  00062	68 00 00 00 00	 push	 OFFSET FLAT:$SG187212
  00067	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0006c	85 c0		 test	 eax, eax
  0006e	74 01		 je	 SHORT $L187210
  00070	cc		 int	 3
$L187210:

; 32   : }

  00071	83 c4 04	 add	 esp, 4
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
??1CImpIDispatch@@QAE@XZ ENDP				; CImpIDispatch::~CImpIDispatch
_TEXT	ENDS
PUBLIC	_==
EXTRN	_IID_IDispatch:BYTE
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CImpIDispatch::QueryInterface

; 45   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	56		 push	 esi

; 46   :     *ppv = NULL;

  00084	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 47   : 
; 48   : 
; 49   :     if ( IID_IDispatch == riid )

  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  00090	51		 push	 ecx
  00091	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDispatch
  00096	e8 00 00 00 00	 call	 _==
  0009b	83 c4 08	 add	 esp, 8
  0009e	85 c0		 test	 eax, eax
  000a0	74 08		 je	 SHORT $L187218

; 50   : 	{
; 51   :         *ppv = this;

  000a2	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000a5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	89 02		 mov	 DWORD PTR [edx], eax
$L187218:

; 52   : 	}
; 53   : 	
; 54   : 	if ( NULL != *ppv )

  000aa	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  000ad	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000b0	74 1d		 je	 SHORT $L187219

; 55   :     {
; 56   :         ((LPUNKNOWN)*ppv)->AddRef();

  000b2	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000b5	8b 02		 mov	 eax, DWORD PTR [edx]
  000b7	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
  000be	8b f4		 mov	 esi, esp
  000c0	52		 push	 edx
  000c1	ff 50 04	 call	 DWORD PTR [eax+4]
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 57   :         return NOERROR;

  000cb	33 c0		 xor	 eax, eax
  000cd	eb 05		 jmp	 SHORT $L187217
$L187219:

; 58   :     }
; 59   : 
; 60   : 	return E_NOINTERFACE;

  000cf	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
$L187217:

; 61   : }

  000d4	5e		 pop	 esi
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z ENDP ; CImpIDispatch::QueryInterface
; Function compile flags: /Odt /RTCsu
_this$ = 8						; size = 4
?AddRef@CImpIDispatch@@UAGKXZ PROC NEAR			; CImpIDispatch::AddRef

; 65   : {

  000e0	55		 push	 ebp
  000e1	8b ec		 mov	 ebp, esp

; 66   :     return ++m_cRef;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e9	83 c1 01	 add	 ecx, 1
  000ec	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000f2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 67   : }

  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
?AddRef@CImpIDispatch@@UAGKXZ ENDP			; CImpIDispatch::AddRef
; Function compile flags: /Odt /RTCsu
_this$ = 8						; size = 4
?Release@CImpIDispatch@@UAGKXZ PROC NEAR		; CImpIDispatch::Release

; 70   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp

; 71   :     return --m_cRef;

  00103	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00109	83 e9 01	 sub	 ecx, 1
  0010c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0010f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00112	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00115	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 72   : }

  00118	5d		 pop	 ebp
  00119	c2 04 00	 ret	 4
?Release@CImpIDispatch@@UAGKXZ ENDP			; CImpIDispatch::Release
; Function compile flags: /Odt /RTCsu
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z PROC NEAR	; CImpIDispatch::GetTypeInfoCount

; 77   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp

; 78   : 	return E_NOTIMPL;

  00123	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 79   : }

  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z ENDP		; CImpIDispatch::GetTypeInfoCount
; Function compile flags: /Odt /RTCsu
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z PROC NEAR ; CImpIDispatch::GetTypeInfo

; 85   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp

; 86   : 	return E_NOTIMPL;

  00133	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 87   : }

  00138	5d		 pop	 ebp
  00139	c2 10 00	 ret	 16			; 00000010H
?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z ENDP ; CImpIDispatch::GetTypeInfo
_TEXT	ENDS
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_cszName$187255 = -16					; size = 4
_i$ = -8						; size = 4
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_rgszNames$ = 16					; size = 4
_cNames$ = 20						; size = 4
_lcid$ = 24						; size = 4
_rgDispId$ = 28						; size = 4
?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z PROC NEAR ; CImpIDispatch::GetIDsOfNames

; 95   : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	83 ec 14	 sub	 esp, 20			; 00000014H
  00146	56		 push	 esi
  00147	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0014c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0014f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00152	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00155	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00158	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 96   : 	HRESULT hr;
; 97   : 	UINT	i;
; 98   : 
; 99   : 	// Assume some degree of success
; 100  : 	hr = NOERROR;

  0015b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 101  : 
; 102  : 	for ( i=0; i < cNames; i++) {

  00162	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00169	eb 09		 jmp	 SHORT $L187252
$L187253:
  0016b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0016e	83 c0 01	 add	 eax, 1
  00171	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L187252:
  00174	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00177	3b 4d 14	 cmp	 ecx, DWORD PTR _cNames$[ebp]
  0017a	73 6b		 jae	 SHORT $L187254

; 103  : 		CString cszName  = CString(rgszNames[i]);

  0017c	8b f4		 mov	 esi, esp
  0017e	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00181	8b 45 10	 mov	 eax, DWORD PTR _rgszNames$[ebp]
  00184	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00187	51		 push	 ecx
  00188	8d 4d f0	 lea	 ecx, DWORD PTR _cszName$187255[ebp]
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 104  : 
; 105  : 		if(cszName == cszCB_CallLhBox)

  00198	68 00 00 00 00	 push	 OFFSET FLAT:?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
  0019d	8d 55 f0	 lea	 edx, DWORD PTR _cszName$187255[ebp]
  001a0	52		 push	 edx
  001a1	e8 00 00 00 00	 call	 ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
  001a6	83 c4 08	 add	 esp, 8
  001a9	0f b6 c0	 movzx	 eax, al
  001ac	85 c0		 test	 eax, eax
  001ae	74 0f		 je	 SHORT $L187257

; 106  : 		{
; 107  : 			rgDispId[i] = DISPID_CB_calllhbox;

  001b0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001b3	8b 55 1c	 mov	 edx, DWORD PTR _rgDispId$[ebp]
  001b6	c7 04 8a 01 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 1

; 108  : 		}		
; 109  : 		else {

  001bd	eb 14		 jmp	 SHORT $L187258
$L187257:

; 110  : 			// One or more are unknown so set the return code accordingly
; 111  : 			hr = ResultFromScode(DISP_E_UNKNOWNNAME);

  001bf	c7 45 fc 06 00
	02 80		 mov	 DWORD PTR _hr$[ebp], -2147352570 ; 80020006H

; 112  : 			rgDispId[i] = DISPID_UNKNOWN;

  001c6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001c9	8b 4d 1c	 mov	 ecx, DWORD PTR _rgDispId$[ebp]
  001cc	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [ecx+eax*4], -1
$L187258:

; 113  : 		}
; 114  : 	}

  001d3	8b f4		 mov	 esi, esp
  001d5	8d 4d f0	 lea	 ecx, DWORD PTR _cszName$187255[ebp]
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001de	3b f4		 cmp	 esi, esp
  001e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e5	eb 84		 jmp	 SHORT $L187253
$L187254:

; 115  : 	return hr;

  001e7	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 116  : }

  001ea	52		 push	 edx
  001eb	8b cd		 mov	 ecx, ebp
  001ed	50		 push	 eax
  001ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187862
  001f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f9	58		 pop	 eax
  001fa	5a		 pop	 edx
  001fb	5e		 pop	 esi
  001fc	83 c4 14	 add	 esp, 20			; 00000014H
  001ff	3b ec		 cmp	 ebp, esp
  00201	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c2 18 00	 ret	 24			; 00000018H
$L187862:
  0020c	01 00 00 00	 DD	 1
  00210	00 00 00 00	 DD	 $L187861
$L187861:
  00214	f0 ff ff ff	 DD	 -16			; fffffff0H
  00218	04 00 00 00	 DD	 4
  0021c	00 00 00 00	 DD	 $L187860
$L187860:
  00220	63		 DB	 99			; 00000063H
  00221	73		 DB	 115			; 00000073H
  00222	7a		 DB	 122			; 0000007aH
  00223	4e		 DB	 78			; 0000004eH
  00224	61		 DB	 97			; 00000061H
  00225	6d		 DB	 109			; 0000006dH
  00226	65		 DB	 101			; 00000065H
  00227	00		 DB	 0
?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z ENDP ; CImpIDispatch::GetIDsOfNames
_TEXT	ENDS
PUBLIC	_IsEqualGUID
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC NEAR					; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID
  00010	83 c4 08	 add	 esp, 8

; 195  : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC NEAR					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 162  : }

  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
EXTRN	__imp_?AllocSysString@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPA_WXZ:NEAR
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	?GetInstance@CWebManager@@SAPAV1@XZ:NEAR	; CWebManager::GetInstance
EXTRN	?CallGBoxFromWeb@CWebManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:NEAR ; CWebManager::CallGBoxFromWeb
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
EXTRN	__imp__VariantInit@4:NEAR
xdata$x	SEGMENT
$T187888 DD	0ffffffffH
	DD	FLAT:$L187871
	DD	00H
	DD	FLAT:$L187872
	DD	01H
	DD	FLAT:$L187873
	DD	00H
	DD	FLAT:$L187874
$T187878 DD	019930520H
	DD	04H
	DD	FLAT:$T187888
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\webinteract\idispimp.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -116						; size = 4
tv147 = -112						; size = 4
tv138 = -108						; size = 4
tv144 = -104						; size = 4
$T187870 = -100						; size = 4
$T187869 = -96						; size = 4
$T187868 = -92						; size = 28
_cszArg1$187276 = -60					; size = 4
_strRes$187273 = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_this$ = 8						; size = 4
_dispIdMember$ = 12					; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
_wFlags$ = 24						; size = 2
_pDispParams$ = 28					; size = 4
_pVarResult$ = 32					; size = 4
___formal$ = 36						; size = 4
_puArgErr$ = 40						; size = 4
?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z PROC NEAR ; CImpIDispatch::Invoke

; 127  : {	

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	6a ff		 push	 -1
  00235	68 00 00 00 00	 push	 __ehhandler$?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z
  0023a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00240	50		 push	 eax
  00241	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00248	83 ec 68	 sub	 esp, 104		; 00000068H
  0024b	56		 push	 esi
  0024c	57		 push	 edi
  0024d	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00250	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00255	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0025a	f3 ab		 rep stosd
  0025c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00261	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 128  : 	
; 129  : 	if(dispIdMember == DISPID_CB_calllhbox) 

  00264	83 7d 0c 01	 cmp	 DWORD PTR _dispIdMember$[ebp], 1
  00268	0f 85 88 01 00
	00		 jne	 $L187272

; 130  : 	{
; 131  : 		string strRes = "";

  0026e	8b f4		 mov	 esi, esp
  00270	68 00 00 00 00	 push	 OFFSET FLAT:$SG187274
  00275	8d 4d d0	 lea	 ecx, DWORD PTR _strRes$187273[ebp]
  00278	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0027e	3b f4		 cmp	 esi, esp
  00280	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00285	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 132  : 		if ( wFlags & DISPATCH_METHOD )

  0028c	0f b7 45 18	 movzx	 eax, WORD PTR _wFlags$[ebp]
  00290	83 e0 01	 and	 eax, 1
  00293	0f 84 91 00 00
	00		 je	 $L187275

; 133  : 		{	
; 134  : 			CString cszArg1= (CString)pDispParams->rgvarg[0].bstrVal; // in case you want a CString copy			

  00299	8b 4d 1c	 mov	 ecx, DWORD PTR _pDispParams$[ebp]
  0029c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029e	8b f4		 mov	 esi, esp
  002a0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002a3	50		 push	 eax
  002a4	8d 4d c4	 lea	 ecx, DWORD PTR _cszArg1$187276[ebp]
  002a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z
  002ad	3b f4		 cmp	 esi, esp
  002af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 135  : 			CWebManager::GetInstance()->CallGBoxFromWeb(string(cszArg1),strRes);

  002b8	8b f4		 mov	 esi, esp
  002ba	8d 4d c4	 lea	 ecx, DWORD PTR _cszArg1$187276[ebp]
  002bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002c3	3b f4		 cmp	 esi, esp
  002c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ca	8b f4		 mov	 esi, esp
  002cc	50		 push	 eax
  002cd	8d 4d a4	 lea	 ecx, DWORD PTR $T187868[ebp]
  002d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  002d6	3b f4		 cmp	 esi, esp
  002d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002dd	89 45 98	 mov	 DWORD PTR tv144[ebp], eax
  002e0	8b 4d 98	 mov	 ecx, DWORD PTR tv144[ebp]
  002e3	89 4d 94	 mov	 DWORD PTR tv138[ebp], ecx
  002e6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002ea	8d 55 d0	 lea	 edx, DWORD PTR _strRes$187273[ebp]
  002ed	52		 push	 edx
  002ee	8b 45 94	 mov	 eax, DWORD PTR tv138[ebp]
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ?GetInstance@CWebManager@@SAPAV1@XZ ; CWebManager::GetInstance
  002f7	8b c8		 mov	 ecx, eax
  002f9	e8 00 00 00 00	 call	 ?CallGBoxFromWeb@CWebManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CWebManager::CallGBoxFromWeb
  002fe	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00302	8b f4		 mov	 esi, esp
  00304	8d 4d a4	 lea	 ecx, DWORD PTR $T187868[ebp]
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0030d	3b f4		 cmp	 esi, esp
  0030f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  : 		}

  00314	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00318	8b f4		 mov	 esi, esp
  0031a	8d 4d c4	 lea	 ecx, DWORD PTR _cszArg1$187276[ebp]
  0031d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00323	3b f4		 cmp	 esi, esp
  00325	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187275:

; 137  : 
; 138  : 		if(wFlags & DISPATCH_PROPERTYGET)

  0032a	0f b7 4d 18	 movzx	 ecx, WORD PTR _wFlags$[ebp]
  0032e	83 e1 02	 and	 ecx, 2
  00331	0f 84 a6 00 00
	00		 je	 $L187280

; 139  : 		{
; 140  : 			if(pVarResult != NULL)

  00337	83 7d 20 00	 cmp	 DWORD PTR _pVarResult$[ebp], 0
  0033b	74 7b		 je	 SHORT $L187281

; 141  : 			{
; 142  : 				VariantInit(pVarResult);

  0033d	8b f4		 mov	 esi, esp
  0033f	8b 55 20	 mov	 edx, DWORD PTR _pVarResult$[ebp]
  00342	52		 push	 edx
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantInit@4
  00349	3b f4		 cmp	 esi, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 143  : 				V_VT(pVarResult)=VT_BSTR;

  00350	8b 45 20	 mov	 eax, DWORD PTR _pVarResult$[ebp]
  00353	66 c7 00 08 00	 mov	 WORD PTR [eax], 8

; 144  : 				//				V_BOOL(pVarResult) = false;
; 145  : 				pVarResult->bstrVal = CString(strRes.c_str()).AllocSysString();

  00358	8b f4		 mov	 esi, esp
  0035a	8d 4d d0	 lea	 ecx, DWORD PTR _strRes$187273[ebp]
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00363	3b f4		 cmp	 esi, esp
  00365	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036a	8b f4		 mov	 esi, esp
  0036c	50		 push	 eax
  0036d	8d 4d a0	 lea	 ecx, DWORD PTR $T187869[ebp]
  00370	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00376	3b f4		 cmp	 esi, esp
  00378	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037d	89 45 90	 mov	 DWORD PTR tv147[ebp], eax
  00380	8b 4d 90	 mov	 ecx, DWORD PTR tv147[ebp]
  00383	89 4d 8c	 mov	 DWORD PTR tv140[ebp], ecx
  00386	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0038a	8b f4		 mov	 esi, esp
  0038c	8b 4d 8c	 mov	 ecx, DWORD PTR tv140[ebp]
  0038f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AllocSysString@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPA_WXZ
  00395	3b f4		 cmp	 esi, esp
  00397	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039c	8b 55 20	 mov	 edx, DWORD PTR _pVarResult$[ebp]
  0039f	89 42 08	 mov	 DWORD PTR [edx+8], eax
  003a2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003a6	8b f4		 mov	 esi, esp
  003a8	8d 4d a0	 lea	 ecx, DWORD PTR $T187869[ebp]
  003ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  003b1	3b f4		 cmp	 esi, esp
  003b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187281:

; 146  : 			}
; 147  : 			return 1;

  003b8	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR $T187870[ebp], 1
  003bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c6	8b f4		 mov	 esi, esp
  003c8	8d 4d d0	 lea	 ecx, DWORD PTR _strRes$187273[ebp]
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	8b 45 9c	 mov	 eax, DWORD PTR $T187870[ebp]
  003db	eb 1b		 jmp	 SHORT $L187271
$L187280:

; 148  : 		}	
; 149  : 	}

  003dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003e4	8b f4		 mov	 esi, esp
  003e6	8d 4d d0	 lea	 ecx, DWORD PTR _strRes$187273[ebp]
  003e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  003ef	3b f4		 cmp	 esi, esp
  003f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187272:

; 150  :  	return S_OK;

  003f6	33 c0		 xor	 eax, eax
$L187271:

; 151  : }

  003f8	52		 push	 edx
  003f9	8b cd		 mov	 ecx, ebp
  003fb	50		 push	 eax
  003fc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187886
  00402	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00407	58		 pop	 eax
  00408	5a		 pop	 edx
  00409	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0040c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00413	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00416	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041b	5f		 pop	 edi
  0041c	5e		 pop	 esi
  0041d	83 c4 74	 add	 esp, 116		; 00000074H
  00420	3b ec		 cmp	 ebp, esp
  00422	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00427	8b e5		 mov	 esp, ebp
  00429	5d		 pop	 ebp
  0042a	c2 24 00	 ret	 36			; 00000024H
$L187886:
  0042d	02 00 00 00	 DD	 2
  00431	00 00 00 00	 DD	 $L187885
$L187885:
  00435	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00439	1c 00 00 00	 DD	 28			; 0000001cH
  0043d	00 00 00 00	 DD	 $L187879
  00441	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00445	04 00 00 00	 DD	 4
  00449	00 00 00 00	 DD	 $L187880
$L187880:
  0044d	63		 DB	 99			; 00000063H
  0044e	73		 DB	 115			; 00000073H
  0044f	7a		 DB	 122			; 0000007aH
  00450	41		 DB	 65			; 00000041H
  00451	72		 DB	 114			; 00000072H
  00452	67		 DB	 103			; 00000067H
  00453	31		 DB	 49			; 00000031H
  00454	00		 DB	 0
$L187879:
  00455	73		 DB	 115			; 00000073H
  00456	74		 DB	 116			; 00000074H
  00457	72		 DB	 114			; 00000072H
  00458	52		 DB	 82			; 00000052H
  00459	65		 DB	 101			; 00000065H
  0045a	73		 DB	 115			; 00000073H
  0045b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L187871:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d0	 lea	 ecx, DWORD PTR _strRes$187273[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L187872:
  00012	8b f4		 mov	 esi, esp
  00014	8d 4d c4	 lea	 ecx, DWORD PTR _cszArg1$187276[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L187873:
  00024	8b f4		 mov	 esi, esp
  00026	8d 4d a4	 lea	 ecx, DWORD PTR $T187868[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002f	3b f4		 cmp	 esi, esp
  00031	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L187874:
  00036	8b f4		 mov	 esi, esp
  00038	8d 4d a0	 lea	 ecx, DWORD PTR $T187869[ebp]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00041	3b f4		 cmp	 esi, esp
  00043	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z:
  00048	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T187878
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z ENDP ; CImpIDispatch::Invoke
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z PROC NEAR ; ATL::operator==, COMDAT

; 2081 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2082 : 		return( str1.Compare( str2 ) == 0 );

  00004	8b f4		 mov	 esi, esp
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _str2$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0000f	3b f4		 cmp	 esi, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	8b f4		 mov	 esi, esp
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _str1$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	f7 d8		 neg	 eax
  0002b	1b c0		 sbb	 eax, eax
  0002d	40		 inc	 eax

; 2083 : 	}

  0002e	5e		 pop	 esi
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ENDP ; ATL::operator==
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00011	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00025	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0002f	8b f4		 mov	 esi, esp
  00031	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00045	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0004c	75 15		 jne	 SHORT $L24163
  0004e	83 bd 68 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00055	72 0c		 jb	 SHORT $L24163

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00057	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00061	eb 0a		 jmp	 SHORT $L24164
$L24163:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00063	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24164:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0006d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00079	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  0007e	8b f4		 mov	 esi, esp
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187896
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$L187896:
  000b9	01 00 00 00	 DD	 1
  000bd	00 00 00 00	 DD	 $L187895
$L187895:
  000c1	64 ff ff ff	 DD	 -156			; ffffff64H
  000c5	94 00 00 00	 DD	 148			; 00000094H
  000c9	00 00 00 00	 DD	 $L187893
$L187893:
  000cd	76		 DB	 118			; 00000076H
  000ce	65		 DB	 101			; 00000065H
  000cf	72		 DB	 114			; 00000072H
  000d0	00		 DB	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24151 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	89 45 f4	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00045	8b f4		 mov	 esi, esp
  00047	6a 07		 push	 7
  00049	8d 45 e8	 lea	 eax, DWORD PTR _szACP$[ebp]
  0004c	50		 push	 eax
  0004d	68 04 10 00 00	 push	 4100			; 00001004H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  00055	51		 push	 ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	74 34		 je	 SHORT $L24150

; 111  : 	{
; 112  : 		char* pch = szACP;

  00067	8d 55 e8	 lea	 edx, DWORD PTR _szACP$[ebp]
  0006a	89 55 e0	 mov	 DWORD PTR _pch$24151[ebp], edx
$L24153:

; 113  : 		while (*pch != '\0')

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00070	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00073	85 c9		 test	 ecx, ecx
  00075	74 24		 je	 SHORT $L24150

; 114  : 		{
; 115  : 			nACP *= 10;

  00077	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  0007a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0007d	89 55 f8	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00080	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  00089	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0008d	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _pch$24151[ebp]
  00093	83 c1 01	 add	 ecx, 1
  00096	89 4d e0	 mov	 DWORD PTR _pch$24151[ebp], ecx

; 117  : 		}

  00099	eb d2		 jmp	 SHORT $L24153
$L24150:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0009f	75 12		 jne	 SHORT $L24155

; 121  : 		nACP = ::GetACP();

  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
$L24155:

; 122  : 
; 123  : 	return nACP;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L187903
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	5e		 pop	 esi
  000d0	83 c4 20	 add	 esp, 32			; 00000020H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$L187903:
  000de	01 00 00 00	 DD	 1
  000e2	00 00 00 00	 DD	 $L187902
$L187902:
  000e6	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ea	07 00 00 00	 DD	 7
  000ee	00 00 00 00	 DD	 $L187900
$L187900:
  000f2	73		 DB	 115			; 00000073H
  000f3	7a		 DB	 122			; 0000007aH
  000f4	41		 DB	 65			; 00000041H
  000f5	43		 DB	 67			; 00000043H
  000f6	50		 DB	 80			; 00000050H
  000f7	00		 DB	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S7	DD	FLAT:_$E5
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\webinteract\idispimp.cpp
CRT$XCU	ENDS
;	COMDAT _$E5
text$yc	SEGMENT
_$E5	PROC NEAR					; COMDAT

; 12   : CString cszCB_CallLhBox = "calllhbox";

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	68 00 00 00 00	 push	 OFFSET FLAT:$SG187197
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00016	3b f4		 cmp	 esi, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00022	e8 00 00 00 00	 call	 _atexit
  00027	83 c4 04	 add	 esp, 4
  0002a	5e		 pop	 esi
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_$E5	ENDP
; Function compile flags: /Odt /RTCsu
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00011	3b f4		 cmp	 esi, esp
  00013	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00018	5e		 pop	 esi
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_$E6	ENDP
text$yd	ENDS
PUBLIC	?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
_BSS	SEGMENT
?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A DD 01H DUP (?) ; cszCB_CallLhBox
_BSS	ENDS
END
