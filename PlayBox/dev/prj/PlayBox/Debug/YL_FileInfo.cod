; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	\boxgit\PlayBox\CommonLib\common\YL_FileInfo.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0FG@EOHGAEB@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IH@HPGJLCCK@?3Jan?3January?3Feb?3February?3Mar?3Ma@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@HHDGIIFB@0123456789abcdefABCDEF?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EM@KKHJFHNK@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_exception@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_exception@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1domain_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gdomain_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1overflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Goverflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1underflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gunderflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1range_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Grange_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_DebugHeapString@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocbyte@_W@std@@YAD_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$codecvt@_WDH@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_DebugHeapAllocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$_DebugHeapAllocator@D@std@@@std@@IAE@V?$_DebugHeapAllocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Getloctxt@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Getloctxt@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@YAHAAV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0IPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?8_WU?$char_traits@_W@std@@@std@@YA_NABV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocbyte@D@std@@YADDABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?9_WU?$char_traits@_W@std@@@std@@YA_NABV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@codecvt_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@_WDH@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@exception@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@A@?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4underflow_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3overflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4overflow_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4domain_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R2bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4invalid_argument@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$codecvt@_WDH@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4range_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@runtime_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4bad_exception@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@bad_exception@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2underflow_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3range_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7underflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7overflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Stz@?$fpos@H@std@@0HA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$codecvt@_WDH@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_exception@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7range_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7domain_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R2invalid_argument@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@_WDH@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@length_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@domain_error@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
CONST	SEGMENT
$SG65180 DB	'\', 00H
	ORG $+2
$SG65200 DB	'\', 00H
	ORG $+2
$SG65204 DB	'.', 00H
	ORG $+2
$SG65224 DB	'.', 00H
$SG65226 DB	00H
$SG65229 DB	00H
$SG65248 DB	'\', 00H
$SG65256 DB	00H
	ORG $+1
$SG65258 DB	'r', 00H
	ORG $+2
$SG65269 DB	'w', 00H
CONST	ENDS
PUBLIC	?IsValid@YL_FileInfo@@SA_NPBD@Z			; YL_FileInfo::IsValid
PUBLIC	?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\commonlib\common\yl_fileinfo.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
xdata$x	SEGMENT
$T69426	DD	0ffffffffH
	DD	FLAT:$L69418
$T69422	DD	019930520H
	DD	01H
	DD	FLAT:$T69426
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -52						; size = 4
tv74 = -48						; size = 4
$T69411 = -44						; size = 28
$T69410 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszFilePath$ = 8					; size = 4
?IsValid@YL_FileInfo@@SA_NPBD@Z PROC NEAR		; YL_FileInfo::IsValid

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsValid@YL_FileInfo@@SA_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 11   : 	if( pszFilePath == NULL )

  0002c	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  00030	75 04		 jne	 SHORT $L65092

; 12   : 	{
; 13   : 		return false;

  00032	32 c0		 xor	 al, al
  00034	eb 51		 jmp	 SHORT $L65091
$L65092:

; 14   : 	}
; 15   : 	return IsValid(string(pszFilePath));

  00036	8b f4		 mov	 esi, esp
  00038	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d d4	 lea	 ecx, DWORD PTR $T69411[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	89 45 d0	 mov	 DWORD PTR tv74[ebp], eax
  0004f	8b 4d d0	 mov	 ecx, DWORD PTR tv74[ebp]
  00052	89 4d cc	 mov	 DWORD PTR tv73[ebp], ecx
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	8b 55 cc	 mov	 edx, DWORD PTR tv73[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  00065	83 c4 04	 add	 esp, 4
  00068	88 45 f3	 mov	 BYTE PTR $T69410[ebp], al
  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b f4		 mov	 esi, esp
  00074	8d 4d d4	 lea	 ecx, DWORD PTR $T69411[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8a 45 f3	 mov	 al, BYTE PTR $T69410[ebp]
$L65091:

; 16   : }

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 34	 add	 esp, 52			; 00000034H
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69418:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d4	 lea	 ecx, DWORD PTR $T69411[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?IsValid@YL_FileInfo@@SA_NPBD@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69422
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IsValid@YL_FileInfo@@SA_NPBD@Z ENDP			; YL_FileInfo::IsValid
EXTRN	__imp___stat64:NEAR
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	@_RTC_CheckStackVars@8:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_m_buf$ = -60						; size = 56
_strFilePath$ = 8					; size = 4
?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; YL_FileInfo::IsValid

; 19   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp
  000b3	83 ec 40	 sub	 esp, 64			; 00000040H
  000b6	56		 push	 esi
  000b7	57		 push	 edi
  000b8	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  000bb	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000c0	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  000c5	f3 ab		 rep stosd

; 20   : 	struct __stat64 m_buf;
; 21   : 	return !_stat64( strFilePath.c_str(), &m_buf );

  000c7	8b f4		 mov	 esi, esp
  000c9	8d 45 c4	 lea	 eax, DWORD PTR _m_buf$[ebp]
  000cc	50		 push	 eax
  000cd	8b fc		 mov	 edi, esp
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  000d8	3b fc		 cmp	 edi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	50		 push	 eax
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stat64
  000e6	83 c4 08	 add	 esp, 8
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	f7 d8		 neg	 eax
  000f2	1b c0		 sbb	 eax, eax
  000f4	40		 inc	 eax

; 22   : }

  000f5	52		 push	 edx
  000f6	8b cd		 mov	 ecx, ebp
  000f8	50		 push	 eax
  000f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69431
  000ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00104	58		 pop	 eax
  00105	5a		 pop	 edx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	83 c4 40	 add	 esp, 64			; 00000040H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$L69431:
  00116	01 00 00 00	 DD	 1
  0011a	00 00 00 00	 DD	 $L69430
$L69430:
  0011e	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00122	38 00 00 00	 DD	 56			; 00000038H
  00126	00 00 00 00	 DD	 $L69429
$L69429:
  0012a	6d		 DB	 109			; 0000006dH
  0012b	5f		 DB	 95			; 0000005fH
  0012c	62		 DB	 98			; 00000062H
  0012d	75		 DB	 117			; 00000075H
  0012e	66		 DB	 102			; 00000066H
  0012f	00		 DB	 0
?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; YL_FileInfo::IsValid
_TEXT	ENDS
PUBLIC	?IsDirectory@YL_FileInfo@@SA_NPBD@Z		; YL_FileInfo::IsDirectory
PUBLIC	?IsDirectory@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsDirectory
xdata$x	SEGMENT
$T69440	DD	0ffffffffH
	DD	FLAT:$L69436
$T69438	DD	019930520H
	DD	01H
	DD	FLAT:$T69440
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -52						; size = 4
tv74 = -48						; size = 4
$T69435 = -44						; size = 28
$T69434 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszFilePath$ = 8					; size = 4
?IsDirectory@YL_FileInfo@@SA_NPBD@Z PROC NEAR		; YL_FileInfo::IsDirectory

; 25   : {

  00130	55		 push	 ebp
  00131	8b ec		 mov	 ebp, esp
  00133	6a ff		 push	 -1
  00135	68 00 00 00 00	 push	 __ehhandler$?IsDirectory@YL_FileInfo@@SA_NPBD@Z
  0013a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00140	50		 push	 eax
  00141	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00148	83 ec 28	 sub	 esp, 40			; 00000028H
  0014b	56		 push	 esi
  0014c	57		 push	 edi
  0014d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00150	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00155	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0015a	f3 ab		 rep stosd

; 26   : 	if( pszFilePath == NULL )

  0015c	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  00160	75 04		 jne	 SHORT $L65102

; 27   : 	{
; 28   : 		return false;

  00162	32 c0		 xor	 al, al
  00164	eb 51		 jmp	 SHORT $L65101
$L65102:

; 29   : 	}	
; 30   : 	return IsDirectory(string(pszFilePath));

  00166	8b f4		 mov	 esi, esp
  00168	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  0016b	50		 push	 eax
  0016c	8d 4d d4	 lea	 ecx, DWORD PTR $T69435[ebp]
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00175	3b f4		 cmp	 esi, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017c	89 45 d0	 mov	 DWORD PTR tv74[ebp], eax
  0017f	8b 4d d0	 mov	 ecx, DWORD PTR tv74[ebp]
  00182	89 4d cc	 mov	 DWORD PTR tv73[ebp], ecx
  00185	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0018c	8b 55 cc	 mov	 edx, DWORD PTR tv73[ebp]
  0018f	52		 push	 edx
  00190	e8 00 00 00 00	 call	 ?IsDirectory@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsDirectory
  00195	83 c4 04	 add	 esp, 4
  00198	88 45 f3	 mov	 BYTE PTR $T69434[ebp], al
  0019b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a2	8b f4		 mov	 esi, esp
  001a4	8d 4d d4	 lea	 ecx, DWORD PTR $T69435[ebp]
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001ad	3b f4		 cmp	 esi, esp
  001af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b4	8a 45 f3	 mov	 al, BYTE PTR $T69434[ebp]
$L65101:

; 31   : }

  001b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	83 c4 34	 add	 esp, 52			; 00000034H
  001c6	3b ec		 cmp	 ebp, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	8b e5		 mov	 esp, ebp
  001cf	5d		 pop	 ebp
  001d0	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69436:
  0001c	8b f4		 mov	 esi, esp
  0001e	8d 4d d4	 lea	 ecx, DWORD PTR $T69435[ebp]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00027	3b f4		 cmp	 esi, esp
  00029	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?IsDirectory@YL_FileInfo@@SA_NPBD@Z:
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69438
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IsDirectory@YL_FileInfo@@SA_NPBD@Z ENDP		; YL_FileInfo::IsDirectory
EXTRN	__imp__GetFileAttributesA@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv71 = -8						; size = 4
_m_dwFileAttr$ = -4					; size = 4
_strFilePath$ = 8					; size = 4
?IsDirectory@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; YL_FileInfo::IsDirectory

; 34   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 08	 sub	 esp, 8
  001e6	56		 push	 esi
  001e7	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  001ee	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 35   : 	DWORD  m_dwFileAttr = ::GetFileAttributes( strFilePath.c_str() );

  001f5	8b f4		 mov	 esi, esp
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00200	3b f4		 cmp	 esi, esp
  00202	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00207	8b f4		 mov	 esi, esp
  00209	50		 push	 eax
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4
  00210	3b f4		 cmp	 esi, esp
  00212	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00217	89 45 fc	 mov	 DWORD PTR _m_dwFileAttr$[ebp], eax

; 36   : 	return m_dwFileAttr != INVALID_FILE_ATTRIBUTES && (m_dwFileAttr & FILE_ATTRIBUTE_DIRECTORY) > 0 ;

  0021a	83 7d fc ff	 cmp	 DWORD PTR _m_dwFileAttr$[ebp], -1
  0021e	74 11		 je	 SHORT $L69442
  00220	8b 45 fc	 mov	 eax, DWORD PTR _m_dwFileAttr$[ebp]
  00223	83 e0 10	 and	 eax, 16			; 00000010H
  00226	76 09		 jbe	 SHORT $L69442
  00228	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0022f	eb 07		 jmp	 SHORT $L69443
$L69442:
  00231	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L69443:
  00238	8a 45 f8	 mov	 al, BYTE PTR tv71[ebp]

; 37   : }

  0023b	5e		 pop	 esi
  0023c	83 c4 08	 add	 esp, 8
  0023f	3b ec		 cmp	 ebp, esp
  00241	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
?IsDirectory@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; YL_FileInfo::IsDirectory
_TEXT	ENDS
PUBLIC	?IsAttrSystem@YL_FileInfo@@SA_NPBD@Z		; YL_FileInfo::IsAttrSystem
PUBLIC	?IsAttrSystem@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsAttrSystem
xdata$x	SEGMENT
$T69451	DD	0ffffffffH
	DD	FLAT:$L69447
$T69449	DD	019930520H
	DD	01H
	DD	FLAT:$T69451
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -52						; size = 4
tv74 = -48						; size = 4
$T69446 = -44						; size = 28
$T69445 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszFilePath$ = 8					; size = 4
?IsAttrSystem@YL_FileInfo@@SA_NPBD@Z PROC NEAR		; YL_FileInfo::IsAttrSystem

; 40   : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	6a ff		 push	 -1
  00255	68 00 00 00 00	 push	 __ehhandler$?IsAttrSystem@YL_FileInfo@@SA_NPBD@Z
  0025a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00260	50		 push	 eax
  00261	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00268	83 ec 28	 sub	 esp, 40			; 00000028H
  0026b	56		 push	 esi
  0026c	57		 push	 edi
  0026d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00270	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00275	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0027a	f3 ab		 rep stosd

; 41   : 	if( pszFilePath == NULL )

  0027c	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  00280	75 04		 jne	 SHORT $L65113

; 42   : 	{
; 43   : 		return false;

  00282	32 c0		 xor	 al, al
  00284	eb 51		 jmp	 SHORT $L65112
$L65113:

; 44   : 	}
; 45   : 	return IsAttrSystem(string(pszFilePath));

  00286	8b f4		 mov	 esi, esp
  00288	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  0028b	50		 push	 eax
  0028c	8d 4d d4	 lea	 ecx, DWORD PTR $T69446[ebp]
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00295	3b f4		 cmp	 esi, esp
  00297	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029c	89 45 d0	 mov	 DWORD PTR tv74[ebp], eax
  0029f	8b 4d d0	 mov	 ecx, DWORD PTR tv74[ebp]
  002a2	89 4d cc	 mov	 DWORD PTR tv73[ebp], ecx
  002a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  002ac	8b 55 cc	 mov	 edx, DWORD PTR tv73[ebp]
  002af	52		 push	 edx
  002b0	e8 00 00 00 00	 call	 ?IsAttrSystem@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsAttrSystem
  002b5	83 c4 04	 add	 esp, 4
  002b8	88 45 f3	 mov	 BYTE PTR $T69445[ebp], al
  002bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002c2	8b f4		 mov	 esi, esp
  002c4	8d 4d d4	 lea	 ecx, DWORD PTR $T69446[ebp]
  002c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002cd	3b f4		 cmp	 esi, esp
  002cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d4	8a 45 f3	 mov	 al, BYTE PTR $T69445[ebp]
$L65112:

; 46   : }

  002d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	83 c4 34	 add	 esp, 52			; 00000034H
  002e6	3b ec		 cmp	 ebp, esp
  002e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ed	8b e5		 mov	 esp, ebp
  002ef	5d		 pop	 ebp
  002f0	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69447:
  00038	8b f4		 mov	 esi, esp
  0003a	8d 4d d4	 lea	 ecx, DWORD PTR $T69446[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00043	3b f4		 cmp	 esi, esp
  00045	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?IsAttrSystem@YL_FileInfo@@SA_NPBD@Z:
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69449
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IsAttrSystem@YL_FileInfo@@SA_NPBD@Z ENDP		; YL_FileInfo::IsAttrSystem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv71 = -8						; size = 4
_m_dwFileAttr$ = -4					; size = 4
_strFilePath$ = 8					; size = 4
?IsAttrSystem@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; YL_FileInfo::IsAttrSystem

; 49   : {	

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	83 ec 08	 sub	 esp, 8
  00306	56		 push	 esi
  00307	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0030e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 50   : 	DWORD  m_dwFileAttr = ::GetFileAttributes( strFilePath.c_str() );

  00315	8b f4		 mov	 esi, esp
  00317	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00320	3b f4		 cmp	 esi, esp
  00322	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00327	8b f4		 mov	 esi, esp
  00329	50		 push	 eax
  0032a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4
  00330	3b f4		 cmp	 esi, esp
  00332	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00337	89 45 fc	 mov	 DWORD PTR _m_dwFileAttr$[ebp], eax

; 51   : 	return m_dwFileAttr != INVALID_FILE_ATTRIBUTES && (m_dwFileAttr & FILE_ATTRIBUTE_SYSTEM) > 0 ;

  0033a	83 7d fc ff	 cmp	 DWORD PTR _m_dwFileAttr$[ebp], -1
  0033e	74 11		 je	 SHORT $L69453
  00340	8b 45 fc	 mov	 eax, DWORD PTR _m_dwFileAttr$[ebp]
  00343	83 e0 04	 and	 eax, 4
  00346	76 09		 jbe	 SHORT $L69453
  00348	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0034f	eb 07		 jmp	 SHORT $L69454
$L69453:
  00351	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L69454:
  00358	8a 45 f8	 mov	 al, BYTE PTR tv71[ebp]

; 52   : }

  0035b	5e		 pop	 esi
  0035c	83 c4 08	 add	 esp, 8
  0035f	3b ec		 cmp	 ebp, esp
  00361	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00366	8b e5		 mov	 esp, ebp
  00368	5d		 pop	 ebp
  00369	c3		 ret	 0
?IsAttrSystem@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; YL_FileInfo::IsAttrSystem
_TEXT	ENDS
PUBLIC	?IsAttrReadOnly@YL_FileInfo@@SA_NPBD@Z		; YL_FileInfo::IsAttrReadOnly
PUBLIC	?IsAttrReadOnly@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsAttrReadOnly
xdata$x	SEGMENT
$T69462	DD	0ffffffffH
	DD	FLAT:$L69458
$T69460	DD	019930520H
	DD	01H
	DD	FLAT:$T69462
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -52						; size = 4
tv74 = -48						; size = 4
$T69457 = -44						; size = 28
$T69456 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszFilePath$ = 8					; size = 4
?IsAttrReadOnly@YL_FileInfo@@SA_NPBD@Z PROC NEAR	; YL_FileInfo::IsAttrReadOnly

; 55   : {

  00370	55		 push	 ebp
  00371	8b ec		 mov	 ebp, esp
  00373	6a ff		 push	 -1
  00375	68 00 00 00 00	 push	 __ehhandler$?IsAttrReadOnly@YL_FileInfo@@SA_NPBD@Z
  0037a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00380	50		 push	 eax
  00381	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00388	83 ec 28	 sub	 esp, 40			; 00000028H
  0038b	56		 push	 esi
  0038c	57		 push	 edi
  0038d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00390	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00395	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0039a	f3 ab		 rep stosd

; 56   : 	if( pszFilePath == NULL )

  0039c	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  003a0	75 04		 jne	 SHORT $L65124

; 57   : 	{
; 58   : 		return false;

  003a2	32 c0		 xor	 al, al
  003a4	eb 51		 jmp	 SHORT $L65123
$L65124:

; 59   : 	}
; 60   : 	return IsAttrReadOnly(string(pszFilePath));

  003a6	8b f4		 mov	 esi, esp
  003a8	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  003ab	50		 push	 eax
  003ac	8d 4d d4	 lea	 ecx, DWORD PTR $T69457[ebp]
  003af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  003b5	3b f4		 cmp	 esi, esp
  003b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003bc	89 45 d0	 mov	 DWORD PTR tv74[ebp], eax
  003bf	8b 4d d0	 mov	 ecx, DWORD PTR tv74[ebp]
  003c2	89 4d cc	 mov	 DWORD PTR tv73[ebp], ecx
  003c5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  003cc	8b 55 cc	 mov	 edx, DWORD PTR tv73[ebp]
  003cf	52		 push	 edx
  003d0	e8 00 00 00 00	 call	 ?IsAttrReadOnly@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsAttrReadOnly
  003d5	83 c4 04	 add	 esp, 4
  003d8	88 45 f3	 mov	 BYTE PTR $T69456[ebp], al
  003db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003e2	8b f4		 mov	 esi, esp
  003e4	8d 4d d4	 lea	 ecx, DWORD PTR $T69457[ebp]
  003e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  003ed	3b f4		 cmp	 esi, esp
  003ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003f4	8a 45 f3	 mov	 al, BYTE PTR $T69456[ebp]
$L65123:

; 61   : }

  003f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00401	5f		 pop	 edi
  00402	5e		 pop	 esi
  00403	83 c4 34	 add	 esp, 52			; 00000034H
  00406	3b ec		 cmp	 ebp, esp
  00408	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0040d	8b e5		 mov	 esp, ebp
  0040f	5d		 pop	 ebp
  00410	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69458:
  00054	8b f4		 mov	 esi, esp
  00056	8d 4d d4	 lea	 ecx, DWORD PTR $T69457[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?IsAttrReadOnly@YL_FileInfo@@SA_NPBD@Z:
  00066	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69460
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IsAttrReadOnly@YL_FileInfo@@SA_NPBD@Z ENDP		; YL_FileInfo::IsAttrReadOnly
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv71 = -8						; size = 4
_m_dwFileAttr$ = -4					; size = 4
_strFilePath$ = 8					; size = 4
?IsAttrReadOnly@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; YL_FileInfo::IsAttrReadOnly

; 64   : {	

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	83 ec 08	 sub	 esp, 8
  00426	56		 push	 esi
  00427	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0042e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 65   : 	DWORD  m_dwFileAttr = ::GetFileAttributes( strFilePath.c_str() );

  00435	8b f4		 mov	 esi, esp
  00437	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0043a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00440	3b f4		 cmp	 esi, esp
  00442	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00447	8b f4		 mov	 esi, esp
  00449	50		 push	 eax
  0044a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4
  00450	3b f4		 cmp	 esi, esp
  00452	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00457	89 45 fc	 mov	 DWORD PTR _m_dwFileAttr$[ebp], eax

; 66   : 	return m_dwFileAttr != INVALID_FILE_ATTRIBUTES && (m_dwFileAttr & FILE_ATTRIBUTE_READONLY) > 0 ;

  0045a	83 7d fc ff	 cmp	 DWORD PTR _m_dwFileAttr$[ebp], -1
  0045e	74 11		 je	 SHORT $L69464
  00460	8b 45 fc	 mov	 eax, DWORD PTR _m_dwFileAttr$[ebp]
  00463	83 e0 01	 and	 eax, 1
  00466	76 09		 jbe	 SHORT $L69464
  00468	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0046f	eb 07		 jmp	 SHORT $L69465
$L69464:
  00471	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L69465:
  00478	8a 45 f8	 mov	 al, BYTE PTR tv71[ebp]

; 67   : }

  0047b	5e		 pop	 esi
  0047c	83 c4 08	 add	 esp, 8
  0047f	3b ec		 cmp	 ebp, esp
  00481	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
?IsAttrReadOnly@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; YL_FileInfo::IsAttrReadOnly
_TEXT	ENDS
PUBLIC	?IsAttrHidden@YL_FileInfo@@SA_NPBD@Z		; YL_FileInfo::IsAttrHidden
PUBLIC	?IsAttrHidden@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsAttrHidden
xdata$x	SEGMENT
$T69473	DD	0ffffffffH
	DD	FLAT:$L69469
$T69471	DD	019930520H
	DD	01H
	DD	FLAT:$T69473
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv73 = -52						; size = 4
tv74 = -48						; size = 4
$T69468 = -44						; size = 28
$T69467 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszFilePath$ = 8					; size = 4
?IsAttrHidden@YL_FileInfo@@SA_NPBD@Z PROC NEAR		; YL_FileInfo::IsAttrHidden

; 70   : {

  00490	55		 push	 ebp
  00491	8b ec		 mov	 ebp, esp
  00493	6a ff		 push	 -1
  00495	68 00 00 00 00	 push	 __ehhandler$?IsAttrHidden@YL_FileInfo@@SA_NPBD@Z
  0049a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  004a0	50		 push	 eax
  004a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  004a8	83 ec 28	 sub	 esp, 40			; 00000028H
  004ab	56		 push	 esi
  004ac	57		 push	 edi
  004ad	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  004b0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004b5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  004ba	f3 ab		 rep stosd

; 71   : 	if( pszFilePath == NULL )

  004bc	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  004c0	75 04		 jne	 SHORT $L65135

; 72   : 	{
; 73   : 		return false;

  004c2	32 c0		 xor	 al, al
  004c4	eb 51		 jmp	 SHORT $L65134
$L65135:

; 74   : 	}
; 75   : 	return IsAttrHidden(string(pszFilePath));

  004c6	8b f4		 mov	 esi, esp
  004c8	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  004cb	50		 push	 eax
  004cc	8d 4d d4	 lea	 ecx, DWORD PTR $T69468[ebp]
  004cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  004d5	3b f4		 cmp	 esi, esp
  004d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004dc	89 45 d0	 mov	 DWORD PTR tv74[ebp], eax
  004df	8b 4d d0	 mov	 ecx, DWORD PTR tv74[ebp]
  004e2	89 4d cc	 mov	 DWORD PTR tv73[ebp], ecx
  004e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  004ec	8b 55 cc	 mov	 edx, DWORD PTR tv73[ebp]
  004ef	52		 push	 edx
  004f0	e8 00 00 00 00	 call	 ?IsAttrHidden@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsAttrHidden
  004f5	83 c4 04	 add	 esp, 4
  004f8	88 45 f3	 mov	 BYTE PTR $T69467[ebp], al
  004fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00502	8b f4		 mov	 esi, esp
  00504	8d 4d d4	 lea	 ecx, DWORD PTR $T69468[ebp]
  00507	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0050d	3b f4		 cmp	 esi, esp
  0050f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00514	8a 45 f3	 mov	 al, BYTE PTR $T69467[ebp]
$L65134:

; 76   : }

  00517	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0051a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00521	5f		 pop	 edi
  00522	5e		 pop	 esi
  00523	83 c4 34	 add	 esp, 52			; 00000034H
  00526	3b ec		 cmp	 ebp, esp
  00528	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0052d	8b e5		 mov	 esp, ebp
  0052f	5d		 pop	 ebp
  00530	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69469:
  00070	8b f4		 mov	 esi, esp
  00072	8d 4d d4	 lea	 ecx, DWORD PTR $T69468[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0007b	3b f4		 cmp	 esi, esp
  0007d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?IsAttrHidden@YL_FileInfo@@SA_NPBD@Z:
  00082	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69471
  00087	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IsAttrHidden@YL_FileInfo@@SA_NPBD@Z ENDP		; YL_FileInfo::IsAttrHidden
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv71 = -8						; size = 4
_m_dwFileAttr$ = -4					; size = 4
_strFilePath$ = 8					; size = 4
?IsAttrHidden@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; YL_FileInfo::IsAttrHidden

; 79   : {	

  00540	55		 push	 ebp
  00541	8b ec		 mov	 ebp, esp
  00543	83 ec 08	 sub	 esp, 8
  00546	56		 push	 esi
  00547	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0054e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 80   : 	DWORD  m_dwFileAttr = ::GetFileAttributes( strFilePath.c_str() );

  00555	8b f4		 mov	 esi, esp
  00557	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0055a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00560	3b f4		 cmp	 esi, esp
  00562	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00567	8b f4		 mov	 esi, esp
  00569	50		 push	 eax
  0056a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4
  00570	3b f4		 cmp	 esi, esp
  00572	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00577	89 45 fc	 mov	 DWORD PTR _m_dwFileAttr$[ebp], eax

; 81   : 	return m_dwFileAttr != INVALID_FILE_ATTRIBUTES && (m_dwFileAttr & FILE_ATTRIBUTE_HIDDEN) > 0;

  0057a	83 7d fc ff	 cmp	 DWORD PTR _m_dwFileAttr$[ebp], -1
  0057e	74 11		 je	 SHORT $L69475
  00580	8b 45 fc	 mov	 eax, DWORD PTR _m_dwFileAttr$[ebp]
  00583	83 e0 02	 and	 eax, 2
  00586	76 09		 jbe	 SHORT $L69475
  00588	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0058f	eb 07		 jmp	 SHORT $L69476
$L69475:
  00591	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L69476:
  00598	8a 45 f8	 mov	 al, BYTE PTR tv71[ebp]

; 82   : }

  0059b	5e		 pop	 esi
  0059c	83 c4 08	 add	 esp, 8
  0059f	3b ec		 cmp	 ebp, esp
  005a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005a6	8b e5		 mov	 esp, ebp
  005a8	5d		 pop	 ebp
  005a9	c3		 ret	 0
?IsAttrHidden@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; YL_FileInfo::IsAttrHidden
_TEXT	ENDS
PUBLIC	?GetFileSize@YL_FileInfo@@SA_NPBDPAI1@Z		; YL_FileInfo::GetFileSize
PUBLIC	?GetFileSize@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAI1@Z ; YL_FileInfo::GetFileSize
xdata$x	SEGMENT
$T69484	DD	0ffffffffH
	DD	FLAT:$L69480
$T69482	DD	019930520H
	DD	01H
	DD	FLAT:$T69484
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -52						; size = 4
tv76 = -48						; size = 4
$T69479 = -44						; size = 28
$T69478 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszFilePath$ = 8					; size = 4
_pUnLowSize$ = 12					; size = 4
_pUnHighSize$ = 16					; size = 4
?GetFileSize@YL_FileInfo@@SA_NPBDPAI1@Z PROC NEAR	; YL_FileInfo::GetFileSize

; 85   : {

  005b0	55		 push	 ebp
  005b1	8b ec		 mov	 ebp, esp
  005b3	6a ff		 push	 -1
  005b5	68 00 00 00 00	 push	 __ehhandler$?GetFileSize@YL_FileInfo@@SA_NPBDPAI1@Z
  005ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  005c0	50		 push	 eax
  005c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  005c8	83 ec 28	 sub	 esp, 40			; 00000028H
  005cb	56		 push	 esi
  005cc	57		 push	 edi
  005cd	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  005d0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  005d5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  005da	f3 ab		 rep stosd

; 86   : 	if( pszFilePath == NULL )

  005dc	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  005e0	75 04		 jne	 SHORT $L65148

; 87   : 	{
; 88   : 		return false;

  005e2	32 c0		 xor	 al, al
  005e4	eb 59		 jmp	 SHORT $L65147
$L65148:

; 89   : 	}
; 90   : 	return GetFileSize(string(pszFilePath),pUnLowSize,pUnHighSize);

  005e6	8b f4		 mov	 esi, esp
  005e8	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  005eb	50		 push	 eax
  005ec	8d 4d d4	 lea	 ecx, DWORD PTR $T69479[ebp]
  005ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  005f5	3b f4		 cmp	 esi, esp
  005f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005fc	89 45 d0	 mov	 DWORD PTR tv76[ebp], eax
  005ff	8b 4d d0	 mov	 ecx, DWORD PTR tv76[ebp]
  00602	89 4d cc	 mov	 DWORD PTR tv75[ebp], ecx
  00605	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0060c	8b 55 10	 mov	 edx, DWORD PTR _pUnHighSize$[ebp]
  0060f	52		 push	 edx
  00610	8b 45 0c	 mov	 eax, DWORD PTR _pUnLowSize$[ebp]
  00613	50		 push	 eax
  00614	8b 4d cc	 mov	 ecx, DWORD PTR tv75[ebp]
  00617	51		 push	 ecx
  00618	e8 00 00 00 00	 call	 ?GetFileSize@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAI1@Z ; YL_FileInfo::GetFileSize
  0061d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00620	88 45 f3	 mov	 BYTE PTR $T69478[ebp], al
  00623	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0062a	8b f4		 mov	 esi, esp
  0062c	8d 4d d4	 lea	 ecx, DWORD PTR $T69479[ebp]
  0062f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00635	3b f4		 cmp	 esi, esp
  00637	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0063c	8a 45 f3	 mov	 al, BYTE PTR $T69478[ebp]
$L65147:

; 91   : }

  0063f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00642	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00649	5f		 pop	 edi
  0064a	5e		 pop	 esi
  0064b	83 c4 34	 add	 esp, 52			; 00000034H
  0064e	3b ec		 cmp	 ebp, esp
  00650	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00655	8b e5		 mov	 esp, ebp
  00657	5d		 pop	 ebp
  00658	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69480:
  0008c	8b f4		 mov	 esi, esp
  0008e	8d 4d d4	 lea	 ecx, DWORD PTR $T69479[ebp]
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00097	3b f4		 cmp	 esi, esp
  00099	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetFileSize@YL_FileInfo@@SA_NPBDPAI1@Z:
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69482
  000a3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileSize@YL_FileInfo@@SA_NPBDPAI1@Z ENDP		; YL_FileInfo::GetFileSize
EXTRN	__allshr:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_bRet$65158 = -65					; size = 1
_m_buf$ = -60						; size = 56
_strFilePath$ = 8					; size = 4
_pUnLowSize$ = 12					; size = 4
_pUnHighSize$ = 16					; size = 4
?GetFileSize@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAI1@Z PROC NEAR ; YL_FileInfo::GetFileSize

; 94   : {

  00660	55		 push	 ebp
  00661	8b ec		 mov	 ebp, esp
  00663	83 ec 44	 sub	 esp, 68			; 00000044H
  00666	56		 push	 esi
  00667	57		 push	 edi
  00668	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  0066b	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00670	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00675	f3 ab		 rep stosd

; 95   : 	if( pUnLowSize == NULL )

  00677	83 7d 0c 00	 cmp	 DWORD PTR _pUnLowSize$[ebp], 0
  0067b	75 04		 jne	 SHORT $L65156

; 96   : 	{
; 97   : 		return false;

  0067d	32 c0		 xor	 al, al
  0067f	eb 65		 jmp	 SHORT $L65155
$L65156:

; 98   : 	}
; 99   : 
; 100  : 	struct __stat64 m_buf;
; 101  : 	if( bool bRet = !_stat64( strFilePath.c_str(), &m_buf ) )

  00681	8b f4		 mov	 esi, esp
  00683	8d 45 c4	 lea	 eax, DWORD PTR _m_buf$[ebp]
  00686	50		 push	 eax
  00687	8b fc		 mov	 edi, esp
  00689	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0068c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00692	3b fc		 cmp	 edi, esp
  00694	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00699	50		 push	 eax
  0069a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stat64
  006a0	83 c4 08	 add	 esp, 8
  006a3	3b f4		 cmp	 esi, esp
  006a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006aa	f7 d8		 neg	 eax
  006ac	1b c0		 sbb	 eax, eax
  006ae	40		 inc	 eax
  006af	88 45 bf	 mov	 BYTE PTR _bRet$65158[ebp], al
  006b2	0f b6 4d bf	 movzx	 ecx, BYTE PTR _bRet$65158[ebp]
  006b6	85 c9		 test	 ecx, ecx
  006b8	74 2a		 je	 SHORT $L65159

; 102  : 	{
; 103  : 		*pUnLowSize = (unsigned int )(m_buf.st_size & 0xffffffff);

  006ba	8b 55 dc	 mov	 edx, DWORD PTR _m_buf$[ebp+24]
  006bd	8b 45 e0	 mov	 eax, DWORD PTR _m_buf$[ebp+28]
  006c0	83 e0 00	 and	 eax, 0
  006c3	8b 4d 0c	 mov	 ecx, DWORD PTR _pUnLowSize$[ebp]
  006c6	89 11		 mov	 DWORD PTR [ecx], edx

; 104  : 		if( pUnHighSize != NULL )

  006c8	83 7d 10 00	 cmp	 DWORD PTR _pUnHighSize$[ebp], 0
  006cc	74 12		 je	 SHORT $L65161

; 105  : 		{
; 106  : 			*pUnHighSize = (unsigned int)(m_buf.st_size >> 32);

  006ce	8b 45 dc	 mov	 eax, DWORD PTR _m_buf$[ebp+24]
  006d1	8b 55 e0	 mov	 edx, DWORD PTR _m_buf$[ebp+28]
  006d4	b1 20		 mov	 cl, 32			; 00000020H
  006d6	e8 00 00 00 00	 call	 __allshr
  006db	8b 55 10	 mov	 edx, DWORD PTR _pUnHighSize$[ebp]
  006de	89 02		 mov	 DWORD PTR [edx], eax
$L65161:

; 107  : 		}
; 108  : 		return true;

  006e0	b0 01		 mov	 al, 1
  006e2	eb 02		 jmp	 SHORT $L65155
$L65159:

; 109  : 	}
; 110  : 	
; 111  : 	return false;

  006e4	32 c0		 xor	 al, al
$L65155:

; 112  : }

  006e6	52		 push	 edx
  006e7	8b cd		 mov	 ecx, ebp
  006e9	50		 push	 eax
  006ea	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69489
  006f0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  006f5	58		 pop	 eax
  006f6	5a		 pop	 edx
  006f7	5f		 pop	 edi
  006f8	5e		 pop	 esi
  006f9	83 c4 44	 add	 esp, 68			; 00000044H
  006fc	3b ec		 cmp	 ebp, esp
  006fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00703	8b e5		 mov	 esp, ebp
  00705	5d		 pop	 ebp
  00706	c3		 ret	 0
$L69489:
  00707	01 00 00 00	 DD	 1
  0070b	00 00 00 00	 DD	 $L69488
$L69488:
  0070f	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00713	38 00 00 00	 DD	 56			; 00000038H
  00717	00 00 00 00	 DD	 $L69487
$L69487:
  0071b	6d		 DB	 109			; 0000006dH
  0071c	5f		 DB	 95			; 0000005fH
  0071d	62		 DB	 98			; 00000062H
  0071e	75		 DB	 117			; 00000075H
  0071f	66		 DB	 102			; 00000066H
  00720	00		 DB	 0
?GetFileSize@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAI1@Z ENDP ; YL_FileInfo::GetFileSize
_TEXT	ENDS
PUBLIC	?GetFileName@YL_FileInfo@@SA_NPBDQADI@Z		; YL_FileInfo::GetFileName
PUBLIC	?GetFileName@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileName
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	_strcpy:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
xdata$x	SEGMENT
$T69512	DD	0ffffffffH
	DD	FLAT:$L69498
	DD	00H
	DD	FLAT:$L69500
$T69504	DD	019930520H
	DD	02H
	DD	FLAT:$T69512
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv81 = -104						; size = 4
tv94 = -100						; size = 4
tv132 = -96						; size = 4
$T69499 = -92						; size = 4
$T69497 = -86						; size = 1
$T69496 = -85						; size = 1
$T69493 = -84						; size = 28
$T69492 = -53						; size = 1
_strFileName$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszFilePath$ = 8					; size = 4
_szBufferName$ = 12					; size = 4
_unBufferLen$ = 16					; size = 4
?GetFileName@YL_FileInfo@@SA_NPBDQADI@Z PROC NEAR	; YL_FileInfo::GetFileName

; 115  : {

  00730	55		 push	 ebp
  00731	8b ec		 mov	 ebp, esp
  00733	6a ff		 push	 -1
  00735	68 00 00 00 00	 push	 __ehhandler$?GetFileName@YL_FileInfo@@SA_NPBDQADI@Z
  0073a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00740	50		 push	 eax
  00741	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00748	83 ec 5c	 sub	 esp, 92			; 0000005cH
  0074b	56		 push	 esi
  0074c	57		 push	 edi
  0074d	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  00750	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00755	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0075a	f3 ab		 rep stosd
  0075c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00761	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00764	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T69499[ebp], 0

; 116  : 	if( pszFilePath == NULL )

  0076b	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  0076f	75 07		 jne	 SHORT $L65168

; 117  : 	{
; 118  : 		return false;

  00771	32 c0		 xor	 al, al
  00773	e9 17 01 00 00	 jmp	 $L65167
$L65168:

; 119  : 	}
; 120  : 	string strFileName;

  00778	8b f4		 mov	 esi, esp
  0077a	8d 4d d0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  0077d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00783	3b f4		 cmp	 esi, esp
  00785	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0078a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 121  : 	if( GetFileName( string(pszFilePath),strFileName) && strFileName.size() < unBufferLen )

  00791	8b f4		 mov	 esi, esp
  00793	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  00796	50		 push	 eax
  00797	8d 4d ac	 lea	 ecx, DWORD PTR $T69493[ebp]
  0079a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  007a0	3b f4		 cmp	 esi, esp
  007a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007a7	89 45 a0	 mov	 DWORD PTR tv132[ebp], eax
  007aa	8b 4d a0	 mov	 ecx, DWORD PTR tv132[ebp]
  007ad	89 4d 9c	 mov	 DWORD PTR tv94[ebp], ecx
  007b0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  007b4	8b 55 a4	 mov	 edx, DWORD PTR $T69499[ebp]
  007b7	83 ca 01	 or	 edx, 1
  007ba	89 55 a4	 mov	 DWORD PTR $T69499[ebp], edx
  007bd	8d 45 d0	 lea	 eax, DWORD PTR _strFileName$[ebp]
  007c0	50		 push	 eax
  007c1	8b 4d 9c	 mov	 ecx, DWORD PTR tv94[ebp]
  007c4	51		 push	 ecx
  007c5	e8 00 00 00 00	 call	 ?GetFileName@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileName
  007ca	83 c4 08	 add	 esp, 8
  007cd	0f b6 d0	 movzx	 edx, al
  007d0	85 d2		 test	 edx, edx
  007d2	74 20		 je	 SHORT $L69494
  007d4	8b f4		 mov	 esi, esp
  007d6	8d 4d d0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  007d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  007df	3b f4		 cmp	 esi, esp
  007e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007e6	3b 45 10	 cmp	 eax, DWORD PTR _unBufferLen$[ebp]
  007e9	73 09		 jae	 SHORT $L69494
  007eb	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  007f2	eb 07		 jmp	 SHORT $L69495
$L69494:
  007f4	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L69495:
  007fb	8a 45 98	 mov	 al, BYTE PTR tv81[ebp]
  007fe	88 45 cb	 mov	 BYTE PTR $T69492[ebp], al
  00801	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00808	8b 4d a4	 mov	 ecx, DWORD PTR $T69499[ebp]
  0080b	83 e1 01	 and	 ecx, 1
  0080e	74 16		 je	 SHORT $L69502
  00810	83 65 a4 fe	 and	 DWORD PTR $T69499[ebp], -2 ; fffffffeH
  00814	8b f4		 mov	 esi, esp
  00816	8d 4d ac	 lea	 ecx, DWORD PTR $T69493[ebp]
  00819	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0081f	3b f4		 cmp	 esi, esp
  00821	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L69502:
  00826	0f b6 55 cb	 movzx	 edx, BYTE PTR $T69492[ebp]
  0082a	85 d2		 test	 edx, edx
  0082c	74 41		 je	 SHORT $L65171

; 122  : 	{
; 123  : 		strcpy( szBufferName,strFileName.c_str() );

  0082e	8b f4		 mov	 esi, esp
  00830	8d 4d d0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00833	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00839	3b f4		 cmp	 esi, esp
  0083b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00840	50		 push	 eax
  00841	8b 45 0c	 mov	 eax, DWORD PTR _szBufferName$[ebp]
  00844	50		 push	 eax
  00845	e8 00 00 00 00	 call	 _strcpy
  0084a	83 c4 08	 add	 esp, 8

; 124  : 		return true;

  0084d	c6 45 ab 01	 mov	 BYTE PTR $T69496[ebp], 1
  00851	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00858	8b f4		 mov	 esi, esp
  0085a	8d 4d d0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  0085d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00863	3b f4		 cmp	 esi, esp
  00865	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0086a	8a 45 ab	 mov	 al, BYTE PTR $T69496[ebp]
  0086d	eb 20		 jmp	 SHORT $L65167
$L65171:

; 125  : 	}
; 126  : 	return false;	

  0086f	c6 45 aa 00	 mov	 BYTE PTR $T69497[ebp], 0
  00873	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0087a	8b f4		 mov	 esi, esp
  0087c	8d 4d d0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  0087f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00885	3b f4		 cmp	 esi, esp
  00887	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0088c	8a 45 aa	 mov	 al, BYTE PTR $T69497[ebp]
$L65167:

; 127  : }

  0088f	52		 push	 edx
  00890	8b cd		 mov	 ecx, ebp
  00892	50		 push	 eax
  00893	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69510
  00899	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0089e	58		 pop	 eax
  0089f	5a		 pop	 edx
  008a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  008a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  008aa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008b2	5f		 pop	 edi
  008b3	5e		 pop	 esi
  008b4	83 c4 68	 add	 esp, 104		; 00000068H
  008b7	3b ec		 cmp	 ebp, esp
  008b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008be	8b e5		 mov	 esp, ebp
  008c0	5d		 pop	 ebp
  008c1	c3		 ret	 0
$L69510:
  008c2	01 00 00 00	 DD	 1
  008c6	00 00 00 00	 DD	 $L69509
$L69509:
  008ca	d0 ff ff ff	 DD	 -48			; ffffffd0H
  008ce	1c 00 00 00	 DD	 28			; 0000001cH
  008d2	00 00 00 00	 DD	 $L69505
$L69505:
  008d6	73		 DB	 115			; 00000073H
  008d7	74		 DB	 116			; 00000074H
  008d8	72		 DB	 114			; 00000072H
  008d9	46		 DB	 70			; 00000046H
  008da	69		 DB	 105			; 00000069H
  008db	6c		 DB	 108			; 0000006cH
  008dc	65		 DB	 101			; 00000065H
  008dd	4e		 DB	 78			; 0000004eH
  008de	61		 DB	 97			; 00000061H
  008df	6d		 DB	 109			; 0000006dH
  008e0	65		 DB	 101			; 00000065H
  008e1	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L69498:
  000a8	8b f4		 mov	 esi, esp
  000aa	8d 4d d0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000b3	3b f4		 cmp	 esi, esp
  000b5	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69500:
  000ba	8b 45 a4	 mov	 eax, DWORD PTR $T69499[ebp]
  000bd	83 e0 01	 and	 eax, 1
  000c0	0f 84 16 00 00
	00		 je	 $L69501
  000c6	83 65 a4 fe	 and	 DWORD PTR $T69499[ebp], -2 ; fffffffeH
  000ca	8b f4		 mov	 esi, esp
  000cc	8d 4d ac	 lea	 ecx, DWORD PTR $T69493[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000d5	3b f4		 cmp	 esi, esp
  000d7	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69501:
  000dc	c3		 ret	 0
__ehhandler$?GetFileName@YL_FileInfo@@SA_NPBDQADI@Z:
  000dd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69504
  000e2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileName@YL_FileInfo@@SA_NPBDQADI@Z ENDP		; YL_FileInfo::GetFileName
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z:NEAR
EXTRN	__imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z:NEAR
EXTRN	__imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB:DWORD
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
xdata$x	SEGMENT
$T69519	DD	0ffffffffH
	DD	FLAT:$L69515
$T69517	DD	019930520H
	DD	01H
	DD	FLAT:$T69519
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv85 = -52						; size = 4
tv86 = -48						; size = 4
$T69514 = -44						; size = 28
_n$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strFilePath$ = 8					; size = 4
_strFileName$ = 12					; size = 4
?GetFileName@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC NEAR ; YL_FileInfo::GetFileName

; 130  : {

  008f0	55		 push	 ebp
  008f1	8b ec		 mov	 ebp, esp
  008f3	6a ff		 push	 -1
  008f5	68 00 00 00 00	 push	 __ehhandler$?GetFileName@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  008fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00900	50		 push	 eax
  00901	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00908	83 ec 28	 sub	 esp, 40			; 00000028H
  0090b	56		 push	 esi
  0090c	57		 push	 edi
  0090d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00910	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00915	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0091a	f3 ab		 rep stosd

; 131  : 	size_t n = strFilePath.find_last_of("\\");

  0091c	8b f4		 mov	 esi, esp
  0091e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00923	8b 08		 mov	 ecx, DWORD PTR [eax]
  00925	51		 push	 ecx
  00926	68 00 00 00 00	 push	 OFFSET FLAT:$SG65180
  0092b	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0092e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
  00934	3b f4		 cmp	 esi, esp
  00936	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0093b	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 132  : 	if( n == string::npos )

  0093e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00944	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00947	3b 02		 cmp	 eax, DWORD PTR [edx]
  00949	75 1a		 jne	 SHORT $L65181

; 133  : 	{
; 134  : 		strFileName = strFilePath;

  0094b	8b f4		 mov	 esi, esp
  0094d	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00950	51		 push	 ecx
  00951	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  00954	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0095a	3b f4		 cmp	 esi, esp
  0095c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 135  : 		return true;

  00961	b0 01		 mov	 al, 1
  00963	eb 74		 jmp	 SHORT $L65178
$L65181:

; 136  : 	}
; 137  : 	strFileName = strFilePath.substr(n+1, strFilePath.length() - n);

  00965	8b f4		 mov	 esi, esp
  00967	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0096a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00970	3b f4		 cmp	 esi, esp
  00972	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00977	2b 45 f0	 sub	 eax, DWORD PTR _n$[ebp]
  0097a	8b f4		 mov	 esi, esp
  0097c	50		 push	 eax
  0097d	8b 55 f0	 mov	 edx, DWORD PTR _n$[ebp]
  00980	83 c2 01	 add	 edx, 1
  00983	52		 push	 edx
  00984	8d 45 d4	 lea	 eax, DWORD PTR $T69514[ebp]
  00987	50		 push	 eax
  00988	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  0098b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00991	3b f4		 cmp	 esi, esp
  00993	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00998	89 45 d0	 mov	 DWORD PTR tv86[ebp], eax
  0099b	8b 4d d0	 mov	 ecx, DWORD PTR tv86[ebp]
  0099e	89 4d cc	 mov	 DWORD PTR tv85[ebp], ecx
  009a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  009a8	8b f4		 mov	 esi, esp
  009aa	8b 55 cc	 mov	 edx, DWORD PTR tv85[ebp]
  009ad	52		 push	 edx
  009ae	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  009b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  009b7	3b f4		 cmp	 esi, esp
  009b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  009c5	8b f4		 mov	 esi, esp
  009c7	8d 4d d4	 lea	 ecx, DWORD PTR $T69514[ebp]
  009ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  009d0	3b f4		 cmp	 esi, esp
  009d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 138  : 	return true;

  009d7	b0 01		 mov	 al, 1
$L65178:

; 139  : }

  009d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  009dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  009e3	5f		 pop	 edi
  009e4	5e		 pop	 esi
  009e5	83 c4 34	 add	 esp, 52			; 00000034H
  009e8	3b ec		 cmp	 ebp, esp
  009ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009ef	8b e5		 mov	 esp, ebp
  009f1	5d		 pop	 ebp
  009f2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69515:
  000e7	8b f4		 mov	 esi, esp
  000e9	8d 4d d4	 lea	 ecx, DWORD PTR $T69514[ebp]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000f2	3b f4		 cmp	 esi, esp
  000f4	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetFileName@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:
  000f9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69517
  000fe	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileName@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; YL_FileInfo::GetFileName
PUBLIC	?GetFileNamePrefix@YL_FileInfo@@SA_NPBDQADI@Z	; YL_FileInfo::GetFileNamePrefix
PUBLIC	?GetFileNamePrefix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileNamePrefix
xdata$x	SEGMENT
$T69540	DD	0ffffffffH
	DD	FLAT:$L69528
	DD	00H
	DD	FLAT:$L69530
$T69534	DD	019930520H
	DD	02H
	DD	FLAT:$T69540
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv81 = -104						; size = 4
tv94 = -100						; size = 4
tv132 = -96						; size = 4
$T69529 = -92						; size = 4
$T69527 = -86						; size = 1
$T69526 = -85						; size = 1
$T69523 = -84						; size = 28
$T69522 = -53						; size = 1
_strFileNamePrefix$ = -48				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszFilePath$ = 8					; size = 4
_szBufferName$ = 12					; size = 4
_unBufferLen$ = 16					; size = 4
?GetFileNamePrefix@YL_FileInfo@@SA_NPBDQADI@Z PROC NEAR	; YL_FileInfo::GetFileNamePrefix

; 143  : {

  00a00	55		 push	 ebp
  00a01	8b ec		 mov	 ebp, esp
  00a03	6a ff		 push	 -1
  00a05	68 00 00 00 00	 push	 __ehhandler$?GetFileNamePrefix@YL_FileInfo@@SA_NPBDQADI@Z
  00a0a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00a10	50		 push	 eax
  00a11	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00a18	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00a1b	56		 push	 esi
  00a1c	57		 push	 edi
  00a1d	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  00a20	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00a25	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00a2a	f3 ab		 rep stosd
  00a2c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00a31	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00a34	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T69529[ebp], 0

; 144  : 	if( pszFilePath == NULL )

  00a3b	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  00a3f	75 07		 jne	 SHORT $L65188

; 145  : 	{
; 146  : 		return false;

  00a41	32 c0		 xor	 al, al
  00a43	e9 17 01 00 00	 jmp	 $L65187
$L65188:

; 147  : 	}
; 148  : 	
; 149  : 	string strFileNamePrefix;

  00a48	8b f4		 mov	 esi, esp
  00a4a	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNamePrefix$[ebp]
  00a4d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00a53	3b f4		 cmp	 esi, esp
  00a55	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a5a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 150  : 	if( GetFileNamePrefix( string(pszFilePath),strFileNamePrefix) && strFileNamePrefix.size() < unBufferLen )

  00a61	8b f4		 mov	 esi, esp
  00a63	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  00a66	50		 push	 eax
  00a67	8d 4d ac	 lea	 ecx, DWORD PTR $T69523[ebp]
  00a6a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00a70	3b f4		 cmp	 esi, esp
  00a72	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a77	89 45 a0	 mov	 DWORD PTR tv132[ebp], eax
  00a7a	8b 4d a0	 mov	 ecx, DWORD PTR tv132[ebp]
  00a7d	89 4d 9c	 mov	 DWORD PTR tv94[ebp], ecx
  00a80	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00a84	8b 55 a4	 mov	 edx, DWORD PTR $T69529[ebp]
  00a87	83 ca 01	 or	 edx, 1
  00a8a	89 55 a4	 mov	 DWORD PTR $T69529[ebp], edx
  00a8d	8d 45 d0	 lea	 eax, DWORD PTR _strFileNamePrefix$[ebp]
  00a90	50		 push	 eax
  00a91	8b 4d 9c	 mov	 ecx, DWORD PTR tv94[ebp]
  00a94	51		 push	 ecx
  00a95	e8 00 00 00 00	 call	 ?GetFileNamePrefix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileNamePrefix
  00a9a	83 c4 08	 add	 esp, 8
  00a9d	0f b6 d0	 movzx	 edx, al
  00aa0	85 d2		 test	 edx, edx
  00aa2	74 20		 je	 SHORT $L69524
  00aa4	8b f4		 mov	 esi, esp
  00aa6	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNamePrefix$[ebp]
  00aa9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00aaf	3b f4		 cmp	 esi, esp
  00ab1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ab6	3b 45 10	 cmp	 eax, DWORD PTR _unBufferLen$[ebp]
  00ab9	73 09		 jae	 SHORT $L69524
  00abb	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00ac2	eb 07		 jmp	 SHORT $L69525
$L69524:
  00ac4	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L69525:
  00acb	8a 45 98	 mov	 al, BYTE PTR tv81[ebp]
  00ace	88 45 cb	 mov	 BYTE PTR $T69522[ebp], al
  00ad1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00ad8	8b 4d a4	 mov	 ecx, DWORD PTR $T69529[ebp]
  00adb	83 e1 01	 and	 ecx, 1
  00ade	74 16		 je	 SHORT $L69532
  00ae0	83 65 a4 fe	 and	 DWORD PTR $T69529[ebp], -2 ; fffffffeH
  00ae4	8b f4		 mov	 esi, esp
  00ae6	8d 4d ac	 lea	 ecx, DWORD PTR $T69523[ebp]
  00ae9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00aef	3b f4		 cmp	 esi, esp
  00af1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L69532:
  00af6	0f b6 55 cb	 movzx	 edx, BYTE PTR $T69522[ebp]
  00afa	85 d2		 test	 edx, edx
  00afc	74 41		 je	 SHORT $L65191

; 151  : 	{
; 152  : 		strcpy( szBufferName,strFileNamePrefix.c_str() );

  00afe	8b f4		 mov	 esi, esp
  00b00	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNamePrefix$[ebp]
  00b03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00b09	3b f4		 cmp	 esi, esp
  00b0b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b10	50		 push	 eax
  00b11	8b 45 0c	 mov	 eax, DWORD PTR _szBufferName$[ebp]
  00b14	50		 push	 eax
  00b15	e8 00 00 00 00	 call	 _strcpy
  00b1a	83 c4 08	 add	 esp, 8

; 153  : 		return true;

  00b1d	c6 45 ab 01	 mov	 BYTE PTR $T69526[ebp], 1
  00b21	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b28	8b f4		 mov	 esi, esp
  00b2a	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNamePrefix$[ebp]
  00b2d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00b33	3b f4		 cmp	 esi, esp
  00b35	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b3a	8a 45 ab	 mov	 al, BYTE PTR $T69526[ebp]
  00b3d	eb 20		 jmp	 SHORT $L65187
$L65191:

; 154  : 
; 155  : 	}
; 156  : 	return false;	

  00b3f	c6 45 aa 00	 mov	 BYTE PTR $T69527[ebp], 0
  00b43	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b4a	8b f4		 mov	 esi, esp
  00b4c	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNamePrefix$[ebp]
  00b4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00b55	3b f4		 cmp	 esi, esp
  00b57	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b5c	8a 45 aa	 mov	 al, BYTE PTR $T69527[ebp]
$L65187:

; 157  : }

  00b5f	52		 push	 edx
  00b60	8b cd		 mov	 ecx, ebp
  00b62	50		 push	 eax
  00b63	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69539
  00b69	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b6e	58		 pop	 eax
  00b6f	5a		 pop	 edx
  00b70	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b73	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00b7a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b7d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b82	5f		 pop	 edi
  00b83	5e		 pop	 esi
  00b84	83 c4 68	 add	 esp, 104		; 00000068H
  00b87	3b ec		 cmp	 ebp, esp
  00b89	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b8e	8b e5		 mov	 esp, ebp
  00b90	5d		 pop	 ebp
  00b91	c3		 ret	 0
$L69539:
  00b92	01 00 00 00	 DD	 1
  00b96	00 00 00 00	 DD	 $L69538
$L69538:
  00b9a	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00b9e	1c 00 00 00	 DD	 28			; 0000001cH
  00ba2	00 00 00 00	 DD	 $L69535
$L69535:
  00ba6	73		 DB	 115			; 00000073H
  00ba7	74		 DB	 116			; 00000074H
  00ba8	72		 DB	 114			; 00000072H
  00ba9	46		 DB	 70			; 00000046H
  00baa	69		 DB	 105			; 00000069H
  00bab	6c		 DB	 108			; 0000006cH
  00bac	65		 DB	 101			; 00000065H
  00bad	4e		 DB	 78			; 0000004eH
  00bae	61		 DB	 97			; 00000061H
  00baf	6d		 DB	 109			; 0000006dH
  00bb0	65		 DB	 101			; 00000065H
  00bb1	50		 DB	 80			; 00000050H
  00bb2	72		 DB	 114			; 00000072H
  00bb3	65		 DB	 101			; 00000065H
  00bb4	66		 DB	 102			; 00000066H
  00bb5	69		 DB	 105			; 00000069H
  00bb6	78		 DB	 120			; 00000078H
  00bb7	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L69528:
  00103	8b f4		 mov	 esi, esp
  00105	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNamePrefix$[ebp]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0010e	3b f4		 cmp	 esi, esp
  00110	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69530:
  00115	8b 45 a4	 mov	 eax, DWORD PTR $T69529[ebp]
  00118	83 e0 01	 and	 eax, 1
  0011b	0f 84 16 00 00
	00		 je	 $L69531
  00121	83 65 a4 fe	 and	 DWORD PTR $T69529[ebp], -2 ; fffffffeH
  00125	8b f4		 mov	 esi, esp
  00127	8d 4d ac	 lea	 ecx, DWORD PTR $T69523[ebp]
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00130	3b f4		 cmp	 esi, esp
  00132	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69531:
  00137	c3		 ret	 0
__ehhandler$?GetFileNamePrefix@YL_FileInfo@@SA_NPBDQADI@Z:
  00138	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69534
  0013d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileNamePrefix@YL_FileInfo@@SA_NPBDQADI@Z ENDP	; YL_FileInfo::GetFileNamePrefix
xdata$x	SEGMENT
$T69547	DD	0ffffffffH
	DD	FLAT:$L69543
$T69545	DD	019930520H
	DD	01H
	DD	FLAT:$T69547
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv88 = -56						; size = 4
tv89 = -52						; size = 4
$T69542 = -48						; size = 28
_n2$ = -20						; size = 4
_n$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strFilePath$ = 8					; size = 4
_strFileName$ = 12					; size = 4
?GetFileNamePrefix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC NEAR ; YL_FileInfo::GetFileNamePrefix

; 160  : {

  00bc0	55		 push	 ebp
  00bc1	8b ec		 mov	 ebp, esp
  00bc3	6a ff		 push	 -1
  00bc5	68 00 00 00 00	 push	 __ehhandler$?GetFileNamePrefix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  00bca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00bd0	50		 push	 eax
  00bd1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00bd8	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00bdb	56		 push	 esi
  00bdc	57		 push	 edi
  00bdd	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00be0	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00be5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00bea	f3 ab		 rep stosd

; 161  : 	size_t n = strFilePath.find_last_of("\\");

  00bec	8b f4		 mov	 esi, esp
  00bee	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00bf3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf5	51		 push	 ecx
  00bf6	68 00 00 00 00	 push	 OFFSET FLAT:$SG65200
  00bfb	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00bfe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
  00c04	3b f4		 cmp	 esi, esp
  00c06	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c0b	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 162  : 	if( n == string::npos )

  00c0e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00c14	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00c17	3b 02		 cmp	 eax, DWORD PTR [edx]
  00c19	75 09		 jne	 SHORT $L65201

; 163  : 	{
; 164  : 		n = 0;

  00c1b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0

; 165  : 	}
; 166  : 	else

  00c22	eb 09		 jmp	 SHORT $L65202
$L65201:

; 167  : 	{
; 168  : 		n++;

  00c24	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  00c27	83 c1 01	 add	 ecx, 1
  00c2a	89 4d f0	 mov	 DWORD PTR _n$[ebp], ecx
$L65202:

; 169  : 	}
; 170  : 
; 171  : 	size_t n2 = strFilePath.find_last_of(".");

  00c2d	8b f4		 mov	 esi, esp
  00c2f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00c35	8b 02		 mov	 eax, DWORD PTR [edx]
  00c37	50		 push	 eax
  00c38	68 00 00 00 00	 push	 OFFSET FLAT:$SG65204
  00c3d	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00c40	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
  00c46	3b f4		 cmp	 esi, esp
  00c48	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c4d	89 45 ec	 mov	 DWORD PTR _n2$[ebp], eax

; 172  : 	if( n2 == string::npos )

  00c50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00c56	8b 55 ec	 mov	 edx, DWORD PTR _n2$[ebp]
  00c59	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00c5b	75 15		 jne	 SHORT $L65205

; 173  : 	{
; 174  : 		n2 = strFilePath.size() ;

  00c5d	8b f4		 mov	 esi, esp
  00c5f	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00c62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00c68	3b f4		 cmp	 esi, esp
  00c6a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c6f	89 45 ec	 mov	 DWORD PTR _n2$[ebp], eax
$L65205:

; 175  : 	}
; 176  : 
; 177  : 	strFileName = strFilePath.substr(n, n2 - n);

  00c72	8b 45 ec	 mov	 eax, DWORD PTR _n2$[ebp]
  00c75	2b 45 f0	 sub	 eax, DWORD PTR _n$[ebp]
  00c78	8b f4		 mov	 esi, esp
  00c7a	50		 push	 eax
  00c7b	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  00c7e	51		 push	 ecx
  00c7f	8d 55 d0	 lea	 edx, DWORD PTR $T69542[ebp]
  00c82	52		 push	 edx
  00c83	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00c86	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00c8c	3b f4		 cmp	 esi, esp
  00c8e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c93	89 45 cc	 mov	 DWORD PTR tv89[ebp], eax
  00c96	8b 45 cc	 mov	 eax, DWORD PTR tv89[ebp]
  00c99	89 45 c8	 mov	 DWORD PTR tv88[ebp], eax
  00c9c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00ca3	8b f4		 mov	 esi, esp
  00ca5	8b 4d c8	 mov	 ecx, DWORD PTR tv88[ebp]
  00ca8	51		 push	 ecx
  00ca9	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  00cac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00cb2	3b f4		 cmp	 esi, esp
  00cb4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cb9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00cc0	8b f4		 mov	 esi, esp
  00cc2	8d 4d d0	 lea	 ecx, DWORD PTR $T69542[ebp]
  00cc5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00ccb	3b f4		 cmp	 esi, esp
  00ccd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 178  : 	return true;

  00cd2	b0 01		 mov	 al, 1

; 179  : }

  00cd4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00cd7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00cde	5f		 pop	 edi
  00cdf	5e		 pop	 esi
  00ce0	83 c4 38	 add	 esp, 56			; 00000038H
  00ce3	3b ec		 cmp	 ebp, esp
  00ce5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cea	8b e5		 mov	 esp, ebp
  00cec	5d		 pop	 ebp
  00ced	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69543:
  00142	8b f4		 mov	 esi, esp
  00144	8d 4d d0	 lea	 ecx, DWORD PTR $T69542[ebp]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0014d	3b f4		 cmp	 esi, esp
  0014f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetFileNamePrefix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:
  00154	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69545
  00159	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileNamePrefix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; YL_FileInfo::GetFileNamePrefix
PUBLIC	?GetFileNameSuffix@YL_FileInfo@@SA_NPBDQADI@Z	; YL_FileInfo::GetFileNameSuffix
PUBLIC	?GetFileNameSuffix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileNameSuffix
xdata$x	SEGMENT
$T69568	DD	0ffffffffH
	DD	FLAT:$L69556
	DD	00H
	DD	FLAT:$L69558
$T69562	DD	019930520H
	DD	02H
	DD	FLAT:$T69568
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv81 = -104						; size = 4
tv94 = -100						; size = 4
tv132 = -96						; size = 4
$T69557 = -92						; size = 4
$T69555 = -86						; size = 1
$T69554 = -85						; size = 1
$T69551 = -84						; size = 28
$T69550 = -53						; size = 1
_strFileNameSuffix$ = -48				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszFilePath$ = 8					; size = 4
_szBufferName$ = 12					; size = 4
_unBufferLen$ = 16					; size = 4
?GetFileNameSuffix@YL_FileInfo@@SA_NPBDQADI@Z PROC NEAR	; YL_FileInfo::GetFileNameSuffix

; 182  : {

  00cf0	55		 push	 ebp
  00cf1	8b ec		 mov	 ebp, esp
  00cf3	6a ff		 push	 -1
  00cf5	68 00 00 00 00	 push	 __ehhandler$?GetFileNameSuffix@YL_FileInfo@@SA_NPBDQADI@Z
  00cfa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00d00	50		 push	 eax
  00d01	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00d08	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00d0b	56		 push	 esi
  00d0c	57		 push	 edi
  00d0d	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  00d10	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00d15	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00d1a	f3 ab		 rep stosd
  00d1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00d21	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00d24	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T69557[ebp], 0

; 183  : 	if( pszFilePath == NULL )

  00d2b	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  00d2f	75 07		 jne	 SHORT $L65212

; 184  : 	{
; 185  : 		return false;

  00d31	32 c0		 xor	 al, al
  00d33	e9 17 01 00 00	 jmp	 $L65211
$L65212:

; 186  : 	}
; 187  : 
; 188  : 	string strFileNameSuffix;

  00d38	8b f4		 mov	 esi, esp
  00d3a	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNameSuffix$[ebp]
  00d3d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00d43	3b f4		 cmp	 esi, esp
  00d45	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d4a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 189  : 	if( GetFileNameSuffix( string(pszFilePath),strFileNameSuffix) && strFileNameSuffix.size() < unBufferLen )

  00d51	8b f4		 mov	 esi, esp
  00d53	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  00d56	50		 push	 eax
  00d57	8d 4d ac	 lea	 ecx, DWORD PTR $T69551[ebp]
  00d5a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00d60	3b f4		 cmp	 esi, esp
  00d62	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d67	89 45 a0	 mov	 DWORD PTR tv132[ebp], eax
  00d6a	8b 4d a0	 mov	 ecx, DWORD PTR tv132[ebp]
  00d6d	89 4d 9c	 mov	 DWORD PTR tv94[ebp], ecx
  00d70	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00d74	8b 55 a4	 mov	 edx, DWORD PTR $T69557[ebp]
  00d77	83 ca 01	 or	 edx, 1
  00d7a	89 55 a4	 mov	 DWORD PTR $T69557[ebp], edx
  00d7d	8d 45 d0	 lea	 eax, DWORD PTR _strFileNameSuffix$[ebp]
  00d80	50		 push	 eax
  00d81	8b 4d 9c	 mov	 ecx, DWORD PTR tv94[ebp]
  00d84	51		 push	 ecx
  00d85	e8 00 00 00 00	 call	 ?GetFileNameSuffix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileNameSuffix
  00d8a	83 c4 08	 add	 esp, 8
  00d8d	0f b6 d0	 movzx	 edx, al
  00d90	85 d2		 test	 edx, edx
  00d92	74 20		 je	 SHORT $L69552
  00d94	8b f4		 mov	 esi, esp
  00d96	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNameSuffix$[ebp]
  00d99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00d9f	3b f4		 cmp	 esi, esp
  00da1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00da6	3b 45 10	 cmp	 eax, DWORD PTR _unBufferLen$[ebp]
  00da9	73 09		 jae	 SHORT $L69552
  00dab	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00db2	eb 07		 jmp	 SHORT $L69553
$L69552:
  00db4	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L69553:
  00dbb	8a 45 98	 mov	 al, BYTE PTR tv81[ebp]
  00dbe	88 45 cb	 mov	 BYTE PTR $T69550[ebp], al
  00dc1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00dc8	8b 4d a4	 mov	 ecx, DWORD PTR $T69557[ebp]
  00dcb	83 e1 01	 and	 ecx, 1
  00dce	74 16		 je	 SHORT $L69560
  00dd0	83 65 a4 fe	 and	 DWORD PTR $T69557[ebp], -2 ; fffffffeH
  00dd4	8b f4		 mov	 esi, esp
  00dd6	8d 4d ac	 lea	 ecx, DWORD PTR $T69551[ebp]
  00dd9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00ddf	3b f4		 cmp	 esi, esp
  00de1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L69560:
  00de6	0f b6 55 cb	 movzx	 edx, BYTE PTR $T69550[ebp]
  00dea	85 d2		 test	 edx, edx
  00dec	74 41		 je	 SHORT $L65215

; 190  : 	{
; 191  : 		strcpy( szBufferName,strFileNameSuffix.c_str() );

  00dee	8b f4		 mov	 esi, esp
  00df0	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNameSuffix$[ebp]
  00df3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00df9	3b f4		 cmp	 esi, esp
  00dfb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e00	50		 push	 eax
  00e01	8b 45 0c	 mov	 eax, DWORD PTR _szBufferName$[ebp]
  00e04	50		 push	 eax
  00e05	e8 00 00 00 00	 call	 _strcpy
  00e0a	83 c4 08	 add	 esp, 8

; 192  : 		return true;

  00e0d	c6 45 ab 01	 mov	 BYTE PTR $T69554[ebp], 1
  00e11	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00e18	8b f4		 mov	 esi, esp
  00e1a	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNameSuffix$[ebp]
  00e1d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00e23	3b f4		 cmp	 esi, esp
  00e25	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e2a	8a 45 ab	 mov	 al, BYTE PTR $T69554[ebp]
  00e2d	eb 20		 jmp	 SHORT $L65211
$L65215:

; 193  : 
; 194  : 	}
; 195  : 	return false;	

  00e2f	c6 45 aa 00	 mov	 BYTE PTR $T69555[ebp], 0
  00e33	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00e3a	8b f4		 mov	 esi, esp
  00e3c	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNameSuffix$[ebp]
  00e3f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00e45	3b f4		 cmp	 esi, esp
  00e47	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e4c	8a 45 aa	 mov	 al, BYTE PTR $T69555[ebp]
$L65211:

; 196  : }

  00e4f	52		 push	 edx
  00e50	8b cd		 mov	 ecx, ebp
  00e52	50		 push	 eax
  00e53	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69567
  00e59	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00e5e	58		 pop	 eax
  00e5f	5a		 pop	 edx
  00e60	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00e63	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00e6a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e6d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e72	5f		 pop	 edi
  00e73	5e		 pop	 esi
  00e74	83 c4 68	 add	 esp, 104		; 00000068H
  00e77	3b ec		 cmp	 ebp, esp
  00e79	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e7e	8b e5		 mov	 esp, ebp
  00e80	5d		 pop	 ebp
  00e81	c3		 ret	 0
$L69567:
  00e82	01 00 00 00	 DD	 1
  00e86	00 00 00 00	 DD	 $L69566
$L69566:
  00e8a	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00e8e	1c 00 00 00	 DD	 28			; 0000001cH
  00e92	00 00 00 00	 DD	 $L69563
$L69563:
  00e96	73		 DB	 115			; 00000073H
  00e97	74		 DB	 116			; 00000074H
  00e98	72		 DB	 114			; 00000072H
  00e99	46		 DB	 70			; 00000046H
  00e9a	69		 DB	 105			; 00000069H
  00e9b	6c		 DB	 108			; 0000006cH
  00e9c	65		 DB	 101			; 00000065H
  00e9d	4e		 DB	 78			; 0000004eH
  00e9e	61		 DB	 97			; 00000061H
  00e9f	6d		 DB	 109			; 0000006dH
  00ea0	65		 DB	 101			; 00000065H
  00ea1	53		 DB	 83			; 00000053H
  00ea2	75		 DB	 117			; 00000075H
  00ea3	66		 DB	 102			; 00000066H
  00ea4	66		 DB	 102			; 00000066H
  00ea5	69		 DB	 105			; 00000069H
  00ea6	78		 DB	 120			; 00000078H
  00ea7	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L69556:
  0015e	8b f4		 mov	 esi, esp
  00160	8d 4d d0	 lea	 ecx, DWORD PTR _strFileNameSuffix$[ebp]
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00169	3b f4		 cmp	 esi, esp
  0016b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69558:
  00170	8b 45 a4	 mov	 eax, DWORD PTR $T69557[ebp]
  00173	83 e0 01	 and	 eax, 1
  00176	0f 84 16 00 00
	00		 je	 $L69559
  0017c	83 65 a4 fe	 and	 DWORD PTR $T69557[ebp], -2 ; fffffffeH
  00180	8b f4		 mov	 esi, esp
  00182	8d 4d ac	 lea	 ecx, DWORD PTR $T69551[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0018b	3b f4		 cmp	 esi, esp
  0018d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69559:
  00192	c3		 ret	 0
__ehhandler$?GetFileNameSuffix@YL_FileInfo@@SA_NPBDQADI@Z:
  00193	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69562
  00198	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileNameSuffix@YL_FileInfo@@SA_NPBDQADI@Z ENDP	; YL_FileInfo::GetFileNameSuffix
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
xdata$x	SEGMENT
$T69575	DD	0ffffffffH
	DD	FLAT:$L69571
$T69573	DD	019930520H
	DD	01H
	DD	FLAT:$T69575
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv87 = -52						; size = 4
tv88 = -48						; size = 4
$T69570 = -44						; size = 28
_n$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strFilePath$ = 8					; size = 4
_strFileName$ = 12					; size = 4
?GetFileNameSuffix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC NEAR ; YL_FileInfo::GetFileNameSuffix

; 199  : {

  00eb0	55		 push	 ebp
  00eb1	8b ec		 mov	 ebp, esp
  00eb3	6a ff		 push	 -1
  00eb5	68 00 00 00 00	 push	 __ehhandler$?GetFileNameSuffix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  00eba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00ec0	50		 push	 eax
  00ec1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00ec8	83 ec 28	 sub	 esp, 40			; 00000028H
  00ecb	56		 push	 esi
  00ecc	57		 push	 edi
  00ecd	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00ed0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00ed5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00eda	f3 ab		 rep stosd

; 200  : 	size_t n = strFilePath.find_last_of(".");

  00edc	8b f4		 mov	 esi, esp
  00ede	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00ee3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ee5	51		 push	 ecx
  00ee6	68 00 00 00 00	 push	 OFFSET FLAT:$SG65224
  00eeb	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00eee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
  00ef4	3b f4		 cmp	 esi, esp
  00ef6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00efb	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 201  : 	if( n == string::npos )

  00efe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00f04	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00f07	3b 02		 cmp	 eax, DWORD PTR [edx]
  00f09	75 1e		 jne	 SHORT $L65225

; 202  : 	{
; 203  : 		strFileName = "";

  00f0b	8b f4		 mov	 esi, esp
  00f0d	68 00 00 00 00	 push	 OFFSET FLAT:$SG65226
  00f12	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  00f15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  00f1b	3b f4		 cmp	 esi, esp
  00f1d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 204  : 		return true;

  00f22	b0 01		 mov	 al, 1
  00f24	e9 9f 00 00 00	 jmp	 $L65222
$L65225:

; 205  : 	}
; 206  : 	else
; 207  : 	{
; 208  : 		n++;

  00f29	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  00f2c	83 c1 01	 add	 ecx, 1
  00f2f	89 4d f0	 mov	 DWORD PTR _n$[ebp], ecx

; 209  : 	}	
; 210  : 	if( n >= strFilePath.size() )

  00f32	8b f4		 mov	 esi, esp
  00f34	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00f37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00f3d	3b f4		 cmp	 esi, esp
  00f3f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f44	39 45 f0	 cmp	 DWORD PTR _n$[ebp], eax
  00f47	72 1b		 jb	 SHORT $L65228

; 211  : 	{
; 212  : 		strFileName = "";

  00f49	8b f4		 mov	 esi, esp
  00f4b	68 00 00 00 00	 push	 OFFSET FLAT:$SG65229
  00f50	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  00f53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  00f59	3b f4		 cmp	 esi, esp
  00f5b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 213  : 		return true;

  00f60	b0 01		 mov	 al, 1
  00f62	eb 64		 jmp	 SHORT $L65222
$L65228:

; 214  : 	}
; 215  : 
; 216  : 	strFileName = strFilePath.substr(n);

  00f64	8b f4		 mov	 esi, esp
  00f66	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00f6c	8b 02		 mov	 eax, DWORD PTR [edx]
  00f6e	50		 push	 eax
  00f6f	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  00f72	51		 push	 ecx
  00f73	8d 55 d4	 lea	 edx, DWORD PTR $T69570[ebp]
  00f76	52		 push	 edx
  00f77	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  00f7a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00f80	3b f4		 cmp	 esi, esp
  00f82	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f87	89 45 d0	 mov	 DWORD PTR tv88[ebp], eax
  00f8a	8b 45 d0	 mov	 eax, DWORD PTR tv88[ebp]
  00f8d	89 45 cc	 mov	 DWORD PTR tv87[ebp], eax
  00f90	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00f97	8b f4		 mov	 esi, esp
  00f99	8b 4d cc	 mov	 ecx, DWORD PTR tv87[ebp]
  00f9c	51		 push	 ecx
  00f9d	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  00fa0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00fa6	3b f4		 cmp	 esi, esp
  00fa8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00fb4	8b f4		 mov	 esi, esp
  00fb6	8d 4d d4	 lea	 ecx, DWORD PTR $T69570[ebp]
  00fb9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00fbf	3b f4		 cmp	 esi, esp
  00fc1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 217  : 	return true;

  00fc6	b0 01		 mov	 al, 1
$L65222:

; 218  : 
; 219  : }

  00fc8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00fcb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00fd2	5f		 pop	 edi
  00fd3	5e		 pop	 esi
  00fd4	83 c4 34	 add	 esp, 52			; 00000034H
  00fd7	3b ec		 cmp	 ebp, esp
  00fd9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fde	8b e5		 mov	 esp, ebp
  00fe0	5d		 pop	 ebp
  00fe1	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69571:
  0019d	8b f4		 mov	 esi, esp
  0019f	8d 4d d4	 lea	 ecx, DWORD PTR $T69570[ebp]
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001a8	3b f4		 cmp	 esi, esp
  001aa	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetFileNameSuffix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:
  001af	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69573
  001b4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileNameSuffix@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; YL_FileInfo::GetFileNameSuffix
PUBLIC	?GetFileDirPath@YL_FileInfo@@SA_NPBDQADI@Z	; YL_FileInfo::GetFileDirPath
EXTRN	__imp__strncpy:NEAR
EXTRN	__imp__strrchr:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pTmp$ = -4						; size = 4
_pszFilePath$ = 8					; size = 4
_szBufferDirPath$ = 12					; size = 4
_unBufferLen$ = 16					; size = 4
?GetFileDirPath@YL_FileInfo@@SA_NPBDQADI@Z PROC NEAR	; YL_FileInfo::GetFileDirPath

; 223  : {

  00ff0	55		 push	 ebp
  00ff1	8b ec		 mov	 ebp, esp
  00ff3	51		 push	 ecx
  00ff4	56		 push	 esi
  00ff5	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 224  : 	if( pszFilePath == NULL )

  00ffc	83 7d 08 00	 cmp	 DWORD PTR _pszFilePath$[ebp], 0
  01000	75 04		 jne	 SHORT $L65236

; 225  : 	{
; 226  : 		return false;

  01002	32 c0		 xor	 al, al
  01004	eb 6f		 jmp	 SHORT $L65235
$L65236:

; 227  : 	}
; 228  : 	char* pTmp =(char*) strrchr(pszFilePath,'\\');

  01006	8b f4		 mov	 esi, esp
  01008	6a 5c		 push	 92			; 0000005cH
  0100a	8b 45 08	 mov	 eax, DWORD PTR _pszFilePath$[ebp]
  0100d	50		 push	 eax
  0100e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strrchr
  01014	83 c4 08	 add	 esp, 8
  01017	3b f4		 cmp	 esi, esp
  01019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0101e	89 45 fc	 mov	 DWORD PTR _pTmp$[ebp], eax

; 229  : 	if( pTmp == NULL || *(pTmp+1) == '\0' )

  01021	83 7d fc 00	 cmp	 DWORD PTR _pTmp$[ebp], 0
  01025	74 0b		 je	 SHORT $L65240
  01027	8b 4d fc	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  0102a	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  0102e	85 d2		 test	 edx, edx
  01030	75 04		 jne	 SHORT $L65239
$L65240:

; 230  : 	{
; 231  : 		return false;

  01032	32 c0		 xor	 al, al
  01034	eb 3f		 jmp	 SHORT $L65235
$L65239:

; 232  : 	}
; 233  : 	
; 234  : 	if( ((unsigned int) (pTmp - pszFilePath))  >= unBufferLen )

  01036	8b 45 fc	 mov	 eax, DWORD PTR _pTmp$[ebp]
  01039	2b 45 08	 sub	 eax, DWORD PTR _pszFilePath$[ebp]
  0103c	3b 45 10	 cmp	 eax, DWORD PTR _unBufferLen$[ebp]
  0103f	72 04		 jb	 SHORT $L65242

; 235  : 	{
; 236  : 		return false;

  01041	32 c0		 xor	 al, al
  01043	eb 30		 jmp	 SHORT $L65235
$L65242:

; 237  : 	}
; 238  : 	strncpy(szBufferDirPath,pszFilePath,pTmp-pszFilePath);

  01045	8b 4d fc	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  01048	2b 4d 08	 sub	 ecx, DWORD PTR _pszFilePath$[ebp]
  0104b	8b f4		 mov	 esi, esp
  0104d	51		 push	 ecx
  0104e	8b 55 08	 mov	 edx, DWORD PTR _pszFilePath$[ebp]
  01051	52		 push	 edx
  01052	8b 45 0c	 mov	 eax, DWORD PTR _szBufferDirPath$[ebp]
  01055	50		 push	 eax
  01056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0105c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0105f	3b f4		 cmp	 esi, esp
  01061	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 239  : 	szBufferDirPath[pTmp-pszFilePath] = '\0';

  01066	8b 4d fc	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  01069	2b 4d 08	 sub	 ecx, DWORD PTR _pszFilePath$[ebp]
  0106c	8b 55 0c	 mov	 edx, DWORD PTR _szBufferDirPath$[ebp]
  0106f	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 240  : 	return true;	

  01073	b0 01		 mov	 al, 1
$L65235:

; 241  : }

  01075	5e		 pop	 esi
  01076	83 c4 04	 add	 esp, 4
  01079	3b ec		 cmp	 ebp, esp
  0107b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01080	8b e5		 mov	 esp, ebp
  01082	5d		 pop	 ebp
  01083	c3		 ret	 0
?GetFileDirPath@YL_FileInfo@@SA_NPBDQADI@Z ENDP		; YL_FileInfo::GetFileDirPath
_TEXT	ENDS
PUBLIC	?GetFileDirPath@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; YL_FileInfo::GetFileDirPath
xdata$x	SEGMENT
$T69583	DD	0ffffffffH
	DD	FLAT:$L69579
$T69581	DD	019930520H
	DD	01H
	DD	FLAT:$T69583
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv79 = -52						; size = 4
tv80 = -48						; size = 4
$T69578 = -44						; size = 28
_n$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strFilePath$ = 8					; size = 4
_strFileDirPath$ = 12					; size = 4
?GetFileDirPath@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC NEAR ; YL_FileInfo::GetFileDirPath

; 244  : {

  01090	55		 push	 ebp
  01091	8b ec		 mov	 ebp, esp
  01093	6a ff		 push	 -1
  01095	68 00 00 00 00	 push	 __ehhandler$?GetFileDirPath@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  0109a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  010a0	50		 push	 eax
  010a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  010a8	83 ec 28	 sub	 esp, 40			; 00000028H
  010ab	56		 push	 esi
  010ac	57		 push	 edi
  010ad	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  010b0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  010b5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  010ba	f3 ab		 rep stosd

; 245  : 	size_t n = strFilePath.find_last_of("\\");

  010bc	8b f4		 mov	 esi, esp
  010be	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  010c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  010c5	51		 push	 ecx
  010c6	68 00 00 00 00	 push	 OFFSET FLAT:$SG65248
  010cb	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  010ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
  010d4	3b f4		 cmp	 esi, esp
  010d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010db	89 45 f0	 mov	 DWORD PTR _n$[ebp], eax

; 246  : 	if( n == string::npos )

  010de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  010e4	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  010e7	3b 02		 cmp	 eax, DWORD PTR [edx]
  010e9	75 04		 jne	 SHORT $L65249

; 247  : 	{
; 248  : 		return false;

  010eb	32 c0		 xor	 al, al
  010ed	eb 5d		 jmp	 SHORT $L65246
$L65249:

; 249  : 	}
; 250  : 	strFileDirPath = strFilePath.substr(0,n);

  010ef	8b f4		 mov	 esi, esp
  010f1	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  010f4	51		 push	 ecx
  010f5	6a 00		 push	 0
  010f7	8d 55 d4	 lea	 edx, DWORD PTR $T69578[ebp]
  010fa	52		 push	 edx
  010fb	8b 4d 08	 mov	 ecx, DWORD PTR _strFilePath$[ebp]
  010fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  01104	3b f4		 cmp	 esi, esp
  01106	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0110b	89 45 d0	 mov	 DWORD PTR tv80[ebp], eax
  0110e	8b 45 d0	 mov	 eax, DWORD PTR tv80[ebp]
  01111	89 45 cc	 mov	 DWORD PTR tv79[ebp], eax
  01114	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0111b	8b f4		 mov	 esi, esp
  0111d	8b 4d cc	 mov	 ecx, DWORD PTR tv79[ebp]
  01120	51		 push	 ecx
  01121	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileDirPath$[ebp]
  01124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0112a	3b f4		 cmp	 esi, esp
  0112c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01131	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01138	8b f4		 mov	 esi, esp
  0113a	8d 4d d4	 lea	 ecx, DWORD PTR $T69578[ebp]
  0113d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01143	3b f4		 cmp	 esi, esp
  01145	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 251  : 	return true;

  0114a	b0 01		 mov	 al, 1
$L65246:

; 252  : }

  0114c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0114f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01156	5f		 pop	 edi
  01157	5e		 pop	 esi
  01158	83 c4 34	 add	 esp, 52			; 00000034H
  0115b	3b ec		 cmp	 ebp, esp
  0115d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01162	8b e5		 mov	 esp, ebp
  01164	5d		 pop	 ebp
  01165	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L69579:
  001b9	8b f4		 mov	 esi, esp
  001bb	8d 4d d4	 lea	 ecx, DWORD PTR $T69578[ebp]
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001c4	3b f4		 cmp	 esi, esp
  001c6	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetFileDirPath@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:
  001cb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69581
  001d0	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileDirPath@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; YL_FileInfo::GetFileDirPath
PUBLIC	?GetFileContent@YL_FileInfo@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; YL_FileInfo::GetFileContent
EXTRN	__imp__fclose:NEAR
EXTRN	__imp__fopen:NEAR
EXTRN	__imp__fread:NEAR
EXTRN	_memset:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
xdata$x	SEGMENT
$T69598	DD	0ffffffffH
	DD	FLAT:$L69587
	DD	00H
	DD	FLAT:$L69586
$T69591	DD	019930520H
	DD	02H
	DD	FLAT:$T69598
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T69588 = -1092						; size = 4
_szBuffer$65260 = -1084					; size = 1024
_f$ = -56						; size = 4
_res$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_strFileName$ = 12					; size = 4
?GetFileContent@YL_FileInfo@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z PROC NEAR ; YL_FileInfo::GetFileContent

; 255  : {

  01170	55		 push	 ebp
  01171	8b ec		 mov	 ebp, esp
  01173	6a ff		 push	 -1
  01175	68 00 00 00 00	 push	 __ehhandler$?GetFileContent@YL_FileInfo@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  0117a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01180	50		 push	 eax
  01181	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01188	81 ec 38 04 00
	00		 sub	 esp, 1080		; 00000438H
  0118e	56		 push	 esi
  0118f	57		 push	 edi
  01190	8d bd bc fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1092]
  01196	b9 0e 01 00 00	 mov	 ecx, 270		; 0000010eH
  0119b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  011a0	f3 ab		 rep stosd
  011a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  011a7	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  011aa	c7 85 bc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T69588[ebp], 0

; 256  : 	string res = "";

  011b4	8b f4		 mov	 esi, esp
  011b6	68 00 00 00 00	 push	 OFFSET FLAT:$SG65256
  011bb	8d 4d d0	 lea	 ecx, DWORD PTR _res$[ebp]
  011be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  011c4	3b f4		 cmp	 esi, esp
  011c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011cb	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 257  : 	FILE * f = fopen(strFileName.c_str(), "r");

  011d2	8b f4		 mov	 esi, esp
  011d4	68 00 00 00 00	 push	 OFFSET FLAT:$SG65258
  011d9	8b fc		 mov	 edi, esp
  011db	8b 4d 0c	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  011de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  011e4	3b fc		 cmp	 edi, esp
  011e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011eb	50		 push	 eax
  011ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  011f2	83 c4 08	 add	 esp, 8
  011f5	3b f4		 cmp	 esi, esp
  011f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011fc	89 45 c8	 mov	 DWORD PTR _f$[ebp], eax

; 258  : 	if (f)

  011ff	83 7d c8 00	 cmp	 DWORD PTR _f$[ebp], 0
  01203	0f 84 89 00 00
	00		 je	 $L65259

; 259  : 	{
; 260  : 		char szBuffer[1024];
; 261  : 		memset( szBuffer,0,1024);

  01209	68 00 04 00 00	 push	 1024			; 00000400H
  0120e	6a 00		 push	 0
  01210	8d 85 c4 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$65260[ebp]
  01216	50		 push	 eax
  01217	e8 00 00 00 00	 call	 _memset
  0121c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L65262:

; 262  : 		while( fread( szBuffer,1,1023,f) )

  0121f	8b f4		 mov	 esi, esp
  01221	8b 4d c8	 mov	 ecx, DWORD PTR _f$[ebp]
  01224	51		 push	 ecx
  01225	68 ff 03 00 00	 push	 1023			; 000003ffH
  0122a	6a 01		 push	 1
  0122c	8d 95 c4 fb ff
	ff		 lea	 edx, DWORD PTR _szBuffer$65260[ebp]
  01232	52		 push	 edx
  01233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  01239	83 c4 10	 add	 esp, 16			; 00000010H
  0123c	3b f4		 cmp	 esi, esp
  0123e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01243	85 c0		 test	 eax, eax
  01245	74 35		 je	 SHORT $L65263

; 263  : 		{			
; 264  : 			szBuffer[1023] = '\0';

  01247	c6 45 c3 00	 mov	 BYTE PTR _szBuffer$65260[ebp+1023], 0

; 265  : 			res += szBuffer;			

  0124b	8b f4		 mov	 esi, esp
  0124d	8d 85 c4 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$65260[ebp]
  01253	50		 push	 eax
  01254	8d 4d d0	 lea	 ecx, DWORD PTR _res$[ebp]
  01257	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  0125d	3b f4		 cmp	 esi, esp
  0125f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 266  : 			memset( szBuffer,0,1024);

  01264	68 00 04 00 00	 push	 1024			; 00000400H
  01269	6a 00		 push	 0
  0126b	8d 8d c4 fb ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$65260[ebp]
  01271	51		 push	 ecx
  01272	e8 00 00 00 00	 call	 _memset
  01277	83 c4 0c	 add	 esp, 12			; 0000000cH

; 267  : 		}

  0127a	eb a3		 jmp	 SHORT $L65262
$L65263:

; 268  : 		fclose(f);

  0127c	8b f4		 mov	 esi, esp
  0127e	8b 55 c8	 mov	 edx, DWORD PTR _f$[ebp]
  01281	52		 push	 edx
  01282	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  01288	83 c4 04	 add	 esp, 4
  0128b	3b f4		 cmp	 esi, esp
  0128d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L65259:

; 269  : 	}
; 270  : 	return res;

  01292	8b f4		 mov	 esi, esp
  01294	8d 45 d0	 lea	 eax, DWORD PTR _res$[ebp]
  01297	50		 push	 eax
  01298	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0129b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  012a1	3b f4		 cmp	 esi, esp
  012a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  012a8	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR $T69588[ebp]
  012ae	83 c9 01	 or	 ecx, 1
  012b1	89 8d bc fb ff
	ff		 mov	 DWORD PTR $T69588[ebp], ecx
  012b7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  012bb	8b f4		 mov	 esi, esp
  012bd	8d 4d d0	 lea	 ecx, DWORD PTR _res$[ebp]
  012c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  012c6	3b f4		 cmp	 esi, esp
  012c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  012cd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 271  : 
; 272  : }

  012d0	52		 push	 edx
  012d1	8b cd		 mov	 ecx, ebp
  012d3	50		 push	 eax
  012d4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69597
  012da	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  012df	58		 pop	 eax
  012e0	5a		 pop	 edx
  012e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  012e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  012eb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  012ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  012f3	5f		 pop	 edi
  012f4	5e		 pop	 esi
  012f5	81 c4 44 04 00
	00		 add	 esp, 1092		; 00000444H
  012fb	3b ec		 cmp	 ebp, esp
  012fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01302	8b e5		 mov	 esp, ebp
  01304	5d		 pop	 ebp
  01305	c3		 ret	 0
$L69597:
  01306	02 00 00 00	 DD	 2
  0130a	00 00 00 00	 DD	 $L69596
$L69596:
  0130e	d0 ff ff ff	 DD	 -48			; ffffffd0H
  01312	1c 00 00 00	 DD	 28			; 0000001cH
  01316	00 00 00 00	 DD	 $L69592
  0131a	c4 fb ff ff	 DD	 -1084			; fffffbc4H
  0131e	00 04 00 00	 DD	 1024			; 00000400H
  01322	00 00 00 00	 DD	 $L69593
$L69593:
  01326	73		 DB	 115			; 00000073H
  01327	7a		 DB	 122			; 0000007aH
  01328	42		 DB	 66			; 00000042H
  01329	75		 DB	 117			; 00000075H
  0132a	66		 DB	 102			; 00000066H
  0132b	66		 DB	 102			; 00000066H
  0132c	65		 DB	 101			; 00000065H
  0132d	72		 DB	 114			; 00000072H
  0132e	00		 DB	 0
$L69592:
  0132f	72		 DB	 114			; 00000072H
  01330	65		 DB	 101			; 00000065H
  01331	73		 DB	 115			; 00000073H
  01332	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L69586:
  001d5	8b f4		 mov	 esi, esp
  001d7	8d 4d d0	 lea	 ecx, DWORD PTR _res$[ebp]
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001e0	3b f4		 cmp	 esi, esp
  001e2	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69587:
  001e7	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T69588[ebp]
  001ed	83 e0 01	 and	 eax, 1
  001f0	0f 84 19 00 00
	00		 je	 $L69589
  001f6	83 a5 bc fb ff
	ff fe		 and	 DWORD PTR $T69588[ebp], -2 ; fffffffeH
  001fd	8b f4		 mov	 esi, esp
  001ff	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00208	3b f4		 cmp	 esi, esp
  0020a	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69589:
  0020f	c3		 ret	 0
__ehhandler$?GetFileContent@YL_FileInfo@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z:
  00210	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69591
  00215	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFileContent@YL_FileInfo@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ENDP ; YL_FileInfo::GetFileContent
PUBLIC	?SetFileContent@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; YL_FileInfo::SetFileContent
EXTRN	__imp__fprintf:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_f$ = -4						; size = 4
_strFileName$ = 8					; size = 4
_strContent$ = 12					; size = 4
?SetFileContent@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC NEAR ; YL_FileInfo::SetFileContent

; 275  : {

  01340	55		 push	 ebp
  01341	8b ec		 mov	 ebp, esp
  01343	51		 push	 ecx
  01344	56		 push	 esi
  01345	57		 push	 edi
  01346	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 276  : 	FILE * f = fopen(strFileName.c_str(), "w");

  0134d	8b f4		 mov	 esi, esp
  0134f	68 00 00 00 00	 push	 OFFSET FLAT:$SG65269
  01354	8b fc		 mov	 edi, esp
  01356	8b 4d 08	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  01359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0135f	3b fc		 cmp	 edi, esp
  01361	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01366	50		 push	 eax
  01367	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0136d	83 c4 08	 add	 esp, 8
  01370	3b f4		 cmp	 esi, esp
  01372	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01377	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax

; 277  : 	if (f)

  0137a	83 7d fc 00	 cmp	 DWORD PTR _f$[ebp], 0
  0137e	74 43		 je	 SHORT $L65270

; 278  : 	{
; 279  : 		fprintf(f, strContent.c_str());

  01380	8b f4		 mov	 esi, esp
  01382	8b 4d 0c	 mov	 ecx, DWORD PTR _strContent$[ebp]
  01385	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0138b	3b f4		 cmp	 esi, esp
  0138d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01392	8b f4		 mov	 esi, esp
  01394	50		 push	 eax
  01395	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  01398	50		 push	 eax
  01399	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0139f	83 c4 08	 add	 esp, 8
  013a2	3b f4		 cmp	 esi, esp
  013a4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 280  : 		fclose(f);

  013a9	8b f4		 mov	 esi, esp
  013ab	8b 4d fc	 mov	 ecx, DWORD PTR _f$[ebp]
  013ae	51		 push	 ecx
  013af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  013b5	83 c4 04	 add	 esp, 4
  013b8	3b f4		 cmp	 esi, esp
  013ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 281  : 		return true;

  013bf	b0 01		 mov	 al, 1
  013c1	eb 02		 jmp	 SHORT $L65267
$L65270:

; 282  : 	}
; 283  : 	else
; 284  : 	{
; 285  : 		return false;

  013c3	32 c0		 xor	 al, al
$L65267:

; 286  : 	}
; 287  : }

  013c5	5f		 pop	 edi
  013c6	5e		 pop	 esi
  013c7	83 c4 04	 add	 esp, 4
  013ca	3b ec		 cmp	 ebp, esp
  013cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  013d1	8b e5		 mov	 esp, ebp
  013d3	5d		 pop	 ebp
  013d4	c3		 ret	 0
?SetFileContent@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; YL_FileInfo::SetFileContent
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T69609	DD	0ffffffffH
	DD	FLAT:$L69603
	DD	00H
	DD	FLAT:$L69602
$T69607	DD	019930520H
	DD	02H
	DD	FLAT:$T69609
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69604 = -44						; size = 4
$T69601 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69604[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69601[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69604[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69604[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69601[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69602:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69601[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69603:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69604[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69605
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69604[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69605:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69607
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69621	DD	0ffffffffH
	DD	FLAT:$L69615
	DD	00H
	DD	FLAT:$L69614
$T69619	DD	019930520H
	DD	02H
	DD	FLAT:$T69621
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69616 = -44						; size = 4
$T69613 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 31   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69616[ebp], 0

; 32   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69613[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69616[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69616[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69613[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 33   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69614:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69613[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69615:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69616[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69617
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69616[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69617:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69619
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69633	DD	0ffffffffH
	DD	FLAT:$L69627
	DD	00H
	DD	FLAT:$L69626
$T69631	DD	019930520H
	DD	02H
	DD	FLAT:$T69633
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
_TEXT	SEGMENT
tv78 = -52						; size = 4
tv83 = -48						; size = 4
$T69628 = -44						; size = 4
$T69625 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 41   : 	{	// return character + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69628[ebp], 0

; 42   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8a 45 0c	 mov	 al, BYTE PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	6a 01		 push	 1
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T69625[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 d0	 mov	 DWORD PTR tv83[ebp], eax
  0004e	8b 4d d0	 mov	 ecx, DWORD PTR tv83[ebp]
  00051	89 4d cc	 mov	 DWORD PTR tv78[ebp], ecx
  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00060	52		 push	 edx
  00061	8b 4d cc	 mov	 ecx, DWORD PTR tv78[ebp]
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b f4		 mov	 esi, esp
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b 45 d4	 mov	 eax, DWORD PTR $T69628[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 45 d4	 mov	 DWORD PTR $T69628[ebp], eax
  0008d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00091	8b f4		 mov	 esi, esp
  00093	8d 4d d8	 lea	 ecx, DWORD PTR $T69625[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	83 c4 34	 add	 esp, 52			; 00000034H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69626:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69625[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69627:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69628[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69629
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69628[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69629:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69631
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@DABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69645	DD	0ffffffffH
	DD	FLAT:$L69639
	DD	00H
	DD	FLAT:$L69638
$T69643	DD	019930520H
	DD	02H
	DD	FLAT:$T69645
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69640 = -44						; size = 4
$T69637 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69640[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69637[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69640[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69640[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69637[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69638:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69637[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69639:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69640[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69641
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69640[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69641:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69643
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69657	DD	0ffffffffH
	DD	FLAT:$L69651
	DD	00H
	DD	FLAT:$L69650
$T69655	DD	019930520H
	DD	02H
	DD	FLAT:$T69657
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69652 = -44						; size = 4
$T69649 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 61   : 	{	// return string + character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69652[ebp], 0

; 62   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69649[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8a 55 10	 mov	 dl, BYTE PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69652[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69652[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69649[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69650:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69649[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69651:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69652[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69653
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69652[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69653:
  00034	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69655
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69669	DD	0ffffffffH
	DD	FLAT:$L69663
	DD	00H
	DD	FLAT:$L69662
$T69667	DD	019930520H
	DD	02H
	DD	FLAT:$T69669
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69664 = -44						; size = 4
$T69661 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69664[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69661[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69664[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69664[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69661[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69662:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69661[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69663:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69664[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69665
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69664[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69665:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69667
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69681	DD	0ffffffffH
	DD	FLAT:$L69675
	DD	00H
	DD	FLAT:$L69674
$T69679	DD	019930520H
	DD	02H
	DD	FLAT:$T69681
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69676 = -44						; size = 4
$T69673 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 31   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69676[ebp], 0

; 32   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69673[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69676[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69676[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69673[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 33   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69674:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69673[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69675:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69676[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69677
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69676[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69677:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69679
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69693	DD	0ffffffffH
	DD	FLAT:$L69687
	DD	00H
	DD	FLAT:$L69686
$T69691	DD	019930520H
	DD	02H
	DD	FLAT:$T69693
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
_TEXT	SEGMENT
tv78 = -52						; size = 4
tv83 = -48						; size = 4
$T69688 = -44						; size = 4
$T69685 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 2
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 41   : 	{	// return character + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69688[ebp], 0

; 42   : 	return (basic_string<_Elem, _Traits, _Alloc>(1, _Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	66 8b 45 0c	 mov	 ax, WORD PTR __Left$[ebp]
  00039	50		 push	 eax
  0003a	6a 01		 push	 1
  0003c	8d 4d d8	 lea	 ecx, DWORD PTR $T69685[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	89 45 d0	 mov	 DWORD PTR tv83[ebp], eax
  0004f	8b 4d d0	 mov	 ecx, DWORD PTR tv83[ebp]
  00052	89 4d cc	 mov	 DWORD PTR tv78[ebp], ecx
  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005c	8b f4		 mov	 esi, esp
  0005e	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00061	52		 push	 edx
  00062	8b 4d cc	 mov	 ecx, DWORD PTR tv78[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b f4		 mov	 esi, esp
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b 45 d4	 mov	 eax, DWORD PTR $T69688[ebp]
  00088	83 c8 01	 or	 eax, 1
  0008b	89 45 d4	 mov	 DWORD PTR $T69688[ebp], eax
  0008e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00092	8b f4		 mov	 esi, esp
  00094	8d 4d d8	 lea	 ecx, DWORD PTR $T69685[ebp]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	83 c4 34	 add	 esp, 52			; 00000034H
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69686:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69685[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69687:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69688[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69689
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69688[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69689:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69691
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69705	DD	0ffffffffH
	DD	FLAT:$L69699
	DD	00H
	DD	FLAT:$L69698
$T69703	DD	019930520H
	DD	02H
	DD	FLAT:$T69705
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69700 = -44						; size = 4
$T69697 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69700[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69697[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0005e	52		 push	 edx
  0005f	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b f4		 mov	 esi, esp
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b 45 d4	 mov	 eax, DWORD PTR $T69700[ebp]
  00085	83 c8 01	 or	 eax, 1
  00088	89 45 d4	 mov	 DWORD PTR $T69700[ebp], eax
  0008b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008f	8b f4		 mov	 esi, esp
  00091	8d 4d d8	 lea	 ecx, DWORD PTR $T69697[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 34	 add	 esp, 52			; 00000034H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69698:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69697[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69699:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69700[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69701
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69700[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69701:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69703
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69717	DD	0ffffffffH
	DD	FLAT:$L69711
	DD	00H
	DD	FLAT:$L69710
$T69715	DD	019930520H
	DD	02H
	DD	FLAT:$T69717
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T69712 = -44						; size = 4
$T69709 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 2
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z PROC NEAR ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 61   : 	{	// return string + character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00020	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T69712[ebp], 0

; 62   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00038	50		 push	 eax
  00039	8d 4d d8	 lea	 ecx, DWORD PTR $T69709[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  0004c	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  0004f	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	8b f4		 mov	 esi, esp
  0005b	66 8b 55 10	 mov	 dx, WORD PTR __Right$[ebp]
  0005f	52		 push	 edx
  00060	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b f4		 mov	 esi, esp
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b 45 d4	 mov	 eax, DWORD PTR $T69712[ebp]
  00086	83 c8 01	 or	 eax, 1
  00089	89 45 d4	 mov	 DWORD PTR $T69712[ebp], eax
  0008c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00090	8b f4		 mov	 esi, esp
  00092	8d 4d d8	 lea	 ecx, DWORD PTR $T69709[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	}

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	83 c4 34	 add	 esp, 52			; 00000034H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69710:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d8	 lea	 ecx, DWORD PTR $T69709[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69711:
  00012	8b 45 d4	 mov	 eax, DWORD PTR $T69712[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	0f 84 16 00 00
	00		 je	 $L69713
  0001e	83 65 d4 fe	 and	 DWORD PTR $T69712[ebp], -2 ; fffffffeH
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0002d	3b f4		 cmp	 esi, esp
  0002f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L69713:
  00034	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69715
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
EXTRN	__imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_??1locale@std@@QAE@XZ:NEAR
EXTRN	__imp_?to_char_type@?$char_traits@D@std@@SADABH@Z:NEAR
EXTRN	__imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:NEAR
EXTRN	__imp_?eof@?$char_traits@D@std@@SAHXZ:NEAR
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:NEAR
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:NEAR
EXTRN	__imp_?width@ios_base@std@@QBEHXZ:NEAR
EXTRN	__imp_?width@ios_base@std@@QAEHH@Z:NEAR
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:NEAR
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:NEAR
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
EXTRN	__imp_?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z:NEAR
EXTRN	__imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69737	DD	0ffffffffH
	DD	FLAT:$L69728
	DD	00H
	DD	FLAT:$L69729
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T69739	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L69727
$T69738	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T69739
$T69731	DD	019930520H
	DD	04H
	DD	FLAT:$T69737
	DD	01H
	DD	FLAT:$T69738
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv207 = -128						; size = 1
tv206 = -127						; size = 1
tv205 = -126						; size = 1
tv204 = -125						; size = 1
tv203 = -124						; size = 4
tv202 = -120						; size = 4
tv201 = -116						; size = 4
tv200 = -112						; size = 4
tv199 = -108						; size = 4
tv198 = -104						; size = 4
tv135 = -100						; size = 4
tv197 = -96						; size = 4
tv196 = -92						; size = 4
tv195 = -88						; size = 4
tv194 = -84						; size = 4
tv189 = -80						; size = 4
tv65 = -76						; size = 4
$T69725 = -72						; size = 4
$T69724 = -68						; size = 4
$T69721 = -64						; size = 4
__Meta$68153 = -56					; size = 4
__Size$68150 = -48					; size = 4
__Ctype_fac$68147 = -44					; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 425  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00022	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 426  : 	typedef ctype<_Elem> _Ctype;
; 427  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 428  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 429  : 	typedef typename _Mystr::size_type _Mysizt;
; 430  : 
; 431  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 432  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 433  : 	const typename _Myis::sentry _Ok(_Istr);

  0003c	6a 00		 push	 0
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 434  : 
; 435  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 87 02 00
	00		 je	 $L69726

; 436  : 		{	// state okay, extract characters
; 437  : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00064	8b f4		 mov	 esi, esp
  00066	8d 55 c0	 lea	 edx, DWORD PTR $T69721[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00087	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]
  0008a	89 45 b0	 mov	 DWORD PTR tv189[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00091	8b 4d b0	 mov	 ecx, DWORD PTR tv189[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 d4	 mov	 DWORD PTR __Ctype_fac$68147[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a4	8b f4		 mov	 esi, esp
  000a6	8d 4d c0	 lea	 ecx, DWORD PTR $T69721[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 		_Str.erase();

  000b6	8b f4		 mov	 esi, esp
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 
; 440  : 		_TRY_IO_BEGIN

  000d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 		_Mysizt _Size = 0 < _Istr.width()
; 442  : 			&& (_Mysizt)_Istr.width() < _Str.max_size()
; 443  : 				? (_Mysizt)_Istr.width() : _Str.max_size();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000df	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000e2	8b f4		 mov	 esi, esp
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 ac	 mov	 DWORD PTR tv194[ebp], eax
  000f4	83 7d ac 00	 cmp	 DWORD PTR tv194[ebp], 0
  000f8	7e 61		 jle	 SHORT $L69722
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00102	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00105	8b f4		 mov	 esi, esp
  00107	8b ca		 mov	 ecx, edx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 a8	 mov	 DWORD PTR tv195[ebp], eax
  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 45 a4	 mov	 DWORD PTR tv196[ebp], eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR tv195[ebp]
  00131	3b 45 a4	 cmp	 eax, DWORD PTR tv196[ebp]
  00134	73 25		 jae	 SHORT $L69722
  00136	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0013e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	89 45 a0	 mov	 DWORD PTR tv197[ebp], eax
  00153	8b 45 a0	 mov	 eax, DWORD PTR tv197[ebp]
  00156	89 45 9c	 mov	 DWORD PTR tv135[ebp], eax
  00159	eb 1b		 jmp	 SHORT $L69723
$L69722:
  0015b	8b f4		 mov	 esi, esp
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 45 98	 mov	 DWORD PTR tv198[ebp], eax
  00170	8b 4d 98	 mov	 ecx, DWORD PTR tv198[ebp]
  00173	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$L69723:
  00176	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00179	89 55 d0	 mov	 DWORD PTR __Size$68150[ebp], edx

; 444  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0017c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00184	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00187	8b f4		 mov	 esi, esp
  00189	8b ca		 mov	 ecx, edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00198	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  0019b	8b f4		 mov	 esi, esp
  0019d	8b 4d 94	 mov	 ecx, DWORD PTR tv199[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	89 45 90	 mov	 DWORD PTR tv200[ebp], eax
  001b0	8b 45 90	 mov	 eax, DWORD PTR tv200[ebp]
  001b3	89 45 c8	 mov	 DWORD PTR __Meta$68153[ebp], eax

; 445  : 
; 446  : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001b6	eb 41		 jmp	 SHORT $L68154
$L68155:
  001b8	8b 4d d0	 mov	 ecx, DWORD PTR __Size$68150[ebp]
  001bb	83 e9 01	 sub	 ecx, 1
  001be	89 4d d0	 mov	 DWORD PTR __Size$68150[ebp], ecx
  001c1	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001c4	8b 02		 mov	 eax, DWORD PTR [edx]
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001c9	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  001cc	8b f4		 mov	 esi, esp
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001d4	3b f4		 cmp	 esi, esp
  001d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001db	89 45 8c	 mov	 DWORD PTR tv201[ebp], eax
  001de	8b f4		 mov	 esi, esp
  001e0	8b 4d 8c	 mov	 ecx, DWORD PTR tv201[ebp]
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001e9	3b f4		 cmp	 esi, esp
  001eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f0	89 45 88	 mov	 DWORD PTR tv202[ebp], eax
  001f3	8b 4d 88	 mov	 ecx, DWORD PTR tv202[ebp]
  001f6	89 4d c8	 mov	 DWORD PTR __Meta$68153[ebp], ecx
$L68154:
  001f9	83 7d d0 00	 cmp	 DWORD PTR __Size$68150[ebp], 0
  001fd	0f 86 c0 00 00
	00		 jbe	 $L68156

; 447  : 			if(_Traits::eq_int_type(_Traits::eof(), _Meta))

  00203	8b f4		 mov	 esi, esp
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	89 45 84	 mov	 DWORD PTR tv203[ebp], eax
  00215	8b 55 84	 mov	 edx, DWORD PTR tv203[ebp]
  00218	89 55 bc	 mov	 DWORD PTR $T69724[ebp], edx
  0021b	8b f4		 mov	 esi, esp
  0021d	8d 45 c8	 lea	 eax, DWORD PTR __Meta$68153[ebp]
  00220	50		 push	 eax
  00221	8d 4d bc	 lea	 ecx, DWORD PTR $T69724[ebp]
  00224	51		 push	 ecx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0022b	83 c4 08	 add	 esp, 8
  0022e	3b f4		 cmp	 esi, esp
  00230	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00235	88 45 83	 mov	 BYTE PTR tv204[ebp], al
  00238	0f b6 55 83	 movzx	 edx, BYTE PTR tv204[ebp]
  0023c	85 d2		 test	 edx, edx
  0023e	74 0b		 je	 SHORT $L68158

; 448  : 				{	// end of file, quit
; 449  : 				_State |= ios_base::eofbit;

  00240	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00243	83 c8 01	 or	 eax, 1
  00246	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 450  : 				break;

  00249	eb 78		 jmp	 SHORT $L68156
$L68158:

; 451  : 				}
; 452  : 			else if (_Ctype_fac.is(_Ctype::space,
; 453  : 				_Traits::to_char_type(_Meta)))

  0024b	8b f4		 mov	 esi, esp
  0024d	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$68153[ebp]
  00250	51		 push	 ecx
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00257	83 c4 04	 add	 esp, 4
  0025a	3b f4		 cmp	 esi, esp
  0025c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00261	88 45 82	 mov	 BYTE PTR tv205[ebp], al
  00264	8b f4		 mov	 esi, esp
  00266	8a 55 82	 mov	 dl, BYTE PTR tv205[ebp]
  00269	52		 push	 edx
  0026a	6a 48		 push	 72			; 00000048H
  0026c	8b 4d d4	 mov	 ecx, DWORD PTR __Ctype_fac$68147[ebp]
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	88 45 81	 mov	 BYTE PTR tv206[ebp], al
  0027f	0f b6 45 81	 movzx	 eax, BYTE PTR tv206[ebp]
  00283	85 c0		 test	 eax, eax
  00285	74 02		 je	 SHORT $L68160

; 454  : 				break;	// whitespace, quit

  00287	eb 3a		 jmp	 SHORT $L68156
$L68160:

; 455  : 			else
; 456  : 				{	// add character to string
; 457  : 				_Str.append(1, _Traits::to_char_type(_Meta));

  00289	8b f4		 mov	 esi, esp
  0028b	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$68153[ebp]
  0028e	51		 push	 ecx
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00295	83 c4 04	 add	 esp, 4
  00298	3b f4		 cmp	 esi, esp
  0029a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029f	88 45 80	 mov	 BYTE PTR tv207[ebp], al
  002a2	8b f4		 mov	 esi, esp
  002a4	8a 55 80	 mov	 dl, BYTE PTR tv207[ebp]
  002a7	52		 push	 edx
  002a8	6a 01		 push	 1
  002aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
  002b3	3b f4		 cmp	 esi, esp
  002b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 				_Changed = true;

  002ba	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 459  : 				}

  002be	e9 f5 fe ff ff	 jmp	 $L68155
$L68156:
  002c3	eb 26		 jmp	 SHORT $L69726
$L69727:

; 460  : 		_CATCH_IO_(_Istr)

  002c5	8b f4		 mov	 esi, esp
  002c7	6a 01		 push	 1
  002c9	6a 04		 push	 4
  002cb	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d0	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002d3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d6	8b ca		 mov	 ecx, edx
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002de	3b f4		 cmp	 esi, esp
  002e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e5	b8 00 00 00 00	 mov	 eax, $L69726
  002ea	c3		 ret	 0
$L69726:
  002eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 461  : 		}
; 462  : 
; 463  : 	_Istr.width(0);

  002f2	8b f4		 mov	 esi, esp
  002f4	6a 00		 push	 0
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b ca		 mov	 ecx, edx
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	if (!_Changed)

  00310	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00314	85 c0		 test	 eax, eax
  00316	75 09		 jne	 SHORT $L68162

; 465  : 		_State |= ios_base::failbit;

  00318	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0031b	83 c9 02	 or	 ecx, 2
  0031e	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L68162:

; 466  : 	_Istr.setstate(_State);

  00321	8b f4		 mov	 esi, esp
  00323	6a 00		 push	 0
  00325	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00328	52		 push	 edx
  00329	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0032c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00331	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00334	8b ca		 mov	 ecx, edx
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0033c	3b f4		 cmp	 esi, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	return (_Istr);

  00343	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00346	89 45 b8	 mov	 DWORD PTR $T69725[ebp], eax
  00349	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00350	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00353	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00358	8b 45 b8	 mov	 eax, DWORD PTR $T69725[ebp]

; 468  : 	}

  0035b	52		 push	 edx
  0035c	8b cd		 mov	 ecx, ebp
  0035e	50		 push	 eax
  0035f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69736
  00365	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0036a	58		 pop	 eax
  0036b	5a		 pop	 edx
  0036c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0036f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00376	5f		 pop	 edi
  00377	5e		 pop	 esi
  00378	5b		 pop	 ebx
  00379	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0037f	3b ec		 cmp	 ebp, esp
  00381	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00386	8b e5		 mov	 esp, ebp
  00388	5d		 pop	 ebp
  00389	c3		 ret	 0
$L69736:
  0038a	02 00 00 00	 DD	 2
  0038e	00 00 00 00	 DD	 $L69735
$L69735:
  00392	dc ff ff ff	 DD	 -36			; ffffffdcH
  00396	08 00 00 00	 DD	 8
  0039a	00 00 00 00	 DD	 $L69732
  0039e	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003a2	04 00 00 00	 DD	 4
  003a6	00 00 00 00	 DD	 $L69733
$L69733:
  003aa	5f		 DB	 95			; 0000005fH
  003ab	4d		 DB	 77			; 0000004dH
  003ac	65		 DB	 101			; 00000065H
  003ad	74		 DB	 116			; 00000074H
  003ae	61		 DB	 97			; 00000061H
  003af	00		 DB	 0
$L69732:
  003b0	5f		 DB	 95			; 0000005fH
  003b1	4f		 DB	 79			; 0000004fH
  003b2	6b		 DB	 107			; 0000006bH
  003b3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69728:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
$L69729:
  00008	8b f4		 mov	 esi, esp
  0000a	8d 4d c0	 lea	 ecx, DWORD PTR $T69721[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  00013	3b f4		 cmp	 esi, esp
  00015	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69731
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\istream
xdata$x	SEGMENT
$T69749	DD	0ffffffffH
	DD	FLAT:$L69745
$T69747	DD	019930520H
	DD	01H
	DD	FLAT:$T69749
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 72   : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00037	8b f4		 mov	 esi, esp
  00039	8a 4d 0c	 mov	 cl, BYTE PTR __Noskip$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 74   : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00069	5e		 pop	 esi
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69745:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69747
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 77   : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 79   : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 58   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 			if (_Myistr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L66491

; 60   : 				_Myistr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L66491:

; 61   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 52   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : 			if (_Myistr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L67503

; 54   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67503:

; 55   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@@
PUBLIC	__CTA2?AVbad_cast@@
PUBLIC	??_R0?AVbad_cast@@@8				; bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:NEAR
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:NEAR
EXTRN	__imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z:NEAR
EXTRN	__CxxThrowException@8:NEAR
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??0bad_cast@@QAE@ABV0@@Z:NEAR			; bad_cast::bad_cast
EXTRN	??1bad_cast@@UAE@XZ:NEAR			; bad_cast::~bad_cast
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z:NEAR
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:NEAR
EXTRN	__imp_?_Incref@facet@locale@std@@QAEXXZ:NEAR
EXTRN	__imp_?_Register@facet@locale@std@@QAEXXZ:NEAR
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_??0bad_cast@@QAE@PBD@Z:NEAR
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69767	DD	0ffffffffH
	DD	FLAT:$L69759
$T69761	DD	019930520H
	DD	01H
	DD	FLAT:$T69767
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT
__TI2?AVbad_cast@@ DD 00H
	DD	FLAT:??1bad_cast@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@@
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@@@8 DD FLAT:??_7type_info@@6B@		; bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T69758 = -64						; size = 4
$T69756 = -60						; size = 12
__Pfmod$68076 = -48					; size = 4
__Pf$ = -44						; size = 4
__Id$ = -40						; size = 4
__Psave$ = -32						; size = 4
__Lock$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC NEAR ; std::use_facet<std::ctype<char> >, COMDAT

; 315  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00020	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 316  : 	_Lockit _Lock(_LOCK_LOCALE);	// the thread lock, make get atomic

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 317  : 	const locale::facet *_Psave =
; 318  : 		_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0004c	89 45 e0	 mov	 DWORD PTR __Psave$[ebp], eax

; 319  : 
; 320  : 	size_t _Id = _Facet::id;

  0004f	8b f4		 mov	 esi, esp
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	89 45 d8	 mov	 DWORD PTR __Id$[ebp], eax

; 321  : 	const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00067	8b f4		 mov	 esi, esp
  00069	8b 4d d8	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR __Pf$[ebp], eax

; 322  : 
; 323  : 	if (_Pf != 0)

  00080	83 7d d4 00	 cmp	 DWORD PTR __Pf$[ebp], 0
  00084	74 05		 je	 SHORT $L68059

; 324  : 		;	// got facet from locale
; 325  : 	else if (_Psave != 0)

  00086	e9 86 00 00 00	 jmp	 $L68060
$L68059:
  0008b	83 7d e0 00	 cmp	 DWORD PTR __Psave$[ebp], 0
  0008f	74 08		 je	 SHORT $L68061

; 326  : 		_Pf = _Psave;	// lazy facet already allocated

  00091	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  00094	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 327  : 	else if (_Facet::_Getcat(&_Psave) == (size_t)(-1))

  00097	eb 78		 jmp	 SHORT $L68060
$L68061:
  00099	8b f4		 mov	 esi, esp
  0009b	8d 45 e0	 lea	 eax, DWORD PTR __Psave$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@@Z
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 25		 jne	 SHORT $L68064

; 328  : 
; 329  :  #if _HAS_EXCEPTIONS
; 330  : 		throw bad_cast();	// lazy disallowed

  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  000bb	8d 4d c4	 lea	 ecx, DWORD PTR $T69756[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@@QAE@PBD@Z
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:__TI2?AVbad_cast@@
  000d0	8d 4d c4	 lea	 ecx, DWORD PTR $T69756[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$L68064:

; 331  : 
; 332  :  #else /* _HAS_EXCEPTIONS */
; 333  : 		abort();	// lazy disallowed
; 334  :  #endif /* _HAS_EXCEPTIONS */
; 335  : 
; 336  : 	else
; 337  : 		{	// queue up lazy facet for destruction
; 338  : 		_Pf = _Psave;

  000d9	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  000dc	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 339  : 		_Facetptr<_Facet>::_Psave = _Psave;

  000df	8b 45 e0	 mov	 eax, DWORD PTR __Psave$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 340  : 
; 341  : 		locale::facet *_Pfmod = (_Facet *)_Psave;

  000e7	8b 4d e0	 mov	 ecx, DWORD PTR __Psave$[ebp]
  000ea	89 4d d0	 mov	 DWORD PTR __Pfmod$68076[ebp], ecx

; 342  : 		_Pfmod->_Incref();

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$68076[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Pfmod->_Register();

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$68076[ebp]
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Register@facet@locale@std@@QAEXXZ
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L68060:

; 344  : 		}
; 345  : 
; 346  : 	return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00111	8b 55 d4	 mov	 edx, DWORD PTR __Pf$[ebp]
  00114	89 55 c0	 mov	 DWORD PTR $T69758[ebp], edx
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 45 c0	 mov	 eax, DWORD PTR $T69758[ebp]
$L69755:

; 347  : 	}

  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69766
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	83 c4 40	 add	 esp, 64			; 00000040H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$L69766:
  0015e	02 00 00 00	 DD	 2
  00162	00 00 00 00	 DD	 $L69765
$L69765:
  00166	ec ff ff ff	 DD	 -20			; ffffffecH
  0016a	04 00 00 00	 DD	 4
  0016e	00 00 00 00	 DD	 $L69762
  00172	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00176	04 00 00 00	 DD	 4
  0017a	00 00 00 00	 DD	 $L69763
$L69763:
  0017e	5f		 DB	 95			; 0000005fH
  0017f	50		 DB	 80			; 00000050H
  00180	73		 DB	 115			; 00000073H
  00181	61		 DB	 97			; 00000061H
  00182	76		 DB	 118			; 00000076H
  00183	65		 DB	 101			; 00000065H
  00184	00		 DB	 0
$L69762:
  00185	5f		 DB	 95			; 0000005fH
  00186	4c		 DB	 76			; 0000004cH
  00187	6f		 DB	 111			; 0000006fH
  00188	63		 DB	 99			; 00000063H
  00189	6b		 DB	 107			; 0000006bH
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69759:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69761
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 528  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 529  : 	return (getline(_Istr, _Str, _Istr.widen('\n')));

  00004	8b f4		 mov	 esi, esp
  00006	6a 0a		 push	 10			; 0000000aH
  00008	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00010	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00013	8b ca		 mov	 ecx, edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	50		 push	 eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	}

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
EXTRN	__imp_?to_int_type@?$char_traits@D@std@@SAHABD@Z:NEAR
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69786	DD	0ffffffffH
	DD	FLAT:$L69777
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T69788	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L69776
$T69787	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T69788
$T69779	DD	019930520H
	DD	03H
	DD	FLAT:$T69786
	DD	01H
	DD	FLAT:$T69787
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv175 = -113						; size = 1
tv174 = -112						; size = 4
tv173 = -108						; size = 4
tv172 = -104						; size = 4
tv171 = -98						; size = 1
tv170 = -97						; size = 1
tv169 = -96						; size = 4
tv168 = -92						; size = 4
tv167 = -88						; size = 4
tv166 = -84						; size = 4
tv165 = -80						; size = 4
tv65 = -76						; size = 4
$T69774 = -72						; size = 4
$T69773 = -68						; size = 4
__Meta$68173 = -60					; size = 4
__Metadelim$68172 = -48					; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC NEAR ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 477  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 64	 sub	 esp, 100		; 00000064H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00022	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 478  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 479  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 480  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 481  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003c	6a 01		 push	 1
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 482  : 
; 483  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 f6 01 00
	00		 je	 $L69775

; 484  : 		{	// state okay, extract characters
; 485  : 		_TRY_IO_BEGIN

  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 486  : 		_Str.erase();

  00068	8b f4		 mov	 esi, esp
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  : 		const typename _Traits::int_type _Metadelim =
; 488  : 			_Traits::to_int_type(_Delim);

  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_int_type@?$char_traits@D@std@@SAHABD@Z
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0009e	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  000a1	89 55 d0	 mov	 DWORD PTR __Metadelim$68172[ebp], edx

; 489  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a4	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000ac	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000af	8b f4		 mov	 esi, esp
  000b1	8b ca		 mov	 ecx, edx
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	89 45 b0	 mov	 DWORD PTR tv165[ebp], eax
  000c3	8b f4		 mov	 esi, esp
  000c5	8b 4d b0	 mov	 ecx, DWORD PTR tv165[ebp]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	89 45 ac	 mov	 DWORD PTR tv166[ebp], eax
  000d8	8b 45 ac	 mov	 eax, DWORD PTR tv166[ebp]
  000db	89 45 c4	 mov	 DWORD PTR __Meta$68173[ebp], eax

; 490  : 
; 491  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000de	eb 38		 jmp	 SHORT $L68174
$L68175:
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e8	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000eb	8b f4		 mov	 esi, esp
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	89 45 a8	 mov	 DWORD PTR tv167[ebp], eax
  000fd	8b f4		 mov	 esi, esp
  000ff	8b 4d a8	 mov	 ecx, DWORD PTR tv167[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  00108	3b f4		 cmp	 esi, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	89 45 a4	 mov	 DWORD PTR tv168[ebp], eax
  00112	8b 45 a4	 mov	 eax, DWORD PTR tv168[ebp]
  00115	89 45 c4	 mov	 DWORD PTR __Meta$68173[ebp], eax
$L68174:

; 492  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00118	8b f4		 mov	 esi, esp
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	89 45 a0	 mov	 DWORD PTR tv169[ebp], eax
  0012a	8b 4d a0	 mov	 ecx, DWORD PTR tv169[ebp]
  0012d	89 4d bc	 mov	 DWORD PTR $T69773[ebp], ecx
  00130	8b f4		 mov	 esi, esp
  00132	8d 55 c4	 lea	 edx, DWORD PTR __Meta$68173[ebp]
  00135	52		 push	 edx
  00136	8d 45 bc	 lea	 eax, DWORD PTR $T69773[ebp]
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00140	83 c4 08	 add	 esp, 8
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	88 45 9f	 mov	 BYTE PTR tv170[ebp], al
  0014d	0f b6 4d 9f	 movzx	 ecx, BYTE PTR tv170[ebp]
  00151	85 c9		 test	 ecx, ecx
  00153	74 0e		 je	 SHORT $L68178

; 493  : 				{	// end of file, quit
; 494  : 				_State |= ios_base::eofbit;

  00155	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00158	83 ca 01	 or	 edx, 1
  0015b	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 495  : 				break;

  0015e	e9 d1 00 00 00	 jmp	 $L68176
$L68178:

; 496  : 				}
; 497  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  00163	8b f4		 mov	 esi, esp
  00165	8d 45 d0	 lea	 eax, DWORD PTR __Metadelim$68172[ebp]
  00168	50		 push	 eax
  00169	8d 4d c4	 lea	 ecx, DWORD PTR __Meta$68173[ebp]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00173	83 c4 08	 add	 esp, 8
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	88 45 9e	 mov	 BYTE PTR tv171[ebp], al
  00180	0f b6 55 9e	 movzx	 edx, BYTE PTR tv171[ebp]
  00184	85 d2		 test	 edx, edx
  00186	74 37		 je	 SHORT $L68180

; 498  : 				{	// got a delimiter, discard it and quit
; 499  : 				_Changed = true;

  00188	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 500  : 				_Istr.rdbuf()->sbumpc();

  0018c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0018f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00191	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00194	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00197	8b f4		 mov	 esi, esp
  00199	8b ca		 mov	 ecx, edx
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a1	3b f4		 cmp	 esi, esp
  001a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a8	89 45 98	 mov	 DWORD PTR tv172[ebp], eax
  001ab	8b f4		 mov	 esi, esp
  001ad	8b 4d 98	 mov	 ecx, DWORD PTR tv172[ebp]
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  : 				break;

  001bd	eb 75		 jmp	 SHORT $L68176
$L68180:

; 502  : 				}
; 503  : 			else if (_Str.max_size() <= _Str.size())

  001bf	8b f4		 mov	 esi, esp
  001c1	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  001ca	3b f4		 cmp	 esi, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d1	89 45 94	 mov	 DWORD PTR tv173[ebp], eax
  001d4	8b f4		 mov	 esi, esp
  001d6	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  001df	3b f4		 cmp	 esi, esp
  001e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e6	89 45 90	 mov	 DWORD PTR tv174[ebp], eax
  001e9	8b 45 94	 mov	 eax, DWORD PTR tv173[ebp]
  001ec	3b 45 90	 cmp	 eax, DWORD PTR tv174[ebp]
  001ef	77 0b		 ja	 SHORT $L68182

; 504  : 				{	// string too large, quit
; 505  : 				_State |= ios_base::failbit;

  001f1	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  001f4	83 c9 02	 or	 ecx, 2
  001f7	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 506  : 				break;

  001fa	eb 38		 jmp	 SHORT $L68176
$L68182:

; 507  : 				}
; 508  : 			else
; 509  : 				{	// got a character, add it to string
; 510  : 				_Str += _Traits::to_char_type(_Meta);

  001fc	8b f4		 mov	 esi, esp
  001fe	8d 55 c4	 lea	 edx, DWORD PTR __Meta$68173[ebp]
  00201	52		 push	 edx
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@D@std@@SADABH@Z
  00208	83 c4 04	 add	 esp, 4
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	88 45 8f	 mov	 BYTE PTR tv175[ebp], al
  00215	8b f4		 mov	 esi, esp
  00217	8a 45 8f	 mov	 al, BYTE PTR tv175[ebp]
  0021a	50		 push	 eax
  0021b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
  00224	3b f4		 cmp	 esi, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 511  : 				_Changed = true;

  0022b	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 512  : 				}

  0022f	e9 ac fe ff ff	 jmp	 $L68175
$L68176:
  00234	eb 24		 jmp	 SHORT $L69775
$L69776:

; 513  : 		_CATCH_IO_(_Istr)

  00236	8b f4		 mov	 esi, esp
  00238	6a 01		 push	 1
  0023a	6a 04		 push	 4
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0023f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00241	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00244	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0024d	3b f4		 cmp	 esi, esp
  0024f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00254	b8 00 00 00 00	 mov	 eax, $L69775
  00259	c3		 ret	 0
$L69775:
  0025a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 514  : 		}
; 515  : 
; 516  : 	if (!_Changed)

  00261	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00265	85 c0		 test	 eax, eax
  00267	75 09		 jne	 SHORT $L68184

; 517  : 		_State |= ios_base::failbit;

  00269	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0026c	83 c9 02	 or	 ecx, 2
  0026f	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L68184:

; 518  : 	_Istr.setstate(_State);

  00272	8b f4		 mov	 esi, esp
  00274	6a 00		 push	 0
  00276	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00279	52		 push	 edx
  0027a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0027d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00282	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00285	8b ca		 mov	 ecx, edx
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0028d	3b f4		 cmp	 esi, esp
  0028f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  : 	return (_Istr);

  00294	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00297	89 45 b8	 mov	 DWORD PTR $T69774[ebp], eax
  0029a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002a1	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  002a9	8b 45 b8	 mov	 eax, DWORD PTR $T69774[ebp]

; 520  : 	}

  002ac	52		 push	 edx
  002ad	8b cd		 mov	 ecx, ebp
  002af	50		 push	 eax
  002b0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69785
  002b6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002bb	58		 pop	 eax
  002bc	5a		 pop	 edx
  002bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002c7	5f		 pop	 edi
  002c8	5e		 pop	 esi
  002c9	5b		 pop	 ebx
  002ca	83 c4 74	 add	 esp, 116		; 00000074H
  002cd	3b ec		 cmp	 ebp, esp
  002cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d4	8b e5		 mov	 esp, ebp
  002d6	5d		 pop	 ebp
  002d7	c3		 ret	 0
$L69785:
  002d8	03 00 00 00	 DD	 3
  002dc	00 00 00 00	 DD	 $L69784
$L69784:
  002e0	dc ff ff ff	 DD	 -36			; ffffffdcH
  002e4	08 00 00 00	 DD	 8
  002e8	00 00 00 00	 DD	 $L69780
  002ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002f0	04 00 00 00	 DD	 4
  002f4	00 00 00 00	 DD	 $L69781
  002f8	c4 ff ff ff	 DD	 -60			; ffffffc4H
  002fc	04 00 00 00	 DD	 4
  00300	00 00 00 00	 DD	 $L69782
$L69782:
  00304	5f		 DB	 95			; 0000005fH
  00305	4d		 DB	 77			; 0000004dH
  00306	65		 DB	 101			; 00000065H
  00307	74		 DB	 116			; 00000074H
  00308	61		 DB	 97			; 00000061H
  00309	00		 DB	 0
$L69781:
  0030a	5f		 DB	 95			; 0000005fH
  0030b	4d		 DB	 77			; 0000004dH
  0030c	65		 DB	 101			; 00000065H
  0030d	74		 DB	 116			; 00000074H
  0030e	61		 DB	 97			; 00000061H
  0030f	64		 DB	 100			; 00000064H
  00310	65		 DB	 101			; 00000065H
  00311	6c		 DB	 108			; 0000006cH
  00312	69		 DB	 105			; 00000069H
  00313	6d		 DB	 109			; 0000006dH
  00314	00		 DB	 0
$L69780:
  00315	5f		 DB	 95			; 0000005fH
  00316	4f		 DB	 79			; 0000004fH
  00317	6b		 DB	 107			; 0000006bH
  00318	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69777:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69779
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
EXTRN	__imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z:NEAR
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:NEAR
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:NEAR
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69810	DD	0ffffffffH
	DD	FLAT:$L69803
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T69812	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L69802
$T69811	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T69812
$T69805	DD	019930520H
	DD	03H
	DD	FLAT:$T69810
	DD	01H
	DD	FLAT:$T69811
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv221 = -137						; size = 1
tv220 = -136						; size = 4
tv219 = -132						; size = 4
tv218 = -128						; size = 4
tv217 = -122						; size = 1
tv216 = -121						; size = 1
tv215 = -120						; size = 4
tv214 = -116						; size = 4
tv213 = -112						; size = 4
tv212 = -108						; size = 4
tv211 = -101						; size = 1
tv210 = -100						; size = 4
tv209 = -96						; size = 4
tv208 = -92						; size = 4
tv207 = -85						; size = 1
tv83 = -84						; size = 4
tv81 = -80						; size = 4
$T69800 = -76						; size = 4
$T69799 = -72						; size = 4
$T69798 = -68						; size = 4
$T69797 = -64						; size = 4
$T69796 = -60						; size = 4
$T69795 = -56						; size = 4
$T69794 = -52						; size = 4
__Count$68207 = -48					; size = 4
__Ok$ = -40						; size = 8
__Pad$ = -28						; size = 4
__Size$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC NEAR ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 538  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 7c	 sub	 esp, 124		; 0000007cH
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00025	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 539  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 540  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 541  : 	typedef typename _Mystr::size_type _Mysizt;
; 542  : 
; 543  : 	ios_base::iostate _State = ios_base::goodbit;

  00034	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 544  : 	_Mysizt _Size = _Str.size();

  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	89 45 e8	 mov	 DWORD PTR __Size$[ebp], eax

; 545  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 546  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  00050	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00058	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0005b	8b f4		 mov	 esi, esp
  0005d	8b ca		 mov	 ecx, edx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	85 c0		 test	 eax, eax
  0006e	7e 45		 jle	 SHORT $L69792
  00070	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00078	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0007b	8b f4		 mov	 esi, esp
  0007d	8b ca		 mov	 ecx, edx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	3b 45 e8	 cmp	 eax, DWORD PTR __Size$[ebp]
  0008f	76 24		 jbe	 SHORT $L69792
  00091	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00099	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009c	8b f4		 mov	 esi, esp
  0009e	8b ca		 mov	 ecx, edx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	2b 45 e8	 sub	 eax, DWORD PTR __Size$[ebp]
  000b0	89 45 b0	 mov	 DWORD PTR tv81[ebp], eax
  000b3	eb 07		 jmp	 SHORT $L69793
$L69792:
  000b5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L69793:
  000bc	8b 45 b0	 mov	 eax, DWORD PTR tv81[ebp]
  000bf	89 45 e4	 mov	 DWORD PTR __Pad$[ebp], eax

; 547  : 	const typename _Myos::sentry _Ok(_Ostr);

  000c2	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000c5	51		 push	 ecx
  000c6	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000c9	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 548  : 
; 549  : 	if (!_Ok)

  000d5	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000dd	0f b6 d0	 movzx	 edx, al
  000e0	85 d2		 test	 edx, edx
  000e2	75 0e		 jne	 SHORT $L68196

; 550  : 		_State |= ios_base::badbit;

  000e4	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000e7	83 c8 04	 or	 eax, 4
  000ea	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 551  : 	else

  000ed	e9 d8 02 00 00	 jmp	 $L69801
$L68196:

; 552  : 		{	// state okay, insert characters
; 553  : 	_TRY_IO_BEGIN

  000f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 554  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f6	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000fe	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00101	8b f4		 mov	 esi, esp
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	89 45 ac	 mov	 DWORD PTR tv83[ebp], eax
  00113	8b 45 ac	 mov	 eax, DWORD PTR tv83[ebp]
  00116	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011e	0f 84 bb 00 00
	00		 je	 $L68199

; 555  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00124	eb 09		 jmp	 SHORT $L68200
$L68201:
  00126	8b 4d e4	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00129	83 e9 01	 sub	 ecx, 1
  0012c	89 4d e4	 mov	 DWORD PTR __Pad$[ebp], ecx
$L68200:
  0012f	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00133	0f 86 a6 00 00
	00		 jbe	 $L68199

; 556  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 557  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00139	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0013c	8b 02		 mov	 eax, DWORD PTR [edx]
  0013e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00141	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00144	8b f4		 mov	 esi, esp
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0014c	3b f4		 cmp	 esi, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	88 45 ab	 mov	 BYTE PTR tv207[ebp], al
  00156	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00159	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0015e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00161	8b f4		 mov	 esi, esp
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00169	3b f4		 cmp	 esi, esp
  0016b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00170	89 45 a4	 mov	 DWORD PTR tv208[ebp], eax
  00173	8b f4		 mov	 esi, esp
  00175	8a 45 ab	 mov	 al, BYTE PTR tv207[ebp]
  00178	50		 push	 eax
  00179	8b 4d a4	 mov	 ecx, DWORD PTR tv208[ebp]
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	89 45 a0	 mov	 DWORD PTR tv209[ebp], eax
  0018c	8b 4d a0	 mov	 ecx, DWORD PTR tv209[ebp]
  0018f	89 4d cc	 mov	 DWORD PTR $T69794[ebp], ecx
  00192	8b f4		 mov	 esi, esp
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  0019a	3b f4		 cmp	 esi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	89 45 9c	 mov	 DWORD PTR tv210[ebp], eax
  001a4	8b 55 9c	 mov	 edx, DWORD PTR tv210[ebp]
  001a7	89 55 c8	 mov	 DWORD PTR $T69795[ebp], edx
  001aa	8b f4		 mov	 esi, esp
  001ac	8d 45 cc	 lea	 eax, DWORD PTR $T69794[ebp]
  001af	50		 push	 eax
  001b0	8d 4d c8	 lea	 ecx, DWORD PTR $T69795[ebp]
  001b3	51		 push	 ecx
  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  001ba	83 c4 08	 add	 esp, 8
  001bd	3b f4		 cmp	 esi, esp
  001bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c4	88 45 9b	 mov	 BYTE PTR tv211[ebp], al
  001c7	0f b6 55 9b	 movzx	 edx, BYTE PTR tv211[ebp]
  001cb	85 d2		 test	 edx, edx
  001cd	74 0b		 je	 SHORT $L68205

; 558  : 					{	// insertion failed, quit
; 559  : 					_State |= ios_base::badbit;

  001cf	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001d2	83 c8 04	 or	 eax, 4
  001d5	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 560  : 					break;

  001d8	eb 05		 jmp	 SHORT $L68199
$L68205:

; 561  : 					}
; 562  : 
; 563  : 		if (_State == ios_base::goodbit)

  001da	e9 47 ff ff ff	 jmp	 $L68201
$L68199:
  001df	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e3	0f 85 c2 00 00
	00		 jne	 $L68206

; 564  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001e9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Count$68207[ebp], 0
  001f0	eb 09		 jmp	 SHORT $L68208
$L68209:
  001f2	8b 4d d0	 mov	 ecx, DWORD PTR __Count$68207[ebp]
  001f5	83 c1 01	 add	 ecx, 1
  001f8	89 4d d0	 mov	 DWORD PTR __Count$68207[ebp], ecx
$L68208:
  001fb	8b 55 d0	 mov	 edx, DWORD PTR __Count$68207[ebp]
  001fe	3b 55 e8	 cmp	 edx, DWORD PTR __Size$[ebp]
  00201	0f 83 a4 00 00
	00		 jae	 $L68206

; 565  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 566  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  00207	8b f4		 mov	 esi, esp
  00209	8b 45 d0	 mov	 eax, DWORD PTR __Count$68207[ebp]
  0020c	50		 push	 eax
  0020d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
  00216	3b f4		 cmp	 esi, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021d	89 45 94	 mov	 DWORD PTR tv212[ebp], eax
  00220	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00223	8b 11		 mov	 edx, DWORD PTR [ecx]
  00225	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00228	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0022b	8b f4		 mov	 esi, esp
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00233	3b f4		 cmp	 esi, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	89 45 90	 mov	 DWORD PTR tv213[ebp], eax
  0023d	8b f4		 mov	 esi, esp
  0023f	8b 45 94	 mov	 eax, DWORD PTR tv212[ebp]
  00242	8a 08		 mov	 cl, BYTE PTR [eax]
  00244	51		 push	 ecx
  00245	8b 4d 90	 mov	 ecx, DWORD PTR tv213[ebp]
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00255	89 45 8c	 mov	 DWORD PTR tv214[ebp], eax
  00258	8b 55 8c	 mov	 edx, DWORD PTR tv214[ebp]
  0025b	89 55 c4	 mov	 DWORD PTR $T69796[ebp], edx
  0025e	8b f4		 mov	 esi, esp
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00266	3b f4		 cmp	 esi, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	89 45 88	 mov	 DWORD PTR tv215[ebp], eax
  00270	8b 45 88	 mov	 eax, DWORD PTR tv215[ebp]
  00273	89 45 c0	 mov	 DWORD PTR $T69797[ebp], eax
  00276	8b f4		 mov	 esi, esp
  00278	8d 4d c4	 lea	 ecx, DWORD PTR $T69796[ebp]
  0027b	51		 push	 ecx
  0027c	8d 55 c0	 lea	 edx, DWORD PTR $T69797[ebp]
  0027f	52		 push	 edx
  00280	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00286	83 c4 08	 add	 esp, 8
  00289	3b f4		 cmp	 esi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	88 45 87	 mov	 BYTE PTR tv216[ebp], al
  00293	0f b6 45 87	 movzx	 eax, BYTE PTR tv216[ebp]
  00297	85 c0		 test	 eax, eax
  00299	74 0b		 je	 SHORT $L68213

; 567  : 					{	// insertion failed, quit
; 568  : 					_State |= ios_base::badbit;

  0029b	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0029e	83 c9 04	 or	 ecx, 4
  002a1	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 569  : 					break;

  002a4	eb 05		 jmp	 SHORT $L68206
$L68213:

; 570  : 					}
; 571  : 
; 572  : 		if (_State == ios_base::goodbit)

  002a6	e9 47 ff ff ff	 jmp	 $L68209
$L68206:
  002ab	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  002af	0f 85 d1 00 00
	00		 jne	 $L68214

; 573  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002b5	eb 09		 jmp	 SHORT $L68215
$L68216:
  002b7	8b 55 e4	 mov	 edx, DWORD PTR __Pad$[ebp]
  002ba	83 ea 01	 sub	 edx, 1
  002bd	89 55 e4	 mov	 DWORD PTR __Pad$[ebp], edx
$L68215:
  002c0	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002c4	0f 86 bc 00 00
	00		 jbe	 $L68214

; 574  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 575  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  002ca	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d5	8b f4		 mov	 esi, esp
  002d7	8b ca		 mov	 ecx, edx
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002df	3b f4		 cmp	 esi, esp
  002e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e6	88 45 86	 mov	 BYTE PTR tv217[ebp], al
  002e9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ee	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f4	8b f4		 mov	 esi, esp
  002f6	8b ca		 mov	 ecx, edx
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002fe	3b f4		 cmp	 esi, esp
  00300	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00305	89 45 80	 mov	 DWORD PTR tv218[ebp], eax
  00308	8b f4		 mov	 esi, esp
  0030a	8a 45 86	 mov	 al, BYTE PTR tv217[ebp]
  0030d	50		 push	 eax
  0030e	8b 4d 80	 mov	 ecx, DWORD PTR tv218[ebp]
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00317	3b f4		 cmp	 esi, esp
  00319	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031e	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv219[ebp], eax
  00324	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv219[ebp]
  0032a	89 4d bc	 mov	 DWORD PTR $T69798[ebp], ecx
  0032d	8b f4		 mov	 esi, esp
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
  00335	3b f4		 cmp	 esi, esp
  00337	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033c	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], eax
  00342	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv220[ebp]
  00348	89 55 b8	 mov	 DWORD PTR $T69799[ebp], edx
  0034b	8b f4		 mov	 esi, esp
  0034d	8d 45 bc	 lea	 eax, DWORD PTR $T69798[ebp]
  00350	50		 push	 eax
  00351	8d 4d b8	 lea	 ecx, DWORD PTR $T69799[ebp]
  00354	51		 push	 ecx
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0035b	83 c4 08	 add	 esp, 8
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	88 85 77 ff ff
	ff		 mov	 BYTE PTR tv221[ebp], al
  0036b	0f b6 95 77 ff
	ff ff		 movzx	 edx, BYTE PTR tv221[ebp]
  00372	85 d2		 test	 edx, edx
  00374	74 0b		 je	 SHORT $L68220

; 576  : 					{	// insertion failed, quit
; 577  : 					_State |= ios_base::badbit;

  00376	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00379	83 c8 04	 or	 eax, 4
  0037c	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 578  : 					break;

  0037f	eb 05		 jmp	 SHORT $L68214
$L68220:

; 579  : 					}
; 580  : 		_Ostr.width(0);

  00381	e9 31 ff ff ff	 jmp	 $L68216
$L68214:
  00386	8b f4		 mov	 esi, esp
  00388	6a 00		 push	 0
  0038a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0038d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00392	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00395	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  0039b	3b f4		 cmp	 esi, esp
  0039d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a2	eb 26		 jmp	 SHORT $L69801
$L69802:

; 581  : 		_CATCH_IO_(_Ostr)

  003a4	8b f4		 mov	 esi, esp
  003a6	6a 01		 push	 1
  003a8	6a 04		 push	 4
  003aa	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  003af	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003b5	8b ca		 mov	 ecx, edx
  003b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003bd	3b f4		 cmp	 esi, esp
  003bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c4	b8 00 00 00 00	 mov	 eax, $L69801
  003c9	c3		 ret	 0
$L69801:
  003ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 		}
; 583  : 
; 584  : 	_Ostr.setstate(_State);

  003d1	8b f4		 mov	 esi, esp
  003d3	6a 00		 push	 0
  003d5	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  003d8	50		 push	 eax
  003d9	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  003de	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e1	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ea	3b f4		 cmp	 esi, esp
  003ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 585  : 	return (_Ostr);

  003f1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f4	89 45 b4	 mov	 DWORD PTR $T69800[ebp], eax
  003f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003fe	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00401	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00406	8b 45 b4	 mov	 eax, DWORD PTR $T69800[ebp]

; 586  : 	}

  00409	52		 push	 edx
  0040a	8b cd		 mov	 ecx, ebp
  0040c	50		 push	 eax
  0040d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69809
  00413	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00418	58		 pop	 eax
  00419	5a		 pop	 edx
  0041a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00424	5f		 pop	 edi
  00425	5e		 pop	 esi
  00426	5b		 pop	 ebx
  00427	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0042d	3b ec		 cmp	 ebp, esp
  0042f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00434	8b e5		 mov	 esp, ebp
  00436	5d		 pop	 ebp
  00437	c3		 ret	 0
$L69809:
  00438	01 00 00 00	 DD	 1
  0043c	00 00 00 00	 DD	 $L69808
$L69808:
  00440	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00444	08 00 00 00	 DD	 8
  00448	00 00 00 00	 DD	 $L69806
$L69806:
  0044c	5f		 DB	 95			; 0000005fH
  0044d	4f		 DB	 79			; 0000004fH
  0044e	6b		 DB	 107			; 0000006bH
  0044f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69803:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69805
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:NEAR
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:NEAR
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\ostream
xdata$x	SEGMENT
$T69820	DD	0ffffffffH
	DD	FLAT:$L69816
$T69818	DD	019930520H
	DD	01H
	DD	FLAT:$T69820
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $L67512
  00058	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00060	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00063	8b f4		 mov	 esi, esp
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	85 c0		 test	 eax, eax
  00074	74 2d		 je	 SHORT $L67512

; 90   : 				_Ostr.tie()->flush();

  00076	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0007e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00081	8b f4		 mov	 esi, esp
  00083	8b ca		 mov	 ecx, edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b f4		 mov	 esi, esp
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67512:

; 91   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ab	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ae	8b f4		 mov	 esi, esp
  000b0	8b ca		 mov	 ecx, edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 92   : 			}

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d9	5e		 pop	 esi
  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69816:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69818
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:NEAR
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69828	DD	0ffffffffH
	DD	FLAT:$L69824
$T69826	DD	019930520H
	DD	01H
	DD	FLAT:$T69828
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 
; 97   :  #if _HAS_EXCEPTIONS
; 98   : 			if (!uncaught_exception())

  0002b	8b f4		 mov	 esi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L67514

; 99   : 				this->_Myostr._Osfx();

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67514:

; 100  : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006e	5e		 pop	 esi
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69824:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69826
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 108  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 110  : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 68   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 69   : 			if (_Myostr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L67781

; 70   : 				_Myostr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67781:

; 71   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 74   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			if (_Myostr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L67784

; 76   : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67784:

; 77   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z:NEAR
EXTRN	__imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z:NEAR
EXTRN	__imp_?eof@?$char_traits@_W@std@@SAGXZ:NEAR
EXTRN	__imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z:NEAR
EXTRN	__imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ:NEAR
EXTRN	__imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB:DWORD
EXTRN	__imp_?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z:NEAR
EXTRN	__imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z:NEAR
EXTRN	__imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?is@?$ctype@_W@std@@QBE_NF_W@Z:NEAR
EXTRN	__imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
EXTRN	__imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T69851	DD	0ffffffffH
	DD	FLAT:$L69842
	DD	00H
	DD	FLAT:$L69843
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T69853	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L69841
$T69852	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T69853
$T69845	DD	019930520H
	DD	04H
	DD	FLAT:$T69851
	DD	01H
	DD	FLAT:$T69852
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
tv207 = -128						; size = 2
tv206 = -125						; size = 1
tv205 = -124						; size = 2
tv204 = -121						; size = 1
tv203 = -120						; size = 2
tv202 = -118						; size = 2
tv201 = -116						; size = 4
tv200 = -110						; size = 2
tv199 = -108						; size = 4
tv198 = -104						; size = 4
tv135 = -100						; size = 4
tv197 = -96						; size = 4
tv196 = -92						; size = 4
tv195 = -88						; size = 4
tv194 = -84						; size = 4
tv189 = -80						; size = 4
tv65 = -76						; size = 4
$T69839 = -72						; size = 4
$T69838 = -66						; size = 2
$T69835 = -64						; size = 4
__Meta$68237 = -56					; size = 2
__Size$68234 = -48					; size = 4
__Ctype_fac$68231 = -44					; size = 4
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 425  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 70	 sub	 esp, 112		; 00000070H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00022	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 426  : 	typedef ctype<_Elem> _Ctype;
; 427  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 428  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 429  : 	typedef typename _Mystr::size_type _Mysizt;
; 430  : 
; 431  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 432  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 433  : 	const typename _Myis::sentry _Ok(_Istr);

  0003c	6a 00		 push	 0
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 434  : 
; 435  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 94 02 00
	00		 je	 $L69840

; 436  : 		{	// state okay, extract characters
; 437  : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00064	8b f4		 mov	 esi, esp
  00066	8d 55 c0	 lea	 edx, DWORD PTR $T69835[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00072	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00075	8b ca		 mov	 ecx, edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00087	8b 45 b4	 mov	 eax, DWORD PTR tv65[ebp]
  0008a	89 45 b0	 mov	 DWORD PTR tv189[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00091	8b 4d b0	 mov	 ecx, DWORD PTR tv189[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 d4	 mov	 DWORD PTR __Ctype_fac$68231[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a4	8b f4		 mov	 esi, esp
  000a6	8d 4d c0	 lea	 ecx, DWORD PTR $T69835[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 		_Str.erase();

  000b6	8b f4		 mov	 esi, esp
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 
; 440  : 		_TRY_IO_BEGIN

  000d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 441  : 		_Mysizt _Size = 0 < _Istr.width()
; 442  : 			&& (_Mysizt)_Istr.width() < _Str.max_size()
; 443  : 				? (_Mysizt)_Istr.width() : _Str.max_size();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000df	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000e2	8b f4		 mov	 esi, esp
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 ac	 mov	 DWORD PTR tv194[ebp], eax
  000f4	83 7d ac 00	 cmp	 DWORD PTR tv194[ebp], 0
  000f8	7e 61		 jle	 SHORT $L69836
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00102	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00105	8b f4		 mov	 esi, esp
  00107	8b ca		 mov	 ecx, edx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 a8	 mov	 DWORD PTR tv195[ebp], eax
  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 45 a4	 mov	 DWORD PTR tv196[ebp], eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR tv195[ebp]
  00131	3b 45 a4	 cmp	 eax, DWORD PTR tv196[ebp]
  00134	73 25		 jae	 SHORT $L69836
  00136	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0013e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	89 45 a0	 mov	 DWORD PTR tv197[ebp], eax
  00153	8b 45 a0	 mov	 eax, DWORD PTR tv197[ebp]
  00156	89 45 9c	 mov	 DWORD PTR tv135[ebp], eax
  00159	eb 1b		 jmp	 SHORT $L69837
$L69836:
  0015b	8b f4		 mov	 esi, esp
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 45 98	 mov	 DWORD PTR tv198[ebp], eax
  00170	8b 4d 98	 mov	 ecx, DWORD PTR tv198[ebp]
  00173	89 4d 9c	 mov	 DWORD PTR tv135[ebp], ecx
$L69837:
  00176	8b 55 9c	 mov	 edx, DWORD PTR tv135[ebp]
  00179	89 55 d0	 mov	 DWORD PTR __Size$68234[ebp], edx

; 444  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0017c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00184	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00187	8b f4		 mov	 esi, esp
  00189	8b ca		 mov	 ecx, edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00191	3b f4		 cmp	 esi, esp
  00193	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00198	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  0019b	8b f4		 mov	 esi, esp
  0019d	8b 4d 94	 mov	 ecx, DWORD PTR tv199[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	66 89 45 92	 mov	 WORD PTR tv200[ebp], ax
  001b1	66 8b 45 92	 mov	 ax, WORD PTR tv200[ebp]
  001b5	66 89 45 c8	 mov	 WORD PTR __Meta$68237[ebp], ax

; 445  : 
; 446  : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001b9	eb 44		 jmp	 SHORT $L68238
$L68239:
  001bb	8b 4d d0	 mov	 ecx, DWORD PTR __Size$68234[ebp]
  001be	83 e9 01	 sub	 ecx, 1
  001c1	89 4d d0	 mov	 DWORD PTR __Size$68234[ebp], ecx
  001c4	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001c7	8b 02		 mov	 eax, DWORD PTR [edx]
  001c9	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001cc	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  001d7	3b f4		 cmp	 esi, esp
  001d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001de	89 45 8c	 mov	 DWORD PTR tv201[ebp], eax
  001e1	8b f4		 mov	 esi, esp
  001e3	8b 4d 8c	 mov	 ecx, DWORD PTR tv201[ebp]
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f3	66 89 45 8a	 mov	 WORD PTR tv202[ebp], ax
  001f7	66 8b 4d 8a	 mov	 cx, WORD PTR tv202[ebp]
  001fb	66 89 4d c8	 mov	 WORD PTR __Meta$68237[ebp], cx
$L68238:
  001ff	83 7d d0 00	 cmp	 DWORD PTR __Size$68234[ebp], 0
  00203	0f 86 c7 00 00
	00		 jbe	 $L68240

; 447  : 			if(_Traits::eq_int_type(_Traits::eof(), _Meta))

  00209	8b f4		 mov	 esi, esp
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00218	66 89 45 88	 mov	 WORD PTR tv203[ebp], ax
  0021c	66 8b 55 88	 mov	 dx, WORD PTR tv203[ebp]
  00220	66 89 55 be	 mov	 WORD PTR $T69838[ebp], dx
  00224	8b f4		 mov	 esi, esp
  00226	8d 45 c8	 lea	 eax, DWORD PTR __Meta$68237[ebp]
  00229	50		 push	 eax
  0022a	8d 4d be	 lea	 ecx, DWORD PTR $T69838[ebp]
  0022d	51		 push	 ecx
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00234	83 c4 08	 add	 esp, 8
  00237	3b f4		 cmp	 esi, esp
  00239	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023e	88 45 87	 mov	 BYTE PTR tv204[ebp], al
  00241	0f b6 55 87	 movzx	 edx, BYTE PTR tv204[ebp]
  00245	85 d2		 test	 edx, edx
  00247	74 0b		 je	 SHORT $L68242

; 448  : 				{	// end of file, quit
; 449  : 				_State |= ios_base::eofbit;

  00249	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0024c	83 c8 01	 or	 eax, 1
  0024f	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 450  : 				break;

  00252	eb 7c		 jmp	 SHORT $L68240
$L68242:

; 451  : 				}
; 452  : 			else if (_Ctype_fac.is(_Ctype::space,
; 453  : 				_Traits::to_char_type(_Meta)))

  00254	8b f4		 mov	 esi, esp
  00256	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$68237[ebp]
  00259	51		 push	 ecx
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  00260	83 c4 04	 add	 esp, 4
  00263	3b f4		 cmp	 esi, esp
  00265	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026a	66 89 45 84	 mov	 WORD PTR tv205[ebp], ax
  0026e	8b f4		 mov	 esi, esp
  00270	66 8b 55 84	 mov	 dx, WORD PTR tv205[ebp]
  00274	52		 push	 edx
  00275	6a 48		 push	 72			; 00000048H
  00277	8b 4d d4	 mov	 ecx, DWORD PTR __Ctype_fac$68231[ebp]
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@_W@std@@QBE_NF_W@Z
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	88 45 83	 mov	 BYTE PTR tv206[ebp], al
  0028a	0f b6 45 83	 movzx	 eax, BYTE PTR tv206[ebp]
  0028e	85 c0		 test	 eax, eax
  00290	74 02		 je	 SHORT $L68244

; 454  : 				break;	// whitespace, quit

  00292	eb 3c		 jmp	 SHORT $L68240
$L68244:

; 455  : 			else
; 456  : 				{	// add character to string
; 457  : 				_Str.append(1, _Traits::to_char_type(_Meta));

  00294	8b f4		 mov	 esi, esp
  00296	8d 4d c8	 lea	 ecx, DWORD PTR __Meta$68237[ebp]
  00299	51		 push	 ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  002a0	83 c4 04	 add	 esp, 4
  002a3	3b f4		 cmp	 esi, esp
  002a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002aa	66 89 45 80	 mov	 WORD PTR tv207[ebp], ax
  002ae	8b f4		 mov	 esi, esp
  002b0	66 8b 55 80	 mov	 dx, WORD PTR tv207[ebp]
  002b4	52		 push	 edx
  002b5	6a 01		 push	 1
  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
  002c0	3b f4		 cmp	 esi, esp
  002c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 				_Changed = true;

  002c7	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 459  : 				}

  002cb	e9 eb fe ff ff	 jmp	 $L68239
$L68240:
  002d0	eb 26		 jmp	 SHORT $L69840
$L69841:

; 460  : 		_CATCH_IO_(_Istr)

  002d2	8b f4		 mov	 esi, esp
  002d4	6a 01		 push	 1
  002d6	6a 04		 push	 4
  002d8	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002db	8b 08		 mov	 ecx, DWORD PTR [eax]
  002dd	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002e0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	b8 00 00 00 00	 mov	 eax, $L69840
  002f7	c3		 ret	 0
$L69840:
  002f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 461  : 		}
; 462  : 
; 463  : 	_Istr.width(0);

  002ff	8b f4		 mov	 esi, esp
  00301	6a 00		 push	 0
  00303	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00306	8b 08		 mov	 ecx, DWORD PTR [eax]
  00308	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0030b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0030e	8b ca		 mov	 ecx, edx
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  00316	3b f4		 cmp	 esi, esp
  00318	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	if (!_Changed)

  0031d	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00321	85 c0		 test	 eax, eax
  00323	75 09		 jne	 SHORT $L68246

; 465  : 		_State |= ios_base::failbit;

  00325	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  00328	83 c9 02	 or	 ecx, 2
  0032b	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L68246:

; 466  : 	_Istr.setstate(_State);

  0032e	8b f4		 mov	 esi, esp
  00330	6a 00		 push	 0
  00332	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00335	52		 push	 edx
  00336	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0033e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00341	8b ca		 mov	 ecx, edx
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  00349	3b f4		 cmp	 esi, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	return (_Istr);

  00350	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00353	89 45 b8	 mov	 DWORD PTR $T69839[ebp], eax
  00356	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0035d	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00360	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00365	8b 45 b8	 mov	 eax, DWORD PTR $T69839[ebp]

; 468  : 	}

  00368	52		 push	 edx
  00369	8b cd		 mov	 ecx, ebp
  0036b	50		 push	 eax
  0036c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69850
  00372	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00377	58		 pop	 eax
  00378	5a		 pop	 edx
  00379	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00383	5f		 pop	 edi
  00384	5e		 pop	 esi
  00385	5b		 pop	 ebx
  00386	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0038c	3b ec		 cmp	 ebp, esp
  0038e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00393	8b e5		 mov	 esp, ebp
  00395	5d		 pop	 ebp
  00396	c3		 ret	 0
$L69850:
  00397	02 00 00 00	 DD	 2
  0039b	00 00 00 00	 DD	 $L69849
$L69849:
  0039f	dc ff ff ff	 DD	 -36			; ffffffdcH
  003a3	08 00 00 00	 DD	 8
  003a7	00 00 00 00	 DD	 $L69846
  003ab	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003af	02 00 00 00	 DD	 2
  003b3	00 00 00 00	 DD	 $L69847
$L69847:
  003b7	5f		 DB	 95			; 0000005fH
  003b8	4d		 DB	 77			; 0000004dH
  003b9	65		 DB	 101			; 00000065H
  003ba	74		 DB	 116			; 00000074H
  003bb	61		 DB	 97			; 00000061H
  003bc	00		 DB	 0
$L69846:
  003bd	5f		 DB	 95			; 0000005fH
  003be	4f		 DB	 79			; 0000004fH
  003bf	6b		 DB	 107			; 0000006bH
  003c0	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69842:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
$L69843:
  00008	8b f4		 mov	 esi, esp
  0000a	8d 4d c0	 lea	 ecx, DWORD PTR $T69835[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1locale@std@@QAE@XZ
  00013	3b f4		 cmp	 esi, esp
  00015	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69845
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?5_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator>><wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\istream
xdata$x	SEGMENT
$T69863	DD	0ffffffffH
	DD	FLAT:$L69859
$T69861	DD	019930520H
	DD	01H
	DD	FLAT:$T69863
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 72   : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00037	8b f4		 mov	 esi, esp
  00039	8a 4d 0c	 mov	 cl, BYTE PTR __Noskip$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 74   : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00069	5e		 pop	 esi
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69859:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69861
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 77   : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 79   : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 58   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 			if (_Myistr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L66498

; 60   : 				_Myistr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L66498:

; 61   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 52   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 53   : 			if (_Myistr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L67506

; 54   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67506:

; 55   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
EXTRN	__imp_?id@?$ctype@_W@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z:NEAR
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69880	DD	0ffffffffH
	DD	FLAT:$L69872
$T69874	DD	019930520H
	DD	01H
	DD	FLAT:$T69880
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T69871 = -64						; size = 4
$T69870 = -60						; size = 12
__Pfmod$68104 = -48					; size = 4
__Pf$ = -44						; size = 4
__Id$ = -40						; size = 4
__Psave$ = -32						; size = 4
__Lock$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC NEAR ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 315  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00020	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd

; 316  : 	_Lockit _Lock(_LOCK_LOCALE);	// the thread lock, make get atomic

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 317  : 	const locale::facet *_Psave =
; 318  : 		_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0004c	89 45 e0	 mov	 DWORD PTR __Psave$[ebp], eax

; 319  : 
; 320  : 	size_t _Id = _Facet::id;

  0004f	8b f4		 mov	 esi, esp
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@_W@std@@2V0locale@2@A
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	89 45 d8	 mov	 DWORD PTR __Id$[ebp], eax

; 321  : 	const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00067	8b f4		 mov	 esi, esp
  00069	8b 4d d8	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR __Pf$[ebp], eax

; 322  : 
; 323  : 	if (_Pf != 0)

  00080	83 7d d4 00	 cmp	 DWORD PTR __Pf$[ebp], 0
  00084	74 05		 je	 SHORT $L68095

; 324  : 		;	// got facet from locale
; 325  : 	else if (_Psave != 0)

  00086	e9 86 00 00 00	 jmp	 $L68096
$L68095:
  0008b	83 7d e0 00	 cmp	 DWORD PTR __Psave$[ebp], 0
  0008f	74 08		 je	 SHORT $L68097

; 326  : 		_Pf = _Psave;	// lazy facet already allocated

  00091	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  00094	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 327  : 	else if (_Facet::_Getcat(&_Psave) == (size_t)(-1))

  00097	eb 78		 jmp	 SHORT $L68096
$L68097:
  00099	8b f4		 mov	 esi, esp
  0009b	8d 45 e0	 lea	 eax, DWORD PTR __Psave$[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@@Z
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 25		 jne	 SHORT $L68100

; 328  : 
; 329  :  #if _HAS_EXCEPTIONS
; 330  : 		throw bad_cast();	// lazy disallowed

  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  000bb	8d 4d c4	 lea	 ecx, DWORD PTR $T69870[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@@QAE@PBD@Z
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:__TI2?AVbad_cast@@
  000d0	8d 4d c4	 lea	 ecx, DWORD PTR $T69870[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __CxxThrowException@8
$L68100:

; 331  : 
; 332  :  #else /* _HAS_EXCEPTIONS */
; 333  : 		abort();	// lazy disallowed
; 334  :  #endif /* _HAS_EXCEPTIONS */
; 335  : 
; 336  : 	else
; 337  : 		{	// queue up lazy facet for destruction
; 338  : 		_Pf = _Psave;

  000d9	8b 55 e0	 mov	 edx, DWORD PTR __Psave$[ebp]
  000dc	89 55 d4	 mov	 DWORD PTR __Pf$[ebp], edx

; 339  : 		_Facetptr<_Facet>::_Psave = _Psave;

  000df	8b 45 e0	 mov	 eax, DWORD PTR __Psave$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<wchar_t> >::_Psave

; 340  : 
; 341  : 		locale::facet *_Pfmod = (_Facet *)_Psave;

  000e7	8b 4d e0	 mov	 ecx, DWORD PTR __Psave$[ebp]
  000ea	89 4d d0	 mov	 DWORD PTR __Pfmod$68104[ebp], ecx

; 342  : 		_Pfmod->_Incref();

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$68104[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Pfmod->_Register();

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d d0	 mov	 ecx, DWORD PTR __Pfmod$68104[ebp]
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Register@facet@locale@std@@QAEXXZ
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L68096:

; 344  : 		}
; 345  : 
; 346  : 	return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00111	8b 55 d4	 mov	 edx, DWORD PTR __Pf$[ebp]
  00114	89 55 c0	 mov	 DWORD PTR $T69871[ebp], edx
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 45 c0	 mov	 eax, DWORD PTR $T69871[ebp]
$L69869:

; 347  : 	}

  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69879
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	83 c4 40	 add	 esp, 64			; 00000040H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$L69879:
  0015e	02 00 00 00	 DD	 2
  00162	00 00 00 00	 DD	 $L69878
$L69878:
  00166	ec ff ff ff	 DD	 -20			; ffffffecH
  0016a	04 00 00 00	 DD	 4
  0016e	00 00 00 00	 DD	 $L69875
  00172	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00176	04 00 00 00	 DD	 4
  0017a	00 00 00 00	 DD	 $L69876
$L69876:
  0017e	5f		 DB	 95			; 0000005fH
  0017f	50		 DB	 80			; 00000050H
  00180	73		 DB	 115			; 00000073H
  00181	61		 DB	 97			; 00000061H
  00182	76		 DB	 118			; 00000076H
  00183	65		 DB	 101			; 00000065H
  00184	00		 DB	 0
$L69875:
  00185	5f		 DB	 95			; 0000005fH
  00186	4c		 DB	 76			; 0000004cH
  00187	6f		 DB	 111			; 0000006fH
  00188	63		 DB	 99			; 00000063H
  00189	6b		 DB	 107			; 0000006bH
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69872:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69874
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
EXTRN	__imp_?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:NEAR
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 528  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 529  : 	return (getline(_Istr, _Str, _Istr.widen('\n')));

  00004	8b f4		 mov	 esi, esp
  00006	6a 0a		 push	 10			; 0000000aH
  00008	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00010	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00013	8b ca		 mov	 ecx, edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	50		 push	 eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	}

  00033	5e		 pop	 esi
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z:NEAR
EXTRN	__imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69899	DD	0ffffffffH
	DD	FLAT:$L69890
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T69901	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L69889
$T69900	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T69901
$T69892	DD	019930520H
	DD	03H
	DD	FLAT:$T69899
	DD	01H
	DD	FLAT:$T69900
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
_TEXT	SEGMENT
tv175 = -110						; size = 2
tv174 = -108						; size = 4
tv173 = -104						; size = 4
tv172 = -100						; size = 4
tv171 = -94						; size = 1
tv170 = -93						; size = 1
tv169 = -92						; size = 2
tv168 = -90						; size = 2
tv167 = -88						; size = 4
tv166 = -82						; size = 2
tv165 = -80						; size = 4
tv65 = -74						; size = 2
$T69887 = -72						; size = 4
$T69886 = -66						; size = 2
__Meta$68257 = -60					; size = 2
__Metadelim$68256 = -48					; size = 2
__Ok$ = -36						; size = 8
__Changed$ = -21					; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 2
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z PROC NEAR ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 477  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 60	 sub	 esp, 96			; 00000060H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  00022	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 478  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 479  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 480  : 	bool _Changed = false;

  00038	c6 45 eb 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 481  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003c	6a 01		 push	 1
  0003e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00041	50		 push	 eax
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 482  : 
; 483  : 	if (_Ok)

  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	0f 84 04 02 00
	00		 je	 $L69888

; 484  : 		{	// state okay, extract characters
; 485  : 		_TRY_IO_BEGIN

  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 486  : 		_Str.erase();

  00068	8b f4		 mov	 esi, esp
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  : 		const typename _Traits::int_type _Metadelim =
; 488  : 			_Traits::to_int_type(_Delim);

  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	66 89 45 b6	 mov	 WORD PTR tv65[ebp], ax
  0009f	66 8b 55 b6	 mov	 dx, WORD PTR tv65[ebp]
  000a3	66 89 55 d0	 mov	 WORD PTR __Metadelim$68256[ebp], dx

; 489  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a7	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ac	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000af	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b2	8b f4		 mov	 esi, esp
  000b4	8b ca		 mov	 ecx, edx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	89 45 b0	 mov	 DWORD PTR tv165[ebp], eax
  000c6	8b f4		 mov	 esi, esp
  000c8	8b 4d b0	 mov	 ecx, DWORD PTR tv165[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	66 89 45 ae	 mov	 WORD PTR tv166[ebp], ax
  000dc	66 8b 45 ae	 mov	 ax, WORD PTR tv166[ebp]
  000e0	66 89 45 c4	 mov	 WORD PTR __Meta$68257[ebp], ax

; 490  : 
; 491  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000e4	eb 3b		 jmp	 SHORT $L68258
$L68259:
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000ee	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	89 45 a8	 mov	 DWORD PTR tv167[ebp], eax
  00103	8b f4		 mov	 esi, esp
  00105	8b 4d a8	 mov	 ecx, DWORD PTR tv167[ebp]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  0010e	3b f4		 cmp	 esi, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	66 89 45 a6	 mov	 WORD PTR tv168[ebp], ax
  00119	66 8b 45 a6	 mov	 ax, WORD PTR tv168[ebp]
  0011d	66 89 45 c4	 mov	 WORD PTR __Meta$68257[ebp], ax
$L68258:

; 492  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00121	8b f4		 mov	 esi, esp
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	66 89 45 a4	 mov	 WORD PTR tv169[ebp], ax
  00134	66 8b 4d a4	 mov	 cx, WORD PTR tv169[ebp]
  00138	66 89 4d be	 mov	 WORD PTR $T69886[ebp], cx
  0013c	8b f4		 mov	 esi, esp
  0013e	8d 55 c4	 lea	 edx, DWORD PTR __Meta$68257[ebp]
  00141	52		 push	 edx
  00142	8d 45 be	 lea	 eax, DWORD PTR $T69886[ebp]
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  0014c	83 c4 08	 add	 esp, 8
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	88 45 a3	 mov	 BYTE PTR tv170[ebp], al
  00159	0f b6 4d a3	 movzx	 ecx, BYTE PTR tv170[ebp]
  0015d	85 c9		 test	 ecx, ecx
  0015f	74 0e		 je	 SHORT $L68262

; 493  : 				{	// end of file, quit
; 494  : 				_State |= ios_base::eofbit;

  00161	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00164	83 ca 01	 or	 edx, 1
  00167	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 495  : 				break;

  0016a	e9 d3 00 00 00	 jmp	 $L68260
$L68262:

; 496  : 				}
; 497  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0016f	8b f4		 mov	 esi, esp
  00171	8d 45 d0	 lea	 eax, DWORD PTR __Metadelim$68256[ebp]
  00174	50		 push	 eax
  00175	8d 4d c4	 lea	 ecx, DWORD PTR __Meta$68257[ebp]
  00178	51		 push	 ecx
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  0017f	83 c4 08	 add	 esp, 8
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	88 45 a2	 mov	 BYTE PTR tv171[ebp], al
  0018c	0f b6 55 a2	 movzx	 edx, BYTE PTR tv171[ebp]
  00190	85 d2		 test	 edx, edx
  00192	74 37		 je	 SHORT $L68264

; 498  : 				{	// got a delimiter, discard it and quit
; 499  : 				_Changed = true;

  00194	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 500  : 				_Istr.rdbuf()->sbumpc();

  00198	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0019b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a3	8b f4		 mov	 esi, esp
  001a5	8b ca		 mov	 ecx, edx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  001ad	3b f4		 cmp	 esi, esp
  001af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b4	89 45 9c	 mov	 DWORD PTR tv172[ebp], eax
  001b7	8b f4		 mov	 esi, esp
  001b9	8b 4d 9c	 mov	 ecx, DWORD PTR tv172[ebp]
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  : 				break;

  001c9	eb 77		 jmp	 SHORT $L68260
$L68264:

; 502  : 				}
; 503  : 			else if (_Str.max_size() <= _Str.size())

  001cb	8b f4		 mov	 esi, esp
  001cd	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  001d6	3b f4		 cmp	 esi, esp
  001d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001dd	89 45 98	 mov	 DWORD PTR tv173[ebp], eax
  001e0	8b f4		 mov	 esi, esp
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  001eb	3b f4		 cmp	 esi, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	89 45 94	 mov	 DWORD PTR tv174[ebp], eax
  001f5	8b 45 98	 mov	 eax, DWORD PTR tv173[ebp]
  001f8	3b 45 94	 cmp	 eax, DWORD PTR tv174[ebp]
  001fb	77 0b		 ja	 SHORT $L68266

; 504  : 				{	// string too large, quit
; 505  : 				_State |= ios_base::failbit;

  001fd	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  00200	83 c9 02	 or	 ecx, 2
  00203	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 506  : 				break;

  00206	eb 3a		 jmp	 SHORT $L68260
$L68266:

; 507  : 				}
; 508  : 			else
; 509  : 				{	// got a character, add it to string
; 510  : 				_Str += _Traits::to_char_type(_Meta);

  00208	8b f4		 mov	 esi, esp
  0020a	8d 55 c4	 lea	 edx, DWORD PTR __Meta$68257[ebp]
  0020d	52		 push	 edx
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
  00214	83 c4 04	 add	 esp, 4
  00217	3b f4		 cmp	 esi, esp
  00219	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021e	66 89 45 92	 mov	 WORD PTR tv175[ebp], ax
  00222	8b f4		 mov	 esi, esp
  00224	66 8b 45 92	 mov	 ax, WORD PTR tv175[ebp]
  00228	50		 push	 eax
  00229	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
  00232	3b f4		 cmp	 esi, esp
  00234	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 511  : 				_Changed = true;

  00239	c6 45 eb 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 512  : 				}

  0023d	e9 a4 fe ff ff	 jmp	 $L68259
$L68260:
  00242	eb 24		 jmp	 SHORT $L69888
$L69889:

; 513  : 		_CATCH_IO_(_Istr)

  00244	8b f4		 mov	 esi, esp
  00246	6a 01		 push	 1
  00248	6a 04		 push	 4
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0024d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024f	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00252	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  0025b	3b f4		 cmp	 esi, esp
  0025d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00262	b8 00 00 00 00	 mov	 eax, $L69888
  00267	c3		 ret	 0
$L69888:
  00268	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 514  : 		}
; 515  : 
; 516  : 	if (!_Changed)

  0026f	0f b6 45 eb	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00273	85 c0		 test	 eax, eax
  00275	75 09		 jne	 SHORT $L68268

; 517  : 		_State |= ios_base::failbit;

  00277	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  0027a	83 c9 02	 or	 ecx, 2
  0027d	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx
$L68268:

; 518  : 	_Istr.setstate(_State);

  00280	8b f4		 mov	 esi, esp
  00282	6a 00		 push	 0
  00284	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00287	52		 push	 edx
  00288	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0028b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00290	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00293	8b ca		 mov	 ecx, edx
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  0029b	3b f4		 cmp	 esi, esp
  0029d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  : 	return (_Istr);

  002a2	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002a5	89 45 b8	 mov	 DWORD PTR $T69887[ebp], eax
  002a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002af	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  002b2	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  002b7	8b 45 b8	 mov	 eax, DWORD PTR $T69887[ebp]

; 520  : 	}

  002ba	52		 push	 edx
  002bb	8b cd		 mov	 ecx, ebp
  002bd	50		 push	 eax
  002be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69898
  002c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002c9	58		 pop	 eax
  002ca	5a		 pop	 edx
  002cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	5b		 pop	 ebx
  002d8	83 c4 70	 add	 esp, 112		; 00000070H
  002db	3b ec		 cmp	 ebp, esp
  002dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c3		 ret	 0
$L69898:
  002e6	03 00 00 00	 DD	 3
  002ea	00 00 00 00	 DD	 $L69897
$L69897:
  002ee	dc ff ff ff	 DD	 -36			; ffffffdcH
  002f2	08 00 00 00	 DD	 8
  002f6	00 00 00 00	 DD	 $L69893
  002fa	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002fe	02 00 00 00	 DD	 2
  00302	00 00 00 00	 DD	 $L69894
  00306	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0030a	02 00 00 00	 DD	 2
  0030e	00 00 00 00	 DD	 $L69895
$L69895:
  00312	5f		 DB	 95			; 0000005fH
  00313	4d		 DB	 77			; 0000004dH
  00314	65		 DB	 101			; 00000065H
  00315	74		 DB	 116			; 00000074H
  00316	61		 DB	 97			; 00000061H
  00317	00		 DB	 0
$L69894:
  00318	5f		 DB	 95			; 0000005fH
  00319	4d		 DB	 77			; 0000004dH
  0031a	65		 DB	 101			; 00000065H
  0031b	74		 DB	 116			; 00000074H
  0031c	61		 DB	 97			; 00000061H
  0031d	64		 DB	 100			; 00000064H
  0031e	65		 DB	 101			; 00000065H
  0031f	6c		 DB	 108			; 0000006cH
  00320	69		 DB	 105			; 00000069H
  00321	6d		 DB	 109			; 0000006dH
  00322	00		 DB	 0
$L69893:
  00323	5f		 DB	 95			; 0000005fH
  00324	4f		 DB	 79			; 0000004fH
  00325	6b		 DB	 107			; 0000006bH
  00326	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69890:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
__ehhandler$??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69892
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$getline@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@0@AAV10@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@_W@Z ENDP ; std::getline<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
EXTRN	__imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ:NEAR
EXTRN	__imp_??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z:NEAR
EXTRN	__imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69923	DD	0ffffffffH
	DD	FLAT:$L69916
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T69925	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L69915
$T69924	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T69925
$T69918	DD	019930520H
	DD	03H
	DD	FLAT:$T69923
	DD	01H
	DD	FLAT:$T69924
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
tv221 = -113						; size = 1
tv220 = -112						; size = 2
tv219 = -110						; size = 2
tv218 = -108						; size = 4
tv217 = -104						; size = 2
tv216 = -101						; size = 1
tv215 = -100						; size = 2
tv214 = -98						; size = 2
tv213 = -96						; size = 4
tv212 = -92						; size = 4
tv211 = -85						; size = 1
tv210 = -84						; size = 2
tv209 = -82						; size = 2
tv208 = -80						; size = 4
tv207 = -74						; size = 2
tv83 = -72						; size = 4
tv81 = -68						; size = 4
$T69913 = -64						; size = 4
$T69912 = -60						; size = 2
$T69911 = -58						; size = 2
$T69910 = -56						; size = 2
$T69909 = -54						; size = 2
$T69908 = -52						; size = 2
$T69907 = -50						; size = 2
__Count$68291 = -48					; size = 4
__Ok$ = -40						; size = 8
__Pad$ = -28						; size = 4
__Size$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC NEAR ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 538  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 64	 sub	 esp, 100		; 00000064H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00022	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 539  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 540  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 541  : 	typedef typename _Mystr::size_type _Mysizt;
; 542  : 
; 543  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 544  : 	_Mysizt _Size = _Str.size();

  00038	8b f4		 mov	 esi, esp
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 e8	 mov	 DWORD PTR __Size$[ebp], eax

; 545  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 546  : 			? 0 : (_Mysizt)_Ostr.width() - _Size;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00055	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00058	8b f4		 mov	 esi, esp
  0005a	8b ca		 mov	 ecx, edx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	85 c0		 test	 eax, eax
  0006b	7e 45		 jle	 SHORT $L69905
  0006d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00075	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00078	8b f4		 mov	 esi, esp
  0007a	8b ca		 mov	 ecx, edx
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	3b 45 e8	 cmp	 eax, DWORD PTR __Size$[ebp]
  0008c	76 24		 jbe	 SHORT $L69905
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00096	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00099	8b f4		 mov	 esi, esp
  0009b	8b ca		 mov	 ecx, edx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	2b 45 e8	 sub	 eax, DWORD PTR __Size$[ebp]
  000ad	89 45 bc	 mov	 DWORD PTR tv81[ebp], eax
  000b0	eb 07		 jmp	 SHORT $L69906
$L69905:
  000b2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L69906:
  000b9	8b 45 bc	 mov	 eax, DWORD PTR tv81[ebp]
  000bc	89 45 e4	 mov	 DWORD PTR __Pad$[ebp], eax

; 547  : 	const typename _Myos::sentry _Ok(_Ostr);

  000bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000c2	51		 push	 ecx
  000c3	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000c6	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 548  : 
; 549  : 	if (!_Ok)

  000d2	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d5	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
  000da	0f b6 d0	 movzx	 edx, al
  000dd	85 d2		 test	 edx, edx
  000df	75 0e		 jne	 SHORT $L68280

; 550  : 		_State |= ios_base::badbit;

  000e1	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  000e4	83 c8 04	 or	 eax, 4
  000e7	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 551  : 	else

  000ea	e9 dd 02 00 00	 jmp	 $L69914
$L68280:

; 552  : 		{	// state okay, insert characters
; 553  : 	_TRY_IO_BEGIN

  000ef	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 554  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000f3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000fb	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000fe	8b f4		 mov	 esi, esp
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00106	3b f4		 cmp	 esi, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	89 45 b8	 mov	 DWORD PTR tv83[ebp], eax
  00110	8b 45 b8	 mov	 eax, DWORD PTR tv83[ebp]
  00113	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00118	83 f8 40	 cmp	 eax, 64			; 00000040H
  0011b	0f 84 c3 00 00
	00		 je	 $L68283

; 555  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00121	eb 09		 jmp	 SHORT $L68284
$L68285:
  00123	8b 4d e4	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00126	83 e9 01	 sub	 ecx, 1
  00129	89 4d e4	 mov	 DWORD PTR __Pad$[ebp], ecx
$L68284:
  0012c	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00130	0f 86 ae 00 00
	00		 jbe	 $L68283

; 556  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 557  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00136	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00139	8b 02		 mov	 eax, DWORD PTR [edx]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0013e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00141	8b f4		 mov	 esi, esp
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	66 89 45 b6	 mov	 WORD PTR tv207[ebp], ax
  00154	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0015c	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0015f	8b f4		 mov	 esi, esp
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	89 45 b0	 mov	 DWORD PTR tv208[ebp], eax
  00171	8b f4		 mov	 esi, esp
  00173	66 8b 45 b6	 mov	 ax, WORD PTR tv207[ebp]
  00177	50		 push	 eax
  00178	8b 4d b0	 mov	 ecx, DWORD PTR tv208[ebp]
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00181	3b f4		 cmp	 esi, esp
  00183	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00188	66 89 45 ae	 mov	 WORD PTR tv209[ebp], ax
  0018c	66 8b 4d ae	 mov	 cx, WORD PTR tv209[ebp]
  00190	66 89 4d ce	 mov	 WORD PTR $T69907[ebp], cx
  00194	8b f4		 mov	 esi, esp
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	66 89 45 ac	 mov	 WORD PTR tv210[ebp], ax
  001a7	66 8b 55 ac	 mov	 dx, WORD PTR tv210[ebp]
  001ab	66 89 55 cc	 mov	 WORD PTR $T69908[ebp], dx
  001af	8b f4		 mov	 esi, esp
  001b1	8d 45 ce	 lea	 eax, DWORD PTR $T69907[ebp]
  001b4	50		 push	 eax
  001b5	8d 4d cc	 lea	 ecx, DWORD PTR $T69908[ebp]
  001b8	51		 push	 ecx
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  001bf	83 c4 08	 add	 esp, 8
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c9	88 45 ab	 mov	 BYTE PTR tv211[ebp], al
  001cc	0f b6 55 ab	 movzx	 edx, BYTE PTR tv211[ebp]
  001d0	85 d2		 test	 edx, edx
  001d2	74 0b		 je	 SHORT $L68289

; 558  : 					{	// insertion failed, quit
; 559  : 					_State |= ios_base::badbit;

  001d4	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  001d7	83 c8 04	 or	 eax, 4
  001da	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 560  : 					break;

  001dd	eb 05		 jmp	 SHORT $L68283
$L68289:

; 561  : 					}
; 562  : 
; 563  : 		if (_State == ios_base::goodbit)

  001df	e9 3f ff ff ff	 jmp	 $L68285
$L68283:
  001e4	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e8	0f 85 c9 00 00
	00		 jne	 $L68290

; 564  : 			for (_Mysizt _Count = 0; _Count < _Size; ++_Count)

  001ee	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Count$68291[ebp], 0
  001f5	eb 09		 jmp	 SHORT $L68292
$L68293:
  001f7	8b 4d d0	 mov	 ecx, DWORD PTR __Count$68291[ebp]
  001fa	83 c1 01	 add	 ecx, 1
  001fd	89 4d d0	 mov	 DWORD PTR __Count$68291[ebp], ecx
$L68292:
  00200	8b 55 d0	 mov	 edx, DWORD PTR __Count$68291[ebp]
  00203	3b 55 e8	 cmp	 edx, DWORD PTR __Size$[ebp]
  00206	0f 83 ab 00 00
	00		 jae	 $L68290

; 565  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 566  : 					_Ostr.rdbuf()->sputc(_Str[_Count])))

  0020c	8b f4		 mov	 esi, esp
  0020e	8b 45 d0	 mov	 eax, DWORD PTR __Count$68291[ebp]
  00211	50		 push	 eax
  00212	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
  0021b	3b f4		 cmp	 esi, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	89 45 a4	 mov	 DWORD PTR tv212[ebp], eax
  00225	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00228	8b 11		 mov	 edx, DWORD PTR [ecx]
  0022a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0022d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00230	8b f4		 mov	 esi, esp
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00238	3b f4		 cmp	 esi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023f	89 45 a0	 mov	 DWORD PTR tv213[ebp], eax
  00242	8b f4		 mov	 esi, esp
  00244	8b 45 a4	 mov	 eax, DWORD PTR tv212[ebp]
  00247	66 8b 08	 mov	 cx, WORD PTR [eax]
  0024a	51		 push	 ecx
  0024b	8b 4d a0	 mov	 ecx, DWORD PTR tv213[ebp]
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00254	3b f4		 cmp	 esi, esp
  00256	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025b	66 89 45 9e	 mov	 WORD PTR tv214[ebp], ax
  0025f	66 8b 55 9e	 mov	 dx, WORD PTR tv214[ebp]
  00263	66 89 55 ca	 mov	 WORD PTR $T69909[ebp], dx
  00267	8b f4		 mov	 esi, esp
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  0026f	3b f4		 cmp	 esi, esp
  00271	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00276	66 89 45 9c	 mov	 WORD PTR tv215[ebp], ax
  0027a	66 8b 45 9c	 mov	 ax, WORD PTR tv215[ebp]
  0027e	66 89 45 c8	 mov	 WORD PTR $T69910[ebp], ax
  00282	8b f4		 mov	 esi, esp
  00284	8d 4d ca	 lea	 ecx, DWORD PTR $T69909[ebp]
  00287	51		 push	 ecx
  00288	8d 55 c8	 lea	 edx, DWORD PTR $T69910[ebp]
  0028b	52		 push	 edx
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00292	83 c4 08	 add	 esp, 8
  00295	3b f4		 cmp	 esi, esp
  00297	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029c	88 45 9b	 mov	 BYTE PTR tv216[ebp], al
  0029f	0f b6 45 9b	 movzx	 eax, BYTE PTR tv216[ebp]
  002a3	85 c0		 test	 eax, eax
  002a5	74 0b		 je	 SHORT $L68297

; 567  : 					{	// insertion failed, quit
; 568  : 					_State |= ios_base::badbit;

  002a7	8b 4d ec	 mov	 ecx, DWORD PTR __State$[ebp]
  002aa	83 c9 04	 or	 ecx, 4
  002ad	89 4d ec	 mov	 DWORD PTR __State$[ebp], ecx

; 569  : 					break;

  002b0	eb 05		 jmp	 SHORT $L68290
$L68297:

; 570  : 					}
; 571  : 
; 572  : 		if (_State == ios_base::goodbit)

  002b2	e9 40 ff ff ff	 jmp	 $L68293
$L68290:
  002b7	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  002bb	0f 85 c7 00 00
	00		 jne	 $L68298

; 573  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002c1	eb 09		 jmp	 SHORT $L68299
$L68300:
  002c3	8b 55 e4	 mov	 edx, DWORD PTR __Pad$[ebp]
  002c6	83 ea 01	 sub	 edx, 1
  002c9	89 55 e4	 mov	 DWORD PTR __Pad$[ebp], edx
$L68299:
  002cc	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002d0	0f 86 b2 00 00
	00		 jbe	 $L68298

; 574  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 575  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  002d6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e1	8b f4		 mov	 esi, esp
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	66 89 45 98	 mov	 WORD PTR tv217[ebp], ax
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b f4		 mov	 esi, esp
  00303	8b ca		 mov	 ecx, edx
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  0030b	3b f4		 cmp	 esi, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	89 45 94	 mov	 DWORD PTR tv218[ebp], eax
  00315	8b f4		 mov	 esi, esp
  00317	66 8b 45 98	 mov	 ax, WORD PTR tv217[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 94	 mov	 ecx, DWORD PTR tv218[ebp]
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
  00325	3b f4		 cmp	 esi, esp
  00327	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032c	66 89 45 92	 mov	 WORD PTR tv219[ebp], ax
  00330	66 8b 4d 92	 mov	 cx, WORD PTR tv219[ebp]
  00334	66 89 4d c6	 mov	 WORD PTR $T69911[ebp], cx
  00338	8b f4		 mov	 esi, esp
  0033a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@?$char_traits@_W@std@@SAGXZ
  00340	3b f4		 cmp	 esi, esp
  00342	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00347	66 89 45 90	 mov	 WORD PTR tv220[ebp], ax
  0034b	66 8b 55 90	 mov	 dx, WORD PTR tv220[ebp]
  0034f	66 89 55 c4	 mov	 WORD PTR $T69912[ebp], dx
  00353	8b f4		 mov	 esi, esp
  00355	8d 45 c6	 lea	 eax, DWORD PTR $T69911[ebp]
  00358	50		 push	 eax
  00359	8d 4d c4	 lea	 ecx, DWORD PTR $T69912[ebp]
  0035c	51		 push	 ecx
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
  00363	83 c4 08	 add	 esp, 8
  00366	3b f4		 cmp	 esi, esp
  00368	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036d	88 45 8f	 mov	 BYTE PTR tv221[ebp], al
  00370	0f b6 55 8f	 movzx	 edx, BYTE PTR tv221[ebp]
  00374	85 d2		 test	 edx, edx
  00376	74 0b		 je	 SHORT $L68304

; 576  : 					{	// insertion failed, quit
; 577  : 					_State |= ios_base::badbit;

  00378	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  0037b	83 c8 04	 or	 eax, 4
  0037e	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 578  : 					break;

  00381	eb 05		 jmp	 SHORT $L68298
$L68304:

; 579  : 					}
; 580  : 		_Ostr.width(0);

  00383	e9 3b ff ff ff	 jmp	 $L68300
$L68298:
  00388	8b f4		 mov	 esi, esp
  0038a	6a 00		 push	 0
  0038c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0038f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00391	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00394	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00397	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
  0039d	3b f4		 cmp	 esi, esp
  0039f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a4	eb 26		 jmp	 SHORT $L69914
$L69915:

; 581  : 		_CATCH_IO_(_Ostr)

  003a6	8b f4		 mov	 esi, esp
  003a8	6a 01		 push	 1
  003aa	6a 04		 push	 4
  003ac	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003af	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003b7	8b ca		 mov	 ecx, edx
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  003bf	3b f4		 cmp	 esi, esp
  003c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c6	b8 00 00 00 00	 mov	 eax, $L69914
  003cb	c3		 ret	 0
$L69914:
  003cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 		}
; 583  : 
; 584  : 	_Ostr.setstate(_State);

  003d3	8b f4		 mov	 esi, esp
  003d5	6a 00		 push	 0
  003d7	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  003da	50		 push	 eax
  003db	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003de	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
  003ec	3b f4		 cmp	 esi, esp
  003ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 585  : 	return (_Ostr);

  003f3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f6	89 45 c0	 mov	 DWORD PTR $T69913[ebp], eax
  003f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00400	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00403	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00408	8b 45 c0	 mov	 eax, DWORD PTR $T69913[ebp]

; 586  : 	}

  0040b	52		 push	 edx
  0040c	8b cd		 mov	 ecx, ebp
  0040e	50		 push	 eax
  0040f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L69922
  00415	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0041a	58		 pop	 eax
  0041b	5a		 pop	 edx
  0041c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00426	5f		 pop	 edi
  00427	5e		 pop	 esi
  00428	5b		 pop	 ebx
  00429	83 c4 74	 add	 esp, 116		; 00000074H
  0042c	3b ec		 cmp	 ebp, esp
  0042e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c3		 ret	 0
$L69922:
  00437	01 00 00 00	 DD	 1
  0043b	00 00 00 00	 DD	 $L69921
$L69921:
  0043f	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00443	08 00 00 00	 DD	 8
  00447	00 00 00 00	 DD	 $L69919
$L69919:
  0044b	5f		 DB	 95			; 0000005fH
  0044c	4f		 DB	 79			; 0000004fH
  0044d	6b		 DB	 107			; 0000006bH
  0044e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69916:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69918
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ:NEAR
EXTRN	__imp_?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\ostream
xdata$x	SEGMENT
$T69933	DD	0ffffffffH
	DD	FLAT:$L69929
$T69931	DD	019930520H
	DD	01H
	DD	FLAT:$T69933
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $L67520
  00058	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00060	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00063	8b f4		 mov	 esi, esp
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	85 c0		 test	 eax, eax
  00074	74 2d		 je	 SHORT $L67520

; 90   : 				_Ostr.tie()->flush();

  00076	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0007e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00081	8b f4		 mov	 esi, esp
  00083	8b ca		 mov	 ecx, edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b f4		 mov	 esi, esp
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67520:

; 91   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ab	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ae	8b f4		 mov	 esi, esp
  000b0	8b ca		 mov	 ecx, edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 92   : 			}

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d9	5e		 pop	 esi
  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69929:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69931
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T69941	DD	0ffffffffH
	DD	FLAT:$L69937
$T69939	DD	019930520H
	DD	01H
	DD	FLAT:$T69941
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 
; 97   :  #if _HAS_EXCEPTIONS
; 98   : 			if (!uncaught_exception())

  0002b	8b f4		 mov	 esi, esp
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L67522

; 99   : 				this->_Myostr._Osfx();

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67522:

; 100  : 			}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006e	5e		 pop	 esi
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L69937:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T69939
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Odt /RTCsu
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 108  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 			return (_Ok);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 110  : 			}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 68   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 69   : 			if (_Myostr.rdbuf() != 0)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00026	8b f4		 mov	 esi, esp
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 2f		 je	 SHORT $L67787

; 70   : 				_Myostr.rdbuf()->_Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00047	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67787:

; 71   : 			}

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	5e		 pop	 esi
  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC NEAR ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 74   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			if (_Myostr.rdbuf() != 0)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	85 c0		 test	 eax, eax
  0002f	74 2f		 je	 SHORT $L67790

; 76   : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	8b f4		 mov	 esi, esp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f4		 mov	 esi, esp
  00051	8b c8		 mov	 ecx, eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L67790:

; 77   : 			}

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
END
