; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\BCMenu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@FPGHCJFK@?$CIiChar?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIiChar?5?$DM?5GetLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@PKIBFLAK@AtlIsValidString?$CI?5pszSub?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IBFBLEEG@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??0BCMenuData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWideString@BCMenuData@@QAEPB_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMenuItemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT _$E8
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E9
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT _$E11
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E13
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E14
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuData@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindCharRev@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLowercase@?$ChTraitsCRT@D@ATL@@SAPADPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FloodCharacters@?$ChTraitsCRT@D@ATL@@SAXDHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@HAAH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@HAAH@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CArray@HAAH@@QAEHAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@HAAH@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@PAVBCMenu@@PAV1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@PAVBCMenu@@PAV1@@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@HH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@?$CArray@HH@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CArray@HH@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@HH@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@HH@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$DumpElements@PAVBCMenu@@@@YGXAAVCDumpContext@@PBQAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3BCMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@HH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CPtrArray@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@HH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCPtrArray@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4BCMenu@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@HH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EN@CBMLGOH@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@HH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@PAVBCMenu@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@HAAH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FG@LDNDNCJM@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_DebugHeapDelete@X@std@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@KDPNIMBO@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FI@NHHJANPC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FJ@DMHPDOJC@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVCMenu@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVBCMenu@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7BCMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?classBCMenu@BCMenu@@2UCRuntimeClass@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?m_iconX@BCMenu@@1HA				; BCMenu::m_iconX
PUBLIC	?m_iconY@BCMenu@@1HA				; BCMenu::m_iconY
PUBLIC	?original_drawmode@BCMenu@@1IA			; BCMenu::original_drawmode
PUBLIC	?original_select_disabled@BCMenu@@1HA		; BCMenu::original_select_disabled
PUBLIC	?xp_drawmode@BCMenu@@1IA			; BCMenu::xp_drawmode
PUBLIC	?xp_select_disabled@BCMenu@@1HA			; BCMenu::xp_select_disabled
PUBLIC	?xp_draw_3D_bitmaps@BCMenu@@1HA			; BCMenu::xp_draw_3D_bitmaps
PUBLIC	?hicolor_bitmaps@BCMenu@@1HA			; BCMenu::hicolor_bitmaps
PUBLIC	?xp_space_accelerators@BCMenu@@1HA		; BCMenu::xp_space_accelerators
PUBLIC	?original_space_accelerators@BCMenu@@1HA	; BCMenu::original_space_accelerators
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?classBCMenu@BCMenu@@2UCRuntimeClass@@B		; BCMenu::classBCMenu
EXTRN	?GetThisClass@CMenu@@SGPAUCRuntimeClass@@XZ:NEAR ; CMenu::GetThisClass
_BSS	SEGMENT
?original_drawmode@BCMenu@@1IA DD 01H DUP (?)		; BCMenu::original_drawmode
?xp_select_disabled@BCMenu@@1HA DD 01H DUP (?)		; BCMenu::xp_select_disabled
?hicolor_bitmaps@BCMenu@@1HA DD 01H DUP (?)		; BCMenu::hicolor_bitmaps
_BSS	ENDS
_DATA	SEGMENT
_THIS_FILE DB	'.\src\Gui\util\BCMenu.cpp', 00H
	ORG $+2
?original_select_disabled@BCMenu@@1HA DD 01H		; BCMenu::original_select_disabled
?xp_drawmode@BCMenu@@1IA DD 01H				; BCMenu::xp_drawmode
?xp_draw_3D_bitmaps@BCMenu@@1HA DD 01H			; BCMenu::xp_draw_3D_bitmaps
?xp_space_accelerators@BCMenu@@1HA DD 01H		; BCMenu::xp_space_accelerators
?original_space_accelerators@BCMenu@@1HA DD 01H		; BCMenu::original_space_accelerators
?m_iconX@BCMenu@@1HA DD 010H				; BCMenu::m_iconX
?m_iconY@BCMenu@@1HA DD 0fH				; BCMenu::m_iconY
_DATA	ENDS
CONST	SEGMENT
$SG187837 DB	'BCMenu', 00H
CONST	ENDS
;	COMDAT ?classBCMenu@BCMenu@@2UCRuntimeClass@@B
CONST	SEGMENT
?classBCMenu@BCMenu@@2UCRuntimeClass@@B DD FLAT:$SG187837 ; BCMenu::classBCMenu
	DD	064H
	DD	0ffffH
	DD	00H
	DD	FLAT:?GetThisClass@CMenu@@SGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
CONST	SEGMENT
	ORG $+1
$SG189268 DB	' ', 00H
$SG189443 DB	00H
$SG189936 DB	00H
$SG190357 DB	'Software\Microsoft\Plus!\Themes\Current', 00H
$SG190362 DB	'Windows Classic.theme', 00H
	ORG $+6
$SG190731 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190745 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190761 DB	'with ', 00H
	ORG $+2
$SG190762 DB	' elements', 00H
	ORG $+2
$SG190764 DB	0aH, 00H
	ORG $+2
$SG190771 DB	0aH, 00H
	ORG $+6
$SG190779 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190781 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190784 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190786 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190788 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190791 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190820 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190834 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190850 DB	'with ', 00H
	ORG $+2
$SG190851 DB	' elements', 00H
	ORG $+2
$SG190853 DB	0aH, 00H
	ORG $+2
$SG190860 DB	0aH, 00H
	ORG $+6
$SG190868 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190870 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190873 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190875 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190877 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190880 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190919 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190921 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190923 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190925 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190941 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190955 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190965 DB	'with ', 00H
	ORG $+2
$SG190966 DB	' elements', 00H
	ORG $+2
$SG190968 DB	0aH, 00H
	ORG $+2
$SG190969 DB	0aH, 00H
	ORG $+6
$SG190977 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190979 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190982 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190984 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190986 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG190989 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191020 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191022 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191037 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191044 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191080 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191084 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191094 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191122 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191124 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191131 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191156 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191164 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191166 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191181 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191188 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191224 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191228 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191238 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191266 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191268 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191275 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191300 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191308 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191310 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191325 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191332 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191368 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191372 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191382 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191402 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
	ORG $+1
$SG191404 DB	'D:\Program Files (x86)\Microsoft Visual Studio .NET 2003'
	DB	'\Vc7\atlmfc\include\afxtempl.h', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	?IsShellType@@YA?AW4Win32Type@@XZ		; IsShellType
EXTRN	__imp__GetVersion@0:NEAR
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	_memset:NEAR
EXTRN	__imp__free:NEAR
EXTRN	__imp__malloc:NEAR
;	COMDAT rtc$IMZ
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_osvi$ = -12						; size = 4
_winVer$ = -8						; size = 4
_ShellType$ = -4					; size = 4
?IsShellType@@YA?AW4Win32Type@@XZ PROC NEAR		; IsShellType

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 86   : 	Win32Type  ShellType;
; 87   : 	DWORD winVer;
; 88   : 	OSVERSIONINFO *osvi;
; 89   : 	
; 90   : 	winVer=GetVersion();

  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersion@0
  00024	3b f4		 cmp	 esi, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	89 45 f8	 mov	 DWORD PTR _winVer$[ebp], eax

; 91   : 	if(winVer<0x80000000){/*NT */

  0002e	81 7d f8 00 00
	00 80		 cmp	 DWORD PTR _winVer$[ebp], -2147483648 ; 80000000H
  00035	0f 83 bb 00 00
	00		 jae	 $L187772

; 92   : 		ShellType=WinNT3;

  0003b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 1

; 93   : 		osvi= (OSVERSIONINFO *)malloc(sizeof(OSVERSIONINFO));

  00042	8b f4		 mov	 esi, esp
  00044	68 94 00 00 00	 push	 148			; 00000094H
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0004f	83 c4 04	 add	 esp, 4
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	89 45 f4	 mov	 DWORD PTR _osvi$[ebp], eax

; 94   : 		if (osvi!=NULL){

  0005c	83 7d f4 00	 cmp	 DWORD PTR _osvi$[ebp], 0
  00060	0f 84 8b 00 00
	00		 je	 $L187775

; 95   : 			memset(osvi,0,sizeof(OSVERSIONINFO));

  00066	68 94 00 00 00	 push	 148			; 00000094H
  0006b	6a 00		 push	 0
  0006d	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _memset
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 96   : 			osvi->dwOSVersionInfoSize=sizeof(OSVERSIONINFO);

  00079	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  0007c	c7 01 94 00 00
	00		 mov	 DWORD PTR [ecx], 148	; 00000094H

; 97   : 			GetVersionEx(osvi);

  00082	8b f4		 mov	 esi, esp
  00084	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  00087	52		 push	 edx
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 98   : 			if(osvi->dwMajorVersion==4L)ShellType=WinNT4;

  00095	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00098	83 78 04 04	 cmp	 DWORD PTR [eax+4], 4
  0009c	75 09		 jne	 SHORT $L187778
  0009e	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 5

; 99   : 			else if(osvi->dwMajorVersion==5L&&osvi->dwMinorVersion==0L)ShellType=Win2000;

  000a5	eb 34		 jmp	 SHORT $L187779
$L187778:
  000a7	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  000aa	83 79 04 05	 cmp	 DWORD PTR [ecx+4], 5
  000ae	75 12		 jne	 SHORT $L187780
  000b0	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  000b3	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000b7	75 09		 jne	 SHORT $L187780
  000b9	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 6

; 100  : 			else if(osvi->dwMajorVersion==5L&&osvi->dwMinorVersion==1L)ShellType=WinXP;

  000c0	eb 19		 jmp	 SHORT $L187779
$L187780:
  000c2	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  000c5	83 78 04 05	 cmp	 DWORD PTR [eax+4], 5
  000c9	75 10		 jne	 SHORT $L187779
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  000ce	83 79 08 01	 cmp	 DWORD PTR [ecx+8], 1
  000d2	75 07		 jne	 SHORT $L187779
  000d4	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 7
$L187779:

; 101  : 			free(osvi);

  000db	8b f4		 mov	 esi, esp
  000dd	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  000e0	52		 push	 edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000e7	83 c4 04	 add	 esp, 4
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187775:

; 102  : 		}
; 103  : 	}
; 104  : 	else if  (LOBYTE(LOWORD(winVer))<4)

  000f1	e9 c5 00 00 00	 jmp	 $L187783
$L187772:
  000f6	8b 45 f8	 mov	 eax, DWORD PTR _winVer$[ebp]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	0f b7 c8	 movzx	 ecx, ax
  00101	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00107	0f b6 d1	 movzx	 edx, cl
  0010a	83 fa 04	 cmp	 edx, 4
  0010d	7d 0c		 jge	 SHORT $L187788

; 105  : 		ShellType=Win32s;

  0010f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 0

; 106  : 	else{

  00116	e9 a0 00 00 00	 jmp	 $L187783
$L187788:

; 107  : 		ShellType=Win95;

  0011b	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 2

; 108  : 		osvi= (OSVERSIONINFO *)malloc(sizeof(OSVERSIONINFO));

  00122	8b f4		 mov	 esi, esp
  00124	68 94 00 00 00	 push	 148			; 00000094H
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0012f	83 c4 04	 add	 esp, 4
  00132	3b f4		 cmp	 esi, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00139	89 45 f4	 mov	 DWORD PTR _osvi$[ebp], eax

; 109  : 		if (osvi!=NULL){

  0013c	83 7d f4 00	 cmp	 DWORD PTR _osvi$[ebp], 0
  00140	74 79		 je	 SHORT $L187783

; 110  : 			memset(osvi,0,sizeof(OSVERSIONINFO));

  00142	68 94 00 00 00	 push	 148			; 00000094H
  00147	6a 00		 push	 0
  00149	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _memset
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : 			osvi->dwOSVersionInfoSize=sizeof(OSVERSIONINFO);

  00155	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  00158	c7 01 94 00 00
	00		 mov	 DWORD PTR [ecx], 148	; 00000094H

; 112  : 			GetVersionEx(osvi);

  0015e	8b f4		 mov	 esi, esp
  00160	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  00163	52		 push	 edx
  00164	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0016a	3b f4		 cmp	 esi, esp
  0016c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 113  : 			if(osvi->dwMajorVersion==4L&&osvi->dwMinorVersion==10L)ShellType=Win98;

  00171	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00174	83 78 04 04	 cmp	 DWORD PTR [eax+4], 4
  00178	75 12		 jne	 SHORT $L187795
  0017a	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  0017d	83 79 08 0a	 cmp	 DWORD PTR [ecx+8], 10	; 0000000aH
  00181	75 09		 jne	 SHORT $L187795
  00183	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 3

; 114  : 			else if(osvi->dwMajorVersion==4L&&osvi->dwMinorVersion==90L)ShellType=WinME;

  0018a	eb 19		 jmp	 SHORT $L187796
$L187795:
  0018c	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  0018f	83 7a 04 04	 cmp	 DWORD PTR [edx+4], 4
  00193	75 10		 jne	 SHORT $L187796
  00195	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00198	83 78 08 5a	 cmp	 DWORD PTR [eax+8], 90	; 0000005aH
  0019c	75 07		 jne	 SHORT $L187796
  0019e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 4
$L187796:

; 115  : 			free(osvi);

  001a5	8b f4		 mov	 esi, esp
  001a7	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  001aa	51		 push	 ecx
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001b1	83 c4 04	 add	 esp, 4
  001b4	3b f4		 cmp	 esi, esp
  001b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187783:

; 116  : 		}
; 117  : 	}
; 118  : 	return ShellType;

  001bb	8b 45 fc	 mov	 eax, DWORD PTR _ShellType$[ebp]

; 119  : }

  001be	5e		 pop	 esi
  001bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c2	3b ec		 cmp	 ebp, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c3		 ret	 0
?IsShellType@@YA?AW4Win32Type@@XZ ENDP			; IsShellType
_TEXT	ENDS
PUBLIC	?SetAnsiString@BCMenuData@@QAEXPBD@Z		; BCMenuData::SetAnsiString
PUBLIC	?SetWideString@BCMenuData@@QAEXPB_W@Z		; BCMenuData::SetWideString
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	??_U@YAPAXIPBDH@Z:NEAR				; operator new[]
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192026 = -20						; size = 4
$T192025 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_szAnsiString$ = 8					; size = 4
?SetAnsiString@BCMenuData@@QAEXPBD@Z PROC NEAR		; BCMenuData::SetAnsiString
; _this$ = ecx

; 124  : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	83 ec 14	 sub	 esp, 20			; 00000014H
  001d6	56		 push	 esi
  001d7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  001dc	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  001df	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  001e2	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  001e5	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  001e8	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  001eb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 	int len=MultiByteToWideChar(CP_ACP, 0,szAnsiString, -1,NULL,0);

  001ee	8b f4		 mov	 esi, esp
  001f0	6a 00		 push	 0
  001f2	6a 00		 push	 0
  001f4	6a ff		 push	 -1
  001f6	8b 45 08	 mov	 eax, DWORD PTR _szAnsiString$[ebp]
  001f9	50		 push	 eax
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020b	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 126  : 	wchar_t* wszUtf8 = new wchar_t[len];

  0020e	6a 7e		 push	 126			; 0000007eH
  00210	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00215	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  00218	d1 e1		 shl	 ecx, 1
  0021a	51		 push	 ecx
  0021b	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  00220	83 c4 0c	 add	 esp, 12			; 0000000cH
  00223	89 45 f0	 mov	 DWORD PTR $T192025[ebp], eax
  00226	8b 55 f0	 mov	 edx, DWORD PTR $T192025[ebp]
  00229	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 127  : 	memset(wszUtf8, 0, len * 2);

  0022c	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0022f	d1 e0		 shl	 eax, 1
  00231	50		 push	 eax
  00232	6a 00		 push	 0
  00234	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  00237	51		 push	 ecx
  00238	e8 00 00 00 00	 call	 _memset
  0023d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 	MultiByteToWideChar(CP_ACP, 0, szAnsiString, -1, (LPWSTR)wszUtf8, len);	

  00240	8b f4		 mov	 esi, esp
  00242	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  00245	52		 push	 edx
  00246	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  00249	50		 push	 eax
  0024a	6a ff		 push	 -1
  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _szAnsiString$[ebp]
  0024f	51		 push	 ecx
  00250	6a 00		 push	 0
  00252	6a 00		 push	 0
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0025a	3b f4		 cmp	 esi, esp
  0025c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 129  : 
; 130  : 	SetWideString( wszUtf8);  //SK:  see MFC Tech Note 059

  00261	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  00264	52		 push	 edx
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00268	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 131  : 	delete[] wszUtf8;

  0026d	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  00270	89 45 ec	 mov	 DWORD PTR $T192026[ebp], eax
  00273	8b 4d ec	 mov	 ecx, DWORD PTR $T192026[ebp]
  00276	51		 push	 ecx
  00277	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0027c	83 c4 04	 add	 esp, 4

; 132  : }

  0027f	5e		 pop	 esi
  00280	83 c4 14	 add	 esp, 20			; 00000014H
  00283	3b ec		 cmp	 ebp, esp
  00285	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c2 04 00	 ret	 4
?SetAnsiString@BCMenuData@@QAEXPBD@Z ENDP		; BCMenuData::SetAnsiString
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
EXTRN	__imp__WideCharToMultiByte@32:NEAR
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
xdata$x	SEGMENT
$T192047 DD	0ffffffffH
	DD	FLAT:$L192029
$T192036 DD	019930520H
	DD	01H
	DD	FLAT:$T192047
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192031 = -316						; size = 4
_szbuffer$187823 = -308					; size = 256
__lpa$187822 = -48					; size = 4
__lpw$187821 = -44					; size = 4
__acp$187820 = -40					; size = 4
__convert$187819 = -36					; size = 4
_strText$ = -28						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC NEAR ; BCMenuData::GetString
; _this$ = ecx

; 136  : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	6a ff		 push	 -1
  00295	68 00 00 00 00	 push	 __ehhandler$?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
  0029a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  002a0	50		 push	 eax
  002a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  002a8	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  002ae	56		 push	 esi
  002af	57		 push	 edi
  002b0	51		 push	 ecx
  002b1	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  002b7	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  002bc	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  002c1	f3 ab		 rep stosd
  002c3	59		 pop	 ecx
  002c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  002c9	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  002cc	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  002cf	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T192031[ebp], 0

; 137  : 	CString strText;

  002d9	8b f4		 mov	 esi, esp
  002db	8d 4d e4	 lea	 ecx, DWORD PTR _strText$[ebp]
  002de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002e4	3b f4		 cmp	 esi, esp
  002e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  : 	if (m_szMenuText)

  002f2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002f5	83 38 00	 cmp	 DWORD PTR [eax], 0
  002f8	74 61		 je	 SHORT $L187818

; 139  :     {
; 140  : #ifdef UNICODE
; 141  : 		strText = m_szMenuText;
; 142  : #else
; 143  : 		USES_CONVERSION;

  002fa	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __convert$187819[ebp], 0
  00301	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00306	89 45 d8	 mov	 DWORD PTR __acp$187820[ebp], eax
  00309	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __lpw$187821[ebp], 0
  00310	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __lpa$187822[ebp], 0

; 144  : 		char szbuffer[256];
; 145  : 
; 146  : 		WideCharToMultiByte( CP_ACP, 0, m_szMenuText, -1,
; 147  : 			szbuffer, 256, NULL, NULL );

  00317	8b f4		 mov	 esi, esp
  00319	6a 00		 push	 0
  0031b	6a 00		 push	 0
  0031d	68 00 01 00 00	 push	 256			; 00000100H
  00322	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _szbuffer$187823[ebp]
  00328	51		 push	 ecx
  00329	6a ff		 push	 -1
  0032b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0032e	8b 02		 mov	 eax, DWORD PTR [edx]
  00330	50		 push	 eax
  00331	6a 00		 push	 0
  00333	6a 00		 push	 0
  00335	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0033b	3b f4		 cmp	 esi, esp
  0033d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  : 
; 149  : //		strText=W2A(m_szMenuText);     //SK:  see MFC Tech Note 059
; 150  : //		WildChar
; 151  : 		strText = szbuffer;

  00342	8b f4		 mov	 esi, esp
  00344	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _szbuffer$187823[ebp]
  0034a	51		 push	 ecx
  0034b	8d 4d e4	 lea	 ecx, DWORD PTR _strText$[ebp]
  0034e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00354	3b f4		 cmp	 esi, esp
  00356	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187818:

; 152  : #endif    
; 153  :     }
; 154  : 	return strText;

  0035b	8b f4		 mov	 esi, esp
  0035d	8d 55 e4	 lea	 edx, DWORD PTR _strText$[ebp]
  00360	52		 push	 edx
  00361	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00364	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0036a	3b f4		 cmp	 esi, esp
  0036c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00371	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T192031[ebp]
  00377	83 c8 01	 or	 eax, 1
  0037a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T192031[ebp], eax
  00380	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00387	8b f4		 mov	 esi, esp
  00389	8d 4d e4	 lea	 ecx, DWORD PTR _strText$[ebp]
  0038c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00392	3b f4		 cmp	 esi, esp
  00394	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00399	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 155  : }

  0039c	52		 push	 edx
  0039d	8b cd		 mov	 ecx, ebp
  0039f	50		 push	 eax
  003a0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192044
  003a6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ab	58		 pop	 eax
  003ac	5a		 pop	 edx
  003ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  003b7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003bf	5f		 pop	 edi
  003c0	5e		 pop	 esi
  003c1	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  003c7	3b ec		 cmp	 ebp, esp
  003c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ce	8b e5		 mov	 esp, ebp
  003d0	5d		 pop	 ebp
  003d1	c2 04 00	 ret	 4
$L192044:
  003d4	02 00 00 00	 DD	 2
  003d8	00 00 00 00	 DD	 $L192043
$L192043:
  003dc	e4 ff ff ff	 DD	 -28			; ffffffe4H
  003e0	04 00 00 00	 DD	 4
  003e4	00 00 00 00	 DD	 $L192037
  003e8	cc fe ff ff	 DD	 -308			; fffffeccH
  003ec	00 01 00 00	 DD	 256			; 00000100H
  003f0	00 00 00 00	 DD	 $L192038
$L192038:
  003f4	73		 DB	 115			; 00000073H
  003f5	7a		 DB	 122			; 0000007aH
  003f6	62		 DB	 98			; 00000062H
  003f7	75		 DB	 117			; 00000075H
  003f8	66		 DB	 102			; 00000066H
  003f9	66		 DB	 102			; 00000066H
  003fa	65		 DB	 101			; 00000065H
  003fb	72		 DB	 114			; 00000072H
  003fc	00		 DB	 0
$L192037:
  003fd	73		 DB	 115			; 00000073H
  003fe	74		 DB	 116			; 00000074H
  003ff	72		 DB	 114			; 00000072H
  00400	54		 DB	 84			; 00000054H
  00401	65		 DB	 101			; 00000065H
  00402	78		 DB	 120			; 00000078H
  00403	74		 DB	 116			; 00000074H
  00404	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192029:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e4	 lea	 ecx, DWORD PTR _strText$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:
  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192036
  00017	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; BCMenuData::GetString
PUBLIC	?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ	; BCMenu::GetThisClass
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ PROC NEAR	; BCMenu::GetThisClass

; 159  : IMPLEMENT_DYNAMIC( BCMenu, CMenu )

  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classBCMenu@BCMenu@@2UCRuntimeClass@@B ; BCMenu::classBCMenu
  00418	5d		 pop	 ebp
  00419	c3		 ret	 0
?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ ENDP	; BCMenu::GetThisClass
_TEXT	ENDS
PUBLIC	?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ ; BCMenu::GetRuntimeClass
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ PROC NEAR ; BCMenu::GetRuntimeClass
; _this$ = ecx

; 159  : IMPLEMENT_DYNAMIC( BCMenu, CMenu )

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	51		 push	 ecx
  00424	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0042b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0042e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classBCMenu@BCMenu@@2UCRuntimeClass@@B ; BCMenu::classBCMenu
  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c3		 ret	 0
?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ ENDP	; BCMenu::GetRuntimeClass
_TEXT	ENDS
PUBLIC	??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ ; CTypedPtrArray<CPtrArray,BCMenuData *>::CTypedPtrArray<CPtrArray,BCMenuData *>
PUBLIC	??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ ; CTypedPtrArray<CPtrArray,BCMenuData *>::~CTypedPtrArray<CPtrArray,BCMenuData *>
PUBLIC	??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ ; CTypedPtrArray<CPtrArray,HMENU__ *>::CTypedPtrArray<CPtrArray,HMENU__ *>
PUBLIC	??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ ; CTypedPtrArray<CPtrArray,HMENU__ *>::~CTypedPtrArray<CPtrArray,HMENU__ *>
PUBLIC	??_7BCMenu@@6B@					; BCMenu::`vftable'
PUBLIC	??_GBCMenu@@UAEPAXI@Z				; BCMenu::`scalar deleting destructor'
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R0?AVCMenu@@@8				; CMenu `RTTI Type Descriptor'
PUBLIC	??_R0?AVBCMenu@@@8				; BCMenu `RTTI Type Descriptor'
PUBLIC	??0BCMenu@@QAE@XZ				; BCMenu::BCMenu
PUBLIC	?LoadMenuA@BCMenu@@UAEHPBD@Z			; BCMenu::LoadMenuA
PUBLIC	?LoadMenuA@BCMenu@@UAEHH@Z			; BCMenu::LoadMenuA
PUBLIC	?DestroyMenu@BCMenu@@UAEHXZ			; BCMenu::DestroyMenu
PUBLIC	?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z	; BCMenu::DrawItem
PUBLIC	?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z ; BCMenu::MeasureItem
PUBLIC	??_R4BCMenu@@6B@				; BCMenu::`RTTI Complete Object Locator'
PUBLIC	??_R3BCMenu@@8					; BCMenu::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BCMenu@@8					; BCMenu::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@BCMenu@@8				; BCMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@CMenu@@8				; CMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	?IsWinXPLuna@BCMenu@@KAHXZ			; BCMenu::IsWinXPLuna
EXTRN	??_EBCMenu@@UAEPAXI@Z:NEAR			; BCMenu::`vector deleting destructor'
EXTRN	__imp__GetCPInfo@8:NEAR
EXTRN	??0CMenu@@QAE@XZ:NEAR				; CMenu::CMenu
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:NEAR	; CObject::Serialize
EXTRN	??1CMenu@@UAE@XZ:NEAR				; CMenu::~CMenu
EXTRN	?AssertValid@CMenu@@UBEXXZ:NEAR			; CMenu::AssertValid
EXTRN	?Dump@CMenu@@UBEXAAVCDumpContext@@@Z:NEAR	; CMenu::Dump
EXTRN	__imp__GetSysColor@4:NEAR
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
_CPInfo	DB	014H DUP (?)
_BSS	ENDS
xdata$x	SEGMENT
$T192058 DD	0ffffffffH
	DD	FLAT:$L192052
	DD	00H
	DD	FLAT:$L192053
	DD	01H
	DD	FLAT:$L192054
$T192056 DD	019930520H
	DD	03H
	DD	FLAT:$T192058
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7BCMenu@@6B@
CONST	SEGMENT
??_7BCMenu@@6B@ DD FLAT:??_R4BCMenu@@6B@		; BCMenu::`vftable'
	DD	FLAT:?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_EBCMenu@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CMenu@@UBEXXZ
	DD	FLAT:?Dump@CMenu@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z
	DD	FLAT:?LoadMenuA@BCMenu@@UAEHH@Z
	DD	FLAT:?LoadMenuA@BCMenu@@UAEHPBD@Z
	DD	FLAT:?DestroyMenu@BCMenu@@UAEHXZ
CONST	ENDS
;	COMDAT ??_R4BCMenu@@6B@
rdata$r	SEGMENT
??_R4BCMenu@@6B@ DD 00H					; BCMenu::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBCMenu@@@8
	DD	FLAT:??_R3BCMenu@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBCMenu@@@8
_DATA	SEGMENT
??_R0?AVBCMenu@@@8 DD FLAT:??_7type_info@@6B@		; BCMenu `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBCMenu@@', 00H
_DATA	ENDS
;	COMDAT ??_R3BCMenu@@8
rdata$r	SEGMENT
??_R3BCMenu@@8 DD 00H					; BCMenu::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BCMenu@@8
rdata$r	ENDS
;	COMDAT ??_R2BCMenu@@8
rdata$r	SEGMENT
??_R2BCMenu@@8 DD FLAT:??_R1A@?0A@A@BCMenu@@8		; BCMenu::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CMenu@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenu@@8
rdata$r	SEGMENT
??_R1A@?0A@A@BCMenu@@8 DD FLAT:??_R0?AVBCMenu@@@8	; BCMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenu@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CMenu@@8 DD FLAT:??_R0?AVCMenu@@@8		; CMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCMenu@@@8
_DATA	SEGMENT
??_R0?AVCMenu@@@8 DD FLAT:??_7type_info@@6B@		; CMenu `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMenu@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BCMenu@@QAE@XZ PROC NEAR				; BCMenu::BCMenu
; _this$ = ecx

; 173  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	6a ff		 push	 -1
  00445	68 00 00 00 00	 push	 __ehhandler$??0BCMenu@@QAE@XZ
  0044a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00450	50		 push	 eax
  00451	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00458	51		 push	 ecx
  00459	56		 push	 esi
  0045a	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00461	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00464	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00467	e8 00 00 00 00	 call	 ??0CMenu@@QAE@XZ	; CMenu::CMenu
  0046c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00473	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00476	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenu@@6B@
  0047c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0047f	83 c1 08	 add	 ecx, 8
  00482	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
  00487	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0048b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0048e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00491	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
  00496	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 174  : 	m_bDynIcons = FALSE;     // O.S. - no dynamic icons by default

  0049a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0049d	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 175  : 	disable_old_style=FALSE;

  004a4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004a7	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 176  : 	m_selectcheck = -1;

  004ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004b1	c7 40 44 ff ff
	ff ff		 mov	 DWORD PTR [eax+68], -1

; 177  : 	m_unselectcheck = -1;

  004b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  004bb	c7 41 48 ff ff
	ff ff		 mov	 DWORD PTR [ecx+72], -1

; 178  : 	checkmaps=NULL;

  004c2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004c5	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0

; 179  : 	checkmapsshare=FALSE;

  004cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004cf	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 180  : 	// set the color used for the transparent background in all bitmaps
; 181  : 	m_bitmapBackground=RGB(192,192,192); //gray

  004d6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  004d9	c7 41 30 c0 c0
	c0 00		 mov	 DWORD PTR [ecx+48], 12632256 ; 00c0c0c0H

; 182  : 	m_bitmapBackgroundFlag=FALSE;

  004e0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004e3	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0

; 183  : 	GetCPInfo(CP_ACP,&CPInfo);

  004ea	8b f4		 mov	 esi, esp
  004ec	68 00 00 00 00	 push	 OFFSET FLAT:_CPInfo
  004f1	6a 00		 push	 0
  004f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCPInfo@8
  004f9	3b f4		 cmp	 esi, esp
  004fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 184  : 	m_loadmenu=FALSE;

  00500	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00503	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 185  : 
; 186  : //added by vito--
; 187  : 	if(IsWinXPLuna())m_menuItemBitmapBkColor=GetSysColor(COLOR_3DFACE);

  0050a	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  0050f	85 c0		 test	 eax, eax
  00511	74 19		 je	 SHORT $L187855
  00513	8b f4		 mov	 esi, esp
  00515	6a 0f		 push	 15			; 0000000fH
  00517	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0051d	3b f4		 cmp	 esi, esp
  0051f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00524	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00527	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 188  : 	else m_menuItemBitmapBkColor=GetSysColor(COLOR_MENU);

  0052a	eb 17		 jmp	 SHORT $L187856
$L187855:
  0052c	8b f4		 mov	 esi, esp
  0052e	6a 04		 push	 4
  00530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00536	3b f4		 cmp	 esi, esp
  00538	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0053d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00540	89 42 58	 mov	 DWORD PTR [edx+88], eax
$L187856:

; 189  : 
; 190  : 	m_menuItemBkColor=GetSysColor(COLOR_WINDOW);

  00543	8b f4		 mov	 esi, esp
  00545	6a 05		 push	 5
  00547	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0054d	3b f4		 cmp	 esi, esp
  0054f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00554	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00557	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 191  : 	m_menuItemTextColor= GetSysColor(COLOR_MENUTEXT);

  0055a	8b f4		 mov	 esi, esp
  0055c	6a 07		 push	 7
  0055e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00564	3b f4		 cmp	 esi, esp
  00566	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0056b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0056e	89 42 5c	 mov	 DWORD PTR [edx+92], eax

; 192  : 	m_menuItemSelectBKColor = GetSysColor(COLOR_HIGHLIGHT);

  00571	8b f4		 mov	 esi, esp
  00573	6a 0d		 push	 13			; 0000000dH
  00575	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0057b	3b f4		 cmp	 esi, esp
  0057d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00582	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00585	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 193  : //==
; 194  : }

  00588	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0058f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00592	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00595	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0059c	5e		 pop	 esi
  0059d	83 c4 10	 add	 esp, 16			; 00000010H
  005a0	3b ec		 cmp	 ebp, esp
  005a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005a7	8b e5		 mov	 esp, ebp
  005a9	5d		 pop	 ebp
  005aa	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L192052:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
$L192053:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 08	 add	 ecx, 8
  0002a	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
$L192054:
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00035	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
__ehhandler$??0BCMenu@@QAE@XZ:
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192056
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0BCMenu@@QAE@XZ ENDP					; BCMenu::BCMenu
PUBLIC	??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *>::`vftable'
PUBLIC	??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::`scalar deleting destructor'
PUBLIC	??_R1A@?0A@A@CPtrArray@@8			; CPtrArray::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCPtrArray@@@8				; CPtrArray `RTTI Type Descriptor'
PUBLIC	??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z:NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ:NEAR ; CPtrArray::GetRuntimeClass
EXTRN	??0CPtrArray@@QAE@XZ:NEAR			; CPtrArray::CPtrArray
EXTRN	?Dump@CPtrArray@@UBEXAAVCDumpContext@@@Z:NEAR	; CPtrArray::Dump
EXTRN	?AssertValid@CPtrArray@@UBEXXZ:NEAR		; CPtrArray::AssertValid
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
CONST	SEGMENT
??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ DD FLAT:??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CPtrArray@@UBEXXZ
	DD	FLAT:?Dump@CPtrArray@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
rdata$r	SEGMENT
??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ DD 00H ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8
	DD	FLAT:??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8
_DATA	SEGMENT
??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8 DD FLAT:??_7type_info@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT
??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 DD 00H ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT
??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 DD FLAT:??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CPtrArray@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 DD FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPtrArray@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CPtrArray@@8 DD FLAT:??_R0?AVCPtrArray@@@8	; CPtrArray::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCPtrArray@@@8
_DATA	SEGMENT
??_R0?AVCPtrArray@@@8 DD FLAT:??_7type_info@@6B@	; CPtrArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPtrArray@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::CTypedPtrArray<CPtrArray,HMENU__ *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CPtrArray@@QAE@XZ	; CPtrArray::CPtrArray
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::CTypedPtrArray<CPtrArray,HMENU__ *>
_TEXT	ENDS
EXTRN	??1CPtrArray@@UAE@XZ:NEAR			; CPtrArray::~CPtrArray
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::~CTypedPtrArray<CPtrArray,HMENU__ *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CPtrArray@@UAE@XZ	; CPtrArray::~CPtrArray
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::~CTypedPtrArray<CPtrArray,HMENU__ *>
_TEXT	ENDS
EXTRN	??3CObject@@SGXPAX@Z:NEAR			; CObject::operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187836
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187836:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1BCMenu@@UAE@XZ				; BCMenu::~BCMenu
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GBCMenu@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCMenu@@UAEPAXI@Z PROC NEAR				; BCMenu::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1BCMenu@@UAE@XZ	; BCMenu::~BCMenu
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187860
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187860:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GBCMenu@@UAEPAXI@Z ENDP				; BCMenu::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *>::`vftable'
PUBLIC	??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::`scalar deleting destructor'
PUBLIC	??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z:NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::`vector deleting destructor'
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
CONST	SEGMENT
??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ DD FLAT:??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CPtrArray@@UBEXXZ
	DD	FLAT:?Dump@CPtrArray@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
rdata$r	SEGMENT
??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ DD 00H ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8
	DD	FLAT:??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8
_DATA	SEGMENT
??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT
??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 DD 00H ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT
??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 DD FLAT:??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CPtrArray@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 DD FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::CTypedPtrArray<CPtrArray,BCMenuData *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CPtrArray@@QAE@XZ	; CPtrArray::CPtrArray
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::CTypedPtrArray<CPtrArray,BCMenuData *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::~CTypedPtrArray<CPtrArray,BCMenuData *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CPtrArray@@UAE@XZ	; CPtrArray::~CPtrArray
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::~CTypedPtrArray<CPtrArray,BCMenuData *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187868
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187868:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
$T192077 DD	0ffffffffH
	DD	FLAT:$L192071
	DD	00H
	DD	FLAT:$L192072
	DD	01H
	DD	FLAT:$L192073
$T192075 DD	019930520H
	DD	03H
	DD	FLAT:$T192077
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BCMenu@@UAE@XZ PROC NEAR				; BCMenu::~BCMenu
; _this$ = ecx

; 197  : {

  005b0	55		 push	 ebp
  005b1	8b ec		 mov	 ebp, esp
  005b3	6a ff		 push	 -1
  005b5	68 00 00 00 00	 push	 __ehhandler$??1BCMenu@@UAE@XZ
  005ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  005c0	50		 push	 eax
  005c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  005c8	51		 push	 ecx
  005c9	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  005d0	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  005d3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  005d6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenu@@6B@
  005dc	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 198  : 	DestroyMenu();

  005e3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  005e6	e8 00 00 00 00	 call	 ?DestroyMenu@BCMenu@@UAEHXZ ; BCMenu::DestroyMenu

; 199  : }

  005eb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  005ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  005f2	83 c1 1c	 add	 ecx, 28			; 0000001cH
  005f5	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
  005fa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005fe	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00601	83 c1 08	 add	 ecx, 8
  00604	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
  00609	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00610	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00613	e8 00 00 00 00	 call	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
  00618	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0061b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00622	83 c4 10	 add	 esp, 16			; 00000010H
  00625	3b ec		 cmp	 ebp, esp
  00627	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0062c	8b e5		 mov	 esp, ebp
  0062e	5d		 pop	 ebp
  0062f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L192071:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
$L192072:
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 08	 add	 ecx, 8
  00052	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
$L192073:
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0005d	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
__ehhandler$??1BCMenu@@UAE@XZ:
  00062	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192075
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1BCMenu@@UAE@XZ ENDP					; BCMenu::~BCMenu
PUBLIC	?IsNewShell@BCMenu@@KAHXZ			; BCMenu::IsNewShell
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?IsNewShell@BCMenu@@KAHXZ PROC NEAR			; BCMenu::IsNewShell

; 202  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp

; 203  : 	return (g_Shell>=Win95);

  00633	33 c0		 xor	 eax, eax
  00635	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_Shell, 2
  0063c	0f 9d c0	 setge	 al

; 204  : }

  0063f	5d		 pop	 ebp
  00640	c3		 ret	 0
?IsNewShell@BCMenu@@KAHXZ ENDP				; BCMenu::IsNewShell
_TEXT	ENDS
PUBLIC	?IsWindowsClassicTheme@BCMenu@@KAHXZ		; BCMenu::IsWindowsClassicTheme
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?IsWinXPLuna@BCMenu@@KAHXZ PROC NEAR			; BCMenu::IsWinXPLuna

; 207  : {

  00650	55		 push	 ebp
  00651	8b ec		 mov	 ebp, esp

; 208  : 	if(g_Shell==WinXP){

  00653	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _g_Shell, 7
  0065a	75 14		 jne	 SHORT $L187876

; 209  : 		if(IsWindowsClassicTheme())return(FALSE);

  0065c	e8 00 00 00 00	 call	 ?IsWindowsClassicTheme@BCMenu@@KAHXZ ; BCMenu::IsWindowsClassicTheme
  00661	85 c0		 test	 eax, eax
  00663	74 04		 je	 SHORT $L187877
  00665	33 c0		 xor	 eax, eax
  00667	eb 09		 jmp	 SHORT $L187875
$L187877:

; 210  : 		else return(TRUE);

  00669	b8 01 00 00 00	 mov	 eax, 1
  0066e	eb 02		 jmp	 SHORT $L187875
$L187876:

; 211  : 	}
; 212  : 	return(FALSE);

  00670	33 c0		 xor	 eax, eax
$L187875:

; 213  : }

  00672	3b ec		 cmp	 ebp, esp
  00674	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00679	5d		 pop	 ebp
  0067a	c3		 ret	 0
?IsWinXPLuna@BCMenu@@KAHXZ ENDP				; BCMenu::IsWinXPLuna
_TEXT	ENDS
PUBLIC	?IsLunaMenuStyle@BCMenu@@KAHXZ			; BCMenu::IsLunaMenuStyle
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?IsLunaMenuStyle@BCMenu@@KAHXZ PROC NEAR		; BCMenu::IsLunaMenuStyle

; 216  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp

; 217  : 	if(IsWinXPLuna()){

  00683	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  00688	85 c0		 test	 eax, eax
  0068a	74 12		 je	 SHORT $L187881

; 218  : 		if(xp_drawmode==BCMENU_DRAWMODE_XP)return(TRUE);

  0068c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?xp_drawmode@BCMenu@@1IA, 1 ; BCMenu::xp_drawmode
  00693	75 07		 jne	 SHORT $L187882
  00695	b8 01 00 00 00	 mov	 eax, 1
  0069a	eb 14		 jmp	 SHORT $L187880
$L187882:

; 219  : 	}
; 220  : 	else{

  0069c	eb 10		 jmp	 SHORT $L187883
$L187881:

; 221  : 		if(original_drawmode==BCMENU_DRAWMODE_XP)return(TRUE);

  0069e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?original_drawmode@BCMenu@@1IA, 1 ; BCMenu::original_drawmode
  006a5	75 07		 jne	 SHORT $L187883
  006a7	b8 01 00 00 00	 mov	 eax, 1
  006ac	eb 02		 jmp	 SHORT $L187880
$L187883:

; 222  : 	}
; 223  : 	return(FALSE);

  006ae	33 c0		 xor	 eax, eax
$L187880:

; 224  : }

  006b0	3b ec		 cmp	 ebp, esp
  006b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006b7	5d		 pop	 ebp
  006b8	c3		 ret	 0
?IsLunaMenuStyle@BCMenu@@KAHXZ ENDP			; BCMenu::IsLunaMenuStyle
_TEXT	ENDS
PUBLIC	??1BCMenuData@@QAE@XZ				; BCMenuData::~BCMenuData
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv73 = -20						; size = 4
$T192086 = -16						; size = 4
$T192083 = -12						; size = 4
$T192082 = -8						; size = 4
_this$ = -4						; size = 4
??1BCMenuData@@QAE@XZ PROC NEAR				; BCMenuData::~BCMenuData
; _this$ = ecx

; 227  : {

  006c0	55		 push	 ebp
  006c1	8b ec		 mov	 ebp, esp
  006c3	83 ec 14	 sub	 esp, 20			; 00000014H
  006c6	56		 push	 esi
  006c7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  006cc	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  006cf	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  006d2	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  006d5	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  006d8	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  006db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 228  : 	if(bitmap)

  006de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006e1	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  006e5	74 37		 je	 SHORT $L187888

; 229  : 		delete(bitmap);

  006e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ea	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  006ed	89 55 f4	 mov	 DWORD PTR $T192083[ebp], edx
  006f0	8b 45 f4	 mov	 eax, DWORD PTR $T192083[ebp]
  006f3	89 45 f8	 mov	 DWORD PTR $T192082[ebp], eax
  006f6	83 7d f8 00	 cmp	 DWORD PTR $T192082[ebp], 0
  006fa	74 1b		 je	 SHORT $L192084
  006fc	8b f4		 mov	 esi, esp
  006fe	6a 01		 push	 1
  00700	8b 4d f8	 mov	 ecx, DWORD PTR $T192082[ebp]
  00703	8b 11		 mov	 edx, DWORD PTR [ecx]
  00705	8b 4d f8	 mov	 ecx, DWORD PTR $T192082[ebp]
  00708	ff 52 04	 call	 DWORD PTR [edx+4]
  0070b	3b f4		 cmp	 esi, esp
  0070d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00712	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
  00715	eb 07		 jmp	 SHORT $L187888
$L192084:
  00717	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L187888:

; 230  : 	
; 231  : 	delete[] m_szMenuText; //Need not check for NULL because ANSI X3J16 allows "delete NULL"

  0071e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00721	8b 08		 mov	 ecx, DWORD PTR [eax]
  00723	89 4d f0	 mov	 DWORD PTR $T192086[ebp], ecx
  00726	8b 55 f0	 mov	 edx, DWORD PTR $T192086[ebp]
  00729	52		 push	 edx
  0072a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0072f	83 c4 04	 add	 esp, 4

; 232  : }

  00732	5e		 pop	 esi
  00733	83 c4 14	 add	 esp, 20			; 00000014H
  00736	3b ec		 cmp	 ebp, esp
  00738	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0073d	8b e5		 mov	 esp, ebp
  0073f	5d		 pop	 ebp
  00740	c3		 ret	 0
??1BCMenuData@@QAE@XZ ENDP				; BCMenuData::~BCMenuData
_TEXT	ENDS
EXTRN	__imp__wcscpy:NEAR
EXTRN	__imp__wcslen:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192089 = -12						; size = 4
$T192088 = -8						; size = 4
_this$ = -4						; size = 4
_szWideString$ = 8					; size = 4
?SetWideString@BCMenuData@@QAEXPB_W@Z PROC NEAR		; BCMenuData::SetWideString
; _this$ = ecx

; 236  : {

  00750	55		 push	 ebp
  00751	8b ec		 mov	 ebp, esp
  00753	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00756	56		 push	 esi
  00757	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0075e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00765	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0076c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : 	delete[] m_szMenuText;//Need not check for NULL because ANSI X3J16 allows "delete NULL"

  0076f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00772	8b 08		 mov	 ecx, DWORD PTR [eax]
  00774	89 4d f8	 mov	 DWORD PTR $T192088[ebp], ecx
  00777	8b 55 f8	 mov	 edx, DWORD PTR $T192088[ebp]
  0077a	52		 push	 edx
  0077b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00780	83 c4 04	 add	 esp, 4

; 238  : 	
; 239  : 	if (szWideString)

  00783	83 7d 08 00	 cmp	 DWORD PTR _szWideString$[ebp], 0
  00787	74 60		 je	 SHORT $L187897

; 240  :     {
; 241  : 		m_szMenuText = new wchar_t[sizeof(wchar_t)*(wcslen(szWideString)+1)];

  00789	68 f1 00 00 00	 push	 241			; 000000f1H
  0078e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00793	8b f4		 mov	 esi, esp
  00795	8b 45 08	 mov	 eax, DWORD PTR _szWideString$[ebp]
  00798	50		 push	 eax
  00799	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0079f	83 c4 04	 add	 esp, 4
  007a2	3b f4		 cmp	 esi, esp
  007a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007a9	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  007ad	d1 e1		 shl	 ecx, 1
  007af	51		 push	 ecx
  007b0	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  007b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  007b8	89 45 f4	 mov	 DWORD PTR $T192089[ebp], eax
  007bb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007be	8b 45 f4	 mov	 eax, DWORD PTR $T192089[ebp]
  007c1	89 02		 mov	 DWORD PTR [edx], eax

; 242  : 		if (m_szMenuText)

  007c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c6	83 39 00	 cmp	 DWORD PTR [ecx], 0
  007c9	74 1c		 je	 SHORT $L187901

; 243  : 			wcscpy(m_szMenuText,szWideString);

  007cb	8b f4		 mov	 esi, esp
  007cd	8b 55 08	 mov	 edx, DWORD PTR _szWideString$[ebp]
  007d0	52		 push	 edx
  007d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  007d6	51		 push	 ecx
  007d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  007dd	83 c4 08	 add	 esp, 8
  007e0	3b f4		 cmp	 esi, esp
  007e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L187901:

; 244  :     }
; 245  : 	else

  007e7	eb 09		 jmp	 SHORT $L187895
$L187897:

; 246  : 		m_szMenuText=NULL;//set to NULL so we need not bother about dangling non-NULL Ptrs

  007e9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007ec	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L187895:

; 247  : }

  007f2	5e		 pop	 esi
  007f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  007f6	3b ec		 cmp	 ebp, esp
  007f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007fd	8b e5		 mov	 esp, ebp
  007ff	5d		 pop	 ebp
  00800	c2 04 00	 ret	 4
?SetWideString@BCMenuData@@QAEXPB_W@Z ENDP		; BCMenuData::SetWideString
_TEXT	ENDS
PUBLIC	??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
PUBLIC	?IsMenu@BCMenu@@SAHPAVCMenu@@@Z			; BCMenu::IsMenu
EXTRN	?GetUpperBound@CPtrArray@@QBEHXZ:NEAR		; CPtrArray::GetUpperBound
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_numSubMenus$ = -8					; size = 4
_m$ = -4						; size = 4
_submenu$ = 8						; size = 4
?IsMenu@BCMenu@@SAHPAVCMenu@@@Z PROC NEAR		; BCMenu::IsMenu

; 250  : {

  00810	55		 push	 ebp
  00811	8b ec		 mov	 ebp, esp
  00813	83 ec 08	 sub	 esp, 8
  00816	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0081d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 251  : 	int m;
; 252  : 	int numSubMenus = (int)m_AllSubMenus.GetUpperBound();

  00824	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00829	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0082e	89 45 f8	 mov	 DWORD PTR _numSubMenus$[ebp], eax

; 253  : 	for(m=0;m<=numSubMenus;++m){

  00831	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  00838	eb 09		 jmp	 SHORT $L187909
$L187910:
  0083a	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  0083d	83 c0 01	 add	 eax, 1
  00840	89 45 fc	 mov	 DWORD PTR _m$[ebp], eax
$L187909:
  00843	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00846	3b 4d f8	 cmp	 ecx, DWORD PTR _numSubMenus$[ebp]
  00849	7f 21		 jg	 SHORT $L187911

; 254  : 		if(submenu->m_hMenu==m_AllSubMenus[m])return(TRUE);

  0084b	8b 55 fc	 mov	 edx, DWORD PTR _m$[ebp]
  0084e	52		 push	 edx
  0084f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00854	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  00859	8b 4d 08	 mov	 ecx, DWORD PTR _submenu$[ebp]
  0085c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0085f	3b 10		 cmp	 edx, DWORD PTR [eax]
  00861	75 07		 jne	 SHORT $L187912
  00863	b8 01 00 00 00	 mov	 eax, 1
  00868	eb 04		 jmp	 SHORT $L187905
$L187912:

; 255  : 	}

  0086a	eb ce		 jmp	 SHORT $L187910
$L187911:

; 256  : 	return(FALSE);

  0086c	33 c0		 xor	 eax, eax
$L187905:

; 257  : }

  0086e	83 c4 08	 add	 esp, 8
  00871	3b ec		 cmp	 ebp, esp
  00873	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00878	8b e5		 mov	 esp, ebp
  0087a	5d		 pop	 ebp
  0087b	c3		 ret	 0
?IsMenu@BCMenu@@SAHPAVCMenu@@@Z ENDP			; BCMenu::IsMenu
_TEXT	ENDS
PUBLIC	?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z		; BCMenu::IsMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_numSubMenus$ = -8					; size = 4
_m$ = -4						; size = 4
_submenu$ = 8						; size = 4
?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z PROC NEAR		; BCMenu::IsMenu

; 260  : {

  00880	55		 push	 ebp
  00881	8b ec		 mov	 ebp, esp
  00883	83 ec 08	 sub	 esp, 8
  00886	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0088d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 261  : 	int m;
; 262  : 	int numSubMenus = (int)m_AllSubMenus.GetUpperBound();

  00894	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00899	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0089e	89 45 f8	 mov	 DWORD PTR _numSubMenus$[ebp], eax

; 263  : 	for(m=0;m<=numSubMenus;++m){

  008a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  008a8	eb 09		 jmp	 SHORT $L187919
$L187920:
  008aa	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  008ad	83 c0 01	 add	 eax, 1
  008b0	89 45 fc	 mov	 DWORD PTR _m$[ebp], eax
$L187919:
  008b3	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  008b6	3b 4d f8	 cmp	 ecx, DWORD PTR _numSubMenus$[ebp]
  008b9	7f 1e		 jg	 SHORT $L187921

; 264  : 		if(submenu==m_AllSubMenus[m])return(TRUE);

  008bb	8b 55 fc	 mov	 edx, DWORD PTR _m$[ebp]
  008be	52		 push	 edx
  008bf	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  008c4	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  008c9	8b 4d 08	 mov	 ecx, DWORD PTR _submenu$[ebp]
  008cc	3b 08		 cmp	 ecx, DWORD PTR [eax]
  008ce	75 07		 jne	 SHORT $L187922
  008d0	b8 01 00 00 00	 mov	 eax, 1
  008d5	eb 04		 jmp	 SHORT $L187915
$L187922:

; 265  : 	}

  008d7	eb d1		 jmp	 SHORT $L187920
$L187921:

; 266  : 	return(FALSE);

  008d9	33 c0		 xor	 eax, eax
$L187915:

; 267  : }

  008db	83 c4 08	 add	 esp, 8
  008de	3b ec		 cmp	 ebp, esp
  008e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008e5	8b e5		 mov	 esp, ebp
  008e7	5d		 pop	 ebp
  008e8	c3		 ret	 0
?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z ENDP			; BCMenu::IsMenu
_TEXT	ENDS
PUBLIC	??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
PUBLIC	??_GBCMenuData@@QAEPAXI@Z			; BCMenuData::`scalar deleting destructor'
EXTRN	?RemoveAll@CPtrArray@@QAEXXZ:NEAR		; CPtrArray::RemoveAll
EXTRN	?RemoveAt@CPtrArray@@QAEXHH@Z:NEAR		; CPtrArray::RemoveAt
EXTRN	?DestroyMenu@CMenu@@QAEHXZ:NEAR			; CMenu::DestroyMenu
EXTRN	?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z:NEAR	; CMenu::FromHandle
EXTRN	?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z:NEAR ; CObject::IsKindOf
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv180 = -68						; size = 4
tv165 = -64						; size = 4
tv147 = -60						; size = 4
$T192102 = -56						; size = 4
$T192101 = -52						; size = 4
$T192098 = -48						; size = 4
$T192097 = -44						; size = 4
$T192094 = -40						; size = 4
$T192093 = -36						; size = 4
_numItems$ = -32					; size = 4
_flag$187946 = -28					; size = 4
_ptr$187944 = -24					; size = 4
_numSubMenus$ = -20					; size = 4
_numAllSubMenus$ = -16					; size = 4
_n$ = -12						; size = 4
_m$ = -8						; size = 4
_this$ = -4						; size = 4
?DestroyMenu@BCMenu@@UAEHXZ PROC NEAR			; BCMenu::DestroyMenu
; _this$ = ecx

; 270  : {

  008f0	55		 push	 ebp
  008f1	8b ec		 mov	 ebp, esp
  008f3	83 ec 44	 sub	 esp, 68			; 00000044H
  008f6	56		 push	 esi
  008f7	57		 push	 edi
  008f8	51		 push	 ecx
  008f9	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  008fc	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00901	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00906	f3 ab		 rep stosd
  00908	59		 pop	 ecx
  00909	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  : 	// Destroy Sub menus:
; 272  : 	int m,n;
; 273  : 	int numAllSubMenus = (int)m_AllSubMenus.GetUpperBound();

  0090c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00911	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00916	89 45 f0	 mov	 DWORD PTR _numAllSubMenus$[ebp], eax

; 274  : 	for(n = numAllSubMenus; n>= 0; n--){

  00919	8b 45 f0	 mov	 eax, DWORD PTR _numAllSubMenus$[ebp]
  0091c	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
  0091f	eb 09		 jmp	 SHORT $L187930
$L187931:
  00921	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00924	83 e9 01	 sub	 ecx, 1
  00927	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$L187930:
  0092a	83 7d f4 00	 cmp	 DWORD PTR _n$[ebp], 0
  0092e	7c 2a		 jl	 SHORT $L187932

; 275  : 		if(m_AllSubMenus[n]==this->m_hMenu)m_AllSubMenus.RemoveAt(n);

  00930	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  00933	52		 push	 edx
  00934	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00939	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0093e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00941	8b 10		 mov	 edx, DWORD PTR [eax]
  00943	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00946	75 10		 jne	 SHORT $L187933
  00948	6a 01		 push	 1
  0094a	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0094d	50		 push	 eax
  0094e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00953	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L187933:

; 276  : 	}

  00958	eb c7		 jmp	 SHORT $L187931
$L187932:

; 277  : 	int numSubMenus = (int)m_SubMenus.GetUpperBound();

  0095a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0095d	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00960	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00965	89 45 ec	 mov	 DWORD PTR _numSubMenus$[ebp], eax

; 278  : 	for(m = numSubMenus; m >= 0; m--)

  00968	8b 4d ec	 mov	 ecx, DWORD PTR _numSubMenus$[ebp]
  0096b	89 4d f8	 mov	 DWORD PTR _m$[ebp], ecx
  0096e	eb 09		 jmp	 SHORT $L187936
$L187937:
  00970	8b 55 f8	 mov	 edx, DWORD PTR _m$[ebp]
  00973	83 ea 01	 sub	 edx, 1
  00976	89 55 f8	 mov	 DWORD PTR _m$[ebp], edx
$L187936:
  00979	83 7d f8 00	 cmp	 DWORD PTR _m$[ebp], 0
  0097d	0f 8c cb 00 00
	00		 jl	 $L187938

; 279  : 	{
; 280  : 		numAllSubMenus = (int)m_AllSubMenus.GetUpperBound();

  00983	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00988	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0098d	89 45 f0	 mov	 DWORD PTR _numAllSubMenus$[ebp], eax

; 281  : 		for(n = numAllSubMenus; n>= 0; n--)

  00990	8b 45 f0	 mov	 eax, DWORD PTR _numAllSubMenus$[ebp]
  00993	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
  00996	eb 09		 jmp	 SHORT $L187940
$L187941:
  00998	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  0099b	83 e9 01	 sub	 ecx, 1
  0099e	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$L187940:
  009a1	83 7d f4 00	 cmp	 DWORD PTR _n$[ebp], 0
  009a5	7c 37		 jl	 SHORT $L187942

; 282  : 		{
; 283  : 			if(m_AllSubMenus[n]==m_SubMenus[m])m_AllSubMenus.RemoveAt(n);

  009a7	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  009aa	52		 push	 edx
  009ab	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  009b0	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  009b5	8b f0		 mov	 esi, eax
  009b7	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  009ba	50		 push	 eax
  009bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009be	83 c1 1c	 add	 ecx, 28			; 0000001cH
  009c1	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  009c6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  009c8	3b 08		 cmp	 ecx, DWORD PTR [eax]
  009ca	75 10		 jne	 SHORT $L187943
  009cc	6a 01		 push	 1
  009ce	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  009d1	52		 push	 edx
  009d2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  009d7	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L187943:

; 284  : 		}

  009dc	eb ba		 jmp	 SHORT $L187941
$L187942:

; 285  : 		CMenu *ptr=FromHandle(m_SubMenus[m]);

  009de	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  009e1	50		 push	 eax
  009e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009e5	83 c1 1c	 add	 ecx, 28			; 0000001cH
  009e8	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  009ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  009ef	51		 push	 ecx
  009f0	e8 00 00 00 00	 call	 ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z ; CMenu::FromHandle
  009f5	89 45 e8	 mov	 DWORD PTR _ptr$187944[ebp], eax

; 286  : 		if(ptr)

  009f8	83 7d e8 00	 cmp	 DWORD PTR _ptr$187944[ebp], 0
  009fc	74 4b		 je	 SHORT $L187945

; 287  : 		{
; 288  : 			BOOL flag=ptr->IsKindOf(RUNTIME_CLASS( BCMenu ));

  009fe	e8 00 00 00 00	 call	 ?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ ; BCMenu::GetThisClass
  00a03	50		 push	 eax
  00a04	8b 4d e8	 mov	 ecx, DWORD PTR _ptr$187944[ebp]
  00a07	e8 00 00 00 00	 call	 ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ; CObject::IsKindOf
  00a0c	89 45 e4	 mov	 DWORD PTR _flag$187946[ebp], eax

; 289  : 			if(flag)

  00a0f	83 7d e4 00	 cmp	 DWORD PTR _flag$187946[ebp], 0
  00a13	74 34		 je	 SHORT $L187945

; 290  : 				delete((BCMenu *)ptr);

  00a15	8b 55 e8	 mov	 edx, DWORD PTR _ptr$187944[ebp]
  00a18	89 55 d8	 mov	 DWORD PTR $T192094[ebp], edx
  00a1b	8b 45 d8	 mov	 eax, DWORD PTR $T192094[ebp]
  00a1e	89 45 dc	 mov	 DWORD PTR $T192093[ebp], eax
  00a21	83 7d dc 00	 cmp	 DWORD PTR $T192093[ebp], 0
  00a25	74 1b		 je	 SHORT $L192095
  00a27	8b f4		 mov	 esi, esp
  00a29	6a 01		 push	 1
  00a2b	8b 4d dc	 mov	 ecx, DWORD PTR $T192093[ebp]
  00a2e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a30	8b 4d dc	 mov	 ecx, DWORD PTR $T192093[ebp]
  00a33	ff 52 04	 call	 DWORD PTR [edx+4]
  00a36	3b f4		 cmp	 esi, esp
  00a38	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a3d	89 45 c4	 mov	 DWORD PTR tv147[ebp], eax
  00a40	eb 07		 jmp	 SHORT $L187945
$L192095:
  00a42	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
$L187945:

; 291  : 		}
; 292  : 	}

  00a49	e9 22 ff ff ff	 jmp	 $L187937
$L187938:

; 293  : 	m_SubMenus.RemoveAll();

  00a4e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a51	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00a54	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 294  : 	// Destroy menu data
; 295  : 	int numItems = (int)m_MenuList.GetUpperBound();

  00a59	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5c	83 c1 08	 add	 ecx, 8
  00a5f	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00a64	89 45 e0	 mov	 DWORD PTR _numItems$[ebp], eax

; 296  : 	for(m = 0; m <= numItems; m++)delete(m_MenuList[m]);

  00a67	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  00a6e	eb 09		 jmp	 SHORT $L187953
$L187954:
  00a70	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  00a73	83 c0 01	 add	 eax, 1
  00a76	89 45 f8	 mov	 DWORD PTR _m$[ebp], eax
$L187953:
  00a79	8b 4d f8	 mov	 ecx, DWORD PTR _m$[ebp]
  00a7c	3b 4d e0	 cmp	 ecx, DWORD PTR _numItems$[ebp]
  00a7f	7f 38		 jg	 SHORT $L187955
  00a81	8b 55 f8	 mov	 edx, DWORD PTR _m$[ebp]
  00a84	52		 push	 edx
  00a85	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a88	83 c1 08	 add	 ecx, 8
  00a8b	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  00a90	8b 00		 mov	 eax, DWORD PTR [eax]
  00a92	89 45 d0	 mov	 DWORD PTR $T192098[ebp], eax
  00a95	8b 4d d0	 mov	 ecx, DWORD PTR $T192098[ebp]
  00a98	89 4d d4	 mov	 DWORD PTR $T192097[ebp], ecx
  00a9b	83 7d d4 00	 cmp	 DWORD PTR $T192097[ebp], 0
  00a9f	74 0f		 je	 SHORT $L192099
  00aa1	6a 01		 push	 1
  00aa3	8b 4d d4	 mov	 ecx, DWORD PTR $T192097[ebp]
  00aa6	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  00aab	89 45 c0	 mov	 DWORD PTR tv165[ebp], eax
  00aae	eb 07		 jmp	 SHORT $L192100
$L192099:
  00ab0	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$L192100:
  00ab7	eb b7		 jmp	 SHORT $L187954
$L187955:

; 297  : 	m_MenuList.RemoveAll();

  00ab9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00abc	83 c1 08	 add	 ecx, 8
  00abf	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 298  : 	if(checkmaps&&!checkmapsshare){

  00ac4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ac7	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  00acb	74 4a		 je	 SHORT $L187958
  00acd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ad0	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00ad4	75 41		 jne	 SHORT $L187958

; 299  : 		delete checkmaps;

  00ad6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00adc	89 55 c8	 mov	 DWORD PTR $T192102[ebp], edx
  00adf	8b 45 c8	 mov	 eax, DWORD PTR $T192102[ebp]
  00ae2	89 45 cc	 mov	 DWORD PTR $T192101[ebp], eax
  00ae5	83 7d cc 00	 cmp	 DWORD PTR $T192101[ebp], 0
  00ae9	74 1b		 je	 SHORT $L192103
  00aeb	8b f4		 mov	 esi, esp
  00aed	6a 01		 push	 1
  00aef	8b 4d cc	 mov	 ecx, DWORD PTR $T192101[ebp]
  00af2	8b 11		 mov	 edx, DWORD PTR [ecx]
  00af4	8b 4d cc	 mov	 ecx, DWORD PTR $T192101[ebp]
  00af7	ff 52 04	 call	 DWORD PTR [edx+4]
  00afa	3b f4		 cmp	 esi, esp
  00afc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b01	89 45 bc	 mov	 DWORD PTR tv180[ebp], eax
  00b04	eb 07		 jmp	 SHORT $L192104
$L192103:
  00b06	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$L192104:

; 300  : 		checkmaps=NULL;

  00b0d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b10	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$L187958:

; 301  : 	}
; 302  : 	// Call base-class implementation last:
; 303  : 	return(CMenu::DestroyMenu());

  00b17	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1a	e8 00 00 00 00	 call	 ?DestroyMenu@CMenu@@QAEHXZ ; CMenu::DestroyMenu

; 304  : };

  00b1f	5f		 pop	 edi
  00b20	5e		 pop	 esi
  00b21	83 c4 44	 add	 esp, 68			; 00000044H
  00b24	3b ec		 cmp	 ebp, esp
  00b26	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b2b	8b e5		 mov	 esp, ebp
  00b2d	5d		 pop	 ebp
  00b2e	c3		 ret	 0
?DestroyMenu@BCMenu@@UAEHXZ ENDP			; BCMenu::DestroyMenu
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GBCMenuData@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCMenuData@@QAEPAXI@Z PROC NEAR			; BCMenuData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1BCMenuData@@QAE@XZ	; BCMenuData::~BCMenuData
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $L187964
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$L187964:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GBCMenuData@@QAEPAXI@Z ENDP				; BCMenuData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetMenuDrawMode@BCMenu@@SAHXZ			; BCMenu::GetMenuDrawMode
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?GetMenuDrawMode@BCMenu@@SAHXZ PROC NEAR		; BCMenu::GetMenuDrawMode

; 307  : {

  00b30	55		 push	 ebp
  00b31	8b ec		 mov	 ebp, esp

; 308  : 	if(IsWinXPLuna())return(xp_drawmode);

  00b33	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  00b38	85 c0		 test	 eax, eax
  00b3a	74 07		 je	 SHORT $L187968
  00b3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xp_drawmode@BCMenu@@1IA ; BCMenu::xp_drawmode
  00b41	eb 05		 jmp	 SHORT $L187967
$L187968:

; 309  : 	return(original_drawmode);

  00b43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?original_drawmode@BCMenu@@1IA ; BCMenu::original_drawmode
$L187967:

; 310  : }

  00b48	3b ec		 cmp	 ebp, esp
  00b4a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b4f	5d		 pop	 ebp
  00b50	c3		 ret	 0
?GetMenuDrawMode@BCMenu@@SAHXZ ENDP			; BCMenu::GetMenuDrawMode
_TEXT	ENDS
PUBLIC	?GetSelectDisableMode@BCMenu@@SAHXZ		; BCMenu::GetSelectDisableMode
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
?GetSelectDisableMode@BCMenu@@SAHXZ PROC NEAR		; BCMenu::GetSelectDisableMode

; 313  : {

  00b60	55		 push	 ebp
  00b61	8b ec		 mov	 ebp, esp

; 314  : 	if(IsLunaMenuStyle())return(xp_select_disabled);

  00b63	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  00b68	85 c0		 test	 eax, eax
  00b6a	74 07		 je	 SHORT $L187972
  00b6c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xp_select_disabled@BCMenu@@1HA ; BCMenu::xp_select_disabled
  00b71	eb 05		 jmp	 SHORT $L187971
$L187972:

; 315  : 	return(original_select_disabled);

  00b73	a1 00 00 00 00	 mov	 eax, DWORD PTR ?original_select_disabled@BCMenu@@1HA ; BCMenu::original_select_disabled
$L187971:

; 316  : }

  00b78	3b ec		 cmp	 ebp, esp
  00b7a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b7f	5d		 pop	 ebp
  00b80	c3		 ret	 0
?GetSelectDisableMode@BCMenu@@SAHXZ ENDP		; BCMenu::GetSelectDisableMode
_TEXT	ENDS
PUBLIC	?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000
PUBLIC	?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_WinXP
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
EXTRN	?GetDeviceCaps@CDC@@QBEHH@Z:NEAR		; CDC::GetDeviceCaps
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pDC$ = -8						; size = 4
_this$ = -4						; size = 4
_lpDIS$ = 8						; size = 4
?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z PROC NEAR ; BCMenu::DrawItem
; _this$ = ecx

; 331  : {

  00b90	55		 push	 ebp
  00b91	8b ec		 mov	 ebp, esp
  00b93	83 ec 08	 sub	 esp, 8
  00b96	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00b9d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00ba4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 	ASSERT(lpDIS != NULL);	

  00ba7	83 7d 08 00	 cmp	 DWORD PTR _lpDIS$[ebp], 0
  00bab	75 14		 jne	 SHORT $L192109
  00bad	68 4c 01 00 00	 push	 332			; 0000014cH
  00bb2	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00bb7	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00bbc	85 c0		 test	 eax, eax
  00bbe	74 01		 je	 SHORT $L192109
  00bc0	cc		 int	 3
$L192109:

; 333  : 	CDC* pDC = CDC::FromHandle(lpDIS->hDC);

  00bc1	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00bc4	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00bc7	52		 push	 edx
  00bc8	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  00bcd	89 45 f8	 mov	 DWORD PTR _pDC$[ebp], eax

; 334  : 	if(pDC->GetDeviceCaps(RASTERCAPS) & RC_PALETTE)DrawItem_Win9xNT2000(lpDIS);

  00bd0	6a 26		 push	 38			; 00000026H
  00bd2	8b 4d f8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00bd5	e8 00 00 00 00	 call	 ?GetDeviceCaps@CDC@@QBEHH@Z ; CDC::GetDeviceCaps
  00bda	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00bdf	74 0e		 je	 SHORT $L187979
  00be1	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00be4	50		 push	 eax
  00be5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00be8	e8 00 00 00 00	 call	 ?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000

; 335  : 	else{

  00bed	eb 51		 jmp	 SHORT $L187976
$L187979:

; 336  : 		if(IsWinXPLuna()){

  00bef	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  00bf4	85 c0		 test	 eax, eax
  00bf6	74 25		 je	 SHORT $L187981

; 337  : 			if(xp_drawmode==BCMENU_DRAWMODE_XP) DrawItem_WinXP(lpDIS);

  00bf8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?xp_drawmode@BCMenu@@1IA, 1 ; BCMenu::xp_drawmode
  00bff	75 0e		 jne	 SHORT $L187982
  00c01	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00c04	51		 push	 ecx
  00c05	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c08	e8 00 00 00 00	 call	 ?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_WinXP

; 338  : 			else DrawItem_Win9xNT2000(lpDIS);

  00c0d	eb 0c		 jmp	 SHORT $L187983
$L187982:
  00c0f	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00c12	52		 push	 edx
  00c13	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c16	e8 00 00 00 00	 call	 ?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000
$L187983:

; 339  : 		}
; 340  : 		else{

  00c1b	eb 23		 jmp	 SHORT $L187976
$L187981:

; 341  : 			if(original_drawmode==BCMENU_DRAWMODE_XP) DrawItem_WinXP(lpDIS);

  00c1d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?original_drawmode@BCMenu@@1IA, 1 ; BCMenu::original_drawmode
  00c24	75 0e		 jne	 SHORT $L187985
  00c26	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00c29	50		 push	 eax
  00c2a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2d	e8 00 00 00 00	 call	 ?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_WinXP

; 342  : 			else DrawItem_Win9xNT2000(lpDIS);

  00c32	eb 0c		 jmp	 SHORT $L187976
$L187985:
  00c34	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00c37	51		 push	 ecx
  00c38	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c3b	e8 00 00 00 00	 call	 ?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000
$L187976:

; 343  : 		}	
; 344  : 	}
; 345  : }

  00c40	83 c4 08	 add	 esp, 8
  00c43	3b ec		 cmp	 ebp, esp
  00c45	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c4a	8b e5		 mov	 esp, ebp
  00c4c	5d		 pop	 ebp
  00c4d	c2 04 00	 ret	 4
?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP	; BCMenu::DrawItem
_TEXT	ENDS
PUBLIC	?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z ; BCMenu::Draw3DCheckmark
PUBLIC	?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ; BCMenu::DitherBlt
PUBLIC	?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ; BCMenu::DitherBlt2
PUBLIC	?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z ; BCMenu::DitherBlt3
PUBLIC	?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList
PUBLIC	__real@3fe3333333333333
PUBLIC	??0CMenuItemInfo@@QAE@XZ			; CMenuItemInfo::CMenuItemInfo
PUBLIC	?LightenColor@BCMenu@@SAKKN@Z			; BCMenu::LightenColor
EXTRN	__imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:NEAR
EXTRN	__imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:NEAR
EXTRN	__imp__GetMenuItemInfoA@16:NEAR
EXTRN	?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z:NEAR ; CDC::DrawTextA
EXTRN	?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z:NEAR	; CDC::DrawEdge
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
EXTRN	??0CPen@@QAE@XZ:NEAR				; CPen::CPen
EXTRN	?CreatePen@CPen@@QAEHHHK@Z:NEAR			; CPen::CreatePen
EXTRN	??1CPen@@UAE@XZ:NEAR				; CPen::~CPen
EXTRN	??0CBrush@@QAE@XZ:NEAR				; CBrush::CBrush
EXTRN	?CreateSolidBrush@CBrush@@QAEHK@Z:NEAR		; CBrush::CreateSolidBrush
EXTRN	??1CBrush@@UAE@XZ:NEAR				; CBrush::~CBrush
EXTRN	??0CPoint@@QAE@HH@Z:NEAR			; CPoint::CPoint
EXTRN	?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z:NEAR	; CDC::Draw3dRect
EXTRN	??0CRect@@QAE@XZ:NEAR				; CRect::CRect
EXTRN	??0CBitmap@@QAE@XZ:NEAR				; CBitmap::CBitmap
EXTRN	??0CRect@@QAE@HHHH@Z:NEAR			; CRect::CRect
EXTRN	?Height@CRect@@QBEHXZ:NEAR			; CRect::Height
EXTRN	??BCRect@@QAEPAUtagRECT@@XZ:NEAR		; CRect::operator tagRECT *
EXTRN	??BCBitmap@@QBEPAUHBITMAP__@@XZ:NEAR		; CBitmap::operator HBITMAP__ *
EXTRN	?SetRect@CRect@@QAEXHHHH@Z:NEAR			; CRect::SetRect
EXTRN	??1CBitmap@@UAE@XZ:NEAR				; CBitmap::~CBitmap
EXTRN	?CopyRect@CRect@@QAEXPBUtagRECT@@@Z:NEAR	; CRect::CopyRect
EXTRN	__fltused:NEAR
EXTRN	__imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ:NEAR
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:NEAR
EXTRN	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?GetBkMode@CDC@@QBEHXZ:NEAR			; CDC::GetBkMode
EXTRN	?SetBkMode@CDC@@QAEHH@Z:NEAR			; CDC::SetBkMode
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z:NEAR
EXTRN	__imp_?ReverseFind@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHD@Z:NEAR
EXTRN	?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z:NEAR ; CDC::FillRect
EXTRN	?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z:NEAR ; CImageList::Draw
xdata$x	SEGMENT
$T192156 DD	0ffffffffH
	DD	FLAT:$L192121
	DD	00H
	DD	FLAT:$L192122
	DD	01H
	DD	FLAT:$L192123
	DD	02H
	DD	FLAT:$L192124
	DD	03H
	DD	FLAT:$L192125
	DD	03H
	DD	FLAT:$L192126
	DD	03H
	DD	FLAT:$L192127
	DD	03H
	DD	FLAT:$L192128
	DD	07H
	DD	FLAT:$L192129
	DD	08H
	DD	FLAT:$L192130
	DD	08H
	DD	FLAT:$L192131
$T192133 DD	019930520H
	DD	0bH
	DD	FLAT:$T192156
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv772 = -496						; size = 4
tv777 = -492						; size = 4
tv770 = -488						; size = 4
tv774 = -484						; size = 4
tv585 = -480						; size = 4
tv764 = -476						; size = 4
tv146 = -472						; size = 4
$T192120 = -468						; size = 4
$T192119 = -464						; size = 4
$T192116 = -460						; size = 8
$T192115 = -452						; size = 8
$T192114 = -444						; size = 8
$T192113 = -436						; size = 8
$T192112 = -428						; size = 4
_offset$188098 = -420					; size = 16
_nFormatr$188093 = -400					; size = 4
_nFormat$188092 = -396					; size = 4
_iOldMode$188091 = -392					; size = 4
_tablocr$188086 = -388					; size = 4
_rightStr$188085 = -380					; size = 4
_leftStr$188084 = -368					; size = 4
_rectt$188083 = -356					; size = 16
_info$188078 = -332					; size = 48
_ptImage$188074 = -276					; size = 8
_col$188071 = -264					; size = 4
_brush$188070 = -256					; size = 8
_ptImage$188065 = -240					; size = 8
_bitmapstandard$188054 = -224				; size = 8
_ptImage$188046 = -208					; size = 8
_pOldPen$188042 = -196					; size = 4
_pOldPen$188038 = -192					; size = 4
_strText$188018 = -184					; size = 4
_state$188017 = -176					; size = 4
_bitmap$188016 = -172					; size = 4
_global_offset$188015 = -168				; size = 4
_xoffset$188014 = -164					; size = 4
_nIconNormal$188013 = -160				; size = 4
_dy$188012 = -156					; size = 4
_y0$188011 = -152					; size = 4
_x0$188010 = -148					; size = 4
_m_penBack$188009 = -140				; size = 8
_m_brSelect$188008 = -124				; size = 8
_crText$188007 = -112					; size = 4
_checkflag$188006 = -108				; size = 4
_disableflag$188005 = -104				; size = 4
_selectedflag$188004 = -100				; size = 4
_standardflag$188003 = -96				; size = 4
_rect2$188002 = -88					; size = 16
_m_clrBack$ = -68					; size = 4
_m_brBackground$ = -60					; size = 8
_state$ = -48						; size = 4
_rect$ = -40						; size = 16
_pDC$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpDIS$ = 8						; size = 4
?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z PROC NEAR ; BCMenu::DrawItem_Win9xNT2000
; _this$ = ecx

; 348  : {

  00c50	55		 push	 ebp
  00c51	8b ec		 mov	 ebp, esp
  00c53	6a ff		 push	 -1
  00c55	68 00 00 00 00	 push	 __ehhandler$?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z
  00c5a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00c60	50		 push	 eax
  00c61	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00c68	81 ec e4 01 00
	00		 sub	 esp, 484		; 000001e4H
  00c6e	56		 push	 esi
  00c6f	57		 push	 edi
  00c70	51		 push	 ecx
  00c71	8d bd 10 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-496]
  00c77	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H
  00c7c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00c81	f3 ab		 rep stosd
  00c83	59		 pop	 ecx
  00c84	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 349  : 	ASSERT(lpDIS != NULL);

  00c87	83 7d 08 00	 cmp	 DWORD PTR _lpDIS$[ebp], 0
  00c8b	75 14		 jne	 SHORT $L192111
  00c8d	68 5d 01 00 00	 push	 349			; 0000015dH
  00c92	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00c97	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00c9c	85 c0		 test	 eax, eax
  00c9e	74 01		 je	 SHORT $L192111
  00ca0	cc		 int	 3
$L192111:

; 350  : 	CDC* pDC = CDC::FromHandle(lpDIS->hDC);

  00ca1	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00ca4	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00ca7	52		 push	 edx
  00ca8	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  00cad	89 45 ec	 mov	 DWORD PTR _pDC$[ebp], eax

; 351  : 	CRect rect;

  00cb0	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00cb3	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 352  : 	UINT state = (((BCMenuData*)(lpDIS->itemData))->nFlags);

  00cb8	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00cbb	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00cbe	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00cc1	89 55 d0	 mov	 DWORD PTR _state$[ebp], edx

; 353  : 	CBrush m_brBackground;

  00cc4	8d 4d c4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  00cc7	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  00ccc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 354  : 	COLORREF m_clrBack;
; 355  : //modified by vito--
; 356  : /*	if(IsWinXPLuna())m_clrBack=GetSysColor(COLOR_3DFACE);
; 357  : 	else m_clrBack=GetSysColor(COLOR_MENU);
; 358  : */
; 359  : 	m_clrBack = m_menuItemBkColor;

  00cd3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00cd6	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00cd9	89 4d bc	 mov	 DWORD PTR _m_clrBack$[ebp], ecx

; 360  : //--
; 361  : 	m_brBackground.CreateSolidBrush(m_clrBack);

  00cdc	8b 55 bc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  00cdf	52		 push	 edx
  00ce0	8d 4d c4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  00ce3	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 362  : 
; 363  : 	// remove the selected bit if it's grayed out
; 364  : 	if(lpDIS->itemState & ODS_GRAYED&&!original_select_disabled){

  00ce8	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00ceb	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00cee	83 e1 02	 and	 ecx, 2
  00cf1	74 23		 je	 SHORT $L187998
  00cf3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?original_select_disabled@BCMenu@@1HA, 0 ; BCMenu::original_select_disabled
  00cfa	75 1a		 jne	 SHORT $L187998

; 365  : 		if(lpDIS->itemState & ODS_SELECTED)lpDIS->itemState=lpDIS->itemState & ~ODS_SELECTED;

  00cfc	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00cff	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00d02	83 e0 01	 and	 eax, 1
  00d05	74 0f		 je	 SHORT $L187998
  00d07	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00d0a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00d0d	83 e2 fe	 and	 edx, -2			; fffffffeH
  00d10	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00d13	89 50 10	 mov	 DWORD PTR [eax+16], edx
$L187998:

; 366  : 	}
; 367  : 	
; 368  : 	if(state & MF_SEPARATOR){

  00d16	8b 4d d0	 mov	 ecx, DWORD PTR _state$[ebp]
  00d19	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00d1f	74 49		 je	 SHORT $L188000

; 369  : 		rect.CopyRect(&lpDIS->rcItem);

  00d21	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00d24	83 c2 1c	 add	 edx, 28			; 0000001cH
  00d27	52		 push	 edx
  00d28	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d2b	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 370  : 		pDC->FillRect (rect,&m_brBackground);

  00d30	8d 45 c4	 lea	 eax, DWORD PTR _m_brBackground$[ebp]
  00d33	50		 push	 eax
  00d34	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d37	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00d3c	50		 push	 eax
  00d3d	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d40	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 371  : 		rect.top += (rect.Height()>>1);

  00d45	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d48	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00d4d	d1 f8		 sar	 eax, 1
  00d4f	03 45 dc	 add	 eax, DWORD PTR _rect$[ebp+4]
  00d52	89 45 dc	 mov	 DWORD PTR _rect$[ebp+4], eax

; 372  : 		pDC->DrawEdge(&rect,EDGE_ETCHED,BF_TOP);

  00d55	6a 02		 push	 2
  00d57	6a 06		 push	 6
  00d59	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d5c	51		 push	 ecx
  00d5d	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d60	e8 00 00 00 00	 call	 ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawEdge

; 373  : 	}
; 374  : 	else{

  00d65	e9 a6 0f 00 00	 jmp	 $L188001
$L188000:

; 375  : 		CRect rect2;

  00d6a	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  00d6d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 376  : 		BOOL standardflag=FALSE,selectedflag=FALSE,disableflag=FALSE;

  00d72	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _standardflag$188003[ebp], 0
  00d79	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _selectedflag$188004[ebp], 0
  00d80	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _disableflag$188005[ebp], 0

; 377  : 		BOOL checkflag=FALSE;

  00d87	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _checkflag$188006[ebp], 0

; 378  : 		COLORREF crText = GetSysColor(COLOR_MENUTEXT);

  00d8e	8b f4		 mov	 esi, esp
  00d90	6a 07		 push	 7
  00d92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00d98	3b f4		 cmp	 esi, esp
  00d9a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d9f	89 45 90	 mov	 DWORD PTR _crText$188007[ebp], eax

; 379  : 		CBrush m_brSelect;

  00da2	8d 4d 84	 lea	 ecx, DWORD PTR _m_brSelect$188008[ebp]
  00da5	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  00daa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 380  : 		CPen m_penBack;

  00dae	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188009[ebp]
  00db4	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  00db9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 381  : 		int x0,y0,dy;
; 382  : 		int nIconNormal=-1,xoffset=-1,global_offset=-1;

  00dbd	c7 85 60 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _nIconNormal$188013[ebp], -1
  00dc7	c7 85 5c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _xoffset$188014[ebp], -1
  00dd1	c7 85 58 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _global_offset$188015[ebp], -1

; 383  : 		CImageList *bitmap=NULL;

  00ddb	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bitmap$188016[ebp], 0

; 384  : 		
; 385  : 		// set some colors
; 386  : 		m_penBack.CreatePen (PS_SOLID,0,m_clrBack);

  00de5	8b 55 bc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  00de8	52		 push	 edx
  00de9	6a 00		 push	 0
  00deb	6a 00		 push	 0
  00ded	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188009[ebp]
  00df3	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 387  : 		m_brSelect.CreateSolidBrush(GetSysColor(COLOR_HIGHLIGHT));

  00df8	8b f4		 mov	 esi, esp
  00dfa	6a 0d		 push	 13			; 0000000dH
  00dfc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00e02	3b f4		 cmp	 esi, esp
  00e04	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e09	50		 push	 eax
  00e0a	8d 4d 84	 lea	 ecx, DWORD PTR _m_brSelect$188008[ebp]
  00e0d	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 388  : 		
; 389  : 		// draw the colored rectangle portion
; 390  : 		
; 391  : 		rect.CopyRect(&lpDIS->rcItem);

  00e12	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00e15	83 c0 1c	 add	 eax, 28			; 0000001cH
  00e18	50		 push	 eax
  00e19	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00e1c	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 392  : 		rect2=rect;

  00e21	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  00e24	89 4d a8	 mov	 DWORD PTR _rect2$188002[ebp], ecx
  00e27	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  00e2a	89 55 ac	 mov	 DWORD PTR _rect2$188002[ebp+4], edx
  00e2d	8b 45 e0	 mov	 eax, DWORD PTR _rect$[ebp+8]
  00e30	89 45 b0	 mov	 DWORD PTR _rect2$188002[ebp+8], eax
  00e33	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp+12]
  00e36	89 4d b4	 mov	 DWORD PTR _rect2$188002[ebp+12], ecx

; 393  : 		
; 394  : 		// draw the up/down/focused/disabled state
; 395  : 		
; 396  : 		UINT state = lpDIS->itemState;

  00e39	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00e3c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00e3f	89 85 50 ff ff
	ff		 mov	 DWORD PTR _state$188017[ebp], eax

; 397  : 		CString strText;

  00e45	8b f4		 mov	 esi, esp
  00e47	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  00e4d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00e53	3b f4		 cmp	 esi, esp
  00e55	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e5a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 398  : 		
; 399  : 		if(lpDIS->itemData != NULL){

  00e5e	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00e61	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00e65	0f 84 51 01 00
	00		 je	 $L188019

; 400  : 			nIconNormal = (((BCMenuData*)(lpDIS->itemData))->menuIconNormal);

  00e6b	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00e6e	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00e71	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e74	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _nIconNormal$188013[ebp], ecx

; 401  : 			xoffset = (((BCMenuData*)(lpDIS->itemData))->xoffset);

  00e7a	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00e7d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00e80	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e83	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _xoffset$188014[ebp], ecx

; 402  : 			global_offset = (((BCMenuData*)(lpDIS->itemData))->global_offset);

  00e89	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00e8c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00e8f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00e92	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _global_offset$188015[ebp], ecx

; 403  : 			bitmap = (((BCMenuData*)(lpDIS->itemData))->bitmap);

  00e98	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00e9b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00e9e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00ea1	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _bitmap$188016[ebp], ecx

; 404  : 			strText = ((BCMenuData*) (lpDIS->itemData))->GetString();

  00ea7	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR $T192112[ebp]
  00ead	52		 push	 edx
  00eae	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00eb1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00eb4	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  00eb9	89 85 28 fe ff
	ff		 mov	 DWORD PTR tv146[ebp], eax
  00ebf	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR tv146[ebp]
  00ec5	89 8d 24 fe ff
	ff		 mov	 DWORD PTR tv764[ebp], ecx
  00ecb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00ecf	8b f4		 mov	 esi, esp
  00ed1	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR tv764[ebp]
  00ed7	52		 push	 edx
  00ed8	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  00ede	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00ee4	3b f4		 cmp	 esi, esp
  00ee6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eeb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00eef	8b f4		 mov	 esi, esp
  00ef1	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T192112[ebp]
  00ef7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00efd	3b f4		 cmp	 esi, esp
  00eff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 405  : 
; 406  : 			if(nIconNormal<0&&global_offset>=0){

  00f04	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$188013[ebp], 0
  00f0b	7d 29		 jge	 SHORT $L188026
  00f0d	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR _global_offset$188015[ebp], 0
  00f14	7c 20		 jl	 SHORT $L188026

; 407  : 				xoffset=global_offset;

  00f16	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _global_offset$188015[ebp]
  00f1c	89 85 5c ff ff
	ff		 mov	 DWORD PTR _xoffset$188014[ebp], eax

; 408  : 				nIconNormal=0;

  00f22	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nIconNormal$188013[ebp], 0

; 409  : 				bitmap = &m_AllImages;

  00f2c	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bitmap$188016[ebp], OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A ; BCMenu::m_AllImages
$L188026:

; 410  : 			}
; 411  : 			
; 412  : 			if(state&ODS_CHECKED && nIconNormal<0){

  00f36	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _state$188017[ebp]
  00f3c	83 e1 08	 and	 ecx, 8
  00f3f	74 38		 je	 SHORT $L188027
  00f41	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$188013[ebp], 0
  00f48	7d 2f		 jge	 SHORT $L188027

; 413  : 				if(state&ODS_SELECTED && m_selectcheck>0)checkflag=TRUE;

  00f4a	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _state$188017[ebp]
  00f50	83 e2 01	 and	 edx, 1
  00f53	74 12		 je	 SHORT $L188028
  00f55	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00f58	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00f5c	7e 09		 jle	 SHORT $L188028
  00f5e	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _checkflag$188006[ebp], 1

; 414  : 				else if(m_unselectcheck>0) checkflag=TRUE;

  00f65	eb 10		 jmp	 SHORT $L188029
$L188028:
  00f67	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f6a	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  00f6e	7e 07		 jle	 SHORT $L188029
  00f70	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _checkflag$188006[ebp], 1
$L188029:

; 415  : 			}
; 416  : 			else if(nIconNormal != -1){

  00f77	eb 41		 jmp	 SHORT $L188031
$L188027:
  00f79	83 bd 60 ff ff
	ff ff		 cmp	 DWORD PTR _nIconNormal$188013[ebp], -1
  00f80	74 38		 je	 SHORT $L188031

; 417  : 				standardflag=TRUE;

  00f82	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR _standardflag$188003[ebp], 1

; 418  : 				if(state&ODS_SELECTED && !(state&ODS_GRAYED))selectedflag=TRUE;

  00f89	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _state$188017[ebp]
  00f8f	83 e2 01	 and	 edx, 1
  00f92	74 14		 je	 SHORT $L188033
  00f94	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$188017[ebp]
  00f9a	83 e0 02	 and	 eax, 2
  00f9d	75 09		 jne	 SHORT $L188033
  00f9f	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR _selectedflag$188004[ebp], 1

; 419  : 				else if(state&ODS_GRAYED) disableflag=TRUE;

  00fa6	eb 12		 jmp	 SHORT $L188031
$L188033:
  00fa8	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _state$188017[ebp]
  00fae	83 e1 02	 and	 ecx, 2
  00fb1	74 07		 je	 SHORT $L188031
  00fb3	c7 45 98 01 00
	00 00		 mov	 DWORD PTR _disableflag$188005[ebp], 1
$L188031:

; 420  : 			}
; 421  : 		}
; 422  : 		else{

  00fba	eb 15		 jmp	 SHORT $L188036
$L188019:

; 423  : 			strText.Empty();

  00fbc	8b f4		 mov	 esi, esp
  00fbe	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  00fc4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  00fca	3b f4		 cmp	 esi, esp
  00fcc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188036:

; 424  : 		}
; 425  : 		
; 426  : 		if(state&ODS_SELECTED){ // draw the down edges

  00fd1	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _state$188017[ebp]
  00fd7	83 e2 01	 and	 edx, 1
  00fda	0f 84 94 00 00
	00		 je	 $L188037

; 427  : 			
; 428  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  00fe0	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _m_penBack$188009[ebp]
  00fe6	50		 push	 eax
  00fe7	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00fea	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  00fef	89 85 40 ff ff
	ff		 mov	 DWORD PTR _pOldPen$188038[ebp], eax

; 429  : 			
; 430  : 			// You need only Text highlight and thats what you get
; 431  : 			
; 432  : 			if(checkflag||standardflag||selectedflag||disableflag||state&ODS_CHECKED)

  00ff5	83 7d 94 00	 cmp	 DWORD PTR _checkflag$188006[ebp], 0
  00ff9	75 1d		 jne	 SHORT $L188040
  00ffb	83 7d a0 00	 cmp	 DWORD PTR _standardflag$188003[ebp], 0
  00fff	75 17		 jne	 SHORT $L188040
  01001	83 7d 9c 00	 cmp	 DWORD PTR _selectedflag$188004[ebp], 0
  01005	75 11		 jne	 SHORT $L188040
  01007	83 7d 98 00	 cmp	 DWORD PTR _disableflag$188005[ebp], 0
  0100b	75 0b		 jne	 SHORT $L188040
  0100d	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _state$188017[ebp]
  01013	83 e1 08	 and	 ecx, 8
  01016	74 22		 je	 SHORT $L188039
$L188040:

; 433  : 				rect2.SetRect(rect.left+m_iconX+4+BCMENU_GAP,rect.top,rect.right,rect.bottom);

  01018	8b 55 e4	 mov	 edx, DWORD PTR _rect$[ebp+12]
  0101b	52		 push	 edx
  0101c	8b 45 e0	 mov	 eax, DWORD PTR _rect$[ebp+8]
  0101f	50		 push	 eax
  01020	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01023	51		 push	 ecx
  01024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0102a	8b 45 d8	 mov	 eax, DWORD PTR _rect$[ebp]
  0102d	8d 4c 10 05	 lea	 ecx, DWORD PTR [eax+edx+5]
  01031	51		 push	 ecx
  01032	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01035	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect
$L188039:

; 434  : 			pDC->FillRect (rect2,&m_brSelect);

  0103a	8d 55 84	 lea	 edx, DWORD PTR _m_brSelect$188008[ebp]
  0103d	52		 push	 edx
  0103e	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01041	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01046	50		 push	 eax
  01047	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0104a	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 435  : 			
; 436  : 			pDC->SelectObject (pOldPen);

  0104f	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _pOldPen$188038[ebp]
  01055	50		 push	 eax
  01056	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01059	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 437  : 			crText = GetSysColor(COLOR_HIGHLIGHTTEXT);

  0105e	8b f4		 mov	 esi, esp
  01060	6a 0e		 push	 14			; 0000000eH
  01062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01068	3b f4		 cmp	 esi, esp
  0106a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0106f	89 45 90	 mov	 DWORD PTR _crText$188007[ebp], eax

; 438  : 		}
; 439  : 		else {

  01072	eb 52		 jmp	 SHORT $L188041
$L188037:

; 440  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  01074	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188009[ebp]
  0107a	51		 push	 ecx
  0107b	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0107e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  01083	89 85 3c ff ff
	ff		 mov	 DWORD PTR _pOldPen$188042[ebp], eax

; 441  : 			pDC->FillRect (rect,&m_brBackground);

  01089	8d 55 c4	 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  0108c	52		 push	 edx
  0108d	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  01090	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01095	50		 push	 eax
  01096	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01099	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 442  : 			pDC->SelectObject (pOldPen);

  0109e	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _pOldPen$188042[ebp]
  010a4	50		 push	 eax
  010a5	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  010a8	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 443  : 			
; 444  : 			// draw the up edges	
; 445  : 			pDC->Draw3dRect (rect,m_clrBack,m_clrBack);

  010ad	8b 4d bc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  010b0	51		 push	 ecx
  010b1	8b 55 bc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  010b4	52		 push	 edx
  010b5	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  010b8	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  010bd	50		 push	 eax
  010be	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  010c1	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L188041:

; 446  : 		}
; 447  : 		
; 448  : 		// draw the text if there is any
; 449  : 		//We have to paint the text only if the image is nonexistant
; 450  : 		
; 451  : 		dy = (rect.Height()-4-m_iconY)/2;

  010c6	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  010c9	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  010ce	83 e8 04	 sub	 eax, 4
  010d1	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  010d7	99		 cdq
  010d8	2b c2		 sub	 eax, edx
  010da	d1 f8		 sar	 eax, 1
  010dc	89 85 64 ff ff
	ff		 mov	 DWORD PTR _dy$188012[ebp], eax

; 452  : 		dy = dy<0 ? 0 : dy;

  010e2	33 c0		 xor	 eax, eax
  010e4	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _dy$188012[ebp], 0
  010eb	0f 9c c0	 setl	 al
  010ee	48		 dec	 eax
  010ef	23 85 64 ff ff
	ff		 and	 eax, DWORD PTR _dy$188012[ebp]
  010f5	89 85 64 ff ff
	ff		 mov	 DWORD PTR _dy$188012[ebp], eax

; 453  : 		
; 454  : 		if(checkflag||standardflag||selectedflag||disableflag){

  010fb	83 7d 94 00	 cmp	 DWORD PTR _checkflag$188006[ebp], 0
  010ff	75 16		 jne	 SHORT $L188044
  01101	83 7d a0 00	 cmp	 DWORD PTR _standardflag$188003[ebp], 0
  01105	75 10		 jne	 SHORT $L188044
  01107	83 7d 9c 00	 cmp	 DWORD PTR _selectedflag$188004[ebp], 0
  0110b	75 0a		 jne	 SHORT $L188044
  0110d	83 7d 98 00	 cmp	 DWORD PTR _disableflag$188005[ebp], 0
  01111	0f 84 15 06 00
	00		 je	 $L188043
$L188044:

; 455  : 			rect2.SetRect(rect.left+1,rect.top+1+dy,rect.left+m_iconX+3,
; 456  : 				rect.top+m_iconY+3+dy);

  01117	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  0111a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  01120	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  01126	8d 44 11 03	 lea	 eax, DWORD PTR [ecx+edx+3]
  0112a	50		 push	 eax
  0112b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  01131	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  01134	8d 44 0a 03	 lea	 eax, DWORD PTR [edx+ecx+3]
  01138	50		 push	 eax
  01139	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  0113f	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  01142	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  01146	50		 push	 eax
  01147	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  0114a	83 c1 01	 add	 ecx, 1
  0114d	51		 push	 ecx
  0114e	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01151	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 457  : 			pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  01156	8b 55 bc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  01159	52		 push	 edx
  0115a	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  0115d	50		 push	 eax
  0115e	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01161	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01166	50		 push	 eax
  01167	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0116a	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 458  : 			if(checkflag && checkmaps){

  0116f	83 7d 94 00	 cmp	 DWORD PTR _checkflag$188006[ebp], 0
  01173	0f 84 16 01 00
	00		 je	 $L188045
  01179	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0117c	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  01180	0f 84 09 01 00
	00		 je	 $L188045

; 459  : 				pDC->FillRect (rect2,&m_brBackground);

  01186	8d 55 c4	 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  01189	52		 push	 edx
  0118a	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  0118d	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01192	50		 push	 eax
  01193	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01196	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 460  : 				rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 461  : 					rect.top+m_iconY+4+dy);

  0119b	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp+4]
  0119e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  011a4	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  011aa	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  011ae	52		 push	 edx
  011af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  011b4	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  011b7	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  011bb	52		 push	 edx
  011bc	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp+4]
  011bf	03 85 64 ff ff
	ff		 add	 eax, DWORD PTR _dy$188012[ebp]
  011c5	50		 push	 eax
  011c6	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  011c9	51		 push	 ecx
  011ca	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  011cd	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 462  : 				
; 463  : 				pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  011d2	8b 55 bc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  011d5	52		 push	 edx
  011d6	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  011d9	50		 push	 eax
  011da	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  011dd	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  011e2	50		 push	 eax
  011e3	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  011e6	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 464  : 				CPoint ptImage(rect.left+2,rect.top+2+dy);

  011eb	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  011f1	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  011f4	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  011f8	50		 push	 eax
  011f9	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  011fc	83 c1 02	 add	 ecx, 2
  011ff	51		 push	 ecx
  01200	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188046[ebp]
  01206	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 465  : 				
; 466  : 				if(state&ODS_SELECTED)checkmaps->Draw(pDC,1,ptImage,ILD_TRANSPARENT);

  0120b	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _state$188017[ebp]
  01211	83 e2 01	 and	 edx, 1
  01214	74 3b		 je	 SHORT $L188047
  01216	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _ptImage$188046[ebp]
  0121c	89 85 4c fe ff
	ff		 mov	 DWORD PTR $T192113[ebp], eax
  01222	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188046[ebp+4]
  01228	89 8d 50 fe ff
	ff		 mov	 DWORD PTR $T192113[ebp+4], ecx
  0122e	6a 01		 push	 1
  01230	8b 95 50 fe ff
	ff		 mov	 edx, DWORD PTR $T192113[ebp+4]
  01236	52		 push	 edx
  01237	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR $T192113[ebp]
  0123d	50		 push	 eax
  0123e	6a 01		 push	 1
  01240	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01243	51		 push	 ecx
  01244	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01247	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  0124a	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 467  : 				else checkmaps->Draw(pDC,0,ptImage,ILD_TRANSPARENT);

  0124f	eb 39		 jmp	 SHORT $L188049
$L188047:
  01251	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _ptImage$188046[ebp]
  01257	89 85 44 fe ff
	ff		 mov	 DWORD PTR $T192114[ebp], eax
  0125d	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188046[ebp+4]
  01263	89 8d 48 fe ff
	ff		 mov	 DWORD PTR $T192114[ebp+4], ecx
  01269	6a 01		 push	 1
  0126b	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR $T192114[ebp+4]
  01271	52		 push	 edx
  01272	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR $T192114[ebp]
  01278	50		 push	 eax
  01279	6a 00		 push	 0
  0127b	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0127e	51		 push	 ecx
  0127f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01282	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  01285	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188049:

; 468  : 			}
; 469  : 			else if(disableflag){

  0128a	e9 9d 04 00 00	 jmp	 $L188043
$L188045:
  0128f	83 7d 98 00	 cmp	 DWORD PTR _disableflag$188005[ebp], 0
  01293	0f 84 7f 01 00
	00		 je	 $L188052

; 470  : 				if(!selectedflag){

  01299	83 7d 9c 00	 cmp	 DWORD PTR _selectedflag$188004[ebp], 0
  0129d	0f 85 70 01 00
	00		 jne	 $L188053

; 471  : 					CBitmap bitmapstandard;

  012a3	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  012a9	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  012ae	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 472  : 					GetBitmapFromImageList(pDC,bitmap,xoffset,bitmapstandard);

  012b2	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _bitmapstandard$188054[ebp]
  012b8	50		 push	 eax
  012b9	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _xoffset$188014[ebp]
  012bf	51		 push	 ecx
  012c0	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _bitmap$188016[ebp]
  012c6	52		 push	 edx
  012c7	8b 45 ec	 mov	 eax, DWORD PTR _pDC$[ebp]
  012ca	50		 push	 eax
  012cb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  012ce	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 473  : 					rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 474  :                         rect.top+m_iconY+4+dy);

  012d3	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  012d6	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  012dc	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  012e2	8d 44 11 04	 lea	 eax, DWORD PTR [ecx+edx+4]
  012e6	50		 push	 eax
  012e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  012ed	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  012f0	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  012f4	50		 push	 eax
  012f5	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  012f8	03 8d 64 ff ff
	ff		 add	 ecx, DWORD PTR _dy$188012[ebp]
  012fe	51		 push	 ecx
  012ff	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  01302	52		 push	 edx
  01303	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01306	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 475  : 					pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  0130b	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  0130e	50		 push	 eax
  0130f	8b 4d bc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  01312	51		 push	 ecx
  01313	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01316	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0131b	50		 push	 eax
  0131c	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0131f	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 476  : 					if(disable_old_style)

  01324	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01327	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0132b	74 4b		 je	 SHORT $L188055

; 477  : 						DitherBlt(lpDIS->hDC,rect.left+2,rect.top+2+dy,m_iconX,m_iconY,
; 478  : 						(HBITMAP)(bitmapstandard),0,0,m_clrBack);

  0132d	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  01330	50		 push	 eax
  01331	6a 00		 push	 0
  01333	6a 00		 push	 0
  01335	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  0133b	e8 00 00 00 00	 call	 ??BCBitmap@@QBEPAUHBITMAP__@@XZ ; CBitmap::operator HBITMAP__ *
  01340	50		 push	 eax
  01341	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  01347	51		 push	 ecx
  01348	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0134e	52		 push	 edx
  0134f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _dy$188012[ebp]
  01355	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01358	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  0135c	52		 push	 edx
  0135d	8b 45 d8	 mov	 eax, DWORD PTR _rect$[ebp]
  01360	83 c0 02	 add	 eax, 2
  01363	50		 push	 eax
  01364	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01367	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0136a	52		 push	 edx
  0136b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0136e	e8 00 00 00 00	 call	 ?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ; BCMenu::DitherBlt

; 479  : 					else{

  01373	e9 81 00 00 00	 jmp	 $L188057
$L188055:

; 480  : 						if(hicolor_bitmaps)

  01378	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hicolor_bitmaps@BCMenu@@1HA, 0 ; BCMenu::hicolor_bitmaps
  0137f	74 3b		 je	 SHORT $L188058

; 481  : 							DitherBlt3(pDC,rect.left+2,rect.top+2+dy,m_iconX,m_iconY,
; 482  : 							bitmapstandard,m_clrBack);

  01381	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  01384	50		 push	 eax
  01385	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  0138b	51		 push	 ecx
  0138c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  01392	52		 push	 edx
  01393	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  01398	50		 push	 eax
  01399	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  0139f	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  013a2	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  013a6	50		 push	 eax
  013a7	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  013aa	83 c1 02	 add	 ecx, 2
  013ad	51		 push	 ecx
  013ae	8b 55 ec	 mov	 edx, DWORD PTR _pDC$[ebp]
  013b1	52		 push	 edx
  013b2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  013b5	e8 00 00 00 00	 call	 ?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z ; BCMenu::DitherBlt3

; 483  : 						else

  013ba	eb 3d		 jmp	 SHORT $L188057
$L188058:

; 484  : 							DitherBlt2(pDC,rect.left+2,rect.top+2+dy,m_iconX,m_iconY,
; 485  : 							bitmapstandard,0,0,m_clrBack);

  013bc	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  013bf	50		 push	 eax
  013c0	6a 00		 push	 0
  013c2	6a 00		 push	 0
  013c4	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  013ca	51		 push	 ecx
  013cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  013d1	52		 push	 edx
  013d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  013d7	50		 push	 eax
  013d8	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  013de	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  013e1	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  013e5	50		 push	 eax
  013e6	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  013e9	83 c1 02	 add	 ecx, 2
  013ec	51		 push	 ecx
  013ed	8b 55 ec	 mov	 edx, DWORD PTR _pDC$[ebp]
  013f0	52		 push	 edx
  013f1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  013f4	e8 00 00 00 00	 call	 ?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ; BCMenu::DitherBlt2
$L188057:

; 486  : 					}
; 487  : 					bitmapstandard.DeleteObject();

  013f9	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  013ff	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 488  : 				}

  01404	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01408	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  0140e	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L188053:

; 489  : 			}
; 490  : 			else if(selectedflag){

  01413	e9 14 03 00 00	 jmp	 $L188043
$L188052:
  01418	83 7d 9c 00	 cmp	 DWORD PTR _selectedflag$188004[ebp], 0
  0141c	0f 84 39 01 00
	00		 je	 $L188061

; 491  : 				pDC->FillRect (rect2,&m_brBackground);

  01422	8d 45 c4	 lea	 eax, DWORD PTR _m_brBackground$[ebp]
  01425	50		 push	 eax
  01426	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01429	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0142e	50		 push	 eax
  0142f	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01432	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 492  : 				rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 493  : 					rect.top+m_iconY+4+dy);

  01437	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  0143a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  01440	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  01446	8d 44 11 04	 lea	 eax, DWORD PTR [ecx+edx+4]
  0144a	50		 push	 eax
  0144b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  01451	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  01454	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  01458	50		 push	 eax
  01459	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  0145c	03 8d 64 ff ff
	ff		 add	 ecx, DWORD PTR _dy$188012[ebp]
  01462	51		 push	 ecx
  01463	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  01466	52		 push	 edx
  01467	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  0146a	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 494  : 				if (IsNewShell()){

  0146f	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  01474	85 c0		 test	 eax, eax
  01476	74 77		 je	 SHORT $L188062

; 495  : 					if(state&ODS_CHECKED)

  01478	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$188017[ebp]
  0147e	83 e0 08	 and	 eax, 8
  01481	74 37		 je	 SHORT $L188063

; 496  : 						pDC->Draw3dRect(rect2,GetSysColor(COLOR_3DSHADOW),
; 497  : 						GetSysColor(COLOR_3DHILIGHT));

  01483	8b f4		 mov	 esi, esp
  01485	6a 14		 push	 20			; 00000014H
  01487	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0148d	3b f4		 cmp	 esi, esp
  0148f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01494	50		 push	 eax
  01495	8b f4		 mov	 esi, esp
  01497	6a 10		 push	 16			; 00000010H
  01499	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0149f	3b f4		 cmp	 esi, esp
  014a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014a6	50		 push	 eax
  014a7	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  014aa	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  014af	50		 push	 eax
  014b0	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  014b3	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 498  : 					else

  014b8	eb 35		 jmp	 SHORT $L188062
$L188063:

; 499  : 						pDC->Draw3dRect(rect2,GetSysColor(COLOR_3DHILIGHT),
; 500  : 						GetSysColor(COLOR_3DSHADOW));

  014ba	8b f4		 mov	 esi, esp
  014bc	6a 10		 push	 16			; 00000010H
  014be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  014c4	3b f4		 cmp	 esi, esp
  014c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014cb	50		 push	 eax
  014cc	8b f4		 mov	 esi, esp
  014ce	6a 14		 push	 20			; 00000014H
  014d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  014d6	3b f4		 cmp	 esi, esp
  014d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014dd	50		 push	 eax
  014de	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  014e1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  014e6	50		 push	 eax
  014e7	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  014ea	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L188062:

; 501  : 				}
; 502  : 				CPoint ptImage(rect.left+2,rect.top+2+dy);

  014ef	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  014f5	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  014f8	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  014fc	50		 push	 eax
  014fd	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  01500	83 c1 02	 add	 ecx, 2
  01503	51		 push	 ecx
  01504	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188065[ebp]
  0150a	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 503  : 				if(bitmap)bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  0150f	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _bitmap$188016[ebp], 0
  01516	74 3e		 je	 SHORT $L188066
  01518	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _ptImage$188065[ebp]
  0151e	89 95 3c fe ff
	ff		 mov	 DWORD PTR $T192115[ebp], edx
  01524	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ptImage$188065[ebp+4]
  0152a	89 85 40 fe ff
	ff		 mov	 DWORD PTR $T192115[ebp+4], eax
  01530	6a 01		 push	 1
  01532	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR $T192115[ebp+4]
  01538	51		 push	 ecx
  01539	8b 95 3c fe ff
	ff		 mov	 edx, DWORD PTR $T192115[ebp]
  0153f	52		 push	 edx
  01540	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _xoffset$188014[ebp]
  01546	50		 push	 eax
  01547	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0154a	51		 push	 ecx
  0154b	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188016[ebp]
  01551	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188066:

; 504  : 			}
; 505  : 			else{

  01556	e9 d1 01 00 00	 jmp	 $L188043
$L188061:

; 506  : 				if(state&ODS_CHECKED){

  0155b	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _state$188017[ebp]
  01561	83 e2 08	 and	 edx, 8
  01564	0f 84 f5 00 00
	00		 je	 $L188069

; 507  : 					CBrush brush;

  0156a	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$188070[ebp]
  01570	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  01575	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 508  : 					COLORREF col = m_clrBack;

  01579	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  0157c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _col$188071[ebp], eax

; 509  : 					col = LightenColor(col,0.6);

  01582	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe3333333333333
  01588	83 ec 08	 sub	 esp, 8
  0158b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0158e	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _col$188071[ebp]
  01594	51		 push	 ecx
  01595	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0159a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0159d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _col$188071[ebp], eax

; 510  : 					brush.CreateSolidBrush(col);

  015a3	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _col$188071[ebp]
  015a9	52		 push	 edx
  015aa	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$188070[ebp]
  015b0	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 511  : 					pDC->FillRect(rect2,&brush);

  015b5	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _brush$188070[ebp]
  015bb	50		 push	 eax
  015bc	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  015bf	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  015c4	50		 push	 eax
  015c5	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  015c8	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 512  : 					brush.DeleteObject();

  015cd	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$188070[ebp]
  015d3	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 513  : 					rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 514  :                         rect.top+m_iconY+4+dy);

  015d8	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  015db	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  015e1	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  015e7	8d 44 11 04	 lea	 eax, DWORD PTR [ecx+edx+4]
  015eb	50		 push	 eax
  015ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  015f2	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  015f5	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  015f9	50		 push	 eax
  015fa	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  015fd	03 8d 64 ff ff
	ff		 add	 ecx, DWORD PTR _dy$188012[ebp]
  01603	51		 push	 ecx
  01604	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  01607	52		 push	 edx
  01608	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  0160b	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 515  : 					if (IsNewShell())

  01610	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  01615	85 c0		 test	 eax, eax
  01617	74 35		 je	 SHORT $L188072

; 516  : 						pDC->Draw3dRect(rect2,GetSysColor(COLOR_3DSHADOW),
; 517  : 						GetSysColor(COLOR_3DHILIGHT));

  01619	8b f4		 mov	 esi, esp
  0161b	6a 14		 push	 20			; 00000014H
  0161d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01623	3b f4		 cmp	 esi, esp
  01625	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0162a	50		 push	 eax
  0162b	8b f4		 mov	 esi, esp
  0162d	6a 10		 push	 16			; 00000010H
  0162f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01635	3b f4		 cmp	 esi, esp
  01637	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0163c	50		 push	 eax
  0163d	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01640	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01645	50		 push	 eax
  01646	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01649	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L188072:

; 518  : 				}

  0164e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01652	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$188070[ebp]
  01658	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush

; 519  : 				else{

  0165d	eb 66		 jmp	 SHORT $L188073
$L188069:

; 520  : 					pDC->FillRect (rect2,&m_brBackground);

  0165f	8d 45 c4	 lea	 eax, DWORD PTR _m_brBackground$[ebp]
  01662	50		 push	 eax
  01663	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01666	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0166b	50		 push	 eax
  0166c	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0166f	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 521  : 					rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 522  :                         rect.top+m_iconY+4+dy);

  01674	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01677	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0167d	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  01683	8d 44 11 04	 lea	 eax, DWORD PTR [ecx+edx+4]
  01687	50		 push	 eax
  01688	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0168e	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  01691	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  01695	50		 push	 eax
  01696	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01699	03 8d 64 ff ff
	ff		 add	 ecx, DWORD PTR _dy$188012[ebp]
  0169f	51		 push	 ecx
  016a0	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  016a3	52		 push	 edx
  016a4	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  016a7	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 523  : 					pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  016ac	8b 45 bc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  016af	50		 push	 eax
  016b0	8b 4d bc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  016b3	51		 push	 ecx
  016b4	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  016b7	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  016bc	50		 push	 eax
  016bd	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  016c0	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L188073:

; 524  : 				}
; 525  : 				CPoint ptImage(rect.left+2,rect.top+2+dy);

  016c5	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  016cb	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp+4]
  016ce	8d 4c 10 02	 lea	 ecx, DWORD PTR [eax+edx+2]
  016d2	51		 push	 ecx
  016d3	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  016d6	83 c2 02	 add	 edx, 2
  016d9	52		 push	 edx
  016da	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188074[ebp]
  016e0	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 526  : 				if(bitmap)bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  016e5	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _bitmap$188016[ebp], 0
  016ec	74 3e		 je	 SHORT $L188043
  016ee	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _ptImage$188074[ebp]
  016f4	89 85 34 fe ff
	ff		 mov	 DWORD PTR $T192116[ebp], eax
  016fa	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188074[ebp+4]
  01700	89 8d 38 fe ff
	ff		 mov	 DWORD PTR $T192116[ebp+4], ecx
  01706	6a 01		 push	 1
  01708	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR $T192116[ebp+4]
  0170e	52		 push	 edx
  0170f	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR $T192116[ebp]
  01715	50		 push	 eax
  01716	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _xoffset$188014[ebp]
  0171c	51		 push	 ecx
  0171d	8b 55 ec	 mov	 edx, DWORD PTR _pDC$[ebp]
  01720	52		 push	 edx
  01721	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188016[ebp]
  01727	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188043:

; 527  : 			}
; 528  : 		}
; 529  : 		if(nIconNormal<0 && state&ODS_CHECKED && !checkflag){

  0172c	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$188013[ebp], 0
  01733	0f 8d ed 00 00
	00		 jge	 $L188077
  01739	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$188017[ebp]
  0173f	83 e0 08	 and	 eax, 8
  01742	0f 84 de 00 00
	00		 je	 $L188077
  01748	83 7d 94 00	 cmp	 DWORD PTR _checkflag$188006[ebp], 0
  0174c	0f 85 d4 00 00
	00		 jne	 $L188077

; 530  : 			rect2.SetRect(rect.left+1,rect.top+2+dy,rect.left+m_iconX+1,
; 531  : 				rect.top+m_iconY+2+dy);

  01752	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01755	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0175b	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _dy$188012[ebp]
  01761	8d 44 11 02	 lea	 eax, DWORD PTR [ecx+edx+2]
  01765	50		 push	 eax
  01766	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0176c	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp]
  0176f	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  01773	50		 push	 eax
  01774	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _dy$188012[ebp]
  0177a	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  0177d	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  01781	50		 push	 eax
  01782	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp]
  01785	83 c1 01	 add	 ecx, 1
  01788	51		 push	 ecx
  01789	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  0178c	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 532  : 			CMenuItemInfo info;

  01791	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _info$188078[ebp]
  01797	e8 00 00 00 00	 call	 ??0CMenuItemInfo@@QAE@XZ ; CMenuItemInfo::CMenuItemInfo

; 533  : 			info.fMask = MIIM_CHECKMARKS;

  0179c	c7 85 b8 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR _info$188078[ebp+4], 8

; 534  : 			::GetMenuItemInfo((HMENU)lpDIS->hwndItem,lpDIS->itemID,
; 535  : 				MF_BYCOMMAND, &info);

  017a6	8b f4		 mov	 esi, esp
  017a8	8d 95 b4 fe ff
	ff		 lea	 edx, DWORD PTR _info$188078[ebp]
  017ae	52		 push	 edx
  017af	6a 00		 push	 0
  017b1	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  017b4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  017b7	51		 push	 ecx
  017b8	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  017bb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  017be	50		 push	 eax
  017bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuItemInfoA@16
  017c5	3b f4		 cmp	 esi, esp
  017c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 536  : 			if(state&ODS_CHECKED || info.hbmpUnchecked) {

  017cc	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _state$188017[ebp]
  017d2	83 e1 08	 and	 ecx, 8
  017d5	75 09		 jne	 SHORT $L188081
  017d7	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _info$188078[ebp+28], 0
  017de	74 46		 je	 SHORT $L188077
$L188081:

; 537  : 				Draw3DCheckmark(pDC, rect2, state&ODS_SELECTED,
; 538  : 					state&ODS_CHECKED ? info.hbmpChecked :
; 539  : 				info.hbmpUnchecked);

  017e0	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _state$188017[ebp]
  017e6	83 e2 08	 and	 edx, 8
  017e9	74 0e		 je	 SHORT $L192117
  017eb	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _info$188078[ebp+24]
  017f1	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv585[ebp], eax
  017f7	eb 0c		 jmp	 SHORT $L192118
$L192117:
  017f9	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _info$188078[ebp+28]
  017ff	89 8d 20 fe ff
	ff		 mov	 DWORD PTR tv585[ebp], ecx
$L192118:
  01805	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR tv585[ebp]
  0180b	52		 push	 edx
  0180c	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _state$188017[ebp]
  01812	83 e0 01	 and	 eax, 1
  01815	50		 push	 eax
  01816	8d 4d a8	 lea	 ecx, DWORD PTR _rect2$188002[ebp]
  01819	51		 push	 ecx
  0181a	8b 55 ec	 mov	 edx, DWORD PTR _pDC$[ebp]
  0181d	52		 push	 edx
  0181e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01821	e8 00 00 00 00	 call	 ?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z ; BCMenu::Draw3DCheckmark
$L188077:

; 540  : 			}
; 541  : 		}
; 542  : 		
; 543  : 		//This is needed always so that we can have the space for check marks
; 544  : 		
; 545  : 		x0=rect.left;y0=rect.top;

  01826	8b 45 d8	 mov	 eax, DWORD PTR _rect$[ebp]
  01829	89 85 6c ff ff
	ff		 mov	 DWORD PTR _x0$188010[ebp], eax
  0182f	8b 4d dc	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01832	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _y0$188011[ebp], ecx

; 546  : 		rect.left = rect.left + m_iconX + 8 + BCMENU_GAP; 

  01838	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0183e	8b 45 d8	 mov	 eax, DWORD PTR _rect$[ebp]
  01841	8d 4c 10 09	 lea	 ecx, DWORD PTR [eax+edx+9]
  01845	89 4d d8	 mov	 DWORD PTR _rect$[ebp], ecx

; 547  : 		
; 548  : 		if(!strText.IsEmpty()){

  01848	8b f4		 mov	 esi, esp
  0184a	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  01850	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  01856	3b f4		 cmp	 esi, esp
  01858	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0185d	0f b6 d0	 movzx	 edx, al
  01860	85 d2		 test	 edx, edx
  01862	0f 85 61 04 00
	00		 jne	 $L188082

; 549  : 			
; 550  : 			CRect rectt(rect.left,rect.top,rect.right,rect.bottom);

  01868	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp+12]
  0186b	50		 push	 eax
  0186c	8b 4d e0	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  0186f	51		 push	 ecx
  01870	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+4]
  01873	52		 push	 edx
  01874	8b 45 d8	 mov	 eax, DWORD PTR _rect$[ebp]
  01877	50		 push	 eax
  01878	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  0187e	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 551  : 			
; 552  : 			//   Find tabs
; 553  : 			
; 554  : 			CString leftStr,rightStr;

  01883	8b f4		 mov	 esi, esp
  01885	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  0188b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01891	3b f4		 cmp	 esi, esp
  01893	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01898	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0189c	8b f4		 mov	 esi, esp
  0189e	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188085[ebp]
  018a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  018aa	3b f4		 cmp	 esi, esp
  018ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018b1	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 555  : 			leftStr.Empty();rightStr.Empty();

  018b5	8b f4		 mov	 esi, esp
  018b7	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  018bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  018c3	3b f4		 cmp	 esi, esp
  018c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018ca	8b f4		 mov	 esi, esp
  018cc	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188085[ebp]
  018d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  018d8	3b f4		 cmp	 esi, esp
  018da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 556  : 			int tablocr=strText.ReverseFind(_T('\t'));

  018df	8b f4		 mov	 esi, esp
  018e1	6a 09		 push	 9
  018e3	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  018e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReverseFind@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHD@Z
  018ef	3b f4		 cmp	 esi, esp
  018f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018f6	89 85 7c fe ff
	ff		 mov	 DWORD PTR _tablocr$188086[ebp], eax

; 557  : 			if(tablocr!=-1){

  018fc	83 bd 7c fe ff
	ff ff		 cmp	 DWORD PTR _tablocr$188086[ebp], -1
  01903	0f 84 06 01 00
	00		 je	 $L188087

; 558  : 				rightStr=strText.Mid(tablocr+1);

  01909	8b 8d 7c fe ff
	ff		 mov	 ecx, DWORD PTR _tablocr$188086[ebp]
  0190f	83 c1 01	 add	 ecx, 1
  01912	8b f4		 mov	 esi, esp
  01914	51		 push	 ecx
  01915	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR $T192119[ebp]
  0191b	52		 push	 edx
  0191c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  01922	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  01928	3b f4		 cmp	 esi, esp
  0192a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0192f	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv774[ebp], eax
  01935	8b 85 1c fe ff
	ff		 mov	 eax, DWORD PTR tv774[ebp]
  0193b	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv770[ebp], eax
  01941	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  01945	8b f4		 mov	 esi, esp
  01947	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv770[ebp]
  0194d	51		 push	 ecx
  0194e	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188085[ebp]
  01954	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0195a	3b f4		 cmp	 esi, esp
  0195c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01961	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  01965	8b f4		 mov	 esi, esp
  01967	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T192119[ebp]
  0196d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01973	3b f4		 cmp	 esi, esp
  01975	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 559  : 				leftStr=strText.Left(strText.Find(_T('\t')));

  0197a	8b f4		 mov	 esi, esp
  0197c	6a 00		 push	 0
  0197e	6a 09		 push	 9
  01980	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  01986	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  0198c	3b f4		 cmp	 esi, esp
  0198e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01993	8b f4		 mov	 esi, esp
  01995	50		 push	 eax
  01996	8d 95 2c fe ff
	ff		 lea	 edx, DWORD PTR $T192120[ebp]
  0199c	52		 push	 edx
  0199d	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  019a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  019a9	3b f4		 cmp	 esi, esp
  019ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019b0	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv777[ebp], eax
  019b6	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR tv777[ebp]
  019bc	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv772[ebp], eax
  019c2	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  019c6	8b f4		 mov	 esi, esp
  019c8	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv772[ebp]
  019ce	51		 push	 ecx
  019cf	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  019d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  019db	3b f4		 cmp	 esi, esp
  019dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019e2	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  019e6	8b f4		 mov	 esi, esp
  019e8	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T192120[ebp]
  019ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  019f4	3b f4		 cmp	 esi, esp
  019f6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 560  : 				rectt.right-=m_iconX;

  019fb	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _rectt$188083[ebp+8]
  01a01	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  01a07	89 95 a4 fe ff
	ff		 mov	 DWORD PTR _rectt$188083[ebp+8], edx

; 561  : 			}
; 562  : 			else leftStr=strText;

  01a0d	eb 1c		 jmp	 SHORT $L188090
$L188087:
  01a0f	8b f4		 mov	 esi, esp
  01a11	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _strText$188018[ebp]
  01a17	50		 push	 eax
  01a18	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  01a1e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01a24	3b f4		 cmp	 esi, esp
  01a26	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188090:

; 563  : 			
; 564  : 			int iOldMode = pDC->GetBkMode();

  01a2b	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01a2e	e8 00 00 00 00	 call	 ?GetBkMode@CDC@@QBEHXZ	; CDC::GetBkMode
  01a33	89 85 78 fe ff
	ff		 mov	 DWORD PTR _iOldMode$188091[ebp], eax

; 565  : 			pDC->SetBkMode( TRANSPARENT);

  01a39	6a 01		 push	 1
  01a3b	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01a3e	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 566  : 			
; 567  : 			// Draw the text in the correct colour:
; 568  : 			
; 569  : 			UINT nFormat  = DT_LEFT|DT_SINGLELINE|DT_VCENTER;

  01a43	c7 85 74 fe ff
	ff 24 00 00 00	 mov	 DWORD PTR _nFormat$188092[ebp], 36 ; 00000024H

; 570  : 			UINT nFormatr = DT_RIGHT|DT_SINGLELINE|DT_VCENTER;

  01a4d	c7 85 70 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR _nFormatr$188093[ebp], 38 ; 00000026H

; 571  : 			if(!(lpDIS->itemState & ODS_GRAYED)){

  01a57	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01a5a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01a5d	83 e2 02	 and	 edx, 2
  01a60	75 6a		 jne	 SHORT $L188094

; 572  : 				pDC->SetTextColor(crText);

  01a62	8b f4		 mov	 esi, esp
  01a64	8b 45 90	 mov	 eax, DWORD PTR _crText$188007[ebp]
  01a67	50		 push	 eax
  01a68	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01a6b	8b 11		 mov	 edx, DWORD PTR [ecx]
  01a6d	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01a70	ff 52 38	 call	 DWORD PTR [edx+56]
  01a73	3b f4		 cmp	 esi, esp
  01a75	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 573  : 				pDC->DrawText (leftStr,rectt,nFormat);

  01a7a	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _nFormat$188092[ebp]
  01a80	50		 push	 eax
  01a81	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01a87	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01a8c	50		 push	 eax
  01a8d	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  01a93	51		 push	 ecx
  01a94	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01a97	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 574  : 				if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  01a9c	83 bd 7c fe ff
	ff ff		 cmp	 DWORD PTR _tablocr$188086[ebp], -1
  01aa3	74 22		 je	 SHORT $L188095
  01aa5	8b 95 70 fe ff
	ff		 mov	 edx, DWORD PTR _nFormatr$188093[ebp]
  01aab	52		 push	 edx
  01aac	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01ab2	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01ab7	50		 push	 eax
  01ab8	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _rightStr$188085[ebp]
  01abe	50		 push	 eax
  01abf	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01ac2	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L188095:

; 575  : 			}
; 576  : 			else{

  01ac7	e9 bc 01 00 00	 jmp	 $L188096
$L188094:

; 577  : 				
; 578  : 				// Draw the disabled text
; 579  : 				if(!(state & ODS_SELECTED)){

  01acc	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _state$188017[ebp]
  01ad2	83 e1 01	 and	 ecx, 1
  01ad5	0f 85 48 01 00
	00		 jne	 $L188097

; 580  : 					RECT offset = *rectt;

  01adb	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01ae1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01ae6	8b 10		 mov	 edx, DWORD PTR [eax]
  01ae8	89 95 5c fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp], edx
  01aee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01af1	89 8d 60 fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp+4], ecx
  01af7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  01afa	89 95 64 fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp+8], edx
  01b00	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01b03	89 85 68 fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp+12], eax

; 581  : 					offset.left+=1;

  01b09	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _offset$188098[ebp]
  01b0f	83 c1 01	 add	 ecx, 1
  01b12	89 8d 5c fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp], ecx

; 582  : 					offset.right+=1;

  01b18	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _offset$188098[ebp+8]
  01b1e	83 c2 01	 add	 edx, 1
  01b21	89 95 64 fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp+8], edx

; 583  : 					offset.top+=1;

  01b27	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _offset$188098[ebp+4]
  01b2d	83 c0 01	 add	 eax, 1
  01b30	89 85 60 fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp+4], eax

; 584  : 					offset.bottom+=1;

  01b36	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR _offset$188098[ebp+12]
  01b3c	83 c1 01	 add	 ecx, 1
  01b3f	89 8d 68 fe ff
	ff		 mov	 DWORD PTR _offset$188098[ebp+12], ecx

; 585  : 					pDC->SetTextColor(GetSysColor(COLOR_BTNHILIGHT));

  01b45	8b f4		 mov	 esi, esp
  01b47	6a 14		 push	 20			; 00000014H
  01b49	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01b4f	3b f4		 cmp	 esi, esp
  01b51	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01b56	8b f4		 mov	 esi, esp
  01b58	50		 push	 eax
  01b59	8b 55 ec	 mov	 edx, DWORD PTR _pDC$[ebp]
  01b5c	8b 02		 mov	 eax, DWORD PTR [edx]
  01b5e	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01b61	ff 50 38	 call	 DWORD PTR [eax+56]
  01b64	3b f4		 cmp	 esi, esp
  01b66	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 586  : 					pDC->DrawText(leftStr,&offset, nFormat);

  01b6b	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _nFormat$188092[ebp]
  01b71	51		 push	 ecx
  01b72	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR _offset$188098[ebp]
  01b78	52		 push	 edx
  01b79	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _leftStr$188084[ebp]
  01b7f	50		 push	 eax
  01b80	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01b83	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 587  : 					if(tablocr!=-1) pDC->DrawText (rightStr,&offset,nFormatr);

  01b88	83 bd 7c fe ff
	ff ff		 cmp	 DWORD PTR _tablocr$188086[ebp], -1
  01b8f	74 1d		 je	 SHORT $L188099
  01b91	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _nFormatr$188093[ebp]
  01b97	51		 push	 ecx
  01b98	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR _offset$188098[ebp]
  01b9e	52		 push	 edx
  01b9f	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _rightStr$188085[ebp]
  01ba5	50		 push	 eax
  01ba6	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01ba9	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L188099:

; 588  : 					pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));

  01bae	8b f4		 mov	 esi, esp
  01bb0	6a 11		 push	 17			; 00000011H
  01bb2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01bb8	3b f4		 cmp	 esi, esp
  01bba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01bbf	8b f4		 mov	 esi, esp
  01bc1	50		 push	 eax
  01bc2	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01bc5	8b 11		 mov	 edx, DWORD PTR [ecx]
  01bc7	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01bca	ff 52 38	 call	 DWORD PTR [edx+56]
  01bcd	3b f4		 cmp	 esi, esp
  01bcf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 589  : 					pDC->DrawText(leftStr,rectt, nFormat);

  01bd4	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _nFormat$188092[ebp]
  01bda	50		 push	 eax
  01bdb	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01be1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01be6	50		 push	 eax
  01be7	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  01bed	51		 push	 ecx
  01bee	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01bf1	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 590  : 					if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  01bf6	83 bd 7c fe ff
	ff ff		 cmp	 DWORD PTR _tablocr$188086[ebp], -1
  01bfd	74 22		 je	 SHORT $L188100
  01bff	8b 95 70 fe ff
	ff		 mov	 edx, DWORD PTR _nFormatr$188093[ebp]
  01c05	52		 push	 edx
  01c06	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01c0c	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01c11	50		 push	 eax
  01c12	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _rightStr$188085[ebp]
  01c18	50		 push	 eax
  01c19	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c1c	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L188100:

; 591  : 				}
; 592  : 				else{

  01c21	eb 65		 jmp	 SHORT $L188096
$L188097:

; 593  : 					// And the standard Grey text:
; 594  : 					pDC->SetTextColor(m_clrBack);

  01c23	8b f4		 mov	 esi, esp
  01c25	8b 4d bc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  01c28	51		 push	 ecx
  01c29	8b 55 ec	 mov	 edx, DWORD PTR _pDC$[ebp]
  01c2c	8b 02		 mov	 eax, DWORD PTR [edx]
  01c2e	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c31	ff 50 38	 call	 DWORD PTR [eax+56]
  01c34	3b f4		 cmp	 esi, esp
  01c36	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 595  : 					pDC->DrawText(leftStr,rectt, nFormat);

  01c3b	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _nFormat$188092[ebp]
  01c41	51		 push	 ecx
  01c42	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01c48	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01c4d	50		 push	 eax
  01c4e	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR _leftStr$188084[ebp]
  01c54	52		 push	 edx
  01c55	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c58	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 596  : 					if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  01c5d	83 bd 7c fe ff
	ff ff		 cmp	 DWORD PTR _tablocr$188086[ebp], -1
  01c64	74 22		 je	 SHORT $L188096
  01c66	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _nFormatr$188093[ebp]
  01c6c	50		 push	 eax
  01c6d	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$188083[ebp]
  01c73	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01c78	50		 push	 eax
  01c79	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188085[ebp]
  01c7f	51		 push	 ecx
  01c80	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c83	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L188096:

; 597  : 				}
; 598  : 			}
; 599  : 			pDC->SetBkMode( iOldMode );

  01c88	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR _iOldMode$188091[ebp]
  01c8e	52		 push	 edx
  01c8f	8b 4d ec	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c92	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 600  : 		}

  01c97	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  01c9b	8b f4		 mov	 esi, esp
  01c9d	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188085[ebp]
  01ca3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01ca9	3b f4		 cmp	 esi, esp
  01cab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01cb0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01cb4	8b f4		 mov	 esi, esp
  01cb6	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  01cbc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01cc2	3b f4		 cmp	 esi, esp
  01cc4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188082:

; 601  : 		
; 602  : 		m_penBack.DeleteObject();

  01cc9	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188009[ebp]
  01ccf	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 603  : 		m_brSelect.DeleteObject();

  01cd4	8d 4d 84	 lea	 ecx, DWORD PTR _m_brSelect$188008[ebp]
  01cd7	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 604  : 	}

  01cdc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01ce0	8b f4		 mov	 esi, esp
  01ce2	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  01ce8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01cee	3b f4		 cmp	 esi, esp
  01cf0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01cf5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01cf9	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188009[ebp]
  01cff	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  01d04	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01d08	8d 4d 84	 lea	 ecx, DWORD PTR _m_brSelect$188008[ebp]
  01d0b	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L188001:

; 605  : 	m_brBackground.DeleteObject();

  01d10	8d 4d c4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  01d13	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 606  : }

  01d18	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01d1f	8d 4d c4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  01d22	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  01d27	52		 push	 edx
  01d28	8b cd		 mov	 ecx, ebp
  01d2a	50		 push	 eax
  01d2b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192154
  01d31	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01d36	58		 pop	 eax
  01d37	5a		 pop	 edx
  01d38	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01d3b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01d42	5f		 pop	 edi
  01d43	5e		 pop	 esi
  01d44	81 c4 f0 01 00
	00		 add	 esp, 496		; 000001f0H
  01d4a	3b ec		 cmp	 ebp, esp
  01d4c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d51	8b e5		 mov	 esp, ebp
  01d53	5d		 pop	 ebp
  01d54	c2 04 00	 ret	 4
$L192154:
  01d57	10 00 00 00	 DD	 16			; 00000010H
  01d5b	00 00 00 00	 DD	 $L192153
$L192153:
  01d5f	d8 ff ff ff	 DD	 -40			; ffffffd8H
  01d63	10 00 00 00	 DD	 16			; 00000010H
  01d67	00 00 00 00	 DD	 $L192136
  01d6b	c4 ff ff ff	 DD	 -60			; ffffffc4H
  01d6f	08 00 00 00	 DD	 8
  01d73	00 00 00 00	 DD	 $L192137
  01d77	a8 ff ff ff	 DD	 -88			; ffffffa8H
  01d7b	10 00 00 00	 DD	 16			; 00000010H
  01d7f	00 00 00 00	 DD	 $L192138
  01d83	84 ff ff ff	 DD	 -124			; ffffff84H
  01d87	08 00 00 00	 DD	 8
  01d8b	00 00 00 00	 DD	 $L192139
  01d8f	74 ff ff ff	 DD	 -140			; ffffff74H
  01d93	08 00 00 00	 DD	 8
  01d97	00 00 00 00	 DD	 $L192140
  01d9b	48 ff ff ff	 DD	 -184			; ffffff48H
  01d9f	04 00 00 00	 DD	 4
  01da3	00 00 00 00	 DD	 $L192141
  01da7	30 ff ff ff	 DD	 -208			; ffffff30H
  01dab	08 00 00 00	 DD	 8
  01daf	00 00 00 00	 DD	 $L192142
  01db3	20 ff ff ff	 DD	 -224			; ffffff20H
  01db7	08 00 00 00	 DD	 8
  01dbb	00 00 00 00	 DD	 $L192143
  01dbf	10 ff ff ff	 DD	 -240			; ffffff10H
  01dc3	08 00 00 00	 DD	 8
  01dc7	00 00 00 00	 DD	 $L192144
  01dcb	00 ff ff ff	 DD	 -256			; ffffff00H
  01dcf	08 00 00 00	 DD	 8
  01dd3	00 00 00 00	 DD	 $L192145
  01dd7	ec fe ff ff	 DD	 -276			; fffffeecH
  01ddb	08 00 00 00	 DD	 8
  01ddf	00 00 00 00	 DD	 $L192146
  01de3	b4 fe ff ff	 DD	 -332			; fffffeb4H
  01de7	30 00 00 00	 DD	 48			; 00000030H
  01deb	00 00 00 00	 DD	 $L192147
  01def	9c fe ff ff	 DD	 -356			; fffffe9cH
  01df3	10 00 00 00	 DD	 16			; 00000010H
  01df7	00 00 00 00	 DD	 $L192148
  01dfb	90 fe ff ff	 DD	 -368			; fffffe90H
  01dff	04 00 00 00	 DD	 4
  01e03	00 00 00 00	 DD	 $L192149
  01e07	84 fe ff ff	 DD	 -380			; fffffe84H
  01e0b	04 00 00 00	 DD	 4
  01e0f	00 00 00 00	 DD	 $L192150
  01e13	5c fe ff ff	 DD	 -420			; fffffe5cH
  01e17	10 00 00 00	 DD	 16			; 00000010H
  01e1b	00 00 00 00	 DD	 $L192151
$L192151:
  01e1f	6f		 DB	 111			; 0000006fH
  01e20	66		 DB	 102			; 00000066H
  01e21	66		 DB	 102			; 00000066H
  01e22	73		 DB	 115			; 00000073H
  01e23	65		 DB	 101			; 00000065H
  01e24	74		 DB	 116			; 00000074H
  01e25	00		 DB	 0
$L192150:
  01e26	72		 DB	 114			; 00000072H
  01e27	69		 DB	 105			; 00000069H
  01e28	67		 DB	 103			; 00000067H
  01e29	68		 DB	 104			; 00000068H
  01e2a	74		 DB	 116			; 00000074H
  01e2b	53		 DB	 83			; 00000053H
  01e2c	74		 DB	 116			; 00000074H
  01e2d	72		 DB	 114			; 00000072H
  01e2e	00		 DB	 0
$L192149:
  01e2f	6c		 DB	 108			; 0000006cH
  01e30	65		 DB	 101			; 00000065H
  01e31	66		 DB	 102			; 00000066H
  01e32	74		 DB	 116			; 00000074H
  01e33	53		 DB	 83			; 00000053H
  01e34	74		 DB	 116			; 00000074H
  01e35	72		 DB	 114			; 00000072H
  01e36	00		 DB	 0
$L192148:
  01e37	72		 DB	 114			; 00000072H
  01e38	65		 DB	 101			; 00000065H
  01e39	63		 DB	 99			; 00000063H
  01e3a	74		 DB	 116			; 00000074H
  01e3b	74		 DB	 116			; 00000074H
  01e3c	00		 DB	 0
$L192147:
  01e3d	69		 DB	 105			; 00000069H
  01e3e	6e		 DB	 110			; 0000006eH
  01e3f	66		 DB	 102			; 00000066H
  01e40	6f		 DB	 111			; 0000006fH
  01e41	00		 DB	 0
$L192146:
  01e42	70		 DB	 112			; 00000070H
  01e43	74		 DB	 116			; 00000074H
  01e44	49		 DB	 73			; 00000049H
  01e45	6d		 DB	 109			; 0000006dH
  01e46	61		 DB	 97			; 00000061H
  01e47	67		 DB	 103			; 00000067H
  01e48	65		 DB	 101			; 00000065H
  01e49	00		 DB	 0
$L192145:
  01e4a	62		 DB	 98			; 00000062H
  01e4b	72		 DB	 114			; 00000072H
  01e4c	75		 DB	 117			; 00000075H
  01e4d	73		 DB	 115			; 00000073H
  01e4e	68		 DB	 104			; 00000068H
  01e4f	00		 DB	 0
$L192144:
  01e50	70		 DB	 112			; 00000070H
  01e51	74		 DB	 116			; 00000074H
  01e52	49		 DB	 73			; 00000049H
  01e53	6d		 DB	 109			; 0000006dH
  01e54	61		 DB	 97			; 00000061H
  01e55	67		 DB	 103			; 00000067H
  01e56	65		 DB	 101			; 00000065H
  01e57	00		 DB	 0
$L192143:
  01e58	62		 DB	 98			; 00000062H
  01e59	69		 DB	 105			; 00000069H
  01e5a	74		 DB	 116			; 00000074H
  01e5b	6d		 DB	 109			; 0000006dH
  01e5c	61		 DB	 97			; 00000061H
  01e5d	70		 DB	 112			; 00000070H
  01e5e	73		 DB	 115			; 00000073H
  01e5f	74		 DB	 116			; 00000074H
  01e60	61		 DB	 97			; 00000061H
  01e61	6e		 DB	 110			; 0000006eH
  01e62	64		 DB	 100			; 00000064H
  01e63	61		 DB	 97			; 00000061H
  01e64	72		 DB	 114			; 00000072H
  01e65	64		 DB	 100			; 00000064H
  01e66	00		 DB	 0
$L192142:
  01e67	70		 DB	 112			; 00000070H
  01e68	74		 DB	 116			; 00000074H
  01e69	49		 DB	 73			; 00000049H
  01e6a	6d		 DB	 109			; 0000006dH
  01e6b	61		 DB	 97			; 00000061H
  01e6c	67		 DB	 103			; 00000067H
  01e6d	65		 DB	 101			; 00000065H
  01e6e	00		 DB	 0
$L192141:
  01e6f	73		 DB	 115			; 00000073H
  01e70	74		 DB	 116			; 00000074H
  01e71	72		 DB	 114			; 00000072H
  01e72	54		 DB	 84			; 00000054H
  01e73	65		 DB	 101			; 00000065H
  01e74	78		 DB	 120			; 00000078H
  01e75	74		 DB	 116			; 00000074H
  01e76	00		 DB	 0
$L192140:
  01e77	6d		 DB	 109			; 0000006dH
  01e78	5f		 DB	 95			; 0000005fH
  01e79	70		 DB	 112			; 00000070H
  01e7a	65		 DB	 101			; 00000065H
  01e7b	6e		 DB	 110			; 0000006eH
  01e7c	42		 DB	 66			; 00000042H
  01e7d	61		 DB	 97			; 00000061H
  01e7e	63		 DB	 99			; 00000063H
  01e7f	6b		 DB	 107			; 0000006bH
  01e80	00		 DB	 0
$L192139:
  01e81	6d		 DB	 109			; 0000006dH
  01e82	5f		 DB	 95			; 0000005fH
  01e83	62		 DB	 98			; 00000062H
  01e84	72		 DB	 114			; 00000072H
  01e85	53		 DB	 83			; 00000053H
  01e86	65		 DB	 101			; 00000065H
  01e87	6c		 DB	 108			; 0000006cH
  01e88	65		 DB	 101			; 00000065H
  01e89	63		 DB	 99			; 00000063H
  01e8a	74		 DB	 116			; 00000074H
  01e8b	00		 DB	 0
$L192138:
  01e8c	72		 DB	 114			; 00000072H
  01e8d	65		 DB	 101			; 00000065H
  01e8e	63		 DB	 99			; 00000063H
  01e8f	74		 DB	 116			; 00000074H
  01e90	32		 DB	 50			; 00000032H
  01e91	00		 DB	 0
$L192137:
  01e92	6d		 DB	 109			; 0000006dH
  01e93	5f		 DB	 95			; 0000005fH
  01e94	62		 DB	 98			; 00000062H
  01e95	72		 DB	 114			; 00000072H
  01e96	42		 DB	 66			; 00000042H
  01e97	61		 DB	 97			; 00000061H
  01e98	63		 DB	 99			; 00000063H
  01e99	6b		 DB	 107			; 0000006bH
  01e9a	67		 DB	 103			; 00000067H
  01e9b	72		 DB	 114			; 00000072H
  01e9c	6f		 DB	 111			; 0000006fH
  01e9d	75		 DB	 117			; 00000075H
  01e9e	6e		 DB	 110			; 0000006eH
  01e9f	64		 DB	 100			; 00000064H
  01ea0	00		 DB	 0
$L192136:
  01ea1	72		 DB	 114			; 00000072H
  01ea2	65		 DB	 101			; 00000065H
  01ea3	63		 DB	 99			; 00000063H
  01ea4	74		 DB	 116			; 00000074H
  01ea5	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192121:
  0006c	8d 4d c4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  0006f	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192122:
  00074	8d 4d 84	 lea	 ecx, DWORD PTR _m_brSelect$188008[ebp]
  00077	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192123:
  0007c	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188009[ebp]
  00082	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
$L192124:
  00087	8b f4		 mov	 esi, esp
  00089	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _strText$188018[ebp]
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192125:
  0009c	8b f4		 mov	 esi, esp
  0009e	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T192112[ebp]
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000aa	3b f4		 cmp	 esi, esp
  000ac	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192126:
  000b1	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188054[ebp]
  000b7	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192127:
  000bc	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$188070[ebp]
  000c2	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192128:
  000c7	8b f4		 mov	 esi, esp
  000c9	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188084[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d5	3b f4		 cmp	 esi, esp
  000d7	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192129:
  000dc	8b f4		 mov	 esi, esp
  000de	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188085[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000ea	3b f4		 cmp	 esi, esp
  000ec	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192130:
  000f1	8b f4		 mov	 esi, esp
  000f3	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T192119[ebp]
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000ff	3b f4		 cmp	 esi, esp
  00101	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192131:
  00106	8b f4		 mov	 esi, esp
  00108	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T192120[ebp]
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00114	3b f4		 cmp	 esi, esp
  00116	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z:
  0011b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192133
  00120	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP ; BCMenu::DrawItem_Win9xNT2000
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ??0CMenuItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMenuItemInfo@@QAE@XZ PROC NEAR			; CMenuItemInfo::CMenuItemInfo, COMDAT
; _this$ = ecx

; 64   : 	CMenuItemInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	{
; 66   : 		memset(this, 0, sizeof(MENUITEMINFO));

  0000e	6a 30		 push	 48			; 00000030H
  00010	6a 00		 push	 0
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _memset
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 67   : 		cbSize = sizeof(MENUITEMINFO);

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	c7 01 30 00 00
	00		 mov	 DWORD PTR [ecx], 48	; 00000030H

; 68   : 	}

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??0CMenuItemInfo@@QAE@XZ ENDP				; CMenuItemInfo::CMenuItemInfo
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00011	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00025	c7 85 64 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0002f	8b f4		 mov	 esi, esp
  00031	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00045	83 bd 74 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0004c	75 15		 jne	 SHORT $L24163
  0004e	83 bd 68 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00055	72 0c		 jb	 SHORT $L24163

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00057	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00061	eb 0a		 jmp	 SHORT $L24164
$L24163:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00063	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24164:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0006d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00079	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  0007e	8b f4		 mov	 esi, esp
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192163
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$L192163:
  000b9	01 00 00 00	 DD	 1
  000bd	00 00 00 00	 DD	 $L192162
$L192162:
  000c1	64 ff ff ff	 DD	 -156			; ffffff64H
  000c5	94 00 00 00	 DD	 148			; 00000094H
  000c9	00 00 00 00	 DD	 $L192160
$L192160:
  000cd	76		 DB	 118			; 00000076H
  000ce	65		 DB	 101			; 00000065H
  000cf	72		 DB	 114			; 00000072H
  000d0	00		 DB	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24151 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	89 45 f4	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00045	8b f4		 mov	 esi, esp
  00047	6a 07		 push	 7
  00049	8d 45 e8	 lea	 eax, DWORD PTR _szACP$[ebp]
  0004c	50		 push	 eax
  0004d	68 04 10 00 00	 push	 4100			; 00001004H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  00055	51		 push	 ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	74 34		 je	 SHORT $L24150

; 111  : 	{
; 112  : 		char* pch = szACP;

  00067	8d 55 e8	 lea	 edx, DWORD PTR _szACP$[ebp]
  0006a	89 55 e0	 mov	 DWORD PTR _pch$24151[ebp], edx
$L24153:

; 113  : 		while (*pch != '\0')

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00070	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00073	85 c9		 test	 ecx, ecx
  00075	74 24		 je	 SHORT $L24150

; 114  : 		{
; 115  : 			nACP *= 10;

  00077	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  0007a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0007d	89 55 f8	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00080	8b 45 e0	 mov	 eax, DWORD PTR _pch$24151[ebp]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _nACP$[ebp]
  00089	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0008d	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _pch$24151[ebp]
  00093	83 c1 01	 add	 ecx, 1
  00096	89 4d e0	 mov	 DWORD PTR _pch$24151[ebp], ecx

; 117  : 		}

  00099	eb d2		 jmp	 SHORT $L24153
$L24150:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0009b	83 7d f8 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0009f	75 12		 jne	 SHORT $L24155

; 121  : 		nACP = ::GetACP();

  000a1	8b f4		 mov	 esi, esp
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 45 f8	 mov	 DWORD PTR _nACP$[ebp], eax
$L24155:

; 122  : 
; 123  : 	return nACP;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192170
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	5e		 pop	 esi
  000d0	83 c4 20	 add	 esp, 32			; 00000020H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$L192170:
  000de	01 00 00 00	 DD	 1
  000e2	00 00 00 00	 DD	 $L192169
$L192169:
  000e6	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ea	07 00 00 00	 DD	 7
  000ee	00 00 00 00	 DD	 $L192167
$L192167:
  000f2	73		 DB	 115			; 00000073H
  000f3	7a		 DB	 122			; 0000007aH
  000f4	41		 DB	 65			; 00000041H
  000f5	43		 DB	 67			; 00000043H
  000f6	50		 DB	 80			; 00000050H
  000f7	00		 DB	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 158  : 	return( g_pfnGetThreadACP() );

  00004	8b f4		 mov	 esi, esp
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0000c	3b f4		 cmp	 esi, esp
  0000e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  : }

  00013	5e		 pop	 esi
  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
EXTRN	__ftol2:NEAR
;	COMDAT __real@0000000000000000
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv162 = -32						; size = 4
tv161 = -28						; size = 4
tv157 = -24						; size = 4
tv156 = -20						; size = 4
tv152 = -16						; size = 4
tv151 = -12						; size = 4
_lightblue$188113 = -6					; size = 1
_lightgreen$188112 = -5					; size = 1
_lightred$188111 = -4					; size = 1
_blue$188110 = -3					; size = 1
_green$188109 = -2					; size = 1
_red$188108 = -1					; size = 1
_col$ = 8						; size = 4
_factor$ = 12						; size = 8
?LightenColor@BCMenu@@SAKKN@Z PROC NEAR			; BCMenu::LightenColor

; 609  : {

  01eb0	55		 push	 ebp
  01eb1	8b ec		 mov	 ebp, esp
  01eb3	83 ec 20	 sub	 esp, 32			; 00000020H
  01eb6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01ebb	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  01ebe	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01ec1	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01ec4	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  01ec7	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  01eca	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01ecd	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01ed0	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 610  : 	if(factor>0.0&&factor<=1.0){

  01ed3	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  01ed6	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  01edc	df e0		 fnstsw	 ax
  01ede	f6 c4 41	 test	 ah, 65			; 00000041H
  01ee1	0f 85 be 00 00
	00		 jne	 $L188107
  01ee7	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  01eea	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  01ef0	df e0		 fnstsw	 ax
  01ef2	f6 c4 41	 test	 ah, 65			; 00000041H
  01ef5	0f 8a aa 00 00
	00		 jp	 $L188107

; 611  : 		BYTE red,green,blue,lightred,lightgreen,lightblue;
; 612  : 		red = GetRValue(col);

  01efb	8a 45 08	 mov	 al, BYTE PTR _col$[ebp]
  01efe	88 45 ff	 mov	 BYTE PTR _red$188108[ebp], al

; 613  : 		green = GetGValue(col);

  01f01	0f b7 4d 08	 movzx	 ecx, WORD PTR _col$[ebp]
  01f05	c1 f9 08	 sar	 ecx, 8
  01f08	88 4d fe	 mov	 BYTE PTR _green$188109[ebp], cl

; 614  : 		blue = GetBValue(col);

  01f0b	8b 55 08	 mov	 edx, DWORD PTR _col$[ebp]
  01f0e	c1 ea 10	 shr	 edx, 16			; 00000010H
  01f11	88 55 fd	 mov	 BYTE PTR _blue$188110[ebp], dl

; 615  : 		lightred = (BYTE)((factor*(255-red)) + red);

  01f14	0f b6 45 ff	 movzx	 eax, BYTE PTR _red$188108[ebp]
  01f18	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  01f1d	2b c8		 sub	 ecx, eax
  01f1f	89 4d f4	 mov	 DWORD PTR tv151[ebp], ecx
  01f22	db 45 f4	 fild	 DWORD PTR tv151[ebp]
  01f25	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  01f28	0f b6 55 ff	 movzx	 edx, BYTE PTR _red$188108[ebp]
  01f2c	89 55 f0	 mov	 DWORD PTR tv152[ebp], edx
  01f2f	db 45 f0	 fild	 DWORD PTR tv152[ebp]
  01f32	de c1		 faddp	 ST(1), ST(0)
  01f34	e8 00 00 00 00	 call	 __ftol2
  01f39	88 45 fc	 mov	 BYTE PTR _lightred$188111[ebp], al

; 616  : 		lightgreen = (BYTE)((factor*(255-green)) + green);

  01f3c	0f b6 45 fe	 movzx	 eax, BYTE PTR _green$188109[ebp]
  01f40	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  01f45	2b c8		 sub	 ecx, eax
  01f47	89 4d ec	 mov	 DWORD PTR tv156[ebp], ecx
  01f4a	db 45 ec	 fild	 DWORD PTR tv156[ebp]
  01f4d	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  01f50	0f b6 55 fe	 movzx	 edx, BYTE PTR _green$188109[ebp]
  01f54	89 55 e8	 mov	 DWORD PTR tv157[ebp], edx
  01f57	db 45 e8	 fild	 DWORD PTR tv157[ebp]
  01f5a	de c1		 faddp	 ST(1), ST(0)
  01f5c	e8 00 00 00 00	 call	 __ftol2
  01f61	88 45 fb	 mov	 BYTE PTR _lightgreen$188112[ebp], al

; 617  : 		lightblue = (BYTE)((factor*(255-blue)) + blue);

  01f64	0f b6 45 fd	 movzx	 eax, BYTE PTR _blue$188110[ebp]
  01f68	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  01f6d	2b c8		 sub	 ecx, eax
  01f6f	89 4d e4	 mov	 DWORD PTR tv161[ebp], ecx
  01f72	db 45 e4	 fild	 DWORD PTR tv161[ebp]
  01f75	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  01f78	0f b6 55 fd	 movzx	 edx, BYTE PTR _blue$188110[ebp]
  01f7c	89 55 e0	 mov	 DWORD PTR tv162[ebp], edx
  01f7f	db 45 e0	 fild	 DWORD PTR tv162[ebp]
  01f82	de c1		 faddp	 ST(1), ST(0)
  01f84	e8 00 00 00 00	 call	 __ftol2
  01f89	88 45 fa	 mov	 BYTE PTR _lightblue$188113[ebp], al

; 618  : 		col = RGB(lightred,lightgreen,lightblue);

  01f8c	0f b6 45 fc	 movzx	 eax, BYTE PTR _lightred$188111[ebp]
  01f90	0f b6 4d fb	 movzx	 ecx, BYTE PTR _lightgreen$188112[ebp]
  01f94	c1 e1 08	 shl	 ecx, 8
  01f97	0b c1		 or	 eax, ecx
  01f99	0f b6 55 fa	 movzx	 edx, BYTE PTR _lightblue$188113[ebp]
  01f9d	c1 e2 10	 shl	 edx, 16			; 00000010H
  01fa0	0b c2		 or	 eax, edx
  01fa2	89 45 08	 mov	 DWORD PTR _col$[ebp], eax
$L188107:

; 619  : 	}
; 620  : 	return(col);

  01fa5	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]

; 621  : }

  01fa8	8b e5		 mov	 esp, ebp
  01faa	5d		 pop	 ebp
  01fab	c3		 ret	 0
?LightenColor@BCMenu@@SAKKN@Z ENDP			; BCMenu::LightenColor
_TEXT	ENDS
PUBLIC	?DarkenColor@BCMenu@@SAKKN@Z			; BCMenu::DarkenColor
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv156 = -32						; size = 4
tv155 = -28						; size = 4
tv152 = -24						; size = 4
tv151 = -20						; size = 4
tv148 = -16						; size = 4
tv147 = -12						; size = 4
_lightblue$188137 = -6					; size = 1
_lightgreen$188136 = -5					; size = 1
_lightred$188135 = -4					; size = 1
_blue$188134 = -3					; size = 1
_green$188133 = -2					; size = 1
_red$188132 = -1					; size = 1
_col$ = 8						; size = 4
_factor$ = 12						; size = 8
?DarkenColor@BCMenu@@SAKKN@Z PROC NEAR			; BCMenu::DarkenColor

; 624  : {

  01fb0	55		 push	 ebp
  01fb1	8b ec		 mov	 ebp, esp
  01fb3	83 ec 20	 sub	 esp, 32			; 00000020H
  01fb6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  01fbb	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  01fbe	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  01fc1	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  01fc4	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  01fc7	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  01fca	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  01fcd	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  01fd0	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 625  : 	if(factor>0.0&&factor<=1.0){

  01fd3	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  01fd6	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  01fdc	df e0		 fnstsw	 ax
  01fde	f6 c4 41	 test	 ah, 65			; 00000041H
  01fe1	0f 85 a9 00 00
	00		 jne	 $L188131
  01fe7	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  01fea	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  01ff0	df e0		 fnstsw	 ax
  01ff2	f6 c4 41	 test	 ah, 65			; 00000041H
  01ff5	0f 8a 95 00 00
	00		 jp	 $L188131

; 626  : 		BYTE red,green,blue,lightred,lightgreen,lightblue;
; 627  : 		red = GetRValue(col);

  01ffb	8a 45 08	 mov	 al, BYTE PTR _col$[ebp]
  01ffe	88 45 ff	 mov	 BYTE PTR _red$188132[ebp], al

; 628  : 		green = GetGValue(col);

  02001	0f b7 4d 08	 movzx	 ecx, WORD PTR _col$[ebp]
  02005	c1 f9 08	 sar	 ecx, 8
  02008	88 4d fe	 mov	 BYTE PTR _green$188133[ebp], cl

; 629  : 		blue = GetBValue(col);

  0200b	8b 55 08	 mov	 edx, DWORD PTR _col$[ebp]
  0200e	c1 ea 10	 shr	 edx, 16			; 00000010H
  02011	88 55 fd	 mov	 BYTE PTR _blue$188134[ebp], dl

; 630  : 		lightred = (BYTE)(red-(factor*red));

  02014	0f b6 45 ff	 movzx	 eax, BYTE PTR _red$188132[ebp]
  02018	89 45 f4	 mov	 DWORD PTR tv147[ebp], eax
  0201b	db 45 f4	 fild	 DWORD PTR tv147[ebp]
  0201e	0f b6 4d ff	 movzx	 ecx, BYTE PTR _red$188132[ebp]
  02022	89 4d f0	 mov	 DWORD PTR tv148[ebp], ecx
  02025	db 45 f0	 fild	 DWORD PTR tv148[ebp]
  02028	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  0202b	de e9		 fsubp	 ST(1), ST(0)
  0202d	e8 00 00 00 00	 call	 __ftol2
  02032	88 45 fc	 mov	 BYTE PTR _lightred$188135[ebp], al

; 631  : 		lightgreen = (BYTE)(green-(factor*green));

  02035	0f b6 55 fe	 movzx	 edx, BYTE PTR _green$188133[ebp]
  02039	89 55 ec	 mov	 DWORD PTR tv151[ebp], edx
  0203c	db 45 ec	 fild	 DWORD PTR tv151[ebp]
  0203f	0f b6 45 fe	 movzx	 eax, BYTE PTR _green$188133[ebp]
  02043	89 45 e8	 mov	 DWORD PTR tv152[ebp], eax
  02046	db 45 e8	 fild	 DWORD PTR tv152[ebp]
  02049	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  0204c	de e9		 fsubp	 ST(1), ST(0)
  0204e	e8 00 00 00 00	 call	 __ftol2
  02053	88 45 fb	 mov	 BYTE PTR _lightgreen$188136[ebp], al

; 632  : 		lightblue = (BYTE)(blue-(factor*blue));

  02056	0f b6 4d fd	 movzx	 ecx, BYTE PTR _blue$188134[ebp]
  0205a	89 4d e4	 mov	 DWORD PTR tv155[ebp], ecx
  0205d	db 45 e4	 fild	 DWORD PTR tv155[ebp]
  02060	0f b6 55 fd	 movzx	 edx, BYTE PTR _blue$188134[ebp]
  02064	89 55 e0	 mov	 DWORD PTR tv156[ebp], edx
  02067	db 45 e0	 fild	 DWORD PTR tv156[ebp]
  0206a	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  0206d	de e9		 fsubp	 ST(1), ST(0)
  0206f	e8 00 00 00 00	 call	 __ftol2
  02074	88 45 fa	 mov	 BYTE PTR _lightblue$188137[ebp], al

; 633  : 		col = RGB(lightred,lightgreen,lightblue);

  02077	0f b6 45 fc	 movzx	 eax, BYTE PTR _lightred$188135[ebp]
  0207b	0f b6 4d fb	 movzx	 ecx, BYTE PTR _lightgreen$188136[ebp]
  0207f	c1 e1 08	 shl	 ecx, 8
  02082	0b c1		 or	 eax, ecx
  02084	0f b6 55 fa	 movzx	 edx, BYTE PTR _lightblue$188137[ebp]
  02088	c1 e2 10	 shl	 edx, 16			; 00000010H
  0208b	0b c2		 or	 eax, edx
  0208d	89 45 08	 mov	 DWORD PTR _col$[ebp], eax
$L188131:

; 634  : 	}
; 635  : 	return(col);

  02090	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]

; 636  : }

  02093	8b e5		 mov	 esp, ebp
  02095	5d		 pop	 ebp
  02096	c3		 ret	 0
?DarkenColor@BCMenu@@SAKKN@Z ENDP			; BCMenu::DarkenColor
_TEXT	ENDS
PUBLIC	?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z ; BCMenu::DrawXPCheckmark
PUBLIC	?CanDraw3DImageList@BCMenu@@IAEHH@Z		; BCMenu::CanDraw3DImageList
PUBLIC	??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z	; BCMenuMemDC::BCMenuMemDC
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe199999999999a
PUBLIC	__real@3fd999999999999a
EXTRN	??0CFont@@QAE@XZ:NEAR				; CFont::CFont
EXTRN	?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z:NEAR ; CFont::CreateFontIndirectA
EXTRN	??1CFont@@UAE@XZ:NEAR				; CFont::~CFont
EXTRN	??2CObject@@SGPAXIPBDH@Z:NEAR			; CObject::operator new
EXTRN	??3CObject@@SGXPAXPBDH@Z:NEAR			; CObject::operator delete
EXTRN	__imp__SystemParametersInfoA@16:NEAR
EXTRN	?GetImageCount@CImageList@@QBEHXZ:NEAR		; CImageList::GetImageCount
xdata$x	SEGMENT
$T192269 DD	0ffffffffH
	DD	FLAT:$L192206
	DD	00H
	DD	FLAT:$L192207
	DD	01H
	DD	FLAT:$L192208
	DD	02H
	DD	FLAT:$L192209
	DD	02H
	DD	FLAT:$L192210
	DD	04H
	DD	FLAT:$L192211
	DD	05H
	DD	FLAT:$L192212
	DD	06H
	DD	FLAT:$L192213
	DD	06H
	DD	FLAT:$L192214
	DD	06H
	DD	FLAT:$L192215
	DD	06H
	DD	FLAT:$L192216
	DD	06H
	DD	FLAT:$L192217
	DD	0bH
	DD	FLAT:$L192218
	DD	0cH
	DD	FLAT:$L192219
	DD	0cH
	DD	FLAT:$L192220
$T192222 DD	019930520H
	DD	0fH
	DD	FLAT:$T192269
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fe199999999999a
CONST	SEGMENT
__real@3fe199999999999a DQ 03fe199999999999ar	; 0.55
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv846 = -1160						; size = 4
tv866 = -1156						; size = 4
tv869 = -1152						; size = 4
tv864 = -1148						; size = 4
tv487 = -1144						; size = 4
tv682 = -1140						; size = 4
tv1082 = -1136						; size = 4
tv1074 = -1132						; size = 4
tv857 = -1128						; size = 4
tv258 = -1124						; size = 4
tv158 = -1120						; size = 4
$T192203 = -1116					; size = 4
$T192202 = -1112					; size = 4
$T192201 = -1108					; size = 4
$T192200 = -1104					; size = 4
$T192197 = -1100					; size = 8
$T192196 = -1092					; size = 8
$T192195 = -1084					; size = 8
$T192194 = -1076					; size = 8
$T192193 = -1068					; size = 8
$T192192 = -1060					; size = 8
$T192191 = -1052					; size = 8
$T192190 = -1044					; size = 8
$T192189 = -1036					; size = 8
$T192188 = -1028					; size = 4
$T192184 = -1024					; size = 4
$T192183 = -1020					; size = 4
_graycol$188310 = -1016					; size = 4
_offset$188308 = -1008					; size = 16
_nFormatr$188304 = -988					; size = 4
_nFormat$188303 = -984					; size = 4
_iOldMode$188302 = -980					; size = 4
_tablocr$188297 = -976					; size = 4
_rightStr$188296 = -968					; size = 4
_leftStr$188295 = -956					; size = 4
_rectt$188294 = -944					; size = 16
_info$188289 = -920					; size = 48
_ptImage$188282 = -864					; size = 8
_ptImage$188278 = -848					; size = 8
_brushin$188277 = -832					; size = 8
_ptImage2$188270 = -816					; size = 8
_ptImage1$188269 = -800					; size = 8
_brushin$188265 = -784					; size = 8
_ptImage$188263 = -768					; size = 8
_transparentcol$188255 = -756				; size = 4
_bitmapstandard$188254 = -748				; size = 8
_ptImage$188251 = -732					; size = 8
_ptImage$188242 = -716					; size = 8
_pOldPen$188236 = -704					; size = 4
_pOldPen$188234 = -700					; size = 4
_strText$188212 = -692					; size = 4
_state$188211 = -684					; size = 4
_CanDraw3D$188210 = -680				; size = 4
_bitmap$188209 = -676					; size = 4
_disabled_offset$188208 = -672				; size = 4
_shadow_offset$188207 = -668				; size = 4
_faded_offset$188206 = -664				; size = 4
_global_offset$188205 = -660				; size = 4
_xoffset$188204 = -656					; size = 4
_nIconNormal$188203 = -652				; size = 4
_dy$188202 = -648					; size = 4
_dx$188201 = -644					; size = 4
_y0$188200 = -640					; size = 4
_x0$188199 = -636					; size = 4
_m_penBack$188198 = -628				; size = 8
_m_brSelect$188197 = -612				; size = 8
_crSelectFill$188194 = -600				; size = 4
_crSelect$188193 = -592					; size = 4
_crText$188192 = -584					; size = 4
_checkflag$188191 = -580				; size = 4
_disableflag$188190 = -576				; size = 4
_selectedflag$188189 = -572				; size = 4
_standardflag$188188 = -568				; size = 4
_nm$188183 = -560					; size = 340
_barwidth$ = -216					; size = 4
_BCMENU_PAD$ = -212					; size = 4
_m_brBackground$ = -204					; size = 8
_m_newbrBackground$ = -188				; size = 8
_m_lf$ = -172						; size = 60
_pFont$ = -108						; size = 4
_m_fontMenu$ = -100					; size = 8
_m_clrBack$ = -88					; size = 4
_m_newclrBack$ = -84					; size = 4
_state$ = -80						; size = 4
_rect2$ = -72						; size = 16
_rect$ = -48						; size = 16
_pMemDC$ = -28						; size = 4
_pDC$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lpDIS$ = 8						; size = 4
?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z PROC NEAR ; BCMenu::DrawItem_WinXP
; _this$ = ecx

; 639  : {

  020a0	55		 push	 ebp
  020a1	8b ec		 mov	 ebp, esp
  020a3	6a ff		 push	 -1
  020a5	68 00 00 00 00	 push	 __ehhandler$?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z
  020aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  020b0	50		 push	 eax
  020b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  020b8	81 ec 7c 04 00
	00		 sub	 esp, 1148		; 0000047cH
  020be	56		 push	 esi
  020bf	57		 push	 edi
  020c0	51		 push	 ecx
  020c1	8d bd 78 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1160]
  020c7	b9 1f 01 00 00	 mov	 ecx, 287		; 0000011fH
  020cc	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  020d1	f3 ab		 rep stosd
  020d3	59		 pop	 ecx
  020d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  020d9	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  020dc	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 640  : 	ASSERT(lpDIS != NULL);

  020df	83 7d 08 00	 cmp	 DWORD PTR _lpDIS$[ebp], 0
  020e3	75 14		 jne	 SHORT $L192182
  020e5	68 80 02 00 00	 push	 640			; 00000280H
  020ea	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  020ef	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  020f4	85 c0		 test	 eax, eax
  020f6	74 01		 je	 SHORT $L192182
  020f8	cc		 int	 3
$L192182:

; 641  : 	CDC* pDC = CDC::FromHandle(lpDIS->hDC);

  020f9	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  020fc	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  020ff	52		 push	 edx
  02100	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  02105	89 45 e8	 mov	 DWORD PTR _pDC$[ebp], eax

; 642  : #ifdef BCMENU_USE_MEMDC
; 643  : 	BCMenuMemDC *pMemDC=NULL;

  02108	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pMemDC$[ebp], 0

; 644  : #endif
; 645  : 	CRect rect,rect2;

  0210f	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02112	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  02117	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  0211a	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 646  : 	UINT state = (((BCMenuData*)(lpDIS->itemData))->nFlags);

  0211f	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  02122	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  02125	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02128	89 55 b0	 mov	 DWORD PTR _state$[ebp], edx

; 647  : //modified by vito--
; 648  : /*	COLORREF m_newclrBack=GetSysColor(COLOR_3DFACE);
; 649  : 	COLORREF m_clrBack=GetSysColor(COLOR_WINDOW);
; 650  : */
; 651  : 	COLORREF m_newclrBack=m_menuItemBitmapBkColor;

  0212b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0212e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  02131	89 4d ac	 mov	 DWORD PTR _m_newclrBack$[ebp], ecx

; 652  : 	COLORREF m_clrBack=m_menuItemBkColor;

  02134	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02137	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0213a	89 45 a8	 mov	 DWORD PTR _m_clrBack$[ebp], eax

; 653  : //--
; 654  : 	m_clrBack=DarkenColor(m_clrBack,0.02);

  0213d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f947ae147ae147b
  02143	83 ec 08	 sub	 esp, 8
  02146	dd 1c 24	 fstp	 QWORD PTR [esp]
  02149	8b 4d a8	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  0214c	51		 push	 ecx
  0214d	e8 00 00 00 00	 call	 ?DarkenColor@BCMenu@@SAKKN@Z ; BCMenu::DarkenColor
  02152	83 c4 0c	 add	 esp, 12			; 0000000cH
  02155	89 45 a8	 mov	 DWORD PTR _m_clrBack$[ebp], eax

; 655  : 	CFont m_fontMenu,*pFont=NULL;

  02158	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  0215b	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  02160	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  02167	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _pFont$[ebp], 0

; 656  : 	LOGFONT m_lf;
; 657  : 	if(!IsWinXPLuna())m_newclrBack=LightenColor(m_newclrBack,0.25);

  0216e	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  02173	85 c0		 test	 eax, eax
  02175	75 1b		 jne	 SHORT $L188167
  02177	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd0000000000000
  0217d	83 ec 08	 sub	 esp, 8
  02180	dd 1c 24	 fstp	 QWORD PTR [esp]
  02183	8b 55 ac	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  02186	52		 push	 edx
  02187	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0218c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0218f	89 45 ac	 mov	 DWORD PTR _m_newclrBack$[ebp], eax
$L188167:

; 658  : 	CBrush m_newbrBackground,m_brBackground;

  02192	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  02198	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0219d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  021a1	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  021a7	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  021ac	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 659  : 	m_brBackground.CreateSolidBrush(m_clrBack);

  021b0	8b 45 a8	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  021b3	50		 push	 eax
  021b4	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  021ba	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 660  : 	m_newbrBackground.CreateSolidBrush(m_newclrBack);

  021bf	8b 4d ac	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  021c2	51		 push	 ecx
  021c3	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  021c9	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 661  : 	int BCMENU_PAD=4;

  021ce	c7 85 2c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _BCMENU_PAD$[ebp], 4

; 662  : 	if(xp_draw_3D_bitmaps)BCMENU_PAD=7;

  021d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  021df	74 0a		 je	 SHORT $L188171
  021e1	c7 85 2c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR _BCMENU_PAD$[ebp], 7
$L188171:

; 663  : 	int barwidth=m_iconX+BCMENU_PAD;

  021eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  021f1	03 95 2c ff ff
	ff		 add	 edx, DWORD PTR _BCMENU_PAD$[ebp]
  021f7	89 95 28 ff ff
	ff		 mov	 DWORD PTR _barwidth$[ebp], edx

; 664  : 	
; 665  : 	// remove the selected bit if it's grayed out
; 666  : 	if(lpDIS->itemState & ODS_GRAYED&&!xp_select_disabled){

  021fd	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  02200	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02203	83 e1 02	 and	 ecx, 2
  02206	0f 84 25 01 00
	00		 je	 $L188173
  0220c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_select_disabled@BCMenu@@1HA, 0 ; BCMenu::xp_select_disabled
  02213	0f 85 18 01 00
	00		 jne	 $L188173

; 667  : 		if(lpDIS->itemState & ODS_SELECTED)lpDIS->itemState=lpDIS->itemState & ~ODS_SELECTED;

  02219	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  0221c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0221f	83 e0 01	 and	 eax, 1
  02222	74 0f		 je	 SHORT $L188174
  02224	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02227	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0222a	83 e2 fe	 and	 edx, -2			; fffffffeH
  0222d	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  02230	89 50 10	 mov	 DWORD PTR [eax+16], edx
$L188174:

; 668  : #ifdef BCMENU_USE_MEMDC
; 669  : 		pMemDC=new BCMenuMemDC(pDC,&lpDIS->rcItem);

  02233	68 9d 02 00 00	 push	 669			; 0000029dH
  02238	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0223d	6a 34		 push	 52			; 00000034H
  0223f	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  02244	89 85 00 fc ff
	ff		 mov	 DWORD PTR $T192184[ebp], eax
  0224a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0224e	83 bd 00 fc ff
	ff 00		 cmp	 DWORD PTR $T192184[ebp], 0
  02255	74 1e		 je	 SHORT $L192185
  02257	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  0225a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0225d	51		 push	 ecx
  0225e	8b 55 e8	 mov	 edx, DWORD PTR _pDC$[ebp]
  02261	52		 push	 edx
  02262	8b 8d 00 fc ff
	ff		 mov	 ecx, DWORD PTR $T192184[ebp]
  02268	e8 00 00 00 00	 call	 ??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z ; BCMenuMemDC::BCMenuMemDC
  0226d	89 85 a0 fb ff
	ff		 mov	 DWORD PTR tv158[ebp], eax
  02273	eb 0a		 jmp	 SHORT $L192186
$L192185:
  02275	c7 85 a0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$L192186:
  0227f	8b 85 a0 fb ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  02285	89 85 04 fc ff
	ff		 mov	 DWORD PTR $T192183[ebp], eax
  0228b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0228f	8b 8d 04 fc ff
	ff		 mov	 ecx, DWORD PTR $T192183[ebp]
  02295	89 4d e4	 mov	 DWORD PTR _pMemDC$[ebp], ecx

; 670  : 		pDC = pMemDC;

  02298	8b 55 e4	 mov	 edx, DWORD PTR _pMemDC$[ebp]
  0229b	89 55 e8	 mov	 DWORD PTR _pDC$[ebp], edx

; 671  : 		ZeroMemory ((PVOID) &m_lf,sizeof (LOGFONT));

  0229e	6a 3c		 push	 60			; 0000003cH
  022a0	6a 00		 push	 0
  022a2	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _m_lf$[ebp]
  022a8	50		 push	 eax
  022a9	e8 00 00 00 00	 call	 _memset
  022ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 672  : 		NONCLIENTMETRICS nm;
; 673  : 		nm.cbSize = sizeof (NONCLIENTMETRICS);

  022b1	c7 85 d0 fd ff
	ff 54 01 00 00	 mov	 DWORD PTR _nm$188183[ebp], 340 ; 00000154H

; 674  : 		VERIFY (SystemParametersInfo(SPI_GETNONCLIENTMETRICS,nm.cbSize,&nm,0)); 

  022bb	8b f4		 mov	 esi, esp
  022bd	6a 00		 push	 0
  022bf	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _nm$188183[ebp]
  022c5	51		 push	 ecx
  022c6	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR _nm$188183[ebp]
  022cc	52		 push	 edx
  022cd	6a 29		 push	 41			; 00000029H
  022cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  022d5	3b f4		 cmp	 esi, esp
  022d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  022dc	85 c0		 test	 eax, eax
  022de	75 14		 jne	 SHORT $L192187
  022e0	68 a2 02 00 00	 push	 674			; 000002a2H
  022e5	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  022ea	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  022ef	85 c0		 test	 eax, eax
  022f1	74 01		 je	 SHORT $L192187
  022f3	cc		 int	 3
$L192187:

; 675  : 		m_lf =  nm.lfMenuFont;

  022f4	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  022f9	8d b5 70 fe ff
	ff		 lea	 esi, DWORD PTR _nm$188183[ebp+160]
  022ff	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR _m_lf$[ebp]
  02305	f3 a5		 rep movsd

; 676  : 		m_fontMenu.CreateFontIndirect (&m_lf);

  02307	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _m_lf$[ebp]
  0230d	51		 push	 ecx
  0230e	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  02311	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA

; 677  : 		pFont = pDC->SelectObject (&m_fontMenu);

  02316	8b f4		 mov	 esi, esp
  02318	8d 55 9c	 lea	 edx, DWORD PTR _m_fontMenu$[ebp]
  0231b	52		 push	 edx
  0231c	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  0231f	8b 10		 mov	 edx, DWORD PTR [eax]
  02321	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02324	ff 52 30	 call	 DWORD PTR [edx+48]
  02327	3b f4		 cmp	 esi, esp
  02329	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0232e	89 45 94	 mov	 DWORD PTR _pFont$[ebp], eax
$L188173:

; 678  : #endif
; 679  : 
; 680  : 	}
; 681  : 	
; 682  : 	if(state & MF_SEPARATOR){

  02331	8b 45 b0	 mov	 eax, DWORD PTR _state$[ebp]
  02334	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  02339	0f 84 a7 00 00
	00		 je	 $L188186

; 683  : 		rect.CopyRect(&lpDIS->rcItem);

  0233f	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02342	83 c1 1c	 add	 ecx, 28			; 0000001cH
  02345	51		 push	 ecx
  02346	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02349	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 684  : 		pDC->FillRect (rect,&m_brBackground);

  0234e	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  02354	52		 push	 edx
  02355	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02358	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0235d	50		 push	 eax
  0235e	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02361	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 685  : 		rect2.SetRect(rect.left,rect.top,rect.left+barwidth,rect.bottom);

  02366	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp+12]
  02369	50		 push	 eax
  0236a	8b 4d d0	 mov	 ecx, DWORD PTR _rect$[ebp]
  0236d	03 8d 28 ff ff
	ff		 add	 ecx, DWORD PTR _barwidth$[ebp]
  02373	51		 push	 ecx
  02374	8b 55 d4	 mov	 edx, DWORD PTR _rect$[ebp+4]
  02377	52		 push	 edx
  02378	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp]
  0237b	50		 push	 eax
  0237c	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  0237f	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 686  : 		rect.top+=rect.Height()>>1;

  02384	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02387	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0238c	d1 f8		 sar	 eax, 1
  0238e	03 45 d4	 add	 eax, DWORD PTR _rect$[ebp+4]
  02391	89 45 d4	 mov	 DWORD PTR _rect$[ebp+4], eax

; 687  : 		rect.left = rect2.right+BCMENU_PAD;

  02394	8b 4d c0	 mov	 ecx, DWORD PTR _rect2$[ebp+8]
  02397	03 8d 2c ff ff
	ff		 add	 ecx, DWORD PTR _BCMENU_PAD$[ebp]
  0239d	89 4d d0	 mov	 DWORD PTR _rect$[ebp], ecx

; 688  : 		pDC->DrawEdge(&rect,EDGE_ETCHED,BF_TOP);

  023a0	6a 02		 push	 2
  023a2	6a 06		 push	 6
  023a4	8d 55 d0	 lea	 edx, DWORD PTR _rect$[ebp]
  023a7	52		 push	 edx
  023a8	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  023ab	e8 00 00 00 00	 call	 ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawEdge

; 689  : 		pDC->FillRect (rect2,&m_newbrBackground);

  023b0	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _m_newbrBackground$[ebp]
  023b6	50		 push	 eax
  023b7	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  023ba	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  023bf	50		 push	 eax
  023c0	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  023c3	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 690  : 		pDC->Draw3dRect (rect2,m_newclrBack,m_newclrBack);

  023c8	8b 4d ac	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  023cb	51		 push	 ecx
  023cc	8b 55 ac	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  023cf	52		 push	 edx
  023d0	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  023d3	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  023d8	50		 push	 eax
  023d9	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  023dc	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 691  : 	}
; 692  : 	else{

  023e1	e9 4c 11 00 00	 jmp	 $L188187
$L188186:

; 693  : 		BOOL standardflag=FALSE,selectedflag=FALSE,disableflag=FALSE;

  023e6	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _standardflag$188188[ebp], 0
  023f0	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _selectedflag$188189[ebp], 0
  023fa	c7 85 c0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _disableflag$188190[ebp], 0

; 694  : 		BOOL checkflag=FALSE;

  02404	c7 85 bc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _checkflag$188191[ebp], 0

; 695  : 		COLORREF crText ;
; 696  : 		crText = m_menuItemTextColor;

  0240e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02411	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  02414	89 8d b8 fd ff
	ff		 mov	 DWORD PTR _crText$188192[ebp], ecx

; 697  : 		
; 698  : 		
; 699  : 		COLORREF crSelect = m_menuItemSelectBKColor;

  0241a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0241d	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  02420	89 85 b0 fd ff
	ff		 mov	 DWORD PTR _crSelect$188193[ebp], eax

; 700  : 		COLORREF crSelectFill;
; 701  : 		if(!IsWinXPLuna())crSelectFill=LightenColor(crSelect,0.85);

  02426	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  0242b	85 c0		 test	 eax, eax
  0242d	75 23		 jne	 SHORT $L188195
  0242f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feb333333333333
  02435	83 ec 08	 sub	 esp, 8
  02438	dd 1c 24	 fstp	 QWORD PTR [esp]
  0243b	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$188193[ebp]
  02441	51		 push	 ecx
  02442	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  02447	83 c4 0c	 add	 esp, 12			; 0000000cH
  0244a	89 85 a8 fd ff
	ff		 mov	 DWORD PTR _crSelectFill$188194[ebp], eax

; 702  : 		else crSelectFill=LightenColor(crSelect,0.7);

  02450	eb 21		 jmp	 SHORT $L188196
$L188195:
  02452	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe6666666666666
  02458	83 ec 08	 sub	 esp, 8
  0245b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0245e	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$188193[ebp]
  02464	52		 push	 edx
  02465	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0246a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0246d	89 85 a8 fd ff
	ff		 mov	 DWORD PTR _crSelectFill$188194[ebp], eax
$L188196:

; 703  : 		CBrush m_brSelect;

  02473	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  02479	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0247e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 704  : 		CPen m_penBack;

  02482	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188198[ebp]
  02488	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  0248d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 705  : 		int x0,y0,dx,dy;
; 706  : 		int nIconNormal=-1,xoffset=-1,global_offset=-1;

  02491	c7 85 74 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _nIconNormal$188203[ebp], -1
  0249b	c7 85 70 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _xoffset$188204[ebp], -1
  024a5	c7 85 6c fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _global_offset$188205[ebp], -1

; 707  : 		int faded_offset=1,shadow_offset=2,disabled_offset=3;

  024af	c7 85 68 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _faded_offset$188206[ebp], 1
  024b9	c7 85 64 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR _shadow_offset$188207[ebp], 2
  024c3	c7 85 60 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR _disabled_offset$188208[ebp], 3

; 708  : 		CImageList *bitmap=NULL;

  024cd	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _bitmap$188209[ebp], 0

; 709  : 		BOOL CanDraw3D=FALSE;

  024d7	c7 85 58 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _CanDraw3D$188210[ebp], 0

; 710  : 		
; 711  : 		// set some colors
; 712  : 		m_penBack.CreatePen (PS_SOLID,0,m_clrBack);

  024e1	8b 45 a8	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  024e4	50		 push	 eax
  024e5	6a 00		 push	 0
  024e7	6a 00		 push	 0
  024e9	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188198[ebp]
  024ef	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 713  : 		m_brSelect.CreateSolidBrush(crSelectFill);

  024f4	8b 8d a8 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelectFill$188194[ebp]
  024fa	51		 push	 ecx
  024fb	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  02501	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 714  : 		
; 715  : 		// draw the colored rectangle portion
; 716  : 		
; 717  : 		rect.CopyRect(&lpDIS->rcItem);

  02506	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  02509	83 c2 1c	 add	 edx, 28			; 0000001cH
  0250c	52		 push	 edx
  0250d	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02510	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 718  : 		rect2=rect;

  02515	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp]
  02518	89 45 b8	 mov	 DWORD PTR _rect2$[ebp], eax
  0251b	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  0251e	89 4d bc	 mov	 DWORD PTR _rect2$[ebp+4], ecx
  02521	8b 55 d8	 mov	 edx, DWORD PTR _rect$[ebp+8]
  02524	89 55 c0	 mov	 DWORD PTR _rect2$[ebp+8], edx
  02527	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp+12]
  0252a	89 45 c4	 mov	 DWORD PTR _rect2$[ebp+12], eax

; 719  : 		
; 720  : 		// draw the up/down/focused/disabled state
; 721  : 		
; 722  : 		UINT state = lpDIS->itemState;

  0252d	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02530	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02533	89 95 54 fd ff
	ff		 mov	 DWORD PTR _state$188211[ebp], edx

; 723  : 		CString strText;

  02539	8b f4		 mov	 esi, esp
  0253b	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  02541	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02547	3b f4		 cmp	 esi, esp
  02549	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0254e	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 724  : 		
; 725  : 		if(lpDIS->itemData != NULL){

  02552	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  02555	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  02559	0f 84 f5 01 00
	00		 je	 $L188213

; 726  : 			nIconNormal = (((BCMenuData*)(lpDIS->itemData))->menuIconNormal);

  0255f	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02562	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  02565	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  02568	89 85 74 fd ff
	ff		 mov	 DWORD PTR _nIconNormal$188203[ebp], eax

; 727  : 			xoffset = (((BCMenuData*)(lpDIS->itemData))->xoffset);

  0256e	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02571	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  02574	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02577	89 85 70 fd ff
	ff		 mov	 DWORD PTR _xoffset$188204[ebp], eax

; 728  : 			bitmap = (((BCMenuData*)(lpDIS->itemData))->bitmap);

  0257d	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02580	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  02583	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  02586	89 85 5c fd ff
	ff		 mov	 DWORD PTR _bitmap$188209[ebp], eax

; 729  : 			strText = ((BCMenuData*) (lpDIS->itemData))->GetString();

  0258c	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T192188[ebp]
  02592	51		 push	 ecx
  02593	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  02596	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  02599	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  0259e	89 85 9c fb ff
	ff		 mov	 DWORD PTR tv258[ebp], eax
  025a4	8b 85 9c fb ff
	ff		 mov	 eax, DWORD PTR tv258[ebp]
  025aa	89 85 98 fb ff
	ff		 mov	 DWORD PTR tv857[ebp], eax
  025b0	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  025b4	8b f4		 mov	 esi, esp
  025b6	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR tv857[ebp]
  025bc	51		 push	 ecx
  025bd	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  025c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  025c9	3b f4		 cmp	 esi, esp
  025cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  025d0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  025d4	8b f4		 mov	 esi, esp
  025d6	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T192188[ebp]
  025dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  025e2	3b f4		 cmp	 esi, esp
  025e4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 730  : 			global_offset = (((BCMenuData*)(lpDIS->itemData))->global_offset);

  025e9	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  025ec	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  025ef	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  025f2	89 8d 6c fd ff
	ff		 mov	 DWORD PTR _global_offset$188205[ebp], ecx

; 731  : 
; 732  : 			if(xoffset==0&&xp_draw_3D_bitmaps&&bitmap&&bitmap->GetImageCount()>2)CanDraw3D=TRUE;

  025f8	83 bd 70 fd ff
	ff 00		 cmp	 DWORD PTR _xoffset$188204[ebp], 0
  025ff	75 2c		 jne	 SHORT $L188220
  02601	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  02608	74 23		 je	 SHORT $L188220
  0260a	83 bd 5c fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$188209[ebp], 0
  02611	74 1a		 je	 SHORT $L188220
  02613	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02619	e8 00 00 00 00	 call	 ?GetImageCount@CImageList@@QBEHXZ ; CImageList::GetImageCount
  0261e	83 f8 02	 cmp	 eax, 2
  02621	7e 0a		 jle	 SHORT $L188220
  02623	c7 85 58 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _CanDraw3D$188210[ebp], 1
$L188220:

; 733  : 
; 734  : 			if(nIconNormal<0&&xoffset<0&&global_offset>=0){

  0262d	83 bd 74 fd ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$188203[ebp], 0
  02634	0f 8d 85 00 00
	00		 jge	 $L188221
  0263a	83 bd 70 fd ff
	ff 00		 cmp	 DWORD PTR _xoffset$188204[ebp], 0
  02641	7d 7c		 jge	 SHORT $L188221
  02643	83 bd 6c fd ff
	ff 00		 cmp	 DWORD PTR _global_offset$188205[ebp], 0
  0264a	7c 73		 jl	 SHORT $L188221

; 735  : 				xoffset=global_offset;

  0264c	8b 95 6c fd ff
	ff		 mov	 edx, DWORD PTR _global_offset$188205[ebp]
  02652	89 95 70 fd ff
	ff		 mov	 DWORD PTR _xoffset$188204[ebp], edx

; 736  : 				nIconNormal=0;

  02658	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _nIconNormal$188203[ebp], 0

; 737  : 				bitmap = &m_AllImages;

  02662	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _bitmap$188209[ebp], OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A ; BCMenu::m_AllImages

; 738  : 				if(xp_draw_3D_bitmaps&&CanDraw3DImageList(global_offset)){

  0266c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  02673	74 4a		 je	 SHORT $L188221
  02675	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR _global_offset$188205[ebp]
  0267b	50		 push	 eax
  0267c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0267f	e8 00 00 00 00	 call	 ?CanDraw3DImageList@BCMenu@@IAEHH@Z ; BCMenu::CanDraw3DImageList
  02684	85 c0		 test	 eax, eax
  02686	74 37		 je	 SHORT $L188221

; 739  : 					CanDraw3D=TRUE;

  02688	c7 85 58 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _CanDraw3D$188210[ebp], 1

; 740  : 					faded_offset=global_offset+1;

  02692	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR _global_offset$188205[ebp]
  02698	83 c1 01	 add	 ecx, 1
  0269b	89 8d 68 fd ff
	ff		 mov	 DWORD PTR _faded_offset$188206[ebp], ecx

; 741  : 					shadow_offset=global_offset+2;

  026a1	8b 95 6c fd ff
	ff		 mov	 edx, DWORD PTR _global_offset$188205[ebp]
  026a7	83 c2 02	 add	 edx, 2
  026aa	89 95 64 fd ff
	ff		 mov	 DWORD PTR _shadow_offset$188207[ebp], edx

; 742  : 					disabled_offset=global_offset+3;

  026b0	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR _global_offset$188205[ebp]
  026b6	83 c0 03	 add	 eax, 3
  026b9	89 85 60 fd ff
	ff		 mov	 DWORD PTR _disabled_offset$188208[ebp], eax
$L188221:

; 743  : 				}
; 744  : 			}
; 745  : 
; 746  : 			
; 747  : 			if(state&ODS_CHECKED && nIconNormal<0){

  026bf	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR _state$188211[ebp]
  026c5	83 e1 08	 and	 ecx, 8
  026c8	74 3e		 je	 SHORT $L188223
  026ca	83 bd 74 fd ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$188203[ebp], 0
  026d1	7d 35		 jge	 SHORT $L188223

; 748  : 				if(state&ODS_SELECTED && m_selectcheck>0)checkflag=TRUE;

  026d3	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  026d9	83 e2 01	 and	 edx, 1
  026dc	74 15		 je	 SHORT $L188224
  026de	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  026e1	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  026e5	7e 0c		 jle	 SHORT $L188224
  026e7	c7 85 bc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _checkflag$188191[ebp], 1

; 749  : 				else if(m_unselectcheck>0) checkflag=TRUE;

  026f1	eb 13		 jmp	 SHORT $L188225
$L188224:
  026f3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  026f6	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  026fa	7e 0a		 jle	 SHORT $L188225
  026fc	c7 85 bc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _checkflag$188191[ebp], 1
$L188225:

; 750  : 			}
; 751  : 			else if(nIconNormal != -1){

  02706	eb 4a		 jmp	 SHORT $L188227
$L188223:
  02708	83 bd 74 fd ff
	ff ff		 cmp	 DWORD PTR _nIconNormal$188203[ebp], -1
  0270f	74 41		 je	 SHORT $L188227

; 752  : 				standardflag=TRUE;

  02711	c7 85 c8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _standardflag$188188[ebp], 1

; 753  : 				if(state&ODS_SELECTED && !(state&ODS_GRAYED))selectedflag=TRUE;

  0271b	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  02721	83 e2 01	 and	 edx, 1
  02724	74 17		 je	 SHORT $L188229
  02726	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR _state$188211[ebp]
  0272c	83 e0 02	 and	 eax, 2
  0272f	75 0c		 jne	 SHORT $L188229
  02731	c7 85 c4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _selectedflag$188189[ebp], 1

; 754  : 				else if(state&ODS_GRAYED) disableflag=TRUE;

  0273b	eb 15		 jmp	 SHORT $L188227
$L188229:
  0273d	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR _state$188211[ebp]
  02743	83 e1 02	 and	 ecx, 2
  02746	74 0a		 je	 SHORT $L188227
  02748	c7 85 c0 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _disableflag$188190[ebp], 1
$L188227:

; 755  : 			}
; 756  : 		}
; 757  : 		else{

  02752	eb 15		 jmp	 SHORT $L188232
$L188213:

; 758  : 			strText.Empty();

  02754	8b f4		 mov	 esi, esp
  02756	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  0275c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  02762	3b f4		 cmp	 esi, esp
  02764	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188232:

; 759  : 		}
; 760  : 		
; 761  : 		if(state&ODS_SELECTED){ // draw the down edges

  02769	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  0276f	83 e2 01	 and	 edx, 1
  02772	74 60		 je	 SHORT $L188233

; 762  : 			
; 763  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  02774	8d 85 8c fd ff
	ff		 lea	 eax, DWORD PTR _m_penBack$188198[ebp]
  0277a	50		 push	 eax
  0277b	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0277e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  02783	89 85 44 fd ff
	ff		 mov	 DWORD PTR _pOldPen$188234[ebp], eax

; 764  : 			
; 765  : 			pDC->FillRect (rect,&m_brSelect);

  02789	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  0278f	51		 push	 ecx
  02790	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02793	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02798	50		 push	 eax
  02799	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0279c	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 766  : 			pDC->Draw3dRect (rect,crSelect,crSelect);

  027a1	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$188193[ebp]
  027a7	52		 push	 edx
  027a8	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _crSelect$188193[ebp]
  027ae	50		 push	 eax
  027af	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  027b2	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  027b7	50		 push	 eax
  027b8	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027bb	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 767  : 			
; 768  : 			pDC->SelectObject (pOldPen);

  027c0	8b 8d 44 fd ff
	ff		 mov	 ecx, DWORD PTR _pOldPen$188234[ebp]
  027c6	51		 push	 ecx
  027c7	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027ca	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 769  : 		}
; 770  : 		else {

  027cf	e9 a4 00 00 00	 jmp	 $L188235
$L188233:

; 771  : 			rect2.SetRect(rect.left,rect.top,rect.left+barwidth,rect.bottom);

  027d4	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+12]
  027d7	52		 push	 edx
  027d8	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp]
  027db	03 85 28 ff ff
	ff		 add	 eax, DWORD PTR _barwidth$[ebp]
  027e1	50		 push	 eax
  027e2	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  027e5	51		 push	 ecx
  027e6	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  027e9	52		 push	 edx
  027ea	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  027ed	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 772  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  027f2	8d 85 8c fd ff
	ff		 lea	 eax, DWORD PTR _m_penBack$188198[ebp]
  027f8	50		 push	 eax
  027f9	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027fc	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  02801	89 85 40 fd ff
	ff		 mov	 DWORD PTR _pOldPen$188236[ebp], eax

; 773  : 			pDC->FillRect (rect,&m_brBackground);

  02807	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  0280d	51		 push	 ecx
  0280e	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02811	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02816	50		 push	 eax
  02817	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0281a	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 774  : 			pDC->FillRect (rect2,&m_newbrBackground);

  0281f	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _m_newbrBackground$[ebp]
  02825	52		 push	 edx
  02826	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02829	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0282e	50		 push	 eax
  0282f	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02832	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 775  : 			pDC->SelectObject (pOldPen);

  02837	8b 85 40 fd ff
	ff		 mov	 eax, DWORD PTR _pOldPen$188236[ebp]
  0283d	50		 push	 eax
  0283e	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02841	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 776  : 			
; 777  : 			// draw the up edges
; 778  : 			
; 779  : 			pDC->Draw3dRect (rect,m_clrBack,m_clrBack);

  02846	8b 4d a8	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  02849	51		 push	 ecx
  0284a	8b 55 a8	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  0284d	52		 push	 edx
  0284e	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02851	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02856	50		 push	 eax
  02857	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0285a	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 780  : 			pDC->Draw3dRect (rect2,m_newclrBack,m_newclrBack);

  0285f	8b 45 ac	 mov	 eax, DWORD PTR _m_newclrBack$[ebp]
  02862	50		 push	 eax
  02863	8b 4d ac	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  02866	51		 push	 ecx
  02867	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  0286a	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0286f	50		 push	 eax
  02870	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02873	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L188235:

; 781  : 		}
; 782  : 		
; 783  : 		// draw the text if there is any
; 784  : 		//We have to paint the text only if the image is nonexistant
; 785  : 		
; 786  : 		dy = (int)(0.5+(rect.Height()-m_iconY)/2.0);

  02878	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  0287b	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  02880	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  02886	89 85 94 fb ff
	ff		 mov	 DWORD PTR tv1074[ebp], eax
  0288c	db 85 94 fb ff
	ff		 fild	 DWORD PTR tv1074[ebp]
  02892	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4000000000000000
  02898	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0289e	e8 00 00 00 00	 call	 __ftol2
  028a3	89 85 78 fd ff
	ff		 mov	 DWORD PTR _dy$188202[ebp], eax

; 787  : 		dy = dy<0 ? 0 : dy;

  028a9	33 d2		 xor	 edx, edx
  028ab	83 bd 78 fd ff
	ff 00		 cmp	 DWORD PTR _dy$188202[ebp], 0
  028b2	0f 9c c2	 setl	 dl
  028b5	4a		 dec	 edx
  028b6	23 95 78 fd ff
	ff		 and	 edx, DWORD PTR _dy$188202[ebp]
  028bc	89 95 78 fd ff
	ff		 mov	 DWORD PTR _dy$188202[ebp], edx

; 788  : 		dx = (int)(0.5+(barwidth-m_iconX)/2.0);

  028c2	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _barwidth$[ebp]
  028c8	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  028ce	89 85 90 fb ff
	ff		 mov	 DWORD PTR tv1082[ebp], eax
  028d4	db 85 90 fb ff
	ff		 fild	 DWORD PTR tv1082[ebp]
  028da	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4000000000000000
  028e0	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  028e6	e8 00 00 00 00	 call	 __ftol2
  028eb	89 85 7c fd ff
	ff		 mov	 DWORD PTR _dx$188201[ebp], eax

; 789  : 		dx = dx<0 ? 0 : dx;

  028f1	33 c9		 xor	 ecx, ecx
  028f3	83 bd 7c fd ff
	ff 00		 cmp	 DWORD PTR _dx$188201[ebp], 0
  028fa	0f 9c c1	 setl	 cl
  028fd	49		 dec	 ecx
  028fe	23 8d 7c fd ff
	ff		 and	 ecx, DWORD PTR _dx$188201[ebp]
  02904	89 8d 7c fd ff
	ff		 mov	 DWORD PTR _dx$188201[ebp], ecx

; 790  : 		rect2.SetRect(rect.left+1,rect.top+1,rect.left+barwidth-2,rect.bottom-1);

  0290a	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+12]
  0290d	83 ea 01	 sub	 edx, 1
  02910	52		 push	 edx
  02911	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _barwidth$[ebp]
  02917	8b 4d d0	 mov	 ecx, DWORD PTR _rect$[ebp]
  0291a	8d 54 01 fe	 lea	 edx, DWORD PTR [ecx+eax-2]
  0291e	52		 push	 edx
  0291f	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  02922	83 c0 01	 add	 eax, 1
  02925	50		 push	 eax
  02926	8b 4d d0	 mov	 ecx, DWORD PTR _rect$[ebp]
  02929	83 c1 01	 add	 ecx, 1
  0292c	51		 push	 ecx
  0292d	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02930	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 791  : 		
; 792  : 		if(checkflag||standardflag||selectedflag||disableflag){

  02935	83 bd bc fd ff
	ff 00		 cmp	 DWORD PTR _checkflag$188191[ebp], 0
  0293c	75 1f		 jne	 SHORT $L188240
  0293e	83 bd c8 fd ff
	ff 00		 cmp	 DWORD PTR _standardflag$188188[ebp], 0
  02945	75 16		 jne	 SHORT $L188240
  02947	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _selectedflag$188189[ebp], 0
  0294e	75 0d		 jne	 SHORT $L188240
  02950	83 bd c0 fd ff
	ff 00		 cmp	 DWORD PTR _disableflag$188190[ebp], 0
  02957	0f 84 93 06 00
	00		 je	 $L188239
$L188240:

; 793  : 			if(checkflag && checkmaps){

  0295d	83 bd bc fd ff
	ff 00		 cmp	 DWORD PTR _checkflag$188191[ebp], 0
  02964	0f 84 c8 00 00
	00		 je	 $L188241
  0296a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0296d	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  02971	0f 84 bb 00 00
	00		 je	 $L188241

; 794  : 				pDC->FillRect (rect2,&m_newbrBackground);

  02977	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _m_newbrBackground$[ebp]
  0297d	50		 push	 eax
  0297e	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02981	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02986	50		 push	 eax
  02987	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0298a	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 795  : 				CPoint ptImage(rect.left+dx,rect.top+dy);		

  0298f	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02992	03 8d 78 fd ff
	ff		 add	 ecx, DWORD PTR _dy$188202[ebp]
  02998	51		 push	 ecx
  02999	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  0299c	03 95 7c fd ff
	ff		 add	 edx, DWORD PTR _dx$188201[ebp]
  029a2	52		 push	 edx
  029a3	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188242[ebp]
  029a9	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 796  : 				if(state&ODS_SELECTED)checkmaps->Draw(pDC,1,ptImage,ILD_TRANSPARENT);

  029ae	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR _state$188211[ebp]
  029b4	83 e0 01	 and	 eax, 1
  029b7	74 3b		 je	 SHORT $L188243
  029b9	8b 8d 34 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188242[ebp]
  029bf	89 8d f4 fb ff
	ff		 mov	 DWORD PTR $T192189[ebp], ecx
  029c5	8b 95 38 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$188242[ebp+4]
  029cb	89 95 f8 fb ff
	ff		 mov	 DWORD PTR $T192189[ebp+4], edx
  029d1	6a 01		 push	 1
  029d3	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR $T192189[ebp+4]
  029d9	50		 push	 eax
  029da	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR $T192189[ebp]
  029e0	51		 push	 ecx
  029e1	6a 01		 push	 1
  029e3	8b 55 e8	 mov	 edx, DWORD PTR _pDC$[ebp]
  029e6	52		 push	 edx
  029e7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  029ea	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  029ed	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 797  : 				else checkmaps->Draw(pDC,0,ptImage,ILD_TRANSPARENT);

  029f2	eb 39		 jmp	 SHORT $L188245
$L188243:
  029f4	8b 8d 34 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188242[ebp]
  029fa	89 8d ec fb ff
	ff		 mov	 DWORD PTR $T192190[ebp], ecx
  02a00	8b 95 38 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$188242[ebp+4]
  02a06	89 95 f0 fb ff
	ff		 mov	 DWORD PTR $T192190[ebp+4], edx
  02a0c	6a 01		 push	 1
  02a0e	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR $T192190[ebp+4]
  02a14	50		 push	 eax
  02a15	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR $T192190[ebp]
  02a1b	51		 push	 ecx
  02a1c	6a 00		 push	 0
  02a1e	8b 55 e8	 mov	 edx, DWORD PTR _pDC$[ebp]
  02a21	52		 push	 edx
  02a22	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02a25	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  02a28	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188245:

; 798  : 			}
; 799  : 			else if(disableflag){

  02a2d	e9 be 05 00 00	 jmp	 $L188239
$L188241:
  02a32	83 bd c0 fd ff
	ff 00		 cmp	 DWORD PTR _disableflag$188190[ebp], 0
  02a39	0f 84 a2 01 00
	00		 je	 $L188248

; 800  : 				if(!selectedflag){

  02a3f	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _selectedflag$188189[ebp], 0
  02a46	0f 85 90 01 00
	00		 jne	 $L188249

; 801  : 					if(CanDraw3D){

  02a4c	83 bd 58 fd ff
	ff 00		 cmp	 DWORD PTR _CanDraw3D$188210[ebp], 0
  02a53	74 62		 je	 SHORT $L188250

; 802  : 						CPoint ptImage(rect.left+dx,rect.top+dy);

  02a55	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02a58	03 8d 78 fd ff
	ff		 add	 ecx, DWORD PTR _dy$188202[ebp]
  02a5e	51		 push	 ecx
  02a5f	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  02a62	03 95 7c fd ff
	ff		 add	 edx, DWORD PTR _dx$188201[ebp]
  02a68	52		 push	 edx
  02a69	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188251[ebp]
  02a6f	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 803  : 						bitmap->Draw(pDC,disabled_offset,ptImage,ILD_TRANSPARENT);

  02a74	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$188251[ebp]
  02a7a	89 85 e4 fb ff
	ff		 mov	 DWORD PTR $T192191[ebp], eax
  02a80	8b 8d 28 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188251[ebp+4]
  02a86	89 8d e8 fb ff
	ff		 mov	 DWORD PTR $T192191[ebp+4], ecx
  02a8c	6a 01		 push	 1
  02a8e	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR $T192191[ebp+4]
  02a94	52		 push	 edx
  02a95	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR $T192191[ebp]
  02a9b	50		 push	 eax
  02a9c	8b 8d 60 fd ff
	ff		 mov	 ecx, DWORD PTR _disabled_offset$188208[ebp]
  02aa2	51		 push	 ecx
  02aa3	8b 55 e8	 mov	 edx, DWORD PTR _pDC$[ebp]
  02aa6	52		 push	 edx
  02aa7	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02aad	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 804  : 					}
; 805  : 					else{

  02ab2	e9 25 01 00 00	 jmp	 $L188249
$L188250:

; 806  : 						CBitmap bitmapstandard;

  02ab7	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188254[ebp]
  02abd	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  02ac2	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 807  : 						GetBitmapFromImageList(pDC,bitmap,xoffset,bitmapstandard);

  02ac6	8d 85 14 fd ff
	ff		 lea	 eax, DWORD PTR _bitmapstandard$188254[ebp]
  02acc	50		 push	 eax
  02acd	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR _xoffset$188204[ebp]
  02ad3	51		 push	 ecx
  02ad4	8b 95 5c fd ff
	ff		 mov	 edx, DWORD PTR _bitmap$188209[ebp]
  02ada	52		 push	 edx
  02adb	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  02ade	50		 push	 eax
  02adf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02ae2	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 808  : 						COLORREF transparentcol=m_newclrBack;

  02ae7	8b 4d ac	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  02aea	89 8d 0c fd ff
	ff		 mov	 DWORD PTR _transparentcol$188255[ebp], ecx

; 809  : 						if(state&ODS_SELECTED)transparentcol=crSelectFill;

  02af0	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  02af6	83 e2 01	 and	 edx, 1
  02af9	74 0c		 je	 SHORT $L188256
  02afb	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _crSelectFill$188194[ebp]
  02b01	89 85 0c fd ff
	ff		 mov	 DWORD PTR _transparentcol$188255[ebp], eax
$L188256:

; 810  : 						if(disable_old_style)

  02b07	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02b0a	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  02b0e	74 49		 je	 SHORT $L188257

; 811  : 							DitherBlt(lpDIS->hDC,rect.left+dx,rect.top+dy,m_iconX,m_iconY,
; 812  : 							(HBITMAP)(bitmapstandard),0,0,transparentcol);

  02b10	8b 95 0c fd ff
	ff		 mov	 edx, DWORD PTR _transparentcol$188255[ebp]
  02b16	52		 push	 edx
  02b17	6a 00		 push	 0
  02b19	6a 00		 push	 0
  02b1b	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188254[ebp]
  02b21	e8 00 00 00 00	 call	 ??BCBitmap@@QBEPAUHBITMAP__@@XZ ; CBitmap::operator HBITMAP__ *
  02b26	50		 push	 eax
  02b27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  02b2c	50		 push	 eax
  02b2d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  02b33	51		 push	 ecx
  02b34	8b 55 d4	 mov	 edx, DWORD PTR _rect$[ebp+4]
  02b37	03 95 78 fd ff
	ff		 add	 edx, DWORD PTR _dy$188202[ebp]
  02b3d	52		 push	 edx
  02b3e	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp]
  02b41	03 85 7c fd ff
	ff		 add	 eax, DWORD PTR _dx$188201[ebp]
  02b47	50		 push	 eax
  02b48	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  02b4b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  02b4e	52		 push	 edx
  02b4f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02b52	e8 00 00 00 00	 call	 ?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ; BCMenu::DitherBlt

; 813  : 						else

  02b57	eb 3f		 jmp	 SHORT $L188259
$L188257:

; 814  : 							DitherBlt2(pDC,rect.left+dx,rect.top+dy,m_iconX,m_iconY,
; 815  : 							bitmapstandard,0,0,transparentcol);

  02b59	8b 85 0c fd ff
	ff		 mov	 eax, DWORD PTR _transparentcol$188255[ebp]
  02b5f	50		 push	 eax
  02b60	6a 00		 push	 0
  02b62	6a 00		 push	 0
  02b64	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188254[ebp]
  02b6a	51		 push	 ecx
  02b6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  02b71	52		 push	 edx
  02b72	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  02b77	50		 push	 eax
  02b78	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02b7b	03 8d 78 fd ff
	ff		 add	 ecx, DWORD PTR _dy$188202[ebp]
  02b81	51		 push	 ecx
  02b82	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  02b85	03 95 7c fd ff
	ff		 add	 edx, DWORD PTR _dx$188201[ebp]
  02b8b	52		 push	 edx
  02b8c	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  02b8f	50		 push	 eax
  02b90	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02b93	e8 00 00 00 00	 call	 ?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ; BCMenu::DitherBlt2
$L188259:

; 816  : 						if(state&ODS_SELECTED)pDC->Draw3dRect (rect,crSelect,crSelect);

  02b98	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR _state$188211[ebp]
  02b9e	83 e1 01	 and	 ecx, 1
  02ba1	74 1f		 je	 SHORT $L188260
  02ba3	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$188193[ebp]
  02ba9	52		 push	 edx
  02baa	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _crSelect$188193[ebp]
  02bb0	50		 push	 eax
  02bb1	8d 4d d0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02bb4	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02bb9	50		 push	 eax
  02bba	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02bbd	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L188260:

; 817  : 						bitmapstandard.DeleteObject();

  02bc2	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188254[ebp]
  02bc8	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 818  : 					}

  02bcd	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  02bd1	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188254[ebp]
  02bd7	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L188249:

; 819  : 				}
; 820  : 			}
; 821  : 			else if(selectedflag){

  02bdc	e9 0f 04 00 00	 jmp	 $L188239
$L188248:
  02be1	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _selectedflag$188189[ebp], 0
  02be8	0f 84 15 02 00
	00		 je	 $L188262

; 822  : 				CPoint ptImage(rect.left+dx,rect.top+dy);

  02bee	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02bf1	03 8d 78 fd ff
	ff		 add	 ecx, DWORD PTR _dy$188202[ebp]
  02bf7	51		 push	 ecx
  02bf8	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  02bfb	03 95 7c fd ff
	ff		 add	 edx, DWORD PTR _dx$188201[ebp]
  02c01	52		 push	 edx
  02c02	8d 8d 00 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188263[ebp]
  02c08	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 823  : 				if(state&ODS_CHECKED){

  02c0d	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR _state$188211[ebp]
  02c13	83 e0 08	 and	 eax, 8
  02c16	0f 84 a7 00 00
	00		 je	 $L188264

; 824  : 					CBrush brushin;

  02c1c	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188265[ebp]
  02c22	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  02c27	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9

; 825  : 					brushin.CreateSolidBrush(LightenColor(crSelect,0.55));

  02c2b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe199999999999a
  02c31	83 ec 08	 sub	 esp, 8
  02c34	dd 1c 24	 fstp	 QWORD PTR [esp]
  02c37	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$188193[ebp]
  02c3d	51		 push	 ecx
  02c3e	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  02c43	83 c4 0c	 add	 esp, 12			; 0000000cH
  02c46	50		 push	 eax
  02c47	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188265[ebp]
  02c4d	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 826  : 					pDC->FillRect(rect2,&brushin);

  02c52	8d 95 f0 fc ff
	ff		 lea	 edx, DWORD PTR _brushin$188265[ebp]
  02c58	52		 push	 edx
  02c59	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02c5c	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02c61	50		 push	 eax
  02c62	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02c65	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 827  : 					brushin.DeleteObject();

  02c6a	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188265[ebp]
  02c70	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 828  : 					pDC->Draw3dRect(rect2,crSelect,crSelect);

  02c75	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _crSelect$188193[ebp]
  02c7b	50		 push	 eax
  02c7c	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$188193[ebp]
  02c82	51		 push	 ecx
  02c83	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02c86	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02c8b	50		 push	 eax
  02c8c	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02c8f	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 829  : 					ptImage.x-=1;ptImage.y-=1;

  02c94	8b 95 00 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$188263[ebp]
  02c9a	83 ea 01	 sub	 edx, 1
  02c9d	89 95 00 fd ff
	ff		 mov	 DWORD PTR _ptImage$188263[ebp], edx
  02ca3	8b 85 04 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$188263[ebp+4]
  02ca9	83 e8 01	 sub	 eax, 1
  02cac	89 85 04 fd ff
	ff		 mov	 DWORD PTR _ptImage$188263[ebp+4], eax

; 830  : 				}

  02cb2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  02cb6	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188265[ebp]
  02cbc	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush

; 831  : 				else pDC->FillRect (rect2,&m_brSelect);

  02cc1	eb 18		 jmp	 SHORT $L188266
$L188264:
  02cc3	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  02cc9	51		 push	 ecx
  02cca	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02ccd	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02cd2	50		 push	 eax
  02cd3	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02cd6	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect
$L188266:

; 832  : 				if(bitmap){

  02cdb	83 bd 5c fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$188209[ebp], 0
  02ce2	0f 84 16 01 00
	00		 je	 $L188267

; 833  : 					if(CanDraw3D&&!(state&ODS_CHECKED)){

  02ce8	83 bd 58 fd ff
	ff 00		 cmp	 DWORD PTR _CanDraw3D$188210[ebp], 0
  02cef	0f 84 cb 00 00
	00		 je	 $L188268
  02cf5	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  02cfb	83 e2 08	 and	 edx, 8
  02cfe	0f 85 bc 00 00
	00		 jne	 $L188268

; 834  : 						CPoint ptImage1(ptImage.x+1,ptImage.y+1);

  02d04	8b 85 04 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$188263[ebp+4]
  02d0a	83 c0 01	 add	 eax, 1
  02d0d	50		 push	 eax
  02d0e	8b 8d 00 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188263[ebp]
  02d14	83 c1 01	 add	 ecx, 1
  02d17	51		 push	 ecx
  02d18	8d 8d e0 fc ff
	ff		 lea	 ecx, DWORD PTR _ptImage1$188269[ebp]
  02d1e	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 835  : 						CPoint ptImage2(ptImage.x-1,ptImage.y-1);

  02d23	8b 95 04 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$188263[ebp+4]
  02d29	83 ea 01	 sub	 edx, 1
  02d2c	52		 push	 edx
  02d2d	8b 85 00 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$188263[ebp]
  02d33	83 e8 01	 sub	 eax, 1
  02d36	50		 push	 eax
  02d37	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR _ptImage2$188270[ebp]
  02d3d	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 836  : 						bitmap->Draw(pDC,shadow_offset,ptImage1,ILD_TRANSPARENT);

  02d42	8b 8d e0 fc ff
	ff		 mov	 ecx, DWORD PTR _ptImage1$188269[ebp]
  02d48	89 8d dc fb ff
	ff		 mov	 DWORD PTR $T192192[ebp], ecx
  02d4e	8b 95 e4 fc ff
	ff		 mov	 edx, DWORD PTR _ptImage1$188269[ebp+4]
  02d54	89 95 e0 fb ff
	ff		 mov	 DWORD PTR $T192192[ebp+4], edx
  02d5a	6a 01		 push	 1
  02d5c	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR $T192192[ebp+4]
  02d62	50		 push	 eax
  02d63	8b 8d dc fb ff
	ff		 mov	 ecx, DWORD PTR $T192192[ebp]
  02d69	51		 push	 ecx
  02d6a	8b 95 64 fd ff
	ff		 mov	 edx, DWORD PTR _shadow_offset$188207[ebp]
  02d70	52		 push	 edx
  02d71	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  02d74	50		 push	 eax
  02d75	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02d7b	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 837  : 						bitmap->Draw(pDC,xoffset,ptImage2,ILD_TRANSPARENT);

  02d80	8b 8d d0 fc ff
	ff		 mov	 ecx, DWORD PTR _ptImage2$188270[ebp]
  02d86	89 8d d4 fb ff
	ff		 mov	 DWORD PTR $T192193[ebp], ecx
  02d8c	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _ptImage2$188270[ebp+4]
  02d92	89 95 d8 fb ff
	ff		 mov	 DWORD PTR $T192193[ebp+4], edx
  02d98	6a 01		 push	 1
  02d9a	8b 85 d8 fb ff
	ff		 mov	 eax, DWORD PTR $T192193[ebp+4]
  02da0	50		 push	 eax
  02da1	8b 8d d4 fb ff
	ff		 mov	 ecx, DWORD PTR $T192193[ebp]
  02da7	51		 push	 ecx
  02da8	8b 95 70 fd ff
	ff		 mov	 edx, DWORD PTR _xoffset$188204[ebp]
  02dae	52		 push	 edx
  02daf	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  02db2	50		 push	 eax
  02db3	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02db9	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 838  : 					}
; 839  : 					else bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  02dbe	eb 3e		 jmp	 SHORT $L188267
$L188268:
  02dc0	8b 8d 00 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188263[ebp]
  02dc6	89 8d cc fb ff
	ff		 mov	 DWORD PTR $T192194[ebp], ecx
  02dcc	8b 95 04 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$188263[ebp+4]
  02dd2	89 95 d0 fb ff
	ff		 mov	 DWORD PTR $T192194[ebp+4], edx
  02dd8	6a 01		 push	 1
  02dda	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR $T192194[ebp+4]
  02de0	50		 push	 eax
  02de1	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR $T192194[ebp]
  02de7	51		 push	 ecx
  02de8	8b 95 70 fd ff
	ff		 mov	 edx, DWORD PTR _xoffset$188204[ebp]
  02dee	52		 push	 edx
  02def	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  02df2	50		 push	 eax
  02df3	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02df9	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188267:

; 840  : 				}
; 841  : 			}
; 842  : 			else{

  02dfe	e9 ed 01 00 00	 jmp	 $L188239
$L188262:

; 843  : 				if(state&ODS_CHECKED){

  02e03	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR _state$188211[ebp]
  02e09	83 e1 08	 and	 ecx, 8
  02e0c	0f 84 fa 00 00
	00		 je	 $L188276

; 844  : 					CBrush brushin;

  02e12	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188277[ebp]
  02e18	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  02e1d	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 845  : 					brushin.CreateSolidBrush(LightenColor(crSelect,0.85));

  02e21	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feb333333333333
  02e27	83 ec 08	 sub	 esp, 8
  02e2a	dd 1c 24	 fstp	 QWORD PTR [esp]
  02e2d	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$188193[ebp]
  02e33	52		 push	 edx
  02e34	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  02e39	83 c4 0c	 add	 esp, 12			; 0000000cH
  02e3c	50		 push	 eax
  02e3d	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188277[ebp]
  02e43	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 846  : 					pDC->FillRect(rect2,&brushin);

  02e48	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR _brushin$188277[ebp]
  02e4e	50		 push	 eax
  02e4f	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02e52	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02e57	50		 push	 eax
  02e58	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02e5b	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 847  : 					brushin.DeleteObject();

  02e60	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188277[ebp]
  02e66	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 848  : 					pDC->Draw3dRect(rect2,crSelect,crSelect);

  02e6b	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$188193[ebp]
  02e71	51		 push	 ecx
  02e72	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$188193[ebp]
  02e78	52		 push	 edx
  02e79	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02e7c	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02e81	50		 push	 eax
  02e82	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02e85	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 849  : 					CPoint ptImage(rect.left+dx-1,rect.top+dy-1);

  02e8a	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _dy$188202[ebp]
  02e90	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02e93	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  02e97	52		 push	 edx
  02e98	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _dx$188201[ebp]
  02e9e	8b 4d d0	 mov	 ecx, DWORD PTR _rect$[ebp]
  02ea1	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  02ea5	52		 push	 edx
  02ea6	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188278[ebp]
  02eac	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 850  : 					if(bitmap)bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  02eb1	83 bd 5c fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$188209[ebp], 0
  02eb8	74 3e		 je	 SHORT $L188279
  02eba	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _ptImage$188278[ebp]
  02ec0	89 85 c4 fb ff
	ff		 mov	 DWORD PTR $T192195[ebp], eax
  02ec6	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _ptImage$188278[ebp+4]
  02ecc	89 8d c8 fb ff
	ff		 mov	 DWORD PTR $T192195[ebp+4], ecx
  02ed2	6a 01		 push	 1
  02ed4	8b 95 c8 fb ff
	ff		 mov	 edx, DWORD PTR $T192195[ebp+4]
  02eda	52		 push	 edx
  02edb	8b 85 c4 fb ff
	ff		 mov	 eax, DWORD PTR $T192195[ebp]
  02ee1	50		 push	 eax
  02ee2	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR _xoffset$188204[ebp]
  02ee8	51		 push	 ecx
  02ee9	8b 55 e8	 mov	 edx, DWORD PTR _pDC$[ebp]
  02eec	52		 push	 edx
  02eed	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02ef3	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188279:

; 851  : 				}

  02ef8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  02efc	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188277[ebp]
  02f02	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush

; 852  : 				else{

  02f07	e9 e4 00 00 00	 jmp	 $L188239
$L188276:

; 853  : 					pDC->FillRect (rect2,&m_newbrBackground);

  02f0c	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _m_newbrBackground$[ebp]
  02f12	50		 push	 eax
  02f13	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02f16	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02f1b	50		 push	 eax
  02f1c	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02f1f	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 854  : 					pDC->Draw3dRect (rect2,m_newclrBack,m_newclrBack);

  02f24	8b 4d ac	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  02f27	51		 push	 ecx
  02f28	8b 55 ac	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  02f2b	52		 push	 edx
  02f2c	8d 4d b8	 lea	 ecx, DWORD PTR _rect2$[ebp]
  02f2f	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02f34	50		 push	 eax
  02f35	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02f38	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 855  : 					CPoint ptImage(rect.left+dx,rect.top+dy);

  02f3d	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  02f40	03 85 78 fd ff
	ff		 add	 eax, DWORD PTR _dy$188202[ebp]
  02f46	50		 push	 eax
  02f47	8b 4d d0	 mov	 ecx, DWORD PTR _rect$[ebp]
  02f4a	03 8d 7c fd ff
	ff		 add	 ecx, DWORD PTR _dx$188201[ebp]
  02f50	51		 push	 ecx
  02f51	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _ptImage$188282[ebp]
  02f57	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 856  : 					if(bitmap){

  02f5c	83 bd 5c fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$188209[ebp], 0
  02f63	0f 84 87 00 00
	00		 je	 $L188239

; 857  : 						if(CanDraw3D)

  02f69	83 bd 58 fd ff
	ff 00		 cmp	 DWORD PTR _CanDraw3D$188210[ebp], 0
  02f70	74 40		 je	 SHORT $L188284

; 858  : 							bitmap->Draw(pDC,faded_offset,ptImage,ILD_TRANSPARENT);

  02f72	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _ptImage$188282[ebp]
  02f78	89 95 bc fb ff
	ff		 mov	 DWORD PTR $T192196[ebp], edx
  02f7e	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _ptImage$188282[ebp+4]
  02f84	89 85 c0 fb ff
	ff		 mov	 DWORD PTR $T192196[ebp+4], eax
  02f8a	6a 01		 push	 1
  02f8c	8b 8d c0 fb ff
	ff		 mov	 ecx, DWORD PTR $T192196[ebp+4]
  02f92	51		 push	 ecx
  02f93	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR $T192196[ebp]
  02f99	52		 push	 edx
  02f9a	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _faded_offset$188206[ebp]
  02fa0	50		 push	 eax
  02fa1	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02fa4	51		 push	 ecx
  02fa5	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02fab	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 859  : 						else

  02fb0	eb 3e		 jmp	 SHORT $L188239
$L188284:

; 860  : 							bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  02fb2	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _ptImage$188282[ebp]
  02fb8	89 95 b4 fb ff
	ff		 mov	 DWORD PTR $T192197[ebp], edx
  02fbe	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _ptImage$188282[ebp+4]
  02fc4	89 85 b8 fb ff
	ff		 mov	 DWORD PTR $T192197[ebp+4], eax
  02fca	6a 01		 push	 1
  02fcc	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR $T192197[ebp+4]
  02fd2	51		 push	 ecx
  02fd3	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR $T192197[ebp]
  02fd9	52		 push	 edx
  02fda	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR _xoffset$188204[ebp]
  02fe0	50		 push	 eax
  02fe1	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02fe4	51		 push	 ecx
  02fe5	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$188209[ebp]
  02feb	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L188239:

; 861  : 					}
; 862  : 				}
; 863  : 			}
; 864  : 		}
; 865  : 		if(nIconNormal<0 && state&ODS_CHECKED && !checkflag){

  02ff0	83 bd 74 fd ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$188203[ebp], 0
  02ff7	0f 8d b8 00 00
	00		 jge	 $L188288
  02ffd	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  03003	83 e2 08	 and	 edx, 8
  03006	0f 84 a9 00 00
	00		 je	 $L188288
  0300c	83 bd bc fd ff
	ff 00		 cmp	 DWORD PTR _checkflag$188191[ebp], 0
  03013	0f 85 9c 00 00
	00		 jne	 $L188288

; 866  : 			CMenuItemInfo info;

  03019	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR _info$188289[ebp]
  0301f	e8 00 00 00 00	 call	 ??0CMenuItemInfo@@QAE@XZ ; CMenuItemInfo::CMenuItemInfo

; 867  : 			info.fMask = MIIM_CHECKMARKS;

  03024	c7 85 6c fc ff
	ff 08 00 00 00	 mov	 DWORD PTR _info$188289[ebp+4], 8

; 868  : 			::GetMenuItemInfo((HMENU)lpDIS->hwndItem,lpDIS->itemID,
; 869  : 				MF_BYCOMMAND, &info);

  0302e	8b f4		 mov	 esi, esp
  03030	8d 85 68 fc ff
	ff		 lea	 eax, DWORD PTR _info$188289[ebp]
  03036	50		 push	 eax
  03037	6a 00		 push	 0
  03039	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  0303c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0303f	52		 push	 edx
  03040	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  03043	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03046	51		 push	 ecx
  03047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuItemInfoA@16
  0304d	3b f4		 cmp	 esi, esp
  0304f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 870  : 			if(state&ODS_CHECKED || info.hbmpUnchecked) {

  03054	8b 95 54 fd ff
	ff		 mov	 edx, DWORD PTR _state$188211[ebp]
  0305a	83 e2 08	 and	 edx, 8
  0305d	75 09		 jne	 SHORT $L188292
  0305f	83 bd 84 fc ff
	ff 00		 cmp	 DWORD PTR _info$188289[ebp+28], 0
  03066	74 4d		 je	 SHORT $L188288
$L188292:

; 871  : 				DrawXPCheckmark(pDC, rect2,state&ODS_CHECKED ? info.hbmpChecked :
; 872  : 				info.hbmpUnchecked,crSelect,state&ODS_SELECTED);

  03068	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR _state$188211[ebp]
  0306e	83 e0 08	 and	 eax, 8
  03071	74 0e		 je	 SHORT $L192198
  03073	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR _info$188289[ebp+24]
  03079	89 8d 8c fb ff
	ff		 mov	 DWORD PTR tv682[ebp], ecx
  0307f	eb 0c		 jmp	 SHORT $L192199
$L192198:
  03081	8b 95 84 fc ff
	ff		 mov	 edx, DWORD PTR _info$188289[ebp+28]
  03087	89 95 8c fb ff
	ff		 mov	 DWORD PTR tv682[ebp], edx
$L192199:
  0308d	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR _state$188211[ebp]
  03093	83 e0 01	 and	 eax, 1
  03096	50		 push	 eax
  03097	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR _crSelect$188193[ebp]
  0309d	51		 push	 ecx
  0309e	8b 95 8c fb ff
	ff		 mov	 edx, DWORD PTR tv682[ebp]
  030a4	52		 push	 edx
  030a5	8d 45 b8	 lea	 eax, DWORD PTR _rect2$[ebp]
  030a8	50		 push	 eax
  030a9	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  030ac	51		 push	 ecx
  030ad	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  030b0	e8 00 00 00 00	 call	 ?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z ; BCMenu::DrawXPCheckmark
$L188288:

; 873  : 			}
; 874  : 		}
; 875  : 		
; 876  : 		//This is needed always so that we can have the space for check marks
; 877  : 		
; 878  : 		x0=rect.left;y0=rect.top;

  030b5	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  030b8	89 95 84 fd ff
	ff		 mov	 DWORD PTR _x0$188199[ebp], edx
  030be	8b 45 d4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  030c1	89 85 80 fd ff
	ff		 mov	 DWORD PTR _y0$188200[ebp], eax

; 879  : 		rect.left = rect.left + barwidth + 8; 

  030c7	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _barwidth$[ebp]
  030cd	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  030d0	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  030d4	89 45 d0	 mov	 DWORD PTR _rect$[ebp], eax

; 880  : 		
; 881  : 		if(!strText.IsEmpty()){

  030d7	8b f4		 mov	 esi, esp
  030d9	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  030df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  030e5	3b f4		 cmp	 esi, esp
  030e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  030ec	0f b6 c8	 movzx	 ecx, al
  030ef	85 c9		 test	 ecx, ecx
  030f1	0f 85 ee 03 00
	00		 jne	 $L188293

; 882  : 			
; 883  : 			CRect rectt(rect.left,rect.top,rect.right,rect.bottom);

  030f7	8b 55 dc	 mov	 edx, DWORD PTR _rect$[ebp+12]
  030fa	52		 push	 edx
  030fb	8b 45 d8	 mov	 eax, DWORD PTR _rect$[ebp+8]
  030fe	50		 push	 eax
  030ff	8b 4d d4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  03102	51		 push	 ecx
  03103	8b 55 d0	 mov	 edx, DWORD PTR _rect$[ebp]
  03106	52		 push	 edx
  03107	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$188294[ebp]
  0310d	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 884  : 			
; 885  : 			//   Find tabs
; 886  : 			
; 887  : 			CString leftStr,rightStr;

  03112	8b f4		 mov	 esi, esp
  03114	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  0311a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  03120	3b f4		 cmp	 esi, esp
  03122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03127	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0312b	8b f4		 mov	 esi, esp
  0312d	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188296[ebp]
  03133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  03139	3b f4		 cmp	 esi, esp
  0313b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03140	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 888  : 			leftStr.Empty();rightStr.Empty();

  03144	8b f4		 mov	 esi, esp
  03146	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  0314c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  03152	3b f4		 cmp	 esi, esp
  03154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03159	8b f4		 mov	 esi, esp
  0315b	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188296[ebp]
  03161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  03167	3b f4		 cmp	 esi, esp
  03169	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 889  : 			int tablocr=strText.ReverseFind(_T('\t'));

  0316e	8b f4		 mov	 esi, esp
  03170	6a 09		 push	 9
  03172	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  03178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReverseFind@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHD@Z
  0317e	3b f4		 cmp	 esi, esp
  03180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03185	89 85 30 fc ff
	ff		 mov	 DWORD PTR _tablocr$188297[ebp], eax

; 890  : 			if(tablocr!=-1){

  0318b	83 bd 30 fc ff
	ff ff		 cmp	 DWORD PTR _tablocr$188297[ebp], -1
  03192	0f 84 06 01 00
	00		 je	 $L188298

; 891  : 				rightStr=strText.Mid(tablocr+1);

  03198	8b 85 30 fc ff
	ff		 mov	 eax, DWORD PTR _tablocr$188297[ebp]
  0319e	83 c0 01	 add	 eax, 1
  031a1	8b f4		 mov	 esi, esp
  031a3	50		 push	 eax
  031a4	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T192200[ebp]
  031aa	51		 push	 ecx
  031ab	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  031b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  031b7	3b f4		 cmp	 esi, esp
  031b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  031be	89 85 88 fb ff
	ff		 mov	 DWORD PTR tv487[ebp], eax
  031c4	8b 95 88 fb ff
	ff		 mov	 edx, DWORD PTR tv487[ebp]
  031ca	89 95 84 fb ff
	ff		 mov	 DWORD PTR tv864[ebp], edx
  031d0	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  031d4	8b f4		 mov	 esi, esp
  031d6	8b 85 84 fb ff
	ff		 mov	 eax, DWORD PTR tv864[ebp]
  031dc	50		 push	 eax
  031dd	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188296[ebp]
  031e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  031e9	3b f4		 cmp	 esi, esp
  031eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  031f0	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  031f4	8b f4		 mov	 esi, esp
  031f6	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T192200[ebp]
  031fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  03202	3b f4		 cmp	 esi, esp
  03204	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 892  : 				leftStr=strText.Left(strText.Find(_T('\t')));

  03209	8b f4		 mov	 esi, esp
  0320b	6a 00		 push	 0
  0320d	6a 09		 push	 9
  0320f	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  03215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  0321b	3b f4		 cmp	 esi, esp
  0321d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03222	8b f4		 mov	 esi, esp
  03224	50		 push	 eax
  03225	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T192201[ebp]
  0322b	51		 push	 ecx
  0322c	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  03232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  03238	3b f4		 cmp	 esi, esp
  0323a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0323f	89 85 80 fb ff
	ff		 mov	 DWORD PTR tv869[ebp], eax
  03245	8b 95 80 fb ff
	ff		 mov	 edx, DWORD PTR tv869[ebp]
  0324b	89 95 7c fb ff
	ff		 mov	 DWORD PTR tv866[ebp], edx
  03251	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  03255	8b f4		 mov	 esi, esp
  03257	8b 85 7c fb ff
	ff		 mov	 eax, DWORD PTR tv866[ebp]
  0325d	50		 push	 eax
  0325e	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  03264	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0326a	3b f4		 cmp	 esi, esp
  0326c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03271	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  03275	8b f4		 mov	 esi, esp
  03277	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T192201[ebp]
  0327d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  03283	3b f4		 cmp	 esi, esp
  03285	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 893  : 				rectt.right-=m_iconX;

  0328a	8b 8d 58 fc ff
	ff		 mov	 ecx, DWORD PTR _rectt$188294[ebp+8]
  03290	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03296	89 8d 58 fc ff
	ff		 mov	 DWORD PTR _rectt$188294[ebp+8], ecx

; 894  : 			}
; 895  : 			else leftStr=strText;

  0329c	eb 1c		 jmp	 SHORT $L188301
$L188298:
  0329e	8b f4		 mov	 esi, esp
  032a0	8d 95 4c fd ff
	ff		 lea	 edx, DWORD PTR _strText$188212[ebp]
  032a6	52		 push	 edx
  032a7	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  032ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  032b3	3b f4		 cmp	 esi, esp
  032b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188301:

; 896  : 			
; 897  : 			int iOldMode = pDC->GetBkMode();

  032ba	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  032bd	e8 00 00 00 00	 call	 ?GetBkMode@CDC@@QBEHXZ	; CDC::GetBkMode
  032c2	89 85 2c fc ff
	ff		 mov	 DWORD PTR _iOldMode$188302[ebp], eax

; 898  : 			pDC->SetBkMode( TRANSPARENT);

  032c8	6a 01		 push	 1
  032ca	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  032cd	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 899  : 			
; 900  : 			// Draw the text in the correct colour:
; 901  : 			
; 902  : 			UINT nFormat  = DT_LEFT|DT_SINGLELINE|DT_VCENTER;

  032d2	c7 85 28 fc ff
	ff 24 00 00 00	 mov	 DWORD PTR _nFormat$188303[ebp], 36 ; 00000024H

; 903  : 			UINT nFormatr = DT_RIGHT|DT_SINGLELINE|DT_VCENTER;

  032dc	c7 85 24 fc ff
	ff 26 00 00 00	 mov	 DWORD PTR _nFormatr$188304[ebp], 38 ; 00000026H

; 904  : 			if(!(lpDIS->itemState & ODS_GRAYED)){

  032e6	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  032e9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  032ec	83 e1 02	 and	 ecx, 2
  032ef	75 6d		 jne	 SHORT $L188305

; 905  : 				pDC->SetTextColor(crText);

  032f1	8b f4		 mov	 esi, esp
  032f3	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _crText$188192[ebp]
  032f9	52		 push	 edx
  032fa	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  032fd	8b 10		 mov	 edx, DWORD PTR [eax]
  032ff	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03302	ff 52 38	 call	 DWORD PTR [edx+56]
  03305	3b f4		 cmp	 esi, esp
  03307	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 906  : 				pDC->DrawText (leftStr,rectt,nFormat);

  0330c	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _nFormat$188303[ebp]
  03312	50		 push	 eax
  03313	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$188294[ebp]
  03319	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0331e	50		 push	 eax
  0331f	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  03325	51		 push	 ecx
  03326	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03329	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 907  : 				if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  0332e	83 bd 30 fc ff
	ff ff		 cmp	 DWORD PTR _tablocr$188297[ebp], -1
  03335	74 22		 je	 SHORT $L188306
  03337	8b 95 24 fc ff
	ff		 mov	 edx, DWORD PTR _nFormatr$188304[ebp]
  0333d	52		 push	 edx
  0333e	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$188294[ebp]
  03344	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  03349	50		 push	 eax
  0334a	8d 85 38 fc ff
	ff		 lea	 eax, DWORD PTR _rightStr$188296[ebp]
  03350	50		 push	 eax
  03351	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03354	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L188306:

; 908  : 			}
; 909  : 			else{

  03359	e9 46 01 00 00	 jmp	 $L188307
$L188305:

; 910  : 				RECT offset = *rectt;

  0335e	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$188294[ebp]
  03364	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  03369	8b 08		 mov	 ecx, DWORD PTR [eax]
  0336b	89 8d 10 fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp], ecx
  03371	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  03374	89 95 14 fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp+4], edx
  0337a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0337d	89 8d 18 fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp+8], ecx
  03383	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  03386	89 95 1c fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp+12], edx

; 911  : 				offset.left+=1;

  0338c	8b 85 10 fc ff
	ff		 mov	 eax, DWORD PTR _offset$188308[ebp]
  03392	83 c0 01	 add	 eax, 1
  03395	89 85 10 fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp], eax

; 912  : 				offset.right+=1;

  0339b	8b 8d 18 fc ff
	ff		 mov	 ecx, DWORD PTR _offset$188308[ebp+8]
  033a1	83 c1 01	 add	 ecx, 1
  033a4	89 8d 18 fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp+8], ecx

; 913  : 				offset.top+=1;

  033aa	8b 95 14 fc ff
	ff		 mov	 edx, DWORD PTR _offset$188308[ebp+4]
  033b0	83 c2 01	 add	 edx, 1
  033b3	89 95 14 fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp+4], edx

; 914  : 				offset.bottom+=1;

  033b9	8b 85 1c fc ff
	ff		 mov	 eax, DWORD PTR _offset$188308[ebp+12]
  033bf	83 c0 01	 add	 eax, 1
  033c2	89 85 1c fc ff
	ff		 mov	 DWORD PTR _offset$188308[ebp+12], eax

; 915  : 				if(!IsWinXPLuna()){

  033c8	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  033cd	85 c0		 test	 eax, eax
  033cf	75 60		 jne	 SHORT $L188309

; 916  : 					COLORREF graycol=GetSysColor(COLOR_GRAYTEXT);

  033d1	8b f4		 mov	 esi, esp
  033d3	6a 11		 push	 17			; 00000011H
  033d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  033db	3b f4		 cmp	 esi, esp
  033dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  033e2	89 85 08 fc ff
	ff		 mov	 DWORD PTR _graycol$188310[ebp], eax

; 917  : 					if(!(state&ODS_SELECTED))graycol = LightenColor(graycol,0.4);

  033e8	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR _state$188211[ebp]
  033ee	83 e1 01	 and	 ecx, 1
  033f1	75 21		 jne	 SHORT $L188311
  033f3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd999999999999a
  033f9	83 ec 08	 sub	 esp, 8
  033fc	dd 1c 24	 fstp	 QWORD PTR [esp]
  033ff	8b 95 08 fc ff
	ff		 mov	 edx, DWORD PTR _graycol$188310[ebp]
  03405	52		 push	 edx
  03406	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0340b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0340e	89 85 08 fc ff
	ff		 mov	 DWORD PTR _graycol$188310[ebp], eax
$L188311:

; 918  : 					pDC->SetTextColor(graycol);

  03414	8b f4		 mov	 esi, esp
  03416	8b 85 08 fc ff
	ff		 mov	 eax, DWORD PTR _graycol$188310[ebp]
  0341c	50		 push	 eax
  0341d	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03420	8b 11		 mov	 edx, DWORD PTR [ecx]
  03422	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03425	ff 52 38	 call	 DWORD PTR [edx+56]
  03428	3b f4		 cmp	 esi, esp
  0342a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 919  : 				}
; 920  : 				else pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));

  0342f	eb 26		 jmp	 SHORT $L188312
$L188309:
  03431	8b f4		 mov	 esi, esp
  03433	6a 11		 push	 17			; 00000011H
  03435	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0343b	3b f4		 cmp	 esi, esp
  0343d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03442	8b f4		 mov	 esi, esp
  03444	50		 push	 eax
  03445	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  03448	8b 10		 mov	 edx, DWORD PTR [eax]
  0344a	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0344d	ff 52 38	 call	 DWORD PTR [edx+56]
  03450	3b f4		 cmp	 esi, esp
  03452	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188312:

; 921  : 				pDC->DrawText(leftStr,rectt, nFormat);

  03457	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _nFormat$188303[ebp]
  0345d	50		 push	 eax
  0345e	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$188294[ebp]
  03464	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  03469	50		 push	 eax
  0346a	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  03470	51		 push	 ecx
  03471	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  03474	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 922  : 				if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  03479	83 bd 30 fc ff
	ff ff		 cmp	 DWORD PTR _tablocr$188297[ebp], -1
  03480	74 22		 je	 SHORT $L188307
  03482	8b 95 24 fc ff
	ff		 mov	 edx, DWORD PTR _nFormatr$188304[ebp]
  03488	52		 push	 edx
  03489	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$188294[ebp]
  0348f	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  03494	50		 push	 eax
  03495	8d 85 38 fc ff
	ff		 lea	 eax, DWORD PTR _rightStr$188296[ebp]
  0349b	50		 push	 eax
  0349c	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0349f	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L188307:

; 923  : 			}
; 924  : 			pDC->SetBkMode( iOldMode );

  034a4	8b 8d 2c fc ff
	ff		 mov	 ecx, DWORD PTR _iOldMode$188302[ebp]
  034aa	51		 push	 ecx
  034ab	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  034ae	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 925  : 		}

  034b3	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  034b7	8b f4		 mov	 esi, esp
  034b9	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188296[ebp]
  034bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  034c5	3b f4		 cmp	 esi, esp
  034c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  034cc	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  034d0	8b f4		 mov	 esi, esp
  034d2	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  034d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  034de	3b f4		 cmp	 esi, esp
  034e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188293:

; 926  : 		
; 927  : 		m_penBack.DeleteObject();

  034e5	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188198[ebp]
  034eb	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 928  : 		m_brSelect.DeleteObject();

  034f0	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  034f6	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 929  : 	}

  034fb	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  034ff	8b f4		 mov	 esi, esp
  03501	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  03507	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0350d	3b f4		 cmp	 esi, esp
  0350f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03514	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  03518	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188198[ebp]
  0351e	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  03523	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  03527	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  0352d	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L188187:

; 930  : 	m_brBackground.DeleteObject();

  03532	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  03538	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 931  : 	m_newbrBackground.DeleteObject();

  0353d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  03543	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 932  : #ifdef BCMENU_USE_MEMDC
; 933  : 	if(pFont)pDC->SelectObject (pFont); //set it to the old font

  03548	83 7d 94 00	 cmp	 DWORD PTR _pFont$[ebp], 0
  0354c	74 18		 je	 SHORT $L188314
  0354e	8b f4		 mov	 esi, esp
  03550	8b 55 94	 mov	 edx, DWORD PTR _pFont$[ebp]
  03553	52		 push	 edx
  03554	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  03557	8b 10		 mov	 edx, DWORD PTR [eax]
  03559	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0355c	ff 52 30	 call	 DWORD PTR [edx+48]
  0355f	3b f4		 cmp	 esi, esp
  03561	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188314:

; 934  : 	m_fontMenu.DeleteObject();

  03566	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  03569	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 935  : 	if(pMemDC)delete pMemDC;

  0356e	83 7d e4 00	 cmp	 DWORD PTR _pMemDC$[ebp], 0
  03572	74 4c		 je	 SHORT $L188315
  03574	8b 45 e4	 mov	 eax, DWORD PTR _pMemDC$[ebp]
  03577	89 85 a4 fb ff
	ff		 mov	 DWORD PTR $T192203[ebp], eax
  0357d	8b 8d a4 fb ff
	ff		 mov	 ecx, DWORD PTR $T192203[ebp]
  03583	89 8d a8 fb ff
	ff		 mov	 DWORD PTR $T192202[ebp], ecx
  03589	83 bd a8 fb ff
	ff 00		 cmp	 DWORD PTR $T192202[ebp], 0
  03590	74 24		 je	 SHORT $L192204
  03592	8b f4		 mov	 esi, esp
  03594	6a 01		 push	 1
  03596	8b 95 a8 fb ff
	ff		 mov	 edx, DWORD PTR $T192202[ebp]
  0359c	8b 02		 mov	 eax, DWORD PTR [edx]
  0359e	8b 8d a8 fb ff
	ff		 mov	 ecx, DWORD PTR $T192202[ebp]
  035a4	ff 50 04	 call	 DWORD PTR [eax+4]
  035a7	3b f4		 cmp	 esi, esp
  035a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  035ae	89 85 78 fb ff
	ff		 mov	 DWORD PTR tv846[ebp], eax
  035b4	eb 0a		 jmp	 SHORT $L188315
$L192204:
  035b6	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv846[ebp], 0
$L188315:

; 936  : #endif
; 937  : }

  035c0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  035c4	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  035ca	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  035cf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  035d3	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  035d9	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  035de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  035e5	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  035e8	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  035ed	52		 push	 edx
  035ee	8b cd		 mov	 ecx, ebp
  035f0	50		 push	 eax
  035f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192268
  035f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  035fc	58		 pop	 eax
  035fd	5a		 pop	 edx
  035fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03601	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03608	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0360b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03610	5f		 pop	 edi
  03611	5e		 pop	 esi
  03612	81 c4 88 04 00
	00		 add	 esp, 1160		; 00000488H
  03618	3b ec		 cmp	 ebp, esp
  0361a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0361f	8b e5		 mov	 esp, ebp
  03621	5d		 pop	 ebp
  03622	c2 04 00	 ret	 4
$L192268:
  03625	1a 00 00 00	 DD	 26			; 0000001aH
  03629	00 00 00 00	 DD	 $L192267
$L192267:
  0362d	d0 ff ff ff	 DD	 -48			; ffffffd0H
  03631	10 00 00 00	 DD	 16			; 00000010H
  03635	00 00 00 00	 DD	 $L192239
  03639	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0363d	10 00 00 00	 DD	 16			; 00000010H
  03641	00 00 00 00	 DD	 $L192240
  03645	9c ff ff ff	 DD	 -100			; ffffff9cH
  03649	08 00 00 00	 DD	 8
  0364d	00 00 00 00	 DD	 $L192241
  03651	54 ff ff ff	 DD	 -172			; ffffff54H
  03655	3c 00 00 00	 DD	 60			; 0000003cH
  03659	00 00 00 00	 DD	 $L192242
  0365d	44 ff ff ff	 DD	 -188			; ffffff44H
  03661	08 00 00 00	 DD	 8
  03665	00 00 00 00	 DD	 $L192243
  03669	34 ff ff ff	 DD	 -204			; ffffff34H
  0366d	08 00 00 00	 DD	 8
  03671	00 00 00 00	 DD	 $L192244
  03675	d0 fd ff ff	 DD	 -560			; fffffdd0H
  03679	54 01 00 00	 DD	 340			; 00000154H
  0367d	00 00 00 00	 DD	 $L192245
  03681	b0 fd ff ff	 DD	 -592			; fffffdb0H
  03685	04 00 00 00	 DD	 4
  03689	00 00 00 00	 DD	 $L192246
  0368d	9c fd ff ff	 DD	 -612			; fffffd9cH
  03691	08 00 00 00	 DD	 8
  03695	00 00 00 00	 DD	 $L192247
  03699	8c fd ff ff	 DD	 -628			; fffffd8cH
  0369d	08 00 00 00	 DD	 8
  036a1	00 00 00 00	 DD	 $L192248
  036a5	4c fd ff ff	 DD	 -692			; fffffd4cH
  036a9	04 00 00 00	 DD	 4
  036ad	00 00 00 00	 DD	 $L192249
  036b1	34 fd ff ff	 DD	 -716			; fffffd34H
  036b5	08 00 00 00	 DD	 8
  036b9	00 00 00 00	 DD	 $L192250
  036bd	24 fd ff ff	 DD	 -732			; fffffd24H
  036c1	08 00 00 00	 DD	 8
  036c5	00 00 00 00	 DD	 $L192251
  036c9	14 fd ff ff	 DD	 -748			; fffffd14H
  036cd	08 00 00 00	 DD	 8
  036d1	00 00 00 00	 DD	 $L192252
  036d5	00 fd ff ff	 DD	 -768			; fffffd00H
  036d9	08 00 00 00	 DD	 8
  036dd	00 00 00 00	 DD	 $L192253
  036e1	f0 fc ff ff	 DD	 -784			; fffffcf0H
  036e5	08 00 00 00	 DD	 8
  036e9	00 00 00 00	 DD	 $L192254
  036ed	e0 fc ff ff	 DD	 -800			; fffffce0H
  036f1	08 00 00 00	 DD	 8
  036f5	00 00 00 00	 DD	 $L192255
  036f9	d0 fc ff ff	 DD	 -816			; fffffcd0H
  036fd	08 00 00 00	 DD	 8
  03701	00 00 00 00	 DD	 $L192256
  03705	c0 fc ff ff	 DD	 -832			; fffffcc0H
  03709	08 00 00 00	 DD	 8
  0370d	00 00 00 00	 DD	 $L192257
  03711	b0 fc ff ff	 DD	 -848			; fffffcb0H
  03715	08 00 00 00	 DD	 8
  03719	00 00 00 00	 DD	 $L192258
  0371d	a0 fc ff ff	 DD	 -864			; fffffca0H
  03721	08 00 00 00	 DD	 8
  03725	00 00 00 00	 DD	 $L192259
  03729	68 fc ff ff	 DD	 -920			; fffffc68H
  0372d	30 00 00 00	 DD	 48			; 00000030H
  03731	00 00 00 00	 DD	 $L192260
  03735	50 fc ff ff	 DD	 -944			; fffffc50H
  03739	10 00 00 00	 DD	 16			; 00000010H
  0373d	00 00 00 00	 DD	 $L192261
  03741	44 fc ff ff	 DD	 -956			; fffffc44H
  03745	04 00 00 00	 DD	 4
  03749	00 00 00 00	 DD	 $L192262
  0374d	38 fc ff ff	 DD	 -968			; fffffc38H
  03751	04 00 00 00	 DD	 4
  03755	00 00 00 00	 DD	 $L192263
  03759	10 fc ff ff	 DD	 -1008			; fffffc10H
  0375d	10 00 00 00	 DD	 16			; 00000010H
  03761	00 00 00 00	 DD	 $L192264
$L192264:
  03765	6f		 DB	 111			; 0000006fH
  03766	66		 DB	 102			; 00000066H
  03767	66		 DB	 102			; 00000066H
  03768	73		 DB	 115			; 00000073H
  03769	65		 DB	 101			; 00000065H
  0376a	74		 DB	 116			; 00000074H
  0376b	00		 DB	 0
$L192263:
  0376c	72		 DB	 114			; 00000072H
  0376d	69		 DB	 105			; 00000069H
  0376e	67		 DB	 103			; 00000067H
  0376f	68		 DB	 104			; 00000068H
  03770	74		 DB	 116			; 00000074H
  03771	53		 DB	 83			; 00000053H
  03772	74		 DB	 116			; 00000074H
  03773	72		 DB	 114			; 00000072H
  03774	00		 DB	 0
$L192262:
  03775	6c		 DB	 108			; 0000006cH
  03776	65		 DB	 101			; 00000065H
  03777	66		 DB	 102			; 00000066H
  03778	74		 DB	 116			; 00000074H
  03779	53		 DB	 83			; 00000053H
  0377a	74		 DB	 116			; 00000074H
  0377b	72		 DB	 114			; 00000072H
  0377c	00		 DB	 0
$L192261:
  0377d	72		 DB	 114			; 00000072H
  0377e	65		 DB	 101			; 00000065H
  0377f	63		 DB	 99			; 00000063H
  03780	74		 DB	 116			; 00000074H
  03781	74		 DB	 116			; 00000074H
  03782	00		 DB	 0
$L192260:
  03783	69		 DB	 105			; 00000069H
  03784	6e		 DB	 110			; 0000006eH
  03785	66		 DB	 102			; 00000066H
  03786	6f		 DB	 111			; 0000006fH
  03787	00		 DB	 0
$L192259:
  03788	70		 DB	 112			; 00000070H
  03789	74		 DB	 116			; 00000074H
  0378a	49		 DB	 73			; 00000049H
  0378b	6d		 DB	 109			; 0000006dH
  0378c	61		 DB	 97			; 00000061H
  0378d	67		 DB	 103			; 00000067H
  0378e	65		 DB	 101			; 00000065H
  0378f	00		 DB	 0
$L192258:
  03790	70		 DB	 112			; 00000070H
  03791	74		 DB	 116			; 00000074H
  03792	49		 DB	 73			; 00000049H
  03793	6d		 DB	 109			; 0000006dH
  03794	61		 DB	 97			; 00000061H
  03795	67		 DB	 103			; 00000067H
  03796	65		 DB	 101			; 00000065H
  03797	00		 DB	 0
$L192257:
  03798	62		 DB	 98			; 00000062H
  03799	72		 DB	 114			; 00000072H
  0379a	75		 DB	 117			; 00000075H
  0379b	73		 DB	 115			; 00000073H
  0379c	68		 DB	 104			; 00000068H
  0379d	69		 DB	 105			; 00000069H
  0379e	6e		 DB	 110			; 0000006eH
  0379f	00		 DB	 0
$L192256:
  037a0	70		 DB	 112			; 00000070H
  037a1	74		 DB	 116			; 00000074H
  037a2	49		 DB	 73			; 00000049H
  037a3	6d		 DB	 109			; 0000006dH
  037a4	61		 DB	 97			; 00000061H
  037a5	67		 DB	 103			; 00000067H
  037a6	65		 DB	 101			; 00000065H
  037a7	32		 DB	 50			; 00000032H
  037a8	00		 DB	 0
$L192255:
  037a9	70		 DB	 112			; 00000070H
  037aa	74		 DB	 116			; 00000074H
  037ab	49		 DB	 73			; 00000049H
  037ac	6d		 DB	 109			; 0000006dH
  037ad	61		 DB	 97			; 00000061H
  037ae	67		 DB	 103			; 00000067H
  037af	65		 DB	 101			; 00000065H
  037b0	31		 DB	 49			; 00000031H
  037b1	00		 DB	 0
$L192254:
  037b2	62		 DB	 98			; 00000062H
  037b3	72		 DB	 114			; 00000072H
  037b4	75		 DB	 117			; 00000075H
  037b5	73		 DB	 115			; 00000073H
  037b6	68		 DB	 104			; 00000068H
  037b7	69		 DB	 105			; 00000069H
  037b8	6e		 DB	 110			; 0000006eH
  037b9	00		 DB	 0
$L192253:
  037ba	70		 DB	 112			; 00000070H
  037bb	74		 DB	 116			; 00000074H
  037bc	49		 DB	 73			; 00000049H
  037bd	6d		 DB	 109			; 0000006dH
  037be	61		 DB	 97			; 00000061H
  037bf	67		 DB	 103			; 00000067H
  037c0	65		 DB	 101			; 00000065H
  037c1	00		 DB	 0
$L192252:
  037c2	62		 DB	 98			; 00000062H
  037c3	69		 DB	 105			; 00000069H
  037c4	74		 DB	 116			; 00000074H
  037c5	6d		 DB	 109			; 0000006dH
  037c6	61		 DB	 97			; 00000061H
  037c7	70		 DB	 112			; 00000070H
  037c8	73		 DB	 115			; 00000073H
  037c9	74		 DB	 116			; 00000074H
  037ca	61		 DB	 97			; 00000061H
  037cb	6e		 DB	 110			; 0000006eH
  037cc	64		 DB	 100			; 00000064H
  037cd	61		 DB	 97			; 00000061H
  037ce	72		 DB	 114			; 00000072H
  037cf	64		 DB	 100			; 00000064H
  037d0	00		 DB	 0
$L192251:
  037d1	70		 DB	 112			; 00000070H
  037d2	74		 DB	 116			; 00000074H
  037d3	49		 DB	 73			; 00000049H
  037d4	6d		 DB	 109			; 0000006dH
  037d5	61		 DB	 97			; 00000061H
  037d6	67		 DB	 103			; 00000067H
  037d7	65		 DB	 101			; 00000065H
  037d8	00		 DB	 0
$L192250:
  037d9	70		 DB	 112			; 00000070H
  037da	74		 DB	 116			; 00000074H
  037db	49		 DB	 73			; 00000049H
  037dc	6d		 DB	 109			; 0000006dH
  037dd	61		 DB	 97			; 00000061H
  037de	67		 DB	 103			; 00000067H
  037df	65		 DB	 101			; 00000065H
  037e0	00		 DB	 0
$L192249:
  037e1	73		 DB	 115			; 00000073H
  037e2	74		 DB	 116			; 00000074H
  037e3	72		 DB	 114			; 00000072H
  037e4	54		 DB	 84			; 00000054H
  037e5	65		 DB	 101			; 00000065H
  037e6	78		 DB	 120			; 00000078H
  037e7	74		 DB	 116			; 00000074H
  037e8	00		 DB	 0
$L192248:
  037e9	6d		 DB	 109			; 0000006dH
  037ea	5f		 DB	 95			; 0000005fH
  037eb	70		 DB	 112			; 00000070H
  037ec	65		 DB	 101			; 00000065H
  037ed	6e		 DB	 110			; 0000006eH
  037ee	42		 DB	 66			; 00000042H
  037ef	61		 DB	 97			; 00000061H
  037f0	63		 DB	 99			; 00000063H
  037f1	6b		 DB	 107			; 0000006bH
  037f2	00		 DB	 0
$L192247:
  037f3	6d		 DB	 109			; 0000006dH
  037f4	5f		 DB	 95			; 0000005fH
  037f5	62		 DB	 98			; 00000062H
  037f6	72		 DB	 114			; 00000072H
  037f7	53		 DB	 83			; 00000053H
  037f8	65		 DB	 101			; 00000065H
  037f9	6c		 DB	 108			; 0000006cH
  037fa	65		 DB	 101			; 00000065H
  037fb	63		 DB	 99			; 00000063H
  037fc	74		 DB	 116			; 00000074H
  037fd	00		 DB	 0
$L192246:
  037fe	63		 DB	 99			; 00000063H
  037ff	72		 DB	 114			; 00000072H
  03800	53		 DB	 83			; 00000053H
  03801	65		 DB	 101			; 00000065H
  03802	6c		 DB	 108			; 0000006cH
  03803	65		 DB	 101			; 00000065H
  03804	63		 DB	 99			; 00000063H
  03805	74		 DB	 116			; 00000074H
  03806	00		 DB	 0
$L192245:
  03807	6e		 DB	 110			; 0000006eH
  03808	6d		 DB	 109			; 0000006dH
  03809	00		 DB	 0
$L192244:
  0380a	6d		 DB	 109			; 0000006dH
  0380b	5f		 DB	 95			; 0000005fH
  0380c	62		 DB	 98			; 00000062H
  0380d	72		 DB	 114			; 00000072H
  0380e	42		 DB	 66			; 00000042H
  0380f	61		 DB	 97			; 00000061H
  03810	63		 DB	 99			; 00000063H
  03811	6b		 DB	 107			; 0000006bH
  03812	67		 DB	 103			; 00000067H
  03813	72		 DB	 114			; 00000072H
  03814	6f		 DB	 111			; 0000006fH
  03815	75		 DB	 117			; 00000075H
  03816	6e		 DB	 110			; 0000006eH
  03817	64		 DB	 100			; 00000064H
  03818	00		 DB	 0
$L192243:
  03819	6d		 DB	 109			; 0000006dH
  0381a	5f		 DB	 95			; 0000005fH
  0381b	6e		 DB	 110			; 0000006eH
  0381c	65		 DB	 101			; 00000065H
  0381d	77		 DB	 119			; 00000077H
  0381e	62		 DB	 98			; 00000062H
  0381f	72		 DB	 114			; 00000072H
  03820	42		 DB	 66			; 00000042H
  03821	61		 DB	 97			; 00000061H
  03822	63		 DB	 99			; 00000063H
  03823	6b		 DB	 107			; 0000006bH
  03824	67		 DB	 103			; 00000067H
  03825	72		 DB	 114			; 00000072H
  03826	6f		 DB	 111			; 0000006fH
  03827	75		 DB	 117			; 00000075H
  03828	6e		 DB	 110			; 0000006eH
  03829	64		 DB	 100			; 00000064H
  0382a	00		 DB	 0
$L192242:
  0382b	6d		 DB	 109			; 0000006dH
  0382c	5f		 DB	 95			; 0000005fH
  0382d	6c		 DB	 108			; 0000006cH
  0382e	66		 DB	 102			; 00000066H
  0382f	00		 DB	 0
$L192241:
  03830	6d		 DB	 109			; 0000006dH
  03831	5f		 DB	 95			; 0000005fH
  03832	66		 DB	 102			; 00000066H
  03833	6f		 DB	 111			; 0000006fH
  03834	6e		 DB	 110			; 0000006eH
  03835	74		 DB	 116			; 00000074H
  03836	4d		 DB	 77			; 0000004dH
  03837	65		 DB	 101			; 00000065H
  03838	6e		 DB	 110			; 0000006eH
  03839	75		 DB	 117			; 00000075H
  0383a	00		 DB	 0
$L192240:
  0383b	72		 DB	 114			; 00000072H
  0383c	65		 DB	 101			; 00000065H
  0383d	63		 DB	 99			; 00000063H
  0383e	74		 DB	 116			; 00000074H
  0383f	32		 DB	 50			; 00000032H
  03840	00		 DB	 0
$L192239:
  03841	72		 DB	 114			; 00000072H
  03842	65		 DB	 101			; 00000065H
  03843	63		 DB	 99			; 00000063H
  03844	74		 DB	 116			; 00000074H
  03845	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192206:
  00125	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  00128	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L192207:
  0012d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  00133	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192208:
  00138	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  0013e	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192209:
  00143	68 9d 02 00 00	 push	 669			; 0000029dH
  00148	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0014d	8b 85 00 fc ff
	ff		 mov	 eax, DWORD PTR $T192184[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  00159	c3		 ret	 0
$L192210:
  0015a	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$188197[ebp]
  00160	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192211:
  00165	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$188198[ebp]
  0016b	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
$L192212:
  00170	8b f4		 mov	 esi, esp
  00172	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _strText$188212[ebp]
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0017e	3b f4		 cmp	 esi, esp
  00180	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192213:
  00185	8b f4		 mov	 esi, esp
  00187	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T192188[ebp]
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00193	3b f4		 cmp	 esi, esp
  00195	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192214:
  0019a	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$188254[ebp]
  001a0	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192215:
  001a5	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188265[ebp]
  001ab	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192216:
  001b0	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR _brushin$188277[ebp]
  001b6	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192217:
  001bb	8b f4		 mov	 esi, esp
  001bd	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$188295[ebp]
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001c9	3b f4		 cmp	 esi, esp
  001cb	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192218:
  001d0	8b f4		 mov	 esi, esp
  001d2	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _rightStr$188296[ebp]
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001de	3b f4		 cmp	 esi, esp
  001e0	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192219:
  001e5	8b f4		 mov	 esi, esp
  001e7	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T192200[ebp]
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001f3	3b f4		 cmp	 esi, esp
  001f5	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192220:
  001fa	8b f4		 mov	 esi, esp
  001fc	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T192201[ebp]
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00208	3b f4		 cmp	 esi, esp
  0020a	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z:
  0020f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192222
  00214	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP ; BCMenu::DrawItem_WinXP
PUBLIC	??_7BCMenuMemDC@@6B@				; BCMenuMemDC::`vftable'
PUBLIC	??_GBCMenuMemDC@@UAEPAXI@Z			; BCMenuMemDC::`scalar deleting destructor'
PUBLIC	??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@ ; `string'
PUBLIC	??_R1A@?0A@A@CDC@@8				; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCDC@@@8					; CDC `RTTI Type Descriptor'
PUBLIC	??_R4BCMenuMemDC@@6B@				; BCMenuMemDC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBCMenuMemDC@@@8				; BCMenuMemDC `RTTI Type Descriptor'
PUBLIC	??_R3BCMenuMemDC@@8				; BCMenuMemDC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BCMenuMemDC@@8				; BCMenuMemDC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@BCMenuMemDC@@8			; BCMenuMemDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	?TextOutA@CDC@@UAEHHHPBDH@Z:NEAR		; CDC::TextOutA
EXTRN	?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z:NEAR ; CDC::ExtTextOutA
EXTRN	?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z:NEAR ; CDC::TabbedTextOutA
EXTRN	?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z:NEAR	; CDC::DrawTextA
EXTRN	?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z:NEAR ; CDC::DrawTextExA
EXTRN	?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z:NEAR ; CDC::GrayStringA
EXTRN	??_EBCMenuMemDC@@UAEPAXI@Z:NEAR			; BCMenuMemDC::`vector deleting destructor'
EXTRN	?Escape@CDC@@UAEHHHPBDPAX@Z:NEAR		; CDC::Escape
EXTRN	??1CDC@@UAE@XZ:NEAR				; CDC::~CDC
EXTRN	?AssertValid@CDC@@UBEXXZ:NEAR			; CDC::AssertValid
EXTRN	?Dump@CDC@@UBEXAAVCDumpContext@@@Z:NEAR		; CDC::Dump
EXTRN	?Width@CRect@@QBEHXZ:NEAR			; CRect::Width
EXTRN	?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z:NEAR ; CBitmap::CreateCompatibleBitmap
EXTRN	?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ:NEAR ; CDC::GetRuntimeClass
EXTRN	?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetAttribDC
EXTRN	?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetOutputDC
EXTRN	?ReleaseAttribDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseAttribDC
EXTRN	?ReleaseOutputDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseOutputDC
EXTRN	?IsPrinting@CDC@@QBEHXZ:NEAR			; CDC::IsPrinting
EXTRN	??0CDC@@QAE@XZ:NEAR				; CDC::CDC
EXTRN	?CreateCompatibleDC@CDC@@QAEHPAV1@@Z:NEAR	; CDC::CreateCompatibleDC
EXTRN	?SaveDC@CDC@@UAEHXZ:NEAR			; CDC::SaveDC
EXTRN	?RestoreDC@CDC@@UAEHH@Z:NEAR			; CDC::RestoreDC
EXTRN	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z:NEAR ; CDC::SelectStockObject
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?SetBkColor@CDC@@UAEKK@Z:NEAR			; CDC::SetBkColor
EXTRN	?SetTextColor@CDC@@UAEKK@Z:NEAR			; CDC::SetTextColor
EXTRN	?SetMapMode@CDC@@UAEHH@Z:NEAR			; CDC::SetMapMode
EXTRN	?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::SetViewportOrg
EXTRN	?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::OffsetViewportOrg
EXTRN	?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetViewportExt
EXTRN	?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleViewportExt
EXTRN	?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z:NEAR	; CDC::SetWindowOrg
EXTRN	?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetWindowExt
EXTRN	?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleWindowExt
EXTRN	?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z:NEAR	; CDC::GetClipBox
EXTRN	?PtVisible@CDC@@UBEHHH@Z:NEAR			; CDC::PtVisible
EXTRN	?RectVisible@CDC@@UBEHPBUtagRECT@@@Z:NEAR	; CDC::RectVisible
;	COMDAT xdata$x
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
xdata$x	SEGMENT
$T192278 DD	0ffffffffH
	DD	FLAT:$L192273
	DD	00H
	DD	FLAT:$L192274
$T192276 DD	019930520H
	DD	02H
	DD	FLAT:$T192278
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT
??_7BCMenuMemDC@@6B@ DD FLAT:??_R4BCMenuMemDC@@6B@	; BCMenuMemDC::`vftable'
	DD	FLAT:?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_EBCMenuMemDC@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CDC@@UBEXXZ
	DD	FLAT:?Dump@CDC@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?ReleaseAttribDC@CDC@@UAEXXZ
	DD	FLAT:?ReleaseOutputDC@CDC@@UAEXXZ
	DD	FLAT:?SaveDC@CDC@@UAEHXZ
	DD	FLAT:?RestoreDC@CDC@@UAEHH@Z
	DD	FLAT:?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z
	DD	FLAT:?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z
	DD	FLAT:?SetBkColor@CDC@@UAEKK@Z
	DD	FLAT:?SetTextColor@CDC@@UAEKK@Z
	DD	FLAT:?SetMapMode@CDC@@UAEHH@Z
	DD	FLAT:?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z
	DD	FLAT:?PtVisible@CDC@@UBEHHH@Z
	DD	FLAT:?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
	DD	FLAT:?TextOutA@CDC@@UAEHHHPBDH@Z
	DD	FLAT:?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
	DD	FLAT:?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
	DD	FLAT:?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
	DD	FLAT:?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
	DD	FLAT:?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
	DD	FLAT:?Escape@CDC@@UAEHHHPBDPAX@Z
CONST	ENDS
;	COMDAT ??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
CONST	SEGMENT
??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@ DB 'd:\boxgit\'
	DB	'playbox\playbox\dev\prj\playbox\src\gui\util\BCMenu.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT
??_R4BCMenuMemDC@@6B@ DD 00H				; BCMenuMemDC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBCMenuMemDC@@@8
	DD	FLAT:??_R3BCMenuMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT
??_R0?AVBCMenuMemDC@@@8 DD FLAT:??_7type_info@@6B@	; BCMenuMemDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBCMenuMemDC@@', 00H
_DATA	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT
??_R3BCMenuMemDC@@8 DD 00H				; BCMenuMemDC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BCMenuMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT
??_R2BCMenuMemDC@@8 DD FLAT:??_R1A@?0A@A@BCMenuMemDC@@8	; BCMenuMemDC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CDC@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@BCMenuMemDC@@8 DD FLAT:??_R0?AVBCMenuMemDC@@@8 ; BCMenuMemDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CDC@@8 DD FLAT:??_R0?AVCDC@@@8		; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT
??_R0?AVCDC@@@8 DD FLAT:??_7type_info@@6B@		; CDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDC@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z
_TEXT	SEGMENT
$T192272 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_lpSrcRect$ = 12					; size = 4
??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z PROC NEAR	; BCMenuMemDC::BCMenuMemDC, COMDAT
; _this$ = ecx

; 346  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00030	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenuMemDC@@6B@
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 10	 add	 ecx, 16			; 00000010H
  00051	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 20	 add	 ecx, 32			; 00000020H
  00060	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 347  :         ASSERT(pDC != NULL);

  00065	83 7d 08 00	 cmp	 DWORD PTR _pDC$[ebp], 0
  00069	75 14		 jne	 SHORT $L192271
  0006b	68 5b 01 00 00	 push	 347			; 0000015bH
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@CPOAACJC@d?3?2boxgit?2playbox?2playbox?2dev?2pr@
  00075	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007a	85 c0		 test	 eax, eax
  0007c	74 01		 je	 SHORT $L192271
  0007e	cc		 int	 3
$L192271:

; 348  : 
; 349  : 		m_rect.CopyRect(lpSrcRect);

  0007f	8b 55 0c	 mov	 edx, DWORD PTR _lpSrcRect$[ebp]
  00082	52		 push	 edx
  00083	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	83 c1 20	 add	 ecx, 32			; 00000020H
  00089	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 350  :         m_pDC = pDC;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00094	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 351  :         m_pOldBitmap = NULL;

  00097	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0009a	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0

; 352  :         m_bMemDC = !pDC->IsPrinting();

  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  000a4	e8 00 00 00 00	 call	 ?IsPrinting@CDC@@QBEHXZ	; CDC::IsPrinting
  000a9	f7 d8		 neg	 eax
  000ab	1b c0		 sbb	 eax, eax
  000ad	40		 inc	 eax
  000ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 353  :               
; 354  :         if (m_bMemDC)    // Create a Memory DC

  000b4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  000bb	74 64		 je	 SHORT $L187713

; 355  :         {
; 356  :             CreateCompatibleDC(pDC);

  000bd	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 357  :             m_bitmap.CreateCompatibleBitmap(pDC, m_rect.Width(), m_rect.Height());

  000c9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	83 c1 20	 add	 ecx, 32			; 00000020H
  000cf	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  000d4	50		 push	 eax
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	83 c1 20	 add	 ecx, 32			; 00000020H
  000db	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  000e0	50		 push	 eax
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  000e4	51		 push	 ecx
  000e5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	83 c1 10	 add	 ecx, 16			; 00000010H
  000eb	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 358  :             m_pOldBitmap = SelectObject(&m_bitmap);

  000f0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000f3	83 c2 10	 add	 edx, 16			; 00000010H
  000f6	52		 push	 edx
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 359  :             SetWindowOrg(m_rect.left, m_rect.top);

  00105	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00108	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0010b	50		 push	 eax
  0010c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00112	52		 push	 edx
  00113	8d 45 e8	 lea	 eax, DWORD PTR $T192272[ebp]
  00116	50		 push	 eax
  00117	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	e8 00 00 00 00	 call	 ?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z ; CDC::SetWindowOrg

; 360  :         }
; 361  :         else        // Make a copy of the relevent parts of the current DC for printing

  0011f	eb 24		 jmp	 SHORT $L187710
$L187713:

; 362  :         {
; 363  :             m_bPrinting = pDC->m_bPrinting;

  00121	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00127	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0012a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 364  :             m_hDC       = pDC->m_hDC;

  0012d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00133	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00136	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 365  :             m_hAttribDC = pDC->m_hAttribDC;

  00139	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  0013f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00142	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L187710:

; 366  :         }
; 367  :     }

  00145	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00159	83 c4 18	 add	 esp, 24			; 00000018H
  0015c	3b ec		 cmp	 ebp, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192273:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192274:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192276
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z ENDP		; BCMenuMemDC::BCMenuMemDC
PUBLIC	??1BCMenuMemDC@@UAE@XZ				; BCMenuMemDC::~BCMenuMemDC
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCMenuMemDC@@UAEPAXI@Z PROC NEAR			; BCMenuMemDC::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1BCMenuMemDC@@UAE@XZ	; BCMenuMemDC::~BCMenuMemDC
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L187728
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L187728:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_GBCMenuMemDC@@UAEPAXI@Z ENDP				; BCMenuMemDC::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z:NEAR		; CDC::BitBlt
;	COMDAT xdata$x
xdata$x	SEGMENT
$T192288 DD	0ffffffffH
	DD	FLAT:$L192283
	DD	00H
	DD	FLAT:$L192284
$T192286 DD	019930520H
	DD	02H
	DD	FLAT:$T192288
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BCMenuMemDC@@UAE@XZ PROC NEAR			; BCMenuMemDC::~BCMenuMemDC, COMDAT
; _this$ = ecx

; 371  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1BCMenuMemDC@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00020	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenuMemDC@@6B@
  0002c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 372  :         if (m_bMemDC) 

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  0003a	74 59		 je	 SHORT $L187718

; 373  :         {    
; 374  :             // Copy the offscreen bitmap onto the screen.
; 375  :             m_pDC->BitBlt(m_rect.left, m_rect.top, m_rect.Width(), m_rect.Height(),
; 376  :                           this, m_rect.left, m_rect.top, SRCCOPY);

  0003c	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00047	50		 push	 eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0004e	52		 push	 edx
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	50		 push	 eax
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 20	 add	 ecx, 32			; 00000020H
  00059	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 20	 add	 ecx, 32			; 00000020H
  00065	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  0006a	50		 push	 eax
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00071	52		 push	 edx
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00078	51		 push	 ecx
  00079	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0007f	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 377  : 
; 378  :             //Swap back the original bitmap.
; 379  :             SelectObject(m_pOldBitmap);

  00084	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0008a	51		 push	 ecx
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 380  :         } else {

  00093	eb 14		 jmp	 SHORT $L187717
$L187718:

; 381  :             // All we need to do is replace the DC with an illegal value,
; 382  :             // this keeps us from accidently deleting the handles associated with
; 383  :             // the CDC that was passed to the constructor.
; 384  :             m_hDC = m_hAttribDC = NULL;

  00095	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00098	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L187717:

; 385  :         }
; 386  :     }

  000a9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ad	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	83 c1 10	 add	 ecx, 16			; 00000010H
  000b3	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  000b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L192283:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192284:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??1BCMenuMemDC@@UAE@XZ:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192286
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1BCMenuMemDC@@UAE@XZ ENDP				; BCMenuMemDC::~BCMenuMemDC
EXTRN	__imp__DrawIconEx@36:NEAR
EXTRN	??BCBrush@@QBEPAUHBRUSH__@@XZ:NEAR		; CBrush::operator HBRUSH__ *
EXTRN	?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ:NEAR		; CDC::GetSafeHdc
EXTRN	?DeleteDC@CDC@@QAEHXZ:NEAR			; CDC::DeleteDC
EXTRN	__imp__DestroyIcon@4:NEAR
EXTRN	?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z:NEAR ; CImageList::ExtractIconA
xdata$x	SEGMENT
$T192302 DD	0ffffffffH
	DD	FLAT:$L192293
	DD	00H
	DD	FLAT:$L192294
$T192296 DD	019930520H
	DD	02H
	DD	FLAT:$T192302
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
$T192292 = -72						; size = 4
_m_newclrBack$ = -68					; size = 4
_brush$ = -60						; size = 8
_pOldBmp$ = -48						; size = 4
_dc$ = -40						; size = 16
_hIcon$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_imglist$ = 12						; size = 4
_nIndex$ = 16						; size = 4
_bmp$ = 20						; size = 4
?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z PROC NEAR ; BCMenu::GetBitmapFromImageList
; _this$ = ecx

; 940  : {

  03850	55		 push	 ebp
  03851	8b ec		 mov	 ebp, esp
  03853	6a ff		 push	 -1
  03855	68 00 00 00 00	 push	 __ehhandler$?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z
  0385a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03860	50		 push	 eax
  03861	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03868	83 ec 3c	 sub	 esp, 60			; 0000003cH
  0386b	56		 push	 esi
  0386c	57		 push	 edi
  0386d	51		 push	 ecx
  0386e	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  03871	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  03876	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0387b	f3 ab		 rep stosd
  0387d	59		 pop	 ecx
  0387e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 941  : 	HICON hIcon = imglist->ExtractIcon(nIndex);

  03881	8b 45 10	 mov	 eax, DWORD PTR _nIndex$[ebp]
  03884	50		 push	 eax
  03885	8b 4d 0c	 mov	 ecx, DWORD PTR _imglist$[ebp]
  03888	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0388d	89 45 ec	 mov	 DWORD PTR _hIcon$[ebp], eax

; 942  : 	CDC dc;

  03890	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  03893	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  03898	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 943  : 	dc.CreateCompatibleDC(pDC);

  0389f	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  038a2	51		 push	 ecx
  038a3	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  038a6	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 944  : 	bmp.CreateCompatibleBitmap(pDC,m_iconX,m_iconY);

  038ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  038b1	52		 push	 edx
  038b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  038b7	50		 push	 eax
  038b8	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  038bb	51		 push	 ecx
  038bc	8b 4d 14	 mov	 ecx, DWORD PTR _bmp$[ebp]
  038bf	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 945  : 	CBitmap* pOldBmp = dc.SelectObject(&bmp);

  038c4	8b 55 14	 mov	 edx, DWORD PTR _bmp$[ebp]
  038c7	52		 push	 edx
  038c8	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  038cb	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  038d0	89 45 d0	 mov	 DWORD PTR _pOldBmp$[ebp], eax

; 946  : 	CBrush brush ;

  038d3	8d 4d c4	 lea	 ecx, DWORD PTR _brush$[ebp]
  038d6	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  038db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 947  : 	COLORREF m_newclrBack;
; 948  : 	m_newclrBack=GetSysColor(COLOR_3DFACE);

  038df	8b f4		 mov	 esi, esp
  038e1	6a 0f		 push	 15			; 0000000fH
  038e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  038e9	3b f4		 cmp	 esi, esp
  038eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  038f0	89 45 bc	 mov	 DWORD PTR _m_newclrBack$[ebp], eax

; 949  : 	brush.CreateSolidBrush(m_newclrBack);

  038f3	8b 45 bc	 mov	 eax, DWORD PTR _m_newclrBack$[ebp]
  038f6	50		 push	 eax
  038f7	8d 4d c4	 lea	 ecx, DWORD PTR _brush$[ebp]
  038fa	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 950  : 	::DrawIconEx(
; 951  : 		dc.GetSafeHdc(),
; 952  : 		0,
; 953  : 		0,
; 954  : 		hIcon,
; 955  : 		m_iconX,
; 956  : 		m_iconY,
; 957  : 		0,
; 958  : 		(HBRUSH)brush,
; 959  : 		DI_NORMAL
; 960  : 		);

  038ff	8b f4		 mov	 esi, esp
  03901	6a 03		 push	 3
  03903	8d 4d c4	 lea	 ecx, DWORD PTR _brush$[ebp]
  03906	e8 00 00 00 00	 call	 ??BCBrush@@QBEPAUHBRUSH__@@XZ ; CBrush::operator HBRUSH__ *
  0390b	50		 push	 eax
  0390c	6a 00		 push	 0
  0390e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03914	51		 push	 ecx
  03915	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0391b	52		 push	 edx
  0391c	8b 45 ec	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0391f	50		 push	 eax
  03920	6a 00		 push	 0
  03922	6a 00		 push	 0
  03924	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  03927	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  0392c	50		 push	 eax
  0392d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawIconEx@36
  03933	3b f4		 cmp	 esi, esp
  03935	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 961  : 	dc.SelectObject( pOldBmp );

  0393a	8b 4d d0	 mov	 ecx, DWORD PTR _pOldBmp$[ebp]
  0393d	51		 push	 ecx
  0393e	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  03941	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 962  : 	dc.DeleteDC();

  03946	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  03949	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 963  : 	// the icon is not longer needed
; 964  : 	::DestroyIcon(hIcon);

  0394e	8b f4		 mov	 esi, esp
  03950	8b 55 ec	 mov	 edx, DWORD PTR _hIcon$[ebp]
  03953	52		 push	 edx
  03954	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  0395a	3b f4		 cmp	 esi, esp
  0395c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 965  : 	return(TRUE);

  03961	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR $T192292[ebp], 1
  03968	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0396c	8d 4d c4	 lea	 ecx, DWORD PTR _brush$[ebp]
  0396f	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  03974	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0397b	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  0397e	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  03983	8b 45 b8	 mov	 eax, DWORD PTR $T192292[ebp]

; 966  : }

  03986	52		 push	 edx
  03987	8b cd		 mov	 ecx, ebp
  03989	50		 push	 eax
  0398a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192301
  03990	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03995	58		 pop	 eax
  03996	5a		 pop	 edx
  03997	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0399a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  039a1	5f		 pop	 edi
  039a2	5e		 pop	 esi
  039a3	83 c4 48	 add	 esp, 72			; 00000048H
  039a6	3b ec		 cmp	 ebp, esp
  039a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  039ad	8b e5		 mov	 esp, ebp
  039af	5d		 pop	 ebp
  039b0	c2 10 00	 ret	 16			; 00000010H
$L192301:
  039b3	02 00 00 00	 DD	 2
  039b7	00 00 00 00	 DD	 $L192300
$L192300:
  039bb	d8 ff ff ff	 DD	 -40			; ffffffd8H
  039bf	10 00 00 00	 DD	 16			; 00000010H
  039c3	00 00 00 00	 DD	 $L192297
  039c7	c4 ff ff ff	 DD	 -60			; ffffffc4H
  039cb	08 00 00 00	 DD	 8
  039cf	00 00 00 00	 DD	 $L192298
$L192298:
  039d3	62		 DB	 98			; 00000062H
  039d4	72		 DB	 114			; 00000072H
  039d5	75		 DB	 117			; 00000075H
  039d6	73		 DB	 115			; 00000073H
  039d7	68		 DB	 104			; 00000068H
  039d8	00		 DB	 0
$L192297:
  039d9	64		 DB	 100			; 00000064H
  039da	63		 DB	 99			; 00000063H
  039db	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192293:
  00219	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  0021c	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192294:
  00221	8d 4d c4	 lea	 ecx, DWORD PTR _brush$[ebp]
  00224	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z:
  00229	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192296
  0022e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ENDP ; BCMenu::GetBitmapFromImageList
PUBLIC	?GetWideString@BCMenuData@@QAEPB_WXZ		; BCMenuData::GetWideString
EXTRN	__imp__DrawTextA@20:NEAR
EXTRN	??0CSize@@QAE@UtagSIZE@@@Z:NEAR			; CSize::CSize
EXTRN	?AfxGetMainWnd@@YGPAVCWnd@@XZ:NEAR		; AfxGetMainWnd
EXTRN	?GetDC@CWnd@@QAEPAVCDC@@XZ:NEAR			; CWnd::GetDC
EXTRN	?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z:NEAR		; CWnd::ReleaseDC
EXTRN	__imp__GetTextExtentPoint32W@16:NEAR
EXTRN	?GetDesktopWindow@CWnd@@SGPAV1@XZ:NEAR		; CWnd::GetDesktopWindow
EXTRN	__imp__GetSystemMetrics@4:NEAR
xdata$x	SEGMENT
$T192324 DD	0ffffffffH
	DD	FLAT:$L192311
$T192313 DD	019930520H
	DD	01H
	DD	FLAT:$T192324
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv209 = -548						; size = 4
tv84 = -544						; size = 4
_temp$188373 = -540					; size = 4
_t$188368 = -532					; size = 8
_rect$188364 = -516					; size = 16
_size$188359 = -492					; size = 8
_lpstrText$188357 = -480				; size = 4
_pFont$188355 = -476					; size = 4
_pDC$188354 = -472					; size = 4
_pWnd$188352 = -468					; size = 4
_nm$188349 = -460					; size = 340
_m_lf$188346 = -112					; size = 60
_m_fontMenu$188345 = -44				; size = 8
_temp$188341 = -32					; size = 4
_BCMENU_PAD$ = -28					; size = 4
_state$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lpMIS$ = 8						; size = 4
?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z PROC NEAR ; BCMenu::MeasureItem
; _this$ = ecx

; 981  : {

  039e0	55		 push	 ebp
  039e1	8b ec		 mov	 ebp, esp
  039e3	6a ff		 push	 -1
  039e5	68 00 00 00 00	 push	 __ehhandler$?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z
  039ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  039f0	50		 push	 eax
  039f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  039f8	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  039fe	56		 push	 esi
  039ff	57		 push	 edi
  03a00	51		 push	 ecx
  03a01	8d bd dc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-548]
  03a07	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  03a0c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03a11	f3 ab		 rep stosd
  03a13	59		 pop	 ecx
  03a14	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  03a19	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  03a1c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 982  : 	UINT state = (((BCMenuData*)(lpMIS->itemData))->nFlags);

  03a1f	8b 45 08	 mov	 eax, DWORD PTR _lpMIS$[ebp]
  03a22	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03a25	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  03a28	89 55 e8	 mov	 DWORD PTR _state$[ebp], edx

; 983  : 	int BCMENU_PAD=4;

  03a2b	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _BCMENU_PAD$[ebp], 4

; 984  : 	if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps)BCMENU_PAD=7;

  03a32	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  03a37	85 c0		 test	 eax, eax
  03a39	74 10		 je	 SHORT $L188339
  03a3b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  03a42	74 07		 je	 SHORT $L188339
  03a44	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _BCMENU_PAD$[ebp], 7
$L188339:

; 985  : 	if(state & MF_SEPARATOR){

  03a4b	8b 45 e8	 mov	 eax, DWORD PTR _state$[ebp]
  03a4e	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  03a53	74 76		 je	 SHORT $L188340

; 986  : 		lpMIS->itemWidth = 0;

  03a55	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  03a58	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 987  : 		int temp = GetSystemMetrics(SM_CYMENU)>>1;

  03a5f	8b f4		 mov	 esi, esp
  03a61	6a 0f		 push	 15			; 0000000fH
  03a63	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  03a69	3b f4		 cmp	 esi, esp
  03a6b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03a70	d1 f8		 sar	 eax, 1
  03a72	89 45 e0	 mov	 DWORD PTR _temp$188341[ebp], eax

; 988  : 		if(IsLunaMenuStyle())

  03a75	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  03a7a	85 c0		 test	 eax, eax
  03a7c	74 0c		 je	 SHORT $L188342

; 989  : 			lpMIS->itemHeight = 3;

  03a7e	8b 55 08	 mov	 edx, DWORD PTR _lpMIS$[ebp]
  03a81	c7 42 10 03 00
	00 00		 mov	 DWORD PTR [edx+16], 3

; 990  : 		else

  03a88	eb 3c		 jmp	 SHORT $L188343
$L188342:

; 991  : 			lpMIS->itemHeight = temp>(m_iconY+BCMENU_PAD)/2 ? temp : (m_iconY+BCMENU_PAD)/2;

  03a8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03a8f	03 45 e4	 add	 eax, DWORD PTR _BCMENU_PAD$[ebp]
  03a92	99		 cdq
  03a93	2b c2		 sub	 eax, edx
  03a95	d1 f8		 sar	 eax, 1
  03a97	39 45 e0	 cmp	 DWORD PTR _temp$188341[ebp], eax
  03a9a	7e 0b		 jle	 SHORT $L192305
  03a9c	8b 45 e0	 mov	 eax, DWORD PTR _temp$188341[ebp]
  03a9f	89 85 e0 fd ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  03aa5	eb 13		 jmp	 SHORT $L192306
$L192305:
  03aa7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03aac	03 45 e4	 add	 eax, DWORD PTR _BCMENU_PAD$[ebp]
  03aaf	99		 cdq
  03ab0	2b c2		 sub	 eax, edx
  03ab2	d1 f8		 sar	 eax, 1
  03ab4	89 85 e0 fd ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
$L192306:
  03aba	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  03abd	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR tv84[ebp]
  03ac3	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$L188343:

; 992  : 	}
; 993  : 	else{

  03ac6	e9 18 03 00 00	 jmp	 $L188335
$L188340:

; 994  : 		CFont m_fontMenu;

  03acb	8d 4d d4	 lea	 ecx, DWORD PTR _m_fontMenu$188345[ebp]
  03ace	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  03ad3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 995  : 		LOGFONT m_lf;
; 996  : 		ZeroMemory ((PVOID) &m_lf,sizeof (LOGFONT));

  03ada	6a 3c		 push	 60			; 0000003cH
  03adc	6a 00		 push	 0
  03ade	8d 45 90	 lea	 eax, DWORD PTR _m_lf$188346[ebp]
  03ae1	50		 push	 eax
  03ae2	e8 00 00 00 00	 call	 _memset
  03ae7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 997  : 		NONCLIENTMETRICS nm;
; 998  : 		nm.cbSize = sizeof (NONCLIENTMETRICS);

  03aea	c7 85 34 fe ff
	ff 54 01 00 00	 mov	 DWORD PTR _nm$188349[ebp], 340 ; 00000154H

; 999  : 		VERIFY(SystemParametersInfo(SPI_GETNONCLIENTMETRICS,
; 1000 : 			nm.cbSize,&nm,0)); 

  03af4	8b f4		 mov	 esi, esp
  03af6	6a 00		 push	 0
  03af8	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR _nm$188349[ebp]
  03afe	51		 push	 ecx
  03aff	8b 95 34 fe ff
	ff		 mov	 edx, DWORD PTR _nm$188349[ebp]
  03b05	52		 push	 edx
  03b06	6a 29		 push	 41			; 00000029H
  03b08	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  03b0e	3b f4		 cmp	 esi, esp
  03b10	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03b15	85 c0		 test	 eax, eax
  03b17	75 14		 jne	 SHORT $L192307
  03b19	68 e8 03 00 00	 push	 1000			; 000003e8H
  03b1e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  03b23	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  03b28	85 c0		 test	 eax, eax
  03b2a	74 01		 je	 SHORT $L192307
  03b2c	cc		 int	 3
$L192307:

; 1001 : 		m_lf =  nm.lfMenuFont;

  03b2d	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  03b32	8d b5 d4 fe ff
	ff		 lea	 esi, DWORD PTR _nm$188349[ebp+160]
  03b38	8d 7d 90	 lea	 edi, DWORD PTR _m_lf$188346[ebp]
  03b3b	f3 a5		 rep movsd

; 1002 : 		m_fontMenu.CreateFontIndirect (&m_lf);

  03b3d	8d 4d 90	 lea	 ecx, DWORD PTR _m_lf$188346[ebp]
  03b40	51		 push	 ecx
  03b41	8d 4d d4	 lea	 ecx, DWORD PTR _m_fontMenu$188345[ebp]
  03b44	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA

; 1003 : 		
; 1004 : 		// Obtain the width of the text:
; 1005 : 		CWnd *pWnd = AfxGetMainWnd();            // Get main window

  03b49	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  03b4e	89 85 2c fe ff
	ff		 mov	 DWORD PTR _pWnd$188352[ebp], eax

; 1006 : 		if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  03b54	83 bd 2c fe ff
	ff 00		 cmp	 DWORD PTR _pWnd$188352[ebp], 0
  03b5b	75 0b		 jne	 SHORT $L188353
  03b5d	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  03b62	89 85 2c fe ff
	ff		 mov	 DWORD PTR _pWnd$188352[ebp], eax
$L188353:

; 1007 : 		CDC *pDC = pWnd->GetDC();              // Get device context

  03b68	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$188352[ebp]
  03b6e	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  03b73	89 85 28 fe ff
	ff		 mov	 DWORD PTR _pDC$188354[ebp], eax

; 1008 : 		CFont* pFont=NULL;    // Select menu font in...

  03b79	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pFont$188355[ebp], 0

; 1009 : 		
; 1010 : 		if (IsNewShell())

  03b83	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  03b88	85 c0		 test	 eax, eax
  03b8a	74 24		 je	 SHORT $L188356

; 1011 : 			pFont = pDC->SelectObject (&m_fontMenu);// Select menu font in...

  03b8c	8b f4		 mov	 esi, esp
  03b8e	8d 55 d4	 lea	 edx, DWORD PTR _m_fontMenu$188345[ebp]
  03b91	52		 push	 edx
  03b92	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR _pDC$188354[ebp]
  03b98	8b 10		 mov	 edx, DWORD PTR [eax]
  03b9a	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR _pDC$188354[ebp]
  03ba0	ff 52 30	 call	 DWORD PTR [edx+48]
  03ba3	3b f4		 cmp	 esi, esp
  03ba5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03baa	89 85 24 fe ff
	ff		 mov	 DWORD PTR _pFont$188355[ebp], eax
$L188356:

; 1012 :         
; 1013 : 		//Get pointer to text SK
; 1014 : 		const wchar_t *lpstrText = ((BCMenuData*)(lpMIS->itemData))->GetWideString();//SK: we use const to prevent misuse

  03bb0	8b 45 08	 mov	 eax, DWORD PTR _lpMIS$[ebp]
  03bb3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03bb6	e8 00 00 00 00	 call	 ?GetWideString@BCMenuData@@QAEPB_WXZ ; BCMenuData::GetWideString
  03bbb	89 85 20 fe ff
	ff		 mov	 DWORD PTR _lpstrText$188357[ebp], eax

; 1015 : 		    
; 1016 : 		SIZE size;
; 1017 : 		size.cx=size.cy=0;

  03bc1	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _size$188359[ebp+4], 0
  03bcb	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _size$188359[ebp+4]
  03bd1	89 8d 14 fe ff
	ff		 mov	 DWORD PTR _size$188359[ebp], ecx

; 1018 : 		
; 1019 : 		if (Win32s!=g_Shell)

  03bd7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_Shell, 0
  03bde	74 5e		 je	 SHORT $L188360

; 1020 : 			VERIFY(::GetTextExtentPoint32W(pDC->m_hDC,lpstrText,
; 1021 : 			(int)wcslen(lpstrText),&size)); //SK should also work on 95

  03be0	8b f4		 mov	 esi, esp
  03be2	8d 95 14 fe ff
	ff		 lea	 edx, DWORD PTR _size$188359[ebp]
  03be8	52		 push	 edx
  03be9	8b fc		 mov	 edi, esp
  03beb	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR _lpstrText$188357[ebp]
  03bf1	50		 push	 eax
  03bf2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  03bf8	83 c4 04	 add	 esp, 4
  03bfb	3b fc		 cmp	 edi, esp
  03bfd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03c02	50		 push	 eax
  03c03	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$188357[ebp]
  03c09	51		 push	 ecx
  03c0a	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR _pDC$188354[ebp]
  03c10	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  03c13	50		 push	 eax
  03c14	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16
  03c1a	3b f4		 cmp	 esi, esp
  03c1c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03c21	85 c0		 test	 eax, eax
  03c23	75 14		 jne	 SHORT $L192308
  03c25	68 fd 03 00 00	 push	 1021			; 000003fdH
  03c2a	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  03c2f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  03c34	85 c0		 test	 eax, eax
  03c36	74 01		 je	 SHORT $L192308
  03c38	cc		 int	 3
$L192308:

; 1022 : #ifndef UNICODE //can't be UNICODE for Win32s
; 1023 : 		else{//it's Win32suckx

  03c39	e9 aa 00 00 00	 jmp	 $L188363
$L188360:

; 1024 : 			RECT rect;
; 1025 : 			rect.left=rect.top=0;

  03c3e	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rect$188364[ebp+4], 0
  03c48	8b 95 00 fe ff
	ff		 mov	 edx, DWORD PTR _rect$188364[ebp+4]
  03c4e	89 95 fc fd ff
	ff		 mov	 DWORD PTR _rect$188364[ebp], edx

; 1026 : 			size.cy=DrawText(pDC->m_hDC,(LPCTSTR)lpstrText,
; 1027 : 				(int)wcslen(lpstrText),&rect,
; 1028 : 				DT_SINGLELINE|DT_LEFT|DT_VCENTER|DT_CALCRECT);

  03c54	8b f4		 mov	 esi, esp
  03c56	68 24 04 00 00	 push	 1060			; 00000424H
  03c5b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _rect$188364[ebp]
  03c61	50		 push	 eax
  03c62	8b fc		 mov	 edi, esp
  03c64	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$188357[ebp]
  03c6a	51		 push	 ecx
  03c6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  03c71	83 c4 04	 add	 esp, 4
  03c74	3b fc		 cmp	 edi, esp
  03c76	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03c7b	50		 push	 eax
  03c7c	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR _lpstrText$188357[ebp]
  03c82	52		 push	 edx
  03c83	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR _pDC$188354[ebp]
  03c89	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03c8c	51		 push	 ecx
  03c8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  03c93	3b f4		 cmp	 esi, esp
  03c95	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03c9a	89 85 18 fe ff
	ff		 mov	 DWORD PTR _size$188359[ebp+4], eax

; 1029 : 			//+3 makes at least three pixels space to the menu border
; 1030 : 			size.cx=rect.right-rect.left+3;

  03ca0	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _rect$188364[ebp+8]
  03ca6	2b 95 fc fd ff
	ff		 sub	 edx, DWORD PTR _rect$188364[ebp]
  03cac	83 c2 03	 add	 edx, 3
  03caf	89 95 14 fe ff
	ff		 mov	 DWORD PTR _size$188359[ebp], edx

; 1031 : 			size.cx += 3*(size.cx/(int)wcslen(lpstrText));

  03cb5	8b f4		 mov	 esi, esp
  03cb7	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR _lpstrText$188357[ebp]
  03cbd	50		 push	 eax
  03cbe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  03cc4	83 c4 04	 add	 esp, 4
  03cc7	3b f4		 cmp	 esi, esp
  03cc9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03cce	8b c8		 mov	 ecx, eax
  03cd0	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _size$188359[ebp]
  03cd6	99		 cdq
  03cd7	f7 f9		 idiv	 ecx
  03cd9	6b c0 03	 imul	 eax, 3
  03cdc	03 85 14 fe ff
	ff		 add	 eax, DWORD PTR _size$188359[ebp]
  03ce2	89 85 14 fe ff
	ff		 mov	 DWORD PTR _size$188359[ebp], eax
$L188363:

; 1032 : 		}
; 1033 : #endif    
; 1034 : 		
; 1035 : 		CSize t = CSize(size);

  03ce8	8b 95 18 fe ff
	ff		 mov	 edx, DWORD PTR _size$188359[ebp+4]
  03cee	52		 push	 edx
  03cef	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _size$188359[ebp]
  03cf5	50		 push	 eax
  03cf6	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _t$188368[ebp]
  03cfc	e8 00 00 00 00	 call	 ??0CSize@@QAE@UtagSIZE@@@Z ; CSize::CSize

; 1036 : 		if(IsNewShell())

  03d01	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  03d06	85 c0		 test	 eax, eax
  03d08	74 21		 je	 SHORT $L188370

; 1037 : 			pDC->SelectObject (pFont);  // Select old font in

  03d0a	8b f4		 mov	 esi, esp
  03d0c	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR _pFont$188355[ebp]
  03d12	51		 push	 ecx
  03d13	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR _pDC$188354[ebp]
  03d19	8b 02		 mov	 eax, DWORD PTR [edx]
  03d1b	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR _pDC$188354[ebp]
  03d21	ff 50 30	 call	 DWORD PTR [eax+48]
  03d24	3b f4		 cmp	 esi, esp
  03d26	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L188370:

; 1038 : 		pWnd->ReleaseDC(pDC);  // Release the DC

  03d2b	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR _pDC$188354[ebp]
  03d31	51		 push	 ecx
  03d32	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$188352[ebp]
  03d38	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 1039 : 		
; 1040 : 		// Set width and height:
; 1041 : 		
; 1042 : 		if(IsLunaMenuStyle())lpMIS->itemWidth = m_iconX+BCMENU_PAD+8+t.cx;

  03d3d	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  03d42	85 c0		 test	 eax, eax
  03d44	74 1b		 je	 SHORT $L188371
  03d46	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03d4c	03 55 e4	 add	 edx, DWORD PTR _BCMENU_PAD$[ebp]
  03d4f	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _t$188368[ebp]
  03d55	8d 4c 02 08	 lea	 ecx, DWORD PTR [edx+eax+8]
  03d59	8b 55 08	 mov	 edx, DWORD PTR _lpMIS$[ebp]
  03d5c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1043 : 		else lpMIS->itemWidth = m_iconX + t.cx + m_iconX + BCMENU_GAP;

  03d5f	eb 1b		 jmp	 SHORT $L188372
$L188371:
  03d61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03d66	03 85 ec fd ff
	ff		 add	 eax, DWORD PTR _t$188368[ebp]
  03d6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03d72	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  03d76	8b 45 08	 mov	 eax, DWORD PTR _lpMIS$[ebp]
  03d79	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L188372:

; 1044 : 		int temp = GetSystemMetrics(SM_CYMENU);

  03d7c	8b f4		 mov	 esi, esp
  03d7e	6a 0f		 push	 15			; 0000000fH
  03d80	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  03d86	3b f4		 cmp	 esi, esp
  03d88	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03d8d	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _temp$188373[ebp], eax

; 1045 : 		lpMIS->itemHeight = temp>m_iconY+BCMENU_PAD ? temp : m_iconY+BCMENU_PAD;

  03d93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03d99	03 4d e4	 add	 ecx, DWORD PTR _BCMENU_PAD$[ebp]
  03d9c	39 8d e4 fd ff
	ff		 cmp	 DWORD PTR _temp$188373[ebp], ecx
  03da2	7e 0e		 jle	 SHORT $L192309
  03da4	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _temp$188373[ebp]
  03daa	89 95 dc fd ff
	ff		 mov	 DWORD PTR tv209[ebp], edx
  03db0	eb 0e		 jmp	 SHORT $L192310
$L192309:
  03db2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03db7	03 45 e4	 add	 eax, DWORD PTR _BCMENU_PAD$[ebp]
  03dba	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv209[ebp], eax
$L192310:
  03dc0	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  03dc3	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR tv209[ebp]
  03dc9	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1046 : 		m_fontMenu.DeleteObject();

  03dcc	8d 4d d4	 lea	 ecx, DWORD PTR _m_fontMenu$188345[ebp]
  03dcf	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 1047 : 	}

  03dd4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03ddb	8d 4d d4	 lea	 ecx, DWORD PTR _m_fontMenu$188345[ebp]
  03dde	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L188335:

; 1048 : }

  03de3	52		 push	 edx
  03de4	8b cd		 mov	 ecx, ebp
  03de6	50		 push	 eax
  03de7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192323
  03ded	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03df2	58		 pop	 eax
  03df3	5a		 pop	 edx
  03df4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03df7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03dfe	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03e01	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03e06	5f		 pop	 edi
  03e07	5e		 pop	 esi
  03e08	81 c4 24 02 00
	00		 add	 esp, 548		; 00000224H
  03e0e	3b ec		 cmp	 ebp, esp
  03e10	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03e15	8b e5		 mov	 esp, ebp
  03e17	5d		 pop	 ebp
  03e18	c2 04 00	 ret	 4
$L192323:
  03e1b	06 00 00 00	 DD	 6
  03e1f	00 00 00 00	 DD	 $L192322
$L192322:
  03e23	d4 ff ff ff	 DD	 -44			; ffffffd4H
  03e27	08 00 00 00	 DD	 8
  03e2b	00 00 00 00	 DD	 $L192314
  03e2f	90 ff ff ff	 DD	 -112			; ffffff90H
  03e33	3c 00 00 00	 DD	 60			; 0000003cH
  03e37	00 00 00 00	 DD	 $L192315
  03e3b	34 fe ff ff	 DD	 -460			; fffffe34H
  03e3f	54 01 00 00	 DD	 340			; 00000154H
  03e43	00 00 00 00	 DD	 $L192316
  03e47	14 fe ff ff	 DD	 -492			; fffffe14H
  03e4b	08 00 00 00	 DD	 8
  03e4f	00 00 00 00	 DD	 $L192317
  03e53	fc fd ff ff	 DD	 -516			; fffffdfcH
  03e57	10 00 00 00	 DD	 16			; 00000010H
  03e5b	00 00 00 00	 DD	 $L192318
  03e5f	ec fd ff ff	 DD	 -532			; fffffdecH
  03e63	08 00 00 00	 DD	 8
  03e67	00 00 00 00	 DD	 $L192319
$L192319:
  03e6b	74		 DB	 116			; 00000074H
  03e6c	00		 DB	 0
$L192318:
  03e6d	72		 DB	 114			; 00000072H
  03e6e	65		 DB	 101			; 00000065H
  03e6f	63		 DB	 99			; 00000063H
  03e70	74		 DB	 116			; 00000074H
  03e71	00		 DB	 0
$L192317:
  03e72	73		 DB	 115			; 00000073H
  03e73	69		 DB	 105			; 00000069H
  03e74	7a		 DB	 122			; 0000007aH
  03e75	65		 DB	 101			; 00000065H
  03e76	00		 DB	 0
$L192316:
  03e77	6e		 DB	 110			; 0000006eH
  03e78	6d		 DB	 109			; 0000006dH
  03e79	00		 DB	 0
$L192315:
  03e7a	6d		 DB	 109			; 0000006dH
  03e7b	5f		 DB	 95			; 0000005fH
  03e7c	6c		 DB	 108			; 0000006cH
  03e7d	66		 DB	 102			; 00000066H
  03e7e	00		 DB	 0
$L192314:
  03e7f	6d		 DB	 109			; 0000006dH
  03e80	5f		 DB	 95			; 0000005fH
  03e81	66		 DB	 102			; 00000066H
  03e82	6f		 DB	 111			; 0000006fH
  03e83	6e		 DB	 110			; 0000006eH
  03e84	74		 DB	 116			; 00000074H
  03e85	4d		 DB	 77			; 0000004dH
  03e86	65		 DB	 101			; 00000065H
  03e87	6e		 DB	 110			; 0000006eH
  03e88	75		 DB	 117			; 00000075H
  03e89	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192311:
  00233	8d 4d d4	 lea	 ecx, DWORD PTR _m_fontMenu$188345[ebp]
  00236	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
__ehhandler$?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z:
  0023b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192313
  00240	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z ENDP ; BCMenu::MeasureItem
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ?GetWideString@BCMenuData@@QAEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWideString@BCMenuData@@QAEPB_WXZ PROC NEAR		; BCMenuData::GetWideString, COMDAT
; _this$ = ecx

; 45   : 	const wchar_t *GetWideString(void) {return m_szMenuText;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?GetWideString@BCMenuData@@QAEPB_WXZ ENDP		; BCMenuData::GetWideString
_TEXT	ENDS
PUBLIC	?SetIconSize@BCMenu@@SAXHH@Z			; BCMenu::SetIconSize
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?SetIconSize@BCMenu@@SAXHH@Z PROC NEAR			; BCMenu::SetIconSize

; 1051 : {

  03e90	55		 push	 ebp
  03e91	8b ec		 mov	 ebp, esp

; 1052 : 	m_iconX = width;

  03e93	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  03e96	a3 00 00 00 00	 mov	 DWORD PTR ?m_iconX@BCMenu@@1HA, eax ; BCMenu::m_iconX

; 1053 : 	m_iconY = height;

  03e9b	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  03e9e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_iconY@BCMenu@@1HA, ecx ; BCMenu::m_iconY

; 1054 : }

  03ea4	5d		 pop	 ebp
  03ea5	c3		 ret	 0
?SetIconSize@BCMenu@@SAXHH@Z ENDP			; BCMenu::SetIconSize
_TEXT	ENDS
PUBLIC	?AppendODMenuA@BCMenu@@QAEHPBDIIH@Z		; BCMenu::AppendODMenuA
PUBLIC	?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z		; BCMenu::AppendODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192329 = -24						; size = 4
$T192328 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_nIconNormal$ = 20					; size = 4
?AppendODMenuA@BCMenu@@QAEHPBDIIH@Z PROC NEAR		; BCMenu::AppendODMenuA
; _this$ = ecx

; 1058 : {

  03eb0	55		 push	 ebp
  03eb1	8b ec		 mov	 ebp, esp
  03eb3	83 ec 18	 sub	 esp, 24			; 00000018H
  03eb6	56		 push	 esi
  03eb7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03ebc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  03ebf	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  03ec2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  03ec5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  03ec8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  03ecb	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  03ece	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1059 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  03ed1	8b f4		 mov	 esi, esp
  03ed3	6a 00		 push	 0
  03ed5	6a 00		 push	 0
  03ed7	6a ff		 push	 -1
  03ed9	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  03edc	50		 push	 eax
  03edd	6a 00		 push	 0
  03edf	6a 00		 push	 0
  03ee1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  03ee7	3b f4		 cmp	 esi, esp
  03ee9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03eee	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1060 : 	wchar_t* wszUtf8 = new wchar_t[len];

  03ef1	68 24 04 00 00	 push	 1060			; 00000424H
  03ef6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  03efb	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  03efe	d1 e1		 shl	 ecx, 1
  03f00	51		 push	 ecx
  03f01	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  03f06	83 c4 0c	 add	 esp, 12			; 0000000cH
  03f09	89 45 ec	 mov	 DWORD PTR $T192328[ebp], eax
  03f0c	8b 55 ec	 mov	 edx, DWORD PTR $T192328[ebp]
  03f0f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1061 : 	memset(wszUtf8, 0, len * 2);

  03f12	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  03f15	d1 e0		 shl	 eax, 1
  03f17	50		 push	 eax
  03f18	6a 00		 push	 0
  03f1a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03f1d	51		 push	 ecx
  03f1e	e8 00 00 00 00	 call	 _memset
  03f23	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  03f26	8b f4		 mov	 esi, esp
  03f28	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  03f2b	52		 push	 edx
  03f2c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03f2f	50		 push	 eax
  03f30	6a ff		 push	 -1
  03f32	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03f35	51		 push	 ecx
  03f36	6a 00		 push	 0
  03f38	6a 00		 push	 0
  03f3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  03f40	3b f4		 cmp	 esi, esp
  03f42	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1063 : 
; 1064 : 	BOOL bRet = AppendODMenuW( wszUtf8,nFlags,nID,nIconNormal);//SK: See MFC Tech Note 059

  03f47	8b 55 14	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  03f4a	52		 push	 edx
  03f4b	8b 45 10	 mov	 eax, DWORD PTR _nID$[ebp]
  03f4e	50		 push	 eax
  03f4f	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  03f52	51		 push	 ecx
  03f53	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  03f56	52		 push	 edx
  03f57	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03f5a	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW
  03f5f	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1065 : 
; 1066 : 	delete[] wszUtf8;

  03f62	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03f65	89 45 e8	 mov	 DWORD PTR $T192329[ebp], eax
  03f68	8b 4d e8	 mov	 ecx, DWORD PTR $T192329[ebp]
  03f6b	51		 push	 ecx
  03f6c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  03f71	83 c4 04	 add	 esp, 4

; 1067 : 	return bRet;

  03f74	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1068 : }

  03f77	5e		 pop	 esi
  03f78	83 c4 18	 add	 esp, 24			; 00000018H
  03f7b	3b ec		 cmp	 ebp, esp
  03f7d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  03f82	8b e5		 mov	 esp, ebp
  03f84	5d		 pop	 ebp
  03f85	c2 10 00	 ret	 16			; 00000010H
?AppendODMenuA@BCMenu@@QAEHPBDIIH@Z ENDP		; BCMenu::AppendODMenuA
_TEXT	ENDS
PUBLIC	?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ		; BCMenu::RemoveTopLevelOwnerDraw
PUBLIC	?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
PUBLIC	?GlobalImageListOffset@BCMenu@@IAEHH@Z		; BCMenu::GlobalImageListOffset
PUBLIC	?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
PUBLIC	?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
PUBLIC	??0BCMenuData@@QAE@XZ				; BCMenuData::BCMenuData
PUBLIC	?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z		; BCMenu::LoadFromToolBar
PUBLIC	?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
EXTRN	??1CImageList@@UAE@XZ:NEAR			; CImageList::~CImageList
EXTRN	?AppendMenuA@CMenu@@QAEHIIPBD@Z:NEAR		; CMenu::AppendMenuA
EXTRN	??2@YAPAXIPBDH@Z:NEAR				; operator new
EXTRN	??3@YAXPAXPBDH@Z:NEAR				; operator delete
EXTRN	??0CImageList@@QAE@XZ:NEAR			; CImageList::CImageList
EXTRN	?Create@CImageList@@QAEHHHIHH@Z:NEAR		; CImageList::Create
EXTRN	?DeleteImageList@CImageList@@QAEHXZ:NEAR	; CImageList::DeleteImageList
xdata$x	SEGMENT
$T192344 DD	0ffffffffH
	DD	FLAT:$L192335
	DD	0ffffffffH
	DD	FLAT:$L192336
$T192338 DD	019930520H
	DD	02H
	DD	FLAT:$T192344
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv88 = -64						; size = 4
$T192332 = -60						; size = 4
$T192331 = -56						; size = 4
_returnflag$ = -52					; size = 4
_xoffset$188416 = -44					; size = 4
_bitmap$188415 = -32					; size = 8
_mdata$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_nIconNormal$ = 20					; size = 4
?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z PROC NEAR		; BCMenu::AppendODMenuW
; _this$ = ecx

; 1073 : {

  03f90	55		 push	 ebp
  03f91	8b ec		 mov	 ebp, esp
  03f93	6a ff		 push	 -1
  03f95	68 00 00 00 00	 push	 __ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z
  03f9a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03fa0	50		 push	 eax
  03fa1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03fa8	83 ec 34	 sub	 esp, 52			; 00000034H
  03fab	57		 push	 edi
  03fac	51		 push	 ecx
  03fad	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  03fb0	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  03fb5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  03fba	f3 ab		 rep stosd
  03fbc	59		 pop	 ecx
  03fbd	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1074 : 	// Add the MF_OWNERDRAW flag if not specified:
; 1075 : 	if(!nID){

  03fc0	83 7d 10 00	 cmp	 DWORD PTR _nID$[ebp], 0
  03fc4	75 1c		 jne	 SHORT $L188399

; 1076 : 		if(nFlags&MF_BYPOSITION)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  03fc6	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03fc9	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  03fce	74 09		 je	 SHORT $L188400
  03fd0	c7 45 0c 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1077 : 		else nFlags=MF_SEPARATOR|MF_OWNERDRAW;

  03fd7	eb 07		 jmp	 SHORT $L188401
$L188400:
  03fd9	c7 45 0c 00 09
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 2304 ; 00000900H
$L188401:

; 1078 : 	}
; 1079 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  03fe0	eb 17		 jmp	 SHORT $L188402
$L188399:
  03fe2	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  03fe5	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  03feb	75 0c		 jne	 SHORT $L188402
  03fed	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03ff0	81 ca 00 01 00
	00		 or	 edx, 256		; 00000100H
  03ff6	89 55 0c	 mov	 DWORD PTR _nFlags$[ebp], edx
$L188402:

; 1080 : 	
; 1081 : 	if(nFlags & MF_POPUP){

  03ff9	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03ffc	83 e0 10	 and	 eax, 16			; 00000010H
  03fff	74 1d		 je	 SHORT $L188404

; 1082 : 		m_AllSubMenus.Add((HMENU)nID);

  04001	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  04004	51		 push	 ecx
  04005	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0400a	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1083 : 		m_SubMenus.Add((HMENU)nID);

  0400f	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  04012	52		 push	 edx
  04013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04016	83 c1 1c	 add	 ecx, 28			; 0000001cH
  04019	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L188404:

; 1084 : 	}
; 1085 : 	
; 1086 : 	BCMenuData *mdata = new BCMenuData;

  0401e	68 3e 04 00 00	 push	 1086			; 0000043eH
  04023	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  04028	6a 24		 push	 36			; 00000024H
  0402a	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0402f	83 c4 0c	 add	 esp, 12			; 0000000cH
  04032	89 45 c4	 mov	 DWORD PTR $T192332[ebp], eax
  04035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0403c	83 7d c4 00	 cmp	 DWORD PTR $T192332[ebp], 0
  04040	74 0d		 je	 SHORT $L192333
  04042	8b 4d c4	 mov	 ecx, DWORD PTR $T192332[ebp]
  04045	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  0404a	89 45 c0	 mov	 DWORD PTR tv88[ebp], eax
  0404d	eb 07		 jmp	 SHORT $L192334
$L192333:
  0404f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L192334:
  04056	8b 45 c0	 mov	 eax, DWORD PTR tv88[ebp]
  04059	89 45 c8	 mov	 DWORD PTR $T192331[ebp], eax
  0405c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04063	8b 4d c8	 mov	 ecx, DWORD PTR $T192331[ebp]
  04066	89 4d ec	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1087 : 	m_MenuList.Add(mdata);

  04069	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  0406c	52		 push	 edx
  0406d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04070	83 c1 08	 add	 ecx, 8
  04073	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add

; 1088 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  04078	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0407b	50		 push	 eax
  0407c	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0407f	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1089 : 	
; 1090 : 	mdata->menuIconNormal = -1;

  04084	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04087	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1091 : 	mdata->xoffset = -1;

  0408e	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  04091	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1092 : 	
; 1093 : 	if(nIconNormal>=0){

  04098	83 7d 14 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  0409c	0f 8c a5 00 00
	00		 jl	 $L188414

; 1094 : 		CImageList bitmap;

  040a2	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$188415[ebp]
  040a5	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  040aa	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1095 : 		int xoffset=0;

  040b1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _xoffset$188416[ebp], 0

; 1096 : 		LoadFromToolBar(nID,nIconNormal,xoffset);

  040b8	8d 45 d4	 lea	 eax, DWORD PTR _xoffset$188416[ebp]
  040bb	50		 push	 eax
  040bc	8b 4d 14	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  040bf	51		 push	 ecx
  040c0	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  040c3	52		 push	 edx
  040c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  040c7	e8 00 00 00 00	 call	 ?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ; BCMenu::LoadFromToolBar

; 1097 : 		if(mdata->bitmap){

  040cc	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  040cf	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  040d3	74 15		 je	 SHORT $L188417

; 1098 : 			mdata->bitmap->DeleteImageList();

  040d5	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  040d8	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  040db	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1099 : 			mdata->bitmap=NULL;

  040e0	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  040e3	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
$L188417:

; 1100 : 		}
; 1101 : 		bitmap.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  040ea	6a 01		 push	 1
  040ec	6a 01		 push	 1
  040ee	68 ff 00 00 00	 push	 255			; 000000ffH
  040f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  040f8	50		 push	 eax
  040f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  040ff	51		 push	 ecx
  04100	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$188415[ebp]
  04103	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1102 : 		if(AddBitmapToImageList(&bitmap,nIconNormal)){

  04108	8b 55 14	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  0410b	52		 push	 edx
  0410c	8d 45 e0	 lea	 eax, DWORD PTR _bitmap$188415[ebp]
  0410f	50		 push	 eax
  04110	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04113	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  04118	85 c0		 test	 eax, eax
  0411a	74 1a		 je	 SHORT $L188418

; 1103 : 			mdata->global_offset = AddToGlobalImageList(&bitmap,xoffset,nID);

  0411c	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  0411f	51		 push	 ecx
  04120	8b 55 d4	 mov	 edx, DWORD PTR _xoffset$188416[ebp]
  04123	52		 push	 edx
  04124	8d 45 e0	 lea	 eax, DWORD PTR _bitmap$188415[ebp]
  04127	50		 push	 eax
  04128	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0412b	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  04130	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04133	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188418:

; 1104 : 		}
; 1105 : 	}

  04136	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0413d	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$188415[ebp]
  04140	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList

; 1106 : 	else mdata->global_offset = GlobalImageListOffset(nID);

  04145	eb 12		 jmp	 SHORT $L188419
$L188414:
  04147	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  0414a	52		 push	 edx
  0414b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0414e	e8 00 00 00 00	 call	 ?GlobalImageListOffset@BCMenu@@IAEHH@Z ; BCMenu::GlobalImageListOffset
  04153	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04156	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188419:

; 1107 : 
; 1108 : 	mdata->nFlags = nFlags;

  04159	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  0415c	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0415f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1109 : 	mdata->nID = nID;

  04162	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04165	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  04168	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1110 : 	BOOL returnflag=CMenu::AppendMenu(nFlags, nID, (LPCTSTR)mdata);

  0416b	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  0416e	50		 push	 eax
  0416f	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  04172	51		 push	 ecx
  04173	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04176	52		 push	 edx
  04177	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0417a	e8 00 00 00 00	 call	 ?AppendMenuA@CMenu@@QAEHIIPBD@Z ; CMenu::AppendMenuA
  0417f	89 45 cc	 mov	 DWORD PTR _returnflag$[ebp], eax

; 1111 : 	if(m_loadmenu)RemoveTopLevelOwnerDraw();

  04182	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  04185	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  04189	74 08		 je	 SHORT $L188422
  0418b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0418e	e8 00 00 00 00	 call	 ?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ ; BCMenu::RemoveTopLevelOwnerDraw
$L188422:

; 1112 : 	return(returnflag);

  04193	8b 45 cc	 mov	 eax, DWORD PTR _returnflag$[ebp]

; 1113 : }

  04196	52		 push	 edx
  04197	8b cd		 mov	 ecx, ebp
  04199	50		 push	 eax
  0419a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192343
  041a0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  041a5	58		 pop	 eax
  041a6	5a		 pop	 edx
  041a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  041aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  041b1	5f		 pop	 edi
  041b2	83 c4 40	 add	 esp, 64			; 00000040H
  041b5	3b ec		 cmp	 ebp, esp
  041b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  041bc	8b e5		 mov	 esp, ebp
  041be	5d		 pop	 ebp
  041bf	c2 10 00	 ret	 16			; 00000010H
$L192343:
  041c2	02 00 00 00	 DD	 2
  041c6	00 00 00 00	 DD	 $L192342
$L192342:
  041ca	e0 ff ff ff	 DD	 -32			; ffffffe0H
  041ce	08 00 00 00	 DD	 8
  041d2	00 00 00 00	 DD	 $L192339
  041d6	d4 ff ff ff	 DD	 -44			; ffffffd4H
  041da	04 00 00 00	 DD	 4
  041de	00 00 00 00	 DD	 $L192340
$L192340:
  041e2	78		 DB	 120			; 00000078H
  041e3	6f		 DB	 111			; 0000006fH
  041e4	66		 DB	 102			; 00000066H
  041e5	66		 DB	 102			; 00000066H
  041e6	73		 DB	 115			; 00000073H
  041e7	65		 DB	 101			; 00000065H
  041e8	74		 DB	 116			; 00000074H
  041e9	00		 DB	 0
$L192339:
  041ea	62		 DB	 98			; 00000062H
  041eb	69		 DB	 105			; 00000069H
  041ec	74		 DB	 116			; 00000074H
  041ed	6d		 DB	 109			; 0000006dH
  041ee	61		 DB	 97			; 00000061H
  041ef	70		 DB	 112			; 00000070H
  041f0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192335:
  00245	68 3e 04 00 00	 push	 1086			; 0000043eH
  0024a	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0024f	8b 45 c4	 mov	 eax, DWORD PTR $T192332[ebp]
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00258	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025b	c3		 ret	 0
$L192336:
  0025c	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$188415[ebp]
  0025f	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z:
  00264	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192338
  00269	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ENDP		; BCMenu::AppendODMenuW
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ??0BCMenuData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BCMenuData@@QAE@XZ PROC NEAR				; BCMenuData::BCMenuData, COMDAT
; _this$ = ecx

; 41   : 	BCMenuData () {menuIconNormal=-1;xoffset=-1;bitmap=NULL;pContext=NULL;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 42   : 	nFlags=0;nID=0;syncflag=0;m_szMenuText=NULL;global_offset=-1;};

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	c7 42 08 ff ff
	ff ff		 mov	 DWORD PTR [edx+8], -1
  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??0BCMenuData@@QAE@XZ ENDP				; BCMenuData::BCMenuData
_TEXT	ENDS
PUBLIC	?AppendODMenuA@BCMenu@@QAEHPBDIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuA
PUBLIC	?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
$T192348 = -24						; size = 4
$T192347 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendODMenuA@BCMenu@@QAEHPBDIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendODMenuA
; _this$ = ecx

; 1117 : {

  04200	55		 push	 ebp
  04201	8b ec		 mov	 ebp, esp
  04203	83 ec 18	 sub	 esp, 24			; 00000018H
  04206	56		 push	 esi
  04207	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0420c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0420f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  04212	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  04215	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  04218	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0421b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0421e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1118 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  04221	8b f4		 mov	 esi, esp
  04223	6a 00		 push	 0
  04225	6a 00		 push	 0
  04227	6a ff		 push	 -1
  04229	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0422c	50		 push	 eax
  0422d	6a 00		 push	 0
  0422f	6a 00		 push	 0
  04231	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04237	3b f4		 cmp	 esi, esp
  04239	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0423e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1119 : 	wchar_t* wszUtf8 = new wchar_t[len];

  04241	68 5f 04 00 00	 push	 1119			; 0000045fH
  04246	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0424b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0424e	d1 e1		 shl	 ecx, 1
  04250	51		 push	 ecx
  04251	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  04256	83 c4 0c	 add	 esp, 12			; 0000000cH
  04259	89 45 ec	 mov	 DWORD PTR $T192347[ebp], eax
  0425c	8b 55 ec	 mov	 edx, DWORD PTR $T192347[ebp]
  0425f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1120 : 	memset(wszUtf8, 0, len * 2);

  04262	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  04265	d1 e0		 shl	 eax, 1
  04267	50		 push	 eax
  04268	6a 00		 push	 0
  0426a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0426d	51		 push	 ecx
  0426e	e8 00 00 00 00	 call	 _memset
  04273	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  04276	8b f4		 mov	 esi, esp
  04278	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0427b	52		 push	 edx
  0427c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0427f	50		 push	 eax
  04280	6a ff		 push	 -1
  04282	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04285	51		 push	 ecx
  04286	6a 00		 push	 0
  04288	6a 00		 push	 0
  0428a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04290	3b f4		 cmp	 esi, esp
  04292	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1122 : 
; 1123 : 
; 1124 : 	BOOL bRet = AppendODMenuW( wszUtf8,nFlags,nID,il,xoffset);

  04297	8b 55 18	 mov	 edx, DWORD PTR _xoffset$[ebp]
  0429a	52		 push	 edx
  0429b	8b 45 14	 mov	 eax, DWORD PTR _il$[ebp]
  0429e	50		 push	 eax
  0429f	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  042a2	51		 push	 ecx
  042a3	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  042a6	52		 push	 edx
  042a7	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  042aa	50		 push	 eax
  042ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  042ae	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
  042b3	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1125 : 	delete[] wszUtf8;

  042b6	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  042b9	89 4d e8	 mov	 DWORD PTR $T192348[ebp], ecx
  042bc	8b 55 e8	 mov	 edx, DWORD PTR $T192348[ebp]
  042bf	52		 push	 edx
  042c0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  042c5	83 c4 04	 add	 esp, 4

; 1126 : 
; 1127 : 	return bRet;

  042c8	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1128 : }

  042cb	5e		 pop	 esi
  042cc	83 c4 18	 add	 esp, 24			; 00000018H
  042cf	3b ec		 cmp	 ebp, esp
  042d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  042d6	8b e5		 mov	 esp, ebp
  042d8	5d		 pop	 ebp
  042d9	c2 14 00	 ret	 20			; 00000014H
?AppendODMenuA@BCMenu@@QAEHPBDIIPAVCImageList@@H@Z ENDP	; BCMenu::AppendODMenuA
_TEXT	ENDS
PUBLIC	?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z ; BCMenu::ImageListDuplicate
xdata$x	SEGMENT
$T192363 DD	0ffffffffH
	DD	FLAT:$L192358
	DD	0ffffffffH
	DD	FLAT:$L192359
$T192361 DD	019930520H
	DD	02H
	DD	FLAT:$T192363
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv145 = -44						; size = 4
tv88 = -40						; size = 4
$T192355 = -36						; size = 4
$T192354 = -32						; size = 4
$T192351 = -28						; size = 4
$T192350 = -24						; size = 4
_mdata$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendODMenuW
; _this$ = ecx

; 1132 : {

  042e0	55		 push	 ebp
  042e1	8b ec		 mov	 ebp, esp
  042e3	6a ff		 push	 -1
  042e5	68 00 00 00 00	 push	 __ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z
  042ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  042f0	50		 push	 eax
  042f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  042f8	83 ec 20	 sub	 esp, 32			; 00000020H
  042fb	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  04300	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  04303	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  04306	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  04309	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0430c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0430f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  04312	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  04315	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  04318	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1133 : 	// Add the MF_OWNERDRAW flag if not specified:
; 1134 : 	if(!nID){

  0431b	83 7d 10 00	 cmp	 DWORD PTR _nID$[ebp], 0
  0431f	75 1c		 jne	 SHORT $L188446

; 1135 : 		if(nFlags&MF_BYPOSITION)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  04321	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04324	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  04329	74 09		 je	 SHORT $L188447
  0432b	c7 45 0c 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1136 : 		else nFlags=MF_SEPARATOR|MF_OWNERDRAW;

  04332	eb 07		 jmp	 SHORT $L188448
$L188447:
  04334	c7 45 0c 00 09
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 2304 ; 00000900H
$L188448:

; 1137 : 	}
; 1138 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  0433b	eb 17		 jmp	 SHORT $L188449
$L188446:
  0433d	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  04340	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  04346	75 0c		 jne	 SHORT $L188449
  04348	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0434b	81 ca 00 01 00
	00		 or	 edx, 256		; 00000100H
  04351	89 55 0c	 mov	 DWORD PTR _nFlags$[ebp], edx
$L188449:

; 1139 : 	
; 1140 : 	if(nFlags & MF_POPUP){

  04354	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04357	83 e0 10	 and	 eax, 16			; 00000010H
  0435a	74 1d		 je	 SHORT $L188451

; 1141 : 		m_AllSubMenus.Add((HMENU)nID);

  0435c	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  0435f	51		 push	 ecx
  04360	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  04365	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1142 : 		m_SubMenus.Add((HMENU)nID);

  0436a	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  0436d	52		 push	 edx
  0436e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04371	83 c1 1c	 add	 ecx, 28			; 0000001cH
  04374	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L188451:

; 1143 : 	}
; 1144 : 	
; 1145 : 	BCMenuData *mdata = new BCMenuData;

  04379	68 79 04 00 00	 push	 1145			; 00000479H
  0437e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  04383	6a 24		 push	 36			; 00000024H
  04385	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0438a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0438d	89 45 e4	 mov	 DWORD PTR $T192351[ebp], eax
  04390	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  04397	83 7d e4 00	 cmp	 DWORD PTR $T192351[ebp], 0
  0439b	74 0d		 je	 SHORT $L192352
  0439d	8b 4d e4	 mov	 ecx, DWORD PTR $T192351[ebp]
  043a0	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  043a5	89 45 d8	 mov	 DWORD PTR tv88[ebp], eax
  043a8	eb 07		 jmp	 SHORT $L192353
$L192352:
  043aa	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L192353:
  043b1	8b 45 d8	 mov	 eax, DWORD PTR tv88[ebp]
  043b4	89 45 e8	 mov	 DWORD PTR $T192350[ebp], eax
  043b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  043be	8b 4d e8	 mov	 ecx, DWORD PTR $T192350[ebp]
  043c1	89 4d ec	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1146 : 	m_MenuList.Add(mdata);

  043c4	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  043c7	52		 push	 edx
  043c8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  043cb	83 c1 08	 add	 ecx, 8
  043ce	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add

; 1147 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  043d3	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  043d6	50		 push	 eax
  043d7	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  043da	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1148 : 	
; 1149 : 	if(il){

  043df	83 7d 14 00	 cmp	 DWORD PTR _il$[ebp], 0
  043e3	0f 84 8e 00 00
	00		 je	 $L188461

; 1150 : 		mdata->menuIconNormal = 0;

  043e9	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  043ec	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 1151 : 		mdata->xoffset=0;

  043f3	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  043f6	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1152 : 		if(mdata->bitmap)mdata->bitmap->DeleteImageList();

  043fd	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  04400	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  04404	74 0d		 je	 SHORT $L188462
  04406	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04409	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0440c	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1153 : 		else mdata->bitmap=new(CImageList);

  04411	eb 4b		 jmp	 SHORT $L188463
$L188462:
  04413	68 81 04 00 00	 push	 1153			; 00000481H
  04418	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0441d	6a 08		 push	 8
  0441f	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  04424	89 45 dc	 mov	 DWORD PTR $T192355[ebp], eax
  04427	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0442e	83 7d dc 00	 cmp	 DWORD PTR $T192355[ebp], 0
  04432	74 0d		 je	 SHORT $L192356
  04434	8b 4d dc	 mov	 ecx, DWORD PTR $T192355[ebp]
  04437	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0443c	89 45 d4	 mov	 DWORD PTR tv145[ebp], eax
  0443f	eb 07		 jmp	 SHORT $L192357
$L192356:
  04441	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$L192357:
  04448	8b 55 d4	 mov	 edx, DWORD PTR tv145[ebp]
  0444b	89 55 e0	 mov	 DWORD PTR $T192354[ebp], edx
  0444e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04455	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  04458	8b 4d e0	 mov	 ecx, DWORD PTR $T192354[ebp]
  0445b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$L188463:

; 1154 : 		ImageListDuplicate(il,xoffset,mdata->bitmap);

  0445e	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  04461	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  04464	50		 push	 eax
  04465	8b 4d 18	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  04468	51		 push	 ecx
  04469	8b 55 14	 mov	 edx, DWORD PTR _il$[ebp]
  0446c	52		 push	 edx
  0446d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04470	e8 00 00 00 00	 call	 ?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z ; BCMenu::ImageListDuplicate

; 1155 : 	}
; 1156 : 	else{

  04475	eb 14		 jmp	 SHORT $L188470
$L188461:

; 1157 : 		mdata->menuIconNormal = -1;

  04477	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  0447a	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 1158 : 		mdata->xoffset = -1;

  04481	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04484	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
$L188470:

; 1159 : 	}
; 1160 : 	mdata->nFlags = nFlags;

  0448b	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  0448e	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04491	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1161 : 	mdata->nID = nID;

  04494	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04497	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  0449a	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1162 : 	return(CMenu::AppendMenu(nFlags, nID, (LPCTSTR)mdata));

  0449d	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  044a0	50		 push	 eax
  044a1	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  044a4	51		 push	 ecx
  044a5	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  044a8	52		 push	 edx
  044a9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  044ac	e8 00 00 00 00	 call	 ?AppendMenuA@CMenu@@QAEHIIPBD@Z ; CMenu::AppendMenuA

; 1163 : }

  044b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  044b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  044bb	83 c4 2c	 add	 esp, 44			; 0000002cH
  044be	3b ec		 cmp	 ebp, esp
  044c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  044c5	8b e5		 mov	 esp, ebp
  044c7	5d		 pop	 ebp
  044c8	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L192358:
  0026e	68 79 04 00 00	 push	 1145			; 00000479H
  00273	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00278	8b 45 e4	 mov	 eax, DWORD PTR $T192351[ebp]
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00281	83 c4 0c	 add	 esp, 12			; 0000000cH
  00284	c3		 ret	 0
$L192359:
  00285	68 81 04 00 00	 push	 1153			; 00000481H
  0028a	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0028f	8b 45 dc	 mov	 eax, DWORD PTR $T192355[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  00298	c3		 ret	 0
__ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z:
  00299	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192361
  0029e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ENDP ; BCMenu::AppendODMenuW
PUBLIC	?InsertODMenuA@BCMenu@@QAEHIPBDIIH@Z		; BCMenu::InsertODMenuA
PUBLIC	?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z		; BCMenu::InsertODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192366 = -24						; size = 4
$T192365 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_nIconNormal$ = 24					; size = 4
?InsertODMenuA@BCMenu@@QAEHIPBDIIH@Z PROC NEAR		; BCMenu::InsertODMenuA
; _this$ = ecx

; 1167 : {

  044d0	55		 push	 ebp
  044d1	8b ec		 mov	 ebp, esp
  044d3	83 ec 18	 sub	 esp, 24			; 00000018H
  044d6	56		 push	 esi
  044d7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  044dc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  044df	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  044e2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  044e5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  044e8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  044eb	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  044ee	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1168 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  044f1	8b f4		 mov	 esi, esp
  044f3	6a 00		 push	 0
  044f5	6a 00		 push	 0
  044f7	6a ff		 push	 -1
  044f9	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  044fc	50		 push	 eax
  044fd	6a 00		 push	 0
  044ff	6a 00		 push	 0
  04501	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04507	3b f4		 cmp	 esi, esp
  04509	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0450e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1169 : 	wchar_t* wszUtf8 = new wchar_t[len];

  04511	68 91 04 00 00	 push	 1169			; 00000491H
  04516	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0451b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0451e	d1 e1		 shl	 ecx, 1
  04520	51		 push	 ecx
  04521	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  04526	83 c4 0c	 add	 esp, 12			; 0000000cH
  04529	89 45 ec	 mov	 DWORD PTR $T192365[ebp], eax
  0452c	8b 55 ec	 mov	 edx, DWORD PTR $T192365[ebp]
  0452f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1170 : 	memset(wszUtf8, 0, len * 2);

  04532	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  04535	d1 e0		 shl	 eax, 1
  04537	50		 push	 eax
  04538	6a 00		 push	 0
  0453a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0453d	51		 push	 ecx
  0453e	e8 00 00 00 00	 call	 _memset
  04543	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1171 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  04546	8b f4		 mov	 esi, esp
  04548	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0454b	52		 push	 edx
  0454c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0454f	50		 push	 eax
  04550	6a ff		 push	 -1
  04552	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04555	51		 push	 ecx
  04556	6a 00		 push	 0
  04558	6a 00		 push	 0
  0455a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04560	3b f4		 cmp	 esi, esp
  04562	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1172 : 
; 1173 : 
; 1174 : 	BOOL bRet = InsertODMenuW(nPosition,wszUtf8,nFlags,nID,nIconNormal);

  04567	8b 55 18	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  0456a	52		 push	 edx
  0456b	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  0456e	50		 push	 eax
  0456f	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  04572	51		 push	 ecx
  04573	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  04576	52		 push	 edx
  04577	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  0457a	50		 push	 eax
  0457b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0457e	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ; BCMenu::InsertODMenuW
  04583	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1175 : 	delete[] wszUtf8;

  04586	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  04589	89 4d e8	 mov	 DWORD PTR $T192366[ebp], ecx
  0458c	8b 55 e8	 mov	 edx, DWORD PTR $T192366[ebp]
  0458f	52		 push	 edx
  04590	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  04595	83 c4 04	 add	 esp, 4

; 1176 : 
; 1177 : 	return bRet;

  04598	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1178 : }

  0459b	5e		 pop	 esi
  0459c	83 c4 18	 add	 esp, 24			; 00000018H
  0459f	3b ec		 cmp	 ebp, esp
  045a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  045a6	8b e5		 mov	 esp, ebp
  045a8	5d		 pop	 ebp
  045a9	c2 14 00	 ret	 20			; 00000014H
?InsertODMenuA@BCMenu@@QAEHIPBDIIH@Z ENDP		; BCMenu::InsertODMenuA
_TEXT	ENDS
PUBLIC	?GetMenuStart@BCMenu@@IAEHXZ			; BCMenu::GetMenuStart
PUBLIC	?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt
PUBLIC	?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z		; BCMenu::FindMenuOption
EXTRN	?GetMenuItemCount@CMenu@@QBEIXZ:NEAR		; CMenu::GetMenuItemCount
EXTRN	?InsertMenuA@CMenu@@QAEHIIIPBD@Z:NEAR		; CMenu::InsertMenuA
xdata$x	SEGMENT
$T192382 DD	0ffffffffH
	DD	FLAT:$L192372
	DD	0ffffffffH
	DD	FLAT:$L192373
$T192375 DD	019930520H
	DD	02H
	DD	FLAT:$T192382
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv141 = -84						; size = 4
$T192369 = -80						; size = 4
$T192368 = -76						; size = 4
_returnflag$ = -72					; size = 4
_xoffset$188521 = -64					; size = 4
_bitmap$188520 = -52					; size = 8
_mdata$ = -40						; size = 4
_menustart$ = -36					; size = 4
_pMenu$188497 = -32					; size = 4
_iPosition$188496 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_nIconNormal$ = 24					; size = 4
?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z PROC NEAR		; BCMenu::InsertODMenuW
; _this$ = ecx

; 1183 : {

  045b0	55		 push	 ebp
  045b1	8b ec		 mov	 ebp, esp
  045b3	6a ff		 push	 -1
  045b5	68 00 00 00 00	 push	 __ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z
  045ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  045c0	50		 push	 eax
  045c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  045c8	83 ec 48	 sub	 esp, 72			; 00000048H
  045cb	57		 push	 edi
  045cc	51		 push	 ecx
  045cd	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  045d0	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  045d5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  045da	f3 ab		 rep stosd
  045dc	59		 pop	 ecx
  045dd	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1184 : 	if(!(nFlags & MF_BYPOSITION)){

  045e0	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  045e3	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  045e8	75 4e		 jne	 SHORT $L188495

; 1185 : 		int iPosition =0;

  045ea	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iPosition$188496[ebp], 0

; 1186 : 		BCMenu* pMenu = FindMenuOption(nPosition,iPosition);

  045f1	8d 4d e8	 lea	 ecx, DWORD PTR _iPosition$188496[ebp]
  045f4	51		 push	 ecx
  045f5	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  045f8	52		 push	 edx
  045f9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  045fc	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  04601	89 45 e0	 mov	 DWORD PTR _pMenu$188497[ebp], eax

; 1187 : 		if(pMenu){

  04604	83 7d e0 00	 cmp	 DWORD PTR _pMenu$188497[ebp], 0
  04608	74 27		 je	 SHORT $L188498

; 1188 : 			return(pMenu->InsertODMenuW(iPosition,lpstrText,nFlags|MF_BYPOSITION,nID,nIconNormal));

  0460a	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  0460d	50		 push	 eax
  0460e	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  04611	51		 push	 ecx
  04612	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04615	81 ca 00 04 00
	00		 or	 edx, 1024		; 00000400H
  0461b	52		 push	 edx
  0461c	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0461f	50		 push	 eax
  04620	8b 4d e8	 mov	 ecx, DWORD PTR _iPosition$188496[ebp]
  04623	51		 push	 ecx
  04624	8b 4d e0	 mov	 ecx, DWORD PTR _pMenu$188497[ebp]
  04627	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ; BCMenu::InsertODMenuW
  0462c	e9 10 02 00 00	 jmp	 $L188494
$L188498:

; 1189 : 		}
; 1190 : 		else return(FALSE);

  04631	33 c0		 xor	 eax, eax
  04633	e9 09 02 00 00	 jmp	 $L188494
$L188495:

; 1191 : 	}
; 1192 : 	
; 1193 : 	if(!nID)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  04638	83 7d 14 00	 cmp	 DWORD PTR _nID$[ebp], 0
  0463c	75 09		 jne	 SHORT $L188500
  0463e	c7 45 10 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1194 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  04645	eb 16		 jmp	 SHORT $L188501
$L188500:
  04647	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0464a	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  04650	75 0b		 jne	 SHORT $L188501
  04652	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04655	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  0465a	89 45 10	 mov	 DWORD PTR _nFlags$[ebp], eax
$L188501:

; 1195 : 
; 1196 : 	int menustart=0;

  0465d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _menustart$[ebp], 0

; 1197 : 
; 1198 : 	if(nFlags & MF_POPUP){

  04664	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  04667	83 e1 10	 and	 ecx, 16			; 00000010H
  0466a	74 40		 je	 SHORT $L188504

; 1199 : 		if(m_loadmenu){

  0466c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0466f	83 7a 50 00	 cmp	 DWORD PTR [edx+80], 0
  04673	74 1a		 je	 SHORT $L188505

; 1200 : 			menustart=GetMenuStart();

  04675	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04678	e8 00 00 00 00	 call	 ?GetMenuStart@BCMenu@@IAEHXZ ; BCMenu::GetMenuStart
  0467d	89 45 dc	 mov	 DWORD PTR _menustart$[ebp], eax

; 1201 : 			if(nPosition<(UINT)menustart)menustart=0;

  04680	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  04683	3b 45 dc	 cmp	 eax, DWORD PTR _menustart$[ebp]
  04686	73 07		 jae	 SHORT $L188505
  04688	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _menustart$[ebp], 0
$L188505:

; 1202 : 		}
; 1203 : 		m_AllSubMenus.Add((HMENU)nID);

  0468f	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  04692	51		 push	 ecx
  04693	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  04698	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1204 : 		m_SubMenus.Add((HMENU)nID);

  0469d	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  046a0	52		 push	 edx
  046a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  046a4	83 c1 1c	 add	 ecx, 28			; 0000001cH
  046a7	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L188504:

; 1205 : 	}
; 1206 : 
; 1207 : 	//Stephane Clog suggested adding this, believe it or not it's in the help 
; 1208 : 	if(nPosition==(UINT)-1)nPosition=GetMenuItemCount();

  046ac	83 7d 08 ff	 cmp	 DWORD PTR _nPosition$[ebp], -1
  046b0	75 0b		 jne	 SHORT $L188511
  046b2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  046b5	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  046ba	89 45 08	 mov	 DWORD PTR _nPosition$[ebp], eax
$L188511:

; 1209 : 	
; 1210 : 	BCMenuData *mdata = new BCMenuData;

  046bd	68 ba 04 00 00	 push	 1210			; 000004baH
  046c2	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  046c7	6a 24		 push	 36			; 00000024H
  046c9	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  046ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  046d1	89 45 b0	 mov	 DWORD PTR $T192369[ebp], eax
  046d4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  046db	83 7d b0 00	 cmp	 DWORD PTR $T192369[ebp], 0
  046df	74 0d		 je	 SHORT $L192370
  046e1	8b 4d b0	 mov	 ecx, DWORD PTR $T192369[ebp]
  046e4	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  046e9	89 45 ac	 mov	 DWORD PTR tv141[ebp], eax
  046ec	eb 07		 jmp	 SHORT $L192371
$L192370:
  046ee	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$L192371:
  046f5	8b 45 ac	 mov	 eax, DWORD PTR tv141[ebp]
  046f8	89 45 b4	 mov	 DWORD PTR $T192368[ebp], eax
  046fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04702	8b 4d b4	 mov	 ecx, DWORD PTR $T192368[ebp]
  04705	89 4d d8	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1211 : 	m_MenuList.InsertAt(nPosition-menustart,mdata);

  04708	6a 01		 push	 1
  0470a	8b 55 d8	 mov	 edx, DWORD PTR _mdata$[ebp]
  0470d	52		 push	 edx
  0470e	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  04711	2b 45 dc	 sub	 eax, DWORD PTR _menustart$[ebp]
  04714	50		 push	 eax
  04715	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04718	83 c1 08	 add	 ecx, 8
  0471b	e8 00 00 00 00	 call	 ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt

; 1212 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  04720	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04723	51		 push	 ecx
  04724	8b 4d d8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04727	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1213 : 	
; 1214 : 	mdata->menuIconNormal = nIconNormal;

  0472c	8b 55 d8	 mov	 edx, DWORD PTR _mdata$[ebp]
  0472f	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  04732	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1215 : 	mdata->xoffset=-1;

  04735	8b 4d d8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04738	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 1216 : 	if(nIconNormal>=0){

  0473f	83 7d 18 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  04743	0f 8c a5 00 00
	00		 jl	 $L188519

; 1217 : 		CImageList bitmap;

  04749	8d 4d cc	 lea	 ecx, DWORD PTR _bitmap$188520[ebp]
  0474c	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  04751	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1218 : 		int xoffset=0;

  04758	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _xoffset$188521[ebp], 0

; 1219 : 		LoadFromToolBar(nID,nIconNormal,xoffset);

  0475f	8d 55 c0	 lea	 edx, DWORD PTR _xoffset$188521[ebp]
  04762	52		 push	 edx
  04763	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  04766	50		 push	 eax
  04767	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  0476a	51		 push	 ecx
  0476b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0476e	e8 00 00 00 00	 call	 ?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ; BCMenu::LoadFromToolBar

; 1220 : 		if(mdata->bitmap){

  04773	8b 55 d8	 mov	 edx, DWORD PTR _mdata$[ebp]
  04776	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  0477a	74 15		 je	 SHORT $L188522

; 1221 : 			mdata->bitmap->DeleteImageList();

  0477c	8b 45 d8	 mov	 eax, DWORD PTR _mdata$[ebp]
  0477f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  04782	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1222 : 			mdata->bitmap=NULL;

  04787	8b 4d d8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0478a	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$L188522:

; 1223 : 		}
; 1224 : 		bitmap.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  04791	6a 01		 push	 1
  04793	6a 01		 push	 1
  04795	68 ff 00 00 00	 push	 255			; 000000ffH
  0479a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  047a0	52		 push	 edx
  047a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  047a6	50		 push	 eax
  047a7	8d 4d cc	 lea	 ecx, DWORD PTR _bitmap$188520[ebp]
  047aa	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1225 : 		if(AddBitmapToImageList(&bitmap,nIconNormal)){

  047af	8b 4d 18	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  047b2	51		 push	 ecx
  047b3	8d 55 cc	 lea	 edx, DWORD PTR _bitmap$188520[ebp]
  047b6	52		 push	 edx
  047b7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  047ba	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  047bf	85 c0		 test	 eax, eax
  047c1	74 1a		 je	 SHORT $L188523

; 1226 : 			mdata->global_offset = AddToGlobalImageList(&bitmap,xoffset,nID);

  047c3	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  047c6	50		 push	 eax
  047c7	8b 4d c0	 mov	 ecx, DWORD PTR _xoffset$188521[ebp]
  047ca	51		 push	 ecx
  047cb	8d 55 cc	 lea	 edx, DWORD PTR _bitmap$188520[ebp]
  047ce	52		 push	 edx
  047cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  047d2	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  047d7	8b 4d d8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  047da	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188523:

; 1227 : 		}
; 1228 : 	}

  047dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  047e4	8d 4d cc	 lea	 ecx, DWORD PTR _bitmap$188520[ebp]
  047e7	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList

; 1229 : 	else mdata->global_offset = GlobalImageListOffset(nID);

  047ec	eb 12		 jmp	 SHORT $L188524
$L188519:
  047ee	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  047f1	52		 push	 edx
  047f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  047f5	e8 00 00 00 00	 call	 ?GlobalImageListOffset@BCMenu@@IAEHH@Z ; BCMenu::GlobalImageListOffset
  047fa	8b 4d d8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  047fd	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188524:

; 1230 : 	mdata->nFlags = nFlags;

  04800	8b 55 d8	 mov	 edx, DWORD PTR _mdata$[ebp]
  04803	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04806	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1231 : 	mdata->nID = nID;

  04809	8b 4d d8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0480c	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  0480f	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1232 : 	BOOL returnflag=CMenu::InsertMenu(nPosition,nFlags,nID,(LPCTSTR)mdata);

  04812	8b 45 d8	 mov	 eax, DWORD PTR _mdata$[ebp]
  04815	50		 push	 eax
  04816	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  04819	51		 push	 ecx
  0481a	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0481d	52		 push	 edx
  0481e	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  04821	50		 push	 eax
  04822	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04825	e8 00 00 00 00	 call	 ?InsertMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::InsertMenuA
  0482a	89 45 b8	 mov	 DWORD PTR _returnflag$[ebp], eax

; 1233 : 	if(m_loadmenu)RemoveTopLevelOwnerDraw();

  0482d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04830	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  04834	74 08		 je	 SHORT $L188527
  04836	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04839	e8 00 00 00 00	 call	 ?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ ; BCMenu::RemoveTopLevelOwnerDraw
$L188527:

; 1234 : 	return(returnflag);

  0483e	8b 45 b8	 mov	 eax, DWORD PTR _returnflag$[ebp]
$L188494:

; 1235 : }

  04841	52		 push	 edx
  04842	8b cd		 mov	 ecx, ebp
  04844	50		 push	 eax
  04845	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192381
  0484b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  04850	58		 pop	 eax
  04851	5a		 pop	 edx
  04852	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04855	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0485c	5f		 pop	 edi
  0485d	83 c4 54	 add	 esp, 84			; 00000054H
  04860	3b ec		 cmp	 ebp, esp
  04862	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04867	8b e5		 mov	 esp, ebp
  04869	5d		 pop	 ebp
  0486a	c2 14 00	 ret	 20			; 00000014H
$L192381:
  0486d	03 00 00 00	 DD	 3
  04871	00 00 00 00	 DD	 $L192380
$L192380:
  04875	e8 ff ff ff	 DD	 -24			; ffffffe8H
  04879	04 00 00 00	 DD	 4
  0487d	00 00 00 00	 DD	 $L192376
  04881	cc ff ff ff	 DD	 -52			; ffffffccH
  04885	08 00 00 00	 DD	 8
  04889	00 00 00 00	 DD	 $L192377
  0488d	c0 ff ff ff	 DD	 -64			; ffffffc0H
  04891	04 00 00 00	 DD	 4
  04895	00 00 00 00	 DD	 $L192378
$L192378:
  04899	78		 DB	 120			; 00000078H
  0489a	6f		 DB	 111			; 0000006fH
  0489b	66		 DB	 102			; 00000066H
  0489c	66		 DB	 102			; 00000066H
  0489d	73		 DB	 115			; 00000073H
  0489e	65		 DB	 101			; 00000065H
  0489f	74		 DB	 116			; 00000074H
  048a0	00		 DB	 0
$L192377:
  048a1	62		 DB	 98			; 00000062H
  048a2	69		 DB	 105			; 00000069H
  048a3	74		 DB	 116			; 00000074H
  048a4	6d		 DB	 109			; 0000006dH
  048a5	61		 DB	 97			; 00000061H
  048a6	70		 DB	 112			; 00000070H
  048a7	00		 DB	 0
$L192376:
  048a8	69		 DB	 105			; 00000069H
  048a9	50		 DB	 80			; 00000050H
  048aa	6f		 DB	 111			; 0000006fH
  048ab	73		 DB	 115			; 00000073H
  048ac	69		 DB	 105			; 00000069H
  048ad	74		 DB	 116			; 00000074H
  048ae	69		 DB	 105			; 00000069H
  048af	6f		 DB	 111			; 0000006fH
  048b0	6e		 DB	 110			; 0000006eH
  048b1	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192372:
  002a3	68 ba 04 00 00	 push	 1210			; 000004baH
  002a8	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  002ad	8b 45 b0	 mov	 eax, DWORD PTR $T192369[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  002b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b9	c3		 ret	 0
$L192373:
  002ba	8d 4d cc	 lea	 ecx, DWORD PTR _bitmap$188520[ebp]
  002bd	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z:
  002c2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192375
  002c7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ENDP		; BCMenu::InsertODMenuW
PUBLIC	?InsertODMenuA@BCMenu@@QAEHIPBDIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuA
PUBLIC	?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192385 = -24						; size = 4
$T192384 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertODMenuA@BCMenu@@QAEHIPBDIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertODMenuA
; _this$ = ecx

; 1239 : {

  048c0	55		 push	 ebp
  048c1	8b ec		 mov	 ebp, esp
  048c3	83 ec 18	 sub	 esp, 24			; 00000018H
  048c6	56		 push	 esi
  048c7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  048cc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  048cf	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  048d2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  048d5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  048d8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  048db	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  048de	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1240 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  048e1	8b f4		 mov	 esi, esp
  048e3	6a 00		 push	 0
  048e5	6a 00		 push	 0
  048e7	6a ff		 push	 -1
  048e9	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  048ec	50		 push	 eax
  048ed	6a 00		 push	 0
  048ef	6a 00		 push	 0
  048f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  048f7	3b f4		 cmp	 esi, esp
  048f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  048fe	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1241 : 	wchar_t* wszUtf8 = new wchar_t[len];

  04901	68 d9 04 00 00	 push	 1241			; 000004d9H
  04906	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0490b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0490e	d1 e1		 shl	 ecx, 1
  04910	51		 push	 ecx
  04911	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  04916	83 c4 0c	 add	 esp, 12			; 0000000cH
  04919	89 45 ec	 mov	 DWORD PTR $T192384[ebp], eax
  0491c	8b 55 ec	 mov	 edx, DWORD PTR $T192384[ebp]
  0491f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1242 : 	memset(wszUtf8, 0, len * 2);

  04922	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  04925	d1 e0		 shl	 eax, 1
  04927	50		 push	 eax
  04928	6a 00		 push	 0
  0492a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0492d	51		 push	 ecx
  0492e	e8 00 00 00 00	 call	 _memset
  04933	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1243 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  04936	8b f4		 mov	 esi, esp
  04938	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0493b	52		 push	 edx
  0493c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0493f	50		 push	 eax
  04940	6a ff		 push	 -1
  04942	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04945	51		 push	 ecx
  04946	6a 00		 push	 0
  04948	6a 00		 push	 0
  0494a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04950	3b f4		 cmp	 esi, esp
  04952	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1244 : 
; 1245 : 	BOOL bRet = InsertODMenuW(nPosition,wszUtf8,nFlags,nID,il,xoffset);

  04957	8b 55 1c	 mov	 edx, DWORD PTR _xoffset$[ebp]
  0495a	52		 push	 edx
  0495b	8b 45 18	 mov	 eax, DWORD PTR _il$[ebp]
  0495e	50		 push	 eax
  0495f	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  04962	51		 push	 ecx
  04963	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04966	52		 push	 edx
  04967	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0496a	50		 push	 eax
  0496b	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  0496e	51		 push	 ecx
  0496f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04972	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
  04977	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1246 : 	delete[] wszUtf8;

  0497a	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  0497d	89 55 e8	 mov	 DWORD PTR $T192385[ebp], edx
  04980	8b 45 e8	 mov	 eax, DWORD PTR $T192385[ebp]
  04983	50		 push	 eax
  04984	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  04989	83 c4 04	 add	 esp, 4

; 1247 : 
; 1248 : 	return bRet;

  0498c	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1249 : }

  0498f	5e		 pop	 esi
  04990	83 c4 18	 add	 esp, 24			; 00000018H
  04993	3b ec		 cmp	 ebp, esp
  04995	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0499a	8b e5		 mov	 esp, ebp
  0499c	5d		 pop	 ebp
  0499d	c2 18 00	 ret	 24			; 00000018H
?InsertODMenuA@BCMenu@@QAEHIPBDIIPAVCImageList@@H@Z ENDP ; BCMenu::InsertODMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T192398 DD	0ffffffffH
	DD	FLAT:$L192391
$T192393 DD	019930520H
	DD	01H
	DD	FLAT:$T192398
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv137 = -48						; size = 4
$T192388 = -44						; size = 4
$T192387 = -40						; size = 4
_mdata$ = -36						; size = 4
_pMenu$188555 = -32					; size = 4
_iPosition$188554 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertODMenuW
; _this$ = ecx

; 1253 : {

  049a0	55		 push	 ebp
  049a1	8b ec		 mov	 ebp, esp
  049a3	6a ff		 push	 -1
  049a5	68 00 00 00 00	 push	 __ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z
  049aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  049b0	50		 push	 eax
  049b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  049b8	83 ec 24	 sub	 esp, 36			; 00000024H
  049bb	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  049c0	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  049c3	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  049c6	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  049c9	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  049cc	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  049cf	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  049d2	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  049d5	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  049d8	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  049db	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1254 : 	if(!(nFlags & MF_BYPOSITION)){

  049de	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  049e1	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  049e6	75 51		 jne	 SHORT $L188553

; 1255 : 		int iPosition =0;

  049e8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iPosition$188554[ebp], 0

; 1256 : 		BCMenu* pMenu = FindMenuOption(nPosition,iPosition);

  049ef	8d 4d e8	 lea	 ecx, DWORD PTR _iPosition$188554[ebp]
  049f2	51		 push	 ecx
  049f3	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  049f6	52		 push	 edx
  049f7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  049fa	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  049ff	89 45 e0	 mov	 DWORD PTR _pMenu$188555[ebp], eax

; 1257 : 		if(pMenu){

  04a02	83 7d e0 00	 cmp	 DWORD PTR _pMenu$188555[ebp], 0
  04a06	74 2a		 je	 SHORT $L188556

; 1258 : 			return(pMenu->InsertODMenuW(iPosition,lpstrText,nFlags|MF_BYPOSITION,nID,il,xoffset));

  04a08	8b 45 1c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  04a0b	50		 push	 eax
  04a0c	8b 4d 18	 mov	 ecx, DWORD PTR _il$[ebp]
  04a0f	51		 push	 ecx
  04a10	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  04a13	52		 push	 edx
  04a14	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04a17	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  04a1c	50		 push	 eax
  04a1d	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04a20	51		 push	 ecx
  04a21	8b 55 e8	 mov	 edx, DWORD PTR _iPosition$188554[ebp]
  04a24	52		 push	 edx
  04a25	8b 4d e0	 mov	 ecx, DWORD PTR _pMenu$188555[ebp]
  04a28	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
  04a2d	e9 4a 01 00 00	 jmp	 $L188552
$L188556:

; 1259 : 		}
; 1260 : 		else return(FALSE);

  04a32	33 c0		 xor	 eax, eax
  04a34	e9 43 01 00 00	 jmp	 $L188552
$L188553:

; 1261 : 	}
; 1262 : 	
; 1263 : 	if(!nID)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  04a39	83 7d 14 00	 cmp	 DWORD PTR _nID$[ebp], 0
  04a3d	75 09		 jne	 SHORT $L188558
  04a3f	c7 45 10 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1264 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  04a46	eb 16		 jmp	 SHORT $L188559
$L188558:
  04a48	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04a4b	25 00 01 00 00	 and	 eax, 256		; 00000100H
  04a50	75 0c		 jne	 SHORT $L188559
  04a52	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  04a55	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  04a5b	89 4d 10	 mov	 DWORD PTR _nFlags$[ebp], ecx
$L188559:

; 1265 : 	
; 1266 : 	if(nFlags & MF_POPUP){

  04a5e	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04a61	83 e2 10	 and	 edx, 16			; 00000010H
  04a64	74 1d		 je	 SHORT $L188561

; 1267 : 		m_AllSubMenus.Add((HMENU)nID);

  04a66	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  04a69	50		 push	 eax
  04a6a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  04a6f	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1268 : 		m_SubMenus.Add((HMENU)nID);

  04a74	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  04a77	51		 push	 ecx
  04a78	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04a7b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  04a7e	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L188561:

; 1269 : 	}
; 1270 : 	
; 1271 : 	//Stephane Clog suggested adding this, believe it or not it's in the help 
; 1272 : 	if(nPosition==(UINT)-1)nPosition=GetMenuItemCount();

  04a83	83 7d 08 ff	 cmp	 DWORD PTR _nPosition$[ebp], -1
  04a87	75 0b		 jne	 SHORT $L188565
  04a89	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04a8c	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  04a91	89 45 08	 mov	 DWORD PTR _nPosition$[ebp], eax
$L188565:

; 1273 : 	
; 1274 : 	BCMenuData *mdata = new BCMenuData;

  04a94	68 fa 04 00 00	 push	 1274			; 000004faH
  04a99	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  04a9e	6a 24		 push	 36			; 00000024H
  04aa0	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  04aa5	83 c4 0c	 add	 esp, 12			; 0000000cH
  04aa8	89 45 d4	 mov	 DWORD PTR $T192388[ebp], eax
  04aab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  04ab2	83 7d d4 00	 cmp	 DWORD PTR $T192388[ebp], 0
  04ab6	74 0d		 je	 SHORT $L192389
  04ab8	8b 4d d4	 mov	 ecx, DWORD PTR $T192388[ebp]
  04abb	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  04ac0	89 45 d0	 mov	 DWORD PTR tv137[ebp], eax
  04ac3	eb 07		 jmp	 SHORT $L192390
$L192389:
  04ac5	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$L192390:
  04acc	8b 55 d0	 mov	 edx, DWORD PTR tv137[ebp]
  04acf	89 55 d8	 mov	 DWORD PTR $T192387[ebp], edx
  04ad2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04ad9	8b 45 d8	 mov	 eax, DWORD PTR $T192387[ebp]
  04adc	89 45 dc	 mov	 DWORD PTR _mdata$[ebp], eax

; 1275 : 	m_MenuList.InsertAt(nPosition,mdata);

  04adf	6a 01		 push	 1
  04ae1	8b 4d dc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04ae4	51		 push	 ecx
  04ae5	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  04ae8	52		 push	 edx
  04ae9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04aec	83 c1 08	 add	 ecx, 8
  04aef	e8 00 00 00 00	 call	 ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt

; 1276 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  04af4	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  04af7	50		 push	 eax
  04af8	8b 4d dc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04afb	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1277 : 	
; 1278 : 	mdata->menuIconNormal = -1;

  04b00	8b 4d dc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04b03	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1279 : 	mdata->xoffset = -1;

  04b0a	8b 55 dc	 mov	 edx, DWORD PTR _mdata$[ebp]
  04b0d	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1280 : 
; 1281 : 	if(il){

  04b14	83 7d 18 00	 cmp	 DWORD PTR _il$[ebp], 0
  04b18	74 38		 je	 SHORT $L188573

; 1282 : 		if(mdata->bitmap){

  04b1a	8b 45 dc	 mov	 eax, DWORD PTR _mdata$[ebp]
  04b1d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  04b21	74 15		 je	 SHORT $L188574

; 1283 : 			mdata->bitmap->DeleteImageList();

  04b23	8b 4d dc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04b26	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  04b29	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1284 : 			mdata->bitmap=NULL;

  04b2e	8b 55 dc	 mov	 edx, DWORD PTR _mdata$[ebp]
  04b31	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
$L188574:

; 1285 : 		}
; 1286 : 		mdata->global_offset = AddToGlobalImageList(il,xoffset,nID);

  04b38	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  04b3b	50		 push	 eax
  04b3c	8b 4d 1c	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  04b3f	51		 push	 ecx
  04b40	8b 55 18	 mov	 edx, DWORD PTR _il$[ebp]
  04b43	52		 push	 edx
  04b44	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04b47	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  04b4c	8b 4d dc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04b4f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188573:

; 1287 : 	}
; 1288 : 	mdata->nFlags = nFlags;

  04b52	8b 55 dc	 mov	 edx, DWORD PTR _mdata$[ebp]
  04b55	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  04b58	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1289 : 	mdata->nID = nID;

  04b5b	8b 4d dc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04b5e	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  04b61	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1290 : 	return(CMenu::InsertMenu(nPosition,nFlags,nID,(LPCTSTR)mdata));

  04b64	8b 45 dc	 mov	 eax, DWORD PTR _mdata$[ebp]
  04b67	50		 push	 eax
  04b68	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  04b6b	51		 push	 ecx
  04b6c	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04b6f	52		 push	 edx
  04b70	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  04b73	50		 push	 eax
  04b74	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04b77	e8 00 00 00 00	 call	 ?InsertMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::InsertMenuA
$L188552:

; 1291 : }

  04b7c	52		 push	 edx
  04b7d	8b cd		 mov	 ecx, ebp
  04b7f	50		 push	 eax
  04b80	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192397
  04b86	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  04b8b	58		 pop	 eax
  04b8c	5a		 pop	 edx
  04b8d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04b90	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  04b97	83 c4 30	 add	 esp, 48			; 00000030H
  04b9a	3b ec		 cmp	 ebp, esp
  04b9c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04ba1	8b e5		 mov	 esp, ebp
  04ba3	5d		 pop	 ebp
  04ba4	c2 18 00	 ret	 24			; 00000018H
$L192397:
  04ba7	01 00 00 00	 DD	 1
  04bab	00 00 00 00	 DD	 $L192396
$L192396:
  04baf	e8 ff ff ff	 DD	 -24			; ffffffe8H
  04bb3	04 00 00 00	 DD	 4
  04bb7	00 00 00 00	 DD	 $L192394
$L192394:
  04bbb	69		 DB	 105			; 00000069H
  04bbc	50		 DB	 80			; 00000050H
  04bbd	6f		 DB	 111			; 0000006fH
  04bbe	73		 DB	 115			; 00000073H
  04bbf	69		 DB	 105			; 00000069H
  04bc0	74		 DB	 116			; 00000074H
  04bc1	69		 DB	 105			; 00000069H
  04bc2	6f		 DB	 111			; 0000006fH
  04bc3	6e		 DB	 110			; 0000006eH
  04bc4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192391:
  002cc	68 fa 04 00 00	 push	 1274			; 000004faH
  002d1	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  002d6	8b 45 d4	 mov	 eax, DWORD PTR $T192388[ebp]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  002df	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e2	c3		 ret	 0
__ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z:
  002e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192393
  002e8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ENDP ; BCMenu::InsertODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIH@Z		; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z		; BCMenu::ModifyODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192401 = -24						; size = 4
$T192400 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIH@Z PROC NEAR		; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1294 : {

  04bd0	55		 push	 ebp
  04bd1	8b ec		 mov	 ebp, esp
  04bd3	83 ec 18	 sub	 esp, 24			; 00000018H
  04bd6	56		 push	 esi
  04bd7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  04bdc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  04bdf	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  04be2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  04be5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  04be8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  04beb	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  04bee	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1295 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  04bf1	8b f4		 mov	 esi, esp
  04bf3	6a 00		 push	 0
  04bf5	6a 00		 push	 0
  04bf7	6a ff		 push	 -1
  04bf9	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  04bfc	50		 push	 eax
  04bfd	6a 00		 push	 0
  04bff	6a 00		 push	 0
  04c01	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04c07	3b f4		 cmp	 esi, esp
  04c09	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04c0e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1296 : 	wchar_t* wszUtf8 = new wchar_t[len];

  04c11	68 10 05 00 00	 push	 1296			; 00000510H
  04c16	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  04c1b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  04c1e	d1 e1		 shl	 ecx, 1
  04c20	51		 push	 ecx
  04c21	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  04c26	83 c4 0c	 add	 esp, 12			; 0000000cH
  04c29	89 45 ec	 mov	 DWORD PTR $T192400[ebp], eax
  04c2c	8b 55 ec	 mov	 edx, DWORD PTR $T192400[ebp]
  04c2f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1297 : 	memset(wszUtf8, 0, len * 2);

  04c32	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  04c35	d1 e0		 shl	 eax, 1
  04c37	50		 push	 eax
  04c38	6a 00		 push	 0
  04c3a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  04c3d	51		 push	 ecx
  04c3e	e8 00 00 00 00	 call	 _memset
  04c43	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1298 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  04c46	8b f4		 mov	 esi, esp
  04c48	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  04c4b	52		 push	 edx
  04c4c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  04c4f	50		 push	 eax
  04c50	6a ff		 push	 -1
  04c52	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04c55	51		 push	 ecx
  04c56	6a 00		 push	 0
  04c58	6a 00		 push	 0
  04c5a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04c60	3b f4		 cmp	 esi, esp
  04c62	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1299 : 
; 1300 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,nIconNormal);//SK: see MFC Tech Note 059

  04c67	8b 55 10	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  04c6a	52		 push	 edx
  04c6b	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  04c6e	50		 push	 eax
  04c6f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  04c72	51		 push	 ecx
  04c73	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  04c76	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z ; BCMenu::ModifyODMenuW
  04c7b	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1301 : 	delete[] wszUtf8;

  04c7e	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  04c81	89 55 e8	 mov	 DWORD PTR $T192401[ebp], edx
  04c84	8b 45 e8	 mov	 eax, DWORD PTR $T192401[ebp]
  04c87	50		 push	 eax
  04c88	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  04c8d	83 c4 04	 add	 esp, 4

; 1302 : 	return bRet;

  04c90	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1303 : }

  04c93	5e		 pop	 esi
  04c94	83 c4 18	 add	 esp, 24			; 00000018H
  04c97	3b ec		 cmp	 ebp, esp
  04c99	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04c9e	8b e5		 mov	 esp, ebp
  04ca0	5d		 pop	 ebp
  04ca1	c2 0c 00	 ret	 12			; 0000000cH
?ModifyODMenuA@BCMenu@@QAEHPBDIH@Z ENDP			; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ		; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
PUBLIC	??0?$CArray@HAAH@@QAE@XZ			; CArray<int,int &>::CArray<int,int &>
PUBLIC	?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::Add
PUBLIC	?Add@?$CArray@HAAH@@QAEHAAH@Z			; CArray<int,int &>::Add
PUBLIC	??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ		; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
PUBLIC	??1?$CArray@HAAH@@UAE@XZ			; CArray<int,int &>::~CArray<int,int &>
PUBLIC	?SetMenuItemBkColor@BCMenu@@QAEXK@Z		; BCMenu::SetMenuItemBkColor
PUBLIC	?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z	; BCMenu::SetMenuItemBitmapBkColor
PUBLIC	?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
EXTRN	?ModifyMenuA@CMenu@@QAEHIIIPBD@Z:NEAR		; CMenu::ModifyMenuA
xdata$x	SEGMENT
$T192423 DD	0ffffffffH
	DD	FLAT:$L192409
	DD	00H
	DD	FLAT:$L192410
	DD	01H
	DD	FLAT:$L192411
	DD	01H
	DD	FLAT:$L192412
$T192414 DD	019930520H
	DD	04H
	DD	FLAT:$T192423
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv129 = -136						; size = 4
$T192408 = -132						; size = 4
$T192404 = -128						; size = 4
$T192403 = -124						; size = 4
_xoffset$188680 = -116					; size = 4
_bitmap$188679 = -104					; size = 8
_psubmenu$ = -92					; size = 4
_bclocs$ = -84						; size = 20
_bcsubs$ = -56						; size = 20
_mdata$ = -32						; size = 4
_nLoc$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z PROC NEAR		; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1306 : {

  04cb0	55		 push	 ebp
  04cb1	8b ec		 mov	 ebp, esp
  04cb3	6a ff		 push	 -1
  04cb5	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z
  04cba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  04cc0	50		 push	 eax
  04cc1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  04cc8	83 ec 7c	 sub	 esp, 124		; 0000007cH
  04ccb	57		 push	 edi
  04ccc	51		 push	 ecx
  04ccd	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-136]
  04cd3	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  04cd8	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  04cdd	f3 ab		 rep stosd
  04cdf	59		 pop	 ecx
  04ce0	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1307 : 	int nLoc;
; 1308 : 	BCMenuData *mdata;
; 1309 : 	CArray<BCMenu*,BCMenu*>bcsubs;

  04ce3	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  04ce6	e8 00 00 00 00	 call	 ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ ; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
  04ceb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1310 : 	CArray<int,int&>bclocs;

  04cf2	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  04cf5	e8 00 00 00 00	 call	 ??0?$CArray@HAAH@@QAE@XZ ; CArray<int,int &>::CArray<int,int &>
  04cfa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1311 : 	
; 1312 : 	// Find the old BCMenuData structure:
; 1313 : 	BCMenu *psubmenu = FindMenuOption(nID,nLoc);

  04cfe	8d 45 e8	 lea	 eax, DWORD PTR _nLoc$[ebp]
  04d01	50		 push	 eax
  04d02	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  04d05	51		 push	 ecx
  04d06	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04d09	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  04d0e	89 45 a4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1314 : 
; 1315 : //added by vito--
; 1316 : 	psubmenu->SetMenuItemBkColor( m_menuItemBkColor );

  04d11	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  04d14	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  04d17	50		 push	 eax
  04d18	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  04d1b	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 1317 : 	psubmenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  04d20	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04d23	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  04d26	52		 push	 edx
  04d27	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  04d2a	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor
$L188665:

; 1318 : //--
; 1319 : 
; 1320 : 	do{
; 1321 : 		if(psubmenu && nLoc>=0)mdata = psubmenu->m_MenuList[nLoc];

  04d2f	83 7d a4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  04d33	74 1c		 je	 SHORT $L188668
  04d35	83 7d e8 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  04d39	7c 16		 jl	 SHORT $L188668
  04d3b	8b 45 e8	 mov	 eax, DWORD PTR _nLoc$[ebp]
  04d3e	50		 push	 eax
  04d3f	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  04d42	83 c1 08	 add	 ecx, 8
  04d45	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  04d4a	8b 08		 mov	 ecx, DWORD PTR [eax]
  04d4c	89 4d e0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1322 : 		else{

  04d4f	eb 5d		 jmp	 SHORT $L188669
$L188668:

; 1323 : 			// Create a new BCMenuData structure:
; 1324 : 			mdata = new BCMenuData;

  04d51	68 2c 05 00 00	 push	 1324			; 0000052cH
  04d56	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  04d5b	6a 24		 push	 36			; 00000024H
  04d5d	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  04d62	83 c4 0c	 add	 esp, 12			; 0000000cH
  04d65	89 45 80	 mov	 DWORD PTR $T192404[ebp], eax
  04d68	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  04d6c	83 7d 80 00	 cmp	 DWORD PTR $T192404[ebp], 0
  04d70	74 10		 je	 SHORT $L192405
  04d72	8b 4d 80	 mov	 ecx, DWORD PTR $T192404[ebp]
  04d75	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  04d7a	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], eax
  04d80	eb 0a		 jmp	 SHORT $L192406
$L192405:
  04d82	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$L192406:
  04d8c	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv129[ebp]
  04d92	89 55 84	 mov	 DWORD PTR $T192403[ebp], edx
  04d95	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04d99	8b 45 84	 mov	 eax, DWORD PTR $T192403[ebp]
  04d9c	89 45 e0	 mov	 DWORD PTR _mdata$[ebp], eax

; 1325 : 			m_MenuList.Add(mdata);

  04d9f	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04da2	51		 push	 ecx
  04da3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04da6	83 c1 08	 add	 ecx, 8
  04da9	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L188669:

; 1326 : 		}
; 1327 : 		
; 1328 : 		ASSERT(mdata);

  04dae	83 7d e0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  04db2	75 14		 jne	 SHORT $L192407
  04db4	68 30 05 00 00	 push	 1328			; 00000530H
  04db9	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  04dbe	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  04dc3	85 c0		 test	 eax, eax
  04dc5	74 01		 je	 SHORT $L192407
  04dc7	cc		 int	 3
$L192407:

; 1329 : 		if(lpstrText)

  04dc8	83 7d 08 00	 cmp	 DWORD PTR _lpstrText$[ebp], 0
  04dcc	74 0c		 je	 SHORT $L188677

; 1330 : 			mdata->SetWideString(lpstrText);  //SK: modified for dynamic allocation

  04dce	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  04dd1	50		 push	 eax
  04dd2	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04dd5	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString
$L188677:

; 1331 : 		mdata->menuIconNormal = -1;

  04dda	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04ddd	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1332 : 		mdata->xoffset = -1;

  04de4	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04de7	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1333 : 		if(nIconNormal>=0){

  04dee	83 7d 10 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  04df2	0f 8c 9f 00 00
	00		 jl	 $L188678

; 1334 : 			CImageList bitmap;

  04df8	8d 4d 98	 lea	 ecx, DWORD PTR _bitmap$188679[ebp]
  04dfb	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  04e00	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1335 : 			int xoffset=0;

  04e04	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _xoffset$188680[ebp], 0

; 1336 : 			LoadFromToolBar(nID,nIconNormal,xoffset);

  04e0b	8d 45 8c	 lea	 eax, DWORD PTR _xoffset$188680[ebp]
  04e0e	50		 push	 eax
  04e0f	8b 4d 10	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  04e12	51		 push	 ecx
  04e13	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  04e16	52		 push	 edx
  04e17	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04e1a	e8 00 00 00 00	 call	 ?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ; BCMenu::LoadFromToolBar

; 1337 : 			if(mdata->bitmap){

  04e1f	8b 45 e0	 mov	 eax, DWORD PTR _mdata$[ebp]
  04e22	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  04e26	74 15		 je	 SHORT $L188681

; 1338 : 				mdata->bitmap->DeleteImageList();

  04e28	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04e2b	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  04e2e	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1339 : 				mdata->bitmap=NULL;

  04e33	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04e36	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
$L188681:

; 1340 : 			}
; 1341 : 			bitmap.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  04e3d	6a 01		 push	 1
  04e3f	6a 01		 push	 1
  04e41	68 ff 00 00 00	 push	 255			; 000000ffH
  04e46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  04e4b	50		 push	 eax
  04e4c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  04e52	51		 push	 ecx
  04e53	8d 4d 98	 lea	 ecx, DWORD PTR _bitmap$188679[ebp]
  04e56	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1342 : 			if(AddBitmapToImageList(&bitmap,nIconNormal)){

  04e5b	8b 55 10	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  04e5e	52		 push	 edx
  04e5f	8d 45 98	 lea	 eax, DWORD PTR _bitmap$188679[ebp]
  04e62	50		 push	 eax
  04e63	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04e66	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  04e6b	85 c0		 test	 eax, eax
  04e6d	74 1a		 je	 SHORT $L188682

; 1343 : 				mdata->global_offset = AddToGlobalImageList(&bitmap,xoffset,nID);

  04e6f	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  04e72	51		 push	 ecx
  04e73	8b 55 8c	 mov	 edx, DWORD PTR _xoffset$188680[ebp]
  04e76	52		 push	 edx
  04e77	8d 45 98	 lea	 eax, DWORD PTR _bitmap$188679[ebp]
  04e7a	50		 push	 eax
  04e7b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04e7e	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  04e83	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04e86	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188682:

; 1344 : 			}
; 1345 : 		}

  04e89	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04e8d	8d 4d 98	 lea	 ecx, DWORD PTR _bitmap$188679[ebp]
  04e90	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList

; 1346 : 		else mdata->global_offset = GlobalImageListOffset(nID);

  04e95	eb 12		 jmp	 SHORT $L188683
$L188678:
  04e97	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  04e9a	52		 push	 edx
  04e9b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04e9e	e8 00 00 00 00	 call	 ?GlobalImageListOffset@BCMenu@@IAEHH@Z ; BCMenu::GlobalImageListOffset
  04ea3	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04ea6	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188683:

; 1347 : 		mdata->nFlags &= ~(MF_BYPOSITION);

  04ea9	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04eac	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  04eaf	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  04eb4	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04eb7	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1348 : 		mdata->nFlags |= MF_OWNERDRAW;

  04eba	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04ebd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  04ec0	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  04ec5	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04ec8	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1349 : 		mdata->nID = nID;

  04ecb	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04ece	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  04ed1	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1350 : 		bcsubs.Add(psubmenu);

  04ed4	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  04ed7	51		 push	 ecx
  04ed8	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  04edb	e8 00 00 00 00	 call	 ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::Add

; 1351 : 		bclocs.Add(nLoc);

  04ee0	8d 55 e8	 lea	 edx, DWORD PTR _nLoc$[ebp]
  04ee3	52		 push	 edx
  04ee4	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  04ee7	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 1352 : 		if(psubmenu && nLoc>=0)psubmenu = FindAnotherMenuOption(nID,nLoc,bcsubs,bclocs);

  04eec	83 7d a4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  04ef0	74 23		 je	 SHORT $L188684
  04ef2	83 7d e8 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  04ef6	7c 1d		 jl	 SHORT $L188684
  04ef8	8d 45 ac	 lea	 eax, DWORD PTR _bclocs$[ebp]
  04efb	50		 push	 eax
  04efc	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  04eff	51		 push	 ecx
  04f00	8d 55 e8	 lea	 edx, DWORD PTR _nLoc$[ebp]
  04f03	52		 push	 edx
  04f04	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  04f07	50		 push	 eax
  04f08	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04f0b	e8 00 00 00 00	 call	 ?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
  04f10	89 45 a4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1353 : 		else psubmenu=NULL;

  04f13	eb 07		 jmp	 SHORT $L188666
$L188684:
  04f15	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _psubmenu$[ebp], 0
$L188666:

; 1354 : 	}while(psubmenu);

  04f1c	83 7d a4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  04f20	0f 85 09 fe ff
	ff		 jne	 $L188665

; 1355 : 	return (CMenu::ModifyMenu(nID,mdata->nFlags,nID,(LPCTSTR)mdata));

  04f26	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04f29	51		 push	 ecx
  04f2a	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  04f2d	52		 push	 edx
  04f2e	8b 45 e0	 mov	 eax, DWORD PTR _mdata$[ebp]
  04f31	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  04f34	51		 push	 ecx
  04f35	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  04f38	52		 push	 edx
  04f39	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04f3c	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
  04f41	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T192408[ebp], eax
  04f47	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04f4b	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  04f4e	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  04f53	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04f5a	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  04f5d	e8 00 00 00 00	 call	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
  04f62	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T192408[ebp]

; 1356 : }

  04f68	52		 push	 edx
  04f69	8b cd		 mov	 ecx, ebp
  04f6b	50		 push	 eax
  04f6c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192422
  04f72	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  04f77	58		 pop	 eax
  04f78	5a		 pop	 edx
  04f79	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04f7c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  04f83	5f		 pop	 edi
  04f84	81 c4 88 00 00
	00		 add	 esp, 136		; 00000088H
  04f8a	3b ec		 cmp	 ebp, esp
  04f8c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  04f91	8b e5		 mov	 esp, ebp
  04f93	5d		 pop	 ebp
  04f94	c2 0c 00	 ret	 12			; 0000000cH
$L192422:
  04f97	05 00 00 00	 DD	 5
  04f9b	00 00 00 00	 DD	 $L192421
$L192421:
  04f9f	e8 ff ff ff	 DD	 -24			; ffffffe8H
  04fa3	04 00 00 00	 DD	 4
  04fa7	00 00 00 00	 DD	 $L192415
  04fab	c8 ff ff ff	 DD	 -56			; ffffffc8H
  04faf	14 00 00 00	 DD	 20			; 00000014H
  04fb3	00 00 00 00	 DD	 $L192416
  04fb7	ac ff ff ff	 DD	 -84			; ffffffacH
  04fbb	14 00 00 00	 DD	 20			; 00000014H
  04fbf	00 00 00 00	 DD	 $L192417
  04fc3	98 ff ff ff	 DD	 -104			; ffffff98H
  04fc7	08 00 00 00	 DD	 8
  04fcb	00 00 00 00	 DD	 $L192418
  04fcf	8c ff ff ff	 DD	 -116			; ffffff8cH
  04fd3	04 00 00 00	 DD	 4
  04fd7	00 00 00 00	 DD	 $L192419
$L192419:
  04fdb	78		 DB	 120			; 00000078H
  04fdc	6f		 DB	 111			; 0000006fH
  04fdd	66		 DB	 102			; 00000066H
  04fde	66		 DB	 102			; 00000066H
  04fdf	73		 DB	 115			; 00000073H
  04fe0	65		 DB	 101			; 00000065H
  04fe1	74		 DB	 116			; 00000074H
  04fe2	00		 DB	 0
$L192418:
  04fe3	62		 DB	 98			; 00000062H
  04fe4	69		 DB	 105			; 00000069H
  04fe5	74		 DB	 116			; 00000074H
  04fe6	6d		 DB	 109			; 0000006dH
  04fe7	61		 DB	 97			; 00000061H
  04fe8	70		 DB	 112			; 00000070H
  04fe9	00		 DB	 0
$L192417:
  04fea	62		 DB	 98			; 00000062H
  04feb	63		 DB	 99			; 00000063H
  04fec	6c		 DB	 108			; 0000006cH
  04fed	6f		 DB	 111			; 0000006fH
  04fee	63		 DB	 99			; 00000063H
  04fef	73		 DB	 115			; 00000073H
  04ff0	00		 DB	 0
$L192416:
  04ff1	62		 DB	 98			; 00000062H
  04ff2	63		 DB	 99			; 00000063H
  04ff3	73		 DB	 115			; 00000073H
  04ff4	75		 DB	 117			; 00000075H
  04ff5	62		 DB	 98			; 00000062H
  04ff6	73		 DB	 115			; 00000073H
  04ff7	00		 DB	 0
$L192415:
  04ff8	6e		 DB	 110			; 0000006eH
  04ff9	4c		 DB	 76			; 0000004cH
  04ffa	6f		 DB	 111			; 0000006fH
  04ffb	63		 DB	 99			; 00000063H
  04ffc	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192409:
  002ed	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  002f0	e9 00 00 00 00	 jmp	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
$L192410:
  002f5	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  002f8	e9 00 00 00 00	 jmp	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
$L192411:
  002fd	68 2c 05 00 00	 push	 1324			; 0000052cH
  00302	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00307	8b 45 80	 mov	 eax, DWORD PTR $T192404[ebp]
  0030a	50		 push	 eax
  0030b	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00310	83 c4 0c	 add	 esp, 12			; 0000000cH
  00313	c3		 ret	 0
$L192412:
  00314	8d 4d 98	 lea	 ecx, DWORD PTR _bitmap$188679[ebp]
  00317	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z:
  0031c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192414
  00321	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z ENDP		; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192426 = -24						; size = 4
$T192425 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_il$ = 16						; size = 4
_xoffset$ = 20						; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z PROC NEAR ; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1359 : {

  05000	55		 push	 ebp
  05001	8b ec		 mov	 ebp, esp
  05003	83 ec 18	 sub	 esp, 24			; 00000018H
  05006	56		 push	 esi
  05007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0500c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0500f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  05012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  05015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  05018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0501b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0501e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1360 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  05021	8b f4		 mov	 esi, esp
  05023	6a 00		 push	 0
  05025	6a 00		 push	 0
  05027	6a ff		 push	 -1
  05029	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0502c	50		 push	 eax
  0502d	6a 00		 push	 0
  0502f	6a 00		 push	 0
  05031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  05037	3b f4		 cmp	 esi, esp
  05039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0503e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1361 : 	wchar_t* wszUtf8 = new wchar_t[len];

  05041	68 51 05 00 00	 push	 1361			; 00000551H
  05046	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0504b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0504e	d1 e1		 shl	 ecx, 1
  05050	51		 push	 ecx
  05051	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  05056	83 c4 0c	 add	 esp, 12			; 0000000cH
  05059	89 45 ec	 mov	 DWORD PTR $T192425[ebp], eax
  0505c	8b 55 ec	 mov	 edx, DWORD PTR $T192425[ebp]
  0505f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1362 : 	memset(wszUtf8, 0, len * 2);

  05062	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  05065	d1 e0		 shl	 eax, 1
  05067	50		 push	 eax
  05068	6a 00		 push	 0
  0506a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0506d	51		 push	 ecx
  0506e	e8 00 00 00 00	 call	 _memset
  05073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1363 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  05076	8b f4		 mov	 esi, esp
  05078	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0507b	52		 push	 edx
  0507c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0507f	50		 push	 eax
  05080	6a ff		 push	 -1
  05082	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  05085	51		 push	 ecx
  05086	6a 00		 push	 0
  05088	6a 00		 push	 0
  0508a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  05090	3b f4		 cmp	 esi, esp
  05092	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1364 : 
; 1365 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,il,xoffset);

  05097	8b 55 14	 mov	 edx, DWORD PTR _xoffset$[ebp]
  0509a	52		 push	 edx
  0509b	8b 45 10	 mov	 eax, DWORD PTR _il$[ebp]
  0509e	50		 push	 eax
  0509f	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  050a2	51		 push	 ecx
  050a3	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  050a6	52		 push	 edx
  050a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  050aa	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
  050af	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1366 : 
; 1367 : 	delete[] wszUtf8;

  050b2	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  050b5	89 45 e8	 mov	 DWORD PTR $T192426[ebp], eax
  050b8	8b 4d e8	 mov	 ecx, DWORD PTR $T192426[ebp]
  050bb	51		 push	 ecx
  050bc	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  050c1	83 c4 04	 add	 esp, 4

; 1368 : 	return bRet;

  050c4	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1369 : }

  050c7	5e		 pop	 esi
  050c8	83 c4 18	 add	 esp, 24			; 00000018H
  050cb	3b ec		 cmp	 ebp, esp
  050cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  050d2	8b e5		 mov	 esp, ebp
  050d4	5d		 pop	 ebp
  050d5	c2 10 00	 ret	 16			; 00000010H
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z ENDP	; BCMenu::ModifyODMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T192445 DD	0ffffffffH
	DD	FLAT:$L192434
	DD	00H
	DD	FLAT:$L192435
	DD	01H
	DD	FLAT:$L192436
$T192438 DD	019930520H
	DD	03H
	DD	FLAT:$T192445
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv129 = -108						; size = 4
$T192433 = -104						; size = 4
$T192429 = -100						; size = 4
$T192428 = -96						; size = 4
_psubmenu$ = -92					; size = 4
_bclocs$ = -84						; size = 20
_bcsubs$ = -56						; size = 20
_mdata$ = -32						; size = 4
_nLoc$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_il$ = 16						; size = 4
_xoffset$ = 20						; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z PROC NEAR ; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1372 : {

  050e0	55		 push	 ebp
  050e1	8b ec		 mov	 ebp, esp
  050e3	6a ff		 push	 -1
  050e5	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z
  050ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  050f0	50		 push	 eax
  050f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  050f8	83 ec 60	 sub	 esp, 96			; 00000060H
  050fb	57		 push	 edi
  050fc	51		 push	 ecx
  050fd	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  05100	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  05105	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0510a	f3 ab		 rep stosd
  0510c	59		 pop	 ecx
  0510d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1373 : 	int nLoc;
; 1374 : 	BCMenuData *mdata;
; 1375 : 	CArray<BCMenu*,BCMenu*>bcsubs;

  05110	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  05113	e8 00 00 00 00	 call	 ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ ; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
  05118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1376 : 	CArray<int,int&>bclocs;

  0511f	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  05122	e8 00 00 00 00	 call	 ??0?$CArray@HAAH@@QAE@XZ ; CArray<int,int &>::CArray<int,int &>
  05127	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1377 : 	
; 1378 : 	// Find the old BCMenuData structure:
; 1379 : 	BCMenu *psubmenu = FindMenuOption(nID,nLoc);

  0512b	8d 45 e8	 lea	 eax, DWORD PTR _nLoc$[ebp]
  0512e	50		 push	 eax
  0512f	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  05132	51		 push	 ecx
  05133	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05136	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  0513b	89 45 a4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1380 : //added by vito--
; 1381 : 	psubmenu->SetMenuItemBkColor( m_menuItemBkColor );

  0513e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  05141	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  05144	50		 push	 eax
  05145	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  05148	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 1382 : 	psubmenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  0514d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05150	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  05153	52		 push	 edx
  05154	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  05157	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor
$L188714:

; 1383 : //--
; 1384 : 	do{
; 1385 : 		if(psubmenu && nLoc>=0)mdata = psubmenu->m_MenuList[nLoc];

  0515c	83 7d a4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  05160	74 1c		 je	 SHORT $L188717
  05162	83 7d e8 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  05166	7c 16		 jl	 SHORT $L188717
  05168	8b 45 e8	 mov	 eax, DWORD PTR _nLoc$[ebp]
  0516b	50		 push	 eax
  0516c	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  0516f	83 c1 08	 add	 ecx, 8
  05172	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05177	8b 08		 mov	 ecx, DWORD PTR [eax]
  05179	89 4d e0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1386 : 		else{

  0517c	eb 54		 jmp	 SHORT $L188718
$L188717:

; 1387 : 			// Create a new BCMenuData structure:
; 1388 : 			mdata = new BCMenuData;

  0517e	68 6c 05 00 00	 push	 1388			; 0000056cH
  05183	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05188	6a 24		 push	 36			; 00000024H
  0518a	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0518f	83 c4 0c	 add	 esp, 12			; 0000000cH
  05192	89 45 9c	 mov	 DWORD PTR $T192429[ebp], eax
  05195	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05199	83 7d 9c 00	 cmp	 DWORD PTR $T192429[ebp], 0
  0519d	74 0d		 je	 SHORT $L192430
  0519f	8b 4d 9c	 mov	 ecx, DWORD PTR $T192429[ebp]
  051a2	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  051a7	89 45 94	 mov	 DWORD PTR tv129[ebp], eax
  051aa	eb 07		 jmp	 SHORT $L192431
$L192430:
  051ac	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$L192431:
  051b3	8b 55 94	 mov	 edx, DWORD PTR tv129[ebp]
  051b6	89 55 a0	 mov	 DWORD PTR $T192428[ebp], edx
  051b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  051bd	8b 45 a0	 mov	 eax, DWORD PTR $T192428[ebp]
  051c0	89 45 e0	 mov	 DWORD PTR _mdata$[ebp], eax

; 1389 : 			m_MenuList.Add(mdata);

  051c3	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  051c6	51		 push	 ecx
  051c7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  051ca	83 c1 08	 add	 ecx, 8
  051cd	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L188718:

; 1390 : 		}
; 1391 : 		
; 1392 : 		ASSERT(mdata);

  051d2	83 7d e0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  051d6	75 14		 jne	 SHORT $L192432
  051d8	68 70 05 00 00	 push	 1392			; 00000570H
  051dd	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  051e2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  051e7	85 c0		 test	 eax, eax
  051e9	74 01		 je	 SHORT $L192432
  051eb	cc		 int	 3
$L192432:

; 1393 : 		if(lpstrText)

  051ec	83 7d 08 00	 cmp	 DWORD PTR _lpstrText$[ebp], 0
  051f0	74 0c		 je	 SHORT $L188726

; 1394 : 			mdata->SetWideString(lpstrText);  //SK: modified for dynamic allocation

  051f2	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  051f5	50		 push	 eax
  051f6	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  051f9	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString
$L188726:

; 1395 : 		mdata->menuIconNormal = -1;

  051fe	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05201	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1396 : 		mdata->xoffset = -1;

  05208	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0520b	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1397 : 		if(il){

  05212	83 7d 10 00	 cmp	 DWORD PTR _il$[ebp], 0
  05216	74 38		 je	 SHORT $L188727

; 1398 : 			if(mdata->bitmap){

  05218	8b 45 e0	 mov	 eax, DWORD PTR _mdata$[ebp]
  0521b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0521f	74 15		 je	 SHORT $L188728

; 1399 : 				mdata->bitmap->DeleteImageList();

  05221	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05224	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  05227	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1400 : 				mdata->bitmap=NULL;

  0522c	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0522f	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
$L188728:

; 1401 : 			}
; 1402 : 			mdata->global_offset = AddToGlobalImageList(il,xoffset,nID);

  05236	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  05239	50		 push	 eax
  0523a	8b 4d 14	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  0523d	51		 push	 ecx
  0523e	8b 55 10	 mov	 edx, DWORD PTR _il$[ebp]
  05241	52		 push	 edx
  05242	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05245	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  0524a	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0524d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L188727:

; 1403 : 		}
; 1404 : 		mdata->nFlags &= ~(MF_BYPOSITION);

  05250	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  05253	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  05256	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  0525b	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0525e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1405 : 		mdata->nFlags |= MF_OWNERDRAW;

  05261	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  05264	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  05267	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  0526c	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0526f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1406 : 		mdata->nID = nID;

  05272	8b 55 e0	 mov	 edx, DWORD PTR _mdata$[ebp]
  05275	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  05278	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1407 : 		bcsubs.Add(psubmenu);

  0527b	8b 4d a4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  0527e	51		 push	 ecx
  0527f	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  05282	e8 00 00 00 00	 call	 ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::Add

; 1408 : 		bclocs.Add(nLoc);

  05287	8d 55 e8	 lea	 edx, DWORD PTR _nLoc$[ebp]
  0528a	52		 push	 edx
  0528b	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  0528e	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 1409 : 		if(psubmenu && nLoc>=0)psubmenu = FindAnotherMenuOption(nID,nLoc,bcsubs,bclocs);

  05293	83 7d a4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  05297	74 23		 je	 SHORT $L188729
  05299	83 7d e8 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  0529d	7c 1d		 jl	 SHORT $L188729
  0529f	8d 45 ac	 lea	 eax, DWORD PTR _bclocs$[ebp]
  052a2	50		 push	 eax
  052a3	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  052a6	51		 push	 ecx
  052a7	8d 55 e8	 lea	 edx, DWORD PTR _nLoc$[ebp]
  052aa	52		 push	 edx
  052ab	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  052ae	50		 push	 eax
  052af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  052b2	e8 00 00 00 00	 call	 ?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
  052b7	89 45 a4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1410 : 		else psubmenu=NULL;

  052ba	eb 07		 jmp	 SHORT $L188715
$L188729:
  052bc	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _psubmenu$[ebp], 0
$L188715:

; 1411 : 	}while(psubmenu);

  052c3	83 7d a4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  052c7	0f 85 8f fe ff
	ff		 jne	 $L188714

; 1412 : 	return (CMenu::ModifyMenu(nID,mdata->nFlags,nID,(LPCTSTR)mdata));

  052cd	8b 4d e0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  052d0	51		 push	 ecx
  052d1	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  052d4	52		 push	 edx
  052d5	8b 45 e0	 mov	 eax, DWORD PTR _mdata$[ebp]
  052d8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  052db	51		 push	 ecx
  052dc	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  052df	52		 push	 edx
  052e0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  052e3	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
  052e8	89 45 98	 mov	 DWORD PTR $T192433[ebp], eax
  052eb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  052ef	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  052f2	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  052f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  052fe	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  05301	e8 00 00 00 00	 call	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
  05306	8b 45 98	 mov	 eax, DWORD PTR $T192433[ebp]

; 1413 : }

  05309	52		 push	 edx
  0530a	8b cd		 mov	 ecx, ebp
  0530c	50		 push	 eax
  0530d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192444
  05313	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  05318	58		 pop	 eax
  05319	5a		 pop	 edx
  0531a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0531d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05324	5f		 pop	 edi
  05325	83 c4 6c	 add	 esp, 108		; 0000006cH
  05328	3b ec		 cmp	 ebp, esp
  0532a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0532f	8b e5		 mov	 esp, ebp
  05331	5d		 pop	 ebp
  05332	c2 10 00	 ret	 16			; 00000010H
$L192444:
  05335	03 00 00 00	 DD	 3
  05339	00 00 00 00	 DD	 $L192443
$L192443:
  0533d	e8 ff ff ff	 DD	 -24			; ffffffe8H
  05341	04 00 00 00	 DD	 4
  05345	00 00 00 00	 DD	 $L192439
  05349	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0534d	14 00 00 00	 DD	 20			; 00000014H
  05351	00 00 00 00	 DD	 $L192440
  05355	ac ff ff ff	 DD	 -84			; ffffffacH
  05359	14 00 00 00	 DD	 20			; 00000014H
  0535d	00 00 00 00	 DD	 $L192441
$L192441:
  05361	62		 DB	 98			; 00000062H
  05362	63		 DB	 99			; 00000063H
  05363	6c		 DB	 108			; 0000006cH
  05364	6f		 DB	 111			; 0000006fH
  05365	63		 DB	 99			; 00000063H
  05366	73		 DB	 115			; 00000073H
  05367	00		 DB	 0
$L192440:
  05368	62		 DB	 98			; 00000062H
  05369	63		 DB	 99			; 00000063H
  0536a	73		 DB	 115			; 00000073H
  0536b	75		 DB	 117			; 00000075H
  0536c	62		 DB	 98			; 00000062H
  0536d	73		 DB	 115			; 00000073H
  0536e	00		 DB	 0
$L192439:
  0536f	6e		 DB	 110			; 0000006eH
  05370	4c		 DB	 76			; 0000004cH
  05371	6f		 DB	 111			; 0000006fH
  05372	63		 DB	 99			; 00000063H
  05373	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192434:
  00326	8d 4d c8	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  00329	e9 00 00 00 00	 jmp	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
$L192435:
  0032e	8d 4d ac	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  00331	e9 00 00 00 00	 jmp	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
$L192436:
  00336	68 6c 05 00 00	 push	 1388			; 0000056cH
  0033b	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00340	8b 45 9c	 mov	 eax, DWORD PTR $T192429[ebp]
  00343	50		 push	 eax
  00344	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00349	83 c4 0c	 add	 esp, 12			; 0000000cH
  0034c	c3		 ret	 0
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z:
  0034d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192438
  00352	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ENDP	; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z	; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z	; BCMenu::ModifyODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192448 = -24						; size = 4
$T192447 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_bmp$ = 16						; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z PROC NEAR	; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1416 : {	

  05380	55		 push	 ebp
  05381	8b ec		 mov	 ebp, esp
  05383	83 ec 18	 sub	 esp, 24			; 00000018H
  05386	56		 push	 esi
  05387	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0538c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0538f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  05392	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  05395	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  05398	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0539b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0539e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1417 : 		
; 1418 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  053a1	8b f4		 mov	 esi, esp
  053a3	6a 00		 push	 0
  053a5	6a 00		 push	 0
  053a7	6a ff		 push	 -1
  053a9	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  053ac	50		 push	 eax
  053ad	6a 00		 push	 0
  053af	6a 00		 push	 0
  053b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  053b7	3b f4		 cmp	 esi, esp
  053b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  053be	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1419 : 	wchar_t* wszUtf8 = new wchar_t[len];

  053c1	68 8b 05 00 00	 push	 1419			; 0000058bH
  053c6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  053cb	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  053ce	d1 e1		 shl	 ecx, 1
  053d0	51		 push	 ecx
  053d1	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  053d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  053d9	89 45 ec	 mov	 DWORD PTR $T192447[ebp], eax
  053dc	8b 55 ec	 mov	 edx, DWORD PTR $T192447[ebp]
  053df	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1420 : 	memset(wszUtf8, 0, len * 2);

  053e2	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  053e5	d1 e0		 shl	 eax, 1
  053e7	50		 push	 eax
  053e8	6a 00		 push	 0
  053ea	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  053ed	51		 push	 ecx
  053ee	e8 00 00 00 00	 call	 _memset
  053f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1421 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  053f6	8b f4		 mov	 esi, esp
  053f8	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  053fb	52		 push	 edx
  053fc	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  053ff	50		 push	 eax
  05400	6a ff		 push	 -1
  05402	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  05405	51		 push	 ecx
  05406	6a 00		 push	 0
  05408	6a 00		 push	 0
  0540a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  05410	3b f4		 cmp	 esi, esp
  05412	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1422 : 
; 1423 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,bmp);

  05417	8b 55 10	 mov	 edx, DWORD PTR _bmp$[ebp]
  0541a	52		 push	 edx
  0541b	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  0541e	50		 push	 eax
  0541f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  05422	51		 push	 ecx
  05423	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05426	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuW
  0542b	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1424 : 
; 1425 : 	delete[] wszUtf8;

  0542e	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  05431	89 55 e8	 mov	 DWORD PTR $T192448[ebp], edx
  05434	8b 45 e8	 mov	 eax, DWORD PTR $T192448[ebp]
  05437	50		 push	 eax
  05438	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0543d	83 c4 04	 add	 esp, 4

; 1426 : 	return bRet;

  05440	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1427 : }

  05443	5e		 pop	 esi
  05444	83 c4 18	 add	 esp, 24			; 00000018H
  05447	3b ec		 cmp	 ebp, esp
  05449	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0544e	8b e5		 mov	 esp, ebp
  05450	5d		 pop	 ebp
  05451	c2 0c 00	 ret	 12			; 0000000cH
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z ENDP	; BCMenu::ModifyODMenuA
_TEXT	ENDS
EXTRN	?Add@CImageList@@QAEHPAVCBitmap@@K@Z:NEAR	; CImageList::Add
xdata$x	SEGMENT
$T192458 DD	0ffffffffH
	DD	FLAT:$L192451
$T192453 DD	019930520H
	DD	01H
	DD	FLAT:$T192458
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192450 = -36						; size = 4
_temp$188753 = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_bmp$ = 16						; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z PROC NEAR ; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1430 : {

  05460	55		 push	 ebp
  05461	8b ec		 mov	 ebp, esp
  05463	6a ff		 push	 -1
  05465	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z
  0546a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05470	50		 push	 eax
  05471	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05478	83 ec 18	 sub	 esp, 24			; 00000018H
  0547b	56		 push	 esi
  0547c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  05481	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  05484	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  05487	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0548a	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0548d	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  05490	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  05493	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1431 : 	if(bmp){

  05496	83 7d 10 00	 cmp	 DWORD PTR _bmp$[ebp], 0
  0549a	0f 84 96 00 00
	00		 je	 $L188752

; 1432 : 		CImageList temp;

  054a0	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  054a3	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  054a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1433 : 		temp.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  054af	6a 01		 push	 1
  054b1	6a 01		 push	 1
  054b3	68 ff 00 00 00	 push	 255			; 000000ffH
  054b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  054bd	50		 push	 eax
  054be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  054c4	51		 push	 ecx
  054c5	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  054c8	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1434 : 		if(m_bitmapBackgroundFlag)temp.Add(bmp,m_bitmapBackground);

  054cd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  054d0	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  054d4	74 15		 je	 SHORT $L188754
  054d6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  054d9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  054dc	51		 push	 ecx
  054dd	8b 55 10	 mov	 edx, DWORD PTR _bmp$[ebp]
  054e0	52		 push	 edx
  054e1	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  054e4	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 1435 : 		else temp.Add(bmp,GetSysColor(COLOR_3DFACE));

  054e9	eb 1e		 jmp	 SHORT $L188755
$L188754:
  054eb	8b f4		 mov	 esi, esp
  054ed	6a 0f		 push	 15			; 0000000fH
  054ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  054f5	3b f4		 cmp	 esi, esp
  054f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  054fc	50		 push	 eax
  054fd	8b 45 10	 mov	 eax, DWORD PTR _bmp$[ebp]
  05500	50		 push	 eax
  05501	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  05504	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L188755:

; 1436 : 		return ModifyODMenuW(lpstrText,nID,&temp,0);

  05509	6a 00		 push	 0
  0550b	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  0550e	51		 push	 ecx
  0550f	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  05512	52		 push	 edx
  05513	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  05516	50		 push	 eax
  05517	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0551a	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
  0551f	89 45 dc	 mov	 DWORD PTR $T192450[ebp], eax
  05522	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05529	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  0552c	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  05531	8b 45 dc	 mov	 eax, DWORD PTR $T192450[ebp]
  05534	eb 14		 jmp	 SHORT $L188751
$L188752:

; 1437 : 	}
; 1438 : 	return ModifyODMenuW(lpstrText,nID,NULL,0);

  05536	6a 00		 push	 0
  05538	6a 00		 push	 0
  0553a	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  0553d	51		 push	 ecx
  0553e	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  05541	52		 push	 edx
  05542	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05545	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
$L188751:

; 1439 : }

  0554a	52		 push	 edx
  0554b	8b cd		 mov	 ecx, ebp
  0554d	50		 push	 eax
  0554e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192457
  05554	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  05559	58		 pop	 eax
  0555a	5a		 pop	 edx
  0555b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0555e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05565	5e		 pop	 esi
  05566	83 c4 24	 add	 esp, 36			; 00000024H
  05569	3b ec		 cmp	 ebp, esp
  0556b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05570	8b e5		 mov	 esp, ebp
  05572	5d		 pop	 ebp
  05573	c2 0c 00	 ret	 12			; 0000000cH
$L192457:
  05576	01 00 00 00	 DD	 1
  0557a	00 00 00 00	 DD	 $L192456
$L192456:
  0557e	e4 ff ff ff	 DD	 -28			; ffffffe4H
  05582	08 00 00 00	 DD	 8
  05586	00 00 00 00	 DD	 $L192454
$L192454:
  0558a	74		 DB	 116			; 00000074H
  0558b	65		 DB	 101			; 00000065H
  0558c	6d		 DB	 109			; 0000006dH
  0558d	70		 DB	 112			; 00000070H
  0558e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192451:
  00357	8d 4d e4	 lea	 ecx, DWORD PTR _temp$188753[ebp]
  0035a	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z:
  0035f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192453
  00364	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z ENDP	; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIKKHPAVCSize@@@Z	; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z	; BCMenu::ModifyODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192461 = -24						; size = 4
$T192460 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_fill$ = 16						; size = 4
_border$ = 20						; size = 4
_hatchstyle$ = 24					; size = 4
_pSize$ = 28						; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIKKHPAVCSize@@@Z PROC NEAR ; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1443 : {

  05590	55		 push	 ebp
  05591	8b ec		 mov	 ebp, esp
  05593	83 ec 18	 sub	 esp, 24			; 00000018H
  05596	56		 push	 esi
  05597	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0559c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0559f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  055a2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  055a5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  055a8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  055ab	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  055ae	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  055b1	8b f4		 mov	 esi, esp
  055b3	6a 00		 push	 0
  055b5	6a 00		 push	 0
  055b7	6a ff		 push	 -1
  055b9	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  055bc	50		 push	 eax
  055bd	6a 00		 push	 0
  055bf	6a 00		 push	 0
  055c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  055c7	3b f4		 cmp	 esi, esp
  055c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  055ce	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1445 : 	wchar_t* wszUtf8 = new wchar_t[len];

  055d1	68 a5 05 00 00	 push	 1445			; 000005a5H
  055d6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  055db	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  055de	d1 e1		 shl	 ecx, 1
  055e0	51		 push	 ecx
  055e1	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  055e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  055e9	89 45 ec	 mov	 DWORD PTR $T192460[ebp], eax
  055ec	8b 55 ec	 mov	 edx, DWORD PTR $T192460[ebp]
  055ef	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1446 : 	memset(wszUtf8, 0, len * 2);

  055f2	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  055f5	d1 e0		 shl	 eax, 1
  055f7	50		 push	 eax
  055f8	6a 00		 push	 0
  055fa	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  055fd	51		 push	 ecx
  055fe	e8 00 00 00 00	 call	 _memset
  05603	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1447 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  05606	8b f4		 mov	 esi, esp
  05608	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0560b	52		 push	 edx
  0560c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0560f	50		 push	 eax
  05610	6a ff		 push	 -1
  05612	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  05615	51		 push	 ecx
  05616	6a 00		 push	 0
  05618	6a 00		 push	 0
  0561a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  05620	3b f4		 cmp	 esi, esp
  05622	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1448 : 
; 1449 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,fill,border,hatchstyle,pSize);

  05627	8b 55 1c	 mov	 edx, DWORD PTR _pSize$[ebp]
  0562a	52		 push	 edx
  0562b	8b 45 18	 mov	 eax, DWORD PTR _hatchstyle$[ebp]
  0562e	50		 push	 eax
  0562f	8b 4d 14	 mov	 ecx, DWORD PTR _border$[ebp]
  05632	51		 push	 ecx
  05633	8b 55 10	 mov	 edx, DWORD PTR _fill$[ebp]
  05636	52		 push	 edx
  05637	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  0563a	50		 push	 eax
  0563b	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0563e	51		 push	 ecx
  0563f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05642	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z ; BCMenu::ModifyODMenuW
  05647	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 1450 : 	delete[] wszUtf8;

  0564a	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  0564d	89 55 e8	 mov	 DWORD PTR $T192461[ebp], edx
  05650	8b 45 e8	 mov	 eax, DWORD PTR $T192461[ebp]
  05653	50		 push	 eax
  05654	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  05659	83 c4 04	 add	 esp, 4

; 1451 : 
; 1452 : 	return bRet;

  0565c	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1453 : }

  0565f	5e		 pop	 esi
  05660	83 c4 18	 add	 esp, 24			; 00000018H
  05663	3b ec		 cmp	 ebp, esp
  05665	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0566a	8b e5		 mov	 esp, ebp
  0566c	5d		 pop	 ebp
  0566d	c2 18 00	 ret	 24			; 00000018H
?ModifyODMenuA@BCMenu@@QAEHPBDIKKHPAVCSize@@@Z ENDP	; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z ; BCMenu::ColorBitmap
EXTRN	??0CSize@@QAE@HH@Z:NEAR				; CSize::CSize
xdata$x	SEGMENT
$T192474 DD	0ffffffffH
	DD	FLAT:$L192464
$T192466 DD	019930520H
	DD	01H
	DD	FLAT:$T192474
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192463 = -92						; size = 4
_bmp$ = -84						; size = 8
_icon_size$ = -68					; size = 8
_bitmap_size$ = -52					; size = 8
_sz$ = -36						; size = 8
_pDC$ = -24						; size = 4
_pWnd$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_fill$ = 16						; size = 4
_border$ = 20						; size = 4
_hatchstyle$ = 24					; size = 4
_pSize$ = 28						; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z PROC NEAR ; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1456 : {

  05670	55		 push	 ebp
  05671	8b ec		 mov	 ebp, esp
  05673	6a ff		 push	 -1
  05675	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z
  0567a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05680	50		 push	 eax
  05681	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05688	83 ec 50	 sub	 esp, 80			; 00000050H
  0568b	57		 push	 edi
  0568c	51		 push	 ecx
  0568d	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  05690	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  05695	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0569a	f3 ab		 rep stosd
  0569c	59		 pop	 ecx
  0569d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1457 : 	CWnd *pWnd = AfxGetMainWnd();            // Get main window

  056a0	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  056a5	89 45 ec	 mov	 DWORD PTR _pWnd$[ebp], eax

; 1458 : 	CDC *pDC = pWnd->GetDC();              // Get device context

  056a8	8b 4d ec	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  056ab	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  056b0	89 45 e8	 mov	 DWORD PTR _pDC$[ebp], eax

; 1459 : 	SIZE sz;
; 1460 : 	if(!pSize){

  056b3	83 7d 1c 00	 cmp	 DWORD PTR _pSize$[ebp], 0
  056b7	75 13		 jne	 SHORT $L188785

; 1461 : 		sz.cx = m_iconX;

  056b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  056be	89 45 dc	 mov	 DWORD PTR _sz$[ebp], eax

; 1462 : 		sz.cy = m_iconY;

  056c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  056c7	89 4d e0	 mov	 DWORD PTR _sz$[ebp+4], ecx

; 1463 : 	}
; 1464 : 	else{

  056ca	eb 11		 jmp	 SHORT $L188786
$L188785:

; 1465 : 		sz.cx = pSize->cx;

  056cc	8b 55 1c	 mov	 edx, DWORD PTR _pSize$[ebp]
  056cf	8b 02		 mov	 eax, DWORD PTR [edx]
  056d1	89 45 dc	 mov	 DWORD PTR _sz$[ebp], eax

; 1466 : 		sz.cy = pSize->cy;

  056d4	8b 4d 1c	 mov	 ecx, DWORD PTR _pSize$[ebp]
  056d7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  056da	89 55 e0	 mov	 DWORD PTR _sz$[ebp+4], edx
$L188786:

; 1467 : 	}
; 1468 : 	CSize bitmap_size(sz);

  056dd	8b 45 e0	 mov	 eax, DWORD PTR _sz$[ebp+4]
  056e0	50		 push	 eax
  056e1	8b 4d dc	 mov	 ecx, DWORD PTR _sz$[ebp]
  056e4	51		 push	 ecx
  056e5	8d 4d cc	 lea	 ecx, DWORD PTR _bitmap_size$[ebp]
  056e8	e8 00 00 00 00	 call	 ??0CSize@@QAE@UtagSIZE@@@Z ; CSize::CSize

; 1469 : 	CSize icon_size(m_iconX,m_iconY);

  056ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  056f3	52		 push	 edx
  056f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  056f9	50		 push	 eax
  056fa	8d 4d bc	 lea	 ecx, DWORD PTR _icon_size$[ebp]
  056fd	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize

; 1470 : 	CBitmap bmp;

  05702	8d 4d ac	 lea	 ecx, DWORD PTR _bmp$[ebp]
  05705	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0570a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1471 : 	ColorBitmap(pDC,bmp,bitmap_size,icon_size,fill,border,hatchstyle);		

  05711	8b 4d 18	 mov	 ecx, DWORD PTR _hatchstyle$[ebp]
  05714	51		 push	 ecx
  05715	8b 55 14	 mov	 edx, DWORD PTR _border$[ebp]
  05718	52		 push	 edx
  05719	8b 45 10	 mov	 eax, DWORD PTR _fill$[ebp]
  0571c	50		 push	 eax
  0571d	8b 4d c0	 mov	 ecx, DWORD PTR _icon_size$[ebp+4]
  05720	51		 push	 ecx
  05721	8b 55 bc	 mov	 edx, DWORD PTR _icon_size$[ebp]
  05724	52		 push	 edx
  05725	8b 45 d0	 mov	 eax, DWORD PTR _bitmap_size$[ebp+4]
  05728	50		 push	 eax
  05729	8b 4d cc	 mov	 ecx, DWORD PTR _bitmap_size$[ebp]
  0572c	51		 push	 ecx
  0572d	8d 55 ac	 lea	 edx, DWORD PTR _bmp$[ebp]
  05730	52		 push	 edx
  05731	8b 45 e8	 mov	 eax, DWORD PTR _pDC$[ebp]
  05734	50		 push	 eax
  05735	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05738	e8 00 00 00 00	 call	 ?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z ; BCMenu::ColorBitmap

; 1472 : 	pWnd->ReleaseDC(pDC);

  0573d	8b 4d e8	 mov	 ecx, DWORD PTR _pDC$[ebp]
  05740	51		 push	 ecx
  05741	8b 4d ec	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  05744	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 1473 : 	return ModifyODMenuW(lpstrText,nID,&bmp);

  05749	8d 55 ac	 lea	 edx, DWORD PTR _bmp$[ebp]
  0574c	52		 push	 edx
  0574d	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  05750	50		 push	 eax
  05751	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  05754	51		 push	 ecx
  05755	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05758	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuW
  0575d	89 45 a4	 mov	 DWORD PTR $T192463[ebp], eax
  05760	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05767	8d 4d ac	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0576a	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0576f	8b 45 a4	 mov	 eax, DWORD PTR $T192463[ebp]

; 1474 : }

  05772	52		 push	 edx
  05773	8b cd		 mov	 ecx, ebp
  05775	50		 push	 eax
  05776	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192473
  0577c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  05781	58		 pop	 eax
  05782	5a		 pop	 edx
  05783	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05786	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0578d	5f		 pop	 edi
  0578e	83 c4 5c	 add	 esp, 92			; 0000005cH
  05791	3b ec		 cmp	 ebp, esp
  05793	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05798	8b e5		 mov	 esp, ebp
  0579a	5d		 pop	 ebp
  0579b	c2 18 00	 ret	 24			; 00000018H
$L192473:
  0579e	04 00 00 00	 DD	 4
  057a2	00 00 00 00	 DD	 $L192472
$L192472:
  057a6	dc ff ff ff	 DD	 -36			; ffffffdcH
  057aa	08 00 00 00	 DD	 8
  057ae	00 00 00 00	 DD	 $L192467
  057b2	cc ff ff ff	 DD	 -52			; ffffffccH
  057b6	08 00 00 00	 DD	 8
  057ba	00 00 00 00	 DD	 $L192468
  057be	bc ff ff ff	 DD	 -68			; ffffffbcH
  057c2	08 00 00 00	 DD	 8
  057c6	00 00 00 00	 DD	 $L192469
  057ca	ac ff ff ff	 DD	 -84			; ffffffacH
  057ce	08 00 00 00	 DD	 8
  057d2	00 00 00 00	 DD	 $L192470
$L192470:
  057d6	62		 DB	 98			; 00000062H
  057d7	6d		 DB	 109			; 0000006dH
  057d8	70		 DB	 112			; 00000070H
  057d9	00		 DB	 0
$L192469:
  057da	69		 DB	 105			; 00000069H
  057db	63		 DB	 99			; 00000063H
  057dc	6f		 DB	 111			; 0000006fH
  057dd	6e		 DB	 110			; 0000006eH
  057de	5f		 DB	 95			; 0000005fH
  057df	73		 DB	 115			; 00000073H
  057e0	69		 DB	 105			; 00000069H
  057e1	7a		 DB	 122			; 0000007aH
  057e2	65		 DB	 101			; 00000065H
  057e3	00		 DB	 0
$L192468:
  057e4	62		 DB	 98			; 00000062H
  057e5	69		 DB	 105			; 00000069H
  057e6	74		 DB	 116			; 00000074H
  057e7	6d		 DB	 109			; 0000006dH
  057e8	61		 DB	 97			; 00000061H
  057e9	70		 DB	 112			; 00000070H
  057ea	5f		 DB	 95			; 0000005fH
  057eb	73		 DB	 115			; 00000073H
  057ec	69		 DB	 105			; 00000069H
  057ed	7a		 DB	 122			; 0000007aH
  057ee	65		 DB	 101			; 00000065H
  057ef	00		 DB	 0
$L192467:
  057f0	73		 DB	 115			; 00000073H
  057f1	7a		 DB	 122			; 0000007aH
  057f2	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192464:
  00369	8d 4d ac	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0036c	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z:
  00371	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192466
  00376	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z ENDP	; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBD0H@Z		; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z		; BCMenu::ModifyODMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192478 = -32						; size = 4
$T192477 = -28						; size = 4
$T192476 = -24						; size = 4
_bRet$ = -20						; size = 4
_wszUtf82$ = -16					; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_OptionText$ = 12					; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBD0H@Z PROC NEAR		; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1479 : {

  05800	55		 push	 ebp
  05801	8b ec		 mov	 ebp, esp
  05803	83 ec 20	 sub	 esp, 32			; 00000020H
  05806	56		 push	 esi
  05807	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0580c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0580f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  05812	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  05815	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  05818	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0581b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0581e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  05821	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  05824	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1480 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  05827	8b f4		 mov	 esi, esp
  05829	6a 00		 push	 0
  0582b	6a 00		 push	 0
  0582d	6a ff		 push	 -1
  0582f	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  05832	50		 push	 eax
  05833	6a 00		 push	 0
  05835	6a 00		 push	 0
  05837	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0583d	3b f4		 cmp	 esi, esp
  0583f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05844	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1481 : 	wchar_t* wszUtf8 = new wchar_t[len];

  05847	68 c9 05 00 00	 push	 1481			; 000005c9H
  0584c	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05851	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  05854	d1 e1		 shl	 ecx, 1
  05856	51		 push	 ecx
  05857	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0585c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0585f	89 45 e8	 mov	 DWORD PTR $T192476[ebp], eax
  05862	8b 55 e8	 mov	 edx, DWORD PTR $T192476[ebp]
  05865	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1482 : 	memset(wszUtf8, 0, len * 2);

  05868	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0586b	d1 e0		 shl	 eax, 1
  0586d	50		 push	 eax
  0586e	6a 00		 push	 0
  05870	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  05873	51		 push	 ecx
  05874	e8 00 00 00 00	 call	 _memset
  05879	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1483 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0587c	8b f4		 mov	 esi, esp
  0587e	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  05881	52		 push	 edx
  05882	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  05885	50		 push	 eax
  05886	6a ff		 push	 -1
  05888	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  0588b	51		 push	 ecx
  0588c	6a 00		 push	 0
  0588e	6a 00		 push	 0
  05890	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  05896	3b f4		 cmp	 esi, esp
  05898	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1484 : 
; 1485 : 
; 1486 : 	len=MultiByteToWideChar(CP_ACP, 0,OptionText, -1, NULL,0);

  0589d	8b f4		 mov	 esi, esp
  0589f	6a 00		 push	 0
  058a1	6a 00		 push	 0
  058a3	6a ff		 push	 -1
  058a5	8b 55 0c	 mov	 edx, DWORD PTR _OptionText$[ebp]
  058a8	52		 push	 edx
  058a9	6a 00		 push	 0
  058ab	6a 00		 push	 0
  058ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  058b3	3b f4		 cmp	 esi, esp
  058b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  058ba	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1487 : 	wchar_t* wszUtf82 = new wchar_t[len];

  058bd	68 cf 05 00 00	 push	 1487			; 000005cfH
  058c2	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  058c7	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  058ca	d1 e0		 shl	 eax, 1
  058cc	50		 push	 eax
  058cd	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  058d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  058d5	89 45 e4	 mov	 DWORD PTR $T192477[ebp], eax
  058d8	8b 4d e4	 mov	 ecx, DWORD PTR $T192477[ebp]
  058db	89 4d f0	 mov	 DWORD PTR _wszUtf82$[ebp], ecx

; 1488 : 	memset(wszUtf82, 0, len * 2);

  058de	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  058e1	d1 e2		 shl	 edx, 1
  058e3	52		 push	 edx
  058e4	6a 00		 push	 0
  058e6	8b 45 f0	 mov	 eax, DWORD PTR _wszUtf82$[ebp]
  058e9	50		 push	 eax
  058ea	e8 00 00 00 00	 call	 _memset
  058ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1489 : 	MultiByteToWideChar(CP_ACP, 0, OptionText, -1, (LPWSTR)wszUtf82, len);	

  058f2	8b f4		 mov	 esi, esp
  058f4	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  058f7	51		 push	 ecx
  058f8	8b 55 f0	 mov	 edx, DWORD PTR _wszUtf82$[ebp]
  058fb	52		 push	 edx
  058fc	6a ff		 push	 -1
  058fe	8b 45 0c	 mov	 eax, DWORD PTR _OptionText$[ebp]
  05901	50		 push	 eax
  05902	6a 00		 push	 0
  05904	6a 00		 push	 0
  05906	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0590c	3b f4		 cmp	 esi, esp
  0590e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1490 : 
; 1491 : 	BOOL bRet = ModifyODMenuW( wszUtf8,wszUtf82,nIconNormal);//SK: see MFC  Tech Note 059

  05913	8b 4d 10	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  05916	51		 push	 ecx
  05917	8b 55 f0	 mov	 edx, DWORD PTR _wszUtf82$[ebp]
  0591a	52		 push	 edx
  0591b	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0591e	50		 push	 eax
  0591f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05922	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z ; BCMenu::ModifyODMenuW
  05927	89 45 ec	 mov	 DWORD PTR _bRet$[ebp], eax

; 1492 : 	delete[] wszUtf8;

  0592a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0592d	89 4d e0	 mov	 DWORD PTR $T192478[ebp], ecx
  05930	8b 55 e0	 mov	 edx, DWORD PTR $T192478[ebp]
  05933	52		 push	 edx
  05934	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  05939	83 c4 04	 add	 esp, 4

; 1493 : 
; 1494 : 	return bRet;

  0593c	8b 45 ec	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1495 : }

  0593f	5e		 pop	 esi
  05940	83 c4 20	 add	 esp, 32			; 00000020H
  05943	3b ec		 cmp	 ebp, esp
  05945	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0594a	8b e5		 mov	 esp, ebp
  0594c	5d		 pop	 ebp
  0594d	c2 0c 00	 ret	 12			; 0000000cH
?ModifyODMenuA@BCMenu@@QAEHPBD0H@Z ENDP			; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z:NEAR
xdata$x	SEGMENT
$T192498 DD	0ffffffffH
	DD	FLAT:$L192490
	DD	00H
	DD	FLAT:$L192491
$T192493 DD	019930520H
	DD	02H
	DD	FLAT:$T192498
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv152 = -64						; size = 4
tv128 = -60						; size = 4
$T192489 = -56						; size = 4
$T192488 = -52						; size = 4
$T192485 = -48						; size = 4
$T192484 = -44						; size = 4
$T192481 = -40						; size = 4
$T192480 = -36						; size = 4
_junk$ = -28						; size = 4
_mdata$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_OptionText$ = 12					; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z PROC NEAR		; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1499 : {

  05950	55		 push	 ebp
  05951	8b ec		 mov	 ebp, esp
  05953	6a ff		 push	 -1
  05955	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z
  0595a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05960	50		 push	 eax
  05961	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05968	83 ec 34	 sub	 esp, 52			; 00000034H
  0596b	56		 push	 esi
  0596c	57		 push	 edi
  0596d	51		 push	 ecx
  0596e	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  05971	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  05976	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0597b	f3 ab		 rep stosd
  0597d	59		 pop	 ecx
  0597e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1500 : 	BCMenuData *mdata;
; 1501 : 	
; 1502 : 	// Find the old BCMenuData structure:
; 1503 : 	CString junk = CString(OptionText);

  05981	8b f4		 mov	 esi, esp
  05983	8b 45 0c	 mov	 eax, DWORD PTR _OptionText$[ebp]
  05986	50		 push	 eax
  05987	8d 4d e4	 lea	 ecx, DWORD PTR _junk$[ebp]
  0598a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z
  05990	3b f4		 cmp	 esi, esp
  05992	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05997	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1504 : 	mdata=FindMenuOption(OptionText);

  0599e	8b 4d 0c	 mov	 ecx, DWORD PTR _OptionText$[ebp]
  059a1	51		 push	 ecx
  059a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  059a5	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
  059aa	89 45 ec	 mov	 DWORD PTR _mdata$[ebp], eax

; 1505 : 	if(mdata){

  059ad	83 7d ec 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  059b1	0f 84 57 01 00
	00		 je	 $L188817

; 1506 : 		if(lpstrText)

  059b7	83 7d 08 00	 cmp	 DWORD PTR _lpstrText$[ebp], 0
  059bb	74 0c		 je	 SHORT $L188818

; 1507 : 			mdata->SetWideString(lpstrText);//SK: modified for dynamic allocation

  059bd	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  059c0	52		 push	 edx
  059c1	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  059c4	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString
$L188818:

; 1508 : 		mdata->menuIconNormal = nIconNormal;

  059c9	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  059cc	8b 4d 10	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  059cf	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1509 : 		mdata->xoffset=-1;

  059d2	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  059d5	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1510 : 		if(nIconNormal>=0){

  059dc	83 7d 10 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  059e0	0f 8c 03 01 00
	00		 jl	 $L188819

; 1511 : 			mdata->xoffset=0;

  059e6	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  059e9	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1512 : 			if(mdata->bitmap)mdata->bitmap->DeleteImageList();

  059f0	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  059f3	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  059f7	74 0d		 je	 SHORT $L188820
  059f9	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  059fc	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  059ff	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1513 : 			else mdata->bitmap=new(CImageList);

  05a04	eb 45		 jmp	 SHORT $L188821
$L188820:
  05a06	68 e9 05 00 00	 push	 1513			; 000005e9H
  05a0b	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05a10	6a 08		 push	 8
  05a12	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  05a17	89 45 d8	 mov	 DWORD PTR $T192481[ebp], eax
  05a1a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05a1e	83 7d d8 00	 cmp	 DWORD PTR $T192481[ebp], 0
  05a22	74 0d		 je	 SHORT $L192482
  05a24	8b 4d d8	 mov	 ecx, DWORD PTR $T192481[ebp]
  05a27	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  05a2c	89 45 c4	 mov	 DWORD PTR tv128[ebp], eax
  05a2f	eb 07		 jmp	 SHORT $L192483
$L192482:
  05a31	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$L192483:
  05a38	8b 45 c4	 mov	 eax, DWORD PTR tv128[ebp]
  05a3b	89 45 dc	 mov	 DWORD PTR $T192480[ebp], eax
  05a3e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05a42	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05a45	8b 55 dc	 mov	 edx, DWORD PTR $T192480[ebp]
  05a48	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
$L188821:

; 1514 : 			mdata->bitmap->Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  05a4b	6a 01		 push	 1
  05a4d	6a 01		 push	 1
  05a4f	68 ff 00 00 00	 push	 255			; 000000ffH
  05a54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  05a59	50		 push	 eax
  05a5a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  05a60	51		 push	 ecx
  05a61	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  05a64	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  05a67	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1515 : 			if(!AddBitmapToImageList(mdata->bitmap,nIconNormal)){

  05a6c	8b 45 10	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  05a6f	50		 push	 eax
  05a70	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05a73	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  05a76	52		 push	 edx
  05a77	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05a7a	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  05a7f	85 c0		 test	 eax, eax
  05a81	75 66		 jne	 SHORT $L188819

; 1516 : 				mdata->bitmap->DeleteImageList();

  05a83	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  05a86	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  05a89	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1517 : 				delete mdata->bitmap;

  05a8e	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05a91	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  05a94	89 55 d0	 mov	 DWORD PTR $T192485[ebp], edx
  05a97	8b 45 d0	 mov	 eax, DWORD PTR $T192485[ebp]
  05a9a	89 45 d4	 mov	 DWORD PTR $T192484[ebp], eax
  05a9d	83 7d d4 00	 cmp	 DWORD PTR $T192484[ebp], 0
  05aa1	74 1b		 je	 SHORT $L192486
  05aa3	8b f4		 mov	 esi, esp
  05aa5	6a 01		 push	 1
  05aa7	8b 4d d4	 mov	 ecx, DWORD PTR $T192484[ebp]
  05aaa	8b 11		 mov	 edx, DWORD PTR [ecx]
  05aac	8b 4d d4	 mov	 ecx, DWORD PTR $T192484[ebp]
  05aaf	ff 52 04	 call	 DWORD PTR [edx+4]
  05ab2	3b f4		 cmp	 esi, esp
  05ab4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05ab9	89 45 c0	 mov	 DWORD PTR tv152[ebp], eax
  05abc	eb 07		 jmp	 SHORT $L192487
$L192486:
  05abe	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$L192487:

; 1518 : 				mdata->bitmap=NULL;

  05ac5	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  05ac8	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1519 : 				mdata->menuIconNormal = nIconNormal = -1;

  05acf	c7 45 10 ff ff
	ff ff		 mov	 DWORD PTR _nIconNormal$[ebp], -1
  05ad6	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05ad9	8b 55 10	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  05adc	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1520 : 				mdata->xoffset = -1;

  05adf	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  05ae2	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
$L188819:

; 1521 : 			}
; 1522 : 		}
; 1523 : 		return(TRUE);

  05ae9	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR $T192488[ebp], 1
  05af0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05af7	8b f4		 mov	 esi, esp
  05af9	8d 4d e4	 lea	 ecx, DWORD PTR _junk$[ebp]
  05afc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05b02	3b f4		 cmp	 esi, esp
  05b04	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05b09	8b 45 cc	 mov	 eax, DWORD PTR $T192488[ebp]
  05b0c	eb 23		 jmp	 SHORT $L188813
$L188817:

; 1524 : 	}
; 1525 : 	return(FALSE);

  05b0e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T192489[ebp], 0
  05b15	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05b1c	8b f4		 mov	 esi, esp
  05b1e	8d 4d e4	 lea	 ecx, DWORD PTR _junk$[ebp]
  05b21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05b27	3b f4		 cmp	 esi, esp
  05b29	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05b2e	8b 45 c8	 mov	 eax, DWORD PTR $T192489[ebp]
$L188813:

; 1526 : }

  05b31	52		 push	 edx
  05b32	8b cd		 mov	 ecx, ebp
  05b34	50		 push	 eax
  05b35	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192497
  05b3b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  05b40	58		 pop	 eax
  05b41	5a		 pop	 edx
  05b42	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05b45	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05b4c	5f		 pop	 edi
  05b4d	5e		 pop	 esi
  05b4e	83 c4 40	 add	 esp, 64			; 00000040H
  05b51	3b ec		 cmp	 ebp, esp
  05b53	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05b58	8b e5		 mov	 esp, ebp
  05b5a	5d		 pop	 ebp
  05b5b	c2 0c 00	 ret	 12			; 0000000cH
$L192497:
  05b5e	01 00 00 00	 DD	 1
  05b62	00 00 00 00	 DD	 $L192496
$L192496:
  05b66	e4 ff ff ff	 DD	 -28			; ffffffe4H
  05b6a	04 00 00 00	 DD	 4
  05b6e	00 00 00 00	 DD	 $L192494
$L192494:
  05b72	6a		 DB	 106			; 0000006aH
  05b73	75		 DB	 117			; 00000075H
  05b74	6e		 DB	 110			; 0000006eH
  05b75	6b		 DB	 107			; 0000006bH
  05b76	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192490:
  0037b	8b f4		 mov	 esi, esp
  0037d	8d 4d e4	 lea	 ecx, DWORD PTR _junk$[ebp]
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00386	3b f4		 cmp	 esi, esp
  00388	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192491:
  0038d	68 e9 05 00 00	 push	 1513			; 000005e9H
  00392	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00397	8b 45 d8	 mov	 eax, DWORD PTR $T192481[ebp]
  0039a	50		 push	 eax
  0039b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  003a0	c3		 ret	 0
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z:
  003a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192493
  003a6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z ENDP		; BCMenu::ModifyODMenuW
PUBLIC	?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
xdata$x	SEGMENT
$T192515 DD	0ffffffffH
	DD	FLAT:$L192509
	DD	00H
	DD	FLAT:$L192510
	DD	00H
	DD	FLAT:$L192511
$T192513 DD	019930520H
	DD	03H
	DD	FLAT:$T192515
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv166 = -48						; size = 4
tv171 = -44						; size = 4
tv76 = -40						; size = 4
$T192508 = -36						; size = 4
$T192506 = -32						; size = 4
$T192501 = -28						; size = 4
$T192500 = -24						; size = 4
_mdata$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pos$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_string$ = 20						; size = 4
?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; BCMenu::NewODMenu
; _this$ = ecx

; 1529 : {

  05b80	55		 push	 ebp
  05b81	8b ec		 mov	 ebp, esp
  05b83	6a ff		 push	 -1
  05b85	68 00 00 00 00	 push	 __ehhandler$?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  05b8a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05b90	50		 push	 eax
  05b91	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05b98	83 ec 24	 sub	 esp, 36			; 00000024H
  05b9b	56		 push	 esi
  05b9c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  05ba1	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  05ba4	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  05ba7	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  05baa	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  05bad	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  05bb0	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  05bb3	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  05bb6	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  05bb9	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  05bbc	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  05bbf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1530 : 	BCMenuData *mdata;
; 1531 : 	
; 1532 : 	mdata = new BCMenuData;

  05bc6	68 fc 05 00 00	 push	 1532			; 000005fcH
  05bcb	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05bd0	6a 24		 push	 36			; 00000024H
  05bd2	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  05bd7	83 c4 0c	 add	 esp, 12			; 0000000cH
  05bda	89 45 e4	 mov	 DWORD PTR $T192501[ebp], eax
  05bdd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05be1	83 7d e4 00	 cmp	 DWORD PTR $T192501[ebp], 0
  05be5	74 0d		 je	 SHORT $L192502
  05be7	8b 4d e4	 mov	 ecx, DWORD PTR $T192501[ebp]
  05bea	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  05bef	89 45 d8	 mov	 DWORD PTR tv76[ebp], eax
  05bf2	eb 07		 jmp	 SHORT $L192503
$L192502:
  05bf4	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L192503:
  05bfb	8b 45 d8	 mov	 eax, DWORD PTR tv76[ebp]
  05bfe	89 45 e8	 mov	 DWORD PTR $T192500[ebp], eax
  05c01	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05c05	8b 4d e8	 mov	 ecx, DWORD PTR $T192500[ebp]
  05c08	89 4d ec	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1533 : 	mdata->menuIconNormal = -1;

  05c0b	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  05c0e	c7 42 0c ff ff
	ff ff		 mov	 DWORD PTR [edx+12], -1

; 1534 : 	mdata->xoffset=-1;

  05c15	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  05c18	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 1535 : #ifdef UNICODE
; 1536 : 	mdata->SetWideString((LPCTSTR)string);//SK: modified for dynamic allocation
; 1537 : #else
; 1538 : 	mdata->SetAnsiString(string);

  05c1f	8b f4		 mov	 esi, esp
  05c21	8d 4d 14	 lea	 ecx, DWORD PTR _string$[ebp]
  05c24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05c2a	3b f4		 cmp	 esi, esp
  05c2c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05c31	50		 push	 eax
  05c32	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05c35	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString

; 1539 : #endif
; 1540 : 	mdata->nFlags = nFlags;

  05c3a	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05c3d	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  05c40	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1541 : 	mdata->nID = nID;

  05c43	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  05c46	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  05c49	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1542 : 	
; 1543 : //	if(nFlags & MF_POPUP)m_AllSubMenus.Add((HMENU)nID);
; 1544 : 		
; 1545 : 	if (nFlags&MF_OWNERDRAW){

  05c4c	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  05c4f	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  05c55	74 35		 je	 SHORT $L188847

; 1546 : 		ASSERT(!(nFlags&MF_STRING));

  05c57	33 c0		 xor	 eax, eax
  05c59	74 14		 je	 SHORT $L192504
  05c5b	68 0a 06 00 00	 push	 1546			; 0000060aH
  05c60	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05c65	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  05c6a	85 c0		 test	 eax, eax
  05c6c	74 01		 je	 SHORT $L192504
  05c6e	cc		 int	 3
$L192504:

; 1547 : 		ModifyMenu(pos,nFlags,nID,(LPCTSTR)mdata);

  05c6f	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  05c72	52		 push	 edx
  05c73	8b 45 10	 mov	 eax, DWORD PTR _nID$[ebp]
  05c76	50		 push	 eax
  05c77	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  05c7a	51		 push	 ecx
  05c7b	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  05c7e	52		 push	 edx
  05c7f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05c82	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA

; 1548 : 	}
; 1549 : 	else if (nFlags&MF_STRING){

  05c87	e9 b0 00 00 00	 jmp	 $L188850
$L188847:
  05c8c	33 c0		 xor	 eax, eax
  05c8e	74 77		 je	 SHORT $L188851

; 1550 : 		ASSERT(!(nFlags&MF_OWNERDRAW));

  05c90	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  05c93	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  05c99	74 14		 je	 SHORT $L192505
  05c9b	68 0e 06 00 00	 push	 1550			; 0000060eH
  05ca0	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05ca5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  05caa	85 c0		 test	 eax, eax
  05cac	74 01		 je	 SHORT $L192505
  05cae	cc		 int	 3
$L192505:

; 1551 : 		ModifyMenu(pos,nFlags,nID,mdata->GetString());

  05caf	8d 45 e0	 lea	 eax, DWORD PTR $T192506[ebp]
  05cb2	50		 push	 eax
  05cb3	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05cb6	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  05cbb	89 45 d4	 mov	 DWORD PTR tv171[ebp], eax
  05cbe	8b 4d d4	 mov	 ecx, DWORD PTR tv171[ebp]
  05cc1	89 4d d0	 mov	 DWORD PTR tv166[ebp], ecx
  05cc4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05cc8	8b f4		 mov	 esi, esp
  05cca	8b 4d d0	 mov	 ecx, DWORD PTR tv166[ebp]
  05ccd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05cd3	3b f4		 cmp	 esi, esp
  05cd5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05cda	50		 push	 eax
  05cdb	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  05cde	52		 push	 edx
  05cdf	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  05ce2	50		 push	 eax
  05ce3	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  05ce6	51		 push	 ecx
  05ce7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05cea	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
  05cef	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05cf3	8b f4		 mov	 esi, esp
  05cf5	8d 4d e0	 lea	 ecx, DWORD PTR $T192506[ebp]
  05cf8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05cfe	3b f4		 cmp	 esi, esp
  05d00	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1552 : 	}
; 1553 : 	else{

  05d05	eb 35		 jmp	 SHORT $L188850
$L188851:

; 1554 : 		ASSERT(nFlags&MF_SEPARATOR);

  05d07	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  05d0a	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  05d10	75 14		 jne	 SHORT $L192507
  05d12	68 12 06 00 00	 push	 1554			; 00000612H
  05d17	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05d1c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  05d21	85 c0		 test	 eax, eax
  05d23	74 01		 je	 SHORT $L192507
  05d25	cc		 int	 3
$L192507:

; 1555 : 		ModifyMenu(pos,nFlags,nID);

  05d26	6a 00		 push	 0
  05d28	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  05d2b	51		 push	 ecx
  05d2c	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  05d2f	52		 push	 edx
  05d30	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  05d33	50		 push	 eax
  05d34	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05d37	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L188850:

; 1556 : 	}
; 1557 : 	
; 1558 : 	return(mdata);

  05d3c	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  05d3f	89 4d dc	 mov	 DWORD PTR $T192508[ebp], ecx
  05d42	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05d49	8b f4		 mov	 esi, esp
  05d4b	8d 4d 14	 lea	 ecx, DWORD PTR _string$[ebp]
  05d4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05d54	3b f4		 cmp	 esi, esp
  05d56	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05d5b	8b 45 dc	 mov	 eax, DWORD PTR $T192508[ebp]

; 1559 : };

  05d5e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05d61	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05d68	5e		 pop	 esi
  05d69	83 c4 30	 add	 esp, 48			; 00000030H
  05d6c	3b ec		 cmp	 ebp, esp
  05d6e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05d73	8b e5		 mov	 esp, ebp
  05d75	5d		 pop	 ebp
  05d76	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L192509:
  003ab	8b f4		 mov	 esi, esp
  003ad	8d 4d 14	 lea	 ecx, DWORD PTR _string$[ebp]
  003b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  003b6	3b f4		 cmp	 esi, esp
  003b8	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192510:
  003bd	68 fc 05 00 00	 push	 1532			; 000005fcH
  003c2	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  003c7	8b 45 e4	 mov	 eax, DWORD PTR $T192501[ebp]
  003ca	50		 push	 eax
  003cb	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  003d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d3	c3		 ret	 0
$L192511:
  003d4	8b f4		 mov	 esi, esp
  003d6	8d 4d e0	 lea	 ecx, DWORD PTR $T192506[ebp]
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  003df	3b f4		 cmp	 esi, esp
  003e1	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  003e6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192513
  003eb	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; BCMenu::NewODMenu
PUBLIC	?LoadToolbar@BCMenu@@QAEHI@Z			; BCMenu::LoadToolbar
PUBLIC	?LoadToolbars@BCMenu@@QAEHPBIH@Z		; BCMenu::LoadToolbars
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_i$188864 = -12						; size = 4
_returnflag$ = -8					; size = 4
_this$ = -4						; size = 4
_arID$ = 8						; size = 4
_n$ = 12						; size = 4
?LoadToolbars@BCMenu@@QAEHPBIH@Z PROC NEAR		; BCMenu::LoadToolbars
; _this$ = ecx

; 1562 : {

  05d80	55		 push	 ebp
  05d81	8b ec		 mov	 ebp, esp
  05d83	83 ec 0c	 sub	 esp, 12			; 0000000cH
  05d86	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  05d8d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  05d94	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  05d9b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1563 : 	ASSERT(arID);

  05d9e	83 7d 08 00	 cmp	 DWORD PTR _arID$[ebp], 0
  05da2	75 14		 jne	 SHORT $L192517
  05da4	68 1b 06 00 00	 push	 1563			; 0000061bH
  05da9	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  05dae	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  05db3	85 c0		 test	 eax, eax
  05db5	74 01		 je	 SHORT $L192517
  05db7	cc		 int	 3
$L192517:

; 1564 : 	BOOL returnflag=TRUE;

  05db8	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1

; 1565 : 	for(int i=0;i<n;++i){

  05dbf	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$188864[ebp], 0
  05dc6	eb 09		 jmp	 SHORT $L188865
$L188866:
  05dc8	8b 4d f4	 mov	 ecx, DWORD PTR _i$188864[ebp]
  05dcb	83 c1 01	 add	 ecx, 1
  05dce	89 4d f4	 mov	 DWORD PTR _i$188864[ebp], ecx
$L188865:
  05dd1	8b 55 f4	 mov	 edx, DWORD PTR _i$188864[ebp]
  05dd4	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  05dd7	7d 1f		 jge	 SHORT $L188867

; 1566 : 		if(!LoadToolbar(arID[i]))returnflag=FALSE;

  05dd9	8b 45 f4	 mov	 eax, DWORD PTR _i$188864[ebp]
  05ddc	8b 4d 08	 mov	 ecx, DWORD PTR _arID$[ebp]
  05ddf	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  05de2	52		 push	 edx
  05de3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05de6	e8 00 00 00 00	 call	 ?LoadToolbar@BCMenu@@QAEHI@Z ; BCMenu::LoadToolbar
  05deb	85 c0		 test	 eax, eax
  05ded	75 07		 jne	 SHORT $L188868
  05def	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0
$L188868:

; 1567 : 	}

  05df6	eb d0		 jmp	 SHORT $L188866
$L188867:

; 1568 : 	return(returnflag);

  05df8	8b 45 f8	 mov	 eax, DWORD PTR _returnflag$[ebp]

; 1569 : }

  05dfb	83 c4 0c	 add	 esp, 12			; 0000000cH
  05dfe	3b ec		 cmp	 ebp, esp
  05e00	e8 00 00 00 00	 call	 __RTC_CheckEsp
  05e05	8b e5		 mov	 esp, ebp
  05e07	5d		 pop	 ebp
  05e08	c2 08 00	 ret	 8
?LoadToolbars@BCMenu@@QAEHPBIH@Z ENDP			; BCMenu::LoadToolbars
_TEXT	ENDS
EXTRN	?GetCount@CControlBar@@QBEHXZ:NEAR		; CControlBar::GetCount
EXTRN	?GetMenuState@CMenu@@QBEIII@Z:NEAR		; CMenu::GetMenuState
EXTRN	??0CToolBar@@QAE@XZ:NEAR			; CToolBar::CToolBar
EXTRN	?Create@CToolBar@@UAEHPAVCWnd@@KI@Z:NEAR	; CToolBar::Create
EXTRN	?LoadToolBar@CToolBar@@QAEHI@Z:NEAR		; CToolBar::LoadToolBar
EXTRN	?CommandToIndex@CToolBar@@QBEHI@Z:NEAR		; CToolBar::CommandToIndex
EXTRN	?GetItemID@CToolBar@@QBEIH@Z:NEAR		; CToolBar::GetItemID
EXTRN	?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z:NEAR	; CToolBar::GetButtonInfo
EXTRN	??1CToolBar@@UAE@XZ:NEAR			; CToolBar::~CToolBar
xdata$x	SEGMENT
$T192532 DD	0ffffffffH
	DD	FLAT:$L192520
	DD	00H
	DD	FLAT:$L192521
$T192523 DD	019930520H
	DD	02H
	DD	FLAT:$T192532
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192519 = -280						; size = 4
_i$188884 = -276					; size = 4
_imglist$188882 = -268					; size = 8
_pWnd$ = -256						; size = 4
_xset$ = -248						; size = 4
_xoffset$ = -240					; size = 4
_bar$ = -232						; size = 184
_returnflag$ = -44					; size = 4
_nStyle$ = -36						; size = 4
_nID$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nToolBar$ = 8						; size = 4
?LoadToolbar@BCMenu@@QAEHI@Z PROC NEAR			; BCMenu::LoadToolbar
; _this$ = ecx

; 1572 : {

  05e10	55		 push	 ebp
  05e11	8b ec		 mov	 ebp, esp
  05e13	6a ff		 push	 -1
  05e15	68 00 00 00 00	 push	 __ehhandler$?LoadToolbar@BCMenu@@QAEHI@Z
  05e1a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05e20	50		 push	 eax
  05e21	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05e28	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  05e2e	57		 push	 edi
  05e2f	51		 push	 ecx
  05e30	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  05e36	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  05e3b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  05e40	f3 ab		 rep stosd
  05e42	59		 pop	 ecx
  05e43	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1573 : 	UINT nID,nStyle;
; 1574 : 	BOOL returnflag=FALSE;

  05e46	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 1575 : 	CToolBar bar;

  05e4d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05e53	e8 00 00 00 00	 call	 ??0CToolBar@@QAE@XZ	; CToolBar::CToolBar
  05e58	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1576 : 	int xoffset=-1,xset;

  05e5f	c7 85 10 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _xoffset$[ebp], -1

; 1577 : 	
; 1578 : 	CWnd* pWnd = AfxGetMainWnd();

  05e69	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  05e6e	89 85 00 ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 1579 : 	if (pWnd == NULL)pWnd = CWnd::GetDesktopWindow();

  05e74	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _pWnd$[ebp], 0
  05e7b	75 0b		 jne	 SHORT $L188880
  05e7d	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  05e82	89 85 00 ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax
$L188880:

; 1580 : 	bar.Create(pWnd);

  05e88	68 00 e8 00 00	 push	 59392			; 0000e800H
  05e8d	68 00 28 00 50	 push	 1342187520		; 50002800H
  05e92	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _pWnd$[ebp]
  05e98	50		 push	 eax
  05e99	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05e9f	e8 00 00 00 00	 call	 ?Create@CToolBar@@UAEHPAVCWnd@@KI@Z ; CToolBar::Create

; 1581 : 	if(bar.LoadToolBar(nToolBar)){

  05ea4	8b 4d 08	 mov	 ecx, DWORD PTR _nToolBar$[ebp]
  05ea7	51		 push	 ecx
  05ea8	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05eae	e8 00 00 00 00	 call	 ?LoadToolBar@CToolBar@@QAEHI@Z ; CToolBar::LoadToolBar
  05eb3	85 c0		 test	 eax, eax
  05eb5	0f 84 3a 01 00
	00		 je	 $L188881

; 1582 : 		CImageList imglist;

  05ebb	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _imglist$188882[ebp]
  05ec1	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  05ec6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1583 : 		imglist.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  05eca	6a 01		 push	 1
  05ecc	6a 01		 push	 1
  05ece	68 ff 00 00 00	 push	 255			; 000000ffH
  05ed3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  05ed9	52		 push	 edx
  05eda	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  05edf	50		 push	 eax
  05ee0	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _imglist$188882[ebp]
  05ee6	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1584 : 		if(AddBitmapToImageList(&imglist,nToolBar)){

  05eeb	8b 4d 08	 mov	 ecx, DWORD PTR _nToolBar$[ebp]
  05eee	51		 push	 ecx
  05eef	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _imglist$188882[ebp]
  05ef5	52		 push	 edx
  05ef6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05ef9	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  05efe	85 c0		 test	 eax, eax
  05f00	0f 84 e0 00 00
	00		 je	 $L188883

; 1585 : 			returnflag=TRUE;

  05f06	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1

; 1586 : 			for(int i=0;i<bar.GetCount();++i){

  05f0d	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$188884[ebp], 0
  05f17	eb 0f		 jmp	 SHORT $L188885
$L188886:
  05f19	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _i$188884[ebp]
  05f1f	83 c0 01	 add	 eax, 1
  05f22	89 85 ec fe ff
	ff		 mov	 DWORD PTR _i$188884[ebp], eax
$L188885:
  05f28	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05f2e	e8 00 00 00 00	 call	 ?GetCount@CControlBar@@QBEHXZ ; CControlBar::GetCount
  05f33	39 85 ec fe ff
	ff		 cmp	 DWORD PTR _i$188884[ebp], eax
  05f39	0f 8d a7 00 00
	00		 jge	 $L188883

; 1587 : 				nID = bar.GetItemID(i); 

  05f3f	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _i$188884[ebp]
  05f45	51		 push	 ecx
  05f46	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05f4c	e8 00 00 00 00	 call	 ?GetItemID@CToolBar@@QBEIH@Z ; CToolBar::GetItemID
  05f51	89 45 e8	 mov	 DWORD PTR _nID$[ebp], eax

; 1588 : 				if(nID && GetMenuState(nID, MF_BYCOMMAND)
; 1589 : 					!=0xFFFFFFFF){

  05f54	83 7d e8 00	 cmp	 DWORD PTR _nID$[ebp], 0
  05f58	0f 84 83 00 00
	00		 je	 $L188888
  05f5e	6a 00		 push	 0
  05f60	8b 55 e8	 mov	 edx, DWORD PTR _nID$[ebp]
  05f63	52		 push	 edx
  05f64	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05f67	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  05f6c	83 f8 ff	 cmp	 eax, -1
  05f6f	74 70		 je	 SHORT $L188888

; 1590 : 					xoffset=bar.CommandToIndex(nID);

  05f71	8b 45 e8	 mov	 eax, DWORD PTR _nID$[ebp]
  05f74	50		 push	 eax
  05f75	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05f7b	e8 00 00 00 00	 call	 ?CommandToIndex@CToolBar@@QBEHI@Z ; CToolBar::CommandToIndex
  05f80	89 85 10 ff ff
	ff		 mov	 DWORD PTR _xoffset$[ebp], eax

; 1591 : 					if(xoffset>=0){

  05f86	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _xoffset$[ebp], 0
  05f8d	7c 36		 jl	 SHORT $L188889

; 1592 : 						bar.GetButtonInfo(xoffset,nID,nStyle,xset);

  05f8f	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _xset$[ebp]
  05f95	51		 push	 ecx
  05f96	8d 55 dc	 lea	 edx, DWORD PTR _nStyle$[ebp]
  05f99	52		 push	 edx
  05f9a	8d 45 e8	 lea	 eax, DWORD PTR _nID$[ebp]
  05f9d	50		 push	 eax
  05f9e	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _xoffset$[ebp]
  05fa4	51		 push	 ecx
  05fa5	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  05fab	e8 00 00 00 00	 call	 ?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z ; CToolBar::GetButtonInfo

; 1593 : 						if(xset>0)xoffset=xset;

  05fb0	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _xset$[ebp], 0
  05fb7	7e 0c		 jle	 SHORT $L188889
  05fb9	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _xset$[ebp]
  05fbf	89 95 10 ff ff
	ff		 mov	 DWORD PTR _xoffset$[ebp], edx
$L188889:

; 1594 : 					}
; 1595 : 					ModifyODMenu(NULL,nID,&imglist,xoffset);

  05fc5	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _xoffset$[ebp]
  05fcb	50		 push	 eax
  05fcc	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _imglist$188882[ebp]
  05fd2	51		 push	 ecx
  05fd3	8b 55 e8	 mov	 edx, DWORD PTR _nID$[ebp]
  05fd6	52		 push	 edx
  05fd7	6a 00		 push	 0
  05fd9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  05fdc	e8 00 00 00 00	 call	 ?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuA
$L188888:

; 1596 : 				}
; 1597 : 			}

  05fe1	e9 33 ff ff ff	 jmp	 $L188886
$L188883:

; 1598 : 		}
; 1599 : 	}

  05fe6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05fea	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _imglist$188882[ebp]
  05ff0	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L188881:

; 1600 : 	return(returnflag);

  05ff5	8b 45 d4	 mov	 eax, DWORD PTR _returnflag$[ebp]
  05ff8	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T192519[ebp], eax
  05ffe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06005	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  0600b	e8 00 00 00 00	 call	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
  06010	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T192519[ebp]

; 1601 : }

  06016	52		 push	 edx
  06017	8b cd		 mov	 ecx, ebp
  06019	50		 push	 eax
  0601a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192531
  06020	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  06025	58		 pop	 eax
  06026	5a		 pop	 edx
  06027	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0602a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06031	5f		 pop	 edi
  06032	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  06038	3b ec		 cmp	 ebp, esp
  0603a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0603f	8b e5		 mov	 esp, ebp
  06041	5d		 pop	 ebp
  06042	c2 04 00	 ret	 4
$L192531:
  06045	05 00 00 00	 DD	 5
  06049	00 00 00 00	 DD	 $L192530
$L192530:
  0604d	e8 ff ff ff	 DD	 -24			; ffffffe8H
  06051	04 00 00 00	 DD	 4
  06055	00 00 00 00	 DD	 $L192524
  06059	dc ff ff ff	 DD	 -36			; ffffffdcH
  0605d	04 00 00 00	 DD	 4
  06061	00 00 00 00	 DD	 $L192525
  06065	18 ff ff ff	 DD	 -232			; ffffff18H
  06069	b8 00 00 00	 DD	 184			; 000000b8H
  0606d	00 00 00 00	 DD	 $L192526
  06071	08 ff ff ff	 DD	 -248			; ffffff08H
  06075	04 00 00 00	 DD	 4
  06079	00 00 00 00	 DD	 $L192527
  0607d	f4 fe ff ff	 DD	 -268			; fffffef4H
  06081	08 00 00 00	 DD	 8
  06085	00 00 00 00	 DD	 $L192528
$L192528:
  06089	69		 DB	 105			; 00000069H
  0608a	6d		 DB	 109			; 0000006dH
  0608b	67		 DB	 103			; 00000067H
  0608c	6c		 DB	 108			; 0000006cH
  0608d	69		 DB	 105			; 00000069H
  0608e	73		 DB	 115			; 00000073H
  0608f	74		 DB	 116			; 00000074H
  06090	00		 DB	 0
$L192527:
  06091	78		 DB	 120			; 00000078H
  06092	73		 DB	 115			; 00000073H
  06093	65		 DB	 101			; 00000065H
  06094	74		 DB	 116			; 00000074H
  06095	00		 DB	 0
$L192526:
  06096	62		 DB	 98			; 00000062H
  06097	61		 DB	 97			; 00000061H
  06098	72		 DB	 114			; 00000072H
  06099	00		 DB	 0
$L192525:
  0609a	6e		 DB	 110			; 0000006eH
  0609b	53		 DB	 83			; 00000053H
  0609c	74		 DB	 116			; 00000074H
  0609d	79		 DB	 121			; 00000079H
  0609e	6c		 DB	 108			; 0000006cH
  0609f	65		 DB	 101			; 00000065H
  060a0	00		 DB	 0
$L192524:
  060a1	6e		 DB	 110			; 0000006eH
  060a2	49		 DB	 73			; 00000049H
  060a3	44		 DB	 68			; 00000044H
  060a4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192520:
  003f0	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  003f6	e9 00 00 00 00	 jmp	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
$L192521:
  003fb	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _imglist$188882[ebp]
  00401	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?LoadToolbar@BCMenu@@QAEHI@Z:
  00406	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192523
  0040b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadToolbar@BCMenu@@QAEHI@Z ENDP			; BCMenu::LoadToolbar
xdata$x	SEGMENT
$T192544 DD	0ffffffffH
	DD	FLAT:$L192535
$T192537 DD	019930520H
	DD	01H
	DD	FLAT:$T192544
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192534 = -248						; size = 4
_pWnd$ = -244						; size = 4
_bar$ = -236						; size = 184
_returnflag$ = -48					; size = 4
_nStyle$ = -40						; size = 4
_offset$ = -32						; size = 4
_xset$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_nToolBar$ = 12						; size = 4
_xoffset$ = 16						; size = 4
?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z PROC NEAR		; BCMenu::LoadFromToolBar
; _this$ = ecx

; 1604 : {

  060b0	55		 push	 ebp
  060b1	8b ec		 mov	 ebp, esp
  060b3	6a ff		 push	 -1
  060b5	68 00 00 00 00	 push	 __ehhandler$?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z
  060ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  060c0	50		 push	 eax
  060c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  060c8	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  060ce	57		 push	 edi
  060cf	51		 push	 ecx
  060d0	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  060d6	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  060db	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  060e0	f3 ab		 rep stosd
  060e2	59		 pop	 ecx
  060e3	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1605 : 	int xset,offset;
; 1606 : 	UINT nStyle;
; 1607 : 	BOOL returnflag=FALSE;

  060e6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 1608 : 	CToolBar bar;

  060ed	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  060f3	e8 00 00 00 00	 call	 ??0CToolBar@@QAE@XZ	; CToolBar::CToolBar
  060f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1609 : 	
; 1610 : 	CWnd* pWnd = AfxGetMainWnd();

  060ff	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  06104	89 85 0c ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 1611 : 	if (pWnd == NULL)pWnd = CWnd::GetDesktopWindow();

  0610a	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _pWnd$[ebp], 0
  06111	75 0b		 jne	 SHORT $L188904
  06113	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  06118	89 85 0c ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax
$L188904:

; 1612 : 	bar.Create(pWnd);

  0611e	68 00 e8 00 00	 push	 59392			; 0000e800H
  06123	68 00 28 00 50	 push	 1342187520		; 50002800H
  06128	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _pWnd$[ebp]
  0612e	50		 push	 eax
  0612f	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  06135	e8 00 00 00 00	 call	 ?Create@CToolBar@@UAEHPAVCWnd@@KI@Z ; CToolBar::Create

; 1613 : 	if(bar.LoadToolBar(nToolBar)){

  0613a	8b 4d 0c	 mov	 ecx, DWORD PTR _nToolBar$[ebp]
  0613d	51		 push	 ecx
  0613e	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  06144	e8 00 00 00 00	 call	 ?LoadToolBar@CToolBar@@QAEHI@Z ; CToolBar::LoadToolBar
  06149	85 c0		 test	 eax, eax
  0614b	74 48		 je	 SHORT $L188905

; 1614 : 		offset=bar.CommandToIndex(nID);

  0614d	8b 55 08	 mov	 edx, DWORD PTR _nID$[ebp]
  06150	52		 push	 edx
  06151	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  06157	e8 00 00 00 00	 call	 ?CommandToIndex@CToolBar@@QBEHI@Z ; CToolBar::CommandToIndex
  0615c	89 45 e0	 mov	 DWORD PTR _offset$[ebp], eax

; 1615 : 		if(offset>=0){

  0615f	83 7d e0 00	 cmp	 DWORD PTR _offset$[ebp], 0
  06163	7c 30		 jl	 SHORT $L188905

; 1616 : 			bar.GetButtonInfo(offset,nID,nStyle,xset);

  06165	8d 45 e8	 lea	 eax, DWORD PTR _xset$[ebp]
  06168	50		 push	 eax
  06169	8d 4d d8	 lea	 ecx, DWORD PTR _nStyle$[ebp]
  0616c	51		 push	 ecx
  0616d	8d 55 08	 lea	 edx, DWORD PTR _nID$[ebp]
  06170	52		 push	 edx
  06171	8b 45 e0	 mov	 eax, DWORD PTR _offset$[ebp]
  06174	50		 push	 eax
  06175	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  0617b	e8 00 00 00 00	 call	 ?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z ; CToolBar::GetButtonInfo

; 1617 : 			if(xset>0)xoffset=xset;

  06180	83 7d e8 00	 cmp	 DWORD PTR _xset$[ebp], 0
  06184	7e 08		 jle	 SHORT $L188907
  06186	8b 4d 10	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  06189	8b 55 e8	 mov	 edx, DWORD PTR _xset$[ebp]
  0618c	89 11		 mov	 DWORD PTR [ecx], edx
$L188907:

; 1618 : 			returnflag=TRUE;

  0618e	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1
$L188905:

; 1619 : 		}
; 1620 : 	}
; 1621 : 	return(returnflag);

  06195	8b 45 d0	 mov	 eax, DWORD PTR _returnflag$[ebp]
  06198	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T192534[ebp], eax
  0619e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  061a5	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  061ab	e8 00 00 00 00	 call	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
  061b0	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR $T192534[ebp]

; 1622 : }

  061b6	52		 push	 edx
  061b7	8b cd		 mov	 ecx, ebp
  061b9	50		 push	 eax
  061ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192543
  061c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  061c5	58		 pop	 eax
  061c6	5a		 pop	 edx
  061c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  061ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  061d1	5f		 pop	 edi
  061d2	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  061d8	3b ec		 cmp	 ebp, esp
  061da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  061df	8b e5		 mov	 esp, ebp
  061e1	5d		 pop	 ebp
  061e2	c2 0c 00	 ret	 12			; 0000000cH
$L192543:
  061e5	03 00 00 00	 DD	 3
  061e9	00 00 00 00	 DD	 $L192542
$L192542:
  061ed	e8 ff ff ff	 DD	 -24			; ffffffe8H
  061f1	04 00 00 00	 DD	 4
  061f5	00 00 00 00	 DD	 $L192538
  061f9	d8 ff ff ff	 DD	 -40			; ffffffd8H
  061fd	04 00 00 00	 DD	 4
  06201	00 00 00 00	 DD	 $L192539
  06205	14 ff ff ff	 DD	 -236			; ffffff14H
  06209	b8 00 00 00	 DD	 184			; 000000b8H
  0620d	00 00 00 00	 DD	 $L192540
$L192540:
  06211	62		 DB	 98			; 00000062H
  06212	61		 DB	 97			; 00000061H
  06213	72		 DB	 114			; 00000072H
  06214	00		 DB	 0
$L192539:
  06215	6e		 DB	 110			; 0000006eH
  06216	53		 DB	 83			; 00000053H
  06217	74		 DB	 116			; 00000074H
  06218	79		 DB	 121			; 00000079H
  06219	6c		 DB	 108			; 0000006cH
  0621a	65		 DB	 101			; 00000065H
  0621b	00		 DB	 0
$L192538:
  0621c	78		 DB	 120			; 00000078H
  0621d	73		 DB	 115			; 00000073H
  0621e	65		 DB	 101			; 00000065H
  0621f	74		 DB	 116			; 00000074H
  06220	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192535:
  00410	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  00416	e9 00 00 00 00	 jmp	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
__ehhandler$?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z:
  0041b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192537
  00420	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ENDP		; BCMenu::LoadFromToolBar
PUBLIC	?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z	; BCMenu::FindMenuItem
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_pMenu$188921 = -28					; size = 4
_loc$188920 = -20					; size = 4
_i$ = -12						; size = 4
_pData$ = -8						; size = 4
_this$ = -4						; size = 4
_nID$ = 8						; size = 4
?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z PROC NEAR	; BCMenu::FindMenuItem
; _this$ = ecx

; 1626 : {

  06230	55		 push	 ebp
  06231	8b ec		 mov	 ebp, esp
  06233	83 ec 1c	 sub	 esp, 28			; 0000001cH
  06236	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0623b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0623e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  06241	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  06244	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  06247	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0624a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0624d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  06250	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1627 : 	BCMenuData *pData = NULL;

  06253	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pData$[ebp], 0

; 1628 : 	int i;
; 1629 : 	
; 1630 : 	for(i = 0; i <= m_MenuList.GetUpperBound(); i++){

  0625a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  06261	eb 09		 jmp	 SHORT $L188915
$L188916:
  06263	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  06266	83 c0 01	 add	 eax, 1
  06269	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L188915:
  0626c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0626f	83 c1 08	 add	 ecx, 8
  06272	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06277	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0627a	7f 31		 jg	 SHORT $L188917

; 1631 : 		if (m_MenuList[i]->nID == nID){

  0627c	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0627f	51		 push	 ecx
  06280	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06283	83 c1 08	 add	 ecx, 8
  06286	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0628b	8b 10		 mov	 edx, DWORD PTR [eax]
  0628d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  06290	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  06293	75 16		 jne	 SHORT $L188918

; 1632 : 			pData = m_MenuList[i];

  06295	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  06298	51		 push	 ecx
  06299	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0629c	83 c1 08	 add	 ecx, 8
  0629f	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  062a4	8b 10		 mov	 edx, DWORD PTR [eax]
  062a6	89 55 f8	 mov	 DWORD PTR _pData$[ebp], edx

; 1633 : 			break;

  062a9	eb 02		 jmp	 SHORT $L188917
$L188918:

; 1634 : 		}
; 1635 : 	}

  062ab	eb b6		 jmp	 SHORT $L188916
$L188917:

; 1636 : 	if (!pData){

  062ad	83 7d f8 00	 cmp	 DWORD PTR _pData$[ebp], 0
  062b1	75 43		 jne	 SHORT $L188919

; 1637 : 		int loc;
; 1638 : 		BCMenu *pMenu = FindMenuOption(nID, loc);

  062b3	8d 45 ec	 lea	 eax, DWORD PTR _loc$188920[ebp]
  062b6	50		 push	 eax
  062b7	8b 4d 08	 mov	 ecx, DWORD PTR _nID$[ebp]
  062ba	51		 push	 ecx
  062bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  062be	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  062c3	89 45 e4	 mov	 DWORD PTR _pMenu$188921[ebp], eax

; 1639 : 		ASSERT(pMenu != this);

  062c6	8b 55 e4	 mov	 edx, DWORD PTR _pMenu$188921[ebp]
  062c9	3b 55 fc	 cmp	 edx, DWORD PTR _this$[ebp]
  062cc	75 14		 jne	 SHORT $L192546
  062ce	68 67 06 00 00	 push	 1639			; 00000667H
  062d3	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  062d8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  062dd	85 c0		 test	 eax, eax
  062df	74 01		 je	 SHORT $L192546
  062e1	cc		 int	 3
$L192546:

; 1640 : 		if (loc >= 0){

  062e2	83 7d ec 00	 cmp	 DWORD PTR _loc$188920[ebp], 0
  062e6	7c 0e		 jl	 SHORT $L188919

; 1641 : 			return pMenu->FindMenuItem(nID);

  062e8	8b 4d 08	 mov	 ecx, DWORD PTR _nID$[ebp]
  062eb	51		 push	 ecx
  062ec	8b 4d e4	 mov	 ecx, DWORD PTR _pMenu$188921[ebp]
  062ef	e8 00 00 00 00	 call	 ?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuItem
  062f4	eb 03		 jmp	 SHORT $L188912
$L188919:

; 1642 : 		}
; 1643 : 	}
; 1644 : 	return pData;

  062f6	8b 45 f8	 mov	 eax, DWORD PTR _pData$[ebp]
$L188912:

; 1645 : }

  062f9	52		 push	 edx
  062fa	8b cd		 mov	 ecx, ebp
  062fc	50		 push	 eax
  062fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192549
  06303	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  06308	58		 pop	 eax
  06309	5a		 pop	 edx
  0630a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0630d	3b ec		 cmp	 ebp, esp
  0630f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06314	8b e5		 mov	 esp, ebp
  06316	5d		 pop	 ebp
  06317	c2 04 00	 ret	 4
$L192549:
  0631a	01 00 00 00	 DD	 1
  0631e	00 00 00 00	 DD	 $L192548
$L192548:
  06322	ec ff ff ff	 DD	 -20			; ffffffecH
  06326	04 00 00 00	 DD	 4
  0632a	00 00 00 00	 DD	 $L192547
$L192547:
  0632e	6c		 DB	 108			; 0000006cH
  0632f	6f		 DB	 111			; 0000006fH
  06330	63		 DB	 99			; 00000063H
  06331	00		 DB	 0
?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z ENDP	; BCMenu::FindMenuItem
_TEXT	ENDS
PUBLIC	?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ	; CArray<BCMenu *,BCMenu *>::GetSize
PUBLIC	??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::operator[]
PUBLIC	??A?$CArray@HAAH@@QAEAAHH@Z			; CArray<int,int &>::operator[]
PUBLIC	?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z		; BCMenu::GetSubMenu
EXTRN	___RTDynamicCast:NEAR
EXTRN	?GetMenuItemID@CMenu@@QBEIH@Z:NEAR		; CMenu::GetMenuItemID
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_foundflag$ = -28					; size = 4
_pgoodmenu$ = -24					; size = 4
_psubmenu$ = -20					; size = 4
_j$ = -16						; size = 4
_numsubs$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_nId$ = 8						; size = 4
_nLoc$ = 12						; size = 4
_bcsubs$ = 16						; size = 4
_bclocs$ = 20						; size = 4
?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z PROC NEAR ; BCMenu::FindAnotherMenuOption
; _this$ = ecx

; 1650 : {

  06340	55		 push	 ebp
  06341	8b ec		 mov	 ebp, esp
  06343	83 ec 1c	 sub	 esp, 28			; 0000001cH
  06346	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0634b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0634e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  06351	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  06354	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  06357	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0635a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0635d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  06360	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1651 : 	int i,numsubs,j;
; 1652 : 	BCMenu *psubmenu,*pgoodmenu;
; 1653 : 	BOOL foundflag;
; 1654 : 	
; 1655 : 	for(i=0;i<(int)(GetMenuItemCount());++i){

  06363	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0636a	eb 09		 jmp	 SHORT $L188938
$L188939:
  0636c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0636f	83 c0 01	 add	 eax, 1
  06372	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L188938:
  06375	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06378	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0637d	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  06380	0f 8d e0 00 00
	00		 jge	 $L188940

; 1656 : #ifdef _CPPRTTI 
; 1657 : 		psubmenu=dynamic_cast<BCMenu *>(GetSubMenu(i));

  06386	6a 00		 push	 0
  06388	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  0638d	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  06392	6a 00		 push	 0
  06394	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  06397	51		 push	 ecx
  06398	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0639b	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  063a0	50		 push	 eax
  063a1	e8 00 00 00 00	 call	 ___RTDynamicCast
  063a6	83 c4 14	 add	 esp, 20			; 00000014H
  063a9	89 45 ec	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1658 : #else
; 1659 : 		psubmenu=(BCMenu *)GetSubMenu(i);
; 1660 : #endif
; 1661 : 		if(psubmenu){

  063ac	83 7d ec 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  063b0	74 2e		 je	 SHORT $L188944

; 1662 : 			pgoodmenu=psubmenu->FindAnotherMenuOption(nId,nLoc,bcsubs,bclocs);

  063b2	8b 55 14	 mov	 edx, DWORD PTR _bclocs$[ebp]
  063b5	52		 push	 edx
  063b6	8b 45 10	 mov	 eax, DWORD PTR _bcsubs$[ebp]
  063b9	50		 push	 eax
  063ba	8b 4d 0c	 mov	 ecx, DWORD PTR _nLoc$[ebp]
  063bd	51		 push	 ecx
  063be	8b 55 08	 mov	 edx, DWORD PTR _nId$[ebp]
  063c1	52		 push	 edx
  063c2	8b 4d ec	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  063c5	e8 00 00 00 00	 call	 ?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
  063ca	89 45 e8	 mov	 DWORD PTR _pgoodmenu$[ebp], eax

; 1663 : 			if(pgoodmenu)return(pgoodmenu);

  063cd	83 7d e8 00	 cmp	 DWORD PTR _pgoodmenu$[ebp], 0
  063d1	74 08		 je	 SHORT $L188945
  063d3	8b 45 e8	 mov	 eax, DWORD PTR _pgoodmenu$[ebp]
  063d6	e9 96 00 00 00	 jmp	 $L188930
$L188945:

; 1664 : 		}
; 1665 : 		else if(nId==(int)GetMenuItemID(i)){

  063db	e9 81 00 00 00	 jmp	 $L188946
$L188944:
  063e0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  063e3	50		 push	 eax
  063e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  063e7	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  063ec	39 45 08	 cmp	 DWORD PTR _nId$[ebp], eax
  063ef	75 70		 jne	 SHORT $L188946

; 1666 : 			numsubs=bcsubs.GetSize();

  063f1	8b 4d 10	 mov	 ecx, DWORD PTR _bcsubs$[ebp]
  063f4	e8 00 00 00 00	 call	 ?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ ; CArray<BCMenu *,BCMenu *>::GetSize
  063f9	89 45 f4	 mov	 DWORD PTR _numsubs$[ebp], eax

; 1667 : 			foundflag=TRUE;

  063fc	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _foundflag$[ebp], 1

; 1668 : 			for(j=0;j<numsubs;++j){

  06403	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0640a	eb 09		 jmp	 SHORT $L188949
$L188950:
  0640c	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  0640f	83 c1 01	 add	 ecx, 1
  06412	89 4d f0	 mov	 DWORD PTR _j$[ebp], ecx
$L188949:
  06415	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  06418	3b 55 f4	 cmp	 edx, DWORD PTR _numsubs$[ebp]
  0641b	7d 31		 jge	 SHORT $L188951

; 1669 : 				if(bcsubs[j]==this&&bclocs[j]==i){

  0641d	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  06420	50		 push	 eax
  06421	8b 4d 10	 mov	 ecx, DWORD PTR _bcsubs$[ebp]
  06424	e8 00 00 00 00	 call	 ??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::operator[]
  06429	8b 08		 mov	 ecx, DWORD PTR [eax]
  0642b	3b 4d fc	 cmp	 ecx, DWORD PTR _this$[ebp]
  0642e	75 1c		 jne	 SHORT $L188952
  06430	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  06433	52		 push	 edx
  06434	8b 4d 14	 mov	 ecx, DWORD PTR _bclocs$[ebp]
  06437	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0643c	8b 00		 mov	 eax, DWORD PTR [eax]
  0643e	3b 45 f8	 cmp	 eax, DWORD PTR _i$[ebp]
  06441	75 09		 jne	 SHORT $L188952

; 1670 : 					foundflag=FALSE;

  06443	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _foundflag$[ebp], 0

; 1671 : 					break;

  0644a	eb 02		 jmp	 SHORT $L188951
$L188952:

; 1672 : 				}
; 1673 : 			}

  0644c	eb be		 jmp	 SHORT $L188950
$L188951:

; 1674 : 			if(foundflag){

  0644e	83 7d e4 00	 cmp	 DWORD PTR _foundflag$[ebp], 0
  06452	74 0d		 je	 SHORT $L188946

; 1675 : 				nLoc=i;

  06454	8b 4d 0c	 mov	 ecx, DWORD PTR _nLoc$[ebp]
  06457	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0645a	89 11		 mov	 DWORD PTR [ecx], edx

; 1676 : 				return(this);

  0645c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0645f	eb 10		 jmp	 SHORT $L188930
$L188946:

; 1677 : 			}
; 1678 : 		}
; 1679 : 	}

  06461	e9 06 ff ff ff	 jmp	 $L188939
$L188940:

; 1680 : 	nLoc = -1;

  06466	8b 45 0c	 mov	 eax, DWORD PTR _nLoc$[ebp]
  06469	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 1681 : 	return(NULL);

  0646f	33 c0		 xor	 eax, eax
$L188930:

; 1682 : }

  06471	83 c4 1c	 add	 esp, 28			; 0000001cH
  06474	3b ec		 cmp	 ebp, esp
  06476	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0647b	8b e5		 mov	 esp, ebp
  0647d	5d		 pop	 ebp
  0647e	c2 10 00	 ret	 16			; 00000010H
?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ENDP ; BCMenu::FindAnotherMenuOption
; Function compile flags: /Odt /RTCsu
_pgoodmenu$ = -16					; size = 4
_psubmenu$ = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_nId$ = 8						; size = 4
_nLoc$ = 12						; size = 4
?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z PROC NEAR	; BCMenu::FindMenuOption
; _this$ = ecx

; 1685 : {

  06490	55		 push	 ebp
  06491	8b ec		 mov	 ebp, esp
  06493	83 ec 10	 sub	 esp, 16			; 00000010H
  06496	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0649b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0649e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  064a1	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  064a4	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  064a7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1686 : 	int i;
; 1687 : 	BCMenu *psubmenu,*pgoodmenu;
; 1688 : 	
; 1689 : 	for(i=0;i<(int)(GetMenuItemCount());++i){

  064aa	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  064b1	eb 09		 jmp	 SHORT $L188963
$L188964:
  064b3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  064b6	83 c0 01	 add	 eax, 1
  064b9	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L188963:
  064bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  064bf	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  064c4	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  064c7	7d 6f		 jge	 SHORT $L188965

; 1690 : #ifdef _CPPRTTI 
; 1691 : 		psubmenu=dynamic_cast<BCMenu *>(GetSubMenu(i));

  064c9	6a 00		 push	 0
  064cb	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  064d0	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  064d5	6a 00		 push	 0
  064d7	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  064da	51		 push	 ecx
  064db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  064de	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  064e3	50		 push	 eax
  064e4	e8 00 00 00 00	 call	 ___RTDynamicCast
  064e9	83 c4 14	 add	 esp, 20			; 00000014H
  064ec	89 45 f4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1692 : #else
; 1693 : 		psubmenu=(BCMenu *)GetSubMenu(i);
; 1694 : #endif
; 1695 : 		if(psubmenu){

  064ef	83 7d f4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  064f3	74 20		 je	 SHORT $L188967

; 1696 : 			pgoodmenu=psubmenu->FindMenuOption(nId,nLoc);

  064f5	8b 55 0c	 mov	 edx, DWORD PTR _nLoc$[ebp]
  064f8	52		 push	 edx
  064f9	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  064fc	50		 push	 eax
  064fd	8b 4d f4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  06500	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  06505	89 45 f0	 mov	 DWORD PTR _pgoodmenu$[ebp], eax

; 1697 : 			if(pgoodmenu)return(pgoodmenu);

  06508	83 7d f0 00	 cmp	 DWORD PTR _pgoodmenu$[ebp], 0
  0650c	74 05		 je	 SHORT $L188968
  0650e	8b 45 f0	 mov	 eax, DWORD PTR _pgoodmenu$[ebp]
  06511	eb 30		 jmp	 SHORT $L188958
$L188968:

; 1698 : 		}
; 1699 : 		else if(nId==(int)GetMenuItemID(i)){

  06513	eb 1e		 jmp	 SHORT $L188969
$L188967:
  06515	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  06518	51		 push	 ecx
  06519	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0651c	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  06521	39 45 08	 cmp	 DWORD PTR _nId$[ebp], eax
  06524	75 0d		 jne	 SHORT $L188969

; 1700 : 			nLoc=i;

  06526	8b 55 0c	 mov	 edx, DWORD PTR _nLoc$[ebp]
  06529	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0652c	89 02		 mov	 DWORD PTR [edx], eax

; 1701 : 			return(this);

  0652e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  06531	eb 10		 jmp	 SHORT $L188958
$L188969:

; 1702 : 		}
; 1703 : 	}

  06533	e9 7b ff ff ff	 jmp	 $L188964
$L188965:

; 1704 : 	nLoc = -1;

  06538	8b 4d 0c	 mov	 ecx, DWORD PTR _nLoc$[ebp]
  0653b	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 1705 : 	return(NULL);

  06541	33 c0		 xor	 eax, eax
$L188958:

; 1706 : }

  06543	83 c4 10	 add	 esp, 16			; 00000010H
  06546	3b ec		 cmp	 ebp, esp
  06548	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0654d	8b e5		 mov	 esp, ebp
  0654f	5d		 pop	 ebp
  06550	c2 08 00	 ret	 8
?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ENDP		; BCMenu::FindMenuOption
_TEXT	ENDS
EXTRN	__imp__wcscmp:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_szWide$188988 = -24					; size = 4
_pmenulist$ = -20					; size = 4
_psubmenu$ = -16					; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z PROC NEAR ; BCMenu::FindMenuOption
; _this$ = ecx

; 1709 : {

  06560	55		 push	 ebp
  06561	8b ec		 mov	 ebp, esp
  06563	83 ec 18	 sub	 esp, 24			; 00000018H
  06566	56		 push	 esi
  06567	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0656c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0656f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  06572	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  06575	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  06578	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0657b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0657e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1710 : 	int i,j;
; 1711 : 	BCMenu *psubmenu;
; 1712 : 	BCMenuData *pmenulist;
; 1713 : 	
; 1714 : 	for(i=0;i<(int)(GetMenuItemCount());++i){

  06581	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  06588	eb 09		 jmp	 SHORT $L188981
$L188982:
  0658a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0658d	83 c0 01	 add	 eax, 1
  06590	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L188981:
  06593	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06596	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0659b	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  0659e	0f 8d c1 00 00
	00		 jge	 $L188983

; 1715 : #ifdef _CPPRTTI 
; 1716 : 		psubmenu=dynamic_cast<BCMenu *>(GetSubMenu(i));

  065a4	6a 00		 push	 0
  065a6	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  065ab	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  065b0	6a 00		 push	 0
  065b2	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  065b5	51		 push	 ecx
  065b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  065b9	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  065be	50		 push	 eax
  065bf	e8 00 00 00 00	 call	 ___RTDynamicCast
  065c4	83 c4 14	 add	 esp, 20			; 00000014H
  065c7	89 45 f0	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1717 : #else
; 1718 : 		psubmenu=(BCMenu *)GetSubMenu(i);
; 1719 : #endif
; 1720 : 		if(psubmenu){

  065ca	83 7d f0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  065ce	74 1c		 je	 SHORT $L188985

; 1721 : 			pmenulist=psubmenu->FindMenuOption(lpstrText);

  065d0	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  065d3	52		 push	 edx
  065d4	8b 4d f0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  065d7	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
  065dc	89 45 ec	 mov	 DWORD PTR _pmenulist$[ebp], eax

; 1722 : 			if(pmenulist)return(pmenulist);

  065df	83 7d ec 00	 cmp	 DWORD PTR _pmenulist$[ebp], 0
  065e3	74 05		 je	 SHORT $L188986
  065e5	8b 45 ec	 mov	 eax, DWORD PTR _pmenulist$[ebp]
  065e8	eb 7d		 jmp	 SHORT $L188975
$L188986:

; 1723 : 		}
; 1724 : 		else{

  065ea	eb 74		 jmp	 SHORT $L188987
$L188985:

; 1725 : 			const wchar_t *szWide;//SK: we use const to prevent misuse of this Ptr
; 1726 : 			for(j=0;j<=m_MenuList.GetUpperBound();++j){     

  065ec	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  065f3	eb 09		 jmp	 SHORT $L188989
$L188990:
  065f5	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  065f8	83 c0 01	 add	 eax, 1
  065fb	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$L188989:
  065fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06601	83 c1 08	 add	 ecx, 8
  06604	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06609	39 45 f4	 cmp	 DWORD PTR _j$[ebp], eax
  0660c	7f 52		 jg	 SHORT $L188987

; 1727 : 				szWide = m_MenuList[j]->GetWideString ();

  0660e	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  06611	51		 push	 ecx
  06612	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06615	83 c1 08	 add	 ecx, 8
  06618	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0661d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0661f	e8 00 00 00 00	 call	 ?GetWideString@BCMenuData@@QAEPB_WXZ ; BCMenuData::GetWideString
  06624	89 45 e8	 mov	 DWORD PTR _szWide$188988[ebp], eax

; 1728 : 				if(szWide && !wcscmp(lpstrText,szWide))//SK: modified for dynamic allocation

  06627	83 7d e8 00	 cmp	 DWORD PTR _szWide$188988[ebp], 0
  0662b	74 31		 je	 SHORT $L188992
  0662d	8b f4		 mov	 esi, esp
  0662f	8b 55 e8	 mov	 edx, DWORD PTR _szWide$188988[ebp]
  06632	52		 push	 edx
  06633	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  06636	50		 push	 eax
  06637	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscmp
  0663d	83 c4 08	 add	 esp, 8
  06640	3b f4		 cmp	 esi, esp
  06642	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06647	85 c0		 test	 eax, eax
  06649	75 13		 jne	 SHORT $L188992

; 1729 : 					return(m_MenuList[j]);

  0664b	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  0664e	51		 push	 ecx
  0664f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06652	83 c1 08	 add	 ecx, 8
  06655	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0665a	8b 00		 mov	 eax, DWORD PTR [eax]
  0665c	eb 09		 jmp	 SHORT $L188975
$L188992:

; 1730 : 			}

  0665e	eb 95		 jmp	 SHORT $L188990
$L188987:

; 1731 : 		}
; 1732 : 	}

  06660	e9 25 ff ff ff	 jmp	 $L188982
$L188983:

; 1733 : 	return(NULL);

  06665	33 c0		 xor	 eax, eax
$L188975:

; 1734 : }

  06667	5e		 pop	 esi
  06668	83 c4 18	 add	 esp, 24			; 00000018H
  0666b	3b ec		 cmp	 ebp, esp
  0666d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06672	8b e5		 mov	 esp, ebp
  06674	5d		 pop	 ebp
  06675	c2 04 00	 ret	 4
?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ENDP	; BCMenu::FindMenuOption
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_nResource$ = 8						; size = 4
?LoadMenuA@BCMenu@@UAEHH@Z PROC NEAR			; BCMenu::LoadMenuA
; _this$ = ecx

; 1738 : {

  06680	55		 push	 ebp
  06681	8b ec		 mov	 ebp, esp
  06683	51		 push	 ecx
  06684	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0668b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1739 : 	return(BCMenu::LoadMenu(MAKEINTRESOURCE(nResource)));

  0668e	0f b7 45 08	 movzx	 eax, WORD PTR _nResource$[ebp]
  06692	50		 push	 eax
  06693	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  06696	e8 00 00 00 00	 call	 ?LoadMenuA@BCMenu@@UAEHPBD@Z ; BCMenu::LoadMenuA

; 1740 : };

  0669b	83 c4 04	 add	 esp, 4
  0669e	3b ec		 cmp	 ebp, esp
  066a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  066a5	8b e5		 mov	 esp, ebp
  066a7	5d		 pop	 ebp
  066a8	c2 04 00	 ret	 4
?LoadMenuA@BCMenu@@UAEHH@Z ENDP				; BCMenu::LoadMenuA
_TEXT	ENDS
PUBLIC	?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::Add
PUBLIC	??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
PUBLIC	??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ ; CTypedPtrArray<CPtrArray,BCMenu *>::CTypedPtrArray<CPtrArray,BCMenu *>
PUBLIC	??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ ; CTypedPtrArray<CPtrArray,BCMenu *>::~CTypedPtrArray<CPtrArray,BCMenu *>
PUBLIC	??0?$CArray@HH@@QAE@XZ				; CArray<int,int>::CArray<int,int>
PUBLIC	?GetAt@?$CArray@HH@@QAEAAHH@Z			; CArray<int,int>::GetAt
PUBLIC	?SetAt@?$CArray@HH@@QAEXHH@Z			; CArray<int,int>::SetAt
PUBLIC	?Add@?$CArray@HH@@QAEHH@Z			; CArray<int,int>::Add
PUBLIC	?RemoveAt@?$CArray@HH@@QAEXHH@Z			; CArray<int,int>::RemoveAt
PUBLIC	??1?$CArray@HH@@UAE@XZ				; CArray<int,int>::~CArray<int,int>
PUBLIC	?InsertSpaces@BCMenu@@IAEXXZ			; BCMenu::InsertSpaces
EXTRN	__imp__LockResource@4:NEAR
EXTRN	?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z:NEAR ; AfxFindResourceHandle
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:NEAR ; AfxAssertValidObject
EXTRN	?CreateMenu@CMenu@@QAEHXZ:NEAR			; CMenu::CreateMenu
EXTRN	?CreatePopupMenu@CMenu@@QAEHXZ:NEAR		; CMenu::CreatePopupMenu
EXTRN	__imp__FindResourceA@12:NEAR
EXTRN	__imp__LoadResource@8:NEAR
EXTRN	_memcpy:NEAR
xdata$x	SEGMENT
$T192577 DD	0ffffffffH
	DD	FLAT:$L192563
	DD	00H
	DD	FLAT:$L192564
	DD	01H
	DD	FLAT:$L192565
	DD	01H
	DD	FLAT:$L192566
$T192568 DD	019930520H
	DD	04H
	DD	FLAT:$T192577
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv196 = -176						; size = 4
$T192562 = -172						; size = 4
$T192561 = -168						; size = 4
$T192558 = -164						; size = 4
$T192557 = -160						; size = 4
$T192556 = -156						; size = 4
_str$189177 = -148					; size = 4
_i$189172 = -140					; size = 4
_pSubMenu$189158 = -136					; size = 4
_m_StackEnd$ = -128					; size = 20
_m_Stack$ = -100					; size = 20
_nLen$ = -76						; size = 4
_szCaption$ = -72					; size = 4
_uFlags$ = -68						; size = 4
_dwID$ = -60						; size = 2
_dwFlags$ = -48						; size = 2
_j$ = -40						; size = 4
_pTp$ = -36						; size = 4
_pTpHdr$ = -32						; size = 4
_hGlobal$ = -28						; size = 4
_hRsrc$ = -24						; size = 4
_hInst$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpszResourceName$ = 8					; size = 4
?LoadMenuA@BCMenu@@UAEHPBD@Z PROC NEAR			; BCMenu::LoadMenuA
; _this$ = ecx

; 1743 : {

  066b0	55		 push	 ebp
  066b1	8b ec		 mov	 ebp, esp
  066b3	6a ff		 push	 -1
  066b5	68 00 00 00 00	 push	 __ehhandler$?LoadMenuA@BCMenu@@UAEHPBD@Z
  066ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  066c0	50		 push	 eax
  066c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  066c8	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  066ce	56		 push	 esi
  066cf	57		 push	 edi
  066d0	51		 push	 ecx
  066d1	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  066d7	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  066dc	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  066e1	f3 ab		 rep stosd
  066e3	59		 pop	 ecx
  066e4	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);

  066e7	68 d0 06 00 00	 push	 1744			; 000006d0H
  066ec	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  066f1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  066f4	50		 push	 eax
  066f5	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1745 : 	ASSERT(lpszResourceName != NULL);

  066fa	83 7d 08 00	 cmp	 DWORD PTR _lpszResourceName$[ebp], 0
  066fe	75 14		 jne	 SHORT $L192555
  06700	68 d1 06 00 00	 push	 1745			; 000006d1H
  06705	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0670a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0670f	85 c0		 test	 eax, eax
  06711	74 01		 je	 SHORT $L192555
  06713	cc		 int	 3
$L192555:

; 1746 : 	
; 1747 : 	// Find the Menu Resource:
; 1748 : 	HINSTANCE hInst = AfxFindResourceHandle(lpszResourceName,RT_MENU);

  06714	6a 04		 push	 4
  06716	8b 55 08	 mov	 edx, DWORD PTR _lpszResourceName$[ebp]
  06719	52		 push	 edx
  0671a	e8 00 00 00 00	 call	 ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z ; AfxFindResourceHandle
  0671f	89 45 ec	 mov	 DWORD PTR _hInst$[ebp], eax

; 1749 : 	HRSRC hRsrc = ::FindResource(hInst,lpszResourceName,RT_MENU);

  06722	8b f4		 mov	 esi, esp
  06724	6a 04		 push	 4
  06726	8b 45 08	 mov	 eax, DWORD PTR _lpszResourceName$[ebp]
  06729	50		 push	 eax
  0672a	8b 4d ec	 mov	 ecx, DWORD PTR _hInst$[ebp]
  0672d	51		 push	 ecx
  0672e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  06734	3b f4		 cmp	 esi, esp
  06736	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0673b	89 45 e8	 mov	 DWORD PTR _hRsrc$[ebp], eax

; 1750 : 	if (hRsrc == NULL){

  0673e	83 7d e8 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  06742	75 23		 jne	 SHORT $L189013

; 1751 : 		hInst = NULL;

  06744	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hInst$[ebp], 0

; 1752 : 		hRsrc = ::FindResource(hInst,lpszResourceName,RT_MENU);

  0674b	8b f4		 mov	 esi, esp
  0674d	6a 04		 push	 4
  0674f	8b 55 08	 mov	 edx, DWORD PTR _lpszResourceName$[ebp]
  06752	52		 push	 edx
  06753	8b 45 ec	 mov	 eax, DWORD PTR _hInst$[ebp]
  06756	50		 push	 eax
  06757	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  0675d	3b f4		 cmp	 esi, esp
  0675f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06764	89 45 e8	 mov	 DWORD PTR _hRsrc$[ebp], eax
$L189013:

; 1753 : 	}
; 1754 : 	if(hRsrc == NULL)return FALSE;

  06767	83 7d e8 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  0676b	75 07		 jne	 SHORT $L189017
  0676d	33 c0		 xor	 eax, eax
  0676f	e9 24 05 00 00	 jmp	 $L189003
$L189017:

; 1755 : 	
; 1756 : 	// Load the Menu Resource:
; 1757 : 	
; 1758 : 	HGLOBAL hGlobal = LoadResource(hInst, hRsrc);

  06774	8b f4		 mov	 esi, esp
  06776	8b 4d e8	 mov	 ecx, DWORD PTR _hRsrc$[ebp]
  06779	51		 push	 ecx
  0677a	8b 55 ec	 mov	 edx, DWORD PTR _hInst$[ebp]
  0677d	52		 push	 edx
  0677e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  06784	3b f4		 cmp	 esi, esp
  06786	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0678b	89 45 e4	 mov	 DWORD PTR _hGlobal$[ebp], eax

; 1759 : 	if(hGlobal == NULL)return FALSE;

  0678e	83 7d e4 00	 cmp	 DWORD PTR _hGlobal$[ebp], 0
  06792	75 07		 jne	 SHORT $L189019
  06794	33 c0		 xor	 eax, eax
  06796	e9 fd 04 00 00	 jmp	 $L189003
$L189019:

; 1760 : 
; 1761 : 	// first destroy the menu if we're trying to loadmenu again
; 1762 : 	DestroyMenu();

  0679b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0679e	8b 10		 mov	 edx, DWORD PTR [eax]
  067a0	8b f4		 mov	 esi, esp
  067a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  067a5	ff 52 24	 call	 DWORD PTR [edx+36]
  067a8	3b f4		 cmp	 esi, esp
  067aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1763 : 
; 1764 : 	// Attempt to create us as a menu...
; 1765 : 	if(!CMenu::CreateMenu())return FALSE;

  067af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  067b2	e8 00 00 00 00	 call	 ?CreateMenu@CMenu@@QAEHXZ ; CMenu::CreateMenu
  067b7	85 c0		 test	 eax, eax
  067b9	75 07		 jne	 SHORT $L189020
  067bb	33 c0		 xor	 eax, eax
  067bd	e9 d6 04 00 00	 jmp	 $L189003
$L189020:

; 1766 : 	
; 1767 : 	// Get Item template Header, and calculate offset of MENUITEMTEMPLATES
; 1768 : 	
; 1769 : 	MENUITEMTEMPLATEHEADER *pTpHdr=
; 1770 : 		(MENUITEMTEMPLATEHEADER*)LockResource(hGlobal);

  067c2	8b f4		 mov	 esi, esp
  067c4	8b 45 e4	 mov	 eax, DWORD PTR _hGlobal$[ebp]
  067c7	50		 push	 eax
  067c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  067ce	3b f4		 cmp	 esi, esp
  067d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  067d5	89 45 e0	 mov	 DWORD PTR _pTpHdr$[ebp], eax

; 1771 : 	BYTE* pTp=(BYTE*)pTpHdr + 
; 1772 : 		(sizeof(MENUITEMTEMPLATEHEADER) + pTpHdr->offset);

  067d8	8b 4d e0	 mov	 ecx, DWORD PTR _pTpHdr$[ebp]
  067db	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  067df	8b 45 e0	 mov	 eax, DWORD PTR _pTpHdr$[ebp]
  067e2	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  067e6	89 4d dc	 mov	 DWORD PTR _pTp$[ebp], ecx

; 1773 : 	
; 1774 : 	
; 1775 : 	// Variables needed during processing of Menu Item Templates:
; 1776 : 	
; 1777 : 	int j=0;

  067e9	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 1778 : 	WORD    dwFlags = 0;              // Flags of the Menu Item

  067f0	66 c7 45 d0 00
	00		 mov	 WORD PTR _dwFlags$[ebp], 0

; 1779 : 	WORD    dwID  = 0;              // ID of the Menu Item

  067f6	66 c7 45 c4 00
	00		 mov	 WORD PTR _dwID$[ebp], 0

; 1780 : 	UINT    uFlags;                  // Actual Flags.
; 1781 : 	wchar_t *szCaption=NULL;

  067fc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _szCaption$[ebp], 0

; 1782 : 	int      nLen   = 0;                // Length of caption

  06803	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 1783 : 	CTypedPtrArray<CPtrArray, BCMenu*>  m_Stack;    // Popup menu stack

  0680a	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0680d	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ
  06812	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1784 : 	CArray<BOOL,BOOL>  m_StackEnd;    // Popup menu stack

  06819	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  0681c	e8 00 00 00 00	 call	 ??0?$CArray@HH@@QAE@XZ	; CArray<int,int>::CArray<int,int>
  06821	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1785 : 	m_Stack.Add(this);                  // Add it to this...

  06825	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  06828	52		 push	 edx
  06829	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0682c	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::Add

; 1786 : 	m_StackEnd.Add(FALSE);

  06831	6a 00		 push	 0
  06833	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06836	e8 00 00 00 00	 call	 ?Add@?$CArray@HH@@QAEHH@Z ; CArray<int,int>::Add
$L189139:

; 1787 : 	
; 1788 : 	do{
; 1789 : 		// Obtain Flags and (if necessary), the ID...
; 1790 : 		memcpy(&dwFlags, pTp, sizeof(WORD));pTp+=sizeof(WORD);// Obtain Flags

  0683b	6a 02		 push	 2
  0683d	8b 45 dc	 mov	 eax, DWORD PTR _pTp$[ebp]
  06840	50		 push	 eax
  06841	8d 4d d0	 lea	 ecx, DWORD PTR _dwFlags$[ebp]
  06844	51		 push	 ecx
  06845	e8 00 00 00 00	 call	 _memcpy
  0684a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0684d	8b 55 dc	 mov	 edx, DWORD PTR _pTp$[ebp]
  06850	83 c2 02	 add	 edx, 2
  06853	89 55 dc	 mov	 DWORD PTR _pTp$[ebp], edx

; 1791 : 		if(!(dwFlags & MF_POPUP)){

  06856	0f b7 45 d0	 movzx	 eax, WORD PTR _dwFlags$[ebp]
  0685a	83 e0 10	 and	 eax, 16			; 00000010H
  0685d	75 1d		 jne	 SHORT $L189144

; 1792 : 			memcpy(&dwID, pTp, sizeof(WORD)); // Obtain ID

  0685f	6a 02		 push	 2
  06861	8b 4d dc	 mov	 ecx, DWORD PTR _pTp$[ebp]
  06864	51		 push	 ecx
  06865	8d 55 c4	 lea	 edx, DWORD PTR _dwID$[ebp]
  06868	52		 push	 edx
  06869	e8 00 00 00 00	 call	 _memcpy
  0686e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1793 : 			pTp+=sizeof(WORD);

  06871	8b 45 dc	 mov	 eax, DWORD PTR _pTp$[ebp]
  06874	83 c0 02	 add	 eax, 2
  06877	89 45 dc	 mov	 DWORD PTR _pTp$[ebp], eax

; 1794 : 		}
; 1795 : 		else dwID = 0;

  0687a	eb 06		 jmp	 SHORT $L189147
$L189144:
  0687c	66 c7 45 c4 00
	00		 mov	 WORD PTR _dwID$[ebp], 0
$L189147:

; 1796 : 		
; 1797 : 		uFlags = (UINT)dwFlags; // Remove MF_END from the flags that will

  06882	0f b7 4d d0	 movzx	 ecx, WORD PTR _dwFlags$[ebp]
  06886	89 4d bc	 mov	 DWORD PTR _uFlags$[ebp], ecx

; 1798 : 		if(uFlags & MF_END) // be passed to the Append(OD)Menu functions.

  06889	8b 55 bc	 mov	 edx, DWORD PTR _uFlags$[ebp]
  0688c	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  06892	74 0b		 je	 SHORT $L189149

; 1799 : 			uFlags -= MF_END;

  06894	8b 45 bc	 mov	 eax, DWORD PTR _uFlags$[ebp]
  06897	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  0689c	89 45 bc	 mov	 DWORD PTR _uFlags$[ebp], eax
$L189149:

; 1800 : 		
; 1801 : 		// Obtain Caption (and length)
; 1802 : 		
; 1803 : 		nLen = 0;

  0689f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 1804 : 		szCaption=new wchar_t[wcslen((wchar_t *)pTp)+1];

  068a6	68 0c 07 00 00	 push	 1804			; 0000070cH
  068ab	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  068b0	8b f4		 mov	 esi, esp
  068b2	8b 4d dc	 mov	 ecx, DWORD PTR _pTp$[ebp]
  068b5	51		 push	 ecx
  068b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  068bc	83 c4 04	 add	 esp, 4
  068bf	3b f4		 cmp	 esi, esp
  068c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  068c6	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  068ca	52		 push	 edx
  068cb	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  068d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  068d3	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T192556[ebp], eax
  068d9	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T192556[ebp]
  068df	89 45 b8	 mov	 DWORD PTR _szCaption$[ebp], eax

; 1805 : 		wcscpy(szCaption,(wchar_t *)pTp);

  068e2	8b f4		 mov	 esi, esp
  068e4	8b 4d dc	 mov	 ecx, DWORD PTR _pTp$[ebp]
  068e7	51		 push	 ecx
  068e8	8b 55 b8	 mov	 edx, DWORD PTR _szCaption$[ebp]
  068eb	52		 push	 edx
  068ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  068f2	83 c4 08	 add	 esp, 8
  068f5	3b f4		 cmp	 esi, esp
  068f7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1806 : 		pTp=&pTp[(wcslen((wchar_t *)pTp)+1)*sizeof(wchar_t)];//modified SK

  068fc	8b f4		 mov	 esi, esp
  068fe	8b 45 dc	 mov	 eax, DWORD PTR _pTp$[ebp]
  06901	50		 push	 eax
  06902	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  06908	83 c4 04	 add	 esp, 4
  0690b	3b f4		 cmp	 esi, esp
  0690d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06912	8b 4d dc	 mov	 ecx, DWORD PTR _pTp$[ebp]
  06915	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  06919	89 55 dc	 mov	 DWORD PTR _pTp$[ebp], edx

; 1807 : 		
; 1808 : 		// Handle popup menus first....
; 1809 : 		
; 1810 : 		//WideCharToMultiByte
; 1811 : 		if(dwFlags & MF_POPUP){

  0691c	0f b7 45 d0	 movzx	 eax, WORD PTR _dwFlags$[ebp]
  06920	83 e0 10	 and	 eax, 16			; 00000010H
  06923	0f 84 2f 01 00
	00		 je	 $L189156

; 1812 : 			if(dwFlags & MF_END)m_StackEnd.SetAt(m_Stack.GetUpperBound(),TRUE);

  06929	0f b7 4d d0	 movzx	 ecx, WORD PTR _dwFlags$[ebp]
  0692d	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  06933	74 13		 je	 SHORT $L189157
  06935	6a 01		 push	 1
  06937	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0693a	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0693f	50		 push	 eax
  06940	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06943	e8 00 00 00 00	 call	 ?SetAt@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetAt
$L189157:

; 1813 : 			BCMenu* pSubMenu = new BCMenu;

  06948	68 15 07 00 00	 push	 1813			; 00000715H
  0694d	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  06952	6a 64		 push	 100			; 00000064H
  06954	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  06959	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T192558[ebp], eax
  0695f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  06963	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR $T192558[ebp], 0
  0696a	74 13		 je	 SHORT $L192559
  0696c	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T192558[ebp]
  06972	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  06977	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv196[ebp], eax
  0697d	eb 0a		 jmp	 SHORT $L192560
$L192559:
  0697f	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv196[ebp], 0
$L192560:
  06989	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR tv196[ebp]
  0698f	89 95 60 ff ff
	ff		 mov	 DWORD PTR $T192557[ebp], edx
  06995	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  06999	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T192557[ebp]
  0699f	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pSubMenu$189158[ebp], eax

; 1814 : //added by vito--
; 1815 : 			pSubMenu->SetMenuItemBkColor( m_menuItemBkColor );

  069a5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  069a8	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  069ab	52		 push	 edx
  069ac	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pSubMenu$189158[ebp]
  069b2	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 1816 : 			pSubMenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  069b7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  069ba	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  069bd	51		 push	 ecx
  069be	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pSubMenu$189158[ebp]
  069c4	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor

; 1817 : //--			
; 1818 : 			pSubMenu->m_unselectcheck=m_unselectcheck;

  069c9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pSubMenu$189158[ebp]
  069cf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  069d2	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  069d5	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1819 : 			pSubMenu->m_selectcheck=m_selectcheck;

  069d8	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pSubMenu$189158[ebp]
  069de	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  069e1	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  069e4	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 1820 : 			pSubMenu->checkmaps=checkmaps;

  069e7	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pSubMenu$189158[ebp]
  069ed	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  069f0	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  069f3	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1821 : 			pSubMenu->checkmapsshare=TRUE;

  069f6	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pSubMenu$189158[ebp]
  069fc	c7 42 40 01 00
	00 00		 mov	 DWORD PTR [edx+64], 1

; 1822 : 			pSubMenu->CreatePopupMenu();

  06a03	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pSubMenu$189158[ebp]
  06a09	e8 00 00 00 00	 call	 ?CreatePopupMenu@CMenu@@QAEHXZ ; CMenu::CreatePopupMenu

; 1823 : 			
; 1824 : 			// Append it to the top of the stack:
; 1825 : 			
; 1826 : 			m_Stack[m_Stack.GetUpperBound()]->AppendODMenuW(szCaption,uFlags,
; 1827 : 				(UINT)pSubMenu->m_hMenu, -1);

  06a0e	6a ff		 push	 -1
  06a10	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pSubMenu$189158[ebp]
  06a16	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  06a19	51		 push	 ecx
  06a1a	8b 55 bc	 mov	 edx, DWORD PTR _uFlags$[ebp]
  06a1d	52		 push	 edx
  06a1e	8b 45 b8	 mov	 eax, DWORD PTR _szCaption$[ebp]
  06a21	50		 push	 eax
  06a22	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06a25	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06a2a	50		 push	 eax
  06a2b	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06a2e	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
  06a33	8b 08		 mov	 ecx, DWORD PTR [eax]
  06a35	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 1828 : 
; 1829 : 			m_Stack.Add(pSubMenu);

  06a3a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pSubMenu$189158[ebp]
  06a40	51		 push	 ecx
  06a41	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06a44	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::Add

; 1830 : 			m_StackEnd.Add(FALSE);

  06a49	6a 00		 push	 0
  06a4b	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06a4e	e8 00 00 00 00	 call	 ?Add@?$CArray@HH@@QAEHH@Z ; CArray<int,int>::Add

; 1831 : 		}
; 1832 : 		else {

  06a53	e9 a7 00 00 00	 jmp	 $L189166
$L189156:

; 1833 : 			m_Stack[m_Stack.GetUpperBound()]->AppendODMenuW(szCaption, uFlags,
; 1834 : 				dwID, -1);

  06a58	6a ff		 push	 -1
  06a5a	0f b7 55 c4	 movzx	 edx, WORD PTR _dwID$[ebp]
  06a5e	52		 push	 edx
  06a5f	8b 45 bc	 mov	 eax, DWORD PTR _uFlags$[ebp]
  06a62	50		 push	 eax
  06a63	8b 4d b8	 mov	 ecx, DWORD PTR _szCaption$[ebp]
  06a66	51		 push	 ecx
  06a67	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06a6a	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06a6f	50		 push	 eax
  06a70	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06a73	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
  06a78	8b 08		 mov	 ecx, DWORD PTR [eax]
  06a7a	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 1835 : 			if(dwFlags & MF_END)m_StackEnd.SetAt(m_Stack.GetUpperBound(),TRUE);

  06a7f	0f b7 55 d0	 movzx	 edx, WORD PTR _dwFlags$[ebp]
  06a83	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  06a89	74 13		 je	 SHORT $L189167
  06a8b	6a 01		 push	 1
  06a8d	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06a90	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06a95	50		 push	 eax
  06a96	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06a99	e8 00 00 00 00	 call	 ?SetAt@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetAt
$L189167:

; 1836 : 			j = m_Stack.GetUpperBound();

  06a9e	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06aa1	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06aa6	89 45 d8	 mov	 DWORD PTR _j$[ebp], eax
$L189169:

; 1837 : 			while(j>=0 && m_StackEnd.GetAt(j)){

  06aa9	83 7d d8 00	 cmp	 DWORD PTR _j$[ebp], 0
  06aad	7c 50		 jl	 SHORT $L189166
  06aaf	8b 45 d8	 mov	 eax, DWORD PTR _j$[ebp]
  06ab2	50		 push	 eax
  06ab3	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06ab6	e8 00 00 00 00	 call	 ?GetAt@?$CArray@HH@@QAEAAHH@Z ; CArray<int,int>::GetAt
  06abb	83 38 00	 cmp	 DWORD PTR [eax], 0
  06abe	74 3f		 je	 SHORT $L189166

; 1838 : 				m_Stack[m_Stack.GetUpperBound()]->InsertSpaces();

  06ac0	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06ac3	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06ac8	50		 push	 eax
  06ac9	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06acc	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
  06ad1	8b 08		 mov	 ecx, DWORD PTR [eax]
  06ad3	e8 00 00 00 00	 call	 ?InsertSpaces@BCMenu@@IAEXXZ ; BCMenu::InsertSpaces

; 1839 : 				m_Stack.RemoveAt(j);

  06ad8	6a 01		 push	 1
  06ada	8b 4d d8	 mov	 ecx, DWORD PTR _j$[ebp]
  06add	51		 push	 ecx
  06ade	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06ae1	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 1840 : 				m_StackEnd.RemoveAt(j);

  06ae6	6a 01		 push	 1
  06ae8	8b 55 d8	 mov	 edx, DWORD PTR _j$[ebp]
  06aeb	52		 push	 edx
  06aec	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06aef	e8 00 00 00 00	 call	 ?RemoveAt@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::RemoveAt

; 1841 : 				--j;

  06af4	8b 45 d8	 mov	 eax, DWORD PTR _j$[ebp]
  06af7	83 e8 01	 sub	 eax, 1
  06afa	89 45 d8	 mov	 DWORD PTR _j$[ebp], eax

; 1842 : 			}

  06afd	eb aa		 jmp	 SHORT $L189169
$L189166:

; 1843 : 		}
; 1844 : 		
; 1845 : 		delete[] szCaption;

  06aff	8b 4d b8	 mov	 ecx, DWORD PTR _szCaption$[ebp]
  06b02	89 8d 58 ff ff
	ff		 mov	 DWORD PTR $T192561[ebp], ecx
  06b08	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR $T192561[ebp]
  06b0e	52		 push	 edx
  06b0f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  06b14	83 c4 04	 add	 esp, 4

; 1846 : 	}while(m_Stack.GetUpperBound() != -1);

  06b17	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06b1a	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06b1f	83 f8 ff	 cmp	 eax, -1
  06b22	0f 85 13 fd ff
	ff		 jne	 $L189139

; 1847 : 	
; 1848 : 	for(int i=0;i<(int)GetMenuItemCount();++i){

  06b28	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$189172[ebp], 0
  06b32	eb 0f		 jmp	 SHORT $L189174
$L189175:
  06b34	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$189172[ebp]
  06b3a	83 c0 01	 add	 eax, 1
  06b3d	89 85 74 ff ff
	ff		 mov	 DWORD PTR _i$189172[ebp], eax
$L189174:
  06b43	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06b46	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  06b4b	39 85 74 ff ff
	ff		 cmp	 DWORD PTR _i$189172[ebp], eax
  06b51	0f 8d 0c 01 00
	00		 jge	 $L189176

; 1849 : 		CString str=m_MenuList[i]->GetString();

  06b57	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _str$189177[ebp]
  06b5d	51		 push	 ecx
  06b5e	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _i$189172[ebp]
  06b64	52		 push	 edx
  06b65	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06b68	83 c1 08	 add	 ecx, 8
  06b6b	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06b70	8b 08		 mov	 ecx, DWORD PTR [eax]
  06b72	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  06b77	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1850 : 		if(GetSubMenu(i)){

  06b7b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$189172[ebp]
  06b81	50		 push	 eax
  06b82	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06b85	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  06b8a	85 c0		 test	 eax, eax
  06b8c	74 5a		 je	 SHORT $L189179

; 1851 : 			m_MenuList[i]->nFlags=MF_POPUP|MF_BYPOSITION;

  06b8e	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189172[ebp]
  06b94	51		 push	 ecx
  06b95	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06b98	83 c1 08	 add	 ecx, 8
  06b9b	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06ba0	8b 10		 mov	 edx, DWORD PTR [eax]
  06ba2	c7 42 10 10 04
	00 00		 mov	 DWORD PTR [edx+16], 1040 ; 00000410H

; 1852 : 			ModifyMenu(i,MF_POPUP|MF_BYPOSITION,
; 1853 : 				(UINT)GetSubMenu(i)->m_hMenu,str);

  06ba9	8b f4		 mov	 esi, esp
  06bab	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _str$189177[ebp]
  06bb1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  06bb7	3b f4		 cmp	 esi, esp
  06bb9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06bbe	50		 push	 eax
  06bbf	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$189172[ebp]
  06bc5	50		 push	 eax
  06bc6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06bc9	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  06bce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  06bd1	51		 push	 ecx
  06bd2	68 10 04 00 00	 push	 1040			; 00000410H
  06bd7	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _i$189172[ebp]
  06bdd	52		 push	 edx
  06bde	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06be1	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA

; 1854 : 		}
; 1855 : 		else{

  06be6	eb 5d		 jmp	 SHORT $L189181
$L189179:

; 1856 : 			m_MenuList[i]->nFlags=MF_STRING|MF_BYPOSITION;

  06be8	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$189172[ebp]
  06bee	50		 push	 eax
  06bef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06bf2	83 c1 08	 add	 ecx, 8
  06bf5	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06bfa	8b 08		 mov	 ecx, DWORD PTR [eax]
  06bfc	c7 41 10 00 04
	00 00		 mov	 DWORD PTR [ecx+16], 1024 ; 00000400H

; 1857 : 			ModifyMenu(i,MF_STRING|MF_BYPOSITION,m_MenuList[i]->nID,str);

  06c03	8b f4		 mov	 esi, esp
  06c05	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _str$189177[ebp]
  06c0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  06c11	3b f4		 cmp	 esi, esp
  06c13	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06c18	50		 push	 eax
  06c19	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _i$189172[ebp]
  06c1f	52		 push	 edx
  06c20	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06c23	83 c1 08	 add	 ecx, 8
  06c26	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06c2b	8b 00		 mov	 eax, DWORD PTR [eax]
  06c2d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  06c30	51		 push	 ecx
  06c31	68 00 04 00 00	 push	 1024			; 00000400H
  06c36	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _i$189172[ebp]
  06c3c	52		 push	 edx
  06c3d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06c40	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L189181:

; 1858 : 		}
; 1859 : 	}

  06c45	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  06c49	8b f4		 mov	 esi, esp
  06c4b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _str$189177[ebp]
  06c51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06c57	3b f4		 cmp	 esi, esp
  06c59	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06c5e	e9 d1 fe ff ff	 jmp	 $L189175
$L189176:

; 1860 : 
; 1861 : 	m_loadmenu=TRUE;

  06c63	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  06c66	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [eax+80], 1

; 1862 : 	
; 1863 : 	return(TRUE);

  06c6d	c7 85 54 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T192562[ebp], 1
  06c77	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06c7b	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  06c7e	e8 00 00 00 00	 call	 ??1?$CArray@HH@@UAE@XZ	; CArray<int,int>::~CArray<int,int>
  06c83	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06c8a	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  06c8d	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
  06c92	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T192562[ebp]
$L189003:

; 1864 : }

  06c98	52		 push	 edx
  06c99	8b cd		 mov	 ecx, ebp
  06c9b	50		 push	 eax
  06c9c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192576
  06ca2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  06ca7	58		 pop	 eax
  06ca8	5a		 pop	 edx
  06ca9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06cac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06cb3	5f		 pop	 edi
  06cb4	5e		 pop	 esi
  06cb5	81 c4 b0 00 00
	00		 add	 esp, 176		; 000000b0H
  06cbb	3b ec		 cmp	 ebp, esp
  06cbd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06cc2	8b e5		 mov	 esp, ebp
  06cc4	5d		 pop	 ebp
  06cc5	c2 04 00	 ret	 4
$L192576:
  06cc8	05 00 00 00	 DD	 5
  06ccc	00 00 00 00	 DD	 $L192575
$L192575:
  06cd0	d0 ff ff ff	 DD	 -48			; ffffffd0H
  06cd4	02 00 00 00	 DD	 2
  06cd8	00 00 00 00	 DD	 $L192569
  06cdc	c4 ff ff ff	 DD	 -60			; ffffffc4H
  06ce0	02 00 00 00	 DD	 2
  06ce4	00 00 00 00	 DD	 $L192570
  06ce8	9c ff ff ff	 DD	 -100			; ffffff9cH
  06cec	14 00 00 00	 DD	 20			; 00000014H
  06cf0	00 00 00 00	 DD	 $L192571
  06cf4	80 ff ff ff	 DD	 -128			; ffffff80H
  06cf8	14 00 00 00	 DD	 20			; 00000014H
  06cfc	00 00 00 00	 DD	 $L192572
  06d00	6c ff ff ff	 DD	 -148			; ffffff6cH
  06d04	04 00 00 00	 DD	 4
  06d08	00 00 00 00	 DD	 $L192573
$L192573:
  06d0c	73		 DB	 115			; 00000073H
  06d0d	74		 DB	 116			; 00000074H
  06d0e	72		 DB	 114			; 00000072H
  06d0f	00		 DB	 0
$L192572:
  06d10	6d		 DB	 109			; 0000006dH
  06d11	5f		 DB	 95			; 0000005fH
  06d12	53		 DB	 83			; 00000053H
  06d13	74		 DB	 116			; 00000074H
  06d14	61		 DB	 97			; 00000061H
  06d15	63		 DB	 99			; 00000063H
  06d16	6b		 DB	 107			; 0000006bH
  06d17	45		 DB	 69			; 00000045H
  06d18	6e		 DB	 110			; 0000006eH
  06d19	64		 DB	 100			; 00000064H
  06d1a	00		 DB	 0
$L192571:
  06d1b	6d		 DB	 109			; 0000006dH
  06d1c	5f		 DB	 95			; 0000005fH
  06d1d	53		 DB	 83			; 00000053H
  06d1e	74		 DB	 116			; 00000074H
  06d1f	61		 DB	 97			; 00000061H
  06d20	63		 DB	 99			; 00000063H
  06d21	6b		 DB	 107			; 0000006bH
  06d22	00		 DB	 0
$L192570:
  06d23	64		 DB	 100			; 00000064H
  06d24	77		 DB	 119			; 00000077H
  06d25	49		 DB	 73			; 00000049H
  06d26	44		 DB	 68			; 00000044H
  06d27	00		 DB	 0
$L192569:
  06d28	64		 DB	 100			; 00000064H
  06d29	77		 DB	 119			; 00000077H
  06d2a	46		 DB	 70			; 00000046H
  06d2b	6c		 DB	 108			; 0000006cH
  06d2c	61		 DB	 97			; 00000061H
  06d2d	67		 DB	 103			; 00000067H
  06d2e	73		 DB	 115			; 00000073H
  06d2f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192563:
  00425	8d 4d 9c	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  00428	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
$L192564:
  0042d	8d 4d 80	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  00430	e9 00 00 00 00	 jmp	 ??1?$CArray@HH@@UAE@XZ	; CArray<int,int>::~CArray<int,int>
$L192565:
  00435	68 15 07 00 00	 push	 1813			; 00000715H
  0043a	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0043f	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T192558[ebp]
  00445	50		 push	 eax
  00446	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  0044b	c3		 ret	 0
$L192566:
  0044c	8b f4		 mov	 esi, esp
  0044e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _str$189177[ebp]
  00454	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0045a	3b f4		 cmp	 esi, esp
  0045c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?LoadMenuA@BCMenu@@UAEHPBD@Z:
  00461	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192568
  00466	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadMenuA@BCMenu@@UAEHPBD@Z ENDP			; BCMenu::LoadMenuA
PUBLIC	??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *>::`vftable'
PUBLIC	??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::`scalar deleting destructor'
PUBLIC	??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z:NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::`vector deleting destructor'
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
CONST	SEGMENT
??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ DD FLAT:??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CPtrArray@@UBEXXZ
	DD	FLAT:?Dump@CPtrArray@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
rdata$r	SEGMENT
??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ DD 00H ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8
	DD	FLAT:??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8
_DATA	SEGMENT
??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8 DD FLAT:??_7type_info@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT
??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 DD 00H	; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT
??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 DD FLAT:??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CPtrArray@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 DD FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::CTypedPtrArray<CPtrArray,BCMenu *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CPtrArray@@QAE@XZ	; CPtrArray::CPtrArray
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::CTypedPtrArray<CPtrArray,BCMenu *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::~CTypedPtrArray<CPtrArray,BCMenu *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CPtrArray@@UAE@XZ	; CPtrArray::~CPtrArray
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::~CTypedPtrArray<CPtrArray,BCMenu *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L189190
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L189190:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
EXTRN	?GetSize@CPtrArray@@QBEHXZ:NEAR			; CPtrArray::GetSize
EXTRN	?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:NEAR ; CMenu::GetMenuStringA
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:NEAR
xdata$x	SEGMENT
$T192596 DD	0ffffffffH
	DD	FLAT:$L192586
	DD	00H
	DD	FLAT:$L192587
	DD	01H
	DD	FLAT:$L192588
$T192590 DD	019930520H
	DD	03H
	DD	FLAT:$T192596
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv146 = -84						; size = 4
tv151 = -80						; size = 4
$T192585 = -76						; size = 4
$T192584 = -72						; size = 4
_nummenu$ = -68						; size = 4
_nummenulist$ = -64					; size = 4
_j$ = -60						; size = 4
_i$ = -56						; size = 4
_menustart$ = -52					; size = 4
_listloc$ = -48						; size = 4
_menuloc$ = -44						; size = 4
_str$ = -36						; size = 4
_name$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetMenuStart@BCMenu@@IAEHXZ PROC NEAR			; BCMenu::GetMenuStart
; _this$ = ecx

; 1867 : {

  06d30	55		 push	 ebp
  06d31	8b ec		 mov	 ebp, esp
  06d33	6a ff		 push	 -1
  06d35	68 00 00 00 00	 push	 __ehhandler$?GetMenuStart@BCMenu@@IAEHXZ
  06d3a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06d40	50		 push	 eax
  06d41	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06d48	83 ec 48	 sub	 esp, 72			; 00000048H
  06d4b	56		 push	 esi
  06d4c	57		 push	 edi
  06d4d	51		 push	 ecx
  06d4e	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  06d51	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  06d56	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  06d5b	f3 ab		 rep stosd
  06d5d	59		 pop	 ecx
  06d5e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1868 : 	if(!m_loadmenu)return(0);

  06d61	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  06d64	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  06d68	75 07		 jne	 SHORT $L189195
  06d6a	33 c0		 xor	 eax, eax
  06d6c	e9 aa 01 00 00	 jmp	 $L189194
$L189195:

; 1869 : 
; 1870 : 	CString name,str;

  06d71	8b f4		 mov	 esi, esp
  06d73	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  06d76	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06d7c	3b f4		 cmp	 esi, esp
  06d7e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06d83	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  06d8a	8b f4		 mov	 esi, esp
  06d8c	8d 4d dc	 lea	 ecx, DWORD PTR _str$[ebp]
  06d8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06d95	3b f4		 cmp	 esi, esp
  06d97	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06d9c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1871 : 	int menuloc=-1,listloc=-1,menustart=0,i=0,j=0;

  06da0	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _menuloc$[ebp], -1
  06da7	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _listloc$[ebp], -1
  06dae	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _menustart$[ebp], 0
  06db5	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  06dbc	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 1872 : 	int nummenulist=m_MenuList.GetSize();

  06dc3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06dc6	83 c1 08	 add	 ecx, 8
  06dc9	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  06dce	89 45 c0	 mov	 DWORD PTR _nummenulist$[ebp], eax

; 1873 : 	int nummenu=(int)GetMenuItemCount();

  06dd1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06dd4	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  06dd9	89 45 bc	 mov	 DWORD PTR _nummenu$[ebp], eax
$L189207:

; 1874 : 
; 1875 : 	while(i<nummenu&&menuloc==-1){

  06ddc	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  06ddf	3b 4d bc	 cmp	 ecx, DWORD PTR _nummenu$[ebp]
  06de2	0f 8d de 00 00
	00		 jge	 $L189208
  06de8	83 7d d4 ff	 cmp	 DWORD PTR _menuloc$[ebp], -1
  06dec	0f 85 d4 00 00
	00		 jne	 $L189208

; 1876 : 		GetMenuString (i, name, MF_BYPOSITION);

  06df2	68 00 04 00 00	 push	 1024			; 00000400H
  06df7	8d 55 e8	 lea	 edx, DWORD PTR _name$[ebp]
  06dfa	52		 push	 edx
  06dfb	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  06dfe	50		 push	 eax
  06dff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06e02	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 1877 : 		if(name.GetLength()>0){

  06e07	8b f4		 mov	 esi, esp
  06e09	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  06e0c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  06e12	3b f4		 cmp	 esi, esp
  06e14	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06e19	85 c0		 test	 eax, eax
  06e1b	0f 8e 97 00 00
	00		 jle	 $L189209

; 1878 : 			for(j=0;j<nummenulist;++j){

  06e21	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  06e28	eb 09		 jmp	 SHORT $L189210
$L189211:
  06e2a	8b 4d c4	 mov	 ecx, DWORD PTR _j$[ebp]
  06e2d	83 c1 01	 add	 ecx, 1
  06e30	89 4d c4	 mov	 DWORD PTR _j$[ebp], ecx
$L189210:
  06e33	8b 55 c4	 mov	 edx, DWORD PTR _j$[ebp]
  06e36	3b 55 c0	 cmp	 edx, DWORD PTR _nummenulist$[ebp]
  06e39	7d 7d		 jge	 SHORT $L189209

; 1879 : 				str=m_MenuList[j]->GetString();

  06e3b	8d 45 b8	 lea	 eax, DWORD PTR $T192584[ebp]
  06e3e	50		 push	 eax
  06e3f	8b 4d c4	 mov	 ecx, DWORD PTR _j$[ebp]
  06e42	51		 push	 ecx
  06e43	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06e46	83 c1 08	 add	 ecx, 8
  06e49	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06e4e	8b 08		 mov	 ecx, DWORD PTR [eax]
  06e50	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  06e55	89 45 b0	 mov	 DWORD PTR tv151[ebp], eax
  06e58	8b 55 b0	 mov	 edx, DWORD PTR tv151[ebp]
  06e5b	89 55 ac	 mov	 DWORD PTR tv146[ebp], edx
  06e5e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  06e62	8b f4		 mov	 esi, esp
  06e64	8b 45 ac	 mov	 eax, DWORD PTR tv146[ebp]
  06e67	50		 push	 eax
  06e68	8d 4d dc	 lea	 ecx, DWORD PTR _str$[ebp]
  06e6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  06e71	3b f4		 cmp	 esi, esp
  06e73	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06e78	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  06e7c	8b f4		 mov	 esi, esp
  06e7e	8d 4d b8	 lea	 ecx, DWORD PTR $T192584[ebp]
  06e81	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06e87	3b f4		 cmp	 esi, esp
  06e89	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1880 : 				if(name==str){

  06e8e	8d 4d dc	 lea	 ecx, DWORD PTR _str$[ebp]
  06e91	51		 push	 ecx
  06e92	8d 55 e8	 lea	 edx, DWORD PTR _name$[ebp]
  06e95	52		 push	 edx
  06e96	e8 00 00 00 00	 call	 ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
  06e9b	83 c4 08	 add	 esp, 8
  06e9e	0f b6 c0	 movzx	 eax, al
  06ea1	85 c0		 test	 eax, eax
  06ea3	74 0e		 je	 SHORT $L189214

; 1881 : 					menuloc=i;

  06ea5	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  06ea8	89 4d d4	 mov	 DWORD PTR _menuloc$[ebp], ecx

; 1882 : 					listloc=j;

  06eab	8b 55 c4	 mov	 edx, DWORD PTR _j$[ebp]
  06eae	89 55 d0	 mov	 DWORD PTR _listloc$[ebp], edx

; 1883 : 					break;

  06eb1	eb 05		 jmp	 SHORT $L189209
$L189214:

; 1884 : 				}
; 1885 : 			}

  06eb3	e9 72 ff ff ff	 jmp	 $L189211
$L189209:

; 1886 : 		}
; 1887 : 		++i;

  06eb8	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  06ebb	83 c0 01	 add	 eax, 1
  06ebe	89 45 c8	 mov	 DWORD PTR _i$[ebp], eax

; 1888 : 	}

  06ec1	e9 16 ff ff ff	 jmp	 $L189207
$L189208:

; 1889 : 	if(menuloc>=0&&listloc>=0&&menuloc>=listloc)menustart=menuloc-listloc;

  06ec6	83 7d d4 00	 cmp	 DWORD PTR _menuloc$[ebp], 0
  06eca	7c 17		 jl	 SHORT $L189215
  06ecc	83 7d d0 00	 cmp	 DWORD PTR _listloc$[ebp], 0
  06ed0	7c 11		 jl	 SHORT $L189215
  06ed2	8b 4d d4	 mov	 ecx, DWORD PTR _menuloc$[ebp]
  06ed5	3b 4d d0	 cmp	 ecx, DWORD PTR _listloc$[ebp]
  06ed8	7c 09		 jl	 SHORT $L189215
  06eda	8b 55 d4	 mov	 edx, DWORD PTR _menuloc$[ebp]
  06edd	2b 55 d0	 sub	 edx, DWORD PTR _listloc$[ebp]
  06ee0	89 55 cc	 mov	 DWORD PTR _menustart$[ebp], edx
$L189215:

; 1890 : 	return(menustart);

  06ee3	8b 45 cc	 mov	 eax, DWORD PTR _menustart$[ebp]
  06ee6	89 45 b4	 mov	 DWORD PTR $T192585[ebp], eax
  06ee9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06eed	8b f4		 mov	 esi, esp
  06eef	8d 4d dc	 lea	 ecx, DWORD PTR _str$[ebp]
  06ef2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06ef8	3b f4		 cmp	 esi, esp
  06efa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06eff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06f06	8b f4		 mov	 esi, esp
  06f08	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  06f0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06f11	3b f4		 cmp	 esi, esp
  06f13	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06f18	8b 45 b4	 mov	 eax, DWORD PTR $T192585[ebp]
$L189194:

; 1891 : }

  06f1b	52		 push	 edx
  06f1c	8b cd		 mov	 ecx, ebp
  06f1e	50		 push	 eax
  06f1f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192595
  06f25	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  06f2a	58		 pop	 eax
  06f2b	5a		 pop	 edx
  06f2c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06f2f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06f36	5f		 pop	 edi
  06f37	5e		 pop	 esi
  06f38	83 c4 54	 add	 esp, 84			; 00000054H
  06f3b	3b ec		 cmp	 ebp, esp
  06f3d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06f42	8b e5		 mov	 esp, ebp
  06f44	5d		 pop	 ebp
  06f45	c3		 ret	 0
$L192595:
  06f46	02 00 00 00	 DD	 2
  06f4a	00 00 00 00	 DD	 $L192594
$L192594:
  06f4e	e8 ff ff ff	 DD	 -24			; ffffffe8H
  06f52	04 00 00 00	 DD	 4
  06f56	00 00 00 00	 DD	 $L192591
  06f5a	dc ff ff ff	 DD	 -36			; ffffffdcH
  06f5e	04 00 00 00	 DD	 4
  06f62	00 00 00 00	 DD	 $L192592
$L192592:
  06f66	73		 DB	 115			; 00000073H
  06f67	74		 DB	 116			; 00000074H
  06f68	72		 DB	 114			; 00000072H
  06f69	00		 DB	 0
$L192591:
  06f6a	6e		 DB	 110			; 0000006eH
  06f6b	61		 DB	 97			; 00000061H
  06f6c	6d		 DB	 109			; 0000006dH
  06f6d	65		 DB	 101			; 00000065H
  06f6e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192586:
  0046b	8b f4		 mov	 esi, esp
  0046d	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  00470	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00476	3b f4		 cmp	 esi, esp
  00478	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192587:
  0047d	8b f4		 mov	 esi, esp
  0047f	8d 4d dc	 lea	 ecx, DWORD PTR _str$[ebp]
  00482	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00488	3b f4		 cmp	 esi, esp
  0048a	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192588:
  0048f	8b f4		 mov	 esi, esp
  00491	8d 4d b8	 lea	 ecx, DWORD PTR $T192584[ebp]
  00494	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0049a	3b f4		 cmp	 esi, esp
  0049c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetMenuStart@BCMenu@@IAEHXZ:
  004a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192590
  004a6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetMenuStart@BCMenu@@IAEHXZ ENDP			; BCMenu::GetMenuStart
xdata$x	SEGMENT
$T192607 DD	0ffffffffH
	DD	FLAT:$L192599
	DD	00H
	DD	FLAT:$L192600
$T192602 DD	019930520H
	DD	02H
	DD	FLAT:$T192607
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv145 = -56						; size = 4
tv147 = -52						; size = 4
$T192598 = -48						; size = 4
_menustart$ = -44					; size = 4
_nummenulist$ = -40					; size = 4
_j$ = -36						; size = 4
_i$ = -32						; size = 4
_str$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ PROC NEAR	; BCMenu::RemoveTopLevelOwnerDraw
; _this$ = ecx

; 1894 : {

  06f70	55		 push	 ebp
  06f71	8b ec		 mov	 ebp, esp
  06f73	6a ff		 push	 -1
  06f75	68 00 00 00 00	 push	 __ehhandler$?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ
  06f7a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06f80	50		 push	 eax
  06f81	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06f88	83 ec 2c	 sub	 esp, 44			; 0000002cH
  06f8b	56		 push	 esi
  06f8c	57		 push	 edi
  06f8d	51		 push	 ecx
  06f8e	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  06f91	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  06f96	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  06f9b	f3 ab		 rep stosd
  06f9d	59		 pop	 ecx
  06f9e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1895 : 	CString str;

  06fa1	8b f4		 mov	 esi, esp
  06fa3	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  06fa6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06fac	3b f4		 cmp	 esi, esp
  06fae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06fb3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1896 : 	int i=0,j=0;

  06fba	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  06fc1	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 1897 : 	int nummenulist=m_MenuList.GetSize(),menustart;

  06fc8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06fcb	83 c1 08	 add	 ecx, 8
  06fce	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  06fd3	89 45 d8	 mov	 DWORD PTR _nummenulist$[ebp], eax

; 1898 : 
; 1899 : 	menustart=GetMenuStart();

  06fd6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06fd9	e8 00 00 00 00	 call	 ?GetMenuStart@BCMenu@@IAEHXZ ; BCMenu::GetMenuStart
  06fde	89 45 d4	 mov	 DWORD PTR _menustart$[ebp], eax

; 1900 : 	for(i=menustart,j=0;i<(int)GetMenuItemCount();++i,++j){

  06fe1	8b 45 d4	 mov	 eax, DWORD PTR _menustart$[ebp]
  06fe4	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
  06fe7	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  06fee	eb 12		 jmp	 SHORT $L189227
$L189228:
  06ff0	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  06ff3	83 c1 01	 add	 ecx, 1
  06ff6	89 4d e0	 mov	 DWORD PTR _i$[ebp], ecx
  06ff9	8b 55 dc	 mov	 edx, DWORD PTR _j$[ebp]
  06ffc	83 c2 01	 add	 edx, 1
  06fff	89 55 dc	 mov	 DWORD PTR _j$[ebp], edx
$L189227:
  07002	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  07005	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0700a	39 45 e0	 cmp	 DWORD PTR _i$[ebp], eax
  0700d	0f 8d c0 00 00
	00		 jge	 $L189229

; 1901 : 		if(j<nummenulist){

  07013	8b 45 dc	 mov	 eax, DWORD PTR _j$[ebp]
  07016	3b 45 d8	 cmp	 eax, DWORD PTR _nummenulist$[ebp]
  07019	0f 8d af 00 00
	00		 jge	 $L189230

; 1902 : 			str=m_MenuList[j]->GetString();

  0701f	8d 4d d0	 lea	 ecx, DWORD PTR $T192598[ebp]
  07022	51		 push	 ecx
  07023	8b 55 dc	 mov	 edx, DWORD PTR _j$[ebp]
  07026	52		 push	 edx
  07027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0702a	83 c1 08	 add	 ecx, 8
  0702d	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  07032	8b 08		 mov	 ecx, DWORD PTR [eax]
  07034	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  07039	89 45 cc	 mov	 DWORD PTR tv147[ebp], eax
  0703c	8b 45 cc	 mov	 eax, DWORD PTR tv147[ebp]
  0703f	89 45 c8	 mov	 DWORD PTR tv145[ebp], eax
  07042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  07046	8b f4		 mov	 esi, esp
  07048	8b 4d c8	 mov	 ecx, DWORD PTR tv145[ebp]
  0704b	51		 push	 ecx
  0704c	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  0704f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  07055	3b f4		 cmp	 esi, esp
  07057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0705c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  07060	8b f4		 mov	 esi, esp
  07062	8d 4d d0	 lea	 ecx, DWORD PTR $T192598[ebp]
  07065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0706b	3b f4		 cmp	 esi, esp
  0706d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1903 : 			if(GetSubMenu(i)){

  07072	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  07075	52		 push	 edx
  07076	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  07079	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0707e	85 c0		 test	 eax, eax
  07080	74 4c		 je	 SHORT $L189230

; 1904 : 				m_MenuList[j]->nFlags=MF_POPUP|MF_BYPOSITION;

  07082	8b 45 dc	 mov	 eax, DWORD PTR _j$[ebp]
  07085	50		 push	 eax
  07086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  07089	83 c1 08	 add	 ecx, 8
  0708c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  07091	8b 08		 mov	 ecx, DWORD PTR [eax]
  07093	c7 41 10 10 04
	00 00		 mov	 DWORD PTR [ecx+16], 1040 ; 00000410H

; 1905 : 				ModifyMenu(i,MF_POPUP|MF_BYPOSITION,
; 1906 : 					(UINT)GetSubMenu(i)->m_hMenu,str);

  0709a	8b f4		 mov	 esi, esp
  0709c	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  0709f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  070a5	3b f4		 cmp	 esi, esp
  070a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  070ac	50		 push	 eax
  070ad	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  070b0	52		 push	 edx
  070b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  070b4	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  070b9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  070bc	50		 push	 eax
  070bd	68 10 04 00 00	 push	 1040			; 00000410H
  070c2	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  070c5	51		 push	 ecx
  070c6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  070c9	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L189230:

; 1907 : 			}
; 1908 : 		}
; 1909 : 	}

  070ce	e9 1d ff ff ff	 jmp	 $L189228
$L189229:

; 1910 : 
; 1911 : }

  070d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  070da	8b f4		 mov	 esi, esp
  070dc	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  070df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  070e5	3b f4		 cmp	 esi, esp
  070e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  070ec	52		 push	 edx
  070ed	8b cd		 mov	 ecx, ebp
  070ef	50		 push	 eax
  070f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192606
  070f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  070fb	58		 pop	 eax
  070fc	5a		 pop	 edx
  070fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07107	5f		 pop	 edi
  07108	5e		 pop	 esi
  07109	83 c4 38	 add	 esp, 56			; 00000038H
  0710c	3b ec		 cmp	 ebp, esp
  0710e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07113	8b e5		 mov	 esp, ebp
  07115	5d		 pop	 ebp
  07116	c3		 ret	 0
$L192606:
  07117	01 00 00 00	 DD	 1
  0711b	00 00 00 00	 DD	 $L192605
$L192605:
  0711f	e8 ff ff ff	 DD	 -24			; ffffffe8H
  07123	04 00 00 00	 DD	 4
  07127	00 00 00 00	 DD	 $L192603
$L192603:
  0712b	73		 DB	 115			; 00000073H
  0712c	74		 DB	 116			; 00000074H
  0712d	72		 DB	 114			; 00000072H
  0712e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192599:
  004ab	8b f4		 mov	 esi, esp
  004ad	8d 4d e8	 lea	 ecx, DWORD PTR _str$[ebp]
  004b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  004b6	3b f4		 cmp	 esi, esp
  004b8	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192600:
  004bd	8b f4		 mov	 esi, esp
  004bf	8d 4d d0	 lea	 ecx, DWORD PTR $T192598[ebp]
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  004c8	3b f4		 cmp	 esi, esp
  004ca	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ:
  004cf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192602
  004d4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ ENDP		; BCMenu::RemoveTopLevelOwnerDraw
EXTRN	?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z:NEAR	; CDC::GetTextExtent
EXTRN	??0CSize@@QAE@XZ:NEAR				; CSize::CSize
EXTRN	_strlen:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z:NEAR
xdata$x	SEGMENT
$T192639 DD	0ffffffffH
	DD	FLAT:$L192619
	DD	00H
	DD	FLAT:$L192620
	DD	01H
	DD	FLAT:$L192621
	DD	02H
	DD	FLAT:$L192622
	DD	02H
	DD	FLAT:$L192623
	DD	02H
	DD	FLAT:$L192624
	DD	02H
	DD	FLAT:$L192625
	DD	02H
	DD	FLAT:$L192626
$T192628 DD	019930520H
	DD	08H
	DD	FLAT:$T192639
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv268 = -616						; size = 4
tv282 = -612						; size = 4
tv266 = -608						; size = 4
tv279 = -604						; size = 4
tv264 = -600						; size = 4
tv276 = -596						; size = 4
tv262 = -592						; size = 4
tv273 = -588						; size = 4
tv260 = -584						; size = 4
tv76 = -580						; size = 4
$T192618 = -576						; size = 4
$T192617 = -572						; size = 8
$T192616 = -564						; size = 8
$T192615 = -556						; size = 4
$T192614 = -552						; size = 4
$T192613 = -548						; size = 8
$T192612 = -540						; size = 4
$T192611 = -536						; size = 4
_lpstrText$189288 = -532				; size = 4
_lpstrText$189281 = -528				; size = 4
_lpstrText$189269 = -524				; size = 4
_pFont$ = -520						; size = 4
_pDC$ = -516						; size = 4
_pWnd$ = -512						; size = 4
_nm$ = -504						; size = 340
_m_lf$ = -156						; size = 60
_m_fontMenu$ = -88					; size = 8
_t$ = -72						; size = 8
_newstring$ = -56					; size = 4
_string$ = -44						; size = 4
_maxlength$ = -36					; size = 4
_numitems$ = -32					; size = 4
_j$ = -28						; size = 4
_i$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
?InsertSpaces@BCMenu@@IAEXXZ PROC NEAR			; BCMenu::InsertSpaces
; _this$ = ecx

; 1914 : {

  07130	55		 push	 ebp
  07131	8b ec		 mov	 ebp, esp
  07133	6a ff		 push	 -1
  07135	68 00 00 00 00	 push	 __ehhandler$?InsertSpaces@BCMenu@@IAEXXZ
  0713a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07140	50		 push	 eax
  07141	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07148	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  0714e	56		 push	 esi
  0714f	57		 push	 edi
  07150	51		 push	 ecx
  07151	8d bd 98 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-616]
  07157	b9 97 00 00 00	 mov	 ecx, 151		; 00000097H
  0715c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  07161	f3 ab		 rep stosd
  07163	59		 pop	 ecx
  07164	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  07169	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0716c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1915 : 	if(IsLunaMenuStyle())

  0716f	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  07174	85 c0		 test	 eax, eax
  07176	74 1c		 je	 SHORT $L189238

; 1916 : 		if(!xp_space_accelerators)return;

  07178	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_space_accelerators@BCMenu@@1HA, 0 ; BCMenu::xp_space_accelerators
  0717f	75 05		 jne	 SHORT $L189239
  07181	e9 b2 05 00 00	 jmp	 $L189237
$L189239:

; 1917 : 	else
; 1918 : 		if(!original_space_accelerators)return;

  07186	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?original_space_accelerators@BCMenu@@1HA, 0 ; BCMenu::original_space_accelerators
  0718d	75 05		 jne	 SHORT $L189238
  0718f	e9 a4 05 00 00	 jmp	 $L189237
$L189238:

; 1919 : 	
; 1920 : 	int i,j,numitems,maxlength;
; 1921 : 	CString string,newstring;

  07194	8b f4		 mov	 esi, esp
  07196	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  07199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0719f	3b f4		 cmp	 esi, esp
  071a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  071a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  071ad	8b f4		 mov	 esi, esp
  071af	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  071b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  071b8	3b f4		 cmp	 esi, esp
  071ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  071bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1922 : 	CSize t;

  071c3	8d 4d b8	 lea	 ecx, DWORD PTR _t$[ebp]
  071c6	e8 00 00 00 00	 call	 ??0CSize@@QAE@XZ	; CSize::CSize

; 1923 : 	CFont m_fontMenu;

  071cb	8d 4d a8	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  071ce	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  071d3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1924 : 	LOGFONT m_lf;
; 1925 : 	
; 1926 : 	ZeroMemory ((PVOID) &m_lf,sizeof (LOGFONT));

  071d7	6a 3c		 push	 60			; 0000003cH
  071d9	6a 00		 push	 0
  071db	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _m_lf$[ebp]
  071e1	50		 push	 eax
  071e2	e8 00 00 00 00	 call	 _memset
  071e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1927 : 	NONCLIENTMETRICS nm;
; 1928 : 	nm.cbSize = sizeof (NONCLIENTMETRICS);

  071ea	c7 85 08 fe ff
	ff 54 01 00 00	 mov	 DWORD PTR _nm$[ebp], 340 ; 00000154H

; 1929 : 	VERIFY (SystemParametersInfo (SPI_GETNONCLIENTMETRICS,nm.cbSize,&nm,0)); 

  071f4	8b f4		 mov	 esi, esp
  071f6	6a 00		 push	 0
  071f8	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR _nm$[ebp]
  071fe	51		 push	 ecx
  071ff	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _nm$[ebp]
  07205	52		 push	 edx
  07206	6a 29		 push	 41			; 00000029H
  07208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  0720e	3b f4		 cmp	 esi, esp
  07210	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07215	85 c0		 test	 eax, eax
  07217	75 14		 jne	 SHORT $L192610
  07219	68 89 07 00 00	 push	 1929			; 00000789H
  0721e	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  07223	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  07228	85 c0		 test	 eax, eax
  0722a	74 01		 je	 SHORT $L192610
  0722c	cc		 int	 3
$L192610:

; 1930 : 	m_lf =  nm.lfMenuFont;

  0722d	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  07232	8d b5 a8 fe ff
	ff		 lea	 esi, DWORD PTR _nm$[ebp+160]
  07238	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR _m_lf$[ebp]
  0723e	f3 a5		 rep movsd

; 1931 : 	m_fontMenu.CreateFontIndirect (&m_lf);

  07240	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _m_lf$[ebp]
  07246	51		 push	 ecx
  07247	8d 4d a8	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  0724a	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA

; 1932 : 	
; 1933 : 	CWnd *pWnd = AfxGetMainWnd();  

  0724f	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  07254	89 85 00 fe ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 1934 : 	if (pWnd == NULL)pWnd = CWnd::GetDesktopWindow();

  0725a	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _pWnd$[ebp], 0
  07261	75 0b		 jne	 SHORT $L189257
  07263	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  07268	89 85 00 fe ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax
$L189257:

; 1935 : 	CDC *pDC = pWnd->GetDC();

  0726e	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$[ebp]
  07274	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  07279	89 85 fc fd ff
	ff		 mov	 DWORD PTR _pDC$[ebp], eax

; 1936 : 	CFont* pFont = pDC->SelectObject (&m_fontMenu);

  0727f	8b f4		 mov	 esi, esp
  07281	8d 55 a8	 lea	 edx, DWORD PTR _m_fontMenu$[ebp]
  07284	52		 push	 edx
  07285	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _pDC$[ebp]
  0728b	8b 10		 mov	 edx, DWORD PTR [eax]
  0728d	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _pDC$[ebp]
  07293	ff 52 30	 call	 DWORD PTR [edx+48]
  07296	3b f4		 cmp	 esi, esp
  07298	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0729d	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _pFont$[ebp], eax

; 1937 : 	
; 1938 : 	numitems=GetMenuItemCount();

  072a3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  072a6	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  072ab	89 45 e0	 mov	 DWORD PTR _numitems$[ebp], eax

; 1939 : 	maxlength = -1;

  072ae	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _maxlength$[ebp], -1

; 1940 : 	for(i=0;i<numitems;++i){

  072b5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  072bc	eb 09		 jmp	 SHORT $L189260
$L189261:
  072be	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  072c1	83 c0 01	 add	 eax, 1
  072c4	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$L189260:
  072c7	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  072ca	3b 4d e0	 cmp	 ecx, DWORD PTR _numitems$[ebp]
  072cd	0f 8d 89 01 00
	00		 jge	 $L189262

; 1941 : 		string=m_MenuList[i]->GetString();

  072d3	8d 95 e8 fd ff
	ff		 lea	 edx, DWORD PTR $T192611[ebp]
  072d9	52		 push	 edx
  072da	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  072dd	50		 push	 eax
  072de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  072e1	83 c1 08	 add	 ecx, 8
  072e4	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  072e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  072eb	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  072f0	89 85 bc fd ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  072f6	8b 8d bc fd ff
	ff		 mov	 ecx, DWORD PTR tv76[ebp]
  072fc	89 8d b8 fd ff
	ff		 mov	 DWORD PTR tv260[ebp], ecx
  07302	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  07306	8b f4		 mov	 esi, esp
  07308	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR tv260[ebp]
  0730e	52		 push	 edx
  0730f	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  07312	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  07318	3b f4		 cmp	 esi, esp
  0731a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0731f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  07323	8b f4		 mov	 esi, esp
  07325	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192611[ebp]
  0732b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  07331	3b f4		 cmp	 esi, esp
  07333	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1942 : 		j=string.Find((char)9);

  07338	8b f4		 mov	 esi, esp
  0733a	6a 00		 push	 0
  0733c	6a 09		 push	 9
  0733e	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  07341	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  07347	3b f4		 cmp	 esi, esp
  07349	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0734e	89 45 e4	 mov	 DWORD PTR _j$[ebp], eax

; 1943 : 		newstring.Empty();

  07351	8b f4		 mov	 esi, esp
  07353	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  07356	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  0735c	3b f4		 cmp	 esi, esp
  0735e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1944 : 		if(j!=-1)newstring=string.Left(j);

  07363	83 7d e4 ff	 cmp	 DWORD PTR _j$[ebp], -1
  07367	74 67		 je	 SHORT $L189265
  07369	8b f4		 mov	 esi, esp
  0736b	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  0736e	50		 push	 eax
  0736f	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192612[ebp]
  07375	51		 push	 ecx
  07376	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  07379	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  0737f	3b f4		 cmp	 esi, esp
  07381	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07386	89 85 b4 fd ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  0738c	8b 95 b4 fd ff
	ff		 mov	 edx, DWORD PTR tv273[ebp]
  07392	89 95 b0 fd ff
	ff		 mov	 DWORD PTR tv262[ebp], edx
  07398	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0739c	8b f4		 mov	 esi, esp
  0739e	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR tv262[ebp]
  073a4	50		 push	 eax
  073a5	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  073a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  073ae	3b f4		 cmp	 esi, esp
  073b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  073b5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  073b9	8b f4		 mov	 esi, esp
  073bb	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192612[ebp]
  073c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  073c7	3b f4		 cmp	 esi, esp
  073c9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1945 : 		else newstring=string;

  073ce	eb 16		 jmp	 SHORT $L189267
$L189265:
  073d0	8b f4		 mov	 esi, esp
  073d2	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  073d5	51		 push	 ecx
  073d6	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  073d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  073df	3b f4		 cmp	 esi, esp
  073e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L189267:

; 1946 : 		newstring+=_T(" ");//SK: modified for Unicode correctness. 

  073e6	8b f4		 mov	 esi, esp
  073e8	68 00 00 00 00	 push	 OFFSET FLAT:$SG189268
  073ed	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  073f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  073f6	3b f4		 cmp	 esi, esp
  073f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1947 : 		LPCTSTR lpstrText = (LPCTSTR)newstring;

  073fd	8b f4		 mov	 esi, esp
  073ff	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  07402	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  07408	3b f4		 cmp	 esi, esp
  0740a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0740f	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _lpstrText$189269[ebp], eax

; 1948 : 		t=pDC->GetTextExtent(lpstrText,(int)_tcslen(lpstrText));

  07415	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _lpstrText$189269[ebp]
  0741b	52		 push	 edx
  0741c	e8 00 00 00 00	 call	 _strlen
  07421	83 c4 04	 add	 esp, 4
  07424	50		 push	 eax
  07425	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _lpstrText$189269[ebp]
  0742b	50		 push	 eax
  0742c	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T192613[ebp]
  07432	51		 push	 ecx
  07433	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _pDC$[ebp]
  07439	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ; CDC::GetTextExtent
  0743e	8b 10		 mov	 edx, DWORD PTR [eax]
  07440	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  07443	89 55 b8	 mov	 DWORD PTR _t$[ebp], edx
  07446	89 45 bc	 mov	 DWORD PTR _t$[ebp+4], eax

; 1949 : 		if(t.cx>maxlength)maxlength = t.cx;

  07449	8b 4d b8	 mov	 ecx, DWORD PTR _t$[ebp]
  0744c	3b 4d dc	 cmp	 ecx, DWORD PTR _maxlength$[ebp]
  0744f	7e 06		 jle	 SHORT $L189273
  07451	8b 55 b8	 mov	 edx, DWORD PTR _t$[ebp]
  07454	89 55 dc	 mov	 DWORD PTR _maxlength$[ebp], edx
$L189273:

; 1950 : 	}

  07457	e9 62 fe ff ff	 jmp	 $L189261
$L189262:

; 1951 : 	for(i=0;i<numitems;++i){

  0745c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  07463	eb 09		 jmp	 SHORT $L189274
$L189275:
  07465	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  07468	83 c0 01	 add	 eax, 1
  0746b	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$L189274:
  0746e	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  07471	3b 4d e0	 cmp	 ecx, DWORD PTR _numitems$[ebp]
  07474	0f 8d 48 02 00
	00		 jge	 $L189276

; 1952 : 		string=m_MenuList[i]->GetString();

  0747a	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR $T192614[ebp]
  07480	52		 push	 edx
  07481	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  07484	50		 push	 eax
  07485	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  07488	83 c1 08	 add	 ecx, 8
  0748b	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  07490	8b 08		 mov	 ecx, DWORD PTR [eax]
  07492	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  07497	89 85 ac fd ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  0749d	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  074a3	89 8d a8 fd ff
	ff		 mov	 DWORD PTR tv264[ebp], ecx
  074a9	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  074ad	8b f4		 mov	 esi, esp
  074af	8b 95 a8 fd ff
	ff		 mov	 edx, DWORD PTR tv264[ebp]
  074b5	52		 push	 edx
  074b6	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  074b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  074bf	3b f4		 cmp	 esi, esp
  074c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  074c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  074ca	8b f4		 mov	 esi, esp
  074cc	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192614[ebp]
  074d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  074d8	3b f4		 cmp	 esi, esp
  074da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1953 : 		j=string.Find((char)9);

  074df	8b f4		 mov	 esi, esp
  074e1	6a 00		 push	 0
  074e3	6a 09		 push	 9
  074e5	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  074e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  074ee	3b f4		 cmp	 esi, esp
  074f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  074f5	89 45 e4	 mov	 DWORD PTR _j$[ebp], eax

; 1954 : 		if(j!=-1){

  074f8	83 7d e4 ff	 cmp	 DWORD PTR _j$[ebp], -1
  074fc	0f 84 bb 01 00
	00		 je	 $L189279

; 1955 : 			newstring.Empty();

  07502	8b f4		 mov	 esi, esp
  07504	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  07507	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  0750d	3b f4		 cmp	 esi, esp
  0750f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1956 : 			newstring=string.Left(j);

  07514	8b f4		 mov	 esi, esp
  07516	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  07519	50		 push	 eax
  0751a	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192615[ebp]
  07520	51		 push	 ecx
  07521	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  07524	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  0752a	3b f4		 cmp	 esi, esp
  0752c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07531	89 85 a4 fd ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  07537	8b 95 a4 fd ff
	ff		 mov	 edx, DWORD PTR tv279[ebp]
  0753d	89 95 a0 fd ff
	ff		 mov	 DWORD PTR tv266[ebp], edx
  07543	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  07547	8b f4		 mov	 esi, esp
  07549	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR tv266[ebp]
  0754f	50		 push	 eax
  07550	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  07553	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  07559	3b f4		 cmp	 esi, esp
  0755b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07560	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  07564	8b f4		 mov	 esi, esp
  07566	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192615[ebp]
  0756c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  07572	3b f4		 cmp	 esi, esp
  07574	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1957 : 			LPCTSTR lpstrText = (LPCTSTR)(newstring);

  07579	8b f4		 mov	 esi, esp
  0757b	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  0757e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  07584	3b f4		 cmp	 esi, esp
  07586	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0758b	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _lpstrText$189281[ebp], eax

; 1958 : 			t=pDC->GetTextExtent(lpstrText,(int)_tcslen(lpstrText));

  07591	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$189281[ebp]
  07597	51		 push	 ecx
  07598	e8 00 00 00 00	 call	 _strlen
  0759d	83 c4 04	 add	 esp, 4
  075a0	50		 push	 eax
  075a1	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _lpstrText$189281[ebp]
  075a7	52		 push	 edx
  075a8	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR $T192616[ebp]
  075ae	50		 push	 eax
  075af	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _pDC$[ebp]
  075b5	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ; CDC::GetTextExtent
  075ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  075bc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  075bf	89 4d b8	 mov	 DWORD PTR _t$[ebp], ecx
  075c2	89 55 bc	 mov	 DWORD PTR _t$[ebp+4], edx
$L189286:

; 1959 : 			while(t.cx<maxlength){

  075c5	8b 45 b8	 mov	 eax, DWORD PTR _t$[ebp]
  075c8	3b 45 dc	 cmp	 eax, DWORD PTR _maxlength$[ebp]
  075cb	7d 62		 jge	 SHORT $L189287

; 1960 : 				newstring+=_T(' ');//SK: modified for Unicode correctness

  075cd	8b f4		 mov	 esi, esp
  075cf	6a 20		 push	 32			; 00000020H
  075d1	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  075d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z
  075da	3b f4		 cmp	 esi, esp
  075dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1961 : 				LPCTSTR lpstrText = (LPCTSTR)(newstring);

  075e1	8b f4		 mov	 esi, esp
  075e3	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  075e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  075ec	3b f4		 cmp	 esi, esp
  075ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  075f3	89 85 ec fd ff
	ff		 mov	 DWORD PTR _lpstrText$189288[ebp], eax

; 1962 : 				t=pDC->GetTextExtent(lpstrText,(int)_tcslen(lpstrText));

  075f9	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$189288[ebp]
  075ff	51		 push	 ecx
  07600	e8 00 00 00 00	 call	 _strlen
  07605	83 c4 04	 add	 esp, 4
  07608	50		 push	 eax
  07609	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _lpstrText$189288[ebp]
  0760f	52		 push	 edx
  07610	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR $T192617[ebp]
  07616	50		 push	 eax
  07617	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _pDC$[ebp]
  0761d	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ; CDC::GetTextExtent
  07622	8b 08		 mov	 ecx, DWORD PTR [eax]
  07624	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07627	89 4d b8	 mov	 DWORD PTR _t$[ebp], ecx
  0762a	89 55 bc	 mov	 DWORD PTR _t$[ebp+4], edx

; 1963 : 			}

  0762d	eb 96		 jmp	 SHORT $L189286
$L189287:

; 1964 : 			newstring+=string.Mid(j);

  0762f	8b f4		 mov	 esi, esp
  07631	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  07634	50		 push	 eax
  07635	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T192618[ebp]
  0763b	51		 push	 ecx
  0763c	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  0763f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  07645	3b f4		 cmp	 esi, esp
  07647	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0764c	89 85 9c fd ff
	ff		 mov	 DWORD PTR tv282[ebp], eax
  07652	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR tv282[ebp]
  07658	89 95 98 fd ff
	ff		 mov	 DWORD PTR tv268[ebp], edx
  0765e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  07662	8b f4		 mov	 esi, esp
  07664	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR tv268[ebp]
  0766a	50		 push	 eax
  0766b	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  0766e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  07674	3b f4		 cmp	 esi, esp
  07676	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0767b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0767f	8b f4		 mov	 esi, esp
  07681	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T192618[ebp]
  07687	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0768d	3b f4		 cmp	 esi, esp
  0768f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1965 : #ifdef UNICODE      
; 1966 : 			m_MenuList[i]->SetWideString(newstring);//SK: modified for dynamic allocation
; 1967 : #else
; 1968 : 			m_MenuList[i]->SetAnsiString(newstring);

  07694	8b f4		 mov	 esi, esp
  07696	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  07699	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0769f	3b f4		 cmp	 esi, esp
  076a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  076a6	50		 push	 eax
  076a7	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  076aa	51		 push	 ecx
  076ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  076ae	83 c1 08	 add	 ecx, 8
  076b1	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  076b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  076b8	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString
$L189279:

; 1969 : #endif
; 1970 : 		}
; 1971 : 	}

  076bd	e9 a3 fd ff ff	 jmp	 $L189275
$L189276:

; 1972 : 	pDC->SelectObject (pFont);              // Select old font in

  076c2	8b f4		 mov	 esi, esp
  076c4	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _pFont$[ebp]
  076ca	52		 push	 edx
  076cb	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _pDC$[ebp]
  076d1	8b 10		 mov	 edx, DWORD PTR [eax]
  076d3	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR _pDC$[ebp]
  076d9	ff 52 30	 call	 DWORD PTR [edx+48]
  076dc	3b f4		 cmp	 esi, esp
  076de	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1973 : 	pWnd->ReleaseDC(pDC);       // Release the DC

  076e3	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR _pDC$[ebp]
  076e9	50		 push	 eax
  076ea	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _pWnd$[ebp]
  076f0	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 1974 : 	m_fontMenu.DeleteObject();

  076f5	8d 4d a8	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  076f8	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 1975 : }

  076fd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  07701	8d 4d a8	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  07704	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  07709	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0770d	8b f4		 mov	 esi, esp
  0770f	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  07712	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  07718	3b f4		 cmp	 esi, esp
  0771a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0771f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07726	8b f4		 mov	 esi, esp
  07728	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  0772b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  07731	3b f4		 cmp	 esi, esp
  07733	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L189237:
  07738	52		 push	 edx
  07739	8b cd		 mov	 ecx, ebp
  0773b	50		 push	 eax
  0773c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192638
  07742	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  07747	58		 pop	 eax
  07748	5a		 pop	 edx
  07749	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0774c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07753	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  07756	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0775b	5f		 pop	 edi
  0775c	5e		 pop	 esi
  0775d	81 c4 68 02 00
	00		 add	 esp, 616		; 00000268H
  07763	3b ec		 cmp	 ebp, esp
  07765	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0776a	8b e5		 mov	 esp, ebp
  0776c	5d		 pop	 ebp
  0776d	c3		 ret	 0
$L192638:
  0776e	06 00 00 00	 DD	 6
  07772	00 00 00 00	 DD	 $L192637
$L192637:
  07776	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0777a	04 00 00 00	 DD	 4
  0777e	00 00 00 00	 DD	 $L192629
  07782	c8 ff ff ff	 DD	 -56			; ffffffc8H
  07786	04 00 00 00	 DD	 4
  0778a	00 00 00 00	 DD	 $L192630
  0778e	b8 ff ff ff	 DD	 -72			; ffffffb8H
  07792	08 00 00 00	 DD	 8
  07796	00 00 00 00	 DD	 $L192631
  0779a	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0779e	08 00 00 00	 DD	 8
  077a2	00 00 00 00	 DD	 $L192632
  077a6	64 ff ff ff	 DD	 -156			; ffffff64H
  077aa	3c 00 00 00	 DD	 60			; 0000003cH
  077ae	00 00 00 00	 DD	 $L192633
  077b2	08 fe ff ff	 DD	 -504			; fffffe08H
  077b6	54 01 00 00	 DD	 340			; 00000154H
  077ba	00 00 00 00	 DD	 $L192634
$L192634:
  077be	6e		 DB	 110			; 0000006eH
  077bf	6d		 DB	 109			; 0000006dH
  077c0	00		 DB	 0
$L192633:
  077c1	6d		 DB	 109			; 0000006dH
  077c2	5f		 DB	 95			; 0000005fH
  077c3	6c		 DB	 108			; 0000006cH
  077c4	66		 DB	 102			; 00000066H
  077c5	00		 DB	 0
$L192632:
  077c6	6d		 DB	 109			; 0000006dH
  077c7	5f		 DB	 95			; 0000005fH
  077c8	66		 DB	 102			; 00000066H
  077c9	6f		 DB	 111			; 0000006fH
  077ca	6e		 DB	 110			; 0000006eH
  077cb	74		 DB	 116			; 00000074H
  077cc	4d		 DB	 77			; 0000004dH
  077cd	65		 DB	 101			; 00000065H
  077ce	6e		 DB	 110			; 0000006eH
  077cf	75		 DB	 117			; 00000075H
  077d0	00		 DB	 0
$L192631:
  077d1	74		 DB	 116			; 00000074H
  077d2	00		 DB	 0
$L192630:
  077d3	6e		 DB	 110			; 0000006eH
  077d4	65		 DB	 101			; 00000065H
  077d5	77		 DB	 119			; 00000077H
  077d6	73		 DB	 115			; 00000073H
  077d7	74		 DB	 116			; 00000074H
  077d8	72		 DB	 114			; 00000072H
  077d9	69		 DB	 105			; 00000069H
  077da	6e		 DB	 110			; 0000006eH
  077db	67		 DB	 103			; 00000067H
  077dc	00		 DB	 0
$L192629:
  077dd	73		 DB	 115			; 00000073H
  077de	74		 DB	 116			; 00000074H
  077df	72		 DB	 114			; 00000072H
  077e0	69		 DB	 105			; 00000069H
  077e1	6e		 DB	 110			; 0000006eH
  077e2	67		 DB	 103			; 00000067H
  077e3	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192619:
  004d9	8b f4		 mov	 esi, esp
  004db	8d 4d d4	 lea	 ecx, DWORD PTR _string$[ebp]
  004de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  004e4	3b f4		 cmp	 esi, esp
  004e6	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192620:
  004eb	8b f4		 mov	 esi, esp
  004ed	8d 4d c8	 lea	 ecx, DWORD PTR _newstring$[ebp]
  004f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  004f6	3b f4		 cmp	 esi, esp
  004f8	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192621:
  004fd	8d 4d a8	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  00500	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L192622:
  00505	8b f4		 mov	 esi, esp
  00507	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192611[ebp]
  0050d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00513	3b f4		 cmp	 esi, esp
  00515	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192623:
  0051a	8b f4		 mov	 esi, esp
  0051c	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192612[ebp]
  00522	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00528	3b f4		 cmp	 esi, esp
  0052a	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192624:
  0052f	8b f4		 mov	 esi, esp
  00531	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T192614[ebp]
  00537	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0053d	3b f4		 cmp	 esi, esp
  0053f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192625:
  00544	8b f4		 mov	 esi, esp
  00546	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T192615[ebp]
  0054c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00552	3b f4		 cmp	 esi, esp
  00554	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192626:
  00559	8b f4		 mov	 esi, esp
  0055b	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T192618[ebp]
  00561	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00567	3b f4		 cmp	 esi, esp
  00569	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?InsertSpaces@BCMenu@@IAEXXZ:
  0056e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192628
  00573	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertSpaces@BCMenu@@IAEXXZ ENDP			; BCMenu::InsertSpaces
PUBLIC	?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z		; BCMenu::LoadCheckmarkBitmap
xdata$x	SEGMENT
$T192653 DD	0ffffffffH
	DD	FLAT:$L192649
$T192651 DD	019930520H
	DD	01H
	DD	FLAT:$T192653
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv147 = -48						; size = 4
tv85 = -44						; size = 4
$T192646 = -40						; size = 4
$T192645 = -36						; size = 4
$T192642 = -32						; size = 4
$T192641 = -28						; size = 4
_flag2$189311 = -24					; size = 4
_flag1$189310 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_unselect$ = 8						; size = 4
_select$ = 12						; size = 4
?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z PROC NEAR		; BCMenu::LoadCheckmarkBitmap
; _this$ = ecx

; 1978 : {

  077f0	55		 push	 ebp
  077f1	8b ec		 mov	 ebp, esp
  077f3	6a ff		 push	 -1
  077f5	68 00 00 00 00	 push	 __ehhandler$?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z
  077fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07800	50		 push	 eax
  07801	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07808	83 ec 24	 sub	 esp, 36			; 00000024H
  0780b	56		 push	 esi
  0780c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  07811	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  07814	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  07817	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0781a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0781d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  07820	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  07823	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  07826	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  07829	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0782c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1979 : 	if(unselect>0 && select>0){

  0782f	83 7d 08 00	 cmp	 DWORD PTR _unselect$[ebp], 0
  07833	0f 8e 1f 01 00
	00		 jle	 $L189300
  07839	83 7d 0c 00	 cmp	 DWORD PTR _select$[ebp], 0
  0783d	0f 8e 15 01 00
	00		 jle	 $L189300

; 1980 : 		m_selectcheck=select;

  07843	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  07846	8b 4d 0c	 mov	 ecx, DWORD PTR _select$[ebp]
  07849	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 1981 : 		m_unselectcheck=unselect;

  0784c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0784f	8b 45 08	 mov	 eax, DWORD PTR _unselect$[ebp]
  07852	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1982 : 		if(checkmaps)checkmaps->DeleteImageList();

  07855	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  07858	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  0785c	74 0d		 je	 SHORT $L189302
  0785e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  07861	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  07864	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1983 : 		else checkmaps=new(CImageList);

  07869	eb 4b		 jmp	 SHORT $L189303
$L189302:
  0786b	68 bf 07 00 00	 push	 1983			; 000007bfH
  07870	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  07875	6a 08		 push	 8
  07877	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  0787c	89 45 e0	 mov	 DWORD PTR $T192642[ebp], eax
  0787f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  07886	83 7d e0 00	 cmp	 DWORD PTR $T192642[ebp], 0
  0788a	74 0d		 je	 SHORT $L192643
  0788c	8b 4d e0	 mov	 ecx, DWORD PTR $T192642[ebp]
  0788f	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  07894	89 45 d4	 mov	 DWORD PTR tv85[ebp], eax
  07897	eb 07		 jmp	 SHORT $L192644
$L192643:
  07899	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$L192644:
  078a0	8b 45 d4	 mov	 eax, DWORD PTR tv85[ebp]
  078a3	89 45 e4	 mov	 DWORD PTR $T192641[ebp], eax
  078a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  078ad	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  078b0	8b 55 e4	 mov	 edx, DWORD PTR $T192641[ebp]
  078b3	89 51 3c	 mov	 DWORD PTR [ecx+60], edx
$L189303:

; 1984 : 		checkmaps->Create(m_iconX,m_iconY,ILC_MASK,2,1);

  078b6	6a 01		 push	 1
  078b8	6a 02		 push	 2
  078ba	6a 01		 push	 1
  078bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  078c1	50		 push	 eax
  078c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  078c8	51		 push	 ecx
  078c9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  078cc	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  078cf	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1985 : 		BOOL flag1=AddBitmapToImageList(checkmaps,unselect);

  078d4	8b 45 08	 mov	 eax, DWORD PTR _unselect$[ebp]
  078d7	50		 push	 eax
  078d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  078db	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  078de	52		 push	 edx
  078df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  078e2	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  078e7	89 45 ec	 mov	 DWORD PTR _flag1$189310[ebp], eax

; 1986 : 		BOOL flag2=AddBitmapToImageList(checkmaps,select);

  078ea	8b 45 0c	 mov	 eax, DWORD PTR _select$[ebp]
  078ed	50		 push	 eax
  078ee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  078f1	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  078f4	52		 push	 edx
  078f5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  078f8	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  078fd	89 45 e8	 mov	 DWORD PTR _flag2$189311[ebp], eax

; 1987 : 		if(!flag1||!flag2){

  07900	83 7d ec 00	 cmp	 DWORD PTR _flag1$189310[ebp], 0
  07904	74 06		 je	 SHORT $L189313
  07906	83 7d e8 00	 cmp	 DWORD PTR _flag2$189311[ebp], 0
  0790a	75 4c		 jne	 SHORT $L189300
$L189313:

; 1988 : 			checkmaps->DeleteImageList();

  0790c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0790f	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  07912	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1989 : 			delete checkmaps;

  07917	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0791a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0791d	89 55 d8	 mov	 DWORD PTR $T192646[ebp], edx
  07920	8b 45 d8	 mov	 eax, DWORD PTR $T192646[ebp]
  07923	89 45 dc	 mov	 DWORD PTR $T192645[ebp], eax
  07926	83 7d dc 00	 cmp	 DWORD PTR $T192645[ebp], 0
  0792a	74 1b		 je	 SHORT $L192647
  0792c	8b f4		 mov	 esi, esp
  0792e	6a 01		 push	 1
  07930	8b 4d dc	 mov	 ecx, DWORD PTR $T192645[ebp]
  07933	8b 11		 mov	 edx, DWORD PTR [ecx]
  07935	8b 4d dc	 mov	 ecx, DWORD PTR $T192645[ebp]
  07938	ff 52 04	 call	 DWORD PTR [edx+4]
  0793b	3b f4		 cmp	 esi, esp
  0793d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07942	89 45 d0	 mov	 DWORD PTR tv147[ebp], eax
  07945	eb 07		 jmp	 SHORT $L192648
$L192647:
  07947	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
$L192648:

; 1990 : 			checkmaps=NULL;

  0794e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  07951	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$L189300:

; 1991 : 		}
; 1992 : 	}
; 1993 : }

  07958	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0795b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07962	5e		 pop	 esi
  07963	83 c4 30	 add	 esp, 48			; 00000030H
  07966	3b ec		 cmp	 ebp, esp
  07968	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0796d	8b e5		 mov	 esp, ebp
  0796f	5d		 pop	 ebp
  07970	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L192649:
  00578	68 bf 07 00 00	 push	 1983			; 000007bfH
  0057d	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00582	8b 45 e0	 mov	 eax, DWORD PTR $T192642[ebp]
  00585	50		 push	 eax
  00586	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  0058b	c3		 ret	 0
__ehhandler$?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z:
  0058c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192651
  00591	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z ENDP		; BCMenu::LoadCheckmarkBitmap
PUBLIC	?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText
xdata$x	SEGMENT
$T192663 DD	0ffffffffH
	DD	FLAT:$L192656
$T192658 DD	019930520H
	DD	01H
	DD	FLAT:$T192663
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv94 = -52						; size = 4
tv95 = -48						; size = 4
$T192655 = -44						; size = 4
_pMenu$189329 = -40					; size = 4
_uiLoc$189328 = -32					; size = 4
_numMenuItems$189324 = -24				; size = 4
_returnflag$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_string$ = 12						; size = 4
_nFlags$ = 16						; size = 4
?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z PROC NEAR ; BCMenu::GetMenuText
; _this$ = ecx

; 1998 : {

  07980	55		 push	 ebp
  07981	8b ec		 mov	 ebp, esp
  07983	6a ff		 push	 -1
  07985	68 00 00 00 00	 push	 __ehhandler$?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z
  0798a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07990	50		 push	 eax
  07991	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07998	83 ec 28	 sub	 esp, 40			; 00000028H
  0799b	56		 push	 esi
  0799c	57		 push	 edi
  0799d	51		 push	 ecx
  0799e	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  079a1	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  079a6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  079ab	f3 ab		 rep stosd
  079ad	59		 pop	 ecx
  079ae	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1999 : 	BOOL returnflag=FALSE;

  079b1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 2000 : 	
; 2001 : 	if(MF_BYPOSITION&nFlags){

  079b8	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  079bb	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  079c0	74 78		 je	 SHORT $L189323

; 2002 : 		UINT numMenuItems = m_MenuList.GetUpperBound();

  079c2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  079c5	83 c1 08	 add	 ecx, 8
  079c8	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  079cd	89 45 e8	 mov	 DWORD PTR _numMenuItems$189324[ebp], eax

; 2003 : 		if(id<=numMenuItems){

  079d0	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  079d3	3b 4d e8	 cmp	 ecx, DWORD PTR _numMenuItems$189324[ebp]
  079d6	77 60		 ja	 SHORT $L189325

; 2004 : 			string=m_MenuList[id]->GetString();

  079d8	8d 55 d4	 lea	 edx, DWORD PTR $T192655[ebp]
  079db	52		 push	 edx
  079dc	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  079df	50		 push	 eax
  079e0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  079e3	83 c1 08	 add	 ecx, 8
  079e6	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  079eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  079ed	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  079f2	89 45 d0	 mov	 DWORD PTR tv95[ebp], eax
  079f5	8b 4d d0	 mov	 ecx, DWORD PTR tv95[ebp]
  079f8	89 4d cc	 mov	 DWORD PTR tv94[ebp], ecx
  079fb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  07a02	8b f4		 mov	 esi, esp
  07a04	8b 55 cc	 mov	 edx, DWORD PTR tv94[ebp]
  07a07	52		 push	 edx
  07a08	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  07a0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  07a11	3b f4		 cmp	 esi, esp
  07a13	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07a18	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07a1f	8b f4		 mov	 esi, esp
  07a21	8d 4d d4	 lea	 ecx, DWORD PTR $T192655[ebp]
  07a24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  07a2a	3b f4		 cmp	 esi, esp
  07a2c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2005 : 			returnflag=TRUE;

  07a31	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1
$L189325:

; 2006 : 		}
; 2007 : 	}
; 2008 : 	else{

  07a38	eb 31		 jmp	 SHORT $L189327
$L189323:

; 2009 : 		int uiLoc;
; 2010 : 		BCMenu* pMenu = FindMenuOption(id,uiLoc);

  07a3a	8d 45 e0	 lea	 eax, DWORD PTR _uiLoc$189328[ebp]
  07a3d	50		 push	 eax
  07a3e	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  07a41	51		 push	 ecx
  07a42	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  07a45	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  07a4a	89 45 d8	 mov	 DWORD PTR _pMenu$189329[ebp], eax

; 2011 : 		if(NULL!=pMenu) returnflag = pMenu->GetMenuText(uiLoc,string);

  07a4d	83 7d d8 00	 cmp	 DWORD PTR _pMenu$189329[ebp], 0
  07a51	74 18		 je	 SHORT $L189327
  07a53	68 00 04 00 00	 push	 1024			; 00000400H
  07a58	8b 55 0c	 mov	 edx, DWORD PTR _string$[ebp]
  07a5b	52		 push	 edx
  07a5c	8b 45 e0	 mov	 eax, DWORD PTR _uiLoc$189328[ebp]
  07a5f	50		 push	 eax
  07a60	8b 4d d8	 mov	 ecx, DWORD PTR _pMenu$189329[ebp]
  07a63	e8 00 00 00 00	 call	 ?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText
  07a68	89 45 ec	 mov	 DWORD PTR _returnflag$[ebp], eax
$L189327:

; 2012 : 	}
; 2013 : 	return(returnflag);

  07a6b	8b 45 ec	 mov	 eax, DWORD PTR _returnflag$[ebp]

; 2014 : }

  07a6e	52		 push	 edx
  07a6f	8b cd		 mov	 ecx, ebp
  07a71	50		 push	 eax
  07a72	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192662
  07a78	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  07a7d	58		 pop	 eax
  07a7e	5a		 pop	 edx
  07a7f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07a82	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07a89	5f		 pop	 edi
  07a8a	5e		 pop	 esi
  07a8b	83 c4 34	 add	 esp, 52			; 00000034H
  07a8e	3b ec		 cmp	 ebp, esp
  07a90	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07a95	8b e5		 mov	 esp, ebp
  07a97	5d		 pop	 ebp
  07a98	c2 0c 00	 ret	 12			; 0000000cH
$L192662:
  07a9b	01 00 00 00	 DD	 1
  07a9f	00 00 00 00	 DD	 $L192661
$L192661:
  07aa3	e0 ff ff ff	 DD	 -32			; ffffffe0H
  07aa7	04 00 00 00	 DD	 4
  07aab	00 00 00 00	 DD	 $L192659
$L192659:
  07aaf	75		 DB	 117			; 00000075H
  07ab0	69		 DB	 105			; 00000069H
  07ab1	4c		 DB	 76			; 0000004cH
  07ab2	6f		 DB	 111			; 0000006fH
  07ab3	63		 DB	 99			; 00000063H
  07ab4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192656:
  00596	8b f4		 mov	 esi, esp
  00598	8d 4d d4	 lea	 ecx, DWORD PTR $T192655[ebp]
  0059b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  005a1	3b f4		 cmp	 esi, esp
  005a3	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:
  005a8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192658
  005ad	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ENDP ; BCMenu::GetMenuText
PUBLIC	?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z		; BCMenu::DrawRadioDot
EXTRN	?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?Ellipse@CDC@@QAEHPBUtagRECT@@@Z:NEAR		; CDC::Ellipse
xdata$x	SEGMENT
$T192675 DD	0ffffffffH
	DD	FLAT:$L192665
	DD	00H
	DD	FLAT:$L192666
$T192668 DD	019930520H
	DD	02H
	DD	FLAT:$T192675
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_pOldPen$ = -80						; size = 4
_pOldBrush$ = -76					; size = 4
_pen$ = -68						; size = 8
_brush$ = -52						; size = 8
_rcDot$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_color$ = 20						; size = 4
?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z PROC NEAR	; BCMenu::DrawRadioDot
; _this$ = ecx

; 2018 : {

  07ac0	55		 push	 ebp
  07ac1	8b ec		 mov	 ebp, esp
  07ac3	6a ff		 push	 -1
  07ac5	68 00 00 00 00	 push	 __ehhandler$?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z
  07aca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07ad0	50		 push	 eax
  07ad1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07ad8	83 ec 44	 sub	 esp, 68			; 00000044H
  07adb	57		 push	 edi
  07adc	51		 push	 ecx
  07add	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  07ae0	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  07ae5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  07aea	f3 ab		 rep stosd
  07aec	59		 pop	 ecx
  07aed	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2019 : 	CRect rcDot(x,y,x+6,y+6);

  07af0	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07af3	83 c0 06	 add	 eax, 6
  07af6	50		 push	 eax
  07af7	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07afa	83 c1 06	 add	 ecx, 6
  07afd	51		 push	 ecx
  07afe	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  07b01	52		 push	 edx
  07b02	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  07b05	50		 push	 eax
  07b06	8d 4d dc	 lea	 ecx, DWORD PTR _rcDot$[ebp]
  07b09	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2020 : 	CBrush brush;

  07b0e	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  07b11	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  07b16	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2021 : 	CPen pen;

  07b1d	8d 4d bc	 lea	 ecx, DWORD PTR _pen$[ebp]
  07b20	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  07b25	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2022 : 	brush.CreateSolidBrush(color);

  07b29	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  07b2c	51		 push	 ecx
  07b2d	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  07b30	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2023 : 	pen.CreatePen(PS_SOLID,0,color);

  07b35	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  07b38	52		 push	 edx
  07b39	6a 00		 push	 0
  07b3b	6a 00		 push	 0
  07b3d	8d 4d bc	 lea	 ecx, DWORD PTR _pen$[ebp]
  07b40	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 2024 : 	CBrush *pOldBrush=pDC->SelectObject(&brush);

  07b45	8d 45 cc	 lea	 eax, DWORD PTR _brush$[ebp]
  07b48	50		 push	 eax
  07b49	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07b4c	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
  07b51	89 45 b4	 mov	 DWORD PTR _pOldBrush$[ebp], eax

; 2025 : 	CPen *pOldPen=pDC->SelectObject(&pen);

  07b54	8d 4d bc	 lea	 ecx, DWORD PTR _pen$[ebp]
  07b57	51		 push	 ecx
  07b58	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07b5b	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  07b60	89 45 b0	 mov	 DWORD PTR _pOldPen$[ebp], eax

; 2026 : 	pDC->Ellipse(&rcDot);

  07b63	8d 55 dc	 lea	 edx, DWORD PTR _rcDot$[ebp]
  07b66	52		 push	 edx
  07b67	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07b6a	e8 00 00 00 00	 call	 ?Ellipse@CDC@@QAEHPBUtagRECT@@@Z ; CDC::Ellipse

; 2027 : 	pDC->SelectObject(pOldBrush);

  07b6f	8b 45 b4	 mov	 eax, DWORD PTR _pOldBrush$[ebp]
  07b72	50		 push	 eax
  07b73	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07b76	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject

; 2028 : 	pDC->SelectObject(pOldPen);

  07b7b	8b 4d b0	 mov	 ecx, DWORD PTR _pOldPen$[ebp]
  07b7e	51		 push	 ecx
  07b7f	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07b82	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 2029 : 	pen.DeleteObject();

  07b87	8d 4d bc	 lea	 ecx, DWORD PTR _pen$[ebp]
  07b8a	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2030 : 	brush.DeleteObject();

  07b8f	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  07b92	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2031 : }

  07b97	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  07b9b	8d 4d bc	 lea	 ecx, DWORD PTR _pen$[ebp]
  07b9e	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  07ba3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07baa	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  07bad	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  07bb2	52		 push	 edx
  07bb3	8b cd		 mov	 ecx, ebp
  07bb5	50		 push	 eax
  07bb6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192674
  07bbc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  07bc1	58		 pop	 eax
  07bc2	5a		 pop	 edx
  07bc3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07bc6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07bcd	5f		 pop	 edi
  07bce	83 c4 50	 add	 esp, 80			; 00000050H
  07bd1	3b ec		 cmp	 ebp, esp
  07bd3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07bd8	8b e5		 mov	 esp, ebp
  07bda	5d		 pop	 ebp
  07bdb	c2 10 00	 ret	 16			; 00000010H
$L192674:
  07bde	03 00 00 00	 DD	 3
  07be2	00 00 00 00	 DD	 $L192673
$L192673:
  07be6	dc ff ff ff	 DD	 -36			; ffffffdcH
  07bea	10 00 00 00	 DD	 16			; 00000010H
  07bee	00 00 00 00	 DD	 $L192669
  07bf2	cc ff ff ff	 DD	 -52			; ffffffccH
  07bf6	08 00 00 00	 DD	 8
  07bfa	00 00 00 00	 DD	 $L192670
  07bfe	bc ff ff ff	 DD	 -68			; ffffffbcH
  07c02	08 00 00 00	 DD	 8
  07c06	00 00 00 00	 DD	 $L192671
$L192671:
  07c0a	70		 DB	 112			; 00000070H
  07c0b	65		 DB	 101			; 00000065H
  07c0c	6e		 DB	 110			; 0000006eH
  07c0d	00		 DB	 0
$L192670:
  07c0e	62		 DB	 98			; 00000062H
  07c0f	72		 DB	 114			; 00000072H
  07c10	75		 DB	 117			; 00000075H
  07c11	73		 DB	 115			; 00000073H
  07c12	68		 DB	 104			; 00000068H
  07c13	00		 DB	 0
$L192669:
  07c14	72		 DB	 114			; 00000072H
  07c15	63		 DB	 99			; 00000063H
  07c16	44		 DB	 68			; 00000044H
  07c17	6f		 DB	 111			; 0000006fH
  07c18	74		 DB	 116			; 00000074H
  07c19	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192665:
  005b2	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  005b5	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192666:
  005ba	8d 4d bc	 lea	 ecx, DWORD PTR _pen$[ebp]
  005bd	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__ehhandler$?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z:
  005c2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192668
  005c7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z ENDP		; BCMenu::DrawRadioDot
PUBLIC	?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z		; LineTo
EXTRN	?SetPixel@CDC@@QAEKHHK@Z:NEAR			; CDC::SetPixel
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv152 = -36						; size = 4
tv149 = -32						; size = 4
tv145 = -28						; size = 4
tv139 = -24						; size = 4
_deltaY$189359 = -20					; size = 4
_deltaX$189358 = -16					; size = 4
_i$189354 = -12						; size = 4
_p2$ = -8						; size = 4
_p1$ = -4						; size = 4
_pDC$ = 8						; size = 4
_pFrom$ = 12						; size = 8
_pTo$ = 20						; size = 8
_clr$ = 28						; size = 4
?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z PROC NEAR		; LineTo

; 2034 : {

  07c20	55		 push	 ebp
  07c21	8b ec		 mov	 ebp, esp
  07c23	83 ec 24	 sub	 esp, 36			; 00000024H
  07c26	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  07c2b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  07c2e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  07c31	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  07c34	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  07c37	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  07c3a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  07c3d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  07c40	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  07c43	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 2035 : 	CPoint * p1;
; 2036 : 	CPoint * p2;
; 2037 : 
; 2038 : 	if(pFrom.x > pTo.x)

  07c46	8b 45 0c	 mov	 eax, DWORD PTR _pFrom$[ebp]
  07c49	3b 45 14	 cmp	 eax, DWORD PTR _pTo$[ebp]
  07c4c	7e 0e		 jle	 SHORT $L189352

; 2039 : 	{
; 2040 : 		p1 = &pTo; p2 = &pFrom;

  07c4e	8d 4d 14	 lea	 ecx, DWORD PTR _pTo$[ebp]
  07c51	89 4d fc	 mov	 DWORD PTR _p1$[ebp], ecx
  07c54	8d 55 0c	 lea	 edx, DWORD PTR _pFrom$[ebp]
  07c57	89 55 f8	 mov	 DWORD PTR _p2$[ebp], edx

; 2041 : 	}
; 2042 : 	else

  07c5a	eb 0c		 jmp	 SHORT $L189353
$L189352:

; 2043 : 	{
; 2044 : 		p1 = &pFrom; p2 = &pTo;

  07c5c	8d 45 0c	 lea	 eax, DWORD PTR _pFrom$[ebp]
  07c5f	89 45 fc	 mov	 DWORD PTR _p1$[ebp], eax
  07c62	8d 4d 14	 lea	 ecx, DWORD PTR _pTo$[ebp]
  07c65	89 4d f8	 mov	 DWORD PTR _p2$[ebp], ecx
$L189353:

; 2045 : 	}
; 2046 : 
; 2047 : 	for(int i = p1->x; i<=p2->x; i++)

  07c68	8b 55 fc	 mov	 edx, DWORD PTR _p1$[ebp]
  07c6b	8b 02		 mov	 eax, DWORD PTR [edx]
  07c6d	89 45 f4	 mov	 DWORD PTR _i$189354[ebp], eax
  07c70	eb 09		 jmp	 SHORT $L189355
$L189356:
  07c72	8b 4d f4	 mov	 ecx, DWORD PTR _i$189354[ebp]
  07c75	83 c1 01	 add	 ecx, 1
  07c78	89 4d f4	 mov	 DWORD PTR _i$189354[ebp], ecx
$L189355:
  07c7b	8b 55 f8	 mov	 edx, DWORD PTR _p2$[ebp]
  07c7e	8b 45 f4	 mov	 eax, DWORD PTR _i$189354[ebp]
  07c81	3b 02		 cmp	 eax, DWORD PTR [edx]
  07c83	0f 8f 96 00 00
	00		 jg	 $L189349

; 2048 : 	{
; 2049 : 		float deltaX = i-p1->x;

  07c89	8b 4d fc	 mov	 ecx, DWORD PTR _p1$[ebp]
  07c8c	8b 55 f4	 mov	 edx, DWORD PTR _i$189354[ebp]
  07c8f	2b 11		 sub	 edx, DWORD PTR [ecx]
  07c91	89 55 e8	 mov	 DWORD PTR tv139[ebp], edx
  07c94	db 45 e8	 fild	 DWORD PTR tv139[ebp]
  07c97	d9 5d f0	 fstp	 DWORD PTR _deltaX$189358[ebp]

; 2050 : 		float deltaY = 0;

  07c9a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _deltaY$189359[ebp], 0

; 2051 : 		
; 2052 : 		if(p2->x - i != 0)

  07ca1	8b 45 f8	 mov	 eax, DWORD PTR _p2$[ebp]
  07ca4	8b 08		 mov	 ecx, DWORD PTR [eax]
  07ca6	2b 4d f4	 sub	 ecx, DWORD PTR _i$189354[ebp]
  07ca9	74 37		 je	 SHORT $L189360

; 2053 : 			deltaY = ((float)(p2->y - p1->y ))  * ((float)(p2->x - p1->x))
; 2054 : 			/(float)(p2->x - i);

  07cab	8b 55 f8	 mov	 edx, DWORD PTR _p2$[ebp]
  07cae	8b 45 fc	 mov	 eax, DWORD PTR _p1$[ebp]
  07cb1	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  07cb4	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  07cb7	89 4d e4	 mov	 DWORD PTR tv145[ebp], ecx
  07cba	db 45 e4	 fild	 DWORD PTR tv145[ebp]
  07cbd	8b 55 f8	 mov	 edx, DWORD PTR _p2$[ebp]
  07cc0	8b 45 fc	 mov	 eax, DWORD PTR _p1$[ebp]
  07cc3	8b 0a		 mov	 ecx, DWORD PTR [edx]
  07cc5	2b 08		 sub	 ecx, DWORD PTR [eax]
  07cc7	89 4d e0	 mov	 DWORD PTR tv149[ebp], ecx
  07cca	db 45 e0	 fild	 DWORD PTR tv149[ebp]
  07ccd	de c9		 fmulp	 ST(1), ST(0)
  07ccf	8b 55 f8	 mov	 edx, DWORD PTR _p2$[ebp]
  07cd2	8b 02		 mov	 eax, DWORD PTR [edx]
  07cd4	2b 45 f4	 sub	 eax, DWORD PTR _i$189354[ebp]
  07cd7	89 45 dc	 mov	 DWORD PTR tv152[ebp], eax
  07cda	da 75 dc	 fidiv	 DWORD PTR tv152[ebp]
  07cdd	d9 5d ec	 fstp	 DWORD PTR _deltaY$189359[ebp]

; 2055 : 		else

  07ce0	eb 07		 jmp	 SHORT $L189364
$L189360:

; 2056 : 			deltaY = 0;

  07ce2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _deltaY$189359[ebp], 0
$L189364:

; 2057 : 		
; 2058 : 		pDC->SetPixel(i, p1->y, clr);

  07ce9	8b 4d 1c	 mov	 ecx, DWORD PTR _clr$[ebp]
  07cec	51		 push	 ecx
  07ced	8b 55 fc	 mov	 edx, DWORD PTR _p1$[ebp]
  07cf0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  07cf3	50		 push	 eax
  07cf4	8b 4d f4	 mov	 ecx, DWORD PTR _i$189354[ebp]
  07cf7	51		 push	 ecx
  07cf8	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07cfb	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel

; 2059 : 		pDC->SetPixel(i, p1->y + 1, clr);

  07d00	8b 55 1c	 mov	 edx, DWORD PTR _clr$[ebp]
  07d03	52		 push	 edx
  07d04	8b 45 fc	 mov	 eax, DWORD PTR _p1$[ebp]
  07d07	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07d0a	83 c1 01	 add	 ecx, 1
  07d0d	51		 push	 ecx
  07d0e	8b 55 f4	 mov	 edx, DWORD PTR _i$189354[ebp]
  07d11	52		 push	 edx
  07d12	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07d15	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel

; 2060 : 	}

  07d1a	e9 53 ff ff ff	 jmp	 $L189356
$L189349:

; 2061 : }

  07d1f	83 c4 24	 add	 esp, 36			; 00000024H
  07d22	3b ec		 cmp	 ebp, esp
  07d24	e8 00 00 00 00	 call	 __RTC_CheckEsp
  07d29	8b e5		 mov	 esp, ebp
  07d2b	5d		 pop	 ebp
  07d2c	c3		 ret	 0
?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ENDP			; LineTo
_TEXT	ENDS
PUBLIC	?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z	; BCMenu::DrawCheckMark
xdata$x	SEGMENT
$T192699 DD	0ffffffffH
	DD	FLAT:$L192692
$T192694 DD	019930520H
	DD	01H
	DD	FLAT:$T192699
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192691 = -152						; size = 8
$T192690 = -144						; size = 8
$T192689 = -136						; size = 8
$T192688 = -128						; size = 8
$T192687 = -120						; size = 8
$T192686 = -112						; size = 8
$T192685 = -104						; size = 8
$T192684 = -96						; size = 8
$T192683 = -88						; size = 8
$T192682 = -80						; size = 8
$T192681 = -72						; size = 8
$T192680 = -64						; size = 8
$T192679 = -56						; size = 8
$T192678 = -48						; size = 8
_pOldPen$ = -40						; size = 4
_m_penBack$ = -32					; size = 8
_dp$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_color$ = 20						; size = 4
_narrowflag$ = 24					; size = 4
?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z PROC NEAR	; BCMenu::DrawCheckMark
; _this$ = ecx

; 2064 : {

  07d30	55		 push	 ebp
  07d31	8b ec		 mov	 ebp, esp
  07d33	6a ff		 push	 -1
  07d35	68 00 00 00 00	 push	 __ehhandler$?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z
  07d3a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07d40	50		 push	 eax
  07d41	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07d48	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  07d4e	57		 push	 edi
  07d4f	51		 push	 ecx
  07d50	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  07d56	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  07d5b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  07d60	f3 ab		 rep stosd
  07d62	59		 pop	 ecx
  07d63	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2065 : 	int dp=0;

  07d66	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dp$[ebp], 0

; 2066 : 	CPen m_penBack;

  07d6d	8d 4d e0	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  07d70	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  07d75	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2067 : 
; 2068 : 	m_penBack.CreatePen(PS_SOLID,1,color);

  07d7c	8b 45 14	 mov	 eax, DWORD PTR _color$[ebp]
  07d7f	50		 push	 eax
  07d80	6a 01		 push	 1
  07d82	6a 00		 push	 0
  07d84	8d 4d e0	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  07d87	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 2069 : 	CPen *pOldPen = pDC->SelectObject (&m_penBack);

  07d8c	8d 4d e0	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  07d8f	51		 push	 ecx
  07d90	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07d93	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  07d98	89 45 d8	 mov	 DWORD PTR _pOldPen$[ebp], eax

; 2070 : 	if(narrowflag)dp=1;

  07d9b	83 7d 18 00	 cmp	 DWORD PTR _narrowflag$[ebp], 0
  07d9f	74 07		 je	 SHORT $L189376
  07da1	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _dp$[ebp], 1
$L189376:

; 2071 : 
; 2072 : 	LineTo(pDC, CPoint(x,y+2), CPoint(x,y+5-dp), color);

  07da8	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  07dab	52		 push	 edx
  07dac	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07daf	83 c0 05	 add	 eax, 5
  07db2	2b 45 ec	 sub	 eax, DWORD PTR _dp$[ebp]
  07db5	50		 push	 eax
  07db6	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07db9	51		 push	 ecx
  07dba	8d 4d d0	 lea	 ecx, DWORD PTR $T192678[ebp]
  07dbd	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07dc2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07dc5	52		 push	 edx
  07dc6	8b 00		 mov	 eax, DWORD PTR [eax]
  07dc8	50		 push	 eax
  07dc9	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  07dcc	83 c1 02	 add	 ecx, 2
  07dcf	51		 push	 ecx
  07dd0	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  07dd3	52		 push	 edx
  07dd4	8d 4d c8	 lea	 ecx, DWORD PTR $T192679[ebp]
  07dd7	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07ddc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07ddf	51		 push	 ecx
  07de0	8b 10		 mov	 edx, DWORD PTR [eax]
  07de2	52		 push	 edx
  07de3	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  07de6	50		 push	 eax
  07de7	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07dec	83 c4 18	 add	 esp, 24			; 00000018H

; 2073 : 	LineTo(pDC, CPoint(x+1,y+3), CPoint(x+1,y+6-dp), color);

  07def	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  07df2	51		 push	 ecx
  07df3	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  07df6	83 c2 06	 add	 edx, 6
  07df9	2b 55 ec	 sub	 edx, DWORD PTR _dp$[ebp]
  07dfc	52		 push	 edx
  07dfd	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  07e00	83 c0 01	 add	 eax, 1
  07e03	50		 push	 eax
  07e04	8d 4d c0	 lea	 ecx, DWORD PTR $T192680[ebp]
  07e07	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07e0c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07e0f	51		 push	 ecx
  07e10	8b 10		 mov	 edx, DWORD PTR [eax]
  07e12	52		 push	 edx
  07e13	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07e16	83 c0 03	 add	 eax, 3
  07e19	50		 push	 eax
  07e1a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07e1d	83 c1 01	 add	 ecx, 1
  07e20	51		 push	 ecx
  07e21	8d 4d b8	 lea	 ecx, DWORD PTR $T192681[ebp]
  07e24	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07e29	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07e2c	52		 push	 edx
  07e2d	8b 00		 mov	 eax, DWORD PTR [eax]
  07e2f	50		 push	 eax
  07e30	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07e33	51		 push	 ecx
  07e34	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07e39	83 c4 18	 add	 esp, 24			; 00000018H

; 2074 : 	LineTo(pDC, CPoint(x+2,y+4), CPoint(x+2,y+7-dp), color);

  07e3c	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  07e3f	52		 push	 edx
  07e40	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07e43	83 c0 07	 add	 eax, 7
  07e46	2b 45 ec	 sub	 eax, DWORD PTR _dp$[ebp]
  07e49	50		 push	 eax
  07e4a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07e4d	83 c1 02	 add	 ecx, 2
  07e50	51		 push	 ecx
  07e51	8d 4d b0	 lea	 ecx, DWORD PTR $T192682[ebp]
  07e54	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07e59	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07e5c	52		 push	 edx
  07e5d	8b 00		 mov	 eax, DWORD PTR [eax]
  07e5f	50		 push	 eax
  07e60	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  07e63	83 c1 04	 add	 ecx, 4
  07e66	51		 push	 ecx
  07e67	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  07e6a	83 c2 02	 add	 edx, 2
  07e6d	52		 push	 edx
  07e6e	8d 4d a8	 lea	 ecx, DWORD PTR $T192683[ebp]
  07e71	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07e76	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07e79	51		 push	 ecx
  07e7a	8b 10		 mov	 edx, DWORD PTR [eax]
  07e7c	52		 push	 edx
  07e7d	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  07e80	50		 push	 eax
  07e81	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07e86	83 c4 18	 add	 esp, 24			; 00000018H

; 2075 : 	LineTo(pDC, CPoint(x+3,y+3), CPoint(x+3,y+6-dp), color);

  07e89	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  07e8c	51		 push	 ecx
  07e8d	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  07e90	83 c2 06	 add	 edx, 6
  07e93	2b 55 ec	 sub	 edx, DWORD PTR _dp$[ebp]
  07e96	52		 push	 edx
  07e97	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  07e9a	83 c0 03	 add	 eax, 3
  07e9d	50		 push	 eax
  07e9e	8d 4d a0	 lea	 ecx, DWORD PTR $T192684[ebp]
  07ea1	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07ea6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07ea9	51		 push	 ecx
  07eaa	8b 10		 mov	 edx, DWORD PTR [eax]
  07eac	52		 push	 edx
  07ead	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07eb0	83 c0 03	 add	 eax, 3
  07eb3	50		 push	 eax
  07eb4	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07eb7	83 c1 03	 add	 ecx, 3
  07eba	51		 push	 ecx
  07ebb	8d 4d 98	 lea	 ecx, DWORD PTR $T192685[ebp]
  07ebe	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07ec3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07ec6	52		 push	 edx
  07ec7	8b 00		 mov	 eax, DWORD PTR [eax]
  07ec9	50		 push	 eax
  07eca	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07ecd	51		 push	 ecx
  07ece	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07ed3	83 c4 18	 add	 esp, 24			; 00000018H

; 2076 : 	LineTo(pDC, CPoint(x+4,y+2), CPoint(x+4,y+5-dp), color);

  07ed6	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  07ed9	52		 push	 edx
  07eda	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07edd	83 c0 05	 add	 eax, 5
  07ee0	2b 45 ec	 sub	 eax, DWORD PTR _dp$[ebp]
  07ee3	50		 push	 eax
  07ee4	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07ee7	83 c1 04	 add	 ecx, 4
  07eea	51		 push	 ecx
  07eeb	8d 4d 90	 lea	 ecx, DWORD PTR $T192686[ebp]
  07eee	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07ef3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07ef6	52		 push	 edx
  07ef7	8b 00		 mov	 eax, DWORD PTR [eax]
  07ef9	50		 push	 eax
  07efa	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  07efd	83 c1 02	 add	 ecx, 2
  07f00	51		 push	 ecx
  07f01	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  07f04	83 c2 04	 add	 edx, 4
  07f07	52		 push	 edx
  07f08	8d 4d 88	 lea	 ecx, DWORD PTR $T192687[ebp]
  07f0b	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07f10	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07f13	51		 push	 ecx
  07f14	8b 10		 mov	 edx, DWORD PTR [eax]
  07f16	52		 push	 edx
  07f17	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  07f1a	50		 push	 eax
  07f1b	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07f20	83 c4 18	 add	 esp, 24			; 00000018H

; 2077 : 	LineTo(pDC, CPoint(x+5,y+1), CPoint(x+5,y+4-dp), color);

  07f23	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  07f26	51		 push	 ecx
  07f27	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  07f2a	83 c2 04	 add	 edx, 4
  07f2d	2b 55 ec	 sub	 edx, DWORD PTR _dp$[ebp]
  07f30	52		 push	 edx
  07f31	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  07f34	83 c0 05	 add	 eax, 5
  07f37	50		 push	 eax
  07f38	8d 4d 80	 lea	 ecx, DWORD PTR $T192688[ebp]
  07f3b	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07f40	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07f43	51		 push	 ecx
  07f44	8b 10		 mov	 edx, DWORD PTR [eax]
  07f46	52		 push	 edx
  07f47	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07f4a	83 c0 01	 add	 eax, 1
  07f4d	50		 push	 eax
  07f4e	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07f51	83 c1 05	 add	 ecx, 5
  07f54	51		 push	 ecx
  07f55	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T192689[ebp]
  07f5b	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07f60	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07f63	52		 push	 edx
  07f64	8b 00		 mov	 eax, DWORD PTR [eax]
  07f66	50		 push	 eax
  07f67	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07f6a	51		 push	 ecx
  07f6b	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07f70	83 c4 18	 add	 esp, 24			; 00000018H

; 2078 : 	LineTo(pDC, CPoint(x+6,y), CPoint(x+6,y+3-dp), color);

  07f73	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  07f76	52		 push	 edx
  07f77	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  07f7a	83 c0 03	 add	 eax, 3
  07f7d	2b 45 ec	 sub	 eax, DWORD PTR _dp$[ebp]
  07f80	50		 push	 eax
  07f81	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  07f84	83 c1 06	 add	 ecx, 6
  07f87	51		 push	 ecx
  07f88	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T192690[ebp]
  07f8e	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07f93	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07f96	52		 push	 edx
  07f97	8b 00		 mov	 eax, DWORD PTR [eax]
  07f99	50		 push	 eax
  07f9a	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  07f9d	51		 push	 ecx
  07f9e	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  07fa1	83 c2 06	 add	 edx, 6
  07fa4	52		 push	 edx
  07fa5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T192691[ebp]
  07fab	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  07fb0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07fb3	51		 push	 ecx
  07fb4	8b 10		 mov	 edx, DWORD PTR [eax]
  07fb6	52		 push	 edx
  07fb7	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  07fba	50		 push	 eax
  07fbb	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  07fc0	83 c4 18	 add	 esp, 24			; 00000018H

; 2079 : 
; 2080 : 	//pDC->MoveTo(x,y+2);
; 2081 : 	//pDC->LineTo(x,y+5-dp);
; 2082 : 	//	
; 2083 : 	//pDC->MoveTo(x+1,y+3);
; 2084 : 	//pDC->LineTo(x+1,y+6-dp);
; 2085 : 	//
; 2086 : 	//pDC->MoveTo(x+2,y+4);
; 2087 : 	//pDC->LineTo(x+2,y+7-dp);
; 2088 : 	//
; 2089 : 	//pDC->MoveTo(x+3,y+3);
; 2090 : 	//pDC->LineTo(x+3,y+6-dp);
; 2091 : 	//
; 2092 : 	//pDC->MoveTo(x+4,y+2);
; 2093 : 	//pDC->LineTo(x+4,y+5-dp);
; 2094 : 	//
; 2095 : 	//pDC->MoveTo(x+5,y+1);
; 2096 : 	//pDC->LineTo(x+5,y+4-dp);
; 2097 : 	//
; 2098 : 	//pDC->MoveTo(x+6,y);
; 2099 : 	//pDC->LineTo(x+6,y+3-dp);
; 2100 : 	
; 2101 : 	pDC->SelectObject (pOldPen);

  07fc3	8b 4d d8	 mov	 ecx, DWORD PTR _pOldPen$[ebp]
  07fc6	51		 push	 ecx
  07fc7	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  07fca	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 2102 : 	m_penBack.DeleteObject();

  07fcf	8d 4d e0	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  07fd2	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2103 : }

  07fd7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07fde	8d 4d e0	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  07fe1	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  07fe6	52		 push	 edx
  07fe7	8b cd		 mov	 ecx, ebp
  07fe9	50		 push	 eax
  07fea	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192698
  07ff0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  07ff5	58		 pop	 eax
  07ff6	5a		 pop	 edx
  07ff7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07ffa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  08001	5f		 pop	 edi
  08002	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  08008	3b ec		 cmp	 ebp, esp
  0800a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0800f	8b e5		 mov	 esp, ebp
  08011	5d		 pop	 ebp
  08012	c2 14 00	 ret	 20			; 00000014H
$L192698:
  08015	01 00 00 00	 DD	 1
  08019	00 00 00 00	 DD	 $L192697
$L192697:
  0801d	e0 ff ff ff	 DD	 -32			; ffffffe0H
  08021	08 00 00 00	 DD	 8
  08025	00 00 00 00	 DD	 $L192695
$L192695:
  08029	6d		 DB	 109			; 0000006dH
  0802a	5f		 DB	 95			; 0000005fH
  0802b	70		 DB	 112			; 00000070H
  0802c	65		 DB	 101			; 00000065H
  0802d	6e		 DB	 110			; 0000006eH
  0802e	42		 DB	 66			; 00000042H
  0802f	61		 DB	 97			; 00000061H
  08030	63		 DB	 99			; 00000063H
  08031	6b		 DB	 107			; 0000006bH
  08032	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192692:
  005cc	8d 4d e0	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  005cf	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__ehhandler$?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z:
  005d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192694
  005d9	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z ENDP		; BCMenu::DrawCheckMark
PUBLIC	?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z	; BCMenu::FindMenuList
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_i$189395 = -8						; size = 4
_this$ = -4						; size = 4
_nID$ = 8						; size = 4
?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z PROC NEAR	; BCMenu::FindMenuList
; _this$ = ecx

; 2106 : {

  08040	55		 push	 ebp
  08041	8b ec		 mov	 ebp, esp
  08043	83 ec 08	 sub	 esp, 8
  08046	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0804d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  08054	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2107 : 	for(int i=0;i<=m_MenuList.GetUpperBound();++i){

  08057	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$189395[ebp], 0
  0805e	eb 09		 jmp	 SHORT $L189396
$L189397:
  08060	8b 45 f8	 mov	 eax, DWORD PTR _i$189395[ebp]
  08063	83 c0 01	 add	 eax, 1
  08066	89 45 f8	 mov	 DWORD PTR _i$189395[ebp], eax
$L189396:
  08069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0806c	83 c1 08	 add	 ecx, 8
  0806f	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  08074	39 45 f8	 cmp	 DWORD PTR _i$189395[ebp], eax
  08077	7f 5d		 jg	 SHORT $L189398

; 2108 : 		if(m_MenuList[i]->nID==nID && !m_MenuList[i]->syncflag){

  08079	8b 4d f8	 mov	 ecx, DWORD PTR _i$189395[ebp]
  0807c	51		 push	 ecx
  0807d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08080	83 c1 08	 add	 ecx, 8
  08083	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  08088	8b 10		 mov	 edx, DWORD PTR [eax]
  0808a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0808d	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  08090	75 42		 jne	 SHORT $L189399
  08092	8b 4d f8	 mov	 ecx, DWORD PTR _i$189395[ebp]
  08095	51		 push	 ecx
  08096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08099	83 c1 08	 add	 ecx, 8
  0809c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  080a1	8b 10		 mov	 edx, DWORD PTR [eax]
  080a3	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  080a7	75 2b		 jne	 SHORT $L189399

; 2109 : 			m_MenuList[i]->syncflag=1;

  080a9	8b 45 f8	 mov	 eax, DWORD PTR _i$189395[ebp]
  080ac	50		 push	 eax
  080ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  080b0	83 c1 08	 add	 ecx, 8
  080b3	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  080b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  080ba	c7 41 18 01 00
	00 00		 mov	 DWORD PTR [ecx+24], 1

; 2110 : 			return(m_MenuList[i]);

  080c1	8b 55 f8	 mov	 edx, DWORD PTR _i$189395[ebp]
  080c4	52		 push	 edx
  080c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  080c8	83 c1 08	 add	 ecx, 8
  080cb	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  080d0	8b 00		 mov	 eax, DWORD PTR [eax]
  080d2	eb 04		 jmp	 SHORT $L189394
$L189399:

; 2111 : 		}
; 2112 : 	}

  080d4	eb 8a		 jmp	 SHORT $L189397
$L189398:

; 2113 : 	return(NULL);

  080d6	33 c0		 xor	 eax, eax
$L189394:

; 2114 : }

  080d8	83 c4 08	 add	 esp, 8
  080db	3b ec		 cmp	 ebp, esp
  080dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  080e2	8b e5		 mov	 esp, ebp
  080e4	5d		 pop	 ebp
  080e5	c2 04 00	 ret	 4
?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ENDP	; BCMenu::FindMenuList
_TEXT	ENDS
PUBLIC	?InitializeMenuList@BCMenu@@IAEXH@Z		; BCMenu::InitializeMenuList
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_i$189404 = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?InitializeMenuList@BCMenu@@IAEXH@Z PROC NEAR		; BCMenu::InitializeMenuList
; _this$ = ecx

; 2117 : {

  080f0	55		 push	 ebp
  080f1	8b ec		 mov	 ebp, esp
  080f3	83 ec 08	 sub	 esp, 8
  080f6	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  080fd	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  08104	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2118 : 	for(int i=0;i<=m_MenuList.GetUpperBound();++i)

  08107	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$189404[ebp], 0
  0810e	eb 09		 jmp	 SHORT $L189405
$L189406:
  08110	8b 45 f8	 mov	 eax, DWORD PTR _i$189404[ebp]
  08113	83 c0 01	 add	 eax, 1
  08116	89 45 f8	 mov	 DWORD PTR _i$189404[ebp], eax
$L189405:
  08119	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0811c	83 c1 08	 add	 ecx, 8
  0811f	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  08124	39 45 f8	 cmp	 DWORD PTR _i$189404[ebp], eax
  08127	7f 19		 jg	 SHORT $L189403

; 2119 : 		m_MenuList[i]->syncflag=value;

  08129	8b 4d f8	 mov	 ecx, DWORD PTR _i$189404[ebp]
  0812c	51		 push	 ecx
  0812d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08130	83 c1 08	 add	 ecx, 8
  08133	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  08138	8b 10		 mov	 edx, DWORD PTR [eax]
  0813a	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0813d	89 42 18	 mov	 DWORD PTR [edx+24], eax
  08140	eb ce		 jmp	 SHORT $L189406
$L189403:

; 2120 : }

  08142	83 c4 08	 add	 esp, 8
  08145	3b ec		 cmp	 ebp, esp
  08147	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0814c	8b e5		 mov	 esp, ebp
  0814e	5d		 pop	 ebp
  0814f	c2 04 00	 ret	 4
?InitializeMenuList@BCMenu@@IAEXH@Z ENDP		; BCMenu::InitializeMenuList
_TEXT	ENDS
PUBLIC	?DeleteMenuList@BCMenu@@IAEXXZ			; BCMenu::DeleteMenuList
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv84 = -20						; size = 4
$T192704 = -16						; size = 4
$T192703 = -12						; size = 4
_i$189412 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteMenuList@BCMenu@@IAEXXZ PROC NEAR		; BCMenu::DeleteMenuList
; _this$ = ecx

; 2123 : {

  08160	55		 push	 ebp
  08161	8b ec		 mov	 ebp, esp
  08163	83 ec 14	 sub	 esp, 20			; 00000014H
  08166	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0816b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0816e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  08171	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  08174	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  08177	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0817a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2124 : 	for(int i=0;i<=m_MenuList.GetUpperBound();++i){

  0817d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$189412[ebp], 0
  08184	eb 09		 jmp	 SHORT $L189413
$L189414:
  08186	8b 45 f8	 mov	 eax, DWORD PTR _i$189412[ebp]
  08189	83 c0 01	 add	 eax, 1
  0818c	89 45 f8	 mov	 DWORD PTR _i$189412[ebp], eax
$L189413:
  0818f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08192	83 c1 08	 add	 ecx, 8
  08195	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0819a	39 45 f8	 cmp	 DWORD PTR _i$189412[ebp], eax
  0819d	7f 4f		 jg	 SHORT $L189411

; 2125 : 		if(!m_MenuList[i]->syncflag){

  0819f	8b 4d f8	 mov	 ecx, DWORD PTR _i$189412[ebp]
  081a2	51		 push	 ecx
  081a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  081a6	83 c1 08	 add	 ecx, 8
  081a9	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  081ae	8b 10		 mov	 edx, DWORD PTR [eax]
  081b0	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  081b4	75 36		 jne	 SHORT $L189416

; 2126 : 			delete m_MenuList[i];

  081b6	8b 45 f8	 mov	 eax, DWORD PTR _i$189412[ebp]
  081b9	50		 push	 eax
  081ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  081bd	83 c1 08	 add	 ecx, 8
  081c0	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  081c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  081c7	89 4d f0	 mov	 DWORD PTR $T192704[ebp], ecx
  081ca	8b 55 f0	 mov	 edx, DWORD PTR $T192704[ebp]
  081cd	89 55 f4	 mov	 DWORD PTR $T192703[ebp], edx
  081d0	83 7d f4 00	 cmp	 DWORD PTR $T192703[ebp], 0
  081d4	74 0f		 je	 SHORT $L192705
  081d6	6a 01		 push	 1
  081d8	8b 4d f4	 mov	 ecx, DWORD PTR $T192703[ebp]
  081db	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  081e0	89 45 ec	 mov	 DWORD PTR tv84[ebp], eax
  081e3	eb 07		 jmp	 SHORT $L189416
$L192705:
  081e5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L189416:

; 2127 : 		}
; 2128 : 	}

  081ec	eb 98		 jmp	 SHORT $L189414
$L189411:

; 2129 : }

  081ee	83 c4 14	 add	 esp, 20			; 00000014H
  081f1	3b ec		 cmp	 ebp, esp
  081f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  081f8	8b e5		 mov	 esp, ebp
  081fa	5d		 pop	 ebp
  081fb	c3		 ret	 0
?DeleteMenuList@BCMenu@@IAEXXZ ENDP			; BCMenu::DeleteMenuList
_TEXT	ENDS
PUBLIC	?SynchronizeMenu@BCMenu@@IAEXXZ			; BCMenu::SynchronizeMenu
PUBLIC	?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
xdata$x	SEGMENT
$T192723 DD	0ffffffffH
	DD	FLAT:$L192711
	DD	00H
	DD	FLAT:$L192712
$T192717 DD	019930520H
	DD	02H
	DD	FLAT:$T192723
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv259 = -112						; size = 4
tv258 = -108						; size = 4
tv256 = -104						; size = 4
tv255 = -100						; size = 4
tv253 = -96						; size = 4
tv252 = -92						; size = 4
$T192710 = -88						; size = 4
$T192709 = -84						; size = 4
$T192708 = -80						; size = 4
_j$ = -76						; size = 4
_state$ = -72						; size = 4
_nID$ = -68						; size = 4
_submenu$ = -64						; size = 4
_string$ = -56						; size = 4
_mdata$ = -48						; size = 4
_temp$ = -40						; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SynchronizeMenu@BCMenu@@IAEXXZ PROC NEAR		; BCMenu::SynchronizeMenu
; _this$ = ecx

; 2132 : {

  08200	55		 push	 ebp
  08201	8b ec		 mov	 ebp, esp
  08203	6a ff		 push	 -1
  08205	68 00 00 00 00	 push	 __ehhandler$?SynchronizeMenu@BCMenu@@IAEXXZ
  0820a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08210	50		 push	 eax
  08211	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08218	83 ec 64	 sub	 esp, 100		; 00000064H
  0821b	56		 push	 esi
  0821c	57		 push	 edi
  0821d	51		 push	 ecx
  0821e	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  08221	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  08226	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0822b	f3 ab		 rep stosd
  0822d	59		 pop	 ecx
  0822e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2133 : 	CTypedPtrArray<CPtrArray, BCMenuData*> temp;

  08231	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  08234	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
  08239	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2134 : 	BCMenuData *mdata;
; 2135 : 	CString string;

  08240	8b f4		 mov	 esi, esp
  08242	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  08245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0824b	3b f4		 cmp	 esi, esp
  0824d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08252	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2136 : 	UINT submenu,nID=0,state,j;

  08256	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _nID$[ebp], 0

; 2137 : 	
; 2138 : 	InitializeMenuList(0);

  0825d	6a 00		 push	 0
  0825f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  08262	e8 00 00 00 00	 call	 ?InitializeMenuList@BCMenu@@IAEXH@Z ; BCMenu::InitializeMenuList

; 2139 : 	for(j=0;j<GetMenuItemCount();++j){

  08267	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0826e	eb 09		 jmp	 SHORT $L189430
$L189431:
  08270	8b 45 b4	 mov	 eax, DWORD PTR _j$[ebp]
  08273	83 c0 01	 add	 eax, 1
  08276	89 45 b4	 mov	 DWORD PTR _j$[ebp], eax
$L189430:
  08279	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0827c	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  08281	39 45 b4	 cmp	 DWORD PTR _j$[ebp], eax
  08284	0f 83 6b 02 00
	00		 jae	 $L189432

; 2140 : 		mdata=NULL;

  0828a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _mdata$[ebp], 0

; 2141 : 		state=GetMenuState(j,MF_BYPOSITION);

  08291	68 00 04 00 00	 push	 1024			; 00000400H
  08296	8b 4d b4	 mov	 ecx, DWORD PTR _j$[ebp]
  08299	51		 push	 ecx
  0829a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0829d	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  082a2	89 45 b8	 mov	 DWORD PTR _state$[ebp], eax

; 2142 : 		if(state&MF_POPUP){

  082a5	8b 55 b8	 mov	 edx, DWORD PTR _state$[ebp]
  082a8	83 e2 10	 and	 edx, 16			; 00000010H
  082ab	0f 84 c2 00 00
	00		 je	 $L189433

; 2143 : 			submenu=(UINT)GetSubMenu(j)->m_hMenu;

  082b1	8b 45 b4	 mov	 eax, DWORD PTR _j$[ebp]
  082b4	50		 push	 eax
  082b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  082b8	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  082bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  082c0	89 4d c0	 mov	 DWORD PTR _submenu$[ebp], ecx

; 2144 : 			mdata=FindMenuList(submenu);

  082c3	8b 55 c0	 mov	 edx, DWORD PTR _submenu$[ebp]
  082c6	52		 push	 edx
  082c7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  082ca	e8 00 00 00 00	 call	 ?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuList
  082cf	89 45 d0	 mov	 DWORD PTR _mdata$[ebp], eax

; 2145 : 			GetMenuString(j,string,MF_BYPOSITION);

  082d2	68 00 04 00 00	 push	 1024			; 00000400H
  082d7	8d 45 c8	 lea	 eax, DWORD PTR _string$[ebp]
  082da	50		 push	 eax
  082db	8b 4d b4	 mov	 ecx, DWORD PTR _j$[ebp]
  082de	51		 push	 ecx
  082df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  082e2	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 2146 : 			if(!mdata)mdata=NewODMenu(j,

  082e7	83 7d d0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  082eb	75 50		 jne	 SHORT $L189435

; 2147 : 				(state&0xFF)|MF_BYPOSITION|MF_POPUP|MF_OWNERDRAW,submenu,string);

  082ed	51		 push	 ecx
  082ee	8b cc		 mov	 ecx, esp
  082f0	89 65 b0	 mov	 DWORD PTR $T192708[ebp], esp
  082f3	8b f4		 mov	 esi, esp
  082f5	8d 55 c8	 lea	 edx, DWORD PTR _string$[ebp]
  082f8	52		 push	 edx
  082f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  082ff	3b f4		 cmp	 esi, esp
  08301	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08306	89 45 a4	 mov	 DWORD PTR tv252[ebp], eax
  08309	8b 45 c0	 mov	 eax, DWORD PTR _submenu$[ebp]
  0830c	50		 push	 eax
  0830d	8b 4d b8	 mov	 ecx, DWORD PTR _state$[ebp]
  08310	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  08316	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  0831c	83 c9 10	 or	 ecx, 16			; 00000010H
  0831f	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  08325	51		 push	 ecx
  08326	8b 55 b4	 mov	 edx, DWORD PTR _j$[ebp]
  08329	52		 push	 edx
  0832a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0832d	e8 00 00 00 00	 call	 ?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
  08332	89 45 a0	 mov	 DWORD PTR tv253[ebp], eax
  08335	8b 45 a0	 mov	 eax, DWORD PTR tv253[ebp]
  08338	89 45 d0	 mov	 DWORD PTR _mdata$[ebp], eax

; 2148 : 			else if(string.GetLength()>0)

  0833b	eb 31		 jmp	 SHORT $L189437
$L189435:
  0833d	8b f4		 mov	 esi, esp
  0833f	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  08342	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  08348	3b f4		 cmp	 esi, esp
  0834a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0834f	85 c0		 test	 eax, eax
  08351	7e 1b		 jle	 SHORT $L189437

; 2149 : #ifdef UNICODE
; 2150 : 				mdata->SetWideString(string);  //SK: modified for dynamic allocation
; 2151 : #else
; 2152 : 			mdata->SetAnsiString(string);

  08353	8b f4		 mov	 esi, esp
  08355	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  08358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0835e	3b f4		 cmp	 esi, esp
  08360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08365	50		 push	 eax
  08366	8b 4d d0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  08369	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString
$L189437:

; 2153 : #endif
; 2154 : 		}
; 2155 : 		else if(state&MF_SEPARATOR){

  0836e	e9 6b 01 00 00	 jmp	 $L189439
$L189433:
  08373	8b 4d b8	 mov	 ecx, DWORD PTR _state$[ebp]
  08376	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0837c	74 7f		 je	 SHORT $L189440

; 2156 : 			mdata=FindMenuList(0);

  0837e	6a 00		 push	 0
  08380	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  08383	e8 00 00 00 00	 call	 ?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuList
  08388	89 45 d0	 mov	 DWORD PTR _mdata$[ebp], eax

; 2157 : 			if(!mdata)mdata=NewODMenu(j,

  0838b	83 7d d0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  0838f	75 4c		 jne	 SHORT $L189441

; 2158 : 				state|MF_BYPOSITION|MF_SEPARATOR|MF_OWNERDRAW,0,_T(""));//SK: modified for Unicode correctness

  08391	51		 push	 ecx
  08392	8b cc		 mov	 ecx, esp
  08394	89 65 ac	 mov	 DWORD PTR $T192709[ebp], esp
  08397	8b f4		 mov	 esi, esp
  08399	68 00 00 00 00	 push	 OFFSET FLAT:$SG189443
  0839e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  083a4	3b f4		 cmp	 esi, esp
  083a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  083ab	89 45 9c	 mov	 DWORD PTR tv255[ebp], eax
  083ae	6a 00		 push	 0
  083b0	8b 55 b8	 mov	 edx, DWORD PTR _state$[ebp]
  083b3	81 ca 00 04 00
	00		 or	 edx, 1024		; 00000400H
  083b9	81 ca 00 08 00
	00		 or	 edx, 2048		; 00000800H
  083bf	81 ca 00 01 00
	00		 or	 edx, 256		; 00000100H
  083c5	52		 push	 edx
  083c6	8b 45 b4	 mov	 eax, DWORD PTR _j$[ebp]
  083c9	50		 push	 eax
  083ca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  083cd	e8 00 00 00 00	 call	 ?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
  083d2	89 45 98	 mov	 DWORD PTR tv256[ebp], eax
  083d5	8b 4d 98	 mov	 ecx, DWORD PTR tv256[ebp]
  083d8	89 4d d0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 2159 : 			else ModifyMenu(j,mdata->nFlags,nID,(LPCTSTR)mdata);

  083db	eb 1b		 jmp	 SHORT $L189444
$L189441:
  083dd	8b 55 d0	 mov	 edx, DWORD PTR _mdata$[ebp]
  083e0	52		 push	 edx
  083e1	8b 45 bc	 mov	 eax, DWORD PTR _nID$[ebp]
  083e4	50		 push	 eax
  083e5	8b 4d d0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  083e8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  083eb	52		 push	 edx
  083ec	8b 45 b4	 mov	 eax, DWORD PTR _j$[ebp]
  083ef	50		 push	 eax
  083f0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  083f3	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L189444:

; 2160 : 		}
; 2161 : 		else{

  083f8	e9 e1 00 00 00	 jmp	 $L189439
$L189440:

; 2162 : 			nID=GetMenuItemID(j);

  083fd	8b 4d b4	 mov	 ecx, DWORD PTR _j$[ebp]
  08400	51		 push	 ecx
  08401	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  08404	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  08409	89 45 bc	 mov	 DWORD PTR _nID$[ebp], eax

; 2163 : 			mdata=FindMenuList(nID);

  0840c	8b 55 bc	 mov	 edx, DWORD PTR _nID$[ebp]
  0840f	52		 push	 edx
  08410	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  08413	e8 00 00 00 00	 call	 ?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuList
  08418	89 45 d0	 mov	 DWORD PTR _mdata$[ebp], eax

; 2164 : 			GetMenuString(j,string,MF_BYPOSITION);

  0841b	68 00 04 00 00	 push	 1024			; 00000400H
  08420	8d 45 c8	 lea	 eax, DWORD PTR _string$[ebp]
  08423	50		 push	 eax
  08424	8b 4d b4	 mov	 ecx, DWORD PTR _j$[ebp]
  08427	51		 push	 ecx
  08428	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0842b	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 2165 : 			if(!mdata)mdata=NewODMenu(j,state|MF_BYPOSITION|MF_OWNERDRAW,

  08430	83 7d d0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  08434	75 47		 jne	 SHORT $L189447

; 2166 : 				nID,string);

  08436	51		 push	 ecx
  08437	8b cc		 mov	 ecx, esp
  08439	89 65 a8	 mov	 DWORD PTR $T192710[ebp], esp
  0843c	8b f4		 mov	 esi, esp
  0843e	8d 55 c8	 lea	 edx, DWORD PTR _string$[ebp]
  08441	52		 push	 edx
  08442	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  08448	3b f4		 cmp	 esi, esp
  0844a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0844f	89 45 94	 mov	 DWORD PTR tv258[ebp], eax
  08452	8b 45 bc	 mov	 eax, DWORD PTR _nID$[ebp]
  08455	50		 push	 eax
  08456	8b 4d b8	 mov	 ecx, DWORD PTR _state$[ebp]
  08459	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  0845f	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  08465	51		 push	 ecx
  08466	8b 55 b4	 mov	 edx, DWORD PTR _j$[ebp]
  08469	52		 push	 edx
  0846a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0846d	e8 00 00 00 00	 call	 ?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
  08472	89 45 90	 mov	 DWORD PTR tv259[ebp], eax
  08475	8b 45 90	 mov	 eax, DWORD PTR tv259[ebp]
  08478	89 45 d0	 mov	 DWORD PTR _mdata$[ebp], eax

; 2167 : 			else{

  0847b	eb 61		 jmp	 SHORT $L189439
$L189447:

; 2168 : 				mdata->nFlags=state|MF_BYPOSITION|MF_OWNERDRAW;

  0847d	8b 4d b8	 mov	 ecx, DWORD PTR _state$[ebp]
  08480	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  08486	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  0848c	8b 55 d0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0848f	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 2169 : 				if(string.GetLength()>0)

  08492	8b f4		 mov	 esi, esp
  08494	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  08497	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0849d	3b f4		 cmp	 esi, esp
  0849f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  084a4	85 c0		 test	 eax, eax
  084a6	7e 1b		 jle	 SHORT $L189450

; 2170 : #ifdef UNICODE
; 2171 : 					mdata->SetWideString(string);//SK: modified for dynamic allocation
; 2172 : #else
; 2173 : 				mdata->SetAnsiString(string);

  084a8	8b f4		 mov	 esi, esp
  084aa	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  084ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  084b3	3b f4		 cmp	 esi, esp
  084b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  084ba	50		 push	 eax
  084bb	8b 4d d0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  084be	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString
$L189450:

; 2174 : #endif
; 2175 : 				
; 2176 : 				ModifyMenu(j,mdata->nFlags,nID,(LPCTSTR)mdata);

  084c3	8b 45 d0	 mov	 eax, DWORD PTR _mdata$[ebp]
  084c6	50		 push	 eax
  084c7	8b 4d bc	 mov	 ecx, DWORD PTR _nID$[ebp]
  084ca	51		 push	 ecx
  084cb	8b 55 d0	 mov	 edx, DWORD PTR _mdata$[ebp]
  084ce	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  084d1	50		 push	 eax
  084d2	8b 4d b4	 mov	 ecx, DWORD PTR _j$[ebp]
  084d5	51		 push	 ecx
  084d6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  084d9	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L189439:

; 2177 : 			}
; 2178 : 		}
; 2179 : 		if(mdata)temp.Add(mdata);

  084de	83 7d d0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  084e2	74 0c		 je	 SHORT $L189452
  084e4	8b 55 d0	 mov	 edx, DWORD PTR _mdata$[ebp]
  084e7	52		 push	 edx
  084e8	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  084eb	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L189452:

; 2180 : 	}

  084f0	e9 7b fd ff ff	 jmp	 $L189431
$L189432:

; 2181 : 	DeleteMenuList();

  084f5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  084f8	e8 00 00 00 00	 call	 ?DeleteMenuList@BCMenu@@IAEXXZ ; BCMenu::DeleteMenuList

; 2182 : 	m_MenuList.RemoveAll();

  084fd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  08500	83 c1 08	 add	 ecx, 8
  08503	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 2183 : 	m_MenuList.Append(temp);

  08508	8d 45 d8	 lea	 eax, DWORD PTR _temp$[ebp]
  0850b	50		 push	 eax
  0850c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0850f	83 c1 08	 add	 ecx, 8
  08512	e8 00 00 00 00	 call	 ?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append

; 2184 : 	temp.RemoveAll(); 

  08517	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  0851a	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 2185 : }

  0851f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  08523	8b f4		 mov	 esi, esp
  08525	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  08528	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0852e	3b f4		 cmp	 esi, esp
  08530	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08535	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0853c	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  0853f	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
  08544	52		 push	 edx
  08545	8b cd		 mov	 ecx, ebp
  08547	50		 push	 eax
  08548	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192722
  0854e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  08553	58		 pop	 eax
  08554	5a		 pop	 edx
  08555	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  08558	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0855f	5f		 pop	 edi
  08560	5e		 pop	 esi
  08561	83 c4 70	 add	 esp, 112		; 00000070H
  08564	3b ec		 cmp	 ebp, esp
  08566	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0856b	8b e5		 mov	 esp, ebp
  0856d	5d		 pop	 ebp
  0856e	c3		 ret	 0
$L192722:
  0856f	02 00 00 00	 DD	 2
  08573	00 00 00 00	 DD	 $L192721
$L192721:
  08577	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0857b	14 00 00 00	 DD	 20			; 00000014H
  0857f	00 00 00 00	 DD	 $L192718
  08583	c8 ff ff ff	 DD	 -56			; ffffffc8H
  08587	04 00 00 00	 DD	 4
  0858b	00 00 00 00	 DD	 $L192719
$L192719:
  0858f	73		 DB	 115			; 00000073H
  08590	74		 DB	 116			; 00000074H
  08591	72		 DB	 114			; 00000072H
  08592	69		 DB	 105			; 00000069H
  08593	6e		 DB	 110			; 0000006eH
  08594	67		 DB	 103			; 00000067H
  08595	00		 DB	 0
$L192718:
  08596	74		 DB	 116			; 00000074H
  08597	65		 DB	 101			; 00000065H
  08598	6d		 DB	 109			; 0000006dH
  08599	70		 DB	 112			; 00000070H
  0859a	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192711:
  005de	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  005e1	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
$L192712:
  005e6	8b f4		 mov	 esi, esp
  005e8	8d 4d c8	 lea	 ecx, DWORD PTR _string$[ebp]
  005eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  005f1	3b f4		 cmp	 esi, esp
  005f3	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?SynchronizeMenu@BCMenu@@IAEXXZ:
  005f8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192717
  005fd	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SynchronizeMenu@BCMenu@@IAEXXZ ENDP			; BCMenu::SynchronizeMenu
PUBLIC	?UpdateMenu@BCMenu@@SAXPAVCMenu@@@Z		; BCMenu::UpdateMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_psubmenu$ = -4						; size = 4
_pmenu$ = 8						; size = 4
?UpdateMenu@BCMenu@@SAXPAVCMenu@@@Z PROC NEAR		; BCMenu::UpdateMenu

; 2188 : {

  085a0	55		 push	 ebp
  085a1	8b ec		 mov	 ebp, esp
  085a3	51		 push	 ecx
  085a4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2189 : #ifdef _CPPRTTI 
; 2190 : 	BCMenu *psubmenu = dynamic_cast<BCMenu *>(pmenu);

  085ab	6a 00		 push	 0
  085ad	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  085b2	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  085b7	6a 00		 push	 0
  085b9	8b 45 08	 mov	 eax, DWORD PTR _pmenu$[ebp]
  085bc	50		 push	 eax
  085bd	e8 00 00 00 00	 call	 ___RTDynamicCast
  085c2	83 c4 14	 add	 esp, 20			; 00000014H
  085c5	89 45 fc	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 2191 : #else
; 2192 : 	BCMenu *psubmenu = (BCMenu *)pmenu;
; 2193 : #endif
; 2194 : 	if(psubmenu)psubmenu->SynchronizeMenu();

  085c8	83 7d fc 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  085cc	74 08		 je	 SHORT $L189455
  085ce	8b 4d fc	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  085d1	e8 00 00 00 00	 call	 ?SynchronizeMenu@BCMenu@@IAEXXZ ; BCMenu::SynchronizeMenu
$L189455:

; 2195 : }

  085d6	83 c4 04	 add	 esp, 4
  085d9	3b ec		 cmp	 ebp, esp
  085db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  085e0	8b e5		 mov	 esp, ebp
  085e2	5d		 pop	 ebp
  085e3	c3		 ret	 0
?UpdateMenu@BCMenu@@SAXPAVCMenu@@@Z ENDP		; BCMenu::UpdateMenu
_TEXT	ENDS
PUBLIC	?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z	; BCMenu::FindKeyboardShortcut
EXTRN	__imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z:NEAR
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z:NEAR
EXTRN	__imp_?MakeLower@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ:NEAR
xdata$x	SEGMENT
$T192736 DD	0ffffffffH
	DD	FLAT:$L192727
	DD	00H
	DD	FLAT:$L192728
$T192730 DD	019930520H
	DD	02H
	DD	FLAT:$T192736
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192726 = -52						; size = 4
_i$189473 = -48						; size = 4
_menusize$189470 = -44					; size = 4
_menutext$189469 = -36					; size = 4
_key$189467 = -24					; size = 4
_pBCMenu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nChar$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_pMenu$ = 16						; size = 4
?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z PROC NEAR ; BCMenu::FindKeyboardShortcut

; 2199 : {

  085f0	55		 push	 ebp
  085f1	8b ec		 mov	 ebp, esp
  085f3	6a ff		 push	 -1
  085f5	68 00 00 00 00	 push	 __ehhandler$?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z
  085fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08600	50		 push	 eax
  08601	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08608	83 ec 28	 sub	 esp, 40			; 00000028H
  0860b	56		 push	 esi
  0860c	57		 push	 edi
  0860d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  08610	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  08615	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0861a	f3 ab		 rep stosd

; 2200 : #ifdef _CPPRTTI 
; 2201 : 	BCMenu *pBCMenu = dynamic_cast<BCMenu *>(pMenu);

  0861c	6a 00		 push	 0
  0861e	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  08623	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  08628	6a 00		 push	 0
  0862a	8b 45 10	 mov	 eax, DWORD PTR _pMenu$[ebp]
  0862d	50		 push	 eax
  0862e	e8 00 00 00 00	 call	 ___RTDynamicCast
  08633	83 c4 14	 add	 esp, 20			; 00000014H
  08636	89 45 f0	 mov	 DWORD PTR _pBCMenu$[ebp], eax

; 2202 : #else
; 2203 : 	BCMenu *pBCMenu = (BCMenu *)pMenu;
; 2204 : #endif
; 2205 : 	if(pBCMenu && nFlags&MF_POPUP){

  08639	83 7d f0 00	 cmp	 DWORD PTR _pBCMenu$[ebp], 0
  0863d	0f 84 84 01 00
	00		 je	 $L189466
  08643	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  08646	83 e1 10	 and	 ecx, 16			; 00000010H
  08649	0f 84 78 01 00
	00		 je	 $L189466

; 2206 : 		CString key(_T('&'),2);//SK: modified for Unicode correctness

  0864f	8b f4		 mov	 esi, esp
  08651	6a 02		 push	 2
  08653	6a 26		 push	 38			; 00000026H
  08655	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  08658	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z
  0865e	3b f4		 cmp	 esi, esp
  08660	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08665	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2207 : 		key.SetAt(1,(TCHAR)nChar);

  0866c	8b f4		 mov	 esi, esp
  0866e	8a 55 08	 mov	 dl, BYTE PTR _nChar$[ebp]
  08671	52		 push	 edx
  08672	6a 01		 push	 1
  08674	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  08677	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z
  0867d	3b f4		 cmp	 esi, esp
  0867f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2208 : 		key.MakeLower();

  08684	8b f4		 mov	 esi, esp
  08686	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  08689	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?MakeLower@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0868f	3b f4		 cmp	 esi, esp
  08691	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2209 : 		CString menutext;

  08696	8b f4		 mov	 esi, esp
  08698	8d 4d dc	 lea	 ecx, DWORD PTR _menutext$189469[ebp]
  0869b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  086a1	3b f4		 cmp	 esi, esp
  086a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  086a8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2210 : 		int menusize = (int)pBCMenu->GetMenuItemCount();

  086ac	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  086af	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  086b4	89 45 d4	 mov	 DWORD PTR _menusize$189470[ebp], eax

; 2211 : 		if(menusize!=(pBCMenu->m_MenuList.GetUpperBound()+1))

  086b7	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  086ba	83 c1 08	 add	 ecx, 8
  086bd	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  086c2	83 c0 01	 add	 eax, 1
  086c5	39 45 d4	 cmp	 DWORD PTR _menusize$189470[ebp], eax
  086c8	74 08		 je	 SHORT $L189472

; 2212 : 			pBCMenu->SynchronizeMenu();

  086ca	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  086cd	e8 00 00 00 00	 call	 ?SynchronizeMenu@BCMenu@@IAEXXZ ; BCMenu::SynchronizeMenu
$L189472:

; 2213 : 		for(int i=0;i<menusize;++i){

  086d2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$189473[ebp], 0
  086d9	eb 09		 jmp	 SHORT $L189474
$L189475:
  086db	8b 45 d0	 mov	 eax, DWORD PTR _i$189473[ebp]
  086de	83 c0 01	 add	 eax, 1
  086e1	89 45 d0	 mov	 DWORD PTR _i$189473[ebp], eax
$L189474:
  086e4	8b 4d d0	 mov	 ecx, DWORD PTR _i$189473[ebp]
  086e7	3b 4d d4	 cmp	 ecx, DWORD PTR _menusize$189470[ebp]
  086ea	0f 8d a8 00 00
	00		 jge	 $L189476

; 2214 : 			if(pBCMenu->GetMenuText(i,menutext)){

  086f0	68 00 04 00 00	 push	 1024			; 00000400H
  086f5	8d 55 dc	 lea	 edx, DWORD PTR _menutext$189469[ebp]
  086f8	52		 push	 edx
  086f9	8b 45 d0	 mov	 eax, DWORD PTR _i$189473[ebp]
  086fc	50		 push	 eax
  086fd	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  08700	e8 00 00 00 00	 call	 ?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText
  08705	85 c0		 test	 eax, eax
  08707	0f 84 86 00 00
	00		 je	 $L189477

; 2215 : 				menutext.MakeLower();

  0870d	8b f4		 mov	 esi, esp
  0870f	8d 4d dc	 lea	 ecx, DWORD PTR _menutext$189469[ebp]
  08712	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?MakeLower@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  08718	3b f4		 cmp	 esi, esp
  0871a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2216 : 				if(menutext.Find(key)>=0)return(MAKELRESULT(i,2));

  0871f	8b f4		 mov	 esi, esp
  08721	6a 00		 push	 0
  08723	8b fc		 mov	 edi, esp
  08725	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  08728	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0872e	3b fc		 cmp	 edi, esp
  08730	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08735	50		 push	 eax
  08736	8d 4d dc	 lea	 ecx, DWORD PTR _menutext$189469[ebp]
  08739	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0873f	3b f4		 cmp	 esi, esp
  08741	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08746	85 c0		 test	 eax, eax
  08748	7c 49		 jl	 SHORT $L189477
  0874a	8b 4d d0	 mov	 ecx, DWORD PTR _i$189473[ebp]
  0874d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  08753	0f b7 d1	 movzx	 edx, cx
  08756	81 ca 00 00 02
	00		 or	 edx, 131072		; 00020000H
  0875c	89 55 cc	 mov	 DWORD PTR $T192726[ebp], edx
  0875f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  08763	8b f4		 mov	 esi, esp
  08765	8d 4d dc	 lea	 ecx, DWORD PTR _menutext$189469[ebp]
  08768	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0876e	3b f4		 cmp	 esi, esp
  08770	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08775	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0877c	8b f4		 mov	 esi, esp
  0877e	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  08781	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  08787	3b f4		 cmp	 esi, esp
  08789	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0878e	8b 45 cc	 mov	 eax, DWORD PTR $T192726[ebp]
  08791	eb 36		 jmp	 SHORT $L189463
$L189477:

; 2217 : 			}
; 2218 : 		}

  08793	e9 43 ff ff ff	 jmp	 $L189475
$L189476:

; 2219 : 	}

  08798	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0879c	8b f4		 mov	 esi, esp
  0879e	8d 4d dc	 lea	 ecx, DWORD PTR _menutext$189469[ebp]
  087a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  087a7	3b f4		 cmp	 esi, esp
  087a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  087ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  087b5	8b f4		 mov	 esi, esp
  087b7	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  087ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  087c0	3b f4		 cmp	 esi, esp
  087c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L189466:

; 2220 : 	return(0);

  087c7	33 c0		 xor	 eax, eax
$L189463:

; 2221 : }

  087c9	52		 push	 edx
  087ca	8b cd		 mov	 ecx, ebp
  087cc	50		 push	 eax
  087cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192735
  087d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  087d8	58		 pop	 eax
  087d9	5a		 pop	 edx
  087da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  087dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  087e4	5f		 pop	 edi
  087e5	5e		 pop	 esi
  087e6	83 c4 34	 add	 esp, 52			; 00000034H
  087e9	3b ec		 cmp	 ebp, esp
  087eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  087f0	8b e5		 mov	 esp, ebp
  087f2	5d		 pop	 ebp
  087f3	c3		 ret	 0
$L192735:
  087f4	02 00 00 00	 DD	 2
  087f8	00 00 00 00	 DD	 $L192734
$L192734:
  087fc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  08800	04 00 00 00	 DD	 4
  08804	00 00 00 00	 DD	 $L192731
  08808	dc ff ff ff	 DD	 -36			; ffffffdcH
  0880c	04 00 00 00	 DD	 4
  08810	00 00 00 00	 DD	 $L192732
$L192732:
  08814	6d		 DB	 109			; 0000006dH
  08815	65		 DB	 101			; 00000065H
  08816	6e		 DB	 110			; 0000006eH
  08817	75		 DB	 117			; 00000075H
  08818	74		 DB	 116			; 00000074H
  08819	65		 DB	 101			; 00000065H
  0881a	78		 DB	 120			; 00000078H
  0881b	74		 DB	 116			; 00000074H
  0881c	00		 DB	 0
$L192731:
  0881d	6b		 DB	 107			; 0000006bH
  0881e	65		 DB	 101			; 00000065H
  0881f	79		 DB	 121			; 00000079H
  08820	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192727:
  00602	8b f4		 mov	 esi, esp
  00604	8d 4d e8	 lea	 ecx, DWORD PTR _key$189467[ebp]
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0060d	3b f4		 cmp	 esi, esp
  0060f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$L192728:
  00614	8b f4		 mov	 esi, esp
  00616	8d 4d dc	 lea	 ecx, DWORD PTR _menutext$189469[ebp]
  00619	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0061f	3b f4		 cmp	 esi, esp
  00621	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z:
  00626	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192730
  0062b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z ENDP	; BCMenu::FindKeyboardShortcut
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__BitBlt@36:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	__imp__CreateSolidBrush@4:NEAR
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	__imp__CreateDIBSection@24:NEAR
EXTRN	__imp__GetSysColorBrush@4:NEAR
EXTRN	__imp__FillRect@12:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192745 = -116						; size = 16
_oldBrush$189531 = -100					; size = 4
_hb$189530 = -96					; size = 4
_hdcolddib$189526 = -92					; size = 4
_olddib$189524 = -88					; size = 4
_hbmBW$189520 = -84					; size = 4
_pbitsBW$189519 = -76					; size = 4
_RGBBWBITMAPINFO$189517 = -64				; size = 48
_bwDC$189505 = -12					; size = 4
_hDC$ = -8						; size = 4
_this$ = -4						; size = 4
_hdcDest$ = 8						; size = 4
_nXDest$ = 12						; size = 4
_nYDest$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_hbm$ = 28						; size = 4
_nXSrc$ = 32						; size = 4
_nYSrc$ = 36						; size = 4
_bgcolor$ = 40						; size = 4
?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z PROC NEAR ; BCMenu::DitherBlt
; _this$ = ecx

; 2226 : {

  08830	55		 push	 ebp
  08831	8b ec		 mov	 ebp, esp
  08833	83 ec 74	 sub	 esp, 116		; 00000074H
  08836	56		 push	 esi
  08837	57		 push	 edi
  08838	51		 push	 ecx
  08839	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  0883c	b9 1d 00 00 00	 mov	 ecx, 29			; 0000001dH
  08841	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  08846	f3 ab		 rep stosd
  08848	59		 pop	 ecx
  08849	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 : 	ASSERT(hdcDest && hbm);

  0884c	83 7d 08 00	 cmp	 DWORD PTR _hdcDest$[ebp], 0
  08850	74 06		 je	 SHORT $L192738
  08852	83 7d 1c 00	 cmp	 DWORD PTR _hbm$[ebp], 0
  08856	75 14		 jne	 SHORT $L192739
$L192738:
  08858	68 b3 08 00 00	 push	 2227			; 000008b3H
  0885d	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  08862	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  08867	85 c0		 test	 eax, eax
  08869	74 01		 je	 SHORT $L192739
  0886b	cc		 int	 3
$L192739:

; 2228 : 	ASSERT(nWidth > 0 && nHeight > 0);

  0886c	83 7d 14 00	 cmp	 DWORD PTR _nWidth$[ebp], 0
  08870	7e 06		 jle	 SHORT $L192740
  08872	83 7d 18 00	 cmp	 DWORD PTR _nHeight$[ebp], 0
  08876	7f 14		 jg	 SHORT $L192741
$L192740:
  08878	68 b4 08 00 00	 push	 2228			; 000008b4H
  0887d	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  08882	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  08887	85 c0		 test	 eax, eax
  08889	74 01		 je	 SHORT $L192741
  0888b	cc		 int	 3
$L192741:

; 2229 : 	
; 2230 : 	// Create a generic DC for all BitBlts
; 2231 : 	HDC hDC = CreateCompatibleDC(hdcDest);

  0888c	8b f4		 mov	 esi, esp
  0888e	8b 55 08	 mov	 edx, DWORD PTR _hdcDest$[ebp]
  08891	52		 push	 edx
  08892	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  08898	3b f4		 cmp	 esi, esp
  0889a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0889f	89 45 f8	 mov	 DWORD PTR _hDC$[ebp], eax

; 2232 : 	ASSERT(hDC);

  088a2	83 7d f8 00	 cmp	 DWORD PTR _hDC$[ebp], 0
  088a6	75 14		 jne	 SHORT $L192742
  088a8	68 b8 08 00 00	 push	 2232			; 000008b8H
  088ad	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  088b2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  088b7	85 c0		 test	 eax, eax
  088b9	74 01		 je	 SHORT $L192742
  088bb	cc		 int	 3
$L192742:

; 2233 : 	
; 2234 : 	if (hDC)

  088bc	83 7d f8 00	 cmp	 DWORD PTR _hDC$[ebp], 0
  088c0	0f 84 5e 03 00
	00		 je	 $L189499

; 2235 : 	{
; 2236 : 		// Create a DC for the monochrome DIB section
; 2237 : 		HDC bwDC = CreateCompatibleDC(hDC);

  088c6	8b f4		 mov	 esi, esp
  088c8	8b 4d f8	 mov	 ecx, DWORD PTR _hDC$[ebp]
  088cb	51		 push	 ecx
  088cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  088d2	3b f4		 cmp	 esi, esp
  088d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  088d9	89 45 f4	 mov	 DWORD PTR _bwDC$189505[ebp], eax

; 2238 : 		ASSERT(bwDC);

  088dc	83 7d f4 00	 cmp	 DWORD PTR _bwDC$189505[ebp], 0
  088e0	75 14		 jne	 SHORT $L192743
  088e2	68 be 08 00 00	 push	 2238			; 000008beH
  088e7	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  088ec	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  088f1	85 c0		 test	 eax, eax
  088f3	74 01		 je	 SHORT $L192743
  088f5	cc		 int	 3
$L192743:

; 2239 : 		
; 2240 : 		if (bwDC)

  088f6	83 7d f4 00	 cmp	 DWORD PTR _bwDC$189505[ebp], 0
  088fa	0f 84 f9 02 00
	00		 je	 $L189507

; 2241 : 		{
; 2242 : 			// Create the monochrome DIB section with a black and white palette
; 2243 : 			struct {
; 2244 : 				BITMAPINFOHEADER bmiHeader; 
; 2245 : 				RGBQUAD      bmiColors[2]; 
; 2246 : 			} RGBBWBITMAPINFO = {
; 2247 : 				
; 2248 : 				{    // a BITMAPINFOHEADER
; 2249 : 					sizeof(BITMAPINFOHEADER),  // biSize 

  08900	c7 45 c0 28 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp], 40 ; 00000028H

; 2250 : 						nWidth,         // biWidth; 

  08907	8b 45 14	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0890a	89 45 c4	 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+4], eax

; 2251 : 						nHeight,        // biHeight; 

  0890d	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  08910	89 4d c8	 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+8], ecx

; 2252 : 						1,            // biPlanes; 

  08913	66 c7 45 cc 01
	00		 mov	 WORD PTR _RGBBWBITMAPINFO$189517[ebp+12], 1

; 2253 : 						1,            // biBitCount 

  08919	66 c7 45 ce 01
	00		 mov	 WORD PTR _RGBBWBITMAPINFO$189517[ebp+14], 1

; 2254 : 						BI_RGB,         // biCompression; 

  0891f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+16], 0

; 2255 : 						0,            // biSizeImage; 

  08926	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+20], 0

; 2256 : 						0,            // biXPelsPerMeter; 

  0892d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+24], 0

; 2257 : 						0,            // biYPelsPerMeter; 

  08934	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+28], 0

; 2258 : 						0,            // biClrUsed; 

  0893b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+32], 0

; 2259 : 						0            // biClrImportant; 
; 2260 : 				},    

  08942	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$189517[ebp+36], 0

; 2261 : 				{
; 2262 : 					{ 0x00, 0x00, 0x00, 0x00 }, { 0xFF, 0xFF, 0xFF, 0x00 }

  08949	c6 45 e8 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+40], 0
  0894d	c6 45 e9 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+41], 0
  08951	c6 45 ea 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+42], 0
  08955	c6 45 eb 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+43], 0
  08959	c6 45 ec ff	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+44], 255 ; 000000ffH
  0895d	c6 45 ed ff	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+45], 255 ; 000000ffH
  08961	c6 45 ee ff	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+46], 255 ; 000000ffH
  08965	c6 45 ef 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$189517[ebp+47], 0

; 2263 : 					} 
; 2264 : 			};
; 2265 : 			VOID *pbitsBW;
; 2266 : 			HBITMAP hbmBW = CreateDIBSection(bwDC,
; 2267 : 				(LPBITMAPINFO)&RGBBWBITMAPINFO, DIB_RGB_COLORS, &pbitsBW, NULL, 0);

  08969	8b f4		 mov	 esi, esp
  0896b	6a 00		 push	 0
  0896d	6a 00		 push	 0
  0896f	8d 55 b4	 lea	 edx, DWORD PTR _pbitsBW$189519[ebp]
  08972	52		 push	 edx
  08973	6a 00		 push	 0
  08975	8d 45 c0	 lea	 eax, DWORD PTR _RGBBWBITMAPINFO$189517[ebp]
  08978	50		 push	 eax
  08979	8b 4d f4	 mov	 ecx, DWORD PTR _bwDC$189505[ebp]
  0897c	51		 push	 ecx
  0897d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDIBSection@24
  08983	3b f4		 cmp	 esi, esp
  08985	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0898a	89 45 ac	 mov	 DWORD PTR _hbmBW$189520[ebp], eax

; 2268 : 			ASSERT(hbmBW);

  0898d	83 7d ac 00	 cmp	 DWORD PTR _hbmBW$189520[ebp], 0
  08991	75 14		 jne	 SHORT $L192744
  08993	68 dc 08 00 00	 push	 2268			; 000008dcH
  08998	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0899d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  089a2	85 c0		 test	 eax, eax
  089a4	74 01		 je	 SHORT $L192744
  089a6	cc		 int	 3
$L192744:

; 2269 : 			
; 2270 : 			if (hbmBW)

  089a7	83 7d ac 00	 cmp	 DWORD PTR _hbmBW$189520[ebp], 0
  089ab	0f 84 1d 02 00
	00		 je	 $L189523

; 2271 : 			{
; 2272 : 				// Attach the monochrome DIB section and the bitmap to the DCs
; 2273 : 				HBITMAP olddib = (HBITMAP)SelectObject(bwDC, hbmBW);

  089b1	8b f4		 mov	 esi, esp
  089b3	8b 45 ac	 mov	 eax, DWORD PTR _hbmBW$189520[ebp]
  089b6	50		 push	 eax
  089b7	8b 4d f4	 mov	 ecx, DWORD PTR _bwDC$189505[ebp]
  089ba	51		 push	 ecx
  089bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  089c1	3b f4		 cmp	 esi, esp
  089c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  089c8	89 45 a8	 mov	 DWORD PTR _olddib$189524[ebp], eax

; 2274 : 				HBITMAP hdcolddib = (HBITMAP)SelectObject(hDC, hbm);

  089cb	8b f4		 mov	 esi, esp
  089cd	8b 55 1c	 mov	 edx, DWORD PTR _hbm$[ebp]
  089d0	52		 push	 edx
  089d1	8b 45 f8	 mov	 eax, DWORD PTR _hDC$[ebp]
  089d4	50		 push	 eax
  089d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  089db	3b f4		 cmp	 esi, esp
  089dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  089e2	89 45 a4	 mov	 DWORD PTR _hdcolddib$189526[ebp], eax

; 2275 : 				
; 2276 : 				// BitBlt the bitmap into the monochrome DIB section
; 2277 : 				BitBlt(bwDC, 0, 0, nWidth, nHeight, hDC, nXSrc, nYSrc, SRCCOPY);

  089e5	8b f4		 mov	 esi, esp
  089e7	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  089ec	8b 4d 24	 mov	 ecx, DWORD PTR _nYSrc$[ebp]
  089ef	51		 push	 ecx
  089f0	8b 55 20	 mov	 edx, DWORD PTR _nXSrc$[ebp]
  089f3	52		 push	 edx
  089f4	8b 45 f8	 mov	 eax, DWORD PTR _hDC$[ebp]
  089f7	50		 push	 eax
  089f8	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  089fb	51		 push	 ecx
  089fc	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  089ff	52		 push	 edx
  08a00	6a 00		 push	 0
  08a02	6a 00		 push	 0
  08a04	8b 45 f4	 mov	 eax, DWORD PTR _bwDC$189505[ebp]
  08a07	50		 push	 eax
  08a08	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
  08a0e	3b f4		 cmp	 esi, esp
  08a10	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2278 : 				
; 2279 : 				// Paint the destination rectangle in gray
; 2280 : 				FillRect(hdcDest, CRect(nXDest, nYDest, nXDest + nWidth, nYDest +
; 2281 : 					nHeight), GetSysColorBrush(bgcolor));

  08a15	8b f4		 mov	 esi, esp
  08a17	8b 4d 28	 mov	 ecx, DWORD PTR _bgcolor$[ebp]
  08a1a	51		 push	 ecx
  08a1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColorBrush@4
  08a21	3b f4		 cmp	 esi, esp
  08a23	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08a28	8b f4		 mov	 esi, esp
  08a2a	50		 push	 eax
  08a2b	8b 55 10	 mov	 edx, DWORD PTR _nYDest$[ebp]
  08a2e	03 55 18	 add	 edx, DWORD PTR _nHeight$[ebp]
  08a31	52		 push	 edx
  08a32	8b 45 0c	 mov	 eax, DWORD PTR _nXDest$[ebp]
  08a35	03 45 14	 add	 eax, DWORD PTR _nWidth$[ebp]
  08a38	50		 push	 eax
  08a39	8b 4d 10	 mov	 ecx, DWORD PTR _nYDest$[ebp]
  08a3c	51		 push	 ecx
  08a3d	8b 55 0c	 mov	 edx, DWORD PTR _nXDest$[ebp]
  08a40	52		 push	 edx
  08a41	8d 4d 8c	 lea	 ecx, DWORD PTR $T192745[ebp]
  08a44	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  08a49	8b c8		 mov	 ecx, eax
  08a4b	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  08a50	50		 push	 eax
  08a51	8b 45 08	 mov	 eax, DWORD PTR _hdcDest$[ebp]
  08a54	50		 push	 eax
  08a55	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
  08a5b	3b f4		 cmp	 esi, esp
  08a5d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2282 : 				//SK: looks better on the old shell
; 2283 : 				// BitBlt the black bits in the monochrome bitmap into COLOR_3DHILIGHT
; 2284 : 				// bits in the destination DC
; 2285 : 				// The magic ROP comes from the Charles Petzold's book
; 2286 : 				HBRUSH hb = CreateSolidBrush(GetSysColor(COLOR_3DHILIGHT));

  08a62	8b f4		 mov	 esi, esp
  08a64	6a 14		 push	 20			; 00000014H
  08a66	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  08a6c	3b f4		 cmp	 esi, esp
  08a6e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08a73	8b f4		 mov	 esi, esp
  08a75	50		 push	 eax
  08a76	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  08a7c	3b f4		 cmp	 esi, esp
  08a7e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08a83	89 45 a0	 mov	 DWORD PTR _hb$189530[ebp], eax

; 2287 : 				HBRUSH oldBrush = (HBRUSH)SelectObject(hdcDest, hb);

  08a86	8b f4		 mov	 esi, esp
  08a88	8b 4d a0	 mov	 ecx, DWORD PTR _hb$189530[ebp]
  08a8b	51		 push	 ecx
  08a8c	8b 55 08	 mov	 edx, DWORD PTR _hdcDest$[ebp]
  08a8f	52		 push	 edx
  08a90	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  08a96	3b f4		 cmp	 esi, esp
  08a98	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08a9d	89 45 9c	 mov	 DWORD PTR _oldBrush$189531[ebp], eax

; 2288 : 				BitBlt(hdcDest,nXDest+1,nYDest+1,nWidth,nHeight,bwDC,0,0,0xB8074A);

  08aa0	8b f4		 mov	 esi, esp
  08aa2	68 4a 07 b8 00	 push	 12060490		; 00b8074aH
  08aa7	6a 00		 push	 0
  08aa9	6a 00		 push	 0
  08aab	8b 45 f4	 mov	 eax, DWORD PTR _bwDC$189505[ebp]
  08aae	50		 push	 eax
  08aaf	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  08ab2	51		 push	 ecx
  08ab3	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  08ab6	52		 push	 edx
  08ab7	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  08aba	83 c0 01	 add	 eax, 1
  08abd	50		 push	 eax
  08abe	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  08ac1	83 c1 01	 add	 ecx, 1
  08ac4	51		 push	 ecx
  08ac5	8b 55 08	 mov	 edx, DWORD PTR _hdcDest$[ebp]
  08ac8	52		 push	 edx
  08ac9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
  08acf	3b f4		 cmp	 esi, esp
  08ad1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2289 : 				
; 2290 : 				// BitBlt the black bits in the monochrome bitmap into COLOR_3DSHADOW
; 2291 : 				// bits in the destination DC
; 2292 : 				hb = CreateSolidBrush(GetSysColor(COLOR_3DSHADOW));

  08ad6	8b f4		 mov	 esi, esp
  08ad8	6a 10		 push	 16			; 00000010H
  08ada	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  08ae0	3b f4		 cmp	 esi, esp
  08ae2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08ae7	8b f4		 mov	 esi, esp
  08ae9	50		 push	 eax
  08aea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  08af0	3b f4		 cmp	 esi, esp
  08af2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08af7	89 45 a0	 mov	 DWORD PTR _hb$189530[ebp], eax

; 2293 : 				DeleteObject(SelectObject(hdcDest, hb));

  08afa	8b f4		 mov	 esi, esp
  08afc	8b 45 a0	 mov	 eax, DWORD PTR _hb$189530[ebp]
  08aff	50		 push	 eax
  08b00	8b 4d 08	 mov	 ecx, DWORD PTR _hdcDest$[ebp]
  08b03	51		 push	 ecx
  08b04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  08b0a	3b f4		 cmp	 esi, esp
  08b0c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08b11	8b f4		 mov	 esi, esp
  08b13	50		 push	 eax
  08b14	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  08b1a	3b f4		 cmp	 esi, esp
  08b1c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2294 : 				BitBlt(hdcDest, nXDest, nYDest, nWidth, nHeight,bwDC,0,0,0xB8074A);

  08b21	8b f4		 mov	 esi, esp
  08b23	68 4a 07 b8 00	 push	 12060490		; 00b8074aH
  08b28	6a 00		 push	 0
  08b2a	6a 00		 push	 0
  08b2c	8b 55 f4	 mov	 edx, DWORD PTR _bwDC$189505[ebp]
  08b2f	52		 push	 edx
  08b30	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  08b33	50		 push	 eax
  08b34	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  08b37	51		 push	 ecx
  08b38	8b 55 10	 mov	 edx, DWORD PTR _nYDest$[ebp]
  08b3b	52		 push	 edx
  08b3c	8b 45 0c	 mov	 eax, DWORD PTR _nXDest$[ebp]
  08b3f	50		 push	 eax
  08b40	8b 4d 08	 mov	 ecx, DWORD PTR _hdcDest$[ebp]
  08b43	51		 push	 ecx
  08b44	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
  08b4a	3b f4		 cmp	 esi, esp
  08b4c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2295 : 				DeleteObject(SelectObject(hdcDest, oldBrush));

  08b51	8b f4		 mov	 esi, esp
  08b53	8b 55 9c	 mov	 edx, DWORD PTR _oldBrush$189531[ebp]
  08b56	52		 push	 edx
  08b57	8b 45 08	 mov	 eax, DWORD PTR _hdcDest$[ebp]
  08b5a	50		 push	 eax
  08b5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  08b61	3b f4		 cmp	 esi, esp
  08b63	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08b68	8b f4		 mov	 esi, esp
  08b6a	50		 push	 eax
  08b6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  08b71	3b f4		 cmp	 esi, esp
  08b73	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2296 : 				VERIFY(DeleteObject(SelectObject(bwDC, olddib)));

  08b78	8b f4		 mov	 esi, esp
  08b7a	8b 4d a8	 mov	 ecx, DWORD PTR _olddib$189524[ebp]
  08b7d	51		 push	 ecx
  08b7e	8b 55 f4	 mov	 edx, DWORD PTR _bwDC$189505[ebp]
  08b81	52		 push	 edx
  08b82	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  08b88	3b f4		 cmp	 esi, esp
  08b8a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08b8f	8b f4		 mov	 esi, esp
  08b91	50		 push	 eax
  08b92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  08b98	3b f4		 cmp	 esi, esp
  08b9a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08b9f	85 c0		 test	 eax, eax
  08ba1	75 14		 jne	 SHORT $L192746
  08ba3	68 f8 08 00 00	 push	 2296			; 000008f8H
  08ba8	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  08bad	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  08bb2	85 c0		 test	 eax, eax
  08bb4	74 01		 je	 SHORT $L192746
  08bb6	cc		 int	 3
$L192746:

; 2297 : 				SelectObject(hDC, hdcolddib);

  08bb7	8b f4		 mov	 esi, esp
  08bb9	8b 4d a4	 mov	 ecx, DWORD PTR _hdcolddib$189526[ebp]
  08bbc	51		 push	 ecx
  08bbd	8b 55 f8	 mov	 edx, DWORD PTR _hDC$[ebp]
  08bc0	52		 push	 edx
  08bc1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  08bc7	3b f4		 cmp	 esi, esp
  08bc9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L189523:

; 2298 : 			}
; 2299 : 			
; 2300 : 			VERIFY(DeleteDC(bwDC));

  08bce	8b f4		 mov	 esi, esp
  08bd0	8b 45 f4	 mov	 eax, DWORD PTR _bwDC$189505[ebp]
  08bd3	50		 push	 eax
  08bd4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
  08bda	3b f4		 cmp	 esi, esp
  08bdc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08be1	85 c0		 test	 eax, eax
  08be3	75 14		 jne	 SHORT $L189507
  08be5	68 fc 08 00 00	 push	 2300			; 000008fcH
  08bea	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  08bef	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  08bf4	85 c0		 test	 eax, eax
  08bf6	74 01		 je	 SHORT $L189507
  08bf8	cc		 int	 3
$L189507:

; 2301 : 		}
; 2302 : 		
; 2303 : 		VERIFY(DeleteDC(hDC));

  08bf9	8b f4		 mov	 esi, esp
  08bfb	8b 55 f8	 mov	 edx, DWORD PTR _hDC$[ebp]
  08bfe	52		 push	 edx
  08bff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
  08c05	3b f4		 cmp	 esi, esp
  08c07	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08c0c	85 c0		 test	 eax, eax
  08c0e	75 14		 jne	 SHORT $L189499
  08c10	68 ff 08 00 00	 push	 2303			; 000008ffH
  08c15	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  08c1a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  08c1f	85 c0		 test	 eax, eax
  08c21	74 01		 je	 SHORT $L189499
  08c23	cc		 int	 3
$L189499:

; 2304 : 	}
; 2305 : }

  08c24	52		 push	 edx
  08c25	8b cd		 mov	 ecx, ebp
  08c27	50		 push	 eax
  08c28	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192752
  08c2e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  08c33	58		 pop	 eax
  08c34	5a		 pop	 edx
  08c35	5f		 pop	 edi
  08c36	5e		 pop	 esi
  08c37	83 c4 74	 add	 esp, 116		; 00000074H
  08c3a	3b ec		 cmp	 ebp, esp
  08c3c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08c41	8b e5		 mov	 esp, ebp
  08c43	5d		 pop	 ebp
  08c44	c2 24 00	 ret	 36			; 00000024H
$L192752:
  08c47	02 00 00 00	 DD	 2
  08c4b	00 00 00 00	 DD	 $L192751
$L192751:
  08c4f	c0 ff ff ff	 DD	 -64			; ffffffc0H
  08c53	30 00 00 00	 DD	 48			; 00000030H
  08c57	00 00 00 00	 DD	 $L192749
  08c5b	b4 ff ff ff	 DD	 -76			; ffffffb4H
  08c5f	04 00 00 00	 DD	 4
  08c63	00 00 00 00	 DD	 $L192750
$L192750:
  08c67	70		 DB	 112			; 00000070H
  08c68	62		 DB	 98			; 00000062H
  08c69	69		 DB	 105			; 00000069H
  08c6a	74		 DB	 116			; 00000074H
  08c6b	73		 DB	 115			; 00000073H
  08c6c	42		 DB	 66			; 00000042H
  08c6d	57		 DB	 87			; 00000057H
  08c6e	00		 DB	 0
$L192749:
  08c6f	52		 DB	 82			; 00000052H
  08c70	47		 DB	 71			; 00000047H
  08c71	42		 DB	 66			; 00000042H
  08c72	42		 DB	 66			; 00000042H
  08c73	57		 DB	 87			; 00000057H
  08c74	42		 DB	 66			; 00000042H
  08c75	49		 DB	 73			; 00000049H
  08c76	54		 DB	 84			; 00000054H
  08c77	4d		 DB	 77			; 0000004dH
  08c78	41		 DB	 65			; 00000041H
  08c79	50		 DB	 80			; 00000050H
  08c7a	49		 DB	 73			; 00000049H
  08c7b	4e		 DB	 78			; 0000004eH
  08c7c	46		 DB	 70			; 00000046H
  08c7d	4f		 DB	 79			; 0000004fH
  08c7e	00		 DB	 0
?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ENDP ; BCMenu::DitherBlt
_TEXT	ENDS
PUBLIC	?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z	; BCMenu::GetFadedBitmap
PUBLIC	__real@3fd3333333333333
EXTRN	?GetPixel@CDC@@QBEKHH@Z:NEAR			; CDC::GetPixel
EXTRN	?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z:NEAR	; CBitmap::GetBitmap
xdata$x	SEGMENT
$T192771 DD	0ffffffffH
	DD	FLAT:$L192754
	DD	00H
	DD	FLAT:$L192755
	DD	01H
	DD	FLAT:$L192756
	DD	02H
	DD	FLAT:$L192757
$T192759 DD	019930520H
	DD	04H
	DD	FLAT:$T192771
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
_j$189554 = -176					; size = 4
_i$189550 = -172					; size = 4
_rect$ = -164						; size = 16
_pddcOldBmp2$ = -144					; size = 4
_bmp2$ = -136						; size = 8
_brush$ = -120						; size = 8
_ddc2$ = -104						; size = 16
_pddcOldBmp$ = -84					; size = 4
_BitMap$ = -76						; size = 24
_col$ = -48						; size = 4
_bgcol$ = -44						; size = 4
_ddc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z PROC NEAR	; BCMenu::GetFadedBitmap
; _this$ = ecx

; 2308 : {

  08c80	55		 push	 ebp
  08c81	8b ec		 mov	 ebp, esp
  08c83	6a ff		 push	 -1
  08c85	68 00 00 00 00	 push	 __ehhandler$?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z
  08c8a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08c90	50		 push	 eax
  08c91	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08c98	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  08c9e	56		 push	 esi
  08c9f	57		 push	 edi
  08ca0	51		 push	 ecx
  08ca1	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  08ca7	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  08cac	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  08cb1	f3 ab		 rep stosd
  08cb3	59		 pop	 ecx
  08cb4	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2309 : 	CDC ddc;

  08cb7	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08cba	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  08cbf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2310 : 	COLORREF bgcol,col;
; 2311 : 	BITMAP BitMap;
; 2312 : 
; 2313 : 	bmp.GetBitmap(&BitMap);

  08cc6	8d 45 b4	 lea	 eax, DWORD PTR _BitMap$[ebp]
  08cc9	50		 push	 eax
  08cca	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  08ccd	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2314 : 	ddc.CreateCompatibleDC(NULL);

  08cd2	6a 00		 push	 0
  08cd4	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08cd7	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2315 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  08cdc	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  08cdf	51		 push	 ecx
  08ce0	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08ce3	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  08ce8	89 45 ac	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2316 : 
; 2317 : 	// use this to get the background color, takes into account color shifting
; 2318 : 	CDC ddc2;

  08ceb	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08cee	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  08cf3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2319 : 	CBrush brush;

  08cf7	8d 4d 88	 lea	 ecx, DWORD PTR _brush$[ebp]
  08cfa	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  08cff	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2320 : 	CBitmap bmp2;

  08d03	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  08d09	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  08d0e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2321 : 	ddc2.CreateCompatibleDC(NULL);

  08d12	6a 00		 push	 0
  08d14	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08d17	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2322 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  08d1c	8b 55 bc	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  08d1f	52		 push	 edx
  08d20	8b 45 b8	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  08d23	50		 push	 eax
  08d24	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08d27	51		 push	 ecx
  08d28	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  08d2e	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2323 : 	col=GetSysColor(COLOR_3DFACE);

  08d33	8b f4		 mov	 esi, esp
  08d35	6a 0f		 push	 15			; 0000000fH
  08d37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  08d3d	3b f4		 cmp	 esi, esp
  08d3f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08d44	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2324 : 	brush.CreateSolidBrush(col);

  08d47	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  08d4a	52		 push	 edx
  08d4b	8d 4d 88	 lea	 ecx, DWORD PTR _brush$[ebp]
  08d4e	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2325 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  08d53	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _bmp2$[ebp]
  08d59	50		 push	 eax
  08d5a	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08d5d	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  08d62	89 85 70 ff ff
	ff		 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2326 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  08d68	8b 4d bc	 mov	 ecx, DWORD PTR _BitMap$[ebp+8]
  08d6b	51		 push	 ecx
  08d6c	8b 55 b8	 mov	 edx, DWORD PTR _BitMap$[ebp+4]
  08d6f	52		 push	 edx
  08d70	6a 00		 push	 0
  08d72	6a 00		 push	 0
  08d74	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  08d7a	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2327 : 	ddc2.FillRect(rect,&brush);

  08d7f	8d 45 88	 lea	 eax, DWORD PTR _brush$[ebp]
  08d82	50		 push	 eax
  08d83	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  08d89	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  08d8e	50		 push	 eax
  08d8f	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08d92	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2328 : 	bgcol=ddc2.GetPixel(1,1);

  08d97	6a 01		 push	 1
  08d99	6a 01		 push	 1
  08d9b	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08d9e	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  08da3	89 45 d4	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2329 : 	brush.DeleteObject();

  08da6	8d 4d 88	 lea	 ecx, DWORD PTR _brush$[ebp]
  08da9	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2330 : 	ddc2.SelectObject(pddcOldBmp2);

  08dae	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _pddcOldBmp2$[ebp]
  08db4	51		 push	 ecx
  08db5	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08db8	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2331 : 
; 2332 : 	for(int i=0;i<BitMap.bmWidth;++i){

  08dbd	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$189550[ebp], 0
  08dc7	eb 0f		 jmp	 SHORT $L189551
$L189552:
  08dc9	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _i$189550[ebp]
  08dcf	83 c2 01	 add	 edx, 1
  08dd2	89 95 54 ff ff
	ff		 mov	 DWORD PTR _i$189550[ebp], edx
$L189551:
  08dd8	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$189550[ebp]
  08dde	3b 45 b8	 cmp	 eax, DWORD PTR _BitMap$[ebp+4]
  08de1	7d 7d		 jge	 SHORT $L189553

; 2333 : 		for(int j=0;j<BitMap.bmHeight;++j){

  08de3	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$189554[ebp], 0
  08ded	eb 0f		 jmp	 SHORT $L189555
$L189556:
  08def	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _j$189554[ebp]
  08df5	83 c1 01	 add	 ecx, 1
  08df8	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _j$189554[ebp], ecx
$L189555:
  08dfe	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _j$189554[ebp]
  08e04	3b 55 bc	 cmp	 edx, DWORD PTR _BitMap$[ebp+8]
  08e07	7d 52		 jge	 SHORT $L189557

; 2334 : 			col=ddc.GetPixel(i,j);

  08e09	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _j$189554[ebp]
  08e0f	50		 push	 eax
  08e10	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189550[ebp]
  08e16	51		 push	 ecx
  08e17	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08e1a	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  08e1f	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2335 : 			if(col!=bgcol)ddc.SetPixel(i,j,LightenColor(col,0.3));

  08e22	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  08e25	3b 55 d4	 cmp	 edx, DWORD PTR _bgcol$[ebp]
  08e28	74 2f		 je	 SHORT $L189558
  08e2a	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd3333333333333
  08e30	83 ec 08	 sub	 esp, 8
  08e33	dd 1c 24	 fstp	 QWORD PTR [esp]
  08e36	8b 45 d0	 mov	 eax, DWORD PTR _col$[ebp]
  08e39	50		 push	 eax
  08e3a	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  08e3f	83 c4 0c	 add	 esp, 12			; 0000000cH
  08e42	50		 push	 eax
  08e43	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _j$189554[ebp]
  08e49	51		 push	 ecx
  08e4a	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _i$189550[ebp]
  08e50	52		 push	 edx
  08e51	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08e54	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L189558:

; 2336 : 		}

  08e59	eb 94		 jmp	 SHORT $L189556
$L189557:

; 2337 : 	}

  08e5b	e9 69 ff ff ff	 jmp	 $L189552
$L189553:

; 2338 : 	ddc.SelectObject(pddcOldBmp);

  08e60	8b 45 ac	 mov	 eax, DWORD PTR _pddcOldBmp$[ebp]
  08e63	50		 push	 eax
  08e64	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08e67	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2339 : }

  08e6c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  08e70	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  08e76	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  08e7b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  08e7f	8d 4d 88	 lea	 ecx, DWORD PTR _brush$[ebp]
  08e82	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  08e87	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  08e8b	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08e8e	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  08e93	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  08e9a	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08e9d	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  08ea2	52		 push	 edx
  08ea3	8b cd		 mov	 ecx, ebp
  08ea5	50		 push	 eax
  08ea6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192770
  08eac	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  08eb1	58		 pop	 eax
  08eb2	5a		 pop	 edx
  08eb3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  08eb6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  08ebd	5f		 pop	 edi
  08ebe	5e		 pop	 esi
  08ebf	81 c4 b0 00 00
	00		 add	 esp, 176		; 000000b0H
  08ec5	3b ec		 cmp	 ebp, esp
  08ec7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  08ecc	8b e5		 mov	 esp, ebp
  08ece	5d		 pop	 ebp
  08ecf	c2 04 00	 ret	 4
$L192770:
  08ed2	06 00 00 00	 DD	 6
  08ed6	00 00 00 00	 DD	 $L192769
$L192769:
  08eda	dc ff ff ff	 DD	 -36			; ffffffdcH
  08ede	10 00 00 00	 DD	 16			; 00000010H
  08ee2	00 00 00 00	 DD	 $L192762
  08ee6	b4 ff ff ff	 DD	 -76			; ffffffb4H
  08eea	18 00 00 00	 DD	 24			; 00000018H
  08eee	00 00 00 00	 DD	 $L192763
  08ef2	98 ff ff ff	 DD	 -104			; ffffff98H
  08ef6	10 00 00 00	 DD	 16			; 00000010H
  08efa	00 00 00 00	 DD	 $L192764
  08efe	88 ff ff ff	 DD	 -120			; ffffff88H
  08f02	08 00 00 00	 DD	 8
  08f06	00 00 00 00	 DD	 $L192765
  08f0a	78 ff ff ff	 DD	 -136			; ffffff78H
  08f0e	08 00 00 00	 DD	 8
  08f12	00 00 00 00	 DD	 $L192766
  08f16	5c ff ff ff	 DD	 -164			; ffffff5cH
  08f1a	10 00 00 00	 DD	 16			; 00000010H
  08f1e	00 00 00 00	 DD	 $L192767
$L192767:
  08f22	72		 DB	 114			; 00000072H
  08f23	65		 DB	 101			; 00000065H
  08f24	63		 DB	 99			; 00000063H
  08f25	74		 DB	 116			; 00000074H
  08f26	00		 DB	 0
$L192766:
  08f27	62		 DB	 98			; 00000062H
  08f28	6d		 DB	 109			; 0000006dH
  08f29	70		 DB	 112			; 00000070H
  08f2a	32		 DB	 50			; 00000032H
  08f2b	00		 DB	 0
$L192765:
  08f2c	62		 DB	 98			; 00000062H
  08f2d	72		 DB	 114			; 00000072H
  08f2e	75		 DB	 117			; 00000075H
  08f2f	73		 DB	 115			; 00000073H
  08f30	68		 DB	 104			; 00000068H
  08f31	00		 DB	 0
$L192764:
  08f32	64		 DB	 100			; 00000064H
  08f33	64		 DB	 100			; 00000064H
  08f34	63		 DB	 99			; 00000063H
  08f35	32		 DB	 50			; 00000032H
  08f36	00		 DB	 0
$L192763:
  08f37	42		 DB	 66			; 00000042H
  08f38	69		 DB	 105			; 00000069H
  08f39	74		 DB	 116			; 00000074H
  08f3a	4d		 DB	 77			; 0000004dH
  08f3b	61		 DB	 97			; 00000061H
  08f3c	70		 DB	 112			; 00000070H
  08f3d	00		 DB	 0
$L192762:
  08f3e	64		 DB	 100			; 00000064H
  08f3f	64		 DB	 100			; 00000064H
  08f40	63		 DB	 99			; 00000063H
  08f41	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192754:
  00630	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  00633	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192755:
  00638	8d 4d 98	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0063b	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192756:
  00640	8d 4d 88	 lea	 ecx, DWORD PTR _brush$[ebp]
  00643	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192757:
  00648	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  0064e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z:
  00653	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192759
  00658	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ENDP		; BCMenu::GetFadedBitmap
PUBLIC	?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetTransparentBitmap
xdata$x	SEGMENT
$T192788 DD	0ffffffffH
	DD	FLAT:$L192773
	DD	00H
	DD	FLAT:$L192774
	DD	01H
	DD	FLAT:$L192775
	DD	02H
	DD	FLAT:$L192776
$T192778 DD	019930520H
	DD	04H
	DD	FLAT:$T192788
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_j$189584 = -180					; size = 4
_i$189580 = -176					; size = 4
_rect$ = -168						; size = 16
_pddcOldBmp2$ = -148					; size = 4
_bmp2$ = -140						; size = 8
_brush$ = -124						; size = 8
_ddc2$ = -108						; size = 16
_pddcOldBmp$ = -88					; size = 4
_BitMap$ = -80						; size = 24
_newcol$ = -52						; size = 4
_col$ = -48						; size = 4
_bgcol$ = -44						; size = 4
_ddc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z PROC NEAR ; BCMenu::GetTransparentBitmap
; _this$ = ecx

; 2342 : {

  08f50	55		 push	 ebp
  08f51	8b ec		 mov	 ebp, esp
  08f53	6a ff		 push	 -1
  08f55	68 00 00 00 00	 push	 __ehhandler$?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z
  08f5a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08f60	50		 push	 eax
  08f61	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08f68	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  08f6e	56		 push	 esi
  08f6f	57		 push	 edi
  08f70	51		 push	 ecx
  08f71	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-180]
  08f77	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  08f7c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  08f81	f3 ab		 rep stosd
  08f83	59		 pop	 ecx
  08f84	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2343 : 	CDC ddc;

  08f87	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08f8a	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  08f8f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2344 : 	COLORREF bgcol,col,newcol;
; 2345 : 	BITMAP BitMap;
; 2346 : 
; 2347 : 	bmp.GetBitmap(&BitMap);

  08f96	8d 45 b0	 lea	 eax, DWORD PTR _BitMap$[ebp]
  08f99	50		 push	 eax
  08f9a	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  08f9d	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2348 : 	ddc.CreateCompatibleDC(NULL);

  08fa2	6a 00		 push	 0
  08fa4	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08fa7	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2349 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  08fac	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  08faf	51		 push	 ecx
  08fb0	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08fb3	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  08fb8	89 45 a8	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2350 : 
; 2351 : 	// use this to get the background color, takes into account color shifting
; 2352 : 	CDC ddc2;

  08fbb	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08fbe	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  08fc3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2353 : 	CBrush brush;

  08fc7	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  08fca	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  08fcf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2354 : 	CBitmap bmp2;

  08fd3	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  08fd9	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  08fde	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2355 : 	ddc2.CreateCompatibleDC(NULL);

  08fe2	6a 00		 push	 0
  08fe4	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  08fe7	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2356 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  08fec	8b 55 b8	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  08fef	52		 push	 edx
  08ff0	8b 45 b4	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  08ff3	50		 push	 eax
  08ff4	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08ff7	51		 push	 ecx
  08ff8	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  08ffe	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2357 : 	col=RGB(192,192,192);

  09003	c7 45 d0 c0 c0
	c0 00		 mov	 DWORD PTR _col$[ebp], 12632256 ; 00c0c0c0H

; 2358 : 	brush.CreateSolidBrush(col);

  0900a	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  0900d	52		 push	 edx
  0900e	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  09011	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2359 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  09016	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _bmp2$[ebp]
  0901c	50		 push	 eax
  0901d	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09020	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  09025	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2360 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  0902b	8b 4d b8	 mov	 ecx, DWORD PTR _BitMap$[ebp+8]
  0902e	51		 push	 ecx
  0902f	8b 55 b4	 mov	 edx, DWORD PTR _BitMap$[ebp+4]
  09032	52		 push	 edx
  09033	6a 00		 push	 0
  09035	6a 00		 push	 0
  09037	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  0903d	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2361 : 	ddc2.FillRect(rect,&brush);

  09042	8d 45 84	 lea	 eax, DWORD PTR _brush$[ebp]
  09045	50		 push	 eax
  09046	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  0904c	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  09051	50		 push	 eax
  09052	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09055	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2362 : 	bgcol=ddc2.GetPixel(1,1);

  0905a	6a 01		 push	 1
  0905c	6a 01		 push	 1
  0905e	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09061	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  09066	89 45 d4	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2363 : 	brush.DeleteObject();

  09069	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  0906c	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2364 : 	ddc2.SelectObject(pddcOldBmp2);

  09071	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _pddcOldBmp2$[ebp]
  09077	51		 push	 ecx
  09078	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0907b	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2365 : 	newcol=GetSysColor(COLOR_3DFACE);

  09080	8b f4		 mov	 esi, esp
  09082	6a 0f		 push	 15			; 0000000fH
  09084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0908a	3b f4		 cmp	 esi, esp
  0908c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09091	89 45 cc	 mov	 DWORD PTR _newcol$[ebp], eax

; 2366 : 
; 2367 : 	for(int i=0;i<BitMap.bmWidth;++i){

  09094	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$189580[ebp], 0
  0909e	eb 0f		 jmp	 SHORT $L189581
$L189582:
  090a0	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _i$189580[ebp]
  090a6	83 c2 01	 add	 edx, 1
  090a9	89 95 50 ff ff
	ff		 mov	 DWORD PTR _i$189580[ebp], edx
$L189581:
  090af	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _i$189580[ebp]
  090b5	3b 45 b4	 cmp	 eax, DWORD PTR _BitMap$[ebp+4]
  090b8	7d 65		 jge	 SHORT $L189583

; 2368 : 		for(int j=0;j<BitMap.bmHeight;++j){

  090ba	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$189584[ebp], 0
  090c4	eb 0f		 jmp	 SHORT $L189585
$L189586:
  090c6	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _j$189584[ebp]
  090cc	83 c1 01	 add	 ecx, 1
  090cf	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _j$189584[ebp], ecx
$L189585:
  090d5	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _j$189584[ebp]
  090db	3b 55 b8	 cmp	 edx, DWORD PTR _BitMap$[ebp+8]
  090de	7d 3d		 jge	 SHORT $L189587

; 2369 : 			col=ddc.GetPixel(i,j);

  090e0	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _j$189584[ebp]
  090e6	50		 push	 eax
  090e7	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189580[ebp]
  090ed	51		 push	 ecx
  090ee	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  090f1	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  090f6	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2370 : 			if(col==bgcol)ddc.SetPixel(i,j,newcol);

  090f9	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  090fc	3b 55 d4	 cmp	 edx, DWORD PTR _bgcol$[ebp]
  090ff	75 1a		 jne	 SHORT $L189588
  09101	8b 45 cc	 mov	 eax, DWORD PTR _newcol$[ebp]
  09104	50		 push	 eax
  09105	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _j$189584[ebp]
  0910b	51		 push	 ecx
  0910c	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _i$189580[ebp]
  09112	52		 push	 edx
  09113	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09116	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L189588:

; 2371 : 		}

  0911b	eb a9		 jmp	 SHORT $L189586
$L189587:

; 2372 : 	}

  0911d	eb 81		 jmp	 SHORT $L189582
$L189583:

; 2373 : 	ddc.SelectObject(pddcOldBmp);

  0911f	8b 45 a8	 mov	 eax, DWORD PTR _pddcOldBmp$[ebp]
  09122	50		 push	 eax
  09123	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09126	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2374 : }

  0912b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0912f	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  09135	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0913a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0913e	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  09141	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  09146	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0914a	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0914d	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  09152	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09159	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0915c	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  09161	52		 push	 edx
  09162	8b cd		 mov	 ecx, ebp
  09164	50		 push	 eax
  09165	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192787
  0916b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  09170	58		 pop	 eax
  09171	5a		 pop	 edx
  09172	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  09175	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0917c	5f		 pop	 edi
  0917d	5e		 pop	 esi
  0917e	81 c4 b4 00 00
	00		 add	 esp, 180		; 000000b4H
  09184	3b ec		 cmp	 ebp, esp
  09186	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0918b	8b e5		 mov	 esp, ebp
  0918d	5d		 pop	 ebp
  0918e	c2 04 00	 ret	 4
$L192787:
  09191	06 00 00 00	 DD	 6
  09195	00 00 00 00	 DD	 $L192786
$L192786:
  09199	dc ff ff ff	 DD	 -36			; ffffffdcH
  0919d	10 00 00 00	 DD	 16			; 00000010H
  091a1	00 00 00 00	 DD	 $L192779
  091a5	b0 ff ff ff	 DD	 -80			; ffffffb0H
  091a9	18 00 00 00	 DD	 24			; 00000018H
  091ad	00 00 00 00	 DD	 $L192780
  091b1	94 ff ff ff	 DD	 -108			; ffffff94H
  091b5	10 00 00 00	 DD	 16			; 00000010H
  091b9	00 00 00 00	 DD	 $L192781
  091bd	84 ff ff ff	 DD	 -124			; ffffff84H
  091c1	08 00 00 00	 DD	 8
  091c5	00 00 00 00	 DD	 $L192782
  091c9	74 ff ff ff	 DD	 -140			; ffffff74H
  091cd	08 00 00 00	 DD	 8
  091d1	00 00 00 00	 DD	 $L192783
  091d5	58 ff ff ff	 DD	 -168			; ffffff58H
  091d9	10 00 00 00	 DD	 16			; 00000010H
  091dd	00 00 00 00	 DD	 $L192784
$L192784:
  091e1	72		 DB	 114			; 00000072H
  091e2	65		 DB	 101			; 00000065H
  091e3	63		 DB	 99			; 00000063H
  091e4	74		 DB	 116			; 00000074H
  091e5	00		 DB	 0
$L192783:
  091e6	62		 DB	 98			; 00000062H
  091e7	6d		 DB	 109			; 0000006dH
  091e8	70		 DB	 112			; 00000070H
  091e9	32		 DB	 50			; 00000032H
  091ea	00		 DB	 0
$L192782:
  091eb	62		 DB	 98			; 00000062H
  091ec	72		 DB	 114			; 00000072H
  091ed	75		 DB	 117			; 00000075H
  091ee	73		 DB	 115			; 00000073H
  091ef	68		 DB	 104			; 00000068H
  091f0	00		 DB	 0
$L192781:
  091f1	64		 DB	 100			; 00000064H
  091f2	64		 DB	 100			; 00000064H
  091f3	63		 DB	 99			; 00000063H
  091f4	32		 DB	 50			; 00000032H
  091f5	00		 DB	 0
$L192780:
  091f6	42		 DB	 66			; 00000042H
  091f7	69		 DB	 105			; 00000069H
  091f8	74		 DB	 116			; 00000074H
  091f9	4d		 DB	 77			; 0000004dH
  091fa	61		 DB	 97			; 00000061H
  091fb	70		 DB	 112			; 00000070H
  091fc	00		 DB	 0
$L192779:
  091fd	64		 DB	 100			; 00000064H
  091fe	64		 DB	 100			; 00000064H
  091ff	63		 DB	 99			; 00000063H
  09200	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192773:
  0065d	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  00660	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192774:
  00665	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  00668	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192775:
  0066d	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  00670	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192776:
  00675	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  0067b	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z:
  00680	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192778
  00685	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ENDP	; BCMenu::GetTransparentBitmap
PUBLIC	?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z	; BCMenu::GetDisabledBitmap
PUBLIC	__real@406fe00000000000
xdata$x	SEGMENT
$T192807 DD	0ffffffffH
	DD	FLAT:$L192790
	DD	00H
	DD	FLAT:$L192791
	DD	01H
	DD	FLAT:$L192792
	DD	02H
	DD	FLAT:$L192793
$T192795 DD	019930520H
	DD	04H
	DD	FLAT:$T192807
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
_factor$189622 = -196					; size = 8
_avgcol$189621 = -188					; size = 4
_b$189619 = -183					; size = 1
_g$189616 = -182					; size = 1
_r$189614 = -181					; size = 1
_j$189609 = -180					; size = 4
_i$189605 = -176					; size = 4
_rect$ = -168						; size = 16
_pddcOldBmp2$ = -148					; size = 4
_bmp2$ = -140						; size = 8
_brush$ = -124						; size = 8
_ddc2$ = -108						; size = 16
_pddcOldBmp$ = -88					; size = 4
_BitMap$ = -80						; size = 24
_discol$ = -52						; size = 4
_col$ = -48						; size = 4
_bgcol$ = -44						; size = 4
_ddc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
_background$ = 12					; size = 4
?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z PROC NEAR ; BCMenu::GetDisabledBitmap
; _this$ = ecx

; 2377 : {

  09210	55		 push	 ebp
  09211	8b ec		 mov	 ebp, esp
  09213	6a ff		 push	 -1
  09215	68 00 00 00 00	 push	 __ehhandler$?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z
  0921a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09220	50		 push	 eax
  09221	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09228	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  0922e	56		 push	 esi
  0922f	57		 push	 edi
  09230	51		 push	 ecx
  09231	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  09237	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0923c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  09241	f3 ab		 rep stosd
  09243	59		 pop	 ecx
  09244	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2378 : 	CDC ddc;

  09247	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0924a	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0924f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2379 : 	COLORREF bgcol,col,discol;
; 2380 : 	BITMAP BitMap;
; 2381 : 
; 2382 : 	bmp.GetBitmap(&BitMap);

  09256	8d 45 b0	 lea	 eax, DWORD PTR _BitMap$[ebp]
  09259	50		 push	 eax
  0925a	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0925d	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2383 : 	ddc.CreateCompatibleDC(NULL);

  09262	6a 00		 push	 0
  09264	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09267	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2384 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  0926c	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0926f	51		 push	 ecx
  09270	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09273	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  09278	89 45 a8	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2385 : 
; 2386 : 	// use this to get the background color, takes into account color shifting
; 2387 : 	CDC ddc2;

  0927b	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0927e	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  09283	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2388 : 	CBrush brush;

  09287	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  0928a	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0928f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2389 : 	CBitmap bmp2;

  09293	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  09299	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0929e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2390 : 	ddc2.CreateCompatibleDC(NULL);

  092a2	6a 00		 push	 0
  092a4	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  092a7	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2391 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  092ac	8b 55 b8	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  092af	52		 push	 edx
  092b0	8b 45 b4	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  092b3	50		 push	 eax
  092b4	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  092b7	51		 push	 ecx
  092b8	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  092be	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2392 : 	col=GetSysColor(COLOR_3DFACE);

  092c3	8b f4		 mov	 esi, esp
  092c5	6a 0f		 push	 15			; 0000000fH
  092c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  092cd	3b f4		 cmp	 esi, esp
  092cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  092d4	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2393 : 	brush.CreateSolidBrush(col);

  092d7	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  092da	52		 push	 edx
  092db	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  092de	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2394 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  092e3	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _bmp2$[ebp]
  092e9	50		 push	 eax
  092ea	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  092ed	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  092f2	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2395 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  092f8	8b 4d b8	 mov	 ecx, DWORD PTR _BitMap$[ebp+8]
  092fb	51		 push	 ecx
  092fc	8b 55 b4	 mov	 edx, DWORD PTR _BitMap$[ebp+4]
  092ff	52		 push	 edx
  09300	6a 00		 push	 0
  09302	6a 00		 push	 0
  09304	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  0930a	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2396 : 	ddc2.FillRect(rect,&brush);

  0930f	8d 45 84	 lea	 eax, DWORD PTR _brush$[ebp]
  09312	50		 push	 eax
  09313	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  09319	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0931e	50		 push	 eax
  0931f	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09322	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2397 : 	bgcol=ddc2.GetPixel(1,1);

  09327	6a 01		 push	 1
  09329	6a 01		 push	 1
  0932b	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0932e	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  09333	89 45 d4	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2398 : 	brush.DeleteObject();

  09336	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  09339	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2399 : 	ddc2.SelectObject(pddcOldBmp2);

  0933e	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _pddcOldBmp2$[ebp]
  09344	51		 push	 ecx
  09345	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09348	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2400 : 	discol=GetSysColor(COLOR_BTNSHADOW);

  0934d	8b f4		 mov	 esi, esp
  0934f	6a 10		 push	 16			; 00000010H
  09351	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09357	3b f4		 cmp	 esi, esp
  09359	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0935e	89 45 cc	 mov	 DWORD PTR _discol$[ebp], eax

; 2401 : 
; 2402 : 	for(int i=0;i<BitMap.bmWidth;++i){

  09361	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$189605[ebp], 0
  0936b	eb 0f		 jmp	 SHORT $L189606
$L189607:
  0936d	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _i$189605[ebp]
  09373	83 c2 01	 add	 edx, 1
  09376	89 95 50 ff ff
	ff		 mov	 DWORD PTR _i$189605[ebp], edx
$L189606:
  0937c	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _i$189605[ebp]
  09382	3b 45 b4	 cmp	 eax, DWORD PTR _BitMap$[ebp+4]
  09385	0f 8d ff 00 00
	00		 jge	 $L189608

; 2403 : 		for(int j=0;j<BitMap.bmHeight;++j){

  0938b	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$189609[ebp], 0
  09395	eb 0f		 jmp	 SHORT $L189610
$L189611:
  09397	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _j$189609[ebp]
  0939d	83 c1 01	 add	 ecx, 1
  093a0	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _j$189609[ebp], ecx
$L189610:
  093a6	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _j$189609[ebp]
  093ac	3b 55 b8	 cmp	 edx, DWORD PTR _BitMap$[ebp+8]
  093af	0f 8d d0 00 00
	00		 jge	 $L189612

; 2404 : 			col=ddc.GetPixel(i,j);

  093b5	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _j$189609[ebp]
  093bb	50		 push	 eax
  093bc	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189605[ebp]
  093c2	51		 push	 ecx
  093c3	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  093c6	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  093cb	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2405 : 			if(col!=bgcol){

  093ce	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  093d1	3b 55 d4	 cmp	 edx, DWORD PTR _bgcol$[ebp]
  093d4	0f 84 86 00 00
	00		 je	 $L189613

; 2406 : 				BYTE r = GetRValue(col);

  093da	8a 45 d0	 mov	 al, BYTE PTR _col$[ebp]
  093dd	88 85 4b ff ff
	ff		 mov	 BYTE PTR _r$189614[ebp], al

; 2407 : 				BYTE g = GetGValue(col);

  093e3	0f b7 4d d0	 movzx	 ecx, WORD PTR _col$[ebp]
  093e7	c1 f9 08	 sar	 ecx, 8
  093ea	88 8d 4a ff ff
	ff		 mov	 BYTE PTR _g$189616[ebp], cl

; 2408 : 				BYTE b = GetBValue(col);

  093f0	8b 55 d0	 mov	 edx, DWORD PTR _col$[ebp]
  093f3	c1 ea 10	 shr	 edx, 16			; 00000010H
  093f6	88 95 49 ff ff
	ff		 mov	 BYTE PTR _b$189619[ebp], dl

; 2409 : 				int avgcol = (r+g+b)/3;

  093fc	0f b6 85 4b ff
	ff ff		 movzx	 eax, BYTE PTR _r$189614[ebp]
  09403	0f b6 8d 4a ff
	ff ff		 movzx	 ecx, BYTE PTR _g$189616[ebp]
  0940a	03 c1		 add	 eax, ecx
  0940c	0f b6 95 49 ff
	ff ff		 movzx	 edx, BYTE PTR _b$189619[ebp]
  09413	03 c2		 add	 eax, edx
  09415	99		 cdq
  09416	b9 03 00 00 00	 mov	 ecx, 3
  0941b	f7 f9		 idiv	 ecx
  0941d	89 85 44 ff ff
	ff		 mov	 DWORD PTR _avgcol$189621[ebp], eax

; 2410 : 				double factor = avgcol/255.0;

  09423	db 85 44 ff ff
	ff		 fild	 DWORD PTR _avgcol$189621[ebp]
  09429	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@406fe00000000000
  0942f	dd 95 3c ff ff
	ff		 fst	 QWORD PTR _factor$189622[ebp]

; 2411 : 				ddc.SetPixel(i,j,LightenColor(discol,factor));

  09435	83 ec 08	 sub	 esp, 8
  09438	dd 1c 24	 fstp	 QWORD PTR [esp]
  0943b	8b 55 cc	 mov	 edx, DWORD PTR _discol$[ebp]
  0943e	52		 push	 edx
  0943f	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  09444	83 c4 0c	 add	 esp, 12			; 0000000cH
  09447	50		 push	 eax
  09448	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _j$189609[ebp]
  0944e	50		 push	 eax
  0944f	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189605[ebp]
  09455	51		 push	 ecx
  09456	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09459	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel

; 2412 : 			}
; 2413 : 			else{

  0945e	eb 20		 jmp	 SHORT $L189623
$L189613:

; 2414 : 				if(background)ddc.SetPixel(i,j,background);

  09460	83 7d 0c 00	 cmp	 DWORD PTR _background$[ebp], 0
  09464	74 1a		 je	 SHORT $L189623
  09466	8b 55 0c	 mov	 edx, DWORD PTR _background$[ebp]
  09469	52		 push	 edx
  0946a	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _j$189609[ebp]
  09470	50		 push	 eax
  09471	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189605[ebp]
  09477	51		 push	 ecx
  09478	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0947b	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L189623:

; 2415 : 			}
; 2416 : 		}

  09480	e9 12 ff ff ff	 jmp	 $L189611
$L189612:

; 2417 : 	}

  09485	e9 e3 fe ff ff	 jmp	 $L189607
$L189608:

; 2418 : 	ddc.SelectObject(pddcOldBmp);

  0948a	8b 55 a8	 mov	 edx, DWORD PTR _pddcOldBmp$[ebp]
  0948d	52		 push	 edx
  0948e	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09491	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2419 : }

  09496	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0949a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  094a0	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  094a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  094a9	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  094ac	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  094b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  094b5	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  094b8	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  094bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  094c4	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  094c7	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  094cc	52		 push	 edx
  094cd	8b cd		 mov	 ecx, ebp
  094cf	50		 push	 eax
  094d0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192806
  094d6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  094db	58		 pop	 eax
  094dc	5a		 pop	 edx
  094dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  094e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  094e7	5f		 pop	 edi
  094e8	5e		 pop	 esi
  094e9	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  094ef	3b ec		 cmp	 ebp, esp
  094f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  094f6	8b e5		 mov	 esp, ebp
  094f8	5d		 pop	 ebp
  094f9	c2 08 00	 ret	 8
$L192806:
  094fc	06 00 00 00	 DD	 6
  09500	00 00 00 00	 DD	 $L192805
$L192805:
  09504	dc ff ff ff	 DD	 -36			; ffffffdcH
  09508	10 00 00 00	 DD	 16			; 00000010H
  0950c	00 00 00 00	 DD	 $L192798
  09510	b0 ff ff ff	 DD	 -80			; ffffffb0H
  09514	18 00 00 00	 DD	 24			; 00000018H
  09518	00 00 00 00	 DD	 $L192799
  0951c	94 ff ff ff	 DD	 -108			; ffffff94H
  09520	10 00 00 00	 DD	 16			; 00000010H
  09524	00 00 00 00	 DD	 $L192800
  09528	84 ff ff ff	 DD	 -124			; ffffff84H
  0952c	08 00 00 00	 DD	 8
  09530	00 00 00 00	 DD	 $L192801
  09534	74 ff ff ff	 DD	 -140			; ffffff74H
  09538	08 00 00 00	 DD	 8
  0953c	00 00 00 00	 DD	 $L192802
  09540	58 ff ff ff	 DD	 -168			; ffffff58H
  09544	10 00 00 00	 DD	 16			; 00000010H
  09548	00 00 00 00	 DD	 $L192803
$L192803:
  0954c	72		 DB	 114			; 00000072H
  0954d	65		 DB	 101			; 00000065H
  0954e	63		 DB	 99			; 00000063H
  0954f	74		 DB	 116			; 00000074H
  09550	00		 DB	 0
$L192802:
  09551	62		 DB	 98			; 00000062H
  09552	6d		 DB	 109			; 0000006dH
  09553	70		 DB	 112			; 00000070H
  09554	32		 DB	 50			; 00000032H
  09555	00		 DB	 0
$L192801:
  09556	62		 DB	 98			; 00000062H
  09557	72		 DB	 114			; 00000072H
  09558	75		 DB	 117			; 00000075H
  09559	73		 DB	 115			; 00000073H
  0955a	68		 DB	 104			; 00000068H
  0955b	00		 DB	 0
$L192800:
  0955c	64		 DB	 100			; 00000064H
  0955d	64		 DB	 100			; 00000064H
  0955e	63		 DB	 99			; 00000063H
  0955f	32		 DB	 50			; 00000032H
  09560	00		 DB	 0
$L192799:
  09561	42		 DB	 66			; 00000042H
  09562	69		 DB	 105			; 00000069H
  09563	74		 DB	 116			; 00000074H
  09564	4d		 DB	 77			; 0000004dH
  09565	61		 DB	 97			; 00000061H
  09566	70		 DB	 112			; 00000070H
  09567	00		 DB	 0
$L192798:
  09568	64		 DB	 100			; 00000064H
  09569	64		 DB	 100			; 00000064H
  0956a	63		 DB	 99			; 00000063H
  0956b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192790:
  0068a	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0068d	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192791:
  00692	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  00695	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192792:
  0069a	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  0069d	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192793:
  006a2	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  006a8	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z:
  006ad	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192795
  006b2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ENDP	; BCMenu::GetDisabledBitmap
PUBLIC	?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z	; BCMenu::GetShadowBitmap
PUBLIC	__real@3fdf5c28f5c28f5c
xdata$x	SEGMENT
$T192826 DD	0ffffffffH
	DD	FLAT:$L192809
	DD	00H
	DD	FLAT:$L192810
	DD	01H
	DD	FLAT:$L192811
	DD	02H
	DD	FLAT:$L192812
$T192814 DD	019930520H
	DD	04H
	DD	FLAT:$T192826
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3fdf5c28f5c28f5c
CONST	SEGMENT
__real@3fdf5c28f5c28f5c DQ 03fdf5c28f5c28f5cr	; 0.49
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
_j$189645 = -180					; size = 4
_i$189641 = -176					; size = 4
_rect$ = -168						; size = 16
_pddcOldBmp2$ = -148					; size = 4
_bmp2$ = -140						; size = 8
_brush$ = -124						; size = 8
_ddc2$ = -108						; size = 16
_pddcOldBmp$ = -88					; size = 4
_BitMap$ = -80						; size = 24
_shadowcol$ = -52					; size = 4
_col$ = -48						; size = 4
_bgcol$ = -44						; size = 4
_ddc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z PROC NEAR	; BCMenu::GetShadowBitmap
; _this$ = ecx

; 2422 : {

  09570	55		 push	 ebp
  09571	8b ec		 mov	 ebp, esp
  09573	6a ff		 push	 -1
  09575	68 00 00 00 00	 push	 __ehhandler$?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z
  0957a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09580	50		 push	 eax
  09581	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09588	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0958e	56		 push	 esi
  0958f	57		 push	 edi
  09590	51		 push	 ecx
  09591	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-180]
  09597	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0959c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  095a1	f3 ab		 rep stosd
  095a3	59		 pop	 ecx
  095a4	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2423 : 	CDC ddc;

  095a7	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  095aa	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  095af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2424 : 	COLORREF bgcol,col,shadowcol=GetSysColor(COLOR_BTNSHADOW);

  095b6	8b f4		 mov	 esi, esp
  095b8	6a 10		 push	 16			; 00000010H
  095ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  095c0	3b f4		 cmp	 esi, esp
  095c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  095c7	89 45 cc	 mov	 DWORD PTR _shadowcol$[ebp], eax

; 2425 : 	BITMAP BitMap;
; 2426 : 
; 2427 : 	if(!IsWinXPLuna())shadowcol=LightenColor(shadowcol,0.49);

  095ca	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  095cf	85 c0		 test	 eax, eax
  095d1	75 1b		 jne	 SHORT $L189634
  095d3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fdf5c28f5c28f5c
  095d9	83 ec 08	 sub	 esp, 8
  095dc	dd 1c 24	 fstp	 QWORD PTR [esp]
  095df	8b 45 cc	 mov	 eax, DWORD PTR _shadowcol$[ebp]
  095e2	50		 push	 eax
  095e3	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  095e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  095eb	89 45 cc	 mov	 DWORD PTR _shadowcol$[ebp], eax
$L189634:

; 2428 : 	bmp.GetBitmap(&BitMap);

  095ee	8d 4d b0	 lea	 ecx, DWORD PTR _BitMap$[ebp]
  095f1	51		 push	 ecx
  095f2	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  095f5	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2429 : 	ddc.CreateCompatibleDC(NULL);

  095fa	6a 00		 push	 0
  095fc	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  095ff	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2430 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  09604	8b 55 08	 mov	 edx, DWORD PTR _bmp$[ebp]
  09607	52		 push	 edx
  09608	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0960b	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  09610	89 45 a8	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2431 : 
; 2432 : 	// use this to get the background color, takes into account color shifting
; 2433 : 	CDC ddc2;

  09613	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09616	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0961b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2434 : 	CBrush brush;

  0961f	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  09622	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  09627	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2435 : 	CBitmap bmp2;

  0962b	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  09631	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09636	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2436 : 	ddc2.CreateCompatibleDC(NULL);

  0963a	6a 00		 push	 0
  0963c	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0963f	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2437 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  09644	8b 45 b8	 mov	 eax, DWORD PTR _BitMap$[ebp+8]
  09647	50		 push	 eax
  09648	8b 4d b4	 mov	 ecx, DWORD PTR _BitMap$[ebp+4]
  0964b	51		 push	 ecx
  0964c	8d 55 dc	 lea	 edx, DWORD PTR _ddc$[ebp]
  0964f	52		 push	 edx
  09650	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  09656	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2438 : 	col=GetSysColor(COLOR_3DFACE);

  0965b	8b f4		 mov	 esi, esp
  0965d	6a 0f		 push	 15			; 0000000fH
  0965f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09665	3b f4		 cmp	 esi, esp
  09667	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0966c	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2439 : 	brush.CreateSolidBrush(col);

  0966f	8b 45 d0	 mov	 eax, DWORD PTR _col$[ebp]
  09672	50		 push	 eax
  09673	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  09676	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2440 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  0967b	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  09681	51		 push	 ecx
  09682	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  09685	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  0968a	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2441 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  09690	8b 55 b8	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  09693	52		 push	 edx
  09694	8b 45 b4	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  09697	50		 push	 eax
  09698	6a 00		 push	 0
  0969a	6a 00		 push	 0
  0969c	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  096a2	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2442 : 	ddc2.FillRect(rect,&brush);

  096a7	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  096aa	51		 push	 ecx
  096ab	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _rect$[ebp]
  096b1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  096b6	50		 push	 eax
  096b7	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  096ba	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2443 : 	bgcol=ddc2.GetPixel(1,1);

  096bf	6a 01		 push	 1
  096c1	6a 01		 push	 1
  096c3	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  096c6	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  096cb	89 45 d4	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2444 : 	brush.DeleteObject();

  096ce	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  096d1	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2445 : 	ddc2.SelectObject(pddcOldBmp2);

  096d6	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _pddcOldBmp2$[ebp]
  096dc	52		 push	 edx
  096dd	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  096e0	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2446 : 
; 2447 : 	for(int i=0;i<BitMap.bmWidth;++i){

  096e5	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$189641[ebp], 0
  096ef	eb 0f		 jmp	 SHORT $L189642
$L189643:
  096f1	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _i$189641[ebp]
  096f7	83 c0 01	 add	 eax, 1
  096fa	89 85 50 ff ff
	ff		 mov	 DWORD PTR _i$189641[ebp], eax
$L189642:
  09700	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _i$189641[ebp]
  09706	3b 4d b4	 cmp	 ecx, DWORD PTR _BitMap$[ebp+4]
  09709	7d 65		 jge	 SHORT $L189644

; 2448 : 		for(int j=0;j<BitMap.bmHeight;++j){

  0970b	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$189645[ebp], 0
  09715	eb 0f		 jmp	 SHORT $L189646
$L189647:
  09717	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _j$189645[ebp]
  0971d	83 c2 01	 add	 edx, 1
  09720	89 95 4c ff ff
	ff		 mov	 DWORD PTR _j$189645[ebp], edx
$L189646:
  09726	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _j$189645[ebp]
  0972c	3b 45 b8	 cmp	 eax, DWORD PTR _BitMap$[ebp+8]
  0972f	7d 3d		 jge	 SHORT $L189648

; 2449 : 			col=ddc.GetPixel(i,j);

  09731	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _j$189645[ebp]
  09737	51		 push	 ecx
  09738	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _i$189641[ebp]
  0973e	52		 push	 edx
  0973f	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09742	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  09747	89 45 d0	 mov	 DWORD PTR _col$[ebp], eax

; 2450 : 			if(col!=bgcol)ddc.SetPixel(i,j,shadowcol);

  0974a	8b 45 d0	 mov	 eax, DWORD PTR _col$[ebp]
  0974d	3b 45 d4	 cmp	 eax, DWORD PTR _bgcol$[ebp]
  09750	74 1a		 je	 SHORT $L189649
  09752	8b 4d cc	 mov	 ecx, DWORD PTR _shadowcol$[ebp]
  09755	51		 push	 ecx
  09756	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _j$189645[ebp]
  0975c	52		 push	 edx
  0975d	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _i$189641[ebp]
  09763	50		 push	 eax
  09764	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09767	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L189649:

; 2451 : 		}

  0976c	eb a9		 jmp	 SHORT $L189647
$L189648:

; 2452 : 	}

  0976e	eb 81		 jmp	 SHORT $L189643
$L189644:

; 2453 : 	ddc.SelectObject(pddcOldBmp);

  09770	8b 4d a8	 mov	 ecx, DWORD PTR _pddcOldBmp$[ebp]
  09773	51		 push	 ecx
  09774	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  09777	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2454 : }

  0977c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  09780	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  09786	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0978b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0978f	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  09792	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  09797	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0979b	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0979e	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  097a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  097aa	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  097ad	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  097b2	52		 push	 edx
  097b3	8b cd		 mov	 ecx, ebp
  097b5	50		 push	 eax
  097b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192825
  097bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  097c1	58		 pop	 eax
  097c2	5a		 pop	 edx
  097c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  097c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  097cd	5f		 pop	 edi
  097ce	5e		 pop	 esi
  097cf	81 c4 b4 00 00
	00		 add	 esp, 180		; 000000b4H
  097d5	3b ec		 cmp	 ebp, esp
  097d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  097dc	8b e5		 mov	 esp, ebp
  097de	5d		 pop	 ebp
  097df	c2 04 00	 ret	 4
$L192825:
  097e2	06 00 00 00	 DD	 6
  097e6	00 00 00 00	 DD	 $L192824
$L192824:
  097ea	dc ff ff ff	 DD	 -36			; ffffffdcH
  097ee	10 00 00 00	 DD	 16			; 00000010H
  097f2	00 00 00 00	 DD	 $L192817
  097f6	b0 ff ff ff	 DD	 -80			; ffffffb0H
  097fa	18 00 00 00	 DD	 24			; 00000018H
  097fe	00 00 00 00	 DD	 $L192818
  09802	94 ff ff ff	 DD	 -108			; ffffff94H
  09806	10 00 00 00	 DD	 16			; 00000010H
  0980a	00 00 00 00	 DD	 $L192819
  0980e	84 ff ff ff	 DD	 -124			; ffffff84H
  09812	08 00 00 00	 DD	 8
  09816	00 00 00 00	 DD	 $L192820
  0981a	74 ff ff ff	 DD	 -140			; ffffff74H
  0981e	08 00 00 00	 DD	 8
  09822	00 00 00 00	 DD	 $L192821
  09826	58 ff ff ff	 DD	 -168			; ffffff58H
  0982a	10 00 00 00	 DD	 16			; 00000010H
  0982e	00 00 00 00	 DD	 $L192822
$L192822:
  09832	72		 DB	 114			; 00000072H
  09833	65		 DB	 101			; 00000065H
  09834	63		 DB	 99			; 00000063H
  09835	74		 DB	 116			; 00000074H
  09836	00		 DB	 0
$L192821:
  09837	62		 DB	 98			; 00000062H
  09838	6d		 DB	 109			; 0000006dH
  09839	70		 DB	 112			; 00000070H
  0983a	32		 DB	 50			; 00000032H
  0983b	00		 DB	 0
$L192820:
  0983c	62		 DB	 98			; 00000062H
  0983d	72		 DB	 114			; 00000072H
  0983e	75		 DB	 117			; 00000075H
  0983f	73		 DB	 115			; 00000073H
  09840	68		 DB	 104			; 00000068H
  09841	00		 DB	 0
$L192819:
  09842	64		 DB	 100			; 00000064H
  09843	64		 DB	 100			; 00000064H
  09844	63		 DB	 99			; 00000063H
  09845	32		 DB	 50			; 00000032H
  09846	00		 DB	 0
$L192818:
  09847	42		 DB	 66			; 00000042H
  09848	69		 DB	 105			; 00000069H
  09849	74		 DB	 116			; 00000074H
  0984a	4d		 DB	 77			; 0000004dH
  0984b	61		 DB	 97			; 00000061H
  0984c	70		 DB	 112			; 00000070H
  0984d	00		 DB	 0
$L192817:
  0984e	64		 DB	 100			; 00000064H
  0984f	64		 DB	 100			; 00000064H
  09850	63		 DB	 99			; 00000063H
  09851	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192809:
  006b7	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  006ba	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192810:
  006bf	8d 4d 94	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  006c2	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192811:
  006c7	8d 4d 84	 lea	 ecx, DWORD PTR _brush$[ebp]
  006ca	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192812:
  006cf	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _bmp2$[ebp]
  006d5	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z:
  006da	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192814
  006df	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ENDP	; BCMenu::GetShadowBitmap
PUBLIC	?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z	; BCMenu::LoadSysColorBitmap
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:NEAR		; CGdiObject::Attach
EXTRN	?Detach@CGdiObject@@QAEPAXXZ:NEAR		; CGdiObject::Detach
EXTRN	?LoadBitmapA@CBitmap@@QAEHI@Z:NEAR		; CBitmap::LoadBitmapA
EXTRN	?Add@CImageList@@QAEHPAUHICON__@@@Z:NEAR	; CImageList::Add
xdata$x	SEGMENT
$T192843 DD	0ffffffffH
	DD	FLAT:$L192828
	DD	0ffffffffH
	DD	FLAT:$L192829
	DD	0ffffffffH
	DD	FLAT:$L192830
	DD	02H
	DD	FLAT:$L192831
	DD	03H
	DD	FLAT:$L192832
$T192834 DD	019930520H
	DD	05H
	DD	FLAT:$T192843
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_bmp3$189679 = -108					; size = 8
_bmp2$189678 = -92					; size = 8
_bmp$189677 = -76					; size = 8
_pDC$189676 = -64					; size = 4
_pWnd$189674 = -60					; size = 4
_mybmp$189667 = -52					; size = 8
_bmp$189661 = -36					; size = 8
_hbmp$189659 = -24					; size = 4
_bReturn$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmplist$ = 8						; size = 4
_nResourceID$ = 12					; size = 4
?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z PROC NEAR ; BCMenu::AddBitmapToImageList
; _this$ = ecx

; 2458 : {

  09860	55		 push	 ebp
  09861	8b ec		 mov	 ebp, esp
  09863	6a ff		 push	 -1
  09865	68 00 00 00 00	 push	 __ehhandler$?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z
  0986a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09870	50		 push	 eax
  09871	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09878	83 ec 64	 sub	 esp, 100		; 00000064H
  0987b	56		 push	 esi
  0987c	57		 push	 edi
  0987d	51		 push	 ecx
  0987e	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  09881	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  09886	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0988b	f3 ab		 rep stosd
  0988d	59		 pop	 ecx
  0988e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2459 : 	BOOL bReturn=FALSE;

  09891	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 0

; 2460 : 
; 2461 : 	// O.S.
; 2462 : 	if (m_bDynIcons){

  09898	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0989b	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0989f	74 18		 je	 SHORT $L189656

; 2463 : 		bmplist->Add((HICON)nResourceID);

  098a1	8b 4d 0c	 mov	 ecx, DWORD PTR _nResourceID$[ebp]
  098a4	51		 push	 ecx
  098a5	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  098a8	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAUHICON__@@@Z ; CImageList::Add

; 2464 : 		bReturn=TRUE;

  098ad	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1

; 2465 : 	}
; 2466 : 	else{

  098b4	e9 4b 01 00 00	 jmp	 $L189658
$L189656:

; 2467 : 		HBITMAP hbmp=LoadSysColorBitmap(nResourceID);

  098b9	8b 55 0c	 mov	 edx, DWORD PTR _nResourceID$[ebp]
  098bc	52		 push	 edx
  098bd	e8 00 00 00 00	 call	 ?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z ; BCMenu::LoadSysColorBitmap
  098c2	83 c4 04	 add	 esp, 4
  098c5	89 45 e8	 mov	 DWORD PTR _hbmp$189659[ebp], eax

; 2468 : 		if(hbmp){

  098c8	83 7d e8 00	 cmp	 DWORD PTR _hbmp$189659[ebp], 0
  098cc	0f 84 9c 00 00
	00		 je	 $L189660

; 2469 : 			CBitmap bmp;

  098d2	8d 4d dc	 lea	 ecx, DWORD PTR _bmp$189661[ebp]
  098d5	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  098da	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2470 : 			bmp.Attach(hbmp);

  098e1	8b 45 e8	 mov	 eax, DWORD PTR _hbmp$189659[ebp]
  098e4	50		 push	 eax
  098e5	8d 4d dc	 lea	 ecx, DWORD PTR _bmp$189661[ebp]
  098e8	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 2471 : 			if(m_bitmapBackgroundFlag){

  098ed	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  098f0	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  098f4	74 20		 je	 SHORT $L189662

; 2472 : 				if(bmplist->Add(&bmp,m_bitmapBackground)>=0)bReturn=TRUE;

  098f6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  098f9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  098fc	50		 push	 eax
  098fd	8d 4d dc	 lea	 ecx, DWORD PTR _bmp$189661[ebp]
  09900	51		 push	 ecx
  09901	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  09904	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  09909	85 c0		 test	 eax, eax
  0990b	7c 07		 jl	 SHORT $L189663
  0990d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L189663:

; 2473 : 			}
; 2474 : 			else{

  09914	eb 29		 jmp	 SHORT $L189664
$L189662:

; 2475 : 				if(bmplist->Add(&bmp,GetSysColor(COLOR_3DFACE))>=0)bReturn=TRUE;

  09916	8b f4		 mov	 esi, esp
  09918	6a 0f		 push	 15			; 0000000fH
  0991a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09920	3b f4		 cmp	 esi, esp
  09922	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09927	50		 push	 eax
  09928	8d 55 dc	 lea	 edx, DWORD PTR _bmp$189661[ebp]
  0992b	52		 push	 edx
  0992c	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  0992f	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  09934	85 c0		 test	 eax, eax
  09936	7c 07		 jl	 SHORT $L189664
  09938	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L189664:

; 2476 : 			}
; 2477 : 			bmp.Detach();

  0993f	8d 4d dc	 lea	 ecx, DWORD PTR _bmp$189661[ebp]
  09942	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach

; 2478 : 			DeleteObject(hbmp);

  09947	8b f4		 mov	 esi, esp
  09949	8b 45 e8	 mov	 eax, DWORD PTR _hbmp$189659[ebp]
  0994c	50		 push	 eax
  0994d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  09953	3b f4		 cmp	 esi, esp
  09955	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2479 : 		}

  0995a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09961	8d 4d dc	 lea	 ecx, DWORD PTR _bmp$189661[ebp]
  09964	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap

; 2480 : 		else{ // a hicolor bitmap

  09969	e9 96 00 00 00	 jmp	 $L189658
$L189660:

; 2481 : 			CBitmap mybmp;

  0996e	8d 4d cc	 lea	 ecx, DWORD PTR _mybmp$189667[ebp]
  09971	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09976	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2482 : 			if(mybmp.LoadBitmap(nResourceID)){

  0997d	8b 4d 0c	 mov	 ecx, DWORD PTR _nResourceID$[ebp]
  09980	51		 push	 ecx
  09981	8d 4d cc	 lea	 ecx, DWORD PTR _mybmp$189667[ebp]
  09984	e8 00 00 00 00	 call	 ?LoadBitmapA@CBitmap@@QAEHI@Z ; CBitmap::LoadBitmapA
  09989	85 c0		 test	 eax, eax
  0998b	74 68		 je	 SHORT $L189668

; 2483 : 				hicolor_bitmaps=TRUE;

  0998d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hicolor_bitmaps@BCMenu@@1HA, 1 ; BCMenu::hicolor_bitmaps

; 2484 : 				GetTransparentBitmap(mybmp);

  09997	8d 55 cc	 lea	 edx, DWORD PTR _mybmp$189667[ebp]
  0999a	52		 push	 edx
  0999b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0999e	e8 00 00 00 00	 call	 ?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetTransparentBitmap

; 2485 : 				if(m_bitmapBackgroundFlag){

  099a3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  099a6	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  099aa	74 20		 je	 SHORT $L189669

; 2486 : 					if(bmplist->Add(&mybmp,m_bitmapBackground)>=0)bReturn=TRUE;

  099ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  099af	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  099b2	52		 push	 edx
  099b3	8d 45 cc	 lea	 eax, DWORD PTR _mybmp$189667[ebp]
  099b6	50		 push	 eax
  099b7	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  099ba	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  099bf	85 c0		 test	 eax, eax
  099c1	7c 07		 jl	 SHORT $L189670
  099c3	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L189670:

; 2487 : 				}
; 2488 : 				else{

  099ca	eb 29		 jmp	 SHORT $L189668
$L189669:

; 2489 : 					if(bmplist->Add(&mybmp,GetSysColor(COLOR_3DFACE))>=0)bReturn=TRUE;

  099cc	8b f4		 mov	 esi, esp
  099ce	6a 0f		 push	 15			; 0000000fH
  099d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  099d6	3b f4		 cmp	 esi, esp
  099d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  099dd	50		 push	 eax
  099de	8d 4d cc	 lea	 ecx, DWORD PTR _mybmp$189667[ebp]
  099e1	51		 push	 ecx
  099e2	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  099e5	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  099ea	85 c0		 test	 eax, eax
  099ec	7c 07		 jl	 SHORT $L189668
  099ee	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L189668:

; 2490 : 				}
; 2491 : 			}
; 2492 : 		}

  099f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  099fc	8d 4d cc	 lea	 ecx, DWORD PTR _mybmp$189667[ebp]
  099ff	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L189658:

; 2493 : 	}
; 2494 : 	if(bReturn&&IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  09a04	83 7d ec 00	 cmp	 DWORD PTR _bReturn$[ebp], 0
  09a08	0f 84 57 01 00
	00		 je	 $L189673
  09a0e	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  09a13	85 c0		 test	 eax, eax
  09a15	0f 84 4a 01 00
	00		 je	 $L189673
  09a1b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  09a22	0f 84 3d 01 00
	00		 je	 $L189673

; 2495 : 		CWnd *pWnd = AfxGetMainWnd();            // Get main window

  09a28	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  09a2d	89 45 c4	 mov	 DWORD PTR _pWnd$189674[ebp], eax

; 2496 : 		if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  09a30	83 7d c4 00	 cmp	 DWORD PTR _pWnd$189674[ebp], 0
  09a34	75 08		 jne	 SHORT $L189675
  09a36	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  09a3b	89 45 c4	 mov	 DWORD PTR _pWnd$189674[ebp], eax
$L189675:

; 2497 : 		CDC *pDC = pWnd->GetDC();              // Get device context

  09a3e	8b 4d c4	 mov	 ecx, DWORD PTR _pWnd$189674[ebp]
  09a41	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  09a46	89 45 c0	 mov	 DWORD PTR _pDC$189676[ebp], eax

; 2498 : 		CBitmap bmp,bmp2,bmp3;

  09a49	8d 4d b4	 lea	 ecx, DWORD PTR _bmp$189677[ebp]
  09a4c	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09a51	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  09a58	8d 4d a4	 lea	 ecx, DWORD PTR _bmp2$189678[ebp]
  09a5b	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09a60	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  09a64	8d 4d 94	 lea	 ecx, DWORD PTR _bmp3$189679[ebp]
  09a67	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09a6c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 2499 : 		GetBitmapFromImageList(pDC,bmplist,0,bmp);

  09a70	8d 55 b4	 lea	 edx, DWORD PTR _bmp$189677[ebp]
  09a73	52		 push	 edx
  09a74	6a 00		 push	 0
  09a76	8b 45 08	 mov	 eax, DWORD PTR _bmplist$[ebp]
  09a79	50		 push	 eax
  09a7a	8b 4d c0	 mov	 ecx, DWORD PTR _pDC$189676[ebp]
  09a7d	51		 push	 ecx
  09a7e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09a81	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 2500 : 		GetFadedBitmap(bmp);

  09a86	8d 55 b4	 lea	 edx, DWORD PTR _bmp$189677[ebp]
  09a89	52		 push	 edx
  09a8a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09a8d	e8 00 00 00 00	 call	 ?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetFadedBitmap

; 2501 : 		bmplist->Add(&bmp,GetSysColor(COLOR_3DFACE));

  09a92	8b f4		 mov	 esi, esp
  09a94	6a 0f		 push	 15			; 0000000fH
  09a96	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09a9c	3b f4		 cmp	 esi, esp
  09a9e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09aa3	50		 push	 eax
  09aa4	8d 45 b4	 lea	 eax, DWORD PTR _bmp$189677[ebp]
  09aa7	50		 push	 eax
  09aa8	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  09aab	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2502 : 		GetBitmapFromImageList(pDC,bmplist,0,bmp2);

  09ab0	8d 4d a4	 lea	 ecx, DWORD PTR _bmp2$189678[ebp]
  09ab3	51		 push	 ecx
  09ab4	6a 00		 push	 0
  09ab6	8b 55 08	 mov	 edx, DWORD PTR _bmplist$[ebp]
  09ab9	52		 push	 edx
  09aba	8b 45 c0	 mov	 eax, DWORD PTR _pDC$189676[ebp]
  09abd	50		 push	 eax
  09abe	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09ac1	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 2503 : 		GetShadowBitmap(bmp2);

  09ac6	8d 4d a4	 lea	 ecx, DWORD PTR _bmp2$189678[ebp]
  09ac9	51		 push	 ecx
  09aca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09acd	e8 00 00 00 00	 call	 ?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetShadowBitmap

; 2504 : 		bmplist->Add(&bmp2,GetSysColor(COLOR_3DFACE));

  09ad2	8b f4		 mov	 esi, esp
  09ad4	6a 0f		 push	 15			; 0000000fH
  09ad6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09adc	3b f4		 cmp	 esi, esp
  09ade	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09ae3	50		 push	 eax
  09ae4	8d 55 a4	 lea	 edx, DWORD PTR _bmp2$189678[ebp]
  09ae7	52		 push	 edx
  09ae8	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  09aeb	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2505 : 		GetBitmapFromImageList(pDC,bmplist,0,bmp3);

  09af0	8d 45 94	 lea	 eax, DWORD PTR _bmp3$189679[ebp]
  09af3	50		 push	 eax
  09af4	6a 00		 push	 0
  09af6	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  09af9	51		 push	 ecx
  09afa	8b 55 c0	 mov	 edx, DWORD PTR _pDC$189676[ebp]
  09afd	52		 push	 edx
  09afe	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09b01	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 2506 : 		GetDisabledBitmap(bmp3);

  09b06	6a 00		 push	 0
  09b08	8d 45 94	 lea	 eax, DWORD PTR _bmp3$189679[ebp]
  09b0b	50		 push	 eax
  09b0c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09b0f	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 2507 : 		bmplist->Add(&bmp3,GetSysColor(COLOR_3DFACE));

  09b14	8b f4		 mov	 esi, esp
  09b16	6a 0f		 push	 15			; 0000000fH
  09b18	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09b1e	3b f4		 cmp	 esi, esp
  09b20	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09b25	50		 push	 eax
  09b26	8d 4d 94	 lea	 ecx, DWORD PTR _bmp3$189679[ebp]
  09b29	51		 push	 ecx
  09b2a	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  09b2d	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2508 : 		pWnd->ReleaseDC(pDC);  // Release the DC

  09b32	8b 55 c0	 mov	 edx, DWORD PTR _pDC$189676[ebp]
  09b35	52		 push	 edx
  09b36	8b 4d c4	 mov	 ecx, DWORD PTR _pWnd$189674[ebp]
  09b39	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 2509 : 	}

  09b3e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  09b42	8d 4d 94	 lea	 ecx, DWORD PTR _bmp3$189679[ebp]
  09b45	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  09b4a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  09b4e	8d 4d a4	 lea	 ecx, DWORD PTR _bmp2$189678[ebp]
  09b51	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  09b56	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09b5d	8d 4d b4	 lea	 ecx, DWORD PTR _bmp$189677[ebp]
  09b60	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L189673:

; 2510 : 	return(bReturn);

  09b65	8b 45 ec	 mov	 eax, DWORD PTR _bReturn$[ebp]

; 2511 : }

  09b68	52		 push	 edx
  09b69	8b cd		 mov	 ecx, ebp
  09b6b	50		 push	 eax
  09b6c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192842
  09b72	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  09b77	58		 pop	 eax
  09b78	5a		 pop	 edx
  09b79	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  09b7c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09b83	5f		 pop	 edi
  09b84	5e		 pop	 esi
  09b85	83 c4 70	 add	 esp, 112		; 00000070H
  09b88	3b ec		 cmp	 ebp, esp
  09b8a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09b8f	8b e5		 mov	 esp, ebp
  09b91	5d		 pop	 ebp
  09b92	c2 08 00	 ret	 8
$L192842:
  09b95	05 00 00 00	 DD	 5
  09b99	00 00 00 00	 DD	 $L192841
$L192841:
  09b9d	dc ff ff ff	 DD	 -36			; ffffffdcH
  09ba1	08 00 00 00	 DD	 8
  09ba5	00 00 00 00	 DD	 $L192835
  09ba9	cc ff ff ff	 DD	 -52			; ffffffccH
  09bad	08 00 00 00	 DD	 8
  09bb1	00 00 00 00	 DD	 $L192836
  09bb5	b4 ff ff ff	 DD	 -76			; ffffffb4H
  09bb9	08 00 00 00	 DD	 8
  09bbd	00 00 00 00	 DD	 $L192837
  09bc1	a4 ff ff ff	 DD	 -92			; ffffffa4H
  09bc5	08 00 00 00	 DD	 8
  09bc9	00 00 00 00	 DD	 $L192838
  09bcd	94 ff ff ff	 DD	 -108			; ffffff94H
  09bd1	08 00 00 00	 DD	 8
  09bd5	00 00 00 00	 DD	 $L192839
$L192839:
  09bd9	62		 DB	 98			; 00000062H
  09bda	6d		 DB	 109			; 0000006dH
  09bdb	70		 DB	 112			; 00000070H
  09bdc	33		 DB	 51			; 00000033H
  09bdd	00		 DB	 0
$L192838:
  09bde	62		 DB	 98			; 00000062H
  09bdf	6d		 DB	 109			; 0000006dH
  09be0	70		 DB	 112			; 00000070H
  09be1	32		 DB	 50			; 00000032H
  09be2	00		 DB	 0
$L192837:
  09be3	62		 DB	 98			; 00000062H
  09be4	6d		 DB	 109			; 0000006dH
  09be5	70		 DB	 112			; 00000070H
  09be6	00		 DB	 0
$L192836:
  09be7	6d		 DB	 109			; 0000006dH
  09be8	79		 DB	 121			; 00000079H
  09be9	62		 DB	 98			; 00000062H
  09bea	6d		 DB	 109			; 0000006dH
  09beb	70		 DB	 112			; 00000070H
  09bec	00		 DB	 0
$L192835:
  09bed	62		 DB	 98			; 00000062H
  09bee	6d		 DB	 109			; 0000006dH
  09bef	70		 DB	 112			; 00000070H
  09bf0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192828:
  006e4	8d 4d dc	 lea	 ecx, DWORD PTR _bmp$189661[ebp]
  006e7	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192829:
  006ec	8d 4d cc	 lea	 ecx, DWORD PTR _mybmp$189667[ebp]
  006ef	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192830:
  006f4	8d 4d b4	 lea	 ecx, DWORD PTR _bmp$189677[ebp]
  006f7	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192831:
  006fc	8d 4d a4	 lea	 ecx, DWORD PTR _bmp2$189678[ebp]
  006ff	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192832:
  00704	8d 4d 94	 lea	 ecx, DWORD PTR _bmp3$189679[ebp]
  00707	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z:
  0070c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192834
  00711	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ENDP ; BCMenu::AddBitmapToImageList
PUBLIC	?SetBitmapBackground@BCMenu@@QAEXK@Z		; BCMenu::SetBitmapBackground
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetBitmapBackground@BCMenu@@QAEXK@Z PROC NEAR		; BCMenu::SetBitmapBackground
; _this$ = ecx

; 2514 : {

  09c00	55		 push	 ebp
  09c01	8b ec		 mov	 ebp, esp
  09c03	51		 push	 ecx
  09c04	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  09c0b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2515 : 	m_bitmapBackground=color;

  09c0e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  09c11	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  09c14	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 2516 : 	m_bitmapBackgroundFlag=TRUE;

  09c17	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  09c1a	c7 42 34 01 00
	00 00		 mov	 DWORD PTR [edx+52], 1

; 2517 : }

  09c21	8b e5		 mov	 esp, ebp
  09c23	5d		 pop	 ebp
  09c24	c2 04 00	 ret	 4
?SetBitmapBackground@BCMenu@@QAEXK@Z ENDP		; BCMenu::SetBitmapBackground
_TEXT	ENDS
PUBLIC	?UnSetBitmapBackground@BCMenu@@QAEXXZ		; BCMenu::UnSetBitmapBackground
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnSetBitmapBackground@BCMenu@@QAEXXZ PROC NEAR		; BCMenu::UnSetBitmapBackground
; _this$ = ecx

; 2520 : {

  09c30	55		 push	 ebp
  09c31	8b ec		 mov	 ebp, esp
  09c33	51		 push	 ecx
  09c34	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  09c3b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2521 : 	m_bitmapBackgroundFlag=FALSE;

  09c3e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  09c41	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 2522 : }

  09c48	8b e5		 mov	 esp, ebp
  09c4a	5d		 pop	 ebp
  09c4b	c3		 ret	 0
?UnSetBitmapBackground@BCMenu@@QAEXXZ ENDP		; BCMenu::UnSetBitmapBackground
_TEXT	ENDS
PUBLIC	?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z	; BCMenu::AddFromToolBar
xdata$x	SEGMENT
$T192870 DD	0ffffffffH
	DD	FLAT:$L192859
	DD	0ffffffffH
	DD	FLAT:$L192860
$T192862 DD	019930520H
	DD	02H
	DD	FLAT:$T192870
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv183 = -112						; size = 4
tv159 = -108						; size = 4
tv135 = -104						; size = 4
$T192856 = -100						; size = 4
$T192855 = -96						; size = 4
$T192852 = -92						; size = 4
$T192851 = -88						; size = 4
$T192848 = -84						; size = 4
$T192847 = -80						; size = 4
_pSubMenu$189704 = -76					; size = 4
_pData$189703 = -72					; size = 4
_nLoc$189702 = -64					; size = 4
_nImage$189701 = -52					; size = 4
_nStyle$189700 = -40					; size = 4
_nID$189697 = -28					; size = 4
_i$189693 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pToolBar$ = 8						; size = 4
_nResourceID$ = 12					; size = 4
?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z PROC NEAR	; BCMenu::AddFromToolBar
; _this$ = ecx

; 2528 : {

  09c50	55		 push	 ebp
  09c51	8b ec		 mov	 ebp, esp
  09c53	6a ff		 push	 -1
  09c55	68 00 00 00 00	 push	 __ehhandler$?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z
  09c5a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09c60	50		 push	 eax
  09c61	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09c68	83 ec 64	 sub	 esp, 100		; 00000064H
  09c6b	56		 push	 esi
  09c6c	57		 push	 edi
  09c6d	51		 push	 ecx
  09c6e	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  09c71	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  09c76	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  09c7b	f3 ab		 rep stosd
  09c7d	59		 pop	 ecx
  09c7e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2529 : 	for (int i = 0; i < pToolBar->GetCount(); i++) {

  09c81	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$189693[ebp], 0
  09c88	eb 09		 jmp	 SHORT $L189694
$L189695:
  09c8a	8b 45 ec	 mov	 eax, DWORD PTR _i$189693[ebp]
  09c8d	83 c0 01	 add	 eax, 1
  09c90	89 45 ec	 mov	 DWORD PTR _i$189693[ebp], eax
$L189694:
  09c93	8b 4d 08	 mov	 ecx, DWORD PTR _pToolBar$[ebp]
  09c96	e8 00 00 00 00	 call	 ?GetCount@CControlBar@@QBEHXZ ; CControlBar::GetCount
  09c9b	39 45 ec	 cmp	 DWORD PTR _i$189693[ebp], eax
  09c9e	0f 8d 0f 02 00
	00		 jge	 $L189692

; 2530 : 		UINT nID = pToolBar->GetItemID(i);

  09ca4	8b 4d ec	 mov	 ecx, DWORD PTR _i$189693[ebp]
  09ca7	51		 push	 ecx
  09ca8	8b 4d 08	 mov	 ecx, DWORD PTR _pToolBar$[ebp]
  09cab	e8 00 00 00 00	 call	 ?GetItemID@CToolBar@@QBEIH@Z ; CToolBar::GetItemID
  09cb0	89 45 e4	 mov	 DWORD PTR _nID$189697[ebp], eax

; 2531 : 		// See if this toolbar option
; 2532 : 		// appears as a command on this
; 2533 : 		// menu or is a separator
; 2534 : 		if (nID == 0 || GetMenuState(nID, MF_BYCOMMAND) == 0xFFFFFFFF)

  09cb3	83 7d e4 00	 cmp	 DWORD PTR _nID$189697[ebp], 0
  09cb7	74 13		 je	 SHORT $L189699
  09cb9	6a 00		 push	 0
  09cbb	8b 55 e4	 mov	 edx, DWORD PTR _nID$189697[ebp]
  09cbe	52		 push	 edx
  09cbf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09cc2	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  09cc7	83 f8 ff	 cmp	 eax, -1
  09cca	75 02		 jne	 SHORT $L189698
$L189699:

; 2535 : 			continue; // Item doesn't exist

  09ccc	eb bc		 jmp	 SHORT $L189695
$L189698:

; 2536 : 		UINT nStyle;
; 2537 : 		int nImage;
; 2538 : 		// Get the toolbar button info
; 2539 : 		pToolBar->GetButtonInfo(i, nID, nStyle, nImage);

  09cce	8d 45 cc	 lea	 eax, DWORD PTR _nImage$189701[ebp]
  09cd1	50		 push	 eax
  09cd2	8d 4d d8	 lea	 ecx, DWORD PTR _nStyle$189700[ebp]
  09cd5	51		 push	 ecx
  09cd6	8d 55 e4	 lea	 edx, DWORD PTR _nID$189697[ebp]
  09cd9	52		 push	 edx
  09cda	8b 45 ec	 mov	 eax, DWORD PTR _i$189693[ebp]
  09cdd	50		 push	 eax
  09cde	8b 4d 08	 mov	 ecx, DWORD PTR _pToolBar$[ebp]
  09ce1	e8 00 00 00 00	 call	 ?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z ; CToolBar::GetButtonInfo

; 2540 : 		// OK, we have the command ID of the toolbar
; 2541 : 		// option, and the tollbar bitmap offset
; 2542 : 		int nLoc;
; 2543 : 		BCMenuData* pData;
; 2544 : 		BCMenu *pSubMenu = FindMenuOption(nID, nLoc);

  09ce6	8d 4d c0	 lea	 ecx, DWORD PTR _nLoc$189702[ebp]
  09ce9	51		 push	 ecx
  09cea	8b 55 e4	 mov	 edx, DWORD PTR _nID$189697[ebp]
  09ced	52		 push	 edx
  09cee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09cf1	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  09cf6	89 45 b4	 mov	 DWORD PTR _pSubMenu$189704[ebp], eax

; 2545 : 		if (pSubMenu && nLoc >= 0)pData = pSubMenu->m_MenuList[nLoc];

  09cf9	83 7d b4 00	 cmp	 DWORD PTR _pSubMenu$189704[ebp], 0
  09cfd	74 1c		 je	 SHORT $L189705
  09cff	83 7d c0 00	 cmp	 DWORD PTR _nLoc$189702[ebp], 0
  09d03	7c 16		 jl	 SHORT $L189705
  09d05	8b 45 c0	 mov	 eax, DWORD PTR _nLoc$189702[ebp]
  09d08	50		 push	 eax
  09d09	8b 4d b4	 mov	 ecx, DWORD PTR _pSubMenu$189704[ebp]
  09d0c	83 c1 08	 add	 ecx, 8
  09d0f	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  09d14	8b 08		 mov	 ecx, DWORD PTR [eax]
  09d16	89 4d b8	 mov	 DWORD PTR _pData$189703[ebp], ecx

; 2546 : 		else {

  09d19	eb 5a		 jmp	 SHORT $L189706
$L189705:

; 2547 : 			// Create a new BCMenuData structure
; 2548 : 			pData = new BCMenuData;

  09d1b	68 f4 09 00 00	 push	 2548			; 000009f4H
  09d20	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  09d25	6a 24		 push	 36			; 00000024H
  09d27	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  09d2c	83 c4 0c	 add	 esp, 12			; 0000000cH
  09d2f	89 45 ac	 mov	 DWORD PTR $T192848[ebp], eax
  09d32	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  09d39	83 7d ac 00	 cmp	 DWORD PTR $T192848[ebp], 0
  09d3d	74 0d		 je	 SHORT $L192849
  09d3f	8b 4d ac	 mov	 ecx, DWORD PTR $T192848[ebp]
  09d42	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  09d47	89 45 98	 mov	 DWORD PTR tv135[ebp], eax
  09d4a	eb 07		 jmp	 SHORT $L192850
$L192849:
  09d4c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$L192850:
  09d53	8b 55 98	 mov	 edx, DWORD PTR tv135[ebp]
  09d56	89 55 b0	 mov	 DWORD PTR $T192847[ebp], edx
  09d59	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09d60	8b 45 b0	 mov	 eax, DWORD PTR $T192847[ebp]
  09d63	89 45 b8	 mov	 DWORD PTR _pData$189703[ebp], eax

; 2549 : 			m_MenuList.Add(pData);

  09d66	8b 4d b8	 mov	 ecx, DWORD PTR _pData$189703[ebp]
  09d69	51		 push	 ecx
  09d6a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09d6d	83 c1 08	 add	 ecx, 8
  09d70	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L189706:

; 2550 : 		}
; 2551 : 		// Set some default structure members
; 2552 : 		pData->menuIconNormal = nResourceID;

  09d75	8b 55 b8	 mov	 edx, DWORD PTR _pData$189703[ebp]
  09d78	8b 45 0c	 mov	 eax, DWORD PTR _nResourceID$[ebp]
  09d7b	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 2553 : 		pData->nID = nID;

  09d7e	8b 4d b8	 mov	 ecx, DWORD PTR _pData$189703[ebp]
  09d81	8b 55 e4	 mov	 edx, DWORD PTR _nID$189697[ebp]
  09d84	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 2554 : 		pData->nFlags =  MF_BYCOMMAND | MF_OWNERDRAW;

  09d87	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09d8a	c7 40 10 00 01
	00 00		 mov	 DWORD PTR [eax+16], 256	; 00000100H

; 2555 : 		pData->xoffset = nImage;

  09d91	8b 4d b8	 mov	 ecx, DWORD PTR _pData$189703[ebp]
  09d94	8b 55 cc	 mov	 edx, DWORD PTR _nImage$189701[ebp]
  09d97	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 2556 : 		if (pData->bitmap)pData->bitmap->DeleteImageList();

  09d9a	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09d9d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  09da1	74 0d		 je	 SHORT $L189713
  09da3	8b 4d b8	 mov	 ecx, DWORD PTR _pData$189703[ebp]
  09da6	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  09da9	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 2557 : 		else pData->bitmap = new CImageList;

  09dae	eb 4b		 jmp	 SHORT $L189714
$L189713:
  09db0	68 fd 09 00 00	 push	 2557			; 000009fdH
  09db5	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  09dba	6a 08		 push	 8
  09dbc	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  09dc1	89 45 a4	 mov	 DWORD PTR $T192852[ebp], eax
  09dc4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  09dcb	83 7d a4 00	 cmp	 DWORD PTR $T192852[ebp], 0
  09dcf	74 0d		 je	 SHORT $L192853
  09dd1	8b 4d a4	 mov	 ecx, DWORD PTR $T192852[ebp]
  09dd4	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  09dd9	89 45 94	 mov	 DWORD PTR tv159[ebp], eax
  09ddc	eb 07		 jmp	 SHORT $L192854
$L192853:
  09dde	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L192854:
  09de5	8b 55 94	 mov	 edx, DWORD PTR tv159[ebp]
  09de8	89 55 a8	 mov	 DWORD PTR $T192851[ebp], edx
  09deb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09df2	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09df5	8b 4d a8	 mov	 ecx, DWORD PTR $T192851[ebp]
  09df8	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$L189714:

; 2558 : 		pData->bitmap->Create(m_iconX, m_iconY,ILC_COLORDDB|ILC_MASK, 1, 1);

  09dfb	6a 01		 push	 1
  09dfd	6a 01		 push	 1
  09dff	68 ff 00 00 00	 push	 255			; 000000ffH
  09e04	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  09e0a	52		 push	 edx
  09e0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  09e10	50		 push	 eax
  09e11	8b 4d b8	 mov	 ecx, DWORD PTR _pData$189703[ebp]
  09e14	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  09e17	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 2559 : 		
; 2560 : 		if(!AddBitmapToImageList(pData->bitmap, nResourceID)){

  09e1c	8b 55 0c	 mov	 edx, DWORD PTR _nResourceID$[ebp]
  09e1f	52		 push	 edx
  09e20	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09e23	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  09e26	51		 push	 ecx
  09e27	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09e2a	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  09e2f	85 c0		 test	 eax, eax
  09e31	75 60		 jne	 SHORT $L189721

; 2561 : 			pData->bitmap->DeleteImageList();

  09e33	8b 55 b8	 mov	 edx, DWORD PTR _pData$189703[ebp]
  09e36	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  09e39	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 2562 : 			delete pData->bitmap;

  09e3e	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09e41	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  09e44	89 4d 9c	 mov	 DWORD PTR $T192856[ebp], ecx
  09e47	8b 55 9c	 mov	 edx, DWORD PTR $T192856[ebp]
  09e4a	89 55 a0	 mov	 DWORD PTR $T192855[ebp], edx
  09e4d	83 7d a0 00	 cmp	 DWORD PTR $T192855[ebp], 0
  09e51	74 1b		 je	 SHORT $L192857
  09e53	8b f4		 mov	 esi, esp
  09e55	6a 01		 push	 1
  09e57	8b 45 a0	 mov	 eax, DWORD PTR $T192855[ebp]
  09e5a	8b 10		 mov	 edx, DWORD PTR [eax]
  09e5c	8b 4d a0	 mov	 ecx, DWORD PTR $T192855[ebp]
  09e5f	ff 52 04	 call	 DWORD PTR [edx+4]
  09e62	3b f4		 cmp	 esi, esp
  09e64	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09e69	89 45 90	 mov	 DWORD PTR tv183[ebp], eax
  09e6c	eb 07		 jmp	 SHORT $L192858
$L192857:
  09e6e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], 0
$L192858:

; 2563 : 			pData->bitmap=NULL;

  09e75	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09e78	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2564 : 			pData->menuIconNormal = -1;

  09e7f	8b 4d b8	 mov	 ecx, DWORD PTR _pData$189703[ebp]
  09e82	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 2565 : 			pData->xoffset = -1;

  09e89	8b 55 b8	 mov	 edx, DWORD PTR _pData$189703[ebp]
  09e8c	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1
$L189721:

; 2566 : 		}
; 2567 : 		
; 2568 : 		// Modify our menu
; 2569 : 		ModifyMenu(nID,pData->nFlags,nID,(LPCTSTR)pData);

  09e93	8b 45 b8	 mov	 eax, DWORD PTR _pData$189703[ebp]
  09e96	50		 push	 eax
  09e97	8b 4d e4	 mov	 ecx, DWORD PTR _nID$189697[ebp]
  09e9a	51		 push	 ecx
  09e9b	8b 55 b8	 mov	 edx, DWORD PTR _pData$189703[ebp]
  09e9e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  09ea1	50		 push	 eax
  09ea2	8b 4d e4	 mov	 ecx, DWORD PTR _nID$189697[ebp]
  09ea5	51		 push	 ecx
  09ea6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  09ea9	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA

; 2570 : 	}

  09eae	e9 d7 fd ff ff	 jmp	 $L189695
$L189692:

; 2571 : }

  09eb3	52		 push	 edx
  09eb4	8b cd		 mov	 ecx, ebp
  09eb6	50		 push	 eax
  09eb7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192869
  09ebd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  09ec2	58		 pop	 eax
  09ec3	5a		 pop	 edx
  09ec4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  09ec7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09ece	5f		 pop	 edi
  09ecf	5e		 pop	 esi
  09ed0	83 c4 70	 add	 esp, 112		; 00000070H
  09ed3	3b ec		 cmp	 ebp, esp
  09ed5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09eda	8b e5		 mov	 esp, ebp
  09edc	5d		 pop	 ebp
  09edd	c2 08 00	 ret	 8
$L192869:
  09ee0	04 00 00 00	 DD	 4
  09ee4	00 00 00 00	 DD	 $L192868
$L192868:
  09ee8	e4 ff ff ff	 DD	 -28			; ffffffe4H
  09eec	04 00 00 00	 DD	 4
  09ef0	00 00 00 00	 DD	 $L192863
  09ef4	d8 ff ff ff	 DD	 -40			; ffffffd8H
  09ef8	04 00 00 00	 DD	 4
  09efc	00 00 00 00	 DD	 $L192864
  09f00	cc ff ff ff	 DD	 -52			; ffffffccH
  09f04	04 00 00 00	 DD	 4
  09f08	00 00 00 00	 DD	 $L192865
  09f0c	c0 ff ff ff	 DD	 -64			; ffffffc0H
  09f10	04 00 00 00	 DD	 4
  09f14	00 00 00 00	 DD	 $L192866
$L192866:
  09f18	6e		 DB	 110			; 0000006eH
  09f19	4c		 DB	 76			; 0000004cH
  09f1a	6f		 DB	 111			; 0000006fH
  09f1b	63		 DB	 99			; 00000063H
  09f1c	00		 DB	 0
$L192865:
  09f1d	6e		 DB	 110			; 0000006eH
  09f1e	49		 DB	 73			; 00000049H
  09f1f	6d		 DB	 109			; 0000006dH
  09f20	61		 DB	 97			; 00000061H
  09f21	67		 DB	 103			; 00000067H
  09f22	65		 DB	 101			; 00000065H
  09f23	00		 DB	 0
$L192864:
  09f24	6e		 DB	 110			; 0000006eH
  09f25	53		 DB	 83			; 00000053H
  09f26	74		 DB	 116			; 00000074H
  09f27	79		 DB	 121			; 00000079H
  09f28	6c		 DB	 108			; 0000006cH
  09f29	65		 DB	 101			; 00000065H
  09f2a	00		 DB	 0
$L192863:
  09f2b	6e		 DB	 110			; 0000006eH
  09f2c	49		 DB	 73			; 00000049H
  09f2d	44		 DB	 68			; 00000044H
  09f2e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192859:
  00716	68 f4 09 00 00	 push	 2548			; 000009f4H
  0071b	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00720	8b 45 ac	 mov	 eax, DWORD PTR $T192848[ebp]
  00723	50		 push	 eax
  00724	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00729	83 c4 0c	 add	 esp, 12			; 0000000cH
  0072c	c3		 ret	 0
$L192860:
  0072d	68 fd 09 00 00	 push	 2557			; 000009fdH
  00732	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00737	8b 45 a4	 mov	 eax, DWORD PTR $T192852[ebp]
  0073a	50		 push	 eax
  0073b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  00740	c3		 ret	 0
__ehhandler$?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z:
  00741	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192862
  00746	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z ENDP	; BCMenu::AddFromToolBar
EXTRN	??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z:NEAR	; CBufferDC::CBufferDC
EXTRN	??1CBufferDC@@UAE@XZ:NEAR			; CBufferDC::~CBufferDC
xdata$x	SEGMENT
$T192883 DD	0ffffffffH
	DD	FLAT:$L192873
	DD	00H
	DD	FLAT:$L192874
$T192876 DD	019930520H
	DD	02H
	DD	FLAT:$T192883
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192872 = -124						; size = 4
_dc$ = -120						; size = 4
_memdc$ = -112						; size = 48
_col$ = -60						; size = 4
_brush$ = -52						; size = 8
_rcDest$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dc1$ = 8						; size = 4
_rc$ = 12						; size = 4
_bSelected$ = 16					; size = 4
_hbmCheck$ = 20						; size = 4
?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z PROC NEAR ; BCMenu::Draw3DCheckmark
; _this$ = ecx

; 2575 : {

  09f30	55		 push	 ebp
  09f31	8b ec		 mov	 ebp, esp
  09f33	6a ff		 push	 -1
  09f35	68 00 00 00 00	 push	 __ehhandler$?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z
  09f3a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09f40	50		 push	 eax
  09f41	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09f48	83 ec 70	 sub	 esp, 112		; 00000070H
  09f4b	56		 push	 esi
  09f4c	57		 push	 edi
  09f4d	51		 push	 ecx
  09f4e	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  09f51	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  09f56	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  09f5b	f3 ab		 rep stosd
  09f5d	59		 pop	 ecx
  09f5e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2576 : 	CRect rcDest = rc;

  09f61	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  09f64	8b 08		 mov	 ecx, DWORD PTR [eax]
  09f66	89 4d dc	 mov	 DWORD PTR _rcDest$[ebp], ecx
  09f69	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  09f6c	89 55 e0	 mov	 DWORD PTR _rcDest$[ebp+4], edx
  09f6f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  09f72	89 4d e4	 mov	 DWORD PTR _rcDest$[ebp+8], ecx
  09f75	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  09f78	89 55 e8	 mov	 DWORD PTR _rcDest$[ebp+12], edx

; 2577 : 	CBrush brush;

  09f7b	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  09f7e	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  09f83	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2578 : 	COLORREF col;
; 2579 : 
; 2580 : 	CBufferDC memdc(dc1->m_hDC, rc);

  09f8a	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  09f8d	50		 push	 eax
  09f8e	8b 4d 08	 mov	 ecx, DWORD PTR _dc1$[ebp]
  09f91	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  09f94	52		 push	 edx
  09f95	8d 4d 90	 lea	 ecx, DWORD PTR _memdc$[ebp]
  09f98	e8 00 00 00 00	 call	 ??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z ; CBufferDC::CBufferDC
  09f9d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2581 : 	CDC *dc = &memdc;

  09fa1	8d 45 90	 lea	 eax, DWORD PTR _memdc$[ebp]
  09fa4	89 45 88	 mov	 DWORD PTR _dc$[ebp], eax

; 2582 : 
; 2583 : 	if(IsWinXPLuna())col=GetSysColor(COLOR_3DFACE);

  09fa7	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  09fac	85 c0		 test	 eax, eax
  09fae	74 16		 je	 SHORT $L189737
  09fb0	8b f4		 mov	 esi, esp
  09fb2	6a 0f		 push	 15			; 0000000fH
  09fb4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09fba	3b f4		 cmp	 esi, esp
  09fbc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09fc1	89 45 c4	 mov	 DWORD PTR _col$[ebp], eax

; 2584 : 	else col=GetSysColor(COLOR_MENU);

  09fc4	eb 14		 jmp	 SHORT $L189738
$L189737:
  09fc6	8b f4		 mov	 esi, esp
  09fc8	6a 04		 push	 4
  09fca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09fd0	3b f4		 cmp	 esi, esp
  09fd2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  09fd7	89 45 c4	 mov	 DWORD PTR _col$[ebp], eax
$L189738:

; 2585 : 	if(!bSelected)col = LightenColor(col,0.6);

  09fda	83 7d 10 00	 cmp	 DWORD PTR _bSelected$[ebp], 0
  09fde	75 1b		 jne	 SHORT $L189739
  09fe0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe3333333333333
  09fe6	83 ec 08	 sub	 esp, 8
  09fe9	dd 1c 24	 fstp	 QWORD PTR [esp]
  09fec	8b 4d c4	 mov	 ecx, DWORD PTR _col$[ebp]
  09fef	51		 push	 ecx
  09ff0	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  09ff5	83 c4 0c	 add	 esp, 12			; 0000000cH
  09ff8	89 45 c4	 mov	 DWORD PTR _col$[ebp], eax
$L189739:

; 2586 : 	brush.CreateSolidBrush(col);

  09ffb	8b 55 c4	 mov	 edx, DWORD PTR _col$[ebp]
  09ffe	52		 push	 edx
  09fff	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  0a002	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2587 : 	dc->FillRect(rcDest,&brush);

  0a007	8d 45 cc	 lea	 eax, DWORD PTR _brush$[ebp]
  0a00a	50		 push	 eax
  0a00b	8d 4d dc	 lea	 ecx, DWORD PTR _rcDest$[ebp]
  0a00e	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0a013	50		 push	 eax
  0a014	8b 4d 88	 mov	 ecx, DWORD PTR _dc$[ebp]
  0a017	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2588 : 	brush.DeleteObject();

  0a01c	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  0a01f	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2589 : 	if (IsNewShell()) //SK: looks better on the old shell

  0a024	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  0a029	85 c0		 test	 eax, eax
  0a02b	74 10		 je	 SHORT $L189740

; 2590 : 		dc->DrawEdge(&rcDest, BDR_SUNKENOUTER, BF_RECT);

  0a02d	6a 0f		 push	 15			; 0000000fH
  0a02f	6a 02		 push	 2
  0a031	8d 4d dc	 lea	 ecx, DWORD PTR _rcDest$[ebp]
  0a034	51		 push	 ecx
  0a035	8b 4d 88	 mov	 ecx, DWORD PTR _dc$[ebp]
  0a038	e8 00 00 00 00	 call	 ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawEdge
$L189740:

; 2591 : 	if (!hbmCheck)DrawCheckMark(dc,rc.left+4,rc.top+4,GetSysColor(COLOR_MENUTEXT));

  0a03d	83 7d 14 00	 cmp	 DWORD PTR _hbmCheck$[ebp], 0
  0a041	75 35		 jne	 SHORT $L189741
  0a043	6a 00		 push	 0
  0a045	8b f4		 mov	 esi, esp
  0a047	6a 07		 push	 7
  0a049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a04f	3b f4		 cmp	 esi, esp
  0a051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a056	50		 push	 eax
  0a057	8b 55 0c	 mov	 edx, DWORD PTR _rc$[ebp]
  0a05a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0a05d	83 c0 04	 add	 eax, 4
  0a060	50		 push	 eax
  0a061	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a064	8b 11		 mov	 edx, DWORD PTR [ecx]
  0a066	83 c2 04	 add	 edx, 4
  0a069	52		 push	 edx
  0a06a	8b 45 88	 mov	 eax, DWORD PTR _dc$[ebp]
  0a06d	50		 push	 eax
  0a06e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0a071	e8 00 00 00 00	 call	 ?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z ; BCMenu::DrawCheckMark

; 2592 : 	else DrawRadioDot(dc,rc.left+5,rc.top+4,GetSysColor(COLOR_MENUTEXT));

  0a076	eb 31		 jmp	 SHORT $L189742
$L189741:
  0a078	8b f4		 mov	 esi, esp
  0a07a	6a 07		 push	 7
  0a07c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a082	3b f4		 cmp	 esi, esp
  0a084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a089	50		 push	 eax
  0a08a	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a08d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0a090	83 c2 04	 add	 edx, 4
  0a093	52		 push	 edx
  0a094	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  0a097	8b 08		 mov	 ecx, DWORD PTR [eax]
  0a099	83 c1 05	 add	 ecx, 5
  0a09c	51		 push	 ecx
  0a09d	8b 55 88	 mov	 edx, DWORD PTR _dc$[ebp]
  0a0a0	52		 push	 edx
  0a0a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0a0a4	e8 00 00 00 00	 call	 ?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z ; BCMenu::DrawRadioDot
$L189742:

; 2593 : 	return TRUE;

  0a0a9	c7 45 84 01 00
	00 00		 mov	 DWORD PTR $T192872[ebp], 1
  0a0b0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0a0b4	8d 4d 90	 lea	 ecx, DWORD PTR _memdc$[ebp]
  0a0b7	e8 00 00 00 00	 call	 ??1CBufferDC@@UAE@XZ	; CBufferDC::~CBufferDC
  0a0bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a0c3	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  0a0c6	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0a0cb	8b 45 84	 mov	 eax, DWORD PTR $T192872[ebp]

; 2594 : }

  0a0ce	52		 push	 edx
  0a0cf	8b cd		 mov	 ecx, ebp
  0a0d1	50		 push	 eax
  0a0d2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192882
  0a0d8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0a0dd	58		 pop	 eax
  0a0de	5a		 pop	 edx
  0a0df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a0e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a0e9	5f		 pop	 edi
  0a0ea	5e		 pop	 esi
  0a0eb	83 c4 7c	 add	 esp, 124		; 0000007cH
  0a0ee	3b ec		 cmp	 ebp, esp
  0a0f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a0f5	8b e5		 mov	 esp, ebp
  0a0f7	5d		 pop	 ebp
  0a0f8	c2 10 00	 ret	 16			; 00000010H
$L192882:
  0a0fb	03 00 00 00	 DD	 3
  0a0ff	00 00 00 00	 DD	 $L192881
$L192881:
  0a103	dc ff ff ff	 DD	 -36			; ffffffdcH
  0a107	10 00 00 00	 DD	 16			; 00000010H
  0a10b	00 00 00 00	 DD	 $L192877
  0a10f	cc ff ff ff	 DD	 -52			; ffffffccH
  0a113	08 00 00 00	 DD	 8
  0a117	00 00 00 00	 DD	 $L192878
  0a11b	90 ff ff ff	 DD	 -112			; ffffff90H
  0a11f	30 00 00 00	 DD	 48			; 00000030H
  0a123	00 00 00 00	 DD	 $L192879
$L192879:
  0a127	6d		 DB	 109			; 0000006dH
  0a128	65		 DB	 101			; 00000065H
  0a129	6d		 DB	 109			; 0000006dH
  0a12a	64		 DB	 100			; 00000064H
  0a12b	63		 DB	 99			; 00000063H
  0a12c	00		 DB	 0
$L192878:
  0a12d	62		 DB	 98			; 00000062H
  0a12e	72		 DB	 114			; 00000072H
  0a12f	75		 DB	 117			; 00000075H
  0a130	73		 DB	 115			; 00000073H
  0a131	68		 DB	 104			; 00000068H
  0a132	00		 DB	 0
$L192877:
  0a133	72		 DB	 114			; 00000072H
  0a134	63		 DB	 99			; 00000063H
  0a135	44		 DB	 68			; 00000044H
  0a136	65		 DB	 101			; 00000065H
  0a137	73		 DB	 115			; 00000073H
  0a138	74		 DB	 116			; 00000074H
  0a139	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192873:
  0074b	8d 4d cc	 lea	 ecx, DWORD PTR _brush$[ebp]
  0074e	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192874:
  00753	8d 4d 90	 lea	 ecx, DWORD PTR _memdc$[ebp]
  00756	e9 00 00 00 00	 jmp	 ??1CBufferDC@@UAE@XZ	; CBufferDC::~CBufferDC
__ehhandler$?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z:
  0075b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192876
  00760	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z ENDP ; BCMenu::Draw3DCheckmark
EXTRN	??BCRect@@QBEPBUtagRECT@@XZ:NEAR		; CRect::operator tagRECT const *
xdata$x	SEGMENT
$T192893 DD	0ffffffffH
	DD	FLAT:$L192886
$T192888 DD	019930520H
	DD	01H
	DD	FLAT:$T192893
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192885 = -48						; size = 4
_dy$ = -44						; size = 4
_dx$ = -40						; size = 4
_col$ = -36						; size = 4
_brushin$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dc$ = 8						; size = 4
_rc$ = 12						; size = 4
_hbmCheck$ = 16						; size = 4
_colorout$ = 20						; size = 4
_selected$ = 24						; size = 4
?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z PROC NEAR ; BCMenu::DrawXPCheckmark
; _this$ = ecx

; 2597 : {

  0a140	55		 push	 ebp
  0a141	8b ec		 mov	 ebp, esp
  0a143	6a ff		 push	 -1
  0a145	68 00 00 00 00	 push	 __ehhandler$?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z
  0a14a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0a150	50		 push	 eax
  0a151	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0a158	83 ec 24	 sub	 esp, 36			; 00000024H
  0a15b	56		 push	 esi
  0a15c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0a161	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0a164	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0a167	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0a16a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0a16d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0a170	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0a173	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0a176	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0a179	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0a17c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2598 : 	CBrush brushin;

  0a17f	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  0a182	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0a187	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2599 : 	COLORREF col;
; 2600 : 	int dx,dy;
; 2601 : 	dy = (rc.Height()>>1)-3;

  0a18e	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a191	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0a196	d1 f8		 sar	 eax, 1
  0a198	83 e8 03	 sub	 eax, 3
  0a19b	89 45 d4	 mov	 DWORD PTR _dy$[ebp], eax

; 2602 : 	dy = dy<0 ? 0 : dy;

  0a19e	33 c0		 xor	 eax, eax
  0a1a0	83 7d d4 00	 cmp	 DWORD PTR _dy$[ebp], 0
  0a1a4	0f 9c c0	 setl	 al
  0a1a7	48		 dec	 eax
  0a1a8	23 45 d4	 and	 eax, DWORD PTR _dy$[ebp]
  0a1ab	89 45 d4	 mov	 DWORD PTR _dy$[ebp], eax

; 2603 : 	dx = (rc.Width()>>1)-3;

  0a1ae	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a1b1	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  0a1b6	d1 f8		 sar	 eax, 1
  0a1b8	83 e8 03	 sub	 eax, 3
  0a1bb	89 45 d8	 mov	 DWORD PTR _dx$[ebp], eax

; 2604 : 	dx = dx<0 ? 0 : dx;

  0a1be	33 c9		 xor	 ecx, ecx
  0a1c0	83 7d d8 00	 cmp	 DWORD PTR _dx$[ebp], 0
  0a1c4	0f 9c c1	 setl	 cl
  0a1c7	49		 dec	 ecx
  0a1c8	23 4d d8	 and	 ecx, DWORD PTR _dx$[ebp]
  0a1cb	89 4d d8	 mov	 DWORD PTR _dx$[ebp], ecx

; 2605 : 
; 2606 : 	if(selected) col = LightenColor(colorout,0.55);

  0a1ce	83 7d 18 00	 cmp	 DWORD PTR _selected$[ebp], 0
  0a1d2	74 1f		 je	 SHORT $L189756
  0a1d4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe199999999999a
  0a1da	83 ec 08	 sub	 esp, 8
  0a1dd	dd 1c 24	 fstp	 QWORD PTR [esp]
  0a1e0	8b 55 14	 mov	 edx, DWORD PTR _colorout$[ebp]
  0a1e3	8b 02		 mov	 eax, DWORD PTR [edx]
  0a1e5	50		 push	 eax
  0a1e6	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0a1eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  0a1ee	89 45 dc	 mov	 DWORD PTR _col$[ebp], eax

; 2607 : 	else col = LightenColor(colorout,0.85);

  0a1f1	eb 1d		 jmp	 SHORT $L189757
$L189756:
  0a1f3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feb333333333333
  0a1f9	83 ec 08	 sub	 esp, 8
  0a1fc	dd 1c 24	 fstp	 QWORD PTR [esp]
  0a1ff	8b 4d 14	 mov	 ecx, DWORD PTR _colorout$[ebp]
  0a202	8b 11		 mov	 edx, DWORD PTR [ecx]
  0a204	52		 push	 edx
  0a205	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0a20a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0a20d	89 45 dc	 mov	 DWORD PTR _col$[ebp], eax
$L189757:

; 2608 : 	brushin.CreateSolidBrush(col);

  0a210	8b 45 dc	 mov	 eax, DWORD PTR _col$[ebp]
  0a213	50		 push	 eax
  0a214	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  0a217	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2609 : 	dc->FillRect(rc,&brushin);

  0a21c	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  0a21f	51		 push	 ecx
  0a220	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a223	e8 00 00 00 00	 call	 ??BCRect@@QBEPBUtagRECT@@XZ ; CRect::operator tagRECT const *
  0a228	50		 push	 eax
  0a229	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0a22c	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2610 : 	brushin.DeleteObject();

  0a231	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  0a234	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2611 : 	dc->Draw3dRect (rc,colorout,colorout);

  0a239	8b 55 14	 mov	 edx, DWORD PTR _colorout$[ebp]
  0a23c	8b 02		 mov	 eax, DWORD PTR [edx]
  0a23e	50		 push	 eax
  0a23f	8b 4d 14	 mov	 ecx, DWORD PTR _colorout$[ebp]
  0a242	8b 11		 mov	 edx, DWORD PTR [ecx]
  0a244	52		 push	 edx
  0a245	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a248	e8 00 00 00 00	 call	 ??BCRect@@QBEPBUtagRECT@@XZ ; CRect::operator tagRECT const *
  0a24d	50		 push	 eax
  0a24e	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0a251	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 2612 : 
; 2613 : 	if (!hbmCheck)DrawCheckMark(dc,rc.left+dx,rc.top+dy,GetSysColor(COLOR_MENUTEXT),TRUE);

  0a256	83 7d 10 00	 cmp	 DWORD PTR _hbmCheck$[ebp], 0
  0a25a	75 35		 jne	 SHORT $L189758
  0a25c	6a 01		 push	 1
  0a25e	8b f4		 mov	 esi, esp
  0a260	6a 07		 push	 7
  0a262	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a268	3b f4		 cmp	 esi, esp
  0a26a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a26f	50		 push	 eax
  0a270	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  0a273	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0a276	03 4d d4	 add	 ecx, DWORD PTR _dy$[ebp]
  0a279	51		 push	 ecx
  0a27a	8b 55 0c	 mov	 edx, DWORD PTR _rc$[ebp]
  0a27d	8b 02		 mov	 eax, DWORD PTR [edx]
  0a27f	03 45 d8	 add	 eax, DWORD PTR _dx$[ebp]
  0a282	50		 push	 eax
  0a283	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0a286	51		 push	 ecx
  0a287	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0a28a	e8 00 00 00 00	 call	 ?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z ; BCMenu::DrawCheckMark

; 2614 : 	else DrawRadioDot(dc,rc.left+dx,rc.top+dy,GetSysColor(COLOR_MENUTEXT));

  0a28f	eb 31		 jmp	 SHORT $L189759
$L189758:
  0a291	8b f4		 mov	 esi, esp
  0a293	6a 07		 push	 7
  0a295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a29b	3b f4		 cmp	 esi, esp
  0a29d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a2a2	50		 push	 eax
  0a2a3	8b 55 0c	 mov	 edx, DWORD PTR _rc$[ebp]
  0a2a6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0a2a9	03 45 d4	 add	 eax, DWORD PTR _dy$[ebp]
  0a2ac	50		 push	 eax
  0a2ad	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  0a2b0	8b 11		 mov	 edx, DWORD PTR [ecx]
  0a2b2	03 55 d8	 add	 edx, DWORD PTR _dx$[ebp]
  0a2b5	52		 push	 edx
  0a2b6	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0a2b9	50		 push	 eax
  0a2ba	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0a2bd	e8 00 00 00 00	 call	 ?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z ; BCMenu::DrawRadioDot
$L189759:

; 2615 : 	return TRUE;

  0a2c2	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR $T192885[ebp], 1
  0a2c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a2d0	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  0a2d3	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0a2d8	8b 45 d0	 mov	 eax, DWORD PTR $T192885[ebp]

; 2616 : }

  0a2db	52		 push	 edx
  0a2dc	8b cd		 mov	 ecx, ebp
  0a2de	50		 push	 eax
  0a2df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192892
  0a2e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0a2ea	58		 pop	 eax
  0a2eb	5a		 pop	 edx
  0a2ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a2ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a2f6	5e		 pop	 esi
  0a2f7	83 c4 30	 add	 esp, 48			; 00000030H
  0a2fa	3b ec		 cmp	 ebp, esp
  0a2fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a301	8b e5		 mov	 esp, ebp
  0a303	5d		 pop	 ebp
  0a304	c2 14 00	 ret	 20			; 00000014H
$L192892:
  0a307	01 00 00 00	 DD	 1
  0a30b	00 00 00 00	 DD	 $L192891
$L192891:
  0a30f	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0a313	08 00 00 00	 DD	 8
  0a317	00 00 00 00	 DD	 $L192889
$L192889:
  0a31b	62		 DB	 98			; 00000062H
  0a31c	72		 DB	 114			; 00000072H
  0a31d	75		 DB	 117			; 00000075H
  0a31e	73		 DB	 115			; 00000073H
  0a31f	68		 DB	 104			; 00000068H
  0a320	69		 DB	 105			; 00000069H
  0a321	6e		 DB	 110			; 0000006eH
  0a322	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192886:
  00765	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  00768	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z:
  0076d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192888
  00772	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z ENDP ; BCMenu::DrawXPCheckmark
EXTRN	?PatBlt@CDC@@QAEHHHHHK@Z:NEAR			; CDC::PatBlt
EXTRN	?FillSolidRect@CDC@@QAEXHHHHK@Z:NEAR		; CDC::FillSolidRect
xdata$x	SEGMENT
$T192910 DD	0ffffffffH
	DD	FLAT:$L192895
	DD	00H
	DD	FLAT:$L192896
	DD	01H
	DD	FLAT:$L192897
	DD	02H
	DD	FLAT:$L192898
	DD	03H
	DD	FLAT:$L192899
$T192901 DD	019930520H
	DD	05H
	DD	FLAT:$T192910
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_pOldBrush$ = -124					; size = 4
_brHilight$ = -116					; size = 8
_brShadow$ = -100					; size = 8
_pdcOldBmp$ = -88					; size = 4
_dc$ = -80						; size = 16
_pddcOldBmp$ = -60					; size = 4
_bwbmp$ = -52						; size = 8
_ddc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_drawdc$ = 8						; size = 4
_nXDest$ = 12						; size = 4
_nYDest$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_bmp$ = 28						; size = 4
_nXSrc$ = 32						; size = 4
_nYSrc$ = 36						; size = 4
_bgcolor$ = 40						; size = 4
?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z PROC NEAR ; BCMenu::DitherBlt2
; _this$ = ecx

; 2621 : {

  0a330	55		 push	 ebp
  0a331	8b ec		 mov	 ebp, esp
  0a333	6a ff		 push	 -1
  0a335	68 00 00 00 00	 push	 __ehhandler$?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z
  0a33a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0a340	50		 push	 eax
  0a341	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0a348	83 ec 70	 sub	 esp, 112		; 00000070H
  0a34b	56		 push	 esi
  0a34c	57		 push	 edi
  0a34d	51		 push	 ecx
  0a34e	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  0a351	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0a356	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0a35b	f3 ab		 rep stosd
  0a35d	59		 pop	 ecx
  0a35e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2622 : 	// create a monochrome memory DC
; 2623 : 	CDC ddc;

  0a361	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a364	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0a369	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2624 : 	ddc.CreateCompatibleDC(0);

  0a370	6a 00		 push	 0
  0a372	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a375	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2625 : 	CBitmap bwbmp;

  0a37a	8d 4d cc	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  0a37d	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0a382	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2626 : 	bwbmp.CreateCompatibleBitmap(&ddc, nWidth, nHeight);

  0a386	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0a389	50		 push	 eax
  0a38a	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0a38d	51		 push	 ecx
  0a38e	8d 55 dc	 lea	 edx, DWORD PTR _ddc$[ebp]
  0a391	52		 push	 edx
  0a392	8d 4d cc	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  0a395	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2627 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bwbmp);

  0a39a	8d 45 cc	 lea	 eax, DWORD PTR _bwbmp$[ebp]
  0a39d	50		 push	 eax
  0a39e	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a3a1	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  0a3a6	89 45 c4	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2628 : 	
; 2629 : 	CDC dc;

  0a3a9	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a3ac	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0a3b1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2630 : 	dc.CreateCompatibleDC(0);

  0a3b5	6a 00		 push	 0
  0a3b7	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a3ba	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2631 : 	CBitmap * pdcOldBmp = dc.SelectObject(&bmp);

  0a3bf	8b 4d 1c	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0a3c2	51		 push	 ecx
  0a3c3	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a3c6	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  0a3cb	89 45 a8	 mov	 DWORD PTR _pdcOldBmp$[ebp], eax

; 2632 : 	
; 2633 : 	// build a mask
; 2634 : 	ddc.PatBlt(0, 0, nWidth, nHeight, WHITENESS);

  0a3ce	68 62 00 ff 00	 push	 16711778		; 00ff0062H
  0a3d3	8b 55 18	 mov	 edx, DWORD PTR _nHeight$[ebp]
  0a3d6	52		 push	 edx
  0a3d7	8b 45 14	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0a3da	50		 push	 eax
  0a3db	6a 00		 push	 0
  0a3dd	6a 00		 push	 0
  0a3df	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a3e2	e8 00 00 00 00	 call	 ?PatBlt@CDC@@QAEHHHHHK@Z ; CDC::PatBlt

; 2635 : 	dc.SetBkColor(GetSysColor(COLOR_BTNFACE));

  0a3e7	8b f4		 mov	 esi, esp
  0a3e9	6a 0f		 push	 15			; 0000000fH
  0a3eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a3f1	3b f4		 cmp	 esi, esp
  0a3f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a3f8	50		 push	 eax
  0a3f9	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a3fc	e8 00 00 00 00	 call	 ?SetBkColor@CDC@@UAEKK@Z ; CDC::SetBkColor

; 2636 : 	ddc.BitBlt(0, 0, nWidth, nHeight, &dc, nXSrc,nYSrc, SRCCOPY);

  0a401	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0a406	8b 4d 24	 mov	 ecx, DWORD PTR _nYSrc$[ebp]
  0a409	51		 push	 ecx
  0a40a	8b 55 20	 mov	 edx, DWORD PTR _nXSrc$[ebp]
  0a40d	52		 push	 edx
  0a40e	8d 45 b0	 lea	 eax, DWORD PTR _dc$[ebp]
  0a411	50		 push	 eax
  0a412	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0a415	51		 push	 ecx
  0a416	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0a419	52		 push	 edx
  0a41a	6a 00		 push	 0
  0a41c	6a 00		 push	 0
  0a41e	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a421	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2637 : 	dc.SetBkColor(GetSysColor(COLOR_BTNHILIGHT));

  0a426	8b f4		 mov	 esi, esp
  0a428	6a 14		 push	 20			; 00000014H
  0a42a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a430	3b f4		 cmp	 esi, esp
  0a432	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a437	50		 push	 eax
  0a438	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a43b	e8 00 00 00 00	 call	 ?SetBkColor@CDC@@UAEKK@Z ; CDC::SetBkColor

; 2638 : 	ddc.BitBlt(0, 0, nWidth, nHeight, &dc, nXSrc,nYSrc, SRCPAINT);

  0a440	68 86 00 ee 00	 push	 15597702		; 00ee0086H
  0a445	8b 45 24	 mov	 eax, DWORD PTR _nYSrc$[ebp]
  0a448	50		 push	 eax
  0a449	8b 4d 20	 mov	 ecx, DWORD PTR _nXSrc$[ebp]
  0a44c	51		 push	 ecx
  0a44d	8d 55 b0	 lea	 edx, DWORD PTR _dc$[ebp]
  0a450	52		 push	 edx
  0a451	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0a454	50		 push	 eax
  0a455	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0a458	51		 push	 ecx
  0a459	6a 00		 push	 0
  0a45b	6a 00		 push	 0
  0a45d	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a460	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2639 : 	
; 2640 : 	// Copy the image from the toolbar into the memory DC
; 2641 : 	// and draw it (grayed) back into the toolbar.
; 2642 : 	dc.FillSolidRect(0,0, nWidth, nHeight, bgcolor);

  0a465	8b 55 28	 mov	 edx, DWORD PTR _bgcolor$[ebp]
  0a468	52		 push	 edx
  0a469	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0a46c	50		 push	 eax
  0a46d	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0a470	51		 push	 ecx
  0a471	6a 00		 push	 0
  0a473	6a 00		 push	 0
  0a475	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a478	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXHHHHK@Z ; CDC::FillSolidRect

; 2643 : 	//SK: Looks better on the old shell
; 2644 : 	dc.SetBkColor(RGB(0, 0, 0));

  0a47d	6a 00		 push	 0
  0a47f	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a482	e8 00 00 00 00	 call	 ?SetBkColor@CDC@@UAEKK@Z ; CDC::SetBkColor

; 2645 : 	dc.SetTextColor(RGB(255, 255, 255));

  0a487	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0a48c	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a48f	e8 00 00 00 00	 call	 ?SetTextColor@CDC@@UAEKK@Z ; CDC::SetTextColor

; 2646 : 	CBrush brShadow, brHilight;

  0a494	8d 4d 9c	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  0a497	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0a49c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0a4a0	8d 4d 8c	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  0a4a3	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0a4a8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 2647 : 	brHilight.CreateSolidBrush(GetSysColor(COLOR_BTNHILIGHT));

  0a4ac	8b f4		 mov	 esi, esp
  0a4ae	6a 14		 push	 20			; 00000014H
  0a4b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a4b6	3b f4		 cmp	 esi, esp
  0a4b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a4bd	50		 push	 eax
  0a4be	8d 4d 8c	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  0a4c1	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2648 : 	brShadow.CreateSolidBrush(GetSysColor(COLOR_BTNSHADOW));

  0a4c6	8b f4		 mov	 esi, esp
  0a4c8	6a 10		 push	 16			; 00000010H
  0a4ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a4d0	3b f4		 cmp	 esi, esp
  0a4d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a4d7	50		 push	 eax
  0a4d8	8d 4d 9c	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  0a4db	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2649 : 	CBrush * pOldBrush = dc.SelectObject(&brHilight);

  0a4e0	8d 55 8c	 lea	 edx, DWORD PTR _brHilight$[ebp]
  0a4e3	52		 push	 edx
  0a4e4	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a4e7	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
  0a4ec	89 45 84	 mov	 DWORD PTR _pOldBrush$[ebp], eax

; 2650 : 	dc.BitBlt(0,0, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);

  0a4ef	68 46 07 e2 00	 push	 14812998		; 00e20746H
  0a4f4	6a 00		 push	 0
  0a4f6	6a 00		 push	 0
  0a4f8	8d 45 dc	 lea	 eax, DWORD PTR _ddc$[ebp]
  0a4fb	50		 push	 eax
  0a4fc	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0a4ff	51		 push	 ecx
  0a500	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0a503	52		 push	 edx
  0a504	6a 00		 push	 0
  0a506	6a 00		 push	 0
  0a508	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a50b	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2651 : 	drawdc->BitBlt(nXDest+1,nYDest+1,nWidth, nHeight, &dc,0,0,SRCCOPY);

  0a510	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0a515	6a 00		 push	 0
  0a517	6a 00		 push	 0
  0a519	8d 45 b0	 lea	 eax, DWORD PTR _dc$[ebp]
  0a51c	50		 push	 eax
  0a51d	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0a520	51		 push	 ecx
  0a521	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0a524	52		 push	 edx
  0a525	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  0a528	83 c0 01	 add	 eax, 1
  0a52b	50		 push	 eax
  0a52c	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  0a52f	83 c1 01	 add	 ecx, 1
  0a532	51		 push	 ecx
  0a533	8b 4d 08	 mov	 ecx, DWORD PTR _drawdc$[ebp]
  0a536	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2652 : 	dc.BitBlt(1,1, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);

  0a53b	68 46 07 e2 00	 push	 14812998		; 00e20746H
  0a540	6a 00		 push	 0
  0a542	6a 00		 push	 0
  0a544	8d 55 dc	 lea	 edx, DWORD PTR _ddc$[ebp]
  0a547	52		 push	 edx
  0a548	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0a54b	50		 push	 eax
  0a54c	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0a54f	51		 push	 ecx
  0a550	6a 01		 push	 1
  0a552	6a 01		 push	 1
  0a554	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a557	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2653 : 	dc.SelectObject(&brShadow);

  0a55c	8d 55 9c	 lea	 edx, DWORD PTR _brShadow$[ebp]
  0a55f	52		 push	 edx
  0a560	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a563	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject

; 2654 : 	dc.BitBlt(0,0, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);

  0a568	68 46 07 e2 00	 push	 14812998		; 00e20746H
  0a56d	6a 00		 push	 0
  0a56f	6a 00		 push	 0
  0a571	8d 45 dc	 lea	 eax, DWORD PTR _ddc$[ebp]
  0a574	50		 push	 eax
  0a575	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0a578	51		 push	 ecx
  0a579	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0a57c	52		 push	 edx
  0a57d	6a 00		 push	 0
  0a57f	6a 00		 push	 0
  0a581	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a584	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2655 : 	drawdc->BitBlt(nXDest,nYDest,nWidth, nHeight, &dc,0,0,SRCCOPY);

  0a589	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0a58e	6a 00		 push	 0
  0a590	6a 00		 push	 0
  0a592	8d 45 b0	 lea	 eax, DWORD PTR _dc$[ebp]
  0a595	50		 push	 eax
  0a596	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0a599	51		 push	 ecx
  0a59a	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0a59d	52		 push	 edx
  0a59e	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  0a5a1	50		 push	 eax
  0a5a2	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  0a5a5	51		 push	 ecx
  0a5a6	8b 4d 08	 mov	 ecx, DWORD PTR _drawdc$[ebp]
  0a5a9	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2656 : 	// reset DCs
; 2657 : 	ddc.SelectObject(pddcOldBmp);

  0a5ae	8b 55 c4	 mov	 edx, DWORD PTR _pddcOldBmp$[ebp]
  0a5b1	52		 push	 edx
  0a5b2	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a5b5	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2658 : 	ddc.DeleteDC();

  0a5ba	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a5bd	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 2659 : 	dc.SelectObject(pOldBrush);

  0a5c2	8b 45 84	 mov	 eax, DWORD PTR _pOldBrush$[ebp]
  0a5c5	50		 push	 eax
  0a5c6	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a5c9	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject

; 2660 : 	dc.SelectObject(pdcOldBmp);

  0a5ce	8b 4d a8	 mov	 ecx, DWORD PTR _pdcOldBmp$[ebp]
  0a5d1	51		 push	 ecx
  0a5d2	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a5d5	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2661 : 	dc.DeleteDC();

  0a5da	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a5dd	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 2662 : 	
; 2663 : 	brShadow.DeleteObject();

  0a5e2	8d 4d 9c	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  0a5e5	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2664 : 	brHilight.DeleteObject();

  0a5ea	8d 4d 8c	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  0a5ed	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2665 : 	bwbmp.DeleteObject();

  0a5f2	8d 4d cc	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  0a5f5	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2666 : }

  0a5fa	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0a5fe	8d 4d 8c	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  0a601	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0a606	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0a60a	8d 4d 9c	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  0a60d	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0a612	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0a616	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a619	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0a61e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0a622	8d 4d cc	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  0a625	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0a62a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a631	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0a634	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0a639	52		 push	 edx
  0a63a	8b cd		 mov	 ecx, ebp
  0a63c	50		 push	 eax
  0a63d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192909
  0a643	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0a648	58		 pop	 eax
  0a649	5a		 pop	 edx
  0a64a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a64d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a654	5f		 pop	 edi
  0a655	5e		 pop	 esi
  0a656	83 c4 7c	 add	 esp, 124		; 0000007cH
  0a659	3b ec		 cmp	 ebp, esp
  0a65b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a660	8b e5		 mov	 esp, ebp
  0a662	5d		 pop	 ebp
  0a663	c2 24 00	 ret	 36			; 00000024H
$L192909:
  0a666	05 00 00 00	 DD	 5
  0a66a	00 00 00 00	 DD	 $L192908
$L192908:
  0a66e	dc ff ff ff	 DD	 -36			; ffffffdcH
  0a672	10 00 00 00	 DD	 16			; 00000010H
  0a676	00 00 00 00	 DD	 $L192902
  0a67a	cc ff ff ff	 DD	 -52			; ffffffccH
  0a67e	08 00 00 00	 DD	 8
  0a682	00 00 00 00	 DD	 $L192903
  0a686	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0a68a	10 00 00 00	 DD	 16			; 00000010H
  0a68e	00 00 00 00	 DD	 $L192904
  0a692	9c ff ff ff	 DD	 -100			; ffffff9cH
  0a696	08 00 00 00	 DD	 8
  0a69a	00 00 00 00	 DD	 $L192905
  0a69e	8c ff ff ff	 DD	 -116			; ffffff8cH
  0a6a2	08 00 00 00	 DD	 8
  0a6a6	00 00 00 00	 DD	 $L192906
$L192906:
  0a6aa	62		 DB	 98			; 00000062H
  0a6ab	72		 DB	 114			; 00000072H
  0a6ac	48		 DB	 72			; 00000048H
  0a6ad	69		 DB	 105			; 00000069H
  0a6ae	6c		 DB	 108			; 0000006cH
  0a6af	69		 DB	 105			; 00000069H
  0a6b0	67		 DB	 103			; 00000067H
  0a6b1	68		 DB	 104			; 00000068H
  0a6b2	74		 DB	 116			; 00000074H
  0a6b3	00		 DB	 0
$L192905:
  0a6b4	62		 DB	 98			; 00000062H
  0a6b5	72		 DB	 114			; 00000072H
  0a6b6	53		 DB	 83			; 00000053H
  0a6b7	68		 DB	 104			; 00000068H
  0a6b8	61		 DB	 97			; 00000061H
  0a6b9	64		 DB	 100			; 00000064H
  0a6ba	6f		 DB	 111			; 0000006fH
  0a6bb	77		 DB	 119			; 00000077H
  0a6bc	00		 DB	 0
$L192904:
  0a6bd	64		 DB	 100			; 00000064H
  0a6be	63		 DB	 99			; 00000063H
  0a6bf	00		 DB	 0
$L192903:
  0a6c0	62		 DB	 98			; 00000062H
  0a6c1	77		 DB	 119			; 00000077H
  0a6c2	62		 DB	 98			; 00000062H
  0a6c3	6d		 DB	 109			; 0000006dH
  0a6c4	70		 DB	 112			; 00000070H
  0a6c5	00		 DB	 0
$L192902:
  0a6c6	64		 DB	 100			; 00000064H
  0a6c7	64		 DB	 100			; 00000064H
  0a6c8	63		 DB	 99			; 00000063H
  0a6c9	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192895:
  00777	8d 4d dc	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0077a	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192896:
  0077f	8d 4d cc	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  00782	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L192897:
  00787	8d 4d b0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0078a	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L192898:
  0078f	8d 4d 9c	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  00792	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L192899:
  00797	8d 4d 8c	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  0079a	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z:
  0079f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192901
  007a4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ENDP ; BCMenu::DitherBlt2
xdata$x	SEGMENT
$T192919 DD	0ffffffffH
	DD	FLAT:$L192912
$T192914 DD	019930520H
	DD	01H
	DD	FLAT:$T192919
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_pdcOldBmp$ = -44					; size = 4
_dc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_drawdc$ = 8						; size = 4
_nXDest$ = 12						; size = 4
_nYDest$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_bmp$ = 28						; size = 4
_bgcolor$ = 32						; size = 4
?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z PROC NEAR ; BCMenu::DitherBlt3
; _this$ = ecx

; 2670 : {

  0a6d0	55		 push	 ebp
  0a6d1	8b ec		 mov	 ebp, esp
  0a6d3	6a ff		 push	 -1
  0a6d5	68 00 00 00 00	 push	 __ehhandler$?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z
  0a6da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0a6e0	50		 push	 eax
  0a6e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0a6e8	83 ec 20	 sub	 esp, 32			; 00000020H
  0a6eb	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0a6f0	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0a6f3	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0a6f6	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0a6f9	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0a6fc	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0a6ff	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0a702	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0a705	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0a708	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2671 : 	GetDisabledBitmap(bmp,bgcolor);

  0a70b	8b 45 20	 mov	 eax, DWORD PTR _bgcolor$[ebp]
  0a70e	50		 push	 eax
  0a70f	8b 4d 1c	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0a712	51		 push	 ecx
  0a713	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0a716	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 2672 : 	CDC dc;

  0a71b	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a71e	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0a723	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2673 : 	dc.CreateCompatibleDC(NULL);

  0a72a	6a 00		 push	 0
  0a72c	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a72f	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2674 : 	CBitmap * pdcOldBmp = dc.SelectObject(&bmp);

  0a734	8b 55 1c	 mov	 edx, DWORD PTR _bmp$[ebp]
  0a737	52		 push	 edx
  0a738	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a73b	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  0a740	89 45 d4	 mov	 DWORD PTR _pdcOldBmp$[ebp], eax

; 2675 : 	drawdc->BitBlt(nXDest,nYDest,nWidth, nHeight, &dc,0,0,SRCCOPY);

  0a743	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0a748	6a 00		 push	 0
  0a74a	6a 00		 push	 0
  0a74c	8d 45 dc	 lea	 eax, DWORD PTR _dc$[ebp]
  0a74f	50		 push	 eax
  0a750	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0a753	51		 push	 ecx
  0a754	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0a757	52		 push	 edx
  0a758	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  0a75b	50		 push	 eax
  0a75c	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  0a75f	51		 push	 ecx
  0a760	8b 4d 08	 mov	 ecx, DWORD PTR _drawdc$[ebp]
  0a763	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2676 : 	// reset DCs
; 2677 : 	dc.SelectObject(pdcOldBmp);

  0a768	8b 55 d4	 mov	 edx, DWORD PTR _pdcOldBmp$[ebp]
  0a76b	52		 push	 edx
  0a76c	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a76f	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2678 : 	dc.DeleteDC();

  0a774	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a777	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 2679 : }

  0a77c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a783	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  0a786	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0a78b	52		 push	 edx
  0a78c	8b cd		 mov	 ecx, ebp
  0a78e	50		 push	 eax
  0a78f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192918
  0a795	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0a79a	58		 pop	 eax
  0a79b	5a		 pop	 edx
  0a79c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a79f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a7a6	83 c4 2c	 add	 esp, 44			; 0000002cH
  0a7a9	3b ec		 cmp	 ebp, esp
  0a7ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a7b0	8b e5		 mov	 esp, ebp
  0a7b2	5d		 pop	 ebp
  0a7b3	c2 1c 00	 ret	 28			; 0000001cH
$L192918:
  0a7b6	01 00 00 00	 DD	 1
  0a7ba	00 00 00 00	 DD	 $L192917
$L192917:
  0a7be	dc ff ff ff	 DD	 -36			; ffffffdcH
  0a7c2	10 00 00 00	 DD	 16			; 00000010H
  0a7c6	00 00 00 00	 DD	 $L192915
$L192915:
  0a7ca	64		 DB	 100			; 00000064H
  0a7cb	63		 DB	 99			; 00000063H
  0a7cc	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192912:
  007a9	8d 4d dc	 lea	 ecx, DWORD PTR _dc$[ebp]
  007ac	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
__ehhandler$?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z:
  007b1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192914
  007b6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z ENDP ; BCMenu::DitherBlt3
PUBLIC	?SetDisableOldStyle@BCMenu@@QAEXXZ		; BCMenu::SetDisableOldStyle
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDisableOldStyle@BCMenu@@QAEXXZ PROC NEAR		; BCMenu::SetDisableOldStyle
; _this$ = ecx

; 2682 : {

  0a7d0	55		 push	 ebp
  0a7d1	8b ec		 mov	 ebp, esp
  0a7d3	51		 push	 ecx
  0a7d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0a7db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2683 : 	disable_old_style=TRUE;

  0a7de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0a7e1	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 2684 : }

  0a7e8	8b e5		 mov	 esp, ebp
  0a7ea	5d		 pop	 ebp
  0a7eb	c3		 ret	 0
?SetDisableOldStyle@BCMenu@@QAEXXZ ENDP			; BCMenu::SetDisableOldStyle
_TEXT	ENDS
PUBLIC	?UnSetDisableOldStyle@BCMenu@@QAEXXZ		; BCMenu::UnSetDisableOldStyle
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnSetDisableOldStyle@BCMenu@@QAEXXZ PROC NEAR		; BCMenu::UnSetDisableOldStyle
; _this$ = ecx

; 2687 : {

  0a7f0	55		 push	 ebp
  0a7f1	8b ec		 mov	 ebp, esp
  0a7f3	51		 push	 ecx
  0a7f4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0a7fb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2688 : 	disable_old_style=FALSE;

  0a7fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0a801	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 2689 : }

  0a808	8b e5		 mov	 esp, ebp
  0a80a	5d		 pop	 ebp
  0a80b	c3		 ret	 0
?UnSetDisableOldStyle@BCMenu@@QAEXXZ ENDP		; BCMenu::UnSetDisableOldStyle
_TEXT	ENDS
PUBLIC	?GetDisableOldStyle@BCMenu@@QAEHXZ		; BCMenu::GetDisableOldStyle
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisableOldStyle@BCMenu@@QAEHXZ PROC NEAR		; BCMenu::GetDisableOldStyle
; _this$ = ecx

; 2692 : {

  0a810	55		 push	 ebp
  0a811	8b ec		 mov	 ebp, esp
  0a813	51		 push	 ecx
  0a814	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0a81b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2693 : 	return(disable_old_style);

  0a81e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0a821	8b 40 38	 mov	 eax, DWORD PTR [eax+56]

; 2694 : }

  0a824	8b e5		 mov	 esp, ebp
  0a826	5d		 pop	 ebp
  0a827	c3		 ret	 0
?GetDisableOldStyle@BCMenu@@QAEHXZ ENDP			; BCMenu::GetDisableOldStyle
_TEXT	ENDS
PUBLIC	?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z ; BCMenu::NumBitmapColors
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv69 = -4						; size = 4
_lpBitmap$ = 8						; size = 4
?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z PROC NEAR ; BCMenu::NumBitmapColors

; 2698 : {

  0a830	55		 push	 ebp
  0a831	8b ec		 mov	 ebp, esp
  0a833	51		 push	 ecx
  0a834	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2699 : 	if ( lpBitmap->biClrUsed != 0)

  0a83b	8b 45 08	 mov	 eax, DWORD PTR _lpBitmap$[ebp]
  0a83e	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0a842	74 09		 je	 SHORT $L189826

; 2700 : 		return (WORD)lpBitmap->biClrUsed;

  0a844	8b 4d 08	 mov	 ecx, DWORD PTR _lpBitmap$[ebp]
  0a847	66 8b 41 20	 mov	 ax, WORD PTR [ecx+32]
  0a84b	eb 33		 jmp	 SHORT $L189825
$L189826:

; 2701 : 	
; 2702 : 	switch (lpBitmap->biBitCount){

  0a84d	8b 55 08	 mov	 edx, DWORD PTR _lpBitmap$[ebp]
  0a850	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  0a854	89 45 fc	 mov	 DWORD PTR tv69[ebp], eax
  0a857	83 7d fc 01	 cmp	 DWORD PTR tv69[ebp], 1
  0a85b	74 0e		 je	 SHORT $L189832
  0a85d	83 7d fc 04	 cmp	 DWORD PTR tv69[ebp], 4
  0a861	74 0e		 je	 SHORT $L189833
  0a863	83 7d fc 08	 cmp	 DWORD PTR tv69[ebp], 8
  0a867	74 0e		 je	 SHORT $L189834
  0a869	eb 12		 jmp	 SHORT $L189835
$L189832:

; 2703 : 		case 1:
; 2704 : 			return 2;

  0a86b	66 b8 02 00	 mov	 ax, 2
  0a86f	eb 0f		 jmp	 SHORT $L189825
$L189833:

; 2705 : 		case 4:
; 2706 : 			return 16;

  0a871	66 b8 10 00	 mov	 ax, 16			; 00000010H
  0a875	eb 09		 jmp	 SHORT $L189825
$L189834:

; 2707 : 		case 8:
; 2708 : 			return 256;

  0a877	66 b8 00 01	 mov	 ax, 256			; 00000100H
  0a87b	eb 03		 jmp	 SHORT $L189825
$L189835:

; 2709 : 		default:
; 2710 : 			return 0;

  0a87d	66 33 c0	 xor	 ax, ax
$L189825:

; 2711 : 	}
; 2712 : 	return 0;
; 2713 : }

  0a880	8b e5		 mov	 esp, ebp
  0a882	5d		 pop	 ebp
  0a883	c3		 ret	 0
?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z ENDP ; BCMenu::NumBitmapColors
_TEXT	ENDS
EXTRN	__imp__FreeResource@4:NEAR
EXTRN	?AfxLoadSysColorBitmap@@YGPAUHBITMAP__@@PAUHINSTANCE__@@PAUHRSRC__@@H@Z:NEAR ; AfxLoadSysColorBitmap
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_numcol$ = -20						; size = 2
_lpBitmap$ = -16					; size = 4
_hglb$ = -12						; size = 4
_hRsrc$ = -8						; size = 4
_hInst$ = -4						; size = 4
_nResourceId$ = 8					; size = 4
?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z PROC NEAR ; BCMenu::LoadSysColorBitmap

; 2716 : {

  0a890	55		 push	 ebp
  0a891	8b ec		 mov	 ebp, esp
  0a893	83 ec 14	 sub	 esp, 20			; 00000014H
  0a896	56		 push	 esi
  0a897	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0a89c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0a89f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0a8a2	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0a8a5	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0a8a8	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 2717 : 	HINSTANCE hInst = 
; 2718 : 		AfxFindResourceHandle(MAKEINTRESOURCE(nResourceId),RT_BITMAP);

  0a8ab	6a 02		 push	 2
  0a8ad	0f b7 45 08	 movzx	 eax, WORD PTR _nResourceId$[ebp]
  0a8b1	50		 push	 eax
  0a8b2	e8 00 00 00 00	 call	 ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z ; AfxFindResourceHandle
  0a8b7	89 45 fc	 mov	 DWORD PTR _hInst$[ebp], eax

; 2719 : 	HRSRC hRsrc = 
; 2720 : 		::FindResource(hInst,MAKEINTRESOURCE(nResourceId),RT_BITMAP);

  0a8ba	8b f4		 mov	 esi, esp
  0a8bc	6a 02		 push	 2
  0a8be	0f b7 4d 08	 movzx	 ecx, WORD PTR _nResourceId$[ebp]
  0a8c2	51		 push	 ecx
  0a8c3	8b 55 fc	 mov	 edx, DWORD PTR _hInst$[ebp]
  0a8c6	52		 push	 edx
  0a8c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  0a8cd	3b f4		 cmp	 esi, esp
  0a8cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a8d4	89 45 f8	 mov	 DWORD PTR _hRsrc$[ebp], eax

; 2721 : 	if (hRsrc == NULL){

  0a8d7	83 7d f8 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  0a8db	75 24		 jne	 SHORT $L189853

; 2722 : 		hInst = NULL;

  0a8dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hInst$[ebp], 0

; 2723 : 		hRsrc = ::FindResource(hInst,MAKEINTRESOURCE(nResourceId),RT_BITMAP);

  0a8e4	8b f4		 mov	 esi, esp
  0a8e6	6a 02		 push	 2
  0a8e8	0f b7 45 08	 movzx	 eax, WORD PTR _nResourceId$[ebp]
  0a8ec	50		 push	 eax
  0a8ed	8b 4d fc	 mov	 ecx, DWORD PTR _hInst$[ebp]
  0a8f0	51		 push	 ecx
  0a8f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  0a8f7	3b f4		 cmp	 esi, esp
  0a8f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a8fe	89 45 f8	 mov	 DWORD PTR _hRsrc$[ebp], eax
$L189853:

; 2724 : 	}
; 2725 : 	if (hRsrc == NULL)return NULL;

  0a901	83 7d f8 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  0a905	75 07		 jne	 SHORT $L189860
  0a907	33 c0		 xor	 eax, eax
  0a909	e9 83 00 00 00	 jmp	 $L189838
$L189860:

; 2726 : 
; 2727 : 	// determine how many colors in the bitmap
; 2728 : 	HGLOBAL hglb;
; 2729 : 	if ((hglb = LoadResource(hInst, hRsrc)) == NULL)

  0a90e	8b f4		 mov	 esi, esp
  0a910	8b 55 f8	 mov	 edx, DWORD PTR _hRsrc$[ebp]
  0a913	52		 push	 edx
  0a914	8b 45 fc	 mov	 eax, DWORD PTR _hInst$[ebp]
  0a917	50		 push	 eax
  0a918	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  0a91e	3b f4		 cmp	 esi, esp
  0a920	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a925	89 45 f4	 mov	 DWORD PTR _hglb$[ebp], eax
  0a928	83 7d f4 00	 cmp	 DWORD PTR _hglb$[ebp], 0
  0a92c	75 04		 jne	 SHORT $L189862

; 2730 : 		return NULL;

  0a92e	33 c0		 xor	 eax, eax
  0a930	eb 5f		 jmp	 SHORT $L189838
$L189862:

; 2731 : 	LPBITMAPINFOHEADER lpBitmap = (LPBITMAPINFOHEADER)LockResource(hglb);

  0a932	8b f4		 mov	 esi, esp
  0a934	8b 4d f4	 mov	 ecx, DWORD PTR _hglb$[ebp]
  0a937	51		 push	 ecx
  0a938	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  0a93e	3b f4		 cmp	 esi, esp
  0a940	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a945	89 45 f0	 mov	 DWORD PTR _lpBitmap$[ebp], eax

; 2732 : 	if (lpBitmap == NULL)return NULL;

  0a948	83 7d f0 00	 cmp	 DWORD PTR _lpBitmap$[ebp], 0
  0a94c	75 04		 jne	 SHORT $L189865
  0a94e	33 c0		 xor	 eax, eax
  0a950	eb 3f		 jmp	 SHORT $L189838
$L189865:

; 2733 : 	WORD numcol = NumBitmapColors(lpBitmap);

  0a952	8b 55 f0	 mov	 edx, DWORD PTR _lpBitmap$[ebp]
  0a955	52		 push	 edx
  0a956	e8 00 00 00 00	 call	 ?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z ; BCMenu::NumBitmapColors
  0a95b	83 c4 04	 add	 esp, 4
  0a95e	66 89 45 ec	 mov	 WORD PTR _numcol$[ebp], ax

; 2734 : 	::FreeResource(hglb);

  0a962	8b f4		 mov	 esi, esp
  0a964	8b 45 f4	 mov	 eax, DWORD PTR _hglb$[ebp]
  0a967	50		 push	 eax
  0a968	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4
  0a96e	3b f4		 cmp	 esi, esp
  0a970	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2735 : 
; 2736 : 	if(numcol!=16)return(NULL);

  0a975	0f b7 4d ec	 movzx	 ecx, WORD PTR _numcol$[ebp]
  0a979	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0a97c	74 04		 je	 SHORT $L189867
  0a97e	33 c0		 xor	 eax, eax
  0a980	eb 0f		 jmp	 SHORT $L189838
$L189867:

; 2737 : 
; 2738 : 	return AfxLoadSysColorBitmap(hInst, hRsrc, FALSE);

  0a982	6a 00		 push	 0
  0a984	8b 55 f8	 mov	 edx, DWORD PTR _hRsrc$[ebp]
  0a987	52		 push	 edx
  0a988	8b 45 fc	 mov	 eax, DWORD PTR _hInst$[ebp]
  0a98b	50		 push	 eax
  0a98c	e8 00 00 00 00	 call	 ?AfxLoadSysColorBitmap@@YGPAUHBITMAP__@@PAUHINSTANCE__@@PAUHRSRC__@@H@Z ; AfxLoadSysColorBitmap
$L189838:

; 2739 : }

  0a991	5e		 pop	 esi
  0a992	83 c4 14	 add	 esp, 20			; 00000014H
  0a995	3b ec		 cmp	 ebp, esp
  0a997	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0a99c	8b e5		 mov	 esp, ebp
  0a99e	5d		 pop	 ebp
  0a99f	c3		 ret	 0
?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z ENDP	; BCMenu::LoadSysColorBitmap
_TEXT	ENDS
PUBLIC	?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
PUBLIC	?RemoveMenu@BCMenu@@QAEHII@Z			; BCMenu::RemoveMenu
EXTRN	?RemoveMenu@CMenu@@QAEHII@Z:NEAR		; CMenu::RemoveMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv226 = -112						; size = 4
tv214 = -108						; size = 4
tv147 = -104						; size = 4
tv82 = -100						; size = 4
$T192939 = -96						; size = 4
$T192938 = -92						; size = 4
$T192935 = -88						; size = 4
$T192934 = -84						; size = 4
$T192931 = -80						; size = 4
$T192930 = -76						; size = 4
$T192927 = -72						; size = 4
$T192926 = -68						; size = 4
_pMenu$189920 = -64					; size = 4
_iPosition$189919 = -56					; size = 4
_i$189908 = -48						; size = 4
_i$189904 = -44						; size = 4
_num$189903 = -40					; size = 4
_n$189898 = -36						; size = 4
_numAllSubMenus$189897 = -32				; size = 4
_m$189892 = -28						; size = 4
_numSubMenus$189891 = -24				; size = 4
_i$189883 = -20						; size = 4
_uiCommandId$189882 = -16				; size = 4
_pSubMenu$189879 = -12					; size = 4
_uint$189874 = -8					; size = 4
_this$ = -4						; size = 4
_uiId$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?RemoveMenu@BCMenu@@QAEHII@Z PROC NEAR			; BCMenu::RemoveMenu
; _this$ = ecx

; 2742 : {

  0a9a0	55		 push	 ebp
  0a9a1	8b ec		 mov	 ebp, esp
  0a9a3	83 ec 70	 sub	 esp, 112		; 00000070H
  0a9a6	56		 push	 esi
  0a9a7	57		 push	 edi
  0a9a8	51		 push	 ecx
  0a9a9	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0a9ac	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0a9b1	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0a9b6	f3 ab		 rep stosd
  0a9b8	59		 pop	 ecx
  0a9b9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2743 : 	if(MF_BYPOSITION&nFlags){

  0a9bc	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0a9bf	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0a9c4	0f 84 c7 02 00
	00		 je	 $L189873

; 2744 : 		UINT uint = GetMenuState(uiId,MF_BYPOSITION);

  0a9ca	68 00 04 00 00	 push	 1024			; 00000400H
  0a9cf	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0a9d2	51		 push	 ecx
  0a9d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0a9d6	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  0a9db	89 45 f8	 mov	 DWORD PTR _uint$189874[ebp], eax

; 2745 : 		if(uint&MF_SEPARATOR && !(uint&MF_POPUP)){

  0a9de	8b 55 f8	 mov	 edx, DWORD PTR _uint$189874[ebp]
  0a9e1	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  0a9e7	74 52		 je	 SHORT $L189875
  0a9e9	8b 45 f8	 mov	 eax, DWORD PTR _uint$189874[ebp]
  0a9ec	83 e0 10	 and	 eax, 16			; 00000010H
  0a9ef	75 4a		 jne	 SHORT $L189875

; 2746 : 			delete m_MenuList.GetAt(uiId);

  0a9f1	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0a9f4	51		 push	 ecx
  0a9f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0a9f8	83 c1 08	 add	 ecx, 8
  0a9fb	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0aa00	89 45 b8	 mov	 DWORD PTR $T192927[ebp], eax
  0aa03	8b 55 b8	 mov	 edx, DWORD PTR $T192927[ebp]
  0aa06	89 55 bc	 mov	 DWORD PTR $T192926[ebp], edx
  0aa09	83 7d bc 00	 cmp	 DWORD PTR $T192926[ebp], 0
  0aa0d	74 0f		 je	 SHORT $L192928
  0aa0f	6a 01		 push	 1
  0aa11	8b 4d bc	 mov	 ecx, DWORD PTR $T192926[ebp]
  0aa14	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0aa19	89 45 9c	 mov	 DWORD PTR tv82[ebp], eax
  0aa1c	eb 07		 jmp	 SHORT $L192929
$L192928:
  0aa1e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L192929:

; 2747 : 			m_MenuList.RemoveAt(uiId);

  0aa25	6a 01		 push	 1
  0aa27	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  0aa2a	50		 push	 eax
  0aa2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa2e	83 c1 08	 add	 ecx, 8
  0aa31	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2748 : 		}
; 2749 : 		else{

  0aa36	e9 54 02 00 00	 jmp	 $L189878
$L189875:

; 2750 : 			BCMenu* pSubMenu = (BCMenu*) GetSubMenu(uiId);

  0aa3b	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0aa3e	51		 push	 ecx
  0aa3f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa42	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0aa47	89 45 f4	 mov	 DWORD PTR _pSubMenu$189879[ebp], eax

; 2751 : 			if(NULL==pSubMenu){

  0aa4a	83 7d f4 00	 cmp	 DWORD PTR _pSubMenu$189879[ebp], 0
  0aa4e	0f 85 98 00 00
	00		 jne	 $L189881

; 2752 : 				UINT uiCommandId = GetMenuItemID(uiId);

  0aa54	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  0aa57	52		 push	 edx
  0aa58	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa5b	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  0aa60	89 45 f0	 mov	 DWORD PTR _uiCommandId$189882[ebp], eax

; 2753 : 				for(int i=0;i<m_MenuList.GetSize(); i++){

  0aa63	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$189883[ebp], 0
  0aa6a	eb 09		 jmp	 SHORT $L189884
$L189885:
  0aa6c	8b 45 ec	 mov	 eax, DWORD PTR _i$189883[ebp]
  0aa6f	83 c0 01	 add	 eax, 1
  0aa72	89 45 ec	 mov	 DWORD PTR _i$189883[ebp], eax
$L189884:
  0aa75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa78	83 c1 08	 add	 ecx, 8
  0aa7b	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  0aa80	39 45 ec	 cmp	 DWORD PTR _i$189883[ebp], eax
  0aa83	7d 62		 jge	 SHORT $L189886

; 2754 : 					if(m_MenuList[i]->nID==uiCommandId){

  0aa85	8b 4d ec	 mov	 ecx, DWORD PTR _i$189883[ebp]
  0aa88	51		 push	 ecx
  0aa89	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aa8c	83 c1 08	 add	 ecx, 8
  0aa8f	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0aa94	8b 10		 mov	 edx, DWORD PTR [eax]
  0aa96	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0aa99	3b 45 f0	 cmp	 eax, DWORD PTR _uiCommandId$189882[ebp]
  0aa9c	75 47		 jne	 SHORT $L189887

; 2755 : 						delete m_MenuList.GetAt(i);

  0aa9e	8b 4d ec	 mov	 ecx, DWORD PTR _i$189883[ebp]
  0aaa1	51		 push	 ecx
  0aaa2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aaa5	83 c1 08	 add	 ecx, 8
  0aaa8	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0aaad	89 45 b0	 mov	 DWORD PTR $T192931[ebp], eax
  0aab0	8b 55 b0	 mov	 edx, DWORD PTR $T192931[ebp]
  0aab3	89 55 b4	 mov	 DWORD PTR $T192930[ebp], edx
  0aab6	83 7d b4 00	 cmp	 DWORD PTR $T192930[ebp], 0
  0aaba	74 0f		 je	 SHORT $L192932
  0aabc	6a 01		 push	 1
  0aabe	8b 4d b4	 mov	 ecx, DWORD PTR $T192930[ebp]
  0aac1	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0aac6	89 45 98	 mov	 DWORD PTR tv147[ebp], eax
  0aac9	eb 07		 jmp	 SHORT $L192933
$L192932:
  0aacb	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
$L192933:

; 2756 : 						m_MenuList.RemoveAt(i);

  0aad2	6a 01		 push	 1
  0aad4	8b 45 ec	 mov	 eax, DWORD PTR _i$189883[ebp]
  0aad7	50		 push	 eax
  0aad8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aadb	83 c1 08	 add	 ecx, 8
  0aade	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2757 : 						break;

  0aae3	eb 02		 jmp	 SHORT $L189886
$L189887:

; 2758 : 					}
; 2759 : 				}

  0aae5	eb 85		 jmp	 SHORT $L189885
$L189886:

; 2760 : 			}
; 2761 : 			else{

  0aae7	e9 a3 01 00 00	 jmp	 $L189878
$L189881:

; 2762 : 				int numSubMenus = m_SubMenus.GetUpperBound();

  0aaec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aaef	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0aaf2	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0aaf7	89 45 e8	 mov	 DWORD PTR _numSubMenus$189891[ebp], eax

; 2763 : 				for(int m = numSubMenus; m >= 0; m--){

  0aafa	8b 4d e8	 mov	 ecx, DWORD PTR _numSubMenus$189891[ebp]
  0aafd	89 4d e4	 mov	 DWORD PTR _m$189892[ebp], ecx
  0ab00	eb 09		 jmp	 SHORT $L189893
$L189894:
  0ab02	8b 55 e4	 mov	 edx, DWORD PTR _m$189892[ebp]
  0ab05	83 ea 01	 sub	 edx, 1
  0ab08	89 55 e4	 mov	 DWORD PTR _m$189892[ebp], edx
$L189893:
  0ab0b	83 7d e4 00	 cmp	 DWORD PTR _m$189892[ebp], 0
  0ab0f	0f 8c 8a 00 00
	00		 jl	 $L189895

; 2764 : 					if(m_SubMenus[m]==pSubMenu->m_hMenu){

  0ab15	8b 45 e4	 mov	 eax, DWORD PTR _m$189892[ebp]
  0ab18	50		 push	 eax
  0ab19	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ab1c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0ab1f	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0ab24	8b 4d f4	 mov	 ecx, DWORD PTR _pSubMenu$189879[ebp]
  0ab27	8b 10		 mov	 edx, DWORD PTR [eax]
  0ab29	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0ab2c	75 6c		 jne	 SHORT $L189896

; 2765 : 						int numAllSubMenus = m_AllSubMenus.GetUpperBound();

  0ab2e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0ab33	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0ab38	89 45 e0	 mov	 DWORD PTR _numAllSubMenus$189897[ebp], eax

; 2766 : 						for(int n = numAllSubMenus; n>= 0; n--){

  0ab3b	8b 45 e0	 mov	 eax, DWORD PTR _numAllSubMenus$189897[ebp]
  0ab3e	89 45 dc	 mov	 DWORD PTR _n$189898[ebp], eax
  0ab41	eb 09		 jmp	 SHORT $L189899
$L189900:
  0ab43	8b 4d dc	 mov	 ecx, DWORD PTR _n$189898[ebp]
  0ab46	83 e9 01	 sub	 ecx, 1
  0ab49	89 4d dc	 mov	 DWORD PTR _n$189898[ebp], ecx
$L189899:
  0ab4c	83 7d dc 00	 cmp	 DWORD PTR _n$189898[ebp], 0
  0ab50	7c 37		 jl	 SHORT $L189901

; 2767 : 							if(m_AllSubMenus[n]==m_SubMenus[m])m_AllSubMenus.RemoveAt(n);

  0ab52	8b 55 dc	 mov	 edx, DWORD PTR _n$189898[ebp]
  0ab55	52		 push	 edx
  0ab56	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0ab5b	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0ab60	8b f0		 mov	 esi, eax
  0ab62	8b 45 e4	 mov	 eax, DWORD PTR _m$189892[ebp]
  0ab65	50		 push	 eax
  0ab66	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ab69	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0ab6c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0ab71	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0ab73	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0ab75	75 10		 jne	 SHORT $L189902
  0ab77	6a 01		 push	 1
  0ab79	8b 55 dc	 mov	 edx, DWORD PTR _n$189898[ebp]
  0ab7c	52		 push	 edx
  0ab7d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0ab82	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L189902:

; 2768 : 						}

  0ab87	eb ba		 jmp	 SHORT $L189900
$L189901:

; 2769 : 						m_SubMenus.RemoveAt(m);

  0ab89	6a 01		 push	 1
  0ab8b	8b 45 e4	 mov	 eax, DWORD PTR _m$189892[ebp]
  0ab8e	50		 push	 eax
  0ab8f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ab92	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0ab95	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L189896:

; 2770 : 					}
; 2771 : 				}

  0ab9a	e9 63 ff ff ff	 jmp	 $L189894
$L189895:

; 2772 : 				int num = pSubMenu->GetMenuItemCount();

  0ab9f	8b 4d f4	 mov	 ecx, DWORD PTR _pSubMenu$189879[ebp]
  0aba2	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0aba7	89 45 d8	 mov	 DWORD PTR _num$189903[ebp], eax

; 2773 : 				for(int i = num-1;i >= 0; --i)

  0abaa	8b 4d d8	 mov	 ecx, DWORD PTR _num$189903[ebp]
  0abad	83 e9 01	 sub	 ecx, 1
  0abb0	89 4d d4	 mov	 DWORD PTR _i$189904[ebp], ecx
  0abb3	eb 09		 jmp	 SHORT $L189905
$L189906:
  0abb5	8b 55 d4	 mov	 edx, DWORD PTR _i$189904[ebp]
  0abb8	83 ea 01	 sub	 edx, 1
  0abbb	89 55 d4	 mov	 DWORD PTR _i$189904[ebp], edx
$L189905:
  0abbe	83 7d d4 00	 cmp	 DWORD PTR _i$189904[ebp], 0
  0abc2	7c 13		 jl	 SHORT $L189907

; 2774 : 					pSubMenu->RemoveMenu(i,MF_BYPOSITION);

  0abc4	68 00 04 00 00	 push	 1024			; 00000400H
  0abc9	8b 45 d4	 mov	 eax, DWORD PTR _i$189904[ebp]
  0abcc	50		 push	 eax
  0abcd	8b 4d f4	 mov	 ecx, DWORD PTR _pSubMenu$189879[ebp]
  0abd0	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
  0abd5	eb de		 jmp	 SHORT $L189906
$L189907:

; 2775 : 				for(int i = m_MenuList.GetUpperBound();i >= 0;i--){

  0abd7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0abda	83 c1 08	 add	 ecx, 8
  0abdd	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0abe2	89 45 d0	 mov	 DWORD PTR _i$189908[ebp], eax
  0abe5	eb 09		 jmp	 SHORT $L189909
$L189910:
  0abe7	8b 4d d0	 mov	 ecx, DWORD PTR _i$189908[ebp]
  0abea	83 e9 01	 sub	 ecx, 1
  0abed	89 4d d0	 mov	 DWORD PTR _i$189908[ebp], ecx
$L189909:
  0abf0	83 7d d0 00	 cmp	 DWORD PTR _i$189908[ebp], 0
  0abf4	7c 65		 jl	 SHORT $L189911

; 2776 : 					if(m_MenuList[i]->nID==(UINT)pSubMenu->m_hMenu){

  0abf6	8b 55 d0	 mov	 edx, DWORD PTR _i$189908[ebp]
  0abf9	52		 push	 edx
  0abfa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0abfd	83 c1 08	 add	 ecx, 8
  0ac00	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0ac05	8b 00		 mov	 eax, DWORD PTR [eax]
  0ac07	8b 4d f4	 mov	 ecx, DWORD PTR _pSubMenu$189879[ebp]
  0ac0a	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0ac0d	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0ac10	75 47		 jne	 SHORT $L189913

; 2777 : 						delete m_MenuList.GetAt(i);

  0ac12	8b 45 d0	 mov	 eax, DWORD PTR _i$189908[ebp]
  0ac15	50		 push	 eax
  0ac16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ac19	83 c1 08	 add	 ecx, 8
  0ac1c	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0ac21	89 45 a8	 mov	 DWORD PTR $T192935[ebp], eax
  0ac24	8b 4d a8	 mov	 ecx, DWORD PTR $T192935[ebp]
  0ac27	89 4d ac	 mov	 DWORD PTR $T192934[ebp], ecx
  0ac2a	83 7d ac 00	 cmp	 DWORD PTR $T192934[ebp], 0
  0ac2e	74 0f		 je	 SHORT $L192936
  0ac30	6a 01		 push	 1
  0ac32	8b 4d ac	 mov	 ecx, DWORD PTR $T192934[ebp]
  0ac35	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0ac3a	89 45 94	 mov	 DWORD PTR tv214[ebp], eax
  0ac3d	eb 07		 jmp	 SHORT $L192937
$L192936:
  0ac3f	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$L192937:

; 2778 : 						m_MenuList.RemoveAt(i);

  0ac46	6a 01		 push	 1
  0ac48	8b 55 d0	 mov	 edx, DWORD PTR _i$189908[ebp]
  0ac4b	52		 push	 edx
  0ac4c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0ac4f	83 c1 08	 add	 ecx, 8
  0ac52	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2779 : 						break;

  0ac57	eb 02		 jmp	 SHORT $L189911
$L189913:

; 2780 : 					}
; 2781 : 				}

  0ac59	eb 8c		 jmp	 SHORT $L189910
$L189911:

; 2782 : 				delete pSubMenu; 

  0ac5b	8b 45 f4	 mov	 eax, DWORD PTR _pSubMenu$189879[ebp]
  0ac5e	89 45 a0	 mov	 DWORD PTR $T192939[ebp], eax
  0ac61	8b 4d a0	 mov	 ecx, DWORD PTR $T192939[ebp]
  0ac64	89 4d a4	 mov	 DWORD PTR $T192938[ebp], ecx
  0ac67	83 7d a4 00	 cmp	 DWORD PTR $T192938[ebp], 0
  0ac6b	74 1b		 je	 SHORT $L192940
  0ac6d	8b f4		 mov	 esi, esp
  0ac6f	6a 01		 push	 1
  0ac71	8b 55 a4	 mov	 edx, DWORD PTR $T192938[ebp]
  0ac74	8b 02		 mov	 eax, DWORD PTR [edx]
  0ac76	8b 4d a4	 mov	 ecx, DWORD PTR $T192938[ebp]
  0ac79	ff 50 04	 call	 DWORD PTR [eax+4]
  0ac7c	3b f4		 cmp	 esi, esp
  0ac7e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0ac83	89 45 90	 mov	 DWORD PTR tv226[ebp], eax
  0ac86	eb 07		 jmp	 SHORT $L189878
$L192940:
  0ac88	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$L189878:

; 2783 : 			}
; 2784 : 		}
; 2785 : 	}
; 2786 : 	else{

  0ac8f	eb 33		 jmp	 SHORT $L189918
$L189873:

; 2787 : 		int iPosition =0;

  0ac91	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iPosition$189919[ebp], 0

; 2788 : 		BCMenu* pMenu = FindMenuOption(uiId,iPosition);

  0ac98	8d 4d c8	 lea	 ecx, DWORD PTR _iPosition$189919[ebp]
  0ac9b	51		 push	 ecx
  0ac9c	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  0ac9f	52		 push	 edx
  0aca0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0aca3	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  0aca8	89 45 c0	 mov	 DWORD PTR _pMenu$189920[ebp], eax

; 2789 : 		// bug fix RIA 14th September 2000 
; 2790 : 		// failed to return correct value on call to remove menu as the item was 
; 2791 : 		// removed twice. The second time its not found 
; 2792 : 		// so a value of 0 was being returned 
; 2793 : 		if(pMenu) return pMenu->RemoveMenu(iPosition,MF_BYPOSITION); // added return 

  0acab	83 7d c0 00	 cmp	 DWORD PTR _pMenu$189920[ebp], 0
  0acaf	74 13		 je	 SHORT $L189918
  0acb1	68 00 04 00 00	 push	 1024			; 00000400H
  0acb6	8b 45 c8	 mov	 eax, DWORD PTR _iPosition$189919[ebp]
  0acb9	50		 push	 eax
  0acba	8b 4d c0	 mov	 ecx, DWORD PTR _pMenu$189920[ebp]
  0acbd	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
  0acc2	eb 10		 jmp	 SHORT $L189872
$L189918:

; 2794 : 	}
; 2795 : 	return CMenu::RemoveMenu(uiId,nFlags);

  0acc4	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  0acc7	51		 push	 ecx
  0acc8	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  0accb	52		 push	 edx
  0accc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0accf	e8 00 00 00 00	 call	 ?RemoveMenu@CMenu@@QAEHII@Z ; CMenu::RemoveMenu
$L189872:

; 2796 : }

  0acd4	52		 push	 edx
  0acd5	8b cd		 mov	 ecx, ebp
  0acd7	50		 push	 eax
  0acd8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192944
  0acde	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0ace3	58		 pop	 eax
  0ace4	5a		 pop	 edx
  0ace5	5f		 pop	 edi
  0ace6	5e		 pop	 esi
  0ace7	83 c4 70	 add	 esp, 112		; 00000070H
  0acea	3b ec		 cmp	 ebp, esp
  0acec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0acf1	8b e5		 mov	 esp, ebp
  0acf3	5d		 pop	 ebp
  0acf4	c2 08 00	 ret	 8
$L192944:
  0acf7	01 00 00 00	 DD	 1
  0acfb	00 00 00 00	 DD	 $L192943
$L192943:
  0acff	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0ad03	04 00 00 00	 DD	 4
  0ad07	00 00 00 00	 DD	 $L192942
$L192942:
  0ad0b	69		 DB	 105			; 00000069H
  0ad0c	50		 DB	 80			; 00000050H
  0ad0d	6f		 DB	 111			; 0000006fH
  0ad0e	73		 DB	 115			; 00000073H
  0ad0f	69		 DB	 105			; 00000069H
  0ad10	74		 DB	 116			; 00000074H
  0ad11	69		 DB	 105			; 00000069H
  0ad12	6f		 DB	 111			; 0000006fH
  0ad13	6e		 DB	 110			; 0000006eH
  0ad14	00		 DB	 0
?RemoveMenu@BCMenu@@QAEHII@Z ENDP			; BCMenu::RemoveMenu
_TEXT	ENDS
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ; ATL::operator==
PUBLIC	?DeleteMenu@BCMenu@@QAEHII@Z			; BCMenu::DeleteMenu
EXTRN	?DeleteMenu@CMenu@@QAEHII@Z:NEAR		; CMenu::DeleteMenu
xdata$x	SEGMENT
$T192970 DD	0ffffffffH
	DD	FLAT:$L192962
$T192964 DD	019930520H
	DD	01H
	DD	FLAT:$T192970
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv245 = -140						; size = 4
tv233 = -136						; size = 4
tv166 = -132						; size = 4
tv133 = -128						; size = 4
$T192959 = -124						; size = 4
$T192958 = -120						; size = 4
$T192955 = -116						; size = 4
$T192954 = -112						; size = 4
$T192951 = -108						; size = 4
$T192950 = -104						; size = 4
$T192947 = -100						; size = 4
$T192946 = -96						; size = 4
_pMenu$189981 = -92					; size = 4
_iPosition$189980 = -84					; size = 4
_i$189969 = -76						; size = 4
_i$189965 = -72						; size = 4
_num$189964 = -68					; size = 4
_n$189959 = -64						; size = 4
_numAllSubMenus$189958 = -60				; size = 4
_m$189953 = -56						; size = 4
_numSubMenus$189952 = -52				; size = 4
_i$189944 = -48						; size = 4
_uiCommandId$189943 = -44				; size = 4
_pSubMenu$189940 = -40					; size = 4
_str$189933 = -32					; size = 4
_menulistsize$189930 = -24				; size = 4
_uint$189928 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_uiId$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?DeleteMenu@BCMenu@@QAEHII@Z PROC NEAR			; BCMenu::DeleteMenu
; _this$ = ecx

; 2799 : {

  0ad20	55		 push	 ebp
  0ad21	8b ec		 mov	 ebp, esp
  0ad23	6a ff		 push	 -1
  0ad25	68 00 00 00 00	 push	 __ehhandler$?DeleteMenu@BCMenu@@QAEHII@Z
  0ad2a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0ad30	50		 push	 eax
  0ad31	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0ad38	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0ad3e	56		 push	 esi
  0ad3f	57		 push	 edi
  0ad40	51		 push	 ecx
  0ad41	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  0ad47	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0ad4c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0ad51	f3 ab		 rep stosd
  0ad53	59		 pop	 ecx
  0ad54	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2800 : 	if(MF_BYPOSITION&nFlags){

  0ad57	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0ad5a	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0ad5f	0f 84 50 03 00
	00		 je	 $L189927

; 2801 : 		UINT uint = GetMenuState(uiId,MF_BYPOSITION);

  0ad65	68 00 04 00 00	 push	 1024			; 00000400H
  0ad6a	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0ad6d	51		 push	 ecx
  0ad6e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ad71	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  0ad76	89 45 ec	 mov	 DWORD PTR _uint$189928[ebp], eax

; 2802 : 		if(uint&MF_SEPARATOR && !(uint&MF_POPUP)){

  0ad79	8b 55 ec	 mov	 edx, DWORD PTR _uint$189928[ebp]
  0ad7c	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  0ad82	0f 84 c2 00 00
	00		 je	 $L189929
  0ad88	8b 45 ec	 mov	 eax, DWORD PTR _uint$189928[ebp]
  0ad8b	83 e0 10	 and	 eax, 16			; 00000010H
  0ad8e	0f 85 b6 00 00
	00		 jne	 $L189929

; 2803 : 			// make sure it's a separator
; 2804 : 			int menulistsize=m_MenuList.GetSize();	

  0ad94	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ad97	83 c1 08	 add	 ecx, 8
  0ad9a	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  0ad9f	89 45 e8	 mov	 DWORD PTR _menulistsize$189930[ebp], eax

; 2805 : 			if(uiId<(UINT)menulistsize){

  0ada2	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0ada5	3b 4d e8	 cmp	 ecx, DWORD PTR _menulistsize$189930[ebp]
  0ada8	0f 83 97 00 00
	00		 jae	 $L189932

; 2806 : 				CString str=m_MenuList[uiId]->GetString();

  0adae	8d 55 e0	 lea	 edx, DWORD PTR _str$189933[ebp]
  0adb1	52		 push	 edx
  0adb2	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  0adb5	50		 push	 eax
  0adb6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0adb9	83 c1 08	 add	 ecx, 8
  0adbc	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0adc1	8b 08		 mov	 ecx, DWORD PTR [eax]
  0adc3	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  0adc8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2807 : 				if(str==""){

  0adcf	68 00 00 00 00	 push	 OFFSET FLAT:$SG189936
  0add4	8d 4d e0	 lea	 ecx, DWORD PTR _str$189933[ebp]
  0add7	51		 push	 ecx
  0add8	e8 00 00 00 00	 call	 ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ; ATL::operator==
  0addd	83 c4 08	 add	 esp, 8
  0ade0	0f b6 d0	 movzx	 edx, al
  0ade3	85 d2		 test	 edx, edx
  0ade5	74 45		 je	 SHORT $L189935

; 2808 : 					delete m_MenuList.GetAt(uiId);

  0ade7	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  0adea	50		 push	 eax
  0adeb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0adee	83 c1 08	 add	 ecx, 8
  0adf1	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0adf6	89 45 9c	 mov	 DWORD PTR $T192947[ebp], eax
  0adf9	8b 4d 9c	 mov	 ecx, DWORD PTR $T192947[ebp]
  0adfc	89 4d a0	 mov	 DWORD PTR $T192946[ebp], ecx
  0adff	83 7d a0 00	 cmp	 DWORD PTR $T192946[ebp], 0
  0ae03	74 0f		 je	 SHORT $L192948
  0ae05	6a 01		 push	 1
  0ae07	8b 4d a0	 mov	 ecx, DWORD PTR $T192946[ebp]
  0ae0a	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0ae0f	89 45 80	 mov	 DWORD PTR tv133[ebp], eax
  0ae12	eb 07		 jmp	 SHORT $L192949
$L192948:
  0ae14	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L192949:

; 2809 : 					m_MenuList.RemoveAt(uiId);

  0ae1b	6a 01		 push	 1
  0ae1d	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  0ae20	52		 push	 edx
  0ae21	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ae24	83 c1 08	 add	 ecx, 8
  0ae27	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L189935:

; 2810 : 				}
; 2811 : 			}

  0ae2c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0ae33	8b f4		 mov	 esi, esp
  0ae35	8d 4d e0	 lea	 ecx, DWORD PTR _str$189933[ebp]
  0ae38	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0ae3e	3b f4		 cmp	 esi, esp
  0ae40	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L189932:

; 2812 : 		}
; 2813 : 		else{

  0ae45	e9 69 02 00 00	 jmp	 $L189939
$L189929:

; 2814 : 			BCMenu* pSubMenu = (BCMenu*) GetSubMenu(uiId);

  0ae4a	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  0ae4d	50		 push	 eax
  0ae4e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ae51	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0ae56	89 45 d8	 mov	 DWORD PTR _pSubMenu$189940[ebp], eax

; 2815 : 			if(NULL==pSubMenu){

  0ae59	83 7d d8 00	 cmp	 DWORD PTR _pSubMenu$189940[ebp], 0
  0ae5d	0f 85 a1 00 00
	00		 jne	 $L189942

; 2816 : 				UINT uiCommandId = GetMenuItemID(uiId);

  0ae63	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0ae66	51		 push	 ecx
  0ae67	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ae6a	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  0ae6f	89 45 d4	 mov	 DWORD PTR _uiCommandId$189943[ebp], eax

; 2817 : 				for(int i=0;i<m_MenuList.GetSize(); i++){

  0ae72	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$189944[ebp], 0
  0ae79	eb 09		 jmp	 SHORT $L189945
$L189946:
  0ae7b	8b 55 d0	 mov	 edx, DWORD PTR _i$189944[ebp]
  0ae7e	83 c2 01	 add	 edx, 1
  0ae81	89 55 d0	 mov	 DWORD PTR _i$189944[ebp], edx
$L189945:
  0ae84	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ae87	83 c1 08	 add	 ecx, 8
  0ae8a	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  0ae8f	39 45 d0	 cmp	 DWORD PTR _i$189944[ebp], eax
  0ae92	7d 6b		 jge	 SHORT $L189947

; 2818 : 					if(m_MenuList[i]->nID==uiCommandId){

  0ae94	8b 45 d0	 mov	 eax, DWORD PTR _i$189944[ebp]
  0ae97	50		 push	 eax
  0ae98	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0ae9b	83 c1 08	 add	 ecx, 8
  0ae9e	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0aea3	8b 08		 mov	 ecx, DWORD PTR [eax]
  0aea5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0aea8	3b 55 d4	 cmp	 edx, DWORD PTR _uiCommandId$189943[ebp]
  0aeab	75 4d		 jne	 SHORT $L189948

; 2819 : 						delete m_MenuList.GetAt(i);

  0aead	8b 45 d0	 mov	 eax, DWORD PTR _i$189944[ebp]
  0aeb0	50		 push	 eax
  0aeb1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0aeb4	83 c1 08	 add	 ecx, 8
  0aeb7	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0aebc	89 45 94	 mov	 DWORD PTR $T192951[ebp], eax
  0aebf	8b 4d 94	 mov	 ecx, DWORD PTR $T192951[ebp]
  0aec2	89 4d 98	 mov	 DWORD PTR $T192950[ebp], ecx
  0aec5	83 7d 98 00	 cmp	 DWORD PTR $T192950[ebp], 0
  0aec9	74 12		 je	 SHORT $L192952
  0aecb	6a 01		 push	 1
  0aecd	8b 4d 98	 mov	 ecx, DWORD PTR $T192950[ebp]
  0aed0	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0aed5	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv166[ebp], eax
  0aedb	eb 0a		 jmp	 SHORT $L192953
$L192952:
  0aedd	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
$L192953:

; 2820 : 						m_MenuList.RemoveAt(i);

  0aee7	6a 01		 push	 1
  0aee9	8b 55 d0	 mov	 edx, DWORD PTR _i$189944[ebp]
  0aeec	52		 push	 edx
  0aeed	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0aef0	83 c1 08	 add	 ecx, 8
  0aef3	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2821 : 						break;

  0aef8	eb 05		 jmp	 SHORT $L189947
$L189948:

; 2822 : 					}
; 2823 : 				}

  0aefa	e9 7c ff ff ff	 jmp	 $L189946
$L189947:

; 2824 : 			}
; 2825 : 			else{

  0aeff	e9 af 01 00 00	 jmp	 $L189939
$L189942:

; 2826 : 				int numSubMenus = m_SubMenus.GetUpperBound();

  0af04	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0af07	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0af0a	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0af0f	89 45 cc	 mov	 DWORD PTR _numSubMenus$189952[ebp], eax

; 2827 : 				for(int m = numSubMenus; m >= 0; m--){

  0af12	8b 45 cc	 mov	 eax, DWORD PTR _numSubMenus$189952[ebp]
  0af15	89 45 c8	 mov	 DWORD PTR _m$189953[ebp], eax
  0af18	eb 09		 jmp	 SHORT $L189954
$L189955:
  0af1a	8b 4d c8	 mov	 ecx, DWORD PTR _m$189953[ebp]
  0af1d	83 e9 01	 sub	 ecx, 1
  0af20	89 4d c8	 mov	 DWORD PTR _m$189953[ebp], ecx
$L189954:
  0af23	83 7d c8 00	 cmp	 DWORD PTR _m$189953[ebp], 0
  0af27	0f 8c 8a 00 00
	00		 jl	 $L189956

; 2828 : 					if(m_SubMenus[m]==pSubMenu->m_hMenu){

  0af2d	8b 55 c8	 mov	 edx, DWORD PTR _m$189953[ebp]
  0af30	52		 push	 edx
  0af31	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0af34	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0af37	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0af3c	8b 4d d8	 mov	 ecx, DWORD PTR _pSubMenu$189940[ebp]
  0af3f	8b 10		 mov	 edx, DWORD PTR [eax]
  0af41	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0af44	75 6c		 jne	 SHORT $L189957

; 2829 : 						int numAllSubMenus = m_AllSubMenus.GetUpperBound();

  0af46	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0af4b	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0af50	89 45 c4	 mov	 DWORD PTR _numAllSubMenus$189958[ebp], eax

; 2830 : 						for(int n = numAllSubMenus; n>= 0; n--){

  0af53	8b 45 c4	 mov	 eax, DWORD PTR _numAllSubMenus$189958[ebp]
  0af56	89 45 c0	 mov	 DWORD PTR _n$189959[ebp], eax
  0af59	eb 09		 jmp	 SHORT $L189960
$L189961:
  0af5b	8b 4d c0	 mov	 ecx, DWORD PTR _n$189959[ebp]
  0af5e	83 e9 01	 sub	 ecx, 1
  0af61	89 4d c0	 mov	 DWORD PTR _n$189959[ebp], ecx
$L189960:
  0af64	83 7d c0 00	 cmp	 DWORD PTR _n$189959[ebp], 0
  0af68	7c 37		 jl	 SHORT $L189962

; 2831 : 							if(m_AllSubMenus[n]==m_SubMenus[m])m_AllSubMenus.RemoveAt(n);

  0af6a	8b 55 c0	 mov	 edx, DWORD PTR _n$189959[ebp]
  0af6d	52		 push	 edx
  0af6e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0af73	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0af78	8b f0		 mov	 esi, eax
  0af7a	8b 45 c8	 mov	 eax, DWORD PTR _m$189953[ebp]
  0af7d	50		 push	 eax
  0af7e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0af81	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0af84	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0af89	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0af8b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0af8d	75 10		 jne	 SHORT $L189963
  0af8f	6a 01		 push	 1
  0af91	8b 55 c0	 mov	 edx, DWORD PTR _n$189959[ebp]
  0af94	52		 push	 edx
  0af95	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0af9a	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L189963:

; 2832 : 						}

  0af9f	eb ba		 jmp	 SHORT $L189961
$L189962:

; 2833 : 						m_SubMenus.RemoveAt(m);

  0afa1	6a 01		 push	 1
  0afa3	8b 45 c8	 mov	 eax, DWORD PTR _m$189953[ebp]
  0afa6	50		 push	 eax
  0afa7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0afaa	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0afad	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L189957:

; 2834 : 					}
; 2835 : 				}

  0afb2	e9 63 ff ff ff	 jmp	 $L189955
$L189956:

; 2836 : 				int num = pSubMenu->GetMenuItemCount();

  0afb7	8b 4d d8	 mov	 ecx, DWORD PTR _pSubMenu$189940[ebp]
  0afba	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0afbf	89 45 bc	 mov	 DWORD PTR _num$189964[ebp], eax

; 2837 : 				for(int i=num-1;i>=0;--i)

  0afc2	8b 4d bc	 mov	 ecx, DWORD PTR _num$189964[ebp]
  0afc5	83 e9 01	 sub	 ecx, 1
  0afc8	89 4d b8	 mov	 DWORD PTR _i$189965[ebp], ecx
  0afcb	eb 09		 jmp	 SHORT $L189966
$L189967:
  0afcd	8b 55 b8	 mov	 edx, DWORD PTR _i$189965[ebp]
  0afd0	83 ea 01	 sub	 edx, 1
  0afd3	89 55 b8	 mov	 DWORD PTR _i$189965[ebp], edx
$L189966:
  0afd6	83 7d b8 00	 cmp	 DWORD PTR _i$189965[ebp], 0
  0afda	7c 13		 jl	 SHORT $L189968

; 2838 : 					pSubMenu->DeleteMenu(i,MF_BYPOSITION);

  0afdc	68 00 04 00 00	 push	 1024			; 00000400H
  0afe1	8b 45 b8	 mov	 eax, DWORD PTR _i$189965[ebp]
  0afe4	50		 push	 eax
  0afe5	8b 4d d8	 mov	 ecx, DWORD PTR _pSubMenu$189940[ebp]
  0afe8	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
  0afed	eb de		 jmp	 SHORT $L189967
$L189968:

; 2839 : 				for(int i = m_MenuList.GetUpperBound();i>=0;i--){

  0afef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0aff2	83 c1 08	 add	 ecx, 8
  0aff5	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0affa	89 45 b4	 mov	 DWORD PTR _i$189969[ebp], eax
  0affd	eb 09		 jmp	 SHORT $L189970
$L189971:
  0afff	8b 4d b4	 mov	 ecx, DWORD PTR _i$189969[ebp]
  0b002	83 e9 01	 sub	 ecx, 1
  0b005	89 4d b4	 mov	 DWORD PTR _i$189969[ebp], ecx
$L189970:
  0b008	83 7d b4 00	 cmp	 DWORD PTR _i$189969[ebp], 0
  0b00c	7c 6b		 jl	 SHORT $L189972

; 2840 : 					if(m_MenuList[i]->nID==(UINT)pSubMenu->m_hMenu){

  0b00e	8b 55 b4	 mov	 edx, DWORD PTR _i$189969[ebp]
  0b011	52		 push	 edx
  0b012	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b015	83 c1 08	 add	 ecx, 8
  0b018	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0b01d	8b 00		 mov	 eax, DWORD PTR [eax]
  0b01f	8b 4d d8	 mov	 ecx, DWORD PTR _pSubMenu$189940[ebp]
  0b022	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0b025	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0b028	75 4d		 jne	 SHORT $L189974

; 2841 : 						delete m_MenuList.GetAt(i);

  0b02a	8b 45 b4	 mov	 eax, DWORD PTR _i$189969[ebp]
  0b02d	50		 push	 eax
  0b02e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b031	83 c1 08	 add	 ecx, 8
  0b034	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0b039	89 45 8c	 mov	 DWORD PTR $T192955[ebp], eax
  0b03c	8b 4d 8c	 mov	 ecx, DWORD PTR $T192955[ebp]
  0b03f	89 4d 90	 mov	 DWORD PTR $T192954[ebp], ecx
  0b042	83 7d 90 00	 cmp	 DWORD PTR $T192954[ebp], 0
  0b046	74 12		 je	 SHORT $L192956
  0b048	6a 01		 push	 1
  0b04a	8b 4d 90	 mov	 ecx, DWORD PTR $T192954[ebp]
  0b04d	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0b052	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv233[ebp], eax
  0b058	eb 0a		 jmp	 SHORT $L192957
$L192956:
  0b05a	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$L192957:

; 2842 : 						m_MenuList.RemoveAt(i);

  0b064	6a 01		 push	 1
  0b066	8b 55 b4	 mov	 edx, DWORD PTR _i$189969[ebp]
  0b069	52		 push	 edx
  0b06a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b06d	83 c1 08	 add	 ecx, 8
  0b070	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2843 : 						break;

  0b075	eb 02		 jmp	 SHORT $L189972
$L189974:

; 2844 : 					}
; 2845 : 				}

  0b077	eb 86		 jmp	 SHORT $L189971
$L189972:

; 2846 : 				delete pSubMenu;

  0b079	8b 45 d8	 mov	 eax, DWORD PTR _pSubMenu$189940[ebp]
  0b07c	89 45 84	 mov	 DWORD PTR $T192959[ebp], eax
  0b07f	8b 4d 84	 mov	 ecx, DWORD PTR $T192959[ebp]
  0b082	89 4d 88	 mov	 DWORD PTR $T192958[ebp], ecx
  0b085	83 7d 88 00	 cmp	 DWORD PTR $T192958[ebp], 0
  0b089	74 1e		 je	 SHORT $L192960
  0b08b	8b f4		 mov	 esi, esp
  0b08d	6a 01		 push	 1
  0b08f	8b 55 88	 mov	 edx, DWORD PTR $T192958[ebp]
  0b092	8b 02		 mov	 eax, DWORD PTR [edx]
  0b094	8b 4d 88	 mov	 ecx, DWORD PTR $T192958[ebp]
  0b097	ff 50 04	 call	 DWORD PTR [eax+4]
  0b09a	3b f4		 cmp	 esi, esp
  0b09c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b0a1	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv245[ebp], eax
  0b0a7	eb 0a		 jmp	 SHORT $L189939
$L192960:
  0b0a9	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv245[ebp], 0
$L189939:

; 2847 : 			}
; 2848 : 		}
; 2849 : 	}
; 2850 : 	else{

  0b0b3	eb 33		 jmp	 SHORT $L189979
$L189927:

; 2851 : 		int iPosition =0;

  0b0b5	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _iPosition$189980[ebp], 0

; 2852 : 		BCMenu* pMenu = FindMenuOption(uiId,iPosition);

  0b0bc	8d 4d ac	 lea	 ecx, DWORD PTR _iPosition$189980[ebp]
  0b0bf	51		 push	 ecx
  0b0c0	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  0b0c3	52		 push	 edx
  0b0c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b0c7	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  0b0cc	89 45 a4	 mov	 DWORD PTR _pMenu$189981[ebp], eax

; 2853 : 		if(pMenu)return pMenu->DeleteMenu(iPosition,MF_BYPOSITION);

  0b0cf	83 7d a4 00	 cmp	 DWORD PTR _pMenu$189981[ebp], 0
  0b0d3	74 13		 je	 SHORT $L189979
  0b0d5	68 00 04 00 00	 push	 1024			; 00000400H
  0b0da	8b 45 ac	 mov	 eax, DWORD PTR _iPosition$189980[ebp]
  0b0dd	50		 push	 eax
  0b0de	8b 4d a4	 mov	 ecx, DWORD PTR _pMenu$189981[ebp]
  0b0e1	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
  0b0e6	eb 10		 jmp	 SHORT $L189926
$L189979:

; 2854 : 	}
; 2855 : 
; 2856 : 	return(CMenu::DeleteMenu(uiId,nFlags));

  0b0e8	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  0b0eb	51		 push	 ecx
  0b0ec	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  0b0ef	52		 push	 edx
  0b0f0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b0f3	e8 00 00 00 00	 call	 ?DeleteMenu@CMenu@@QAEHII@Z ; CMenu::DeleteMenu
$L189926:

; 2857 : }

  0b0f8	52		 push	 edx
  0b0f9	8b cd		 mov	 ecx, ebp
  0b0fb	50		 push	 eax
  0b0fc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192969
  0b102	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0b107	58		 pop	 eax
  0b108	5a		 pop	 edx
  0b109	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0b10c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0b113	5f		 pop	 edi
  0b114	5e		 pop	 esi
  0b115	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0b11b	3b ec		 cmp	 ebp, esp
  0b11d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b122	8b e5		 mov	 esp, ebp
  0b124	5d		 pop	 ebp
  0b125	c2 08 00	 ret	 8
$L192969:
  0b128	02 00 00 00	 DD	 2
  0b12c	00 00 00 00	 DD	 $L192968
$L192968:
  0b130	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0b134	04 00 00 00	 DD	 4
  0b138	00 00 00 00	 DD	 $L192965
  0b13c	ac ff ff ff	 DD	 -84			; ffffffacH
  0b140	04 00 00 00	 DD	 4
  0b144	00 00 00 00	 DD	 $L192966
$L192966:
  0b148	69		 DB	 105			; 00000069H
  0b149	50		 DB	 80			; 00000050H
  0b14a	6f		 DB	 111			; 0000006fH
  0b14b	73		 DB	 115			; 00000073H
  0b14c	69		 DB	 105			; 00000069H
  0b14d	74		 DB	 116			; 00000074H
  0b14e	69		 DB	 105			; 00000069H
  0b14f	6f		 DB	 111			; 0000006fH
  0b150	6e		 DB	 110			; 0000006eH
  0b151	00		 DB	 0
$L192965:
  0b152	73		 DB	 115			; 00000073H
  0b153	74		 DB	 116			; 00000074H
  0b154	72		 DB	 114			; 00000072H
  0b155	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192962:
  007bb	8b f4		 mov	 esi, esp
  007bd	8d 4d e0	 lea	 ecx, DWORD PTR _str$189933[ebp]
  007c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  007c6	3b f4		 cmp	 esi, esp
  007c8	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?DeleteMenu@BCMenu@@QAEHII@Z:
  007cd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192964
  007d2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DeleteMenu@BCMenu@@QAEHII@Z ENDP			; BCMenu::DeleteMenu
PUBLIC	?AppendMenuA@BCMenu@@QAEHIIPBDH@Z		; BCMenu::AppendMenuA
PUBLIC	?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z		; BCMenu::AppendMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192973 = -24						; size = 4
$T192972 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_nIconNormal$ = 20					; size = 4
?AppendMenuA@BCMenu@@QAEHIIPBDH@Z PROC NEAR		; BCMenu::AppendMenuA
; _this$ = ecx

; 2861 : {

  0b160	55		 push	 ebp
  0b161	8b ec		 mov	 ebp, esp
  0b163	83 ec 18	 sub	 esp, 24			; 00000018H
  0b166	56		 push	 esi
  0b167	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b16c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b16f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b172	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b175	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0b178	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0b17b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0b17e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2862 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  0b181	8b f4		 mov	 esi, esp
  0b183	6a 00		 push	 0
  0b185	6a 00		 push	 0
  0b187	6a ff		 push	 -1
  0b189	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b18c	50		 push	 eax
  0b18d	6a 00		 push	 0
  0b18f	6a 00		 push	 0
  0b191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b197	3b f4		 cmp	 esi, esp
  0b199	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b19e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 2863 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0b1a1	68 2f 0b 00 00	 push	 2863			; 00000b2fH
  0b1a6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0b1ab	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0b1ae	d1 e1		 shl	 ecx, 1
  0b1b0	51		 push	 ecx
  0b1b1	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0b1b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  0b1b9	89 45 ec	 mov	 DWORD PTR $T192972[ebp], eax
  0b1bc	8b 55 ec	 mov	 edx, DWORD PTR $T192972[ebp]
  0b1bf	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2864 : 	memset(wszUtf8, 0, len * 2);

  0b1c2	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0b1c5	d1 e0		 shl	 eax, 1
  0b1c7	50		 push	 eax
  0b1c8	6a 00		 push	 0
  0b1ca	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b1cd	51		 push	 ecx
  0b1ce	e8 00 00 00 00	 call	 _memset
  0b1d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2865 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  0b1d6	8b f4		 mov	 esi, esp
  0b1d8	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0b1db	52		 push	 edx
  0b1dc	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b1df	50		 push	 eax
  0b1e0	6a ff		 push	 -1
  0b1e2	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b1e5	51		 push	 ecx
  0b1e6	6a 00		 push	 0
  0b1e8	6a 00		 push	 0
  0b1ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b1f0	3b f4		 cmp	 esi, esp
  0b1f2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2866 : 
; 2867 : 	BOOL bRet = AppendMenuW(nFlags,nIDNewItem,wszUtf8,nIconNormal);

  0b1f7	8b 55 14	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  0b1fa	52		 push	 edx
  0b1fb	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b1fe	50		 push	 eax
  0b1ff	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0b202	51		 push	 ecx
  0b203	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0b206	52		 push	 edx
  0b207	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b20a	e8 00 00 00 00	 call	 ?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z ; BCMenu::AppendMenuW
  0b20f	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 2868 : 	delete[] wszUtf8;

  0b212	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b215	89 45 e8	 mov	 DWORD PTR $T192973[ebp], eax
  0b218	8b 4d e8	 mov	 ecx, DWORD PTR $T192973[ebp]
  0b21b	51		 push	 ecx
  0b21c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0b221	83 c4 04	 add	 esp, 4

; 2869 : 
; 2870 : 	return bRet;

  0b224	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2871 : }

  0b227	5e		 pop	 esi
  0b228	83 c4 18	 add	 esp, 24			; 00000018H
  0b22b	3b ec		 cmp	 ebp, esp
  0b22d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b232	8b e5		 mov	 esp, ebp
  0b234	5d		 pop	 ebp
  0b235	c2 10 00	 ret	 16			; 00000010H
?AppendMenuA@BCMenu@@QAEHIIPBDH@Z ENDP			; BCMenu::AppendMenuA
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_nIconNormal$ = 20					; size = 4
?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z PROC NEAR		; BCMenu::AppendMenuW
; _this$ = ecx

; 2874 : {

  0b240	55		 push	 ebp
  0b241	8b ec		 mov	 ebp, esp
  0b243	51		 push	 ecx
  0b244	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0b24b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2875 : 	return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,nIconNormal);

  0b24e	8b 45 14	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  0b251	50		 push	 eax
  0b252	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0b255	51		 push	 ecx
  0b256	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0b259	52		 push	 edx
  0b25a	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b25d	50		 push	 eax
  0b25e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b261	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 2876 : }

  0b266	83 c4 04	 add	 esp, 4
  0b269	3b ec		 cmp	 ebp, esp
  0b26b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b270	8b e5		 mov	 esp, ebp
  0b272	5d		 pop	 ebp
  0b273	c2 10 00	 ret	 16			; 00000010H
?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z ENDP			; BCMenu::AppendMenuW
_TEXT	ENDS
PUBLIC	?AppendMenuA@BCMenu@@QAEHIIPBDPAVCImageList@@H@Z ; BCMenu::AppendMenuA
PUBLIC	?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z ; BCMenu::AppendMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192977 = -24						; size = 4
$T192976 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendMenuA
; _this$ = ecx

; 2879 : {

  0b280	55		 push	 ebp
  0b281	8b ec		 mov	 ebp, esp
  0b283	83 ec 18	 sub	 esp, 24			; 00000018H
  0b286	56		 push	 esi
  0b287	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b28c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b28f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b292	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b295	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0b298	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0b29b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0b29e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2880 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  0b2a1	8b f4		 mov	 esi, esp
  0b2a3	6a 00		 push	 0
  0b2a5	6a 00		 push	 0
  0b2a7	6a ff		 push	 -1
  0b2a9	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b2ac	50		 push	 eax
  0b2ad	6a 00		 push	 0
  0b2af	6a 00		 push	 0
  0b2b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b2b7	3b f4		 cmp	 esi, esp
  0b2b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b2be	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 2881 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0b2c1	68 41 0b 00 00	 push	 2881			; 00000b41H
  0b2c6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0b2cb	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0b2ce	d1 e1		 shl	 ecx, 1
  0b2d0	51		 push	 ecx
  0b2d1	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0b2d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  0b2d9	89 45 ec	 mov	 DWORD PTR $T192976[ebp], eax
  0b2dc	8b 55 ec	 mov	 edx, DWORD PTR $T192976[ebp]
  0b2df	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2882 : 	memset(wszUtf8, 0, len * 2);

  0b2e2	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0b2e5	d1 e0		 shl	 eax, 1
  0b2e7	50		 push	 eax
  0b2e8	6a 00		 push	 0
  0b2ea	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b2ed	51		 push	 ecx
  0b2ee	e8 00 00 00 00	 call	 _memset
  0b2f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2883 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  0b2f6	8b f4		 mov	 esi, esp
  0b2f8	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0b2fb	52		 push	 edx
  0b2fc	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b2ff	50		 push	 eax
  0b300	6a ff		 push	 -1
  0b302	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b305	51		 push	 ecx
  0b306	6a 00		 push	 0
  0b308	6a 00		 push	 0
  0b30a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b310	3b f4		 cmp	 esi, esp
  0b312	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2884 : 
; 2885 : 	BOOL bRet = AppendMenuW(nFlags,nIDNewItem,wszUtf8,il,xoffset);

  0b317	8b 55 18	 mov	 edx, DWORD PTR _xoffset$[ebp]
  0b31a	52		 push	 edx
  0b31b	8b 45 14	 mov	 eax, DWORD PTR _il$[ebp]
  0b31e	50		 push	 eax
  0b31f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b322	51		 push	 ecx
  0b323	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b326	52		 push	 edx
  0b327	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b32a	50		 push	 eax
  0b32b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b32e	e8 00 00 00 00	 call	 ?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z ; BCMenu::AppendMenuW
  0b333	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 2886 : 	delete[] wszUtf8;

  0b336	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b339	89 4d e8	 mov	 DWORD PTR $T192977[ebp], ecx
  0b33c	8b 55 e8	 mov	 edx, DWORD PTR $T192977[ebp]
  0b33f	52		 push	 edx
  0b340	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0b345	83 c4 04	 add	 esp, 4

; 2887 : 
; 2888 : 	return bRet;

  0b348	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2889 : }

  0b34b	5e		 pop	 esi
  0b34c	83 c4 18	 add	 esp, 24			; 00000018H
  0b34f	3b ec		 cmp	 ebp, esp
  0b351	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b356	8b e5		 mov	 esp, ebp
  0b358	5d		 pop	 ebp
  0b359	c2 14 00	 ret	 20			; 00000014H
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCImageList@@H@Z ENDP	; BCMenu::AppendMenuA
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendMenuW
; _this$ = ecx

; 2892 : {

  0b360	55		 push	 ebp
  0b361	8b ec		 mov	 ebp, esp
  0b363	51		 push	 ecx
  0b364	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0b36b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2893 : 	return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,il,xoffset);

  0b36e	8b 45 18	 mov	 eax, DWORD PTR _xoffset$[ebp]
  0b371	50		 push	 eax
  0b372	8b 4d 14	 mov	 ecx, DWORD PTR _il$[ebp]
  0b375	51		 push	 ecx
  0b376	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b379	52		 push	 edx
  0b37a	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b37d	50		 push	 eax
  0b37e	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b381	51		 push	 ecx
  0b382	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b385	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW

; 2894 : }

  0b38a	83 c4 04	 add	 esp, 4
  0b38d	3b ec		 cmp	 ebp, esp
  0b38f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b394	8b e5		 mov	 esp, ebp
  0b396	5d		 pop	 ebp
  0b397	c2 14 00	 ret	 20			; 00000014H
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z ENDP	; BCMenu::AppendMenuW
_TEXT	ENDS
PUBLIC	?AppendMenuA@BCMenu@@QAEHIIPBDPAVCBitmap@@@Z	; BCMenu::AppendMenuA
PUBLIC	?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z	; BCMenu::AppendMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192981 = -24						; size = 4
$T192980 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_bmp$ = 20						; size = 4
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCBitmap@@@Z PROC NEAR	; BCMenu::AppendMenuA
; _this$ = ecx

; 2897 : {

  0b3a0	55		 push	 ebp
  0b3a1	8b ec		 mov	 ebp, esp
  0b3a3	83 ec 18	 sub	 esp, 24			; 00000018H
  0b3a6	56		 push	 esi
  0b3a7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b3ac	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b3af	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b3b2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b3b5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0b3b8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0b3bb	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0b3be	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2898 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  0b3c1	8b f4		 mov	 esi, esp
  0b3c3	6a 00		 push	 0
  0b3c5	6a 00		 push	 0
  0b3c7	6a ff		 push	 -1
  0b3c9	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b3cc	50		 push	 eax
  0b3cd	6a 00		 push	 0
  0b3cf	6a 00		 push	 0
  0b3d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b3d7	3b f4		 cmp	 esi, esp
  0b3d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b3de	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 2899 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0b3e1	68 53 0b 00 00	 push	 2899			; 00000b53H
  0b3e6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0b3eb	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0b3ee	d1 e1		 shl	 ecx, 1
  0b3f0	51		 push	 ecx
  0b3f1	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0b3f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  0b3f9	89 45 ec	 mov	 DWORD PTR $T192980[ebp], eax
  0b3fc	8b 55 ec	 mov	 edx, DWORD PTR $T192980[ebp]
  0b3ff	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2900 : 	memset(wszUtf8, 0, len * 2);

  0b402	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0b405	d1 e0		 shl	 eax, 1
  0b407	50		 push	 eax
  0b408	6a 00		 push	 0
  0b40a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b40d	51		 push	 ecx
  0b40e	e8 00 00 00 00	 call	 _memset
  0b413	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2901 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  0b416	8b f4		 mov	 esi, esp
  0b418	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0b41b	52		 push	 edx
  0b41c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b41f	50		 push	 eax
  0b420	6a ff		 push	 -1
  0b422	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b425	51		 push	 ecx
  0b426	6a 00		 push	 0
  0b428	6a 00		 push	 0
  0b42a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b430	3b f4		 cmp	 esi, esp
  0b432	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2902 : 
; 2903 : 	BOOL bRet = AppendMenuW(nFlags,nIDNewItem,wszUtf8,bmp);

  0b437	8b 55 14	 mov	 edx, DWORD PTR _bmp$[ebp]
  0b43a	52		 push	 edx
  0b43b	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b43e	50		 push	 eax
  0b43f	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0b442	51		 push	 ecx
  0b443	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0b446	52		 push	 edx
  0b447	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b44a	e8 00 00 00 00	 call	 ?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z ; BCMenu::AppendMenuW
  0b44f	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 2904 : 	delete[] wszUtf8;

  0b452	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b455	89 45 e8	 mov	 DWORD PTR $T192981[ebp], eax
  0b458	8b 4d e8	 mov	 ecx, DWORD PTR $T192981[ebp]
  0b45b	51		 push	 ecx
  0b45c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0b461	83 c4 04	 add	 esp, 4

; 2905 : 	return bRet;

  0b464	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2906 : }

  0b467	5e		 pop	 esi
  0b468	83 c4 18	 add	 esp, 24			; 00000018H
  0b46b	3b ec		 cmp	 ebp, esp
  0b46d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b472	8b e5		 mov	 esp, ebp
  0b474	5d		 pop	 ebp
  0b475	c2 10 00	 ret	 16			; 00000010H
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCBitmap@@@Z ENDP	; BCMenu::AppendMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T192991 DD	0ffffffffH
	DD	FLAT:$L192984
$T192986 DD	019930520H
	DD	01H
	DD	FLAT:$T192991
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T192983 = -36						; size = 4
_temp$190049 = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_bmp$ = 20						; size = 4
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z PROC NEAR	; BCMenu::AppendMenuW
; _this$ = ecx

; 2909 : {

  0b480	55		 push	 ebp
  0b481	8b ec		 mov	 ebp, esp
  0b483	6a ff		 push	 -1
  0b485	68 00 00 00 00	 push	 __ehhandler$?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z
  0b48a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0b490	50		 push	 eax
  0b491	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0b498	83 ec 18	 sub	 esp, 24			; 00000018H
  0b49b	56		 push	 esi
  0b49c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b4a1	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0b4a4	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0b4a7	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0b4aa	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b4ad	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b4b0	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b4b3	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2910 : 	if(bmp){

  0b4b6	83 7d 14 00	 cmp	 DWORD PTR _bmp$[ebp], 0
  0b4ba	0f 84 9a 00 00
	00		 je	 $L190048

; 2911 : 		CImageList temp;

  0b4c0	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  0b4c3	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0b4c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2912 : 		temp.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  0b4cf	6a 01		 push	 1
  0b4d1	6a 01		 push	 1
  0b4d3	68 ff 00 00 00	 push	 255			; 000000ffH
  0b4d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0b4dd	50		 push	 eax
  0b4de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0b4e4	51		 push	 ecx
  0b4e5	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  0b4e8	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 2913 : 		if(m_bitmapBackgroundFlag)temp.Add(bmp,m_bitmapBackground);

  0b4ed	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0b4f0	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  0b4f4	74 15		 je	 SHORT $L190050
  0b4f6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0b4f9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0b4fc	51		 push	 ecx
  0b4fd	8b 55 14	 mov	 edx, DWORD PTR _bmp$[ebp]
  0b500	52		 push	 edx
  0b501	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  0b504	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2914 : 
; 2915 : 		else temp.Add(bmp,GetSysColor(COLOR_3DFACE));

  0b509	eb 1e		 jmp	 SHORT $L190051
$L190050:
  0b50b	8b f4		 mov	 esi, esp
  0b50d	6a 0f		 push	 15			; 0000000fH
  0b50f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0b515	3b f4		 cmp	 esi, esp
  0b517	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b51c	50		 push	 eax
  0b51d	8b 45 14	 mov	 eax, DWORD PTR _bmp$[ebp]
  0b520	50		 push	 eax
  0b521	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  0b524	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L190051:

; 2916 : 
; 2917 : 		return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,&temp,0);

  0b529	6a 00		 push	 0
  0b52b	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  0b52e	51		 push	 ecx
  0b52f	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b532	52		 push	 edx
  0b533	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b536	50		 push	 eax
  0b537	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b53a	51		 push	 ecx
  0b53b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b53e	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
  0b543	89 45 dc	 mov	 DWORD PTR $T192983[ebp], eax
  0b546	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0b54d	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  0b550	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  0b555	8b 45 dc	 mov	 eax, DWORD PTR $T192983[ebp]
  0b558	eb 18		 jmp	 SHORT $L190047
$L190048:

; 2918 : 	}
; 2919 : 	return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,NULL,0);

  0b55a	6a 00		 push	 0
  0b55c	6a 00		 push	 0
  0b55e	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b561	52		 push	 edx
  0b562	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b565	50		 push	 eax
  0b566	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b569	51		 push	 ecx
  0b56a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b56d	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
$L190047:

; 2920 : }

  0b572	52		 push	 edx
  0b573	8b cd		 mov	 ecx, ebp
  0b575	50		 push	 eax
  0b576	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L192990
  0b57c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0b581	58		 pop	 eax
  0b582	5a		 pop	 edx
  0b583	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0b586	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0b58d	5e		 pop	 esi
  0b58e	83 c4 24	 add	 esp, 36			; 00000024H
  0b591	3b ec		 cmp	 ebp, esp
  0b593	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b598	8b e5		 mov	 esp, ebp
  0b59a	5d		 pop	 ebp
  0b59b	c2 10 00	 ret	 16			; 00000010H
$L192990:
  0b59e	01 00 00 00	 DD	 1
  0b5a2	00 00 00 00	 DD	 $L192989
$L192989:
  0b5a6	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0b5aa	08 00 00 00	 DD	 8
  0b5ae	00 00 00 00	 DD	 $L192987
$L192987:
  0b5b2	74		 DB	 116			; 00000074H
  0b5b3	65		 DB	 101			; 00000065H
  0b5b4	6d		 DB	 109			; 0000006dH
  0b5b5	70		 DB	 112			; 00000070H
  0b5b6	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L192984:
  007d7	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190049[ebp]
  007da	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z:
  007df	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T192986
  007e4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z ENDP	; BCMenu::AppendMenuW
PUBLIC	?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z		; BCMenu::InsertMenuA
PUBLIC	?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z		; BCMenu::InsertMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192994 = -24						; size = 4
$T192993 = -20						; size = 4
_bRet$ = -16						; size = 4
_len$190063 = -12					; size = 4
_wszUtf8$ = -8						; size = 4
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_nIconNormal$ = 24					; size = 4
?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z PROC NEAR		; BCMenu::InsertMenuA
; _this$ = ecx

; 2923 : {

  0b5c0	55		 push	 ebp
  0b5c1	8b ec		 mov	 ebp, esp
  0b5c3	83 ec 18	 sub	 esp, 24			; 00000018H
  0b5c6	56		 push	 esi
  0b5c7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b5cc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b5cf	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b5d2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b5d5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0b5d8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0b5db	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0b5de	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2924 : 	wchar_t* wszUtf8 = NULL;

  0b5e1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _wszUtf8$[ebp], 0

; 2925 : 	if(lpszNewItem != NULL)

  0b5e8	83 7d 14 00	 cmp	 DWORD PTR _lpszNewItem$[ebp], 0
  0b5ec	74 76		 je	 SHORT $L190062

; 2926 : 	{
; 2927 : 		int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  0b5ee	8b f4		 mov	 esi, esp
  0b5f0	6a 00		 push	 0
  0b5f2	6a 00		 push	 0
  0b5f4	6a ff		 push	 -1
  0b5f6	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b5f9	50		 push	 eax
  0b5fa	6a 00		 push	 0
  0b5fc	6a 00		 push	 0
  0b5fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b604	3b f4		 cmp	 esi, esp
  0b606	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b60b	89 45 f4	 mov	 DWORD PTR _len$190063[ebp], eax

; 2928 : 		wszUtf8 = new wchar_t[len];

  0b60e	68 70 0b 00 00	 push	 2928			; 00000b70H
  0b613	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0b618	8b 4d f4	 mov	 ecx, DWORD PTR _len$190063[ebp]
  0b61b	d1 e1		 shl	 ecx, 1
  0b61d	51		 push	 ecx
  0b61e	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0b623	83 c4 0c	 add	 esp, 12			; 0000000cH
  0b626	89 45 ec	 mov	 DWORD PTR $T192993[ebp], eax
  0b629	8b 55 ec	 mov	 edx, DWORD PTR $T192993[ebp]
  0b62c	89 55 f8	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2929 : 		memset(wszUtf8, 0, len * 2);

  0b62f	8b 45 f4	 mov	 eax, DWORD PTR _len$190063[ebp]
  0b632	d1 e0		 shl	 eax, 1
  0b634	50		 push	 eax
  0b635	6a 00		 push	 0
  0b637	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b63a	51		 push	 ecx
  0b63b	e8 00 00 00 00	 call	 _memset
  0b640	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2930 : 		MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  0b643	8b f4		 mov	 esi, esp
  0b645	8b 55 f4	 mov	 edx, DWORD PTR _len$190063[ebp]
  0b648	52		 push	 edx
  0b649	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b64c	50		 push	 eax
  0b64d	6a ff		 push	 -1
  0b64f	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b652	51		 push	 ecx
  0b653	6a 00		 push	 0
  0b655	6a 00		 push	 0
  0b657	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b65d	3b f4		 cmp	 esi, esp
  0b65f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L190062:

; 2931 : 	}
; 2932 : 
; 2933 : 	BOOL bRet = InsertMenuW(nPosition,nFlags,nIDNewItem,wszUtf8,nIconNormal);

  0b664	8b 55 18	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  0b667	52		 push	 edx
  0b668	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b66b	50		 push	 eax
  0b66c	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0b66f	51		 push	 ecx
  0b670	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0b673	52		 push	 edx
  0b674	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  0b677	50		 push	 eax
  0b678	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b67b	e8 00 00 00 00	 call	 ?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z ; BCMenu::InsertMenuW
  0b680	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 2934 : 	delete[] wszUtf8;

  0b683	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b686	89 4d e8	 mov	 DWORD PTR $T192994[ebp], ecx
  0b689	8b 55 e8	 mov	 edx, DWORD PTR $T192994[ebp]
  0b68c	52		 push	 edx
  0b68d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0b692	83 c4 04	 add	 esp, 4

; 2935 : 
; 2936 : 	return bRet;

  0b695	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2937 : }

  0b698	5e		 pop	 esi
  0b699	83 c4 18	 add	 esp, 24			; 00000018H
  0b69c	3b ec		 cmp	 ebp, esp
  0b69e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b6a3	8b e5		 mov	 esp, ebp
  0b6a5	5d		 pop	 ebp
  0b6a6	c2 14 00	 ret	 20			; 00000014H
?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ENDP			; BCMenu::InsertMenuA
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_nIconNormal$ = 24					; size = 4
?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z PROC NEAR		; BCMenu::InsertMenuW
; _this$ = ecx

; 2940 : {

  0b6b0	55		 push	 ebp
  0b6b1	8b ec		 mov	 ebp, esp
  0b6b3	51		 push	 ecx
  0b6b4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0b6bb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2941 : 	return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,nIconNormal);

  0b6be	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  0b6c1	50		 push	 eax
  0b6c2	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0b6c5	51		 push	 ecx
  0b6c6	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0b6c9	52		 push	 edx
  0b6ca	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b6cd	50		 push	 eax
  0b6ce	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  0b6d1	51		 push	 ecx
  0b6d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b6d5	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ; BCMenu::InsertODMenuW

; 2942 : }

  0b6da	83 c4 04	 add	 esp, 4
  0b6dd	3b ec		 cmp	 ebp, esp
  0b6df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b6e4	8b e5		 mov	 esp, ebp
  0b6e6	5d		 pop	 ebp
  0b6e7	c2 14 00	 ret	 20			; 00000014H
?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z ENDP		; BCMenu::InsertMenuW
_TEXT	ENDS
PUBLIC	?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCImageList@@H@Z ; BCMenu::InsertMenuA
PUBLIC	?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z ; BCMenu::InsertMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T192998 = -24						; size = 4
$T192997 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertMenuA
; _this$ = ecx

; 2945 : {	

  0b6f0	55		 push	 ebp
  0b6f1	8b ec		 mov	 ebp, esp
  0b6f3	83 ec 18	 sub	 esp, 24			; 00000018H
  0b6f6	56		 push	 esi
  0b6f7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b6fc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b6ff	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b702	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b705	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0b708	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0b70b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0b70e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2946 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  0b711	8b f4		 mov	 esi, esp
  0b713	6a 00		 push	 0
  0b715	6a 00		 push	 0
  0b717	6a ff		 push	 -1
  0b719	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b71c	50		 push	 eax
  0b71d	6a 00		 push	 0
  0b71f	6a 00		 push	 0
  0b721	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b727	3b f4		 cmp	 esi, esp
  0b729	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b72e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 2947 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0b731	68 83 0b 00 00	 push	 2947			; 00000b83H
  0b736	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0b73b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0b73e	d1 e1		 shl	 ecx, 1
  0b740	51		 push	 ecx
  0b741	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0b746	83 c4 0c	 add	 esp, 12			; 0000000cH
  0b749	89 45 ec	 mov	 DWORD PTR $T192997[ebp], eax
  0b74c	8b 55 ec	 mov	 edx, DWORD PTR $T192997[ebp]
  0b74f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2948 : 	memset(wszUtf8, 0, len * 2);

  0b752	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0b755	d1 e0		 shl	 eax, 1
  0b757	50		 push	 eax
  0b758	6a 00		 push	 0
  0b75a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b75d	51		 push	 ecx
  0b75e	e8 00 00 00 00	 call	 _memset
  0b763	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2949 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  0b766	8b f4		 mov	 esi, esp
  0b768	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0b76b	52		 push	 edx
  0b76c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b76f	50		 push	 eax
  0b770	6a ff		 push	 -1
  0b772	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b775	51		 push	 ecx
  0b776	6a 00		 push	 0
  0b778	6a 00		 push	 0
  0b77a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b780	3b f4		 cmp	 esi, esp
  0b782	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2950 : 
; 2951 : 	BOOL bRet = InsertMenuW(nPosition,nFlags,nIDNewItem,wszUtf8,il,xoffset);

  0b787	8b 55 1c	 mov	 edx, DWORD PTR _xoffset$[ebp]
  0b78a	52		 push	 edx
  0b78b	8b 45 18	 mov	 eax, DWORD PTR _il$[ebp]
  0b78e	50		 push	 eax
  0b78f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b792	51		 push	 ecx
  0b793	8b 55 10	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b796	52		 push	 edx
  0b797	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b79a	50		 push	 eax
  0b79b	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  0b79e	51		 push	 ecx
  0b79f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b7a2	e8 00 00 00 00	 call	 ?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z ; BCMenu::InsertMenuW
  0b7a7	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 2952 : 	delete[] wszUtf8;

  0b7aa	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  0b7ad	89 55 e8	 mov	 DWORD PTR $T192998[ebp], edx
  0b7b0	8b 45 e8	 mov	 eax, DWORD PTR $T192998[ebp]
  0b7b3	50		 push	 eax
  0b7b4	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0b7b9	83 c4 04	 add	 esp, 4

; 2953 : 
; 2954 : 	return bRet;

  0b7bc	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2955 : }

  0b7bf	5e		 pop	 esi
  0b7c0	83 c4 18	 add	 esp, 24			; 00000018H
  0b7c3	3b ec		 cmp	 ebp, esp
  0b7c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b7ca	8b e5		 mov	 esp, ebp
  0b7cc	5d		 pop	 ebp
  0b7cd	c2 18 00	 ret	 24			; 00000018H
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCImageList@@H@Z ENDP	; BCMenu::InsertMenuA
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertMenuW
; _this$ = ecx

; 2958 : {

  0b7d0	55		 push	 ebp
  0b7d1	8b ec		 mov	 ebp, esp
  0b7d3	51		 push	 ecx
  0b7d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0b7db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2959 : 	return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,il,xoffset);

  0b7de	8b 45 1c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  0b7e1	50		 push	 eax
  0b7e2	8b 4d 18	 mov	 ecx, DWORD PTR _il$[ebp]
  0b7e5	51		 push	 ecx
  0b7e6	8b 55 10	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b7e9	52		 push	 edx
  0b7ea	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b7ed	50		 push	 eax
  0b7ee	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b7f1	51		 push	 ecx
  0b7f2	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  0b7f5	52		 push	 edx
  0b7f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b7f9	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW

; 2960 : }

  0b7fe	83 c4 04	 add	 esp, 4
  0b801	3b ec		 cmp	 ebp, esp
  0b803	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b808	8b e5		 mov	 esp, ebp
  0b80a	5d		 pop	 ebp
  0b80b	c2 18 00	 ret	 24			; 00000018H
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z ENDP	; BCMenu::InsertMenuW
_TEXT	ENDS
PUBLIC	?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCBitmap@@@Z	; BCMenu::InsertMenuA
PUBLIC	?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z	; BCMenu::InsertMenuW
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T193002 = -24						; size = 4
$T193001 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_bmp$ = 24						; size = 4
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCBitmap@@@Z PROC NEAR	; BCMenu::InsertMenuA
; _this$ = ecx

; 2963 : {

  0b810	55		 push	 ebp
  0b811	8b ec		 mov	 ebp, esp
  0b813	83 ec 18	 sub	 esp, 24			; 00000018H
  0b816	56		 push	 esi
  0b817	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b81c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b81f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b822	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b825	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0b828	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0b82b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0b82e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2964 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  0b831	8b f4		 mov	 esi, esp
  0b833	6a 00		 push	 0
  0b835	6a 00		 push	 0
  0b837	6a ff		 push	 -1
  0b839	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0b83c	50		 push	 eax
  0b83d	6a 00		 push	 0
  0b83f	6a 00		 push	 0
  0b841	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b847	3b f4		 cmp	 esi, esp
  0b849	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b84e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 2965 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0b851	68 95 0b 00 00	 push	 2965			; 00000b95H
  0b856	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0b85b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0b85e	d1 e1		 shl	 ecx, 1
  0b860	51		 push	 ecx
  0b861	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0b866	83 c4 0c	 add	 esp, 12			; 0000000cH
  0b869	89 45 ec	 mov	 DWORD PTR $T193001[ebp], eax
  0b86c	8b 55 ec	 mov	 edx, DWORD PTR $T193001[ebp]
  0b86f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2966 : 	memset(wszUtf8, 0, len * 2);

  0b872	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0b875	d1 e0		 shl	 eax, 1
  0b877	50		 push	 eax
  0b878	6a 00		 push	 0
  0b87a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b87d	51		 push	 ecx
  0b87e	e8 00 00 00 00	 call	 _memset
  0b883	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2967 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  0b886	8b f4		 mov	 esi, esp
  0b888	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0b88b	52		 push	 edx
  0b88c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b88f	50		 push	 eax
  0b890	6a ff		 push	 -1
  0b892	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b895	51		 push	 ecx
  0b896	6a 00		 push	 0
  0b898	6a 00		 push	 0
  0b89a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0b8a0	3b f4		 cmp	 esi, esp
  0b8a2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2968 : 
; 2969 : 	BOOL bRet = InsertMenuW(nPosition,nFlags,nIDNewItem,wszUtf8,bmp);

  0b8a7	8b 55 18	 mov	 edx, DWORD PTR _bmp$[ebp]
  0b8aa	52		 push	 edx
  0b8ab	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0b8ae	50		 push	 eax
  0b8af	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0b8b2	51		 push	 ecx
  0b8b3	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0b8b6	52		 push	 edx
  0b8b7	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  0b8ba	50		 push	 eax
  0b8bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0b8be	e8 00 00 00 00	 call	 ?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z ; BCMenu::InsertMenuW
  0b8c3	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 2970 : 	delete[] wszUtf8;

  0b8c6	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0b8c9	89 4d e8	 mov	 DWORD PTR $T193002[ebp], ecx
  0b8cc	8b 55 e8	 mov	 edx, DWORD PTR $T193002[ebp]
  0b8cf	52		 push	 edx
  0b8d0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0b8d5	83 c4 04	 add	 esp, 4

; 2971 : 
; 2972 : 	return bRet;

  0b8d8	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2973 : }

  0b8db	5e		 pop	 esi
  0b8dc	83 c4 18	 add	 esp, 24			; 00000018H
  0b8df	3b ec		 cmp	 ebp, esp
  0b8e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b8e6	8b e5		 mov	 esp, ebp
  0b8e8	5d		 pop	 ebp
  0b8e9	c2 14 00	 ret	 20			; 00000014H
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCBitmap@@@Z ENDP	; BCMenu::InsertMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T193012 DD	0ffffffffH
	DD	FLAT:$L193005
$T193007 DD	019930520H
	DD	01H
	DD	FLAT:$T193012
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T193004 = -36						; size = 4
_temp$190126 = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_bmp$ = 24						; size = 4
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z PROC NEAR ; BCMenu::InsertMenuW
; _this$ = ecx

; 2976 : {

  0b8f0	55		 push	 ebp
  0b8f1	8b ec		 mov	 ebp, esp
  0b8f3	6a ff		 push	 -1
  0b8f5	68 00 00 00 00	 push	 __ehhandler$?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z
  0b8fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0b900	50		 push	 eax
  0b901	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0b908	83 ec 18	 sub	 esp, 24			; 00000018H
  0b90b	56		 push	 esi
  0b90c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0b911	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0b914	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0b917	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0b91a	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0b91d	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0b920	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0b923	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2977 : 	if(bmp){

  0b926	83 7d 18 00	 cmp	 DWORD PTR _bmp$[ebp], 0
  0b92a	0f 84 9e 00 00
	00		 je	 $L190125

; 2978 : 		CImageList temp;

  0b930	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  0b933	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0b938	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2979 : 		temp.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  0b93f	6a 01		 push	 1
  0b941	6a 01		 push	 1
  0b943	68 ff 00 00 00	 push	 255			; 000000ffH
  0b948	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0b94d	50		 push	 eax
  0b94e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0b954	51		 push	 ecx
  0b955	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  0b958	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 2980 : 		if(m_bitmapBackgroundFlag)temp.Add(bmp,m_bitmapBackground);

  0b95d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0b960	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  0b964	74 15		 je	 SHORT $L190127
  0b966	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0b969	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0b96c	51		 push	 ecx
  0b96d	8b 55 18	 mov	 edx, DWORD PTR _bmp$[ebp]
  0b970	52		 push	 edx
  0b971	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  0b974	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2981 : 		else temp.Add(bmp,GetSysColor(COLOR_3DFACE));

  0b979	eb 1e		 jmp	 SHORT $L190128
$L190127:
  0b97b	8b f4		 mov	 esi, esp
  0b97d	6a 0f		 push	 15			; 0000000fH
  0b97f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0b985	3b f4		 cmp	 esi, esp
  0b987	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0b98c	50		 push	 eax
  0b98d	8b 45 18	 mov	 eax, DWORD PTR _bmp$[ebp]
  0b990	50		 push	 eax
  0b991	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  0b994	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L190128:

; 2982 : 		return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,&temp,0);

  0b999	6a 00		 push	 0
  0b99b	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  0b99e	51		 push	 ecx
  0b99f	8b 55 10	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  0b9a2	52		 push	 edx
  0b9a3	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0b9a6	50		 push	 eax
  0b9a7	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  0b9aa	51		 push	 ecx
  0b9ab	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  0b9ae	52		 push	 edx
  0b9af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b9b2	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
  0b9b7	89 45 dc	 mov	 DWORD PTR $T193004[ebp], eax
  0b9ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0b9c1	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  0b9c4	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  0b9c9	8b 45 dc	 mov	 eax, DWORD PTR $T193004[ebp]
  0b9cc	eb 1c		 jmp	 SHORT $L190124
$L190125:

; 2983 : 	}
; 2984 : 	return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,NULL,0);

  0b9ce	6a 00		 push	 0
  0b9d0	6a 00		 push	 0
  0b9d2	8b 45 10	 mov	 eax, DWORD PTR _nIDNewItem$[ebp]
  0b9d5	50		 push	 eax
  0b9d6	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  0b9d9	51		 push	 ecx
  0b9da	8b 55 14	 mov	 edx, DWORD PTR _lpszNewItem$[ebp]
  0b9dd	52		 push	 edx
  0b9de	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  0b9e1	50		 push	 eax
  0b9e2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0b9e5	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
$L190124:

; 2985 : }

  0b9ea	52		 push	 edx
  0b9eb	8b cd		 mov	 ecx, ebp
  0b9ed	50		 push	 eax
  0b9ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193011
  0b9f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0b9f9	58		 pop	 eax
  0b9fa	5a		 pop	 edx
  0b9fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0b9fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0ba05	5e		 pop	 esi
  0ba06	83 c4 24	 add	 esp, 36			; 00000024H
  0ba09	3b ec		 cmp	 ebp, esp
  0ba0b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0ba10	8b e5		 mov	 esp, ebp
  0ba12	5d		 pop	 ebp
  0ba13	c2 14 00	 ret	 20			; 00000014H
$L193011:
  0ba16	01 00 00 00	 DD	 1
  0ba1a	00 00 00 00	 DD	 $L193010
$L193010:
  0ba1e	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0ba22	08 00 00 00	 DD	 8
  0ba26	00 00 00 00	 DD	 $L193008
$L193008:
  0ba2a	74		 DB	 116			; 00000074H
  0ba2b	65		 DB	 101			; 00000065H
  0ba2c	6d		 DB	 109			; 0000006dH
  0ba2d	70		 DB	 112			; 00000070H
  0ba2e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193005:
  007e9	8d 4d e4	 lea	 ecx, DWORD PTR _temp$190126[ebp]
  007ec	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z:
  007f1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193007
  007f6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z ENDP	; BCMenu::InsertMenuW
PUBLIC	?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z	; BCMenu::AppendODPopupMenuW
xdata$x	SEGMENT
$T193022 DD	0ffffffffH
	DD	FLAT:$L193018
$T193020 DD	019930520H
	DD	01H
	DD	FLAT:$T193022
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -32						; size = 4
$T193015 = -28						; size = 4
$T193014 = -24						; size = 4
_pSubMenu$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z PROC NEAR	; BCMenu::AppendODPopupMenuW
; _this$ = ecx

; 2990 : {

  0ba30	55		 push	 ebp
  0ba31	8b ec		 mov	 ebp, esp
  0ba33	6a ff		 push	 -1
  0ba35	68 00 00 00 00	 push	 __ehhandler$?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z
  0ba3a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0ba40	50		 push	 eax
  0ba41	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0ba48	83 ec 14	 sub	 esp, 20			; 00000014H
  0ba4b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0ba50	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0ba53	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0ba56	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0ba59	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0ba5c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0ba5f	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2991 : 	BCMenu* pSubMenu = new BCMenu;

  0ba62	68 af 0b 00 00	 push	 2991			; 00000bafH
  0ba67	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0ba6c	6a 64		 push	 100			; 00000064H
  0ba6e	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  0ba73	89 45 e4	 mov	 DWORD PTR $T193015[ebp], eax
  0ba76	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0ba7d	83 7d e4 00	 cmp	 DWORD PTR $T193015[ebp], 0
  0ba81	74 0d		 je	 SHORT $L193016
  0ba83	8b 4d e4	 mov	 ecx, DWORD PTR $T193015[ebp]
  0ba86	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  0ba8b	89 45 e0	 mov	 DWORD PTR tv75[ebp], eax
  0ba8e	eb 07		 jmp	 SHORT $L193017
$L193016:
  0ba90	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$L193017:
  0ba97	8b 45 e0	 mov	 eax, DWORD PTR tv75[ebp]
  0ba9a	89 45 e8	 mov	 DWORD PTR $T193014[ebp], eax
  0ba9d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0baa4	8b 4d e8	 mov	 ecx, DWORD PTR $T193014[ebp]
  0baa7	89 4d ec	 mov	 DWORD PTR _pSubMenu$[ebp], ecx

; 2992 : //added by vito--
; 2993 : 	pSubMenu->SetMenuItemBkColor( m_menuItemBkColor );

  0baaa	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0baad	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0bab0	50		 push	 eax
  0bab1	8b 4d ec	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  0bab4	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 2994 : 	pSubMenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  0bab9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0babc	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0babf	52		 push	 edx
  0bac0	8b 4d ec	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  0bac3	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor

; 2995 : //--
; 2996 : 	pSubMenu->m_unselectcheck=m_unselectcheck;

  0bac8	8b 45 ec	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  0bacb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bace	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0bad1	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 2997 : 	pSubMenu->m_selectcheck=m_selectcheck;

  0bad4	8b 45 ec	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  0bad7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bada	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0badd	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 2998 : 	pSubMenu->checkmaps=checkmaps;

  0bae0	8b 45 ec	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  0bae3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bae6	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0bae9	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 2999 : 	pSubMenu->checkmapsshare=TRUE;

  0baec	8b 45 ec	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  0baef	c7 40 40 01 00
	00 00		 mov	 DWORD PTR [eax+64], 1

; 3000 : 	pSubMenu->CreatePopupMenu();

  0baf6	8b 4d ec	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  0baf9	e8 00 00 00 00	 call	 ?CreatePopupMenu@CMenu@@QAEHXZ ; CMenu::CreatePopupMenu

; 3001 : 	AppendODMenuW(lpstrText,MF_POPUP,(UINT)pSubMenu->m_hMenu, -1);

  0bafe	6a ff		 push	 -1
  0bb00	8b 4d ec	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  0bb03	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0bb06	52		 push	 edx
  0bb07	6a 10		 push	 16			; 00000010H
  0bb09	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0bb0c	50		 push	 eax
  0bb0d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bb10	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 3002 : 	return pSubMenu;

  0bb15	8b 45 ec	 mov	 eax, DWORD PTR _pSubMenu$[ebp]

; 3003 : }

  0bb18	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0bb1b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0bb22	83 c4 20	 add	 esp, 32			; 00000020H
  0bb25	3b ec		 cmp	 ebp, esp
  0bb27	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bb2c	8b e5		 mov	 esp, ebp
  0bb2e	5d		 pop	 ebp
  0bb2f	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L193018:
  007fb	68 af 0b 00 00	 push	 2991			; 00000bafH
  00800	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  00805	8b 45 e4	 mov	 eax, DWORD PTR $T193015[ebp]
  00808	50		 push	 eax
  00809	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  0080e	c3		 ret	 0
__ehhandler$?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z:
  0080f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193020
  00814	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z ENDP		; BCMenu::AppendODPopupMenuW
PUBLIC	?AppendODPopupMenuA@BCMenu@@QAEPAV1@PBD@Z	; BCMenu::AppendODPopupMenuA
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T193025 = -24						; size = 4
$T193024 = -20						; size = 4
_bRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
?AppendODPopupMenuA@BCMenu@@QAEPAV1@PBD@Z PROC NEAR	; BCMenu::AppendODPopupMenuA
; _this$ = ecx

; 3008 : {

  0bb40	55		 push	 ebp
  0bb41	8b ec		 mov	 ebp, esp
  0bb43	83 ec 18	 sub	 esp, 24			; 00000018H
  0bb46	56		 push	 esi
  0bb47	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0bb4c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0bb4f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0bb52	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0bb55	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0bb58	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0bb5b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0bb5e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3009 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  0bb61	8b f4		 mov	 esi, esp
  0bb63	6a 00		 push	 0
  0bb65	6a 00		 push	 0
  0bb67	6a ff		 push	 -1
  0bb69	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0bb6c	50		 push	 eax
  0bb6d	6a 00		 push	 0
  0bb6f	6a 00		 push	 0
  0bb71	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0bb77	3b f4		 cmp	 esi, esp
  0bb79	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bb7e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 3010 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0bb81	68 c2 0b 00 00	 push	 3010			; 00000bc2H
  0bb86	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0bb8b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0bb8e	d1 e1		 shl	 ecx, 1
  0bb90	51		 push	 ecx
  0bb91	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0bb96	83 c4 0c	 add	 esp, 12			; 0000000cH
  0bb99	89 45 ec	 mov	 DWORD PTR $T193024[ebp], eax
  0bb9c	8b 55 ec	 mov	 edx, DWORD PTR $T193024[ebp]
  0bb9f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3011 : 	memset(wszUtf8, 0, len * 2);

  0bba2	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0bba5	d1 e0		 shl	 eax, 1
  0bba7	50		 push	 eax
  0bba8	6a 00		 push	 0
  0bbaa	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0bbad	51		 push	 ecx
  0bbae	e8 00 00 00 00	 call	 _memset
  0bbb3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3012 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0bbb6	8b f4		 mov	 esi, esp
  0bbb8	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0bbbb	52		 push	 edx
  0bbbc	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0bbbf	50		 push	 eax
  0bbc0	6a ff		 push	 -1
  0bbc2	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  0bbc5	51		 push	 ecx
  0bbc6	6a 00		 push	 0
  0bbc8	6a 00		 push	 0
  0bbca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0bbd0	3b f4		 cmp	 esi, esp
  0bbd2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3013 : 
; 3014 : 	BCMenu* bRet = AppendODPopupMenuW( wszUtf8 );

  0bbd7	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  0bbda	52		 push	 edx
  0bbdb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0bbde	e8 00 00 00 00	 call	 ?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z ; BCMenu::AppendODPopupMenuW
  0bbe3	89 45 f0	 mov	 DWORD PTR _bRet$[ebp], eax

; 3015 : 	delete[] wszUtf8;

  0bbe6	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0bbe9	89 45 e8	 mov	 DWORD PTR $T193025[ebp], eax
  0bbec	8b 4d e8	 mov	 ecx, DWORD PTR $T193025[ebp]
  0bbef	51		 push	 ecx
  0bbf0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0bbf5	83 c4 04	 add	 esp, 4

; 3016 : 
; 3017 : 	return bRet;

  0bbf8	8b 45 f0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 3018 : }

  0bbfb	5e		 pop	 esi
  0bbfc	83 c4 18	 add	 esp, 24			; 00000018H
  0bbff	3b ec		 cmp	 ebp, esp
  0bc01	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bc06	8b e5		 mov	 esp, ebp
  0bc08	5d		 pop	 ebp
  0bc09	c2 04 00	 ret	 4
?AppendODPopupMenuA@BCMenu@@QAEPAV1@PBD@Z ENDP		; BCMenu::AppendODPopupMenuA
_TEXT	ENDS
EXTRN	__imp__ImageList_GetIconSize@12:NEAR
xdata$x	SEGMENT
$T193040 DD	0ffffffffH
	DD	FLAT:$L193027
	DD	00H
	DD	FLAT:$L193028
	DD	01H
	DD	FLAT:$L193029
$T193031 DD	019930520H
	DD	03H
	DD	FLAT:$T193040
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_bmp3$190170 = -96					; size = 8
_bmp2$190169 = -80					; size = 8
_bmp$190168 = -64					; size = 8
_pDC$190167 = -52					; size = 4
_pWnd$190165 = -48					; size = 4
_cy$ = -40						; size = 4
_cx$ = -28						; size = 4
_hIcon$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_il$ = 8						; size = 4
_xoffset$ = 12						; size = 4
_newlist$ = 16						; size = 4
?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z PROC NEAR ; BCMenu::ImageListDuplicate
; _this$ = ecx

; 3021 : {

  0bc10	55		 push	 ebp
  0bc11	8b ec		 mov	 ebp, esp
  0bc13	6a ff		 push	 -1
  0bc15	68 00 00 00 00	 push	 __ehhandler$?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z
  0bc1a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0bc20	50		 push	 eax
  0bc21	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0bc28	83 ec 58	 sub	 esp, 88			; 00000058H
  0bc2b	56		 push	 esi
  0bc2c	57		 push	 edi
  0bc2d	51		 push	 ecx
  0bc2e	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0bc31	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0bc36	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0bc3b	f3 ab		 rep stosd
  0bc3d	59		 pop	 ecx
  0bc3e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3022 : 	if (il == NULL||newlist==NULL||xoffset<0) return FALSE;

  0bc41	83 7d 08 00	 cmp	 DWORD PTR _il$[ebp], 0
  0bc45	74 0c		 je	 SHORT $L190160
  0bc47	83 7d 10 00	 cmp	 DWORD PTR _newlist$[ebp], 0
  0bc4b	74 06		 je	 SHORT $L190160
  0bc4d	83 7d 0c 00	 cmp	 DWORD PTR _xoffset$[ebp], 0
  0bc51	7d 07		 jge	 SHORT $L190159
$L190160:
  0bc53	33 c0		 xor	 eax, eax
  0bc55	e9 c1 01 00 00	 jmp	 $L190158
$L190159:

; 3023 : 	HICON hIcon = il->ExtractIcon(xoffset);

  0bc5a	8b 45 0c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  0bc5d	50		 push	 eax
  0bc5e	8b 4d 08	 mov	 ecx, DWORD PTR _il$[ebp]
  0bc61	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0bc66	89 45 ec	 mov	 DWORD PTR _hIcon$[ebp], eax

; 3024 : 	int cx, cy;
; 3025 : 	ImageList_GetIconSize(il->m_hImageList, &cx, &cy);

  0bc69	8b f4		 mov	 esi, esp
  0bc6b	8d 4d d8	 lea	 ecx, DWORD PTR _cy$[ebp]
  0bc6e	51		 push	 ecx
  0bc6f	8d 55 e4	 lea	 edx, DWORD PTR _cx$[ebp]
  0bc72	52		 push	 edx
  0bc73	8b 45 08	 mov	 eax, DWORD PTR _il$[ebp]
  0bc76	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0bc79	51		 push	 ecx
  0bc7a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetIconSize@12
  0bc80	3b f4		 cmp	 esi, esp
  0bc82	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3026 : 	newlist->Create(cx,cy,ILC_COLORDDB|ILC_MASK,1,1);

  0bc87	6a 01		 push	 1
  0bc89	6a 01		 push	 1
  0bc8b	68 ff 00 00 00	 push	 255			; 000000ffH
  0bc90	8b 55 d8	 mov	 edx, DWORD PTR _cy$[ebp]
  0bc93	52		 push	 edx
  0bc94	8b 45 e4	 mov	 eax, DWORD PTR _cx$[ebp]
  0bc97	50		 push	 eax
  0bc98	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0bc9b	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 3027 : 	newlist->Add(hIcon);

  0bca0	8b 4d ec	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  0bca3	51		 push	 ecx
  0bca4	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0bca7	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAUHICON__@@@Z ; CImageList::Add

; 3028 : 	::DestroyIcon(hIcon);

  0bcac	8b f4		 mov	 esi, esp
  0bcae	8b 55 ec	 mov	 edx, DWORD PTR _hIcon$[ebp]
  0bcb1	52		 push	 edx
  0bcb2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  0bcb8	3b f4		 cmp	 esi, esp
  0bcba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3029 : 	if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0bcbf	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0bcc4	85 c0		 test	 eax, eax
  0bcc6	0f 84 4a 01 00
	00		 je	 $L190164
  0bccc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0bcd3	0f 84 3d 01 00
	00		 je	 $L190164

; 3030 : 		CWnd *pWnd = AfxGetMainWnd();            // Get main window

  0bcd9	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  0bcde	89 45 d0	 mov	 DWORD PTR _pWnd$190165[ebp], eax

; 3031 : 		if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  0bce1	83 7d d0 00	 cmp	 DWORD PTR _pWnd$190165[ebp], 0
  0bce5	75 08		 jne	 SHORT $L190166
  0bce7	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  0bcec	89 45 d0	 mov	 DWORD PTR _pWnd$190165[ebp], eax
$L190166:

; 3032 : 		CDC *pDC = pWnd->GetDC();              // Get device context

  0bcef	8b 4d d0	 mov	 ecx, DWORD PTR _pWnd$190165[ebp]
  0bcf2	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  0bcf7	89 45 cc	 mov	 DWORD PTR _pDC$190167[ebp], eax

; 3033 : 		CBitmap bmp,bmp2,bmp3;

  0bcfa	8d 4d c0	 lea	 ecx, DWORD PTR _bmp$190168[ebp]
  0bcfd	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0bd02	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0bd09	8d 4d b0	 lea	 ecx, DWORD PTR _bmp2$190169[ebp]
  0bd0c	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0bd11	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0bd15	8d 4d a0	 lea	 ecx, DWORD PTR _bmp3$190170[ebp]
  0bd18	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0bd1d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3034 : 		GetBitmapFromImageList(pDC,newlist,0,bmp);

  0bd21	8d 45 c0	 lea	 eax, DWORD PTR _bmp$190168[ebp]
  0bd24	50		 push	 eax
  0bd25	6a 00		 push	 0
  0bd27	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0bd2a	51		 push	 ecx
  0bd2b	8b 55 cc	 mov	 edx, DWORD PTR _pDC$190167[ebp]
  0bd2e	52		 push	 edx
  0bd2f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bd32	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3035 : 		GetFadedBitmap(bmp);

  0bd37	8d 45 c0	 lea	 eax, DWORD PTR _bmp$190168[ebp]
  0bd3a	50		 push	 eax
  0bd3b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bd3e	e8 00 00 00 00	 call	 ?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetFadedBitmap

; 3036 : 		newlist->Add(&bmp,GetSysColor(COLOR_3DFACE));

  0bd43	8b f4		 mov	 esi, esp
  0bd45	6a 0f		 push	 15			; 0000000fH
  0bd47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0bd4d	3b f4		 cmp	 esi, esp
  0bd4f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bd54	50		 push	 eax
  0bd55	8d 4d c0	 lea	 ecx, DWORD PTR _bmp$190168[ebp]
  0bd58	51		 push	 ecx
  0bd59	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0bd5c	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3037 : 		GetBitmapFromImageList(pDC,newlist,0,bmp2);

  0bd61	8d 55 b0	 lea	 edx, DWORD PTR _bmp2$190169[ebp]
  0bd64	52		 push	 edx
  0bd65	6a 00		 push	 0
  0bd67	8b 45 10	 mov	 eax, DWORD PTR _newlist$[ebp]
  0bd6a	50		 push	 eax
  0bd6b	8b 4d cc	 mov	 ecx, DWORD PTR _pDC$190167[ebp]
  0bd6e	51		 push	 ecx
  0bd6f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bd72	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3038 : 		GetShadowBitmap(bmp2);

  0bd77	8d 55 b0	 lea	 edx, DWORD PTR _bmp2$190169[ebp]
  0bd7a	52		 push	 edx
  0bd7b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bd7e	e8 00 00 00 00	 call	 ?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetShadowBitmap

; 3039 : 		newlist->Add(&bmp2,GetSysColor(COLOR_3DFACE));

  0bd83	8b f4		 mov	 esi, esp
  0bd85	6a 0f		 push	 15			; 0000000fH
  0bd87	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0bd8d	3b f4		 cmp	 esi, esp
  0bd8f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bd94	50		 push	 eax
  0bd95	8d 45 b0	 lea	 eax, DWORD PTR _bmp2$190169[ebp]
  0bd98	50		 push	 eax
  0bd99	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0bd9c	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3040 : 		GetBitmapFromImageList(pDC,newlist,0,bmp3);

  0bda1	8d 4d a0	 lea	 ecx, DWORD PTR _bmp3$190170[ebp]
  0bda4	51		 push	 ecx
  0bda5	6a 00		 push	 0
  0bda7	8b 55 10	 mov	 edx, DWORD PTR _newlist$[ebp]
  0bdaa	52		 push	 edx
  0bdab	8b 45 cc	 mov	 eax, DWORD PTR _pDC$190167[ebp]
  0bdae	50		 push	 eax
  0bdaf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bdb2	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3041 : 		GetDisabledBitmap(bmp3);

  0bdb7	6a 00		 push	 0
  0bdb9	8d 4d a0	 lea	 ecx, DWORD PTR _bmp3$190170[ebp]
  0bdbc	51		 push	 ecx
  0bdbd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bdc0	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 3042 : 		newlist->Add(&bmp3,GetSysColor(COLOR_3DFACE));

  0bdc5	8b f4		 mov	 esi, esp
  0bdc7	6a 0f		 push	 15			; 0000000fH
  0bdc9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0bdcf	3b f4		 cmp	 esi, esp
  0bdd1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bdd6	50		 push	 eax
  0bdd7	8d 55 a0	 lea	 edx, DWORD PTR _bmp3$190170[ebp]
  0bdda	52		 push	 edx
  0bddb	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0bdde	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3043 : 		pWnd->ReleaseDC(pDC);  // Release the DC

  0bde3	8b 45 cc	 mov	 eax, DWORD PTR _pDC$190167[ebp]
  0bde6	50		 push	 eax
  0bde7	8b 4d d0	 mov	 ecx, DWORD PTR _pWnd$190165[ebp]
  0bdea	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 3044 : 	}

  0bdef	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0bdf3	8d 4d a0	 lea	 ecx, DWORD PTR _bmp3$190170[ebp]
  0bdf6	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0bdfb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0bdff	8d 4d b0	 lea	 ecx, DWORD PTR _bmp2$190169[ebp]
  0be02	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0be07	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0be0e	8d 4d c0	 lea	 ecx, DWORD PTR _bmp$190168[ebp]
  0be11	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L190164:

; 3045 : 	return TRUE;

  0be16	b8 01 00 00 00	 mov	 eax, 1
$L190158:

; 3046 : }

  0be1b	52		 push	 edx
  0be1c	8b cd		 mov	 ecx, ebp
  0be1e	50		 push	 eax
  0be1f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193039
  0be25	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0be2a	58		 pop	 eax
  0be2b	5a		 pop	 edx
  0be2c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0be2f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0be36	5f		 pop	 edi
  0be37	5e		 pop	 esi
  0be38	83 c4 64	 add	 esp, 100		; 00000064H
  0be3b	3b ec		 cmp	 ebp, esp
  0be3d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0be42	8b e5		 mov	 esp, ebp
  0be44	5d		 pop	 ebp
  0be45	c2 0c 00	 ret	 12			; 0000000cH
$L193039:
  0be48	05 00 00 00	 DD	 5
  0be4c	00 00 00 00	 DD	 $L193038
$L193038:
  0be50	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0be54	04 00 00 00	 DD	 4
  0be58	00 00 00 00	 DD	 $L193032
  0be5c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0be60	04 00 00 00	 DD	 4
  0be64	00 00 00 00	 DD	 $L193033
  0be68	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0be6c	08 00 00 00	 DD	 8
  0be70	00 00 00 00	 DD	 $L193034
  0be74	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0be78	08 00 00 00	 DD	 8
  0be7c	00 00 00 00	 DD	 $L193035
  0be80	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0be84	08 00 00 00	 DD	 8
  0be88	00 00 00 00	 DD	 $L193036
$L193036:
  0be8c	62		 DB	 98			; 00000062H
  0be8d	6d		 DB	 109			; 0000006dH
  0be8e	70		 DB	 112			; 00000070H
  0be8f	33		 DB	 51			; 00000033H
  0be90	00		 DB	 0
$L193035:
  0be91	62		 DB	 98			; 00000062H
  0be92	6d		 DB	 109			; 0000006dH
  0be93	70		 DB	 112			; 00000070H
  0be94	32		 DB	 50			; 00000032H
  0be95	00		 DB	 0
$L193034:
  0be96	62		 DB	 98			; 00000062H
  0be97	6d		 DB	 109			; 0000006dH
  0be98	70		 DB	 112			; 00000070H
  0be99	00		 DB	 0
$L193033:
  0be9a	63		 DB	 99			; 00000063H
  0be9b	79		 DB	 121			; 00000079H
  0be9c	00		 DB	 0
$L193032:
  0be9d	63		 DB	 99			; 00000063H
  0be9e	78		 DB	 120			; 00000078H
  0be9f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193027:
  00819	8d 4d c0	 lea	 ecx, DWORD PTR _bmp$190168[ebp]
  0081c	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L193028:
  00821	8d 4d b0	 lea	 ecx, DWORD PTR _bmp2$190169[ebp]
  00824	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L193029:
  00829	8d 4d a0	 lea	 ecx, DWORD PTR _bmp3$190170[ebp]
  0082c	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z:
  00831	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193031
  00836	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z ENDP ; BCMenu::ImageListDuplicate
EXTRN	?GetSubMenu@CMenu@@QBEPAV1@H@Z:NEAR		; CMenu::GetSubMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPos$ = 8						; size = 4
?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z PROC NEAR		; BCMenu::GetSubMenu
; _this$ = ecx

; 3053 : {

  0bea0	55		 push	 ebp
  0bea1	8b ec		 mov	 ebp, esp
  0bea3	51		 push	 ecx
  0bea4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0beab	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3054 : 	return CMenu::GetSubMenu (nPos);

  0beae	8b 45 08	 mov	 eax, DWORD PTR _nPos$[ebp]
  0beb1	50		 push	 eax
  0beb2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0beb5	e8 00 00 00 00	 call	 ?GetSubMenu@CMenu@@QBEPAV1@H@Z ; CMenu::GetSubMenu

; 3055 : }

  0beba	83 c4 04	 add	 esp, 4
  0bebd	3b ec		 cmp	 ebp, esp
  0bebf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bec4	8b e5		 mov	 esp, ebp
  0bec6	5d		 pop	 ebp
  0bec7	c2 04 00	 ret	 4
?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ENDP		; BCMenu::GetSubMenu
_TEXT	ENDS
PUBLIC	?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z		; BCMenu::GetSubMenu
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:NEAR
xdata$x	SEGMENT
$T193052 DD	0ffffffffH
	DD	FLAT:$L193045
$T193047 DD	019930520H
	DD	01H
	DD	FLAT:$T193052
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T193044 = -44						; size = 4
$T193043 = -40						; size = 4
_i$190181 = -36						; size = 4
_name$ = -28						; size = 4
_num$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpszSubMenuName$ = 8					; size = 4
?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z PROC NEAR	; BCMenu::GetSubMenu
; _this$ = ecx

; 3058 : {

  0bed0	55		 push	 ebp
  0bed1	8b ec		 mov	 ebp, esp
  0bed3	6a ff		 push	 -1
  0bed5	68 00 00 00 00	 push	 __ehhandler$?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z
  0beda	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0bee0	50		 push	 eax
  0bee1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0bee8	83 ec 20	 sub	 esp, 32			; 00000020H
  0beeb	56		 push	 esi
  0beec	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0bef1	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0bef4	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0bef7	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0befa	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0befd	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0bf00	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0bf03	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0bf06	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0bf09	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3059 : 	int num = GetMenuItemCount ();

  0bf0c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bf0f	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0bf14	89 45 ec	 mov	 DWORD PTR _num$[ebp], eax

; 3060 : 	CString name;

  0bf17	8b f4		 mov	 esi, esp
  0bf19	8d 4d e4	 lea	 ecx, DWORD PTR _name$[ebp]
  0bf1c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0bf22	3b f4		 cmp	 esi, esp
  0bf24	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bf29	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3061 : 	
; 3062 : 	for (int i=0; i<num; i++)

  0bf30	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$190181[ebp], 0
  0bf37	eb 09		 jmp	 SHORT $L190182
$L190183:
  0bf39	8b 45 dc	 mov	 eax, DWORD PTR _i$190181[ebp]
  0bf3c	83 c0 01	 add	 eax, 1
  0bf3f	89 45 dc	 mov	 DWORD PTR _i$190181[ebp], eax
$L190182:
  0bf42	8b 4d dc	 mov	 ecx, DWORD PTR _i$190181[ebp]
  0bf45	3b 4d ec	 cmp	 ecx, DWORD PTR _num$[ebp]
  0bf48	7d 5e		 jge	 SHORT $L190184

; 3063 : 	{
; 3064 : 		GetMenuString (i, name, MF_BYPOSITION);

  0bf4a	68 00 04 00 00	 push	 1024			; 00000400H
  0bf4f	8d 55 e4	 lea	 edx, DWORD PTR _name$[ebp]
  0bf52	52		 push	 edx
  0bf53	8b 45 dc	 mov	 eax, DWORD PTR _i$190181[ebp]
  0bf56	50		 push	 eax
  0bf57	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bf5a	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 3065 : 		if (name.Compare (lpszSubMenuName) == 0)

  0bf5f	8b f4		 mov	 esi, esp
  0bf61	8b 4d 08	 mov	 ecx, DWORD PTR _lpszSubMenuName$[ebp]
  0bf64	51		 push	 ecx
  0bf65	8d 4d e4	 lea	 ecx, DWORD PTR _name$[ebp]
  0bf68	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  0bf6e	3b f4		 cmp	 esi, esp
  0bf70	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bf75	85 c0		 test	 eax, eax
  0bf77	75 2d		 jne	 SHORT $L190185

; 3066 : 		{
; 3067 : 			return CMenu::GetSubMenu (i);

  0bf79	8b 55 dc	 mov	 edx, DWORD PTR _i$190181[ebp]
  0bf7c	52		 push	 edx
  0bf7d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0bf80	e8 00 00 00 00	 call	 ?GetSubMenu@CMenu@@QBEPAV1@H@Z ; CMenu::GetSubMenu
  0bf85	89 45 d8	 mov	 DWORD PTR $T193043[ebp], eax
  0bf88	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0bf8f	8b f4		 mov	 esi, esp
  0bf91	8d 4d e4	 lea	 ecx, DWORD PTR _name$[ebp]
  0bf94	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0bf9a	3b f4		 cmp	 esi, esp
  0bf9c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bfa1	8b 45 d8	 mov	 eax, DWORD PTR $T193043[ebp]
  0bfa4	eb 25		 jmp	 SHORT $L190178
$L190185:

; 3068 : 		}
; 3069 : 	}

  0bfa6	eb 91		 jmp	 SHORT $L190183
$L190184:

; 3070 : 	
; 3071 : 	return NULL;

  0bfa8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T193044[ebp], 0
  0bfaf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0bfb6	8b f4		 mov	 esi, esp
  0bfb8	8d 4d e4	 lea	 ecx, DWORD PTR _name$[ebp]
  0bfbb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0bfc1	3b f4		 cmp	 esi, esp
  0bfc3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bfc8	8b 45 d4	 mov	 eax, DWORD PTR $T193044[ebp]
$L190178:

; 3072 : }

  0bfcb	52		 push	 edx
  0bfcc	8b cd		 mov	 ecx, ebp
  0bfce	50		 push	 eax
  0bfcf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193051
  0bfd5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0bfda	58		 pop	 eax
  0bfdb	5a		 pop	 edx
  0bfdc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0bfdf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0bfe6	5e		 pop	 esi
  0bfe7	83 c4 2c	 add	 esp, 44			; 0000002cH
  0bfea	3b ec		 cmp	 ebp, esp
  0bfec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0bff1	8b e5		 mov	 esp, ebp
  0bff3	5d		 pop	 ebp
  0bff4	c2 04 00	 ret	 4
$L193051:
  0bff7	01 00 00 00	 DD	 1
  0bffb	00 00 00 00	 DD	 $L193050
$L193050:
  0bfff	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0c003	04 00 00 00	 DD	 4
  0c007	00 00 00 00	 DD	 $L193048
$L193048:
  0c00b	6e		 DB	 110			; 0000006eH
  0c00c	61		 DB	 97			; 00000061H
  0c00d	6d		 DB	 109			; 0000006dH
  0c00e	65		 DB	 101			; 00000065H
  0c00f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193045:
  0083b	8b f4		 mov	 esi, esp
  0083d	8d 4d e4	 lea	 ecx, DWORD PTR _name$[ebp]
  00840	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00846	3b f4		 cmp	 esi, esp
  00848	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z:
  0084d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193047
  00852	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z ENDP		; BCMenu::GetSubMenu
PUBLIC	?GetSubBCMenu@BCMenu@@QAEPAV1@PAD@Z		; BCMenu::GetSubBCMenu
PUBLIC	?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z		; BCMenu::GetSubBCMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T193055 = -24						; size = 4
$T193054 = -20						; size = 4
_pMenu$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PAD@Z PROC NEAR		; BCMenu::GetSubBCMenu
; _this$ = ecx

; 3075 : {

  0c010	55		 push	 ebp
  0c011	8b ec		 mov	 ebp, esp
  0c013	83 ec 18	 sub	 esp, 24			; 00000018H
  0c016	56		 push	 esi
  0c017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c01c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0c01f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0c022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0c025	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0c028	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0c02b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0c02e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3076 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  0c031	8b f4		 mov	 esi, esp
  0c033	6a 00		 push	 0
  0c035	6a 00		 push	 0
  0c037	6a ff		 push	 -1
  0c039	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0c03c	50		 push	 eax
  0c03d	6a 00		 push	 0
  0c03f	6a 00		 push	 0
  0c041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c047	3b f4		 cmp	 esi, esp
  0c049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c04e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 3077 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0c051	68 05 0c 00 00	 push	 3077			; 00000c05H
  0c056	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c05b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0c05e	d1 e1		 shl	 ecx, 1
  0c060	51		 push	 ecx
  0c061	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0c066	83 c4 0c	 add	 esp, 12			; 0000000cH
  0c069	89 45 ec	 mov	 DWORD PTR $T193054[ebp], eax
  0c06c	8b 55 ec	 mov	 edx, DWORD PTR $T193054[ebp]
  0c06f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3078 : 	memset(wszUtf8, 0, len * 2);

  0c072	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0c075	d1 e0		 shl	 eax, 1
  0c077	50		 push	 eax
  0c078	6a 00		 push	 0
  0c07a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0c07d	51		 push	 ecx
  0c07e	e8 00 00 00 00	 call	 _memset
  0c083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3079 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);	

  0c086	8b f4		 mov	 esi, esp
  0c088	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0c08b	52		 push	 edx
  0c08c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c08f	50		 push	 eax
  0c090	6a ff		 push	 -1
  0c092	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  0c095	51		 push	 ecx
  0c096	6a 00		 push	 0
  0c098	6a 00		 push	 0
  0c09a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c0a0	3b f4		 cmp	 esi, esp
  0c0a2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3080 : 	
; 3081 : 	BCMenu* pMenu = GetSubBCMenu( wszUtf8);

  0c0a7	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  0c0aa	52		 push	 edx
  0c0ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c0ae	e8 00 00 00 00	 call	 ?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z ; BCMenu::GetSubBCMenu
  0c0b3	89 45 f0	 mov	 DWORD PTR _pMenu$[ebp], eax

; 3082 : 	delete[] wszUtf8;

  0c0b6	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c0b9	89 45 e8	 mov	 DWORD PTR $T193055[ebp], eax
  0c0bc	8b 4d e8	 mov	 ecx, DWORD PTR $T193055[ebp]
  0c0bf	51		 push	 ecx
  0c0c0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0c0c5	83 c4 04	 add	 esp, 4

; 3083 : 
; 3084 : 	return pMenu;

  0c0c8	8b 45 f0	 mov	 eax, DWORD PTR _pMenu$[ebp]

; 3085 : }

  0c0cb	5e		 pop	 esi
  0c0cc	83 c4 18	 add	 esp, 24			; 00000018H
  0c0cf	3b ec		 cmp	 ebp, esp
  0c0d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c0d6	8b e5		 mov	 esp, ebp
  0c0d8	5d		 pop	 ebp
  0c0d9	c2 04 00	 ret	 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PAD@Z ENDP		; BCMenu::GetSubBCMenu
; Function compile flags: /Odt /RTCsu
_flag$190209 = -20					; size = 4
_ptr$190207 = -16					; size = 4
_bchmenu$190205 = -12					; size = 4
_mdata$ = -8						; size = 4
_this$ = -4						; size = 4
_lpszSubMenuName$ = 8					; size = 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z PROC NEAR		; BCMenu::GetSubBCMenu
; _this$ = ecx

; 3088 : {

  0c0e0	55		 push	 ebp
  0c0e1	8b ec		 mov	 ebp, esp
  0c0e3	83 ec 14	 sub	 esp, 20			; 00000014H
  0c0e6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c0eb	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0c0ee	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0c0f1	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0c0f4	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0c0f7	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0c0fa	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3089 : 	BCMenuData *mdata;
; 3090 : 	mdata=FindMenuOption(lpszSubMenuName);

  0c0fd	8b 45 08	 mov	 eax, DWORD PTR _lpszSubMenuName$[ebp]
  0c100	50		 push	 eax
  0c101	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c104	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
  0c109	89 45 f8	 mov	 DWORD PTR _mdata$[ebp], eax

; 3091 : 	if(mdata){

  0c10c	83 7d f8 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  0c110	74 37		 je	 SHORT $L190204

; 3092 : 		HMENU bchmenu=(HMENU)mdata->nID;

  0c112	8b 4d f8	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0c115	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0c118	89 55 f4	 mov	 DWORD PTR _bchmenu$190205[ebp], edx

; 3093 : 		CMenu *ptr=FromHandle(bchmenu);

  0c11b	8b 45 f4	 mov	 eax, DWORD PTR _bchmenu$190205[ebp]
  0c11e	50		 push	 eax
  0c11f	e8 00 00 00 00	 call	 ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z ; CMenu::FromHandle
  0c124	89 45 f0	 mov	 DWORD PTR _ptr$190207[ebp], eax

; 3094 : 		if(ptr){

  0c127	83 7d f0 00	 cmp	 DWORD PTR _ptr$190207[ebp], 0
  0c12b	74 1c		 je	 SHORT $L190204

; 3095 : 			BOOL flag=ptr->IsKindOf(RUNTIME_CLASS( BCMenu ));

  0c12d	e8 00 00 00 00	 call	 ?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ ; BCMenu::GetThisClass
  0c132	50		 push	 eax
  0c133	8b 4d f0	 mov	 ecx, DWORD PTR _ptr$190207[ebp]
  0c136	e8 00 00 00 00	 call	 ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ; CObject::IsKindOf
  0c13b	89 45 ec	 mov	 DWORD PTR _flag$190209[ebp], eax

; 3096 : 			if(flag)return((BCMenu *)ptr);

  0c13e	83 7d ec 00	 cmp	 DWORD PTR _flag$190209[ebp], 0
  0c142	74 05		 je	 SHORT $L190204
  0c144	8b 45 f0	 mov	 eax, DWORD PTR _ptr$190207[ebp]
  0c147	eb 02		 jmp	 SHORT $L190202
$L190204:

; 3097 : 		}
; 3098 : 	}
; 3099 : 	return NULL;

  0c149	33 c0		 xor	 eax, eax
$L190202:

; 3100 : }

  0c14b	83 c4 14	 add	 esp, 20			; 00000014H
  0c14e	3b ec		 cmp	 ebp, esp
  0c150	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c155	8b e5		 mov	 esp, ebp
  0c157	5d		 pop	 ebp
  0c158	c2 04 00	 ret	 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z ENDP		; BCMenu::GetSubBCMenu
_TEXT	ENDS
PUBLIC	?GetMenuPosition@BCMenu@@QAEHPAD@Z		; BCMenu::GetMenuPosition
PUBLIC	?GetMenuPosition@BCMenu@@QAEHPA_W@Z		; BCMenu::GetMenuPosition
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T193059 = -24						; size = 4
$T193058 = -20						; size = 4
_iRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
?GetMenuPosition@BCMenu@@QAEHPAD@Z PROC NEAR		; BCMenu::GetMenuPosition
; _this$ = ecx

; 3106 : {

  0c160	55		 push	 ebp
  0c161	8b ec		 mov	 ebp, esp
  0c163	83 ec 18	 sub	 esp, 24			; 00000018H
  0c166	56		 push	 esi
  0c167	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c16c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0c16f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0c172	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0c175	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0c178	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0c17b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0c17e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3107 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  0c181	8b f4		 mov	 esi, esp
  0c183	6a 00		 push	 0
  0c185	6a 00		 push	 0
  0c187	6a ff		 push	 -1
  0c189	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0c18c	50		 push	 eax
  0c18d	6a 00		 push	 0
  0c18f	6a 00		 push	 0
  0c191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c197	3b f4		 cmp	 esi, esp
  0c199	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c19e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 3108 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0c1a1	68 24 0c 00 00	 push	 3108			; 00000c24H
  0c1a6	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c1ab	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0c1ae	d1 e1		 shl	 ecx, 1
  0c1b0	51		 push	 ecx
  0c1b1	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0c1b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  0c1b9	89 45 ec	 mov	 DWORD PTR $T193058[ebp], eax
  0c1bc	8b 55 ec	 mov	 edx, DWORD PTR $T193058[ebp]
  0c1bf	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3109 : 	memset(wszUtf8, 0, len * 2);

  0c1c2	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0c1c5	d1 e0		 shl	 eax, 1
  0c1c7	50		 push	 eax
  0c1c8	6a 00		 push	 0
  0c1ca	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0c1cd	51		 push	 ecx
  0c1ce	e8 00 00 00 00	 call	 _memset
  0c1d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3110 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);

  0c1d6	8b f4		 mov	 esi, esp
  0c1d8	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0c1db	52		 push	 edx
  0c1dc	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c1df	50		 push	 eax
  0c1e0	6a ff		 push	 -1
  0c1e2	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  0c1e5	51		 push	 ecx
  0c1e6	6a 00		 push	 0
  0c1e8	6a 00		 push	 0
  0c1ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c1f0	3b f4		 cmp	 esi, esp
  0c1f2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3111 : 	
; 3112 : 	int iRet = GetMenuPosition( wszUtf8);

  0c1f7	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  0c1fa	52		 push	 edx
  0c1fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c1fe	e8 00 00 00 00	 call	 ?GetMenuPosition@BCMenu@@QAEHPA_W@Z ; BCMenu::GetMenuPosition
  0c203	89 45 f0	 mov	 DWORD PTR _iRet$[ebp], eax

; 3113 : 	delete[] wszUtf8;

  0c206	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c209	89 45 e8	 mov	 DWORD PTR $T193059[ebp], eax
  0c20c	8b 4d e8	 mov	 ecx, DWORD PTR $T193059[ebp]
  0c20f	51		 push	 ecx
  0c210	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0c215	83 c4 04	 add	 esp, 4

; 3114 : 
; 3115 : 	return iRet;

  0c218	8b 45 f0	 mov	 eax, DWORD PTR _iRet$[ebp]

; 3116 : }

  0c21b	5e		 pop	 esi
  0c21c	83 c4 18	 add	 esp, 24			; 00000018H
  0c21f	3b ec		 cmp	 ebp, esp
  0c221	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c226	8b e5		 mov	 esp, ebp
  0c228	5d		 pop	 ebp
  0c229	c2 04 00	 ret	 4
?GetMenuPosition@BCMenu@@QAEHPAD@Z ENDP			; BCMenu::GetMenuPosition
; Function compile flags: /Odt /RTCsu
_szWide$190236 = -20					; size = 4
_psubmenu$ = -16					; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
?GetMenuPosition@BCMenu@@QAEHPA_W@Z PROC NEAR		; BCMenu::GetMenuPosition
; _this$ = ecx

; 3119 : {

  0c230	55		 push	 ebp
  0c231	8b ec		 mov	 ebp, esp
  0c233	83 ec 14	 sub	 esp, 20			; 00000014H
  0c236	56		 push	 esi
  0c237	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c23c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0c23f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0c242	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0c245	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0c248	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0c24b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3120 : 	int i,j;
; 3121 : 	BCMenu* psubmenu;
; 3122 : 	for(i=0;i<(int)(GetMenuItemCount());++i)

  0c24e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0c255	eb 09		 jmp	 SHORT $L190231
$L190232:
  0c257	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0c25a	83 c0 01	 add	 eax, 1
  0c25d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L190231:
  0c260	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c263	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  0c268	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  0c26b	0f 8d 80 00 00
	00		 jge	 $L190233

; 3123 : 	{
; 3124 : 		psubmenu=(BCMenu *)GetSubMenu(i);

  0c271	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0c274	51		 push	 ecx
  0c275	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c278	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0c27d	89 45 f0	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 3125 : 		if(!psubmenu)

  0c280	83 7d f0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  0c284	75 66		 jne	 SHORT $L190235

; 3126 : 		{
; 3127 : 			const wchar_t *szWide;//SK: we use const to prevent misuse of this Ptr
; 3128 : 			for(j=0;j<=m_MenuList.GetUpperBound();++j)

  0c286	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0c28d	eb 09		 jmp	 SHORT $L190237
$L190238:
  0c28f	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  0c292	83 c2 01	 add	 edx, 1
  0c295	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx
$L190237:
  0c298	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c29b	83 c1 08	 add	 ecx, 8
  0c29e	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0c2a3	39 45 f4	 cmp	 DWORD PTR _j$[ebp], eax
  0c2a6	7f 44		 jg	 SHORT $L190235

; 3129 : 			{     
; 3130 : 				szWide = m_MenuList[j]->GetWideString ();

  0c2a8	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0c2ab	50		 push	 eax
  0c2ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c2af	83 c1 08	 add	 ecx, 8
  0c2b2	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0c2b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  0c2b9	e8 00 00 00 00	 call	 ?GetWideString@BCMenuData@@QAEPB_WXZ ; BCMenuData::GetWideString
  0c2be	89 45 ec	 mov	 DWORD PTR _szWide$190236[ebp], eax

; 3131 : 				if(szWide && !wcscmp(pText,szWide))//SK: modified for dynamic allocation

  0c2c1	83 7d ec 00	 cmp	 DWORD PTR _szWide$190236[ebp], 0
  0c2c5	74 23		 je	 SHORT $L190240
  0c2c7	8b f4		 mov	 esi, esp
  0c2c9	8b 4d ec	 mov	 ecx, DWORD PTR _szWide$190236[ebp]
  0c2cc	51		 push	 ecx
  0c2cd	8b 55 08	 mov	 edx, DWORD PTR _pText$[ebp]
  0c2d0	52		 push	 edx
  0c2d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscmp
  0c2d7	83 c4 08	 add	 esp, 8
  0c2da	3b f4		 cmp	 esi, esp
  0c2dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c2e1	85 c0		 test	 eax, eax
  0c2e3	75 05		 jne	 SHORT $L190240

; 3132 : 					return j;

  0c2e5	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0c2e8	eb 0a		 jmp	 SHORT $L190226
$L190240:

; 3133 : 			}

  0c2ea	eb a3		 jmp	 SHORT $L190238
$L190235:

; 3134 : 		}
; 3135 : 	}

  0c2ec	e9 66 ff ff ff	 jmp	 $L190232
$L190233:

; 3136 : 	// means no found;
; 3137 : 	return -1;

  0c2f1	83 c8 ff	 or	 eax, -1
$L190226:

; 3138 : }

  0c2f4	5e		 pop	 esi
  0c2f5	83 c4 14	 add	 esp, 20			; 00000014H
  0c2f8	3b ec		 cmp	 ebp, esp
  0c2fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c2ff	8b e5		 mov	 esp, ebp
  0c301	5d		 pop	 ebp
  0c302	c2 04 00	 ret	 4
?GetMenuPosition@BCMenu@@QAEHPA_W@Z ENDP		; BCMenu::GetMenuPosition
_TEXT	ENDS
PUBLIC	?RemoveMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z	; BCMenu::RemoveMenu
PUBLIC	?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z	; BCMenu::RemoveMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T193063 = -24						; size = 4
$T193062 = -20						; size = 4
_iRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?RemoveMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z PROC NEAR	; BCMenu::RemoveMenu
; _this$ = ecx

; 3141 : {

  0c310	55		 push	 ebp
  0c311	8b ec		 mov	 ebp, esp
  0c313	83 ec 18	 sub	 esp, 24			; 00000018H
  0c316	56		 push	 esi
  0c317	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c31c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0c31f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0c322	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0c325	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0c328	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0c32b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0c32e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3142 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  0c331	8b f4		 mov	 esi, esp
  0c333	6a 00		 push	 0
  0c335	6a 00		 push	 0
  0c337	6a ff		 push	 -1
  0c339	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0c33c	50		 push	 eax
  0c33d	6a 00		 push	 0
  0c33f	6a 00		 push	 0
  0c341	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c347	3b f4		 cmp	 esi, esp
  0c349	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c34e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 3143 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0c351	68 47 0c 00 00	 push	 3143			; 00000c47H
  0c356	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c35b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0c35e	d1 e1		 shl	 ecx, 1
  0c360	51		 push	 ecx
  0c361	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0c366	83 c4 0c	 add	 esp, 12			; 0000000cH
  0c369	89 45 ec	 mov	 DWORD PTR $T193062[ebp], eax
  0c36c	8b 55 ec	 mov	 edx, DWORD PTR $T193062[ebp]
  0c36f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3144 : 	memset(wszUtf8, 0, len * 2);

  0c372	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0c375	d1 e0		 shl	 eax, 1
  0c377	50		 push	 eax
  0c378	6a 00		 push	 0
  0c37a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0c37d	51		 push	 ecx
  0c37e	e8 00 00 00 00	 call	 _memset
  0c383	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3145 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);

  0c386	8b f4		 mov	 esi, esp
  0c388	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0c38b	52		 push	 edx
  0c38c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c38f	50		 push	 eax
  0c390	6a ff		 push	 -1
  0c392	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  0c395	51		 push	 ecx
  0c396	6a 00		 push	 0
  0c398	6a 00		 push	 0
  0c39a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c3a0	3b f4		 cmp	 esi, esp
  0c3a2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3146 : 
; 3147 : 	int iRet = RemoveMenu( wszUtf8, sPos);

  0c3a7	8b 55 0c	 mov	 edx, DWORD PTR _sPos$[ebp]
  0c3aa	52		 push	 edx
  0c3ab	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c3ae	50		 push	 eax
  0c3af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c3b2	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ; BCMenu::RemoveMenu
  0c3b7	89 45 f0	 mov	 DWORD PTR _iRet$[ebp], eax

; 3148 : 	delete[] wszUtf8;

  0c3ba	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0c3bd	89 4d e8	 mov	 DWORD PTR $T193063[ebp], ecx
  0c3c0	8b 55 e8	 mov	 edx, DWORD PTR $T193063[ebp]
  0c3c3	52		 push	 edx
  0c3c4	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0c3c9	83 c4 04	 add	 esp, 4

; 3149 : 
; 3150 : 	return iRet;

  0c3cc	8b 45 f0	 mov	 eax, DWORD PTR _iRet$[ebp]

; 3151 : }

  0c3cf	5e		 pop	 esi
  0c3d0	83 c4 18	 add	 esp, 24			; 00000018H
  0c3d3	3b ec		 cmp	 ebp, esp
  0c3d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c3da	8b e5		 mov	 esp, ebp
  0c3dc	5d		 pop	 ebp
  0c3dd	c2 08 00	 ret	 8
?RemoveMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ENDP	; BCMenu::RemoveMenu
; Function compile flags: /Odt /RTCsu
_nPos$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z PROC NEAR ; BCMenu::RemoveMenu
; _this$ = ecx

; 3154 : {

  0c3e0	55		 push	 ebp
  0c3e1	8b ec		 mov	 ebp, esp
  0c3e3	83 ec 08	 sub	 esp, 8
  0c3e6	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0c3ed	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0c3f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3155 : 	int nPos = GetMenuPosition(pText);

  0c3f7	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0c3fa	50		 push	 eax
  0c3fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c3fe	e8 00 00 00 00	 call	 ?GetMenuPosition@BCMenu@@QAEHPA_W@Z ; BCMenu::GetMenuPosition
  0c403	89 45 f8	 mov	 DWORD PTR _nPos$[ebp], eax

; 3156 : 	if(nPos != -1)

  0c406	83 7d f8 ff	 cmp	 DWORD PTR _nPos$[ebp], -1
  0c40a	74 11		 je	 SHORT $L190259

; 3157 : 	{
; 3158 : 		RemoveMenu(nPos, MF_BYPOSITION);

  0c40c	68 00 04 00 00	 push	 1024			; 00000400H
  0c411	8b 4d f8	 mov	 ecx, DWORD PTR _nPos$[ebp]
  0c414	51		 push	 ecx
  0c415	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c418	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
$L190259:

; 3159 : 	}
; 3160 : 	if(sPos == BCMENU_HEAD)

  0c41d	83 7d 0c 01	 cmp	 DWORD PTR _sPos$[ebp], 1
  0c421	75 32		 jne	 SHORT $L190260

; 3161 : 	{
; 3162 : 		ASSERT(nPos - 1 >= 0);

  0c423	8b 55 f8	 mov	 edx, DWORD PTR _nPos$[ebp]
  0c426	83 ea 01	 sub	 edx, 1
  0c429	79 14		 jns	 SHORT $L193065
  0c42b	68 5a 0c 00 00	 push	 3162			; 00000c5aH
  0c430	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c435	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0c43a	85 c0		 test	 eax, eax
  0c43c	74 01		 je	 SHORT $L193065
  0c43e	cc		 int	 3
$L193065:

; 3163 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  0c43f	68 00 04 00 00	 push	 1024			; 00000400H
  0c444	8b 4d f8	 mov	 ecx, DWORD PTR _nPos$[ebp]
  0c447	83 e9 01	 sub	 ecx, 1
  0c44a	51		 push	 ecx
  0c44b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c44e	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu

; 3164 : 	}
; 3165 : 	else if(sPos == BCMENU_TAIL)

  0c453	eb 66		 jmp	 SHORT $L190262
$L190260:
  0c455	83 7d 0c 02	 cmp	 DWORD PTR _sPos$[ebp], 2
  0c459	75 16		 jne	 SHORT $L190263

; 3166 : 	{
; 3167 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  0c45b	68 00 04 00 00	 push	 1024			; 00000400H
  0c460	8b 55 f8	 mov	 edx, DWORD PTR _nPos$[ebp]
  0c463	83 ea 01	 sub	 edx, 1
  0c466	52		 push	 edx
  0c467	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c46a	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu

; 3168 : 	}
; 3169 : 	else if(sPos == BCMENU_BOTH)

  0c46f	eb 4a		 jmp	 SHORT $L190262
$L190263:
  0c471	83 7d 0c 03	 cmp	 DWORD PTR _sPos$[ebp], 3
  0c475	75 44		 jne	 SHORT $L190262

; 3170 : 	{
; 3171 : 		// remove the end first;
; 3172 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  0c477	68 00 04 00 00	 push	 1024			; 00000400H
  0c47c	8b 45 f8	 mov	 eax, DWORD PTR _nPos$[ebp]
  0c47f	83 e8 01	 sub	 eax, 1
  0c482	50		 push	 eax
  0c483	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c486	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu

; 3173 : 		// remove the head;
; 3174 : 		ASSERT(nPos - 1 >= 0);

  0c48b	8b 4d f8	 mov	 ecx, DWORD PTR _nPos$[ebp]
  0c48e	83 e9 01	 sub	 ecx, 1
  0c491	79 14		 jns	 SHORT $L193066
  0c493	68 66 0c 00 00	 push	 3174			; 00000c66H
  0c498	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c49d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0c4a2	85 c0		 test	 eax, eax
  0c4a4	74 01		 je	 SHORT $L193066
  0c4a6	cc		 int	 3
$L193066:

; 3175 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  0c4a7	68 00 04 00 00	 push	 1024			; 00000400H
  0c4ac	8b 45 f8	 mov	 eax, DWORD PTR _nPos$[ebp]
  0c4af	83 e8 01	 sub	 eax, 1
  0c4b2	50		 push	 eax
  0c4b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c4b6	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
$L190262:

; 3176 : 	}
; 3177 : 	return nPos;

  0c4bb	8b 45 f8	 mov	 eax, DWORD PTR _nPos$[ebp]

; 3178 : }

  0c4be	83 c4 08	 add	 esp, 8
  0c4c1	3b ec		 cmp	 ebp, esp
  0c4c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c4c8	8b e5		 mov	 esp, ebp
  0c4ca	5d		 pop	 ebp
  0c4cb	c2 08 00	 ret	 8
?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ENDP	; BCMenu::RemoveMenu
_TEXT	ENDS
PUBLIC	?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z	; BCMenu::DeleteMenu
PUBLIC	?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z	; BCMenu::DeleteMenu
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T193069 = -24						; size = 4
$T193068 = -20						; size = 4
_iRet$ = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z PROC NEAR	; BCMenu::DeleteMenu
; _this$ = ecx

; 3181 : {	

  0c4d0	55		 push	 ebp
  0c4d1	8b ec		 mov	 ebp, esp
  0c4d3	83 ec 18	 sub	 esp, 24			; 00000018H
  0c4d6	56		 push	 esi
  0c4d7	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c4dc	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0c4df	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0c4e2	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0c4e5	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0c4e8	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0c4eb	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0c4ee	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3182 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  0c4f1	8b f4		 mov	 esi, esp
  0c4f3	6a 00		 push	 0
  0c4f5	6a 00		 push	 0
  0c4f7	6a ff		 push	 -1
  0c4f9	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0c4fc	50		 push	 eax
  0c4fd	6a 00		 push	 0
  0c4ff	6a 00		 push	 0
  0c501	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c507	3b f4		 cmp	 esi, esp
  0c509	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c50e	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 3183 : 	wchar_t* wszUtf8 = new wchar_t[len];

  0c511	68 6f 0c 00 00	 push	 3183			; 00000c6fH
  0c516	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c51b	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  0c51e	d1 e1		 shl	 ecx, 1
  0c520	51		 push	 ecx
  0c521	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0c526	83 c4 0c	 add	 esp, 12			; 0000000cH
  0c529	89 45 ec	 mov	 DWORD PTR $T193068[ebp], eax
  0c52c	8b 55 ec	 mov	 edx, DWORD PTR $T193068[ebp]
  0c52f	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3184 : 	memset(wszUtf8, 0, len * 2);

  0c532	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0c535	d1 e0		 shl	 eax, 1
  0c537	50		 push	 eax
  0c538	6a 00		 push	 0
  0c53a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0c53d	51		 push	 ecx
  0c53e	e8 00 00 00 00	 call	 _memset
  0c543	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3185 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);

  0c546	8b f4		 mov	 esi, esp
  0c548	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0c54b	52		 push	 edx
  0c54c	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c54f	50		 push	 eax
  0c550	6a ff		 push	 -1
  0c552	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  0c555	51		 push	 ecx
  0c556	6a 00		 push	 0
  0c558	6a 00		 push	 0
  0c55a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0c560	3b f4		 cmp	 esi, esp
  0c562	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3186 : 
; 3187 : 	int iRet = DeleteMenu( wszUtf8, sPos);

  0c567	8b 55 0c	 mov	 edx, DWORD PTR _sPos$[ebp]
  0c56a	52		 push	 edx
  0c56b	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0c56e	50		 push	 eax
  0c56f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c572	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ; BCMenu::DeleteMenu
  0c577	89 45 f0	 mov	 DWORD PTR _iRet$[ebp], eax

; 3188 : 	delete[] wszUtf8;

  0c57a	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0c57d	89 4d e8	 mov	 DWORD PTR $T193069[ebp], ecx
  0c580	8b 55 e8	 mov	 edx, DWORD PTR $T193069[ebp]
  0c583	52		 push	 edx
  0c584	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0c589	83 c4 04	 add	 esp, 4

; 3189 : 
; 3190 : 	return iRet;

  0c58c	8b 45 f0	 mov	 eax, DWORD PTR _iRet$[ebp]

; 3191 : }

  0c58f	5e		 pop	 esi
  0c590	83 c4 18	 add	 esp, 24			; 00000018H
  0c593	3b ec		 cmp	 ebp, esp
  0c595	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c59a	8b e5		 mov	 esp, ebp
  0c59c	5d		 pop	 ebp
  0c59d	c2 08 00	 ret	 8
?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ENDP	; BCMenu::DeleteMenu
; Function compile flags: /Odt /RTCsu
_nPos$ = -8						; size = 4
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z PROC NEAR ; BCMenu::DeleteMenu
; _this$ = ecx

; 3194 : {

  0c5a0	55		 push	 ebp
  0c5a1	8b ec		 mov	 ebp, esp
  0c5a3	83 ec 08	 sub	 esp, 8
  0c5a6	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0c5ad	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0c5b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3195 : 	int nPos = GetMenuPosition(pText);

  0c5b7	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0c5ba	50		 push	 eax
  0c5bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c5be	e8 00 00 00 00	 call	 ?GetMenuPosition@BCMenu@@QAEHPA_W@Z ; BCMenu::GetMenuPosition
  0c5c3	89 45 f8	 mov	 DWORD PTR _nPos$[ebp], eax

; 3196 : 	if(nPos != -1)

  0c5c6	83 7d f8 ff	 cmp	 DWORD PTR _nPos$[ebp], -1
  0c5ca	74 11		 je	 SHORT $L190285

; 3197 : 	{
; 3198 : 		DeleteMenu(nPos, MF_BYPOSITION);

  0c5cc	68 00 04 00 00	 push	 1024			; 00000400H
  0c5d1	8b 4d f8	 mov	 ecx, DWORD PTR _nPos$[ebp]
  0c5d4	51		 push	 ecx
  0c5d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c5d8	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
$L190285:

; 3199 : 	}
; 3200 : 	if(sPos == BCMENU_HEAD)

  0c5dd	83 7d 0c 01	 cmp	 DWORD PTR _sPos$[ebp], 1
  0c5e1	75 32		 jne	 SHORT $L190286

; 3201 : 	{
; 3202 : 		ASSERT(nPos - 1 >= 0);

  0c5e3	8b 55 f8	 mov	 edx, DWORD PTR _nPos$[ebp]
  0c5e6	83 ea 01	 sub	 edx, 1
  0c5e9	79 14		 jns	 SHORT $L193071
  0c5eb	68 82 0c 00 00	 push	 3202			; 00000c82H
  0c5f0	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c5f5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0c5fa	85 c0		 test	 eax, eax
  0c5fc	74 01		 je	 SHORT $L193071
  0c5fe	cc		 int	 3
$L193071:

; 3203 : 		DeleteMenu(nPos-1, MF_BYPOSITION);

  0c5ff	68 00 04 00 00	 push	 1024			; 00000400H
  0c604	8b 4d f8	 mov	 ecx, DWORD PTR _nPos$[ebp]
  0c607	83 e9 01	 sub	 ecx, 1
  0c60a	51		 push	 ecx
  0c60b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c60e	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 3204 : 	}
; 3205 : 	else if(sPos == BCMENU_TAIL)

  0c613	eb 60		 jmp	 SHORT $L190288
$L190286:
  0c615	83 7d 0c 02	 cmp	 DWORD PTR _sPos$[ebp], 2
  0c619	75 13		 jne	 SHORT $L190289

; 3206 : 	{
; 3207 : 		DeleteMenu(nPos, MF_BYPOSITION);

  0c61b	68 00 04 00 00	 push	 1024			; 00000400H
  0c620	8b 55 f8	 mov	 edx, DWORD PTR _nPos$[ebp]
  0c623	52		 push	 edx
  0c624	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c627	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 3208 : 	}
; 3209 : 	else if(sPos == BCMENU_BOTH)

  0c62c	eb 47		 jmp	 SHORT $L190288
$L190289:
  0c62e	83 7d 0c 03	 cmp	 DWORD PTR _sPos$[ebp], 3
  0c632	75 41		 jne	 SHORT $L190288

; 3210 : 	{
; 3211 : 		// remove the end first;
; 3212 : 		DeleteMenu(nPos, MF_BYPOSITION);

  0c634	68 00 04 00 00	 push	 1024			; 00000400H
  0c639	8b 45 f8	 mov	 eax, DWORD PTR _nPos$[ebp]
  0c63c	50		 push	 eax
  0c63d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c640	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 3213 : 		// remove the head;
; 3214 : 		ASSERT(nPos - 1 >= 0);

  0c645	8b 4d f8	 mov	 ecx, DWORD PTR _nPos$[ebp]
  0c648	83 e9 01	 sub	 ecx, 1
  0c64b	79 14		 jns	 SHORT $L193072
  0c64d	68 8e 0c 00 00	 push	 3214			; 00000c8eH
  0c652	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0c657	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0c65c	85 c0		 test	 eax, eax
  0c65e	74 01		 je	 SHORT $L193072
  0c660	cc		 int	 3
$L193072:

; 3215 : 		DeleteMenu(nPos-1, MF_BYPOSITION);

  0c661	68 00 04 00 00	 push	 1024			; 00000400H
  0c666	8b 45 f8	 mov	 eax, DWORD PTR _nPos$[ebp]
  0c669	83 e8 01	 sub	 eax, 1
  0c66c	50		 push	 eax
  0c66d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0c670	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
$L190288:

; 3216 : 	}
; 3217 : 	return nPos;

  0c675	8b 45 f8	 mov	 eax, DWORD PTR _nPos$[ebp]

; 3218 : }

  0c678	83 c4 08	 add	 esp, 8
  0c67b	3b ec		 cmp	 ebp, esp
  0c67d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c682	8b e5		 mov	 esp, ebp
  0c684	5d		 pop	 ebp
  0c685	c2 08 00	 ret	 8
?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ENDP	; BCMenu::DeleteMenu
_TEXT	ENDS
PUBLIC	?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::SetMenuText
xdata$x	SEGMENT
$T193084 DD	0ffffffffH
	DD	FLAT:$L193076
$T193079 DD	019930520H
	DD	01H
	DD	FLAT:$T193084
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -56						; size = 4
tv139 = -52						; size = 4
$T193075 = -48						; size = 4
$T193074 = -44						; size = 4
_pMenu$190305 = -40					; size = 4
_uiLoc$190304 = -32					; size = 4
_numMenuItems$190301 = -24				; size = 4
_returnflag$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_string$ = 12						; size = 4
_nFlags$ = 16						; size = 4
?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z PROC NEAR ; BCMenu::SetMenuText
; _this$ = ecx

; 3222 : {

  0c690	55		 push	 ebp
  0c691	8b ec		 mov	 ebp, esp
  0c693	6a ff		 push	 -1
  0c695	68 00 00 00 00	 push	 __ehhandler$?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z
  0c69a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0c6a0	50		 push	 eax
  0c6a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0c6a8	83 ec 2c	 sub	 esp, 44			; 0000002cH
  0c6ab	56		 push	 esi
  0c6ac	57		 push	 edi
  0c6ad	51		 push	 ecx
  0c6ae	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0c6b1	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0c6b6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c6bb	f3 ab		 rep stosd
  0c6bd	59		 pop	 ecx
  0c6be	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0c6c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3223 : 	BOOL returnflag=FALSE;

  0c6c8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 3224 : 	
; 3225 : 	if(MF_BYPOSITION&nFlags)

  0c6cf	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0c6d2	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0c6d7	74 48		 je	 SHORT $L190300

; 3226 : 	{
; 3227 : 		UINT numMenuItems = m_MenuList.GetUpperBound();

  0c6d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0c6dc	83 c1 08	 add	 ecx, 8
  0c6df	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0c6e4	89 45 e8	 mov	 DWORD PTR _numMenuItems$190301[ebp], eax

; 3228 : 		if(id<=numMenuItems){

  0c6e7	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0c6ea	3b 4d e8	 cmp	 ecx, DWORD PTR _numMenuItems$190301[ebp]
  0c6ed	77 30		 ja	 SHORT $L190302

; 3229 : #ifdef UNICODE
; 3230 : 			m_MenuList[id]->SetWideString((LPCTSTR)string);
; 3231 : #else
; 3232 : 			m_MenuList[id]->SetAnsiString(string);

  0c6ef	8b f4		 mov	 esi, esp
  0c6f1	8d 4d 0c	 lea	 ecx, DWORD PTR _string$[ebp]
  0c6f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0c6fa	3b f4		 cmp	 esi, esp
  0c6fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c701	50		 push	 eax
  0c702	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  0c705	52		 push	 edx
  0c706	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0c709	83 c1 08	 add	 ecx, 8
  0c70c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0c711	8b 08		 mov	 ecx, DWORD PTR [eax]
  0c713	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString

; 3233 : #endif
; 3234 : 			returnflag=TRUE;

  0c718	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1
$L190302:

; 3235 : 		}
; 3236 : 	}
; 3237 : 	else{

  0c71f	eb 4f		 jmp	 SHORT $L190303
$L190300:

; 3238 : 		int uiLoc;
; 3239 : 		BCMenu* pMenu = FindMenuOption(id,uiLoc);

  0c721	8d 45 e0	 lea	 eax, DWORD PTR _uiLoc$190304[ebp]
  0c724	50		 push	 eax
  0c725	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0c728	51		 push	 ecx
  0c729	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0c72c	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  0c731	89 45 d8	 mov	 DWORD PTR _pMenu$190305[ebp], eax

; 3240 : 		if(NULL!=pMenu) returnflag = pMenu->SetMenuText(uiLoc,string);

  0c734	83 7d d8 00	 cmp	 DWORD PTR _pMenu$190305[ebp], 0
  0c738	74 36		 je	 SHORT $L190303
  0c73a	68 00 04 00 00	 push	 1024			; 00000400H
  0c73f	51		 push	 ecx
  0c740	8b cc		 mov	 ecx, esp
  0c742	89 65 d4	 mov	 DWORD PTR $T193074[ebp], esp
  0c745	8b f4		 mov	 esi, esp
  0c747	8d 55 0c	 lea	 edx, DWORD PTR _string$[ebp]
  0c74a	52		 push	 edx
  0c74b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0c751	3b f4		 cmp	 esi, esp
  0c753	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c758	89 45 cc	 mov	 DWORD PTR tv139[ebp], eax
  0c75b	8b 45 e0	 mov	 eax, DWORD PTR _uiLoc$190304[ebp]
  0c75e	50		 push	 eax
  0c75f	8b 4d d8	 mov	 ecx, DWORD PTR _pMenu$190305[ebp]
  0c762	e8 00 00 00 00	 call	 ?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::SetMenuText
  0c767	89 45 c8	 mov	 DWORD PTR tv140[ebp], eax
  0c76a	8b 4d c8	 mov	 ecx, DWORD PTR tv140[ebp]
  0c76d	89 4d ec	 mov	 DWORD PTR _returnflag$[ebp], ecx
$L190303:

; 3241 : 	}
; 3242 : 	return(returnflag);

  0c770	8b 55 ec	 mov	 edx, DWORD PTR _returnflag$[ebp]
  0c773	89 55 d0	 mov	 DWORD PTR $T193075[ebp], edx
  0c776	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0c77d	8b f4		 mov	 esi, esp
  0c77f	8d 4d 0c	 lea	 ecx, DWORD PTR _string$[ebp]
  0c782	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0c788	3b f4		 cmp	 esi, esp
  0c78a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c78f	8b 45 d0	 mov	 eax, DWORD PTR $T193075[ebp]

; 3243 : }

  0c792	52		 push	 edx
  0c793	8b cd		 mov	 ecx, ebp
  0c795	50		 push	 eax
  0c796	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193083
  0c79c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0c7a1	58		 pop	 eax
  0c7a2	5a		 pop	 edx
  0c7a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0c7a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0c7ad	5f		 pop	 edi
  0c7ae	5e		 pop	 esi
  0c7af	83 c4 38	 add	 esp, 56			; 00000038H
  0c7b2	3b ec		 cmp	 ebp, esp
  0c7b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c7b9	8b e5		 mov	 esp, ebp
  0c7bb	5d		 pop	 ebp
  0c7bc	c2 0c 00	 ret	 12			; 0000000cH
$L193083:
  0c7bf	01 00 00 00	 DD	 1
  0c7c3	00 00 00 00	 DD	 $L193082
$L193082:
  0c7c7	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0c7cb	04 00 00 00	 DD	 4
  0c7cf	00 00 00 00	 DD	 $L193080
$L193080:
  0c7d3	75		 DB	 117			; 00000075H
  0c7d4	69		 DB	 105			; 00000069H
  0c7d5	4c		 DB	 76			; 0000004cH
  0c7d6	6f		 DB	 111			; 0000006fH
  0c7d7	63		 DB	 99			; 00000063H
  0c7d8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193076:
  00857	8b f4		 mov	 esi, esp
  00859	8d 4d 0c	 lea	 ecx, DWORD PTR _string$[ebp]
  0085c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00862	3b f4		 cmp	 esi, esp
  00864	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:
  00869	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193079
  0086e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ENDP ; BCMenu::SetMenuText
EXTRN	?Rectangle@CDC@@QAEHHHHH@Z:NEAR			; CDC::Rectangle
EXTRN	??0CPen@@QAE@HHK@Z:NEAR				; CPen::CPen
EXTRN	??9CSize@@QBEHUtagSIZE@@@Z:NEAR			; CSize::operator!=
EXTRN	?CreateHatchBrush@CBrush@@QAEHHK@Z:NEAR		; CBrush::CreateHatchBrush
xdata$x	SEGMENT
$T193101 DD	0ffffffffH
	DD	FLAT:$L193087
	DD	00H
	DD	FLAT:$L193088
	DD	00H
	DD	FLAT:$L193089
	DD	02H
	DD	FLAT:$L193090
$T193092 DD	019930520H
	DD	04H
	DD	FLAT:$T193101
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T193086 = -152						; size = 8
_pOldBrush$ = -144					; size = 4
_pOldPen$ = -140					; size = 4
_fill_brush$ = -132					; size = 8
_border_pen$ = -116					; size = 8
_rect$190331 = -100					; size = 16
_background_brush$190330 = -76				; size = 8
_pOldBitmap$ = -64					; size = 4
_y2$ = -60						; size = 4
_x2$ = -56						; size = 4
_y1$ = -52						; size = 4
_x1$ = -48						; size = 4
_m_newclrBack$ = -44					; size = 4
_bmpdc$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_bmp$ = 12						; size = 4
_bitmap_size$ = 16					; size = 8
_icon_size$ = 24					; size = 8
_fill$ = 32						; size = 4
_border$ = 36						; size = 4
_hatchstyle$ = 40					; size = 4
?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z PROC NEAR ; BCMenu::ColorBitmap
; _this$ = ecx

; 3247 : {

  0c7e0	55		 push	 ebp
  0c7e1	8b ec		 mov	 ebp, esp
  0c7e3	6a ff		 push	 -1
  0c7e5	68 00 00 00 00	 push	 __ehhandler$?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z
  0c7ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0c7f0	50		 push	 eax
  0c7f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0c7f8	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  0c7fe	56		 push	 esi
  0c7ff	57		 push	 edi
  0c800	51		 push	 ecx
  0c801	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  0c807	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  0c80c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0c811	f3 ab		 rep stosd
  0c813	59		 pop	 ecx
  0c814	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3248 : 	CDC bmpdc;

  0c817	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c81a	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0c81f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3249 : 	COLORREF m_newclrBack;
; 3250 : 	int x1=0,y1=0,x2=bitmap_size.cx,y2=bitmap_size.cy;

  0c826	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _x1$[ebp], 0
  0c82d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _y1$[ebp], 0
  0c834	8b 45 10	 mov	 eax, DWORD PTR _bitmap_size$[ebp]
  0c837	89 45 c8	 mov	 DWORD PTR _x2$[ebp], eax
  0c83a	8b 4d 14	 mov	 ecx, DWORD PTR _bitmap_size$[ebp+4]
  0c83d	89 4d c4	 mov	 DWORD PTR _y2$[ebp], ecx

; 3251 : 
; 3252 : 	if(IsWinXPLuna())m_newclrBack=GetSysColor(COLOR_3DFACE);

  0c840	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  0c845	85 c0		 test	 eax, eax
  0c847	74 16		 je	 SHORT $L190325
  0c849	8b f4		 mov	 esi, esp
  0c84b	6a 0f		 push	 15			; 0000000fH
  0c84d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0c853	3b f4		 cmp	 esi, esp
  0c855	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c85a	89 45 d4	 mov	 DWORD PTR _m_newclrBack$[ebp], eax

; 3253 : 	else m_newclrBack=GetSysColor(COLOR_MENU);

  0c85d	eb 14		 jmp	 SHORT $L190326
$L190325:
  0c85f	8b f4		 mov	 esi, esp
  0c861	6a 04		 push	 4
  0c863	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0c869	3b f4		 cmp	 esi, esp
  0c86b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0c870	89 45 d4	 mov	 DWORD PTR _m_newclrBack$[ebp], eax
$L190326:

; 3254 : 
; 3255 : 	bmpdc.CreateCompatibleDC(pDC);

  0c873	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  0c876	52		 push	 edx
  0c877	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c87a	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 3256 : 
; 3257 : 	bmp.CreateCompatibleBitmap(pDC, icon_size.cx, icon_size.cy);	

  0c87f	8b 45 1c	 mov	 eax, DWORD PTR _icon_size$[ebp+4]
  0c882	50		 push	 eax
  0c883	8b 4d 18	 mov	 ecx, DWORD PTR _icon_size$[ebp]
  0c886	51		 push	 ecx
  0c887	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  0c88a	52		 push	 edx
  0c88b	8b 4d 0c	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0c88e	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 3258 : 	CBitmap* pOldBitmap = bmpdc.SelectObject(&bmp);

  0c893	8b 45 0c	 mov	 eax, DWORD PTR _bmp$[ebp]
  0c896	50		 push	 eax
  0c897	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c89a	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  0c89f	89 45 c0	 mov	 DWORD PTR _pOldBitmap$[ebp], eax

; 3259 : 
; 3260 : 	if(bitmap_size!=icon_size){

  0c8a2	8b 4d 18	 mov	 ecx, DWORD PTR _icon_size$[ebp]
  0c8a5	89 8d 68 ff ff
	ff		 mov	 DWORD PTR $T193086[ebp], ecx
  0c8ab	8b 55 1c	 mov	 edx, DWORD PTR _icon_size$[ebp+4]
  0c8ae	89 95 6c ff ff
	ff		 mov	 DWORD PTR $T193086[ebp+4], edx
  0c8b4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T193086[ebp+4]
  0c8ba	50		 push	 eax
  0c8bb	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR $T193086[ebp]
  0c8c1	51		 push	 ecx
  0c8c2	8d 4d 10	 lea	 ecx, DWORD PTR _bitmap_size$[ebp]
  0c8c5	e8 00 00 00 00	 call	 ??9CSize@@QBEHUtagSIZE@@@Z ; CSize::operator!=
  0c8ca	85 c0		 test	 eax, eax
  0c8cc	0f 84 83 00 00
	00		 je	 $L190329

; 3261 : 		CBrush background_brush;

  0c8d2	8d 4d b4	 lea	 ecx, DWORD PTR _background_brush$190330[ebp]
  0c8d5	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0c8da	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 3262 : 		background_brush.CreateSolidBrush(m_newclrBack);

  0c8de	8b 55 d4	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  0c8e1	52		 push	 edx
  0c8e2	8d 4d b4	 lea	 ecx, DWORD PTR _background_brush$190330[ebp]
  0c8e5	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 3263 : 		CRect rect(0,0, icon_size.cx, icon_size.cy);

  0c8ea	8b 45 1c	 mov	 eax, DWORD PTR _icon_size$[ebp+4]
  0c8ed	50		 push	 eax
  0c8ee	8b 4d 18	 mov	 ecx, DWORD PTR _icon_size$[ebp]
  0c8f1	51		 push	 ecx
  0c8f2	6a 00		 push	 0
  0c8f4	6a 00		 push	 0
  0c8f6	8d 4d 9c	 lea	 ecx, DWORD PTR _rect$190331[ebp]
  0c8f9	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 3264 : 		bmpdc.FillRect(rect,&background_brush);

  0c8fe	8d 55 b4	 lea	 edx, DWORD PTR _background_brush$190330[ebp]
  0c901	52		 push	 edx
  0c902	8d 4d 9c	 lea	 ecx, DWORD PTR _rect$190331[ebp]
  0c905	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0c90a	50		 push	 eax
  0c90b	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c90e	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 3265 : 		x1 = (icon_size.cx-bitmap_size.cx)/2;

  0c913	8b 45 18	 mov	 eax, DWORD PTR _icon_size$[ebp]
  0c916	2b 45 10	 sub	 eax, DWORD PTR _bitmap_size$[ebp]
  0c919	99		 cdq
  0c91a	2b c2		 sub	 eax, edx
  0c91c	d1 f8		 sar	 eax, 1
  0c91e	89 45 d0	 mov	 DWORD PTR _x1$[ebp], eax

; 3266 : 		y1 = (icon_size.cy-bitmap_size.cy)/2;

  0c921	8b 45 1c	 mov	 eax, DWORD PTR _icon_size$[ebp+4]
  0c924	2b 45 14	 sub	 eax, DWORD PTR _bitmap_size$[ebp+4]
  0c927	99		 cdq
  0c928	2b c2		 sub	 eax, edx
  0c92a	d1 f8		 sar	 eax, 1
  0c92c	89 45 cc	 mov	 DWORD PTR _y1$[ebp], eax

; 3267 : 		x2 = x1+bitmap_size.cx;

  0c92f	8b 45 d0	 mov	 eax, DWORD PTR _x1$[ebp]
  0c932	03 45 10	 add	 eax, DWORD PTR _bitmap_size$[ebp]
  0c935	89 45 c8	 mov	 DWORD PTR _x2$[ebp], eax

; 3268 : 		y2 = y1+bitmap_size.cy;

  0c938	8b 4d cc	 mov	 ecx, DWORD PTR _y1$[ebp]
  0c93b	03 4d 14	 add	 ecx, DWORD PTR _bitmap_size$[ebp+4]
  0c93e	89 4d c4	 mov	 DWORD PTR _y2$[ebp], ecx

; 3269 : 		background_brush.DeleteObject();

  0c941	8d 4d b4	 lea	 ecx, DWORD PTR _background_brush$190330[ebp]
  0c944	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 3270 : 	}

  0c949	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0c94d	8d 4d b4	 lea	 ecx, DWORD PTR _background_brush$190330[ebp]
  0c950	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L190329:

; 3271 : 	
; 3272 : 	CPen border_pen(PS_SOLID, 1, border);

  0c955	8b 55 24	 mov	 edx, DWORD PTR _border$[ebp]
  0c958	52		 push	 edx
  0c959	6a 01		 push	 1
  0c95b	6a 00		 push	 0
  0c95d	8d 4d 8c	 lea	 ecx, DWORD PTR _border_pen$[ebp]
  0c960	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen
  0c965	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3273 : 	CBrush fill_brush;

  0c969	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  0c96f	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  0c974	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 3274 : 	if(hatchstyle!=-1) { fill_brush.CreateHatchBrush(hatchstyle, fill); }

  0c978	83 7d 28 ff	 cmp	 DWORD PTR _hatchstyle$[ebp], -1
  0c97c	74 15		 je	 SHORT $L190334
  0c97e	8b 45 20	 mov	 eax, DWORD PTR _fill$[ebp]
  0c981	50		 push	 eax
  0c982	8b 4d 28	 mov	 ecx, DWORD PTR _hatchstyle$[ebp]
  0c985	51		 push	 ecx
  0c986	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  0c98c	e8 00 00 00 00	 call	 ?CreateHatchBrush@CBrush@@QAEHHK@Z ; CBrush::CreateHatchBrush

; 3275 : 	else      { fill_brush.CreateSolidBrush(fill);             }

  0c991	eb 0f		 jmp	 SHORT $L190335
$L190334:
  0c993	8b 55 20	 mov	 edx, DWORD PTR _fill$[ebp]
  0c996	52		 push	 edx
  0c997	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  0c99d	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush
$L190335:

; 3276 : 	
; 3277 : 	CPen*    pOldPen    = bmpdc.SelectObject(&border_pen);

  0c9a2	8d 45 8c	 lea	 eax, DWORD PTR _border_pen$[ebp]
  0c9a5	50		 push	 eax
  0c9a6	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c9a9	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  0c9ae	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pOldPen$[ebp], eax

; 3278 : 	CBrush*  pOldBrush  = bmpdc.SelectObject(&fill_brush);

  0c9b4	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  0c9ba	51		 push	 ecx
  0c9bb	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c9be	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
  0c9c3	89 85 70 ff ff
	ff		 mov	 DWORD PTR _pOldBrush$[ebp], eax

; 3279 : 
; 3280 : 	bmpdc.Rectangle(x1,y1,x2,y2);

  0c9c9	8b 55 c4	 mov	 edx, DWORD PTR _y2$[ebp]
  0c9cc	52		 push	 edx
  0c9cd	8b 45 c8	 mov	 eax, DWORD PTR _x2$[ebp]
  0c9d0	50		 push	 eax
  0c9d1	8b 4d cc	 mov	 ecx, DWORD PTR _y1$[ebp]
  0c9d4	51		 push	 ecx
  0c9d5	8b 55 d0	 mov	 edx, DWORD PTR _x1$[ebp]
  0c9d8	52		 push	 edx
  0c9d9	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c9dc	e8 00 00 00 00	 call	 ?Rectangle@CDC@@QAEHHHHH@Z ; CDC::Rectangle

; 3281 : 
; 3282 : 	if(NULL!=pOldBrush)  { bmpdc.SelectObject(pOldBrush);  }

  0c9e1	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _pOldBrush$[ebp], 0
  0c9e8	74 0f		 je	 SHORT $L190338
  0c9ea	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _pOldBrush$[ebp]
  0c9f0	50		 push	 eax
  0c9f1	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0c9f4	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
$L190338:

; 3283 : 	if(NULL!=pOldPen)    { bmpdc.SelectObject(pOldPen);    }

  0c9f9	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _pOldPen$[ebp], 0
  0ca00	74 0f		 je	 SHORT $L190339
  0ca02	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _pOldPen$[ebp]
  0ca08	51		 push	 ecx
  0ca09	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0ca0c	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
$L190339:

; 3284 : 	if(NULL!=pOldBitmap) { bmpdc.SelectObject(pOldBitmap); }

  0ca11	83 7d c0 00	 cmp	 DWORD PTR _pOldBitmap$[ebp], 0
  0ca15	74 0c		 je	 SHORT $L190340
  0ca17	8b 55 c0	 mov	 edx, DWORD PTR _pOldBitmap$[ebp]
  0ca1a	52		 push	 edx
  0ca1b	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0ca1e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
$L190340:

; 3285 : }

  0ca23	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0ca27	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  0ca2d	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0ca32	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0ca36	8d 4d 8c	 lea	 ecx, DWORD PTR _border_pen$[ebp]
  0ca39	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  0ca3e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0ca45	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  0ca48	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0ca4d	52		 push	 edx
  0ca4e	8b cd		 mov	 ecx, ebp
  0ca50	50		 push	 eax
  0ca51	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193100
  0ca57	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0ca5c	58		 pop	 eax
  0ca5d	5a		 pop	 edx
  0ca5e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0ca61	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0ca68	5f		 pop	 edi
  0ca69	5e		 pop	 esi
  0ca6a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  0ca70	3b ec		 cmp	 ebp, esp
  0ca72	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0ca77	8b e5		 mov	 esp, ebp
  0ca79	5d		 pop	 ebp
  0ca7a	c2 24 00	 ret	 36			; 00000024H
$L193100:
  0ca7d	05 00 00 00	 DD	 5
  0ca81	00 00 00 00	 DD	 $L193099
$L193099:
  0ca85	dc ff ff ff	 DD	 -36			; ffffffdcH
  0ca89	10 00 00 00	 DD	 16			; 00000010H
  0ca8d	00 00 00 00	 DD	 $L193093
  0ca91	b4 ff ff ff	 DD	 -76			; ffffffb4H
  0ca95	08 00 00 00	 DD	 8
  0ca99	00 00 00 00	 DD	 $L193094
  0ca9d	9c ff ff ff	 DD	 -100			; ffffff9cH
  0caa1	10 00 00 00	 DD	 16			; 00000010H
  0caa5	00 00 00 00	 DD	 $L193095
  0caa9	8c ff ff ff	 DD	 -116			; ffffff8cH
  0caad	08 00 00 00	 DD	 8
  0cab1	00 00 00 00	 DD	 $L193096
  0cab5	7c ff ff ff	 DD	 -132			; ffffff7cH
  0cab9	08 00 00 00	 DD	 8
  0cabd	00 00 00 00	 DD	 $L193097
$L193097:
  0cac1	66		 DB	 102			; 00000066H
  0cac2	69		 DB	 105			; 00000069H
  0cac3	6c		 DB	 108			; 0000006cH
  0cac4	6c		 DB	 108			; 0000006cH
  0cac5	5f		 DB	 95			; 0000005fH
  0cac6	62		 DB	 98			; 00000062H
  0cac7	72		 DB	 114			; 00000072H
  0cac8	75		 DB	 117			; 00000075H
  0cac9	73		 DB	 115			; 00000073H
  0caca	68		 DB	 104			; 00000068H
  0cacb	00		 DB	 0
$L193096:
  0cacc	62		 DB	 98			; 00000062H
  0cacd	6f		 DB	 111			; 0000006fH
  0cace	72		 DB	 114			; 00000072H
  0cacf	64		 DB	 100			; 00000064H
  0cad0	65		 DB	 101			; 00000065H
  0cad1	72		 DB	 114			; 00000072H
  0cad2	5f		 DB	 95			; 0000005fH
  0cad3	70		 DB	 112			; 00000070H
  0cad4	65		 DB	 101			; 00000065H
  0cad5	6e		 DB	 110			; 0000006eH
  0cad6	00		 DB	 0
$L193095:
  0cad7	72		 DB	 114			; 00000072H
  0cad8	65		 DB	 101			; 00000065H
  0cad9	63		 DB	 99			; 00000063H
  0cada	74		 DB	 116			; 00000074H
  0cadb	00		 DB	 0
$L193094:
  0cadc	62		 DB	 98			; 00000062H
  0cadd	61		 DB	 97			; 00000061H
  0cade	63		 DB	 99			; 00000063H
  0cadf	6b		 DB	 107			; 0000006bH
  0cae0	67		 DB	 103			; 00000067H
  0cae1	72		 DB	 114			; 00000072H
  0cae2	6f		 DB	 111			; 0000006fH
  0cae3	75		 DB	 117			; 00000075H
  0cae4	6e		 DB	 110			; 0000006eH
  0cae5	64		 DB	 100			; 00000064H
  0cae6	5f		 DB	 95			; 0000005fH
  0cae7	62		 DB	 98			; 00000062H
  0cae8	72		 DB	 114			; 00000072H
  0cae9	75		 DB	 117			; 00000075H
  0caea	73		 DB	 115			; 00000073H
  0caeb	68		 DB	 104			; 00000068H
  0caec	00		 DB	 0
$L193093:
  0caed	62		 DB	 98			; 00000062H
  0caee	6d		 DB	 109			; 0000006dH
  0caef	70		 DB	 112			; 00000070H
  0caf0	64		 DB	 100			; 00000064H
  0caf1	63		 DB	 99			; 00000063H
  0caf2	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193087:
  00873	8d 4d dc	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  00876	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L193088:
  0087b	8d 4d b4	 lea	 ecx, DWORD PTR _background_brush$190330[ebp]
  0087e	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L193089:
  00883	8d 4d 8c	 lea	 ecx, DWORD PTR _border_pen$[ebp]
  00886	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
$L193090:
  0088b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  00891	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z:
  00896	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193092
  0089b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z ENDP ; BCMenu::ColorBitmap
EXTRN	__imp__lstrcmpiA@8:NEAR
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	__imp__RegCloseKey@4:NEAR
EXTRN	__imp__RegOpenKeyExA@20:NEAR
EXTRN	__imp__RegQueryValueExA@24:NEAR
;	COMDAT ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_BSS	SEGMENT
?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA DD 01H DUP (?) ; `BCMenu::IsWindowsClassicTheme'::`2'::XPTheme_returnflag
_BSS	ENDS
;	COMDAT ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_BSS	SEGMENT
?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA DD 01H DUP (?) ; `BCMenu::IsWindowsClassicTheme'::`2'::XPTheme_checkflag
; Function compile flags: /Odt /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_len$190363 = -360					; size = 4
_szClassicTheme$190361 = -352				; size = 22
_lRetCode$ = -324					; size = 4
_type$ = -316						; size = 4
_size$ = -304						; size = 4
_hKey$ = -292						; size = 4
_Buf$ = -280						; size = 270
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?IsWindowsClassicTheme@BCMenu@@KAHXZ PROC NEAR		; BCMenu::IsWindowsClassicTheme

; 3288 : {

  0cb00	55		 push	 ebp
  0cb01	8b ec		 mov	 ebp, esp
  0cb03	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  0cb09	56		 push	 esi
  0cb0a	57		 push	 edi
  0cb0b	8d bd 98 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-360]
  0cb11	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0cb16	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0cb1b	f3 ab		 rep stosd
  0cb1d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0cb22	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3289 : 	TCHAR Buf[_MAX_PATH+10];
; 3290 : 	HKEY hKey;
; 3291 : 	DWORD size,type; 
; 3292 : 	long lRetCode; 
; 3293 : 	static BOOL XPTheme_returnflag=FALSE;
; 3294 : 	static BOOL XPTheme_checkflag=FALSE;
; 3295 : 	
; 3296 : 	if(XPTheme_checkflag)return(XPTheme_returnflag);

  0cb25	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA, 0
  0cb2c	74 0a		 je	 SHORT $L190353
  0cb2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
  0cb33	e9 81 01 00 00	 jmp	 $L190343
$L190353:

; 3297 : 
; 3298 : 	XPTheme_checkflag=TRUE;

  0cb38	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA, 1

; 3299 : 	lRetCode = RegOpenKeyEx ( HKEY_CURRENT_USER, 
; 3300 : 		_T("Software\\Microsoft\\Plus!\\Themes\\Current"), 
; 3301 : 		0,KEY_READ,&hKey);  

  0cb42	8b f4		 mov	 esi, esp
  0cb44	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _hKey$[ebp]
  0cb4a	50		 push	 eax
  0cb4b	68 19 00 02 00	 push	 131097			; 00020019H
  0cb50	6a 00		 push	 0
  0cb52	68 00 00 00 00	 push	 OFFSET FLAT:$SG190357
  0cb57	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0cb5c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  0cb62	3b f4		 cmp	 esi, esp
  0cb64	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cb69	89 85 bc fe ff
	ff		 mov	 DWORD PTR _lRetCode$[ebp], eax

; 3302 : 	if (lRetCode == ERROR_SUCCESS){ 

  0cb6f	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _lRetCode$[ebp], 0
  0cb76	0f 85 38 01 00
	00		 jne	 $L190358

; 3303 : 		size = _MAX_PATH;type=REG_SZ;

  0cb7c	c7 85 d0 fe ff
	ff 04 01 00 00	 mov	 DWORD PTR _size$[ebp], 260 ; 00000104H
  0cb86	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _type$[ebp], 1

; 3304 : 		lRetCode=::RegQueryValueEx(hKey,NULL,NULL,&type,
; 3305 : 			(unsigned char *)Buf,&size);

  0cb90	8b f4		 mov	 esi, esp
  0cb92	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _size$[ebp]
  0cb98	51		 push	 ecx
  0cb99	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _Buf$[ebp]
  0cb9f	52		 push	 edx
  0cba0	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _type$[ebp]
  0cba6	50		 push	 eax
  0cba7	6a 00		 push	 0
  0cba9	6a 00		 push	 0
  0cbab	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _hKey$[ebp]
  0cbb1	51		 push	 ecx
  0cbb2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0cbb8	3b f4		 cmp	 esi, esp
  0cbba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cbbf	89 85 bc fe ff
	ff		 mov	 DWORD PTR _lRetCode$[ebp], eax

; 3306 : 		if(lRetCode == ERROR_SUCCESS){

  0cbc5	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _lRetCode$[ebp], 0
  0cbcc	0f 85 cc 00 00
	00		 jne	 $L190360

; 3307 : 			TCHAR szClassicTheme[]=_T("Windows Classic.theme");

  0cbd2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR $SG190362
  0cbd8	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$190361[ebp], edx
  0cbde	a1 04 00 00 00	 mov	 eax, DWORD PTR $SG190362+4
  0cbe3	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$190361[ebp+4], eax
  0cbe9	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR $SG190362+8
  0cbef	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$190361[ebp+8], ecx
  0cbf5	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR $SG190362+12
  0cbfb	89 95 ac fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$190361[ebp+12], edx
  0cc01	a1 10 00 00 00	 mov	 eax, DWORD PTR $SG190362+16
  0cc06	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$190361[ebp+16], eax
  0cc0c	66 8b 0d 14 00
	00 00		 mov	 cx, WORD PTR $SG190362+20
  0cc13	66 89 8d b4 fe
	ff ff		 mov	 WORD PTR _szClassicTheme$190361[ebp+20], cx

; 3308 : 			int len=lstrlen(Buf);

  0cc1a	8b f4		 mov	 esi, esp
  0cc1c	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _Buf$[ebp]
  0cc22	52		 push	 edx
  0cc23	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0cc29	3b f4		 cmp	 esi, esp
  0cc2b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cc30	89 85 98 fe ff
	ff		 mov	 DWORD PTR _len$190363[ebp], eax

; 3309 : 			if(len>=lstrlen(szClassicTheme)){

  0cc36	8b f4		 mov	 esi, esp
  0cc38	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _szClassicTheme$190361[ebp]
  0cc3e	50		 push	 eax
  0cc3f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0cc45	3b f4		 cmp	 esi, esp
  0cc47	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cc4c	39 85 98 fe ff
	ff		 cmp	 DWORD PTR _len$190363[ebp], eax
  0cc52	7c 4a		 jl	 SHORT $L190360

; 3310 : 				if(!lstrcmpi(&Buf[len-lstrlen(szClassicTheme)],szClassicTheme)){

  0cc54	8b f4		 mov	 esi, esp
  0cc56	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _szClassicTheme$190361[ebp]
  0cc5c	51		 push	 ecx
  0cc5d	8b fc		 mov	 edi, esp
  0cc5f	8d 95 a0 fe ff
	ff		 lea	 edx, DWORD PTR _szClassicTheme$190361[ebp]
  0cc65	52		 push	 edx
  0cc66	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0cc6c	3b fc		 cmp	 edi, esp
  0cc6e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cc73	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _len$190363[ebp]
  0cc79	2b c8		 sub	 ecx, eax
  0cc7b	8d 94 0d e8 fe
	ff ff		 lea	 edx, DWORD PTR _Buf$[ebp+ecx]
  0cc82	52		 push	 edx
  0cc83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpiA@8
  0cc89	3b f4		 cmp	 esi, esp
  0cc8b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cc90	85 c0		 test	 eax, eax
  0cc92	75 0a		 jne	 SHORT $L190360

; 3311 : 					XPTheme_returnflag=TRUE;

  0cc94	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA, 1
$L190360:

; 3312 : 				}
; 3313 : 			}
; 3314 : 		}
; 3315 : 		RegCloseKey(hKey);  

  0cc9e	8b f4		 mov	 esi, esp
  0cca0	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _hKey$[ebp]
  0cca6	50		 push	 eax
  0cca7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  0ccad	3b f4		 cmp	 esi, esp
  0ccaf	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L190358:

; 3316 : 	}
; 3317 : 	return(XPTheme_returnflag);

  0ccb4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
$L190343:

; 3318 : }

  0ccb9	52		 push	 edx
  0ccba	8b cd		 mov	 ecx, ebp
  0ccbc	50		 push	 eax
  0ccbd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193111
  0ccc3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0ccc8	58		 pop	 eax
  0ccc9	5a		 pop	 edx
  0ccca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0cccd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0ccd2	5f		 pop	 edi
  0ccd3	5e		 pop	 esi
  0ccd4	81 c4 68 01 00
	00		 add	 esp, 360		; 00000168H
  0ccda	3b ec		 cmp	 ebp, esp
  0ccdc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cce1	8b e5		 mov	 esp, ebp
  0cce3	5d		 pop	 ebp
  0cce4	c3		 ret	 0
$L193111:
  0cce5	05 00 00 00	 DD	 5
  0cce9	00 00 00 00	 DD	 $L193110
$L193110:
  0cced	e8 fe ff ff	 DD	 -280			; fffffee8H
  0ccf1	0e 01 00 00	 DD	 270			; 0000010eH
  0ccf5	00 00 00 00	 DD	 $L193104
  0ccf9	dc fe ff ff	 DD	 -292			; fffffedcH
  0ccfd	04 00 00 00	 DD	 4
  0cd01	00 00 00 00	 DD	 $L193105
  0cd05	d0 fe ff ff	 DD	 -304			; fffffed0H
  0cd09	04 00 00 00	 DD	 4
  0cd0d	00 00 00 00	 DD	 $L193106
  0cd11	c4 fe ff ff	 DD	 -316			; fffffec4H
  0cd15	04 00 00 00	 DD	 4
  0cd19	00 00 00 00	 DD	 $L193107
  0cd1d	a0 fe ff ff	 DD	 -352			; fffffea0H
  0cd21	16 00 00 00	 DD	 22			; 00000016H
  0cd25	00 00 00 00	 DD	 $L193108
$L193108:
  0cd29	73		 DB	 115			; 00000073H
  0cd2a	7a		 DB	 122			; 0000007aH
  0cd2b	43		 DB	 67			; 00000043H
  0cd2c	6c		 DB	 108			; 0000006cH
  0cd2d	61		 DB	 97			; 00000061H
  0cd2e	73		 DB	 115			; 00000073H
  0cd2f	73		 DB	 115			; 00000073H
  0cd30	69		 DB	 105			; 00000069H
  0cd31	63		 DB	 99			; 00000063H
  0cd32	54		 DB	 84			; 00000054H
  0cd33	68		 DB	 104			; 00000068H
  0cd34	65		 DB	 101			; 00000065H
  0cd35	6d		 DB	 109			; 0000006dH
  0cd36	65		 DB	 101			; 00000065H
  0cd37	00		 DB	 0
$L193107:
  0cd38	74		 DB	 116			; 00000074H
  0cd39	79		 DB	 121			; 00000079H
  0cd3a	70		 DB	 112			; 00000070H
  0cd3b	65		 DB	 101			; 00000065H
  0cd3c	00		 DB	 0
$L193106:
  0cd3d	73		 DB	 115			; 00000073H
  0cd3e	69		 DB	 105			; 00000069H
  0cd3f	7a		 DB	 122			; 0000007aH
  0cd40	65		 DB	 101			; 00000065H
  0cd41	00		 DB	 0
$L193105:
  0cd42	68		 DB	 104			; 00000068H
  0cd43	4b		 DB	 75			; 0000004bH
  0cd44	65		 DB	 101			; 00000065H
  0cd45	79		 DB	 121			; 00000079H
  0cd46	00		 DB	 0
$L193104:
  0cd47	42		 DB	 66			; 00000042H
  0cd48	75		 DB	 117			; 00000075H
  0cd49	66		 DB	 102			; 00000066H
  0cd4a	00		 DB	 0
?IsWindowsClassicTheme@BCMenu@@KAHXZ ENDP		; BCMenu::IsWindowsClassicTheme
_TEXT	ENDS
PUBLIC	?GetSize@?$CArray@HAAH@@QBEHXZ			; CArray<int,int &>::GetSize
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_i$190372 = -16						; size = 4
_existsloc$ = -12					; size = 4
_numcurrent$ = -8					; size = 4
_this$ = -4						; size = 4
_nID$ = 8						; size = 4
?GlobalImageListOffset@BCMenu@@IAEHH@Z PROC NEAR	; BCMenu::GlobalImageListOffset
; _this$ = ecx

; 3321 : {

  0cd50	55		 push	 ebp
  0cd51	8b ec		 mov	 ebp, esp
  0cd53	83 ec 10	 sub	 esp, 16			; 00000010H
  0cd56	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0cd5b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0cd5e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0cd61	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0cd64	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0cd67	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3322 : 	int numcurrent=m_AllImagesID.GetSize();

  0cd6a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0cd6f	e8 00 00 00 00	 call	 ?GetSize@?$CArray@HAAH@@QBEHXZ ; CArray<int,int &>::GetSize
  0cd74	89 45 f8	 mov	 DWORD PTR _numcurrent$[ebp], eax

; 3323 : 	int existsloc = -1;

  0cd77	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _existsloc$[ebp], -1

; 3324 : 	for(int i=0;i<numcurrent;++i){

  0cd7e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$190372[ebp], 0
  0cd85	eb 09		 jmp	 SHORT $L190373
$L190374:
  0cd87	8b 45 f0	 mov	 eax, DWORD PTR _i$190372[ebp]
  0cd8a	83 c0 01	 add	 eax, 1
  0cd8d	89 45 f0	 mov	 DWORD PTR _i$190372[ebp], eax
$L190373:
  0cd90	8b 4d f0	 mov	 ecx, DWORD PTR _i$190372[ebp]
  0cd93	3b 4d f8	 cmp	 ecx, DWORD PTR _numcurrent$[ebp]
  0cd96	7d 1f		 jge	 SHORT $L190375

; 3325 : 		if(m_AllImagesID[i]==nID){

  0cd98	8b 55 f0	 mov	 edx, DWORD PTR _i$190372[ebp]
  0cd9b	52		 push	 edx
  0cd9c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0cda1	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0cda6	8b 00		 mov	 eax, DWORD PTR [eax]
  0cda8	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  0cdab	75 08		 jne	 SHORT $L190376

; 3326 : 			existsloc=i;

  0cdad	8b 4d f0	 mov	 ecx, DWORD PTR _i$190372[ebp]
  0cdb0	89 4d f4	 mov	 DWORD PTR _existsloc$[ebp], ecx

; 3327 : 			break;

  0cdb3	eb 02		 jmp	 SHORT $L190375
$L190376:

; 3328 : 		}
; 3329 : 	}

  0cdb5	eb d0		 jmp	 SHORT $L190374
$L190375:

; 3330 : 	return existsloc;

  0cdb7	8b 45 f4	 mov	 eax, DWORD PTR _existsloc$[ebp]

; 3331 : }

  0cdba	83 c4 10	 add	 esp, 16			; 00000010H
  0cdbd	3b ec		 cmp	 ebp, esp
  0cdbf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0cdc4	8b e5		 mov	 esp, ebp
  0cdc6	5d		 pop	 ebp
  0cdc7	c2 04 00	 ret	 4
?GlobalImageListOffset@BCMenu@@IAEHH@Z ENDP		; BCMenu::GlobalImageListOffset
; Function compile flags: /Odt /RTCsu
_nID$190384 = -16					; size = 4
_numcurrent$ = -12					; size = 4
_retflag$ = -8						; size = 4
_this$ = -4						; size = 4
_offset$ = 8						; size = 4
?CanDraw3DImageList@BCMenu@@IAEHH@Z PROC NEAR		; BCMenu::CanDraw3DImageList
; _this$ = ecx

; 3334 : {

  0cdd0	55		 push	 ebp
  0cdd1	8b ec		 mov	 ebp, esp
  0cdd3	83 ec 10	 sub	 esp, 16			; 00000010H
  0cdd6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0cddb	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0cdde	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0cde1	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0cde4	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0cde7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3335 : 	BOOL retflag=FALSE;

  0cdea	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retflag$[ebp], 0

; 3336 : 	int numcurrent=m_AllImagesID.GetSize();

  0cdf1	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0cdf6	e8 00 00 00 00	 call	 ?GetSize@?$CArray@HAAH@@QBEHXZ ; CArray<int,int &>::GetSize
  0cdfb	89 45 f4	 mov	 DWORD PTR _numcurrent$[ebp], eax

; 3337 : 	if(offset+1<numcurrent&&offset+2<numcurrent){

  0cdfe	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  0ce01	83 c0 01	 add	 eax, 1
  0ce04	3b 45 f4	 cmp	 eax, DWORD PTR _numcurrent$[ebp]
  0ce07	7d 55		 jge	 SHORT $L190383
  0ce09	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  0ce0c	83 c1 02	 add	 ecx, 2
  0ce0f	3b 4d f4	 cmp	 ecx, DWORD PTR _numcurrent$[ebp]
  0ce12	7d 4a		 jge	 SHORT $L190383

; 3338 : 		int nID=m_AllImagesID[offset];

  0ce14	8b 55 08	 mov	 edx, DWORD PTR _offset$[ebp]
  0ce17	52		 push	 edx
  0ce18	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0ce1d	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0ce22	8b 00		 mov	 eax, DWORD PTR [eax]
  0ce24	89 45 f0	 mov	 DWORD PTR _nID$190384[ebp], eax

; 3339 : 		if(m_AllImagesID[offset+1]==nID&&m_AllImagesID[offset+2]==nID)retflag=TRUE;

  0ce27	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  0ce2a	83 c1 01	 add	 ecx, 1
  0ce2d	51		 push	 ecx
  0ce2e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0ce33	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0ce38	8b 10		 mov	 edx, DWORD PTR [eax]
  0ce3a	3b 55 f0	 cmp	 edx, DWORD PTR _nID$190384[ebp]
  0ce3d	75 1f		 jne	 SHORT $L190383
  0ce3f	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  0ce42	83 c0 02	 add	 eax, 2
  0ce45	50		 push	 eax
  0ce46	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0ce4b	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0ce50	8b 08		 mov	 ecx, DWORD PTR [eax]
  0ce52	3b 4d f0	 cmp	 ecx, DWORD PTR _nID$190384[ebp]
  0ce55	75 07		 jne	 SHORT $L190383
  0ce57	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _retflag$[ebp], 1
$L190383:

; 3340 : 	}
; 3341 : 	return(retflag);

  0ce5e	8b 45 f8	 mov	 eax, DWORD PTR _retflag$[ebp]

; 3342 : }

  0ce61	83 c4 10	 add	 esp, 16			; 00000010H
  0ce64	3b ec		 cmp	 ebp, esp
  0ce66	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0ce6b	8b e5		 mov	 esp, ebp
  0ce6d	5d		 pop	 ebp
  0ce6e	c2 04 00	 ret	 4
?CanDraw3DImageList@BCMenu@@IAEHH@Z ENDP		; BCMenu::CanDraw3DImageList
_TEXT	ENDS
EXTRN	?Replace@CImageList@@QAEHHPAUHICON__@@@Z:NEAR	; CImageList::Replace
xdata$x	SEGMENT
$T193130 DD	0ffffffffH
	DD	FLAT:$L193117
	DD	00H
	DD	FLAT:$L193118
	DD	01H
	DD	FLAT:$L193119
	DD	02H
	DD	FLAT:$L193120
$T193122 DD	019930520H
	DD	04H
	DD	FLAT:$T193130
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_hIcon4$190418 = -124					; size = 4
_hIcon3$190417 = -120					; size = 4
_hIcon2$190416 = -116					; size = 4
_il2$190415 = -108					; size = 8
_i$190406 = -96						; size = 4
_existsloc$190405 = -92					; size = 4
_numcurrent$190404 = -88				; size = 4
_pDC$190403 = -84					; size = 4
_pWnd$190401 = -80					; size = 4
_bmp3$190399 = -72					; size = 8
_bmp2$190398 = -56					; size = 8
_bmp$190397 = -40					; size = 8
_hIcon$ = -28						; size = 4
_hImageList$ = -24					; size = 4
_loc$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_il$ = 8						; size = 4
_xoffset$ = 12						; size = 4
_nID$ = 16						; size = 4
?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z PROC NEAR ; BCMenu::AddToGlobalImageList
; _this$ = ecx

; 3345 : {

  0ce80	55		 push	 ebp
  0ce81	8b ec		 mov	 ebp, esp
  0ce83	6a ff		 push	 -1
  0ce85	68 00 00 00 00	 push	 __ehhandler$?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z
  0ce8a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0ce90	50		 push	 eax
  0ce91	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0ce98	83 ec 70	 sub	 esp, 112		; 00000070H
  0ce9b	56		 push	 esi
  0ce9c	57		 push	 edi
  0ce9d	51		 push	 ecx
  0ce9e	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  0cea1	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0cea6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0ceab	f3 ab		 rep stosd
  0cead	59		 pop	 ecx
  0ceae	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3346 : 	int loc = -1;

  0ceb1	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _loc$[ebp], -1

; 3347 : 	HIMAGELIST hImageList = m_AllImages.m_hImageList;

  0ceb8	a1 04 00 00 00	 mov	 eax, DWORD PTR ?m_AllImages@BCMenu@@1VCImageList@@A+4
  0cebd	89 45 e8	 mov	 DWORD PTR _hImageList$[ebp], eax

; 3348 : 	if(!hImageList){

  0cec0	83 7d e8 00	 cmp	 DWORD PTR _hImageList$[ebp], 0
  0cec4	75 21		 jne	 SHORT $L190394

; 3349 : 		m_AllImages.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  0cec6	6a 01		 push	 1
  0cec8	6a 01		 push	 1
  0ceca	68 ff 00 00 00	 push	 255			; 000000ffH
  0cecf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0ced5	51		 push	 ecx
  0ced6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0cedc	52		 push	 edx
  0cedd	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0cee2	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create
$L190394:

; 3350 : 	}
; 3351 : 	HICON hIcon = il->ExtractIcon(xoffset);

  0cee7	8b 45 0c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  0ceea	50		 push	 eax
  0ceeb	8b 4d 08	 mov	 ecx, DWORD PTR _il$[ebp]
  0ceee	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0cef3	89 45 e4	 mov	 DWORD PTR _hIcon$[ebp], eax

; 3352 : 	if(hIcon){

  0cef6	83 7d e4 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  0cefa	0f 84 f0 03 00
	00		 je	 $L190396

; 3353 : 		CBitmap bmp,bmp2,bmp3;

  0cf00	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$190397[ebp]
  0cf03	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0cf08	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0cf0f	8d 4d c8	 lea	 ecx, DWORD PTR _bmp2$190398[ebp]
  0cf12	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0cf17	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0cf1b	8d 4d b8	 lea	 ecx, DWORD PTR _bmp3$190399[ebp]
  0cf1e	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0cf23	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3354 : 		if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0cf27	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0cf2c	85 c0		 test	 eax, eax
  0cf2e	0f 84 a8 00 00
	00		 je	 $L190400
  0cf34	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0cf3b	0f 84 9b 00 00
	00		 je	 $L190400

; 3355 : 			CWnd *pWnd = AfxGetMainWnd();            // Get main window

  0cf41	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  0cf46	89 45 b0	 mov	 DWORD PTR _pWnd$190401[ebp], eax

; 3356 : 			if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  0cf49	83 7d b0 00	 cmp	 DWORD PTR _pWnd$190401[ebp], 0
  0cf4d	75 08		 jne	 SHORT $L190402
  0cf4f	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  0cf54	89 45 b0	 mov	 DWORD PTR _pWnd$190401[ebp], eax
$L190402:

; 3357 : 			CDC *pDC = pWnd->GetDC();              // Get device context

  0cf57	8b 4d b0	 mov	 ecx, DWORD PTR _pWnd$190401[ebp]
  0cf5a	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  0cf5f	89 45 ac	 mov	 DWORD PTR _pDC$190403[ebp], eax

; 3358 : 			GetBitmapFromImageList(pDC,il,xoffset,bmp);

  0cf62	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$190397[ebp]
  0cf65	51		 push	 ecx
  0cf66	8b 55 0c	 mov	 edx, DWORD PTR _xoffset$[ebp]
  0cf69	52		 push	 edx
  0cf6a	8b 45 08	 mov	 eax, DWORD PTR _il$[ebp]
  0cf6d	50		 push	 eax
  0cf6e	8b 4d ac	 mov	 ecx, DWORD PTR _pDC$190403[ebp]
  0cf71	51		 push	 ecx
  0cf72	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0cf75	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3359 : 			GetFadedBitmap(bmp);

  0cf7a	8d 55 d8	 lea	 edx, DWORD PTR _bmp$190397[ebp]
  0cf7d	52		 push	 edx
  0cf7e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0cf81	e8 00 00 00 00	 call	 ?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetFadedBitmap

; 3360 : 			GetBitmapFromImageList(pDC,il,xoffset,bmp2);

  0cf86	8d 45 c8	 lea	 eax, DWORD PTR _bmp2$190398[ebp]
  0cf89	50		 push	 eax
  0cf8a	8b 4d 0c	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  0cf8d	51		 push	 ecx
  0cf8e	8b 55 08	 mov	 edx, DWORD PTR _il$[ebp]
  0cf91	52		 push	 edx
  0cf92	8b 45 ac	 mov	 eax, DWORD PTR _pDC$190403[ebp]
  0cf95	50		 push	 eax
  0cf96	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0cf99	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3361 : 			GetShadowBitmap(bmp2);

  0cf9e	8d 4d c8	 lea	 ecx, DWORD PTR _bmp2$190398[ebp]
  0cfa1	51		 push	 ecx
  0cfa2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0cfa5	e8 00 00 00 00	 call	 ?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetShadowBitmap

; 3362 : 			GetBitmapFromImageList(pDC,il,xoffset,bmp3);

  0cfaa	8d 55 b8	 lea	 edx, DWORD PTR _bmp3$190399[ebp]
  0cfad	52		 push	 edx
  0cfae	8b 45 0c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  0cfb1	50		 push	 eax
  0cfb2	8b 4d 08	 mov	 ecx, DWORD PTR _il$[ebp]
  0cfb5	51		 push	 ecx
  0cfb6	8b 55 ac	 mov	 edx, DWORD PTR _pDC$190403[ebp]
  0cfb9	52		 push	 edx
  0cfba	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0cfbd	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3363 : 			GetDisabledBitmap(bmp3);

  0cfc2	6a 00		 push	 0
  0cfc4	8d 45 b8	 lea	 eax, DWORD PTR _bmp3$190399[ebp]
  0cfc7	50		 push	 eax
  0cfc8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0cfcb	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 3364 : 			pWnd->ReleaseDC(pDC);  // Release the DC

  0cfd0	8b 4d ac	 mov	 ecx, DWORD PTR _pDC$190403[ebp]
  0cfd3	51		 push	 ecx
  0cfd4	8b 4d b0	 mov	 ecx, DWORD PTR _pWnd$190401[ebp]
  0cfd7	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC
$L190400:

; 3365 : 		}
; 3366 : 		int numcurrent=m_AllImagesID.GetSize();

  0cfdc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0cfe1	e8 00 00 00 00	 call	 ?GetSize@?$CArray@HAAH@@QBEHXZ ; CArray<int,int &>::GetSize
  0cfe6	89 45 a8	 mov	 DWORD PTR _numcurrent$190404[ebp], eax

; 3367 : 		int existsloc = -1;

  0cfe9	c7 45 a4 ff ff
	ff ff		 mov	 DWORD PTR _existsloc$190405[ebp], -1

; 3368 : 		for(int i=0;i<numcurrent;++i){

  0cff0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$190406[ebp], 0
  0cff7	eb 09		 jmp	 SHORT $L190407
$L190408:
  0cff9	8b 55 a0	 mov	 edx, DWORD PTR _i$190406[ebp]
  0cffc	83 c2 01	 add	 edx, 1
  0cfff	89 55 a0	 mov	 DWORD PTR _i$190406[ebp], edx
$L190407:
  0d002	8b 45 a0	 mov	 eax, DWORD PTR _i$190406[ebp]
  0d005	3b 45 a8	 cmp	 eax, DWORD PTR _numcurrent$190404[ebp]
  0d008	7d 1f		 jge	 SHORT $L190409

; 3369 : 			if(m_AllImagesID[i]==nID){

  0d00a	8b 4d a0	 mov	 ecx, DWORD PTR _i$190406[ebp]
  0d00d	51		 push	 ecx
  0d00e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d013	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0d018	8b 10		 mov	 edx, DWORD PTR [eax]
  0d01a	3b 55 10	 cmp	 edx, DWORD PTR _nID$[ebp]
  0d01d	75 08		 jne	 SHORT $L190410

; 3370 : 				existsloc=i;

  0d01f	8b 45 a0	 mov	 eax, DWORD PTR _i$190406[ebp]
  0d022	89 45 a4	 mov	 DWORD PTR _existsloc$190405[ebp], eax

; 3371 : 				break;

  0d025	eb 02		 jmp	 SHORT $L190409
$L190410:

; 3372 : 			}
; 3373 : 		}

  0d027	eb d0		 jmp	 SHORT $L190408
$L190409:

; 3374 : 		if(existsloc>=0){

  0d029	83 7d a4 00	 cmp	 DWORD PTR _existsloc$190405[ebp], 0
  0d02d	0f 8c bd 01 00
	00		 jl	 $L190411

; 3375 : 			m_AllImages.Replace(existsloc,hIcon);

  0d033	8b 4d e4	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  0d036	51		 push	 ecx
  0d037	8b 55 a4	 mov	 edx, DWORD PTR _existsloc$190405[ebp]
  0d03a	52		 push	 edx
  0d03b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d040	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3376 : 			loc = existsloc;

  0d045	8b 45 a4	 mov	 eax, DWORD PTR _existsloc$190405[ebp]
  0d048	89 45 ec	 mov	 DWORD PTR _loc$[ebp], eax

; 3377 : 			if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0d04b	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0d050	85 c0		 test	 eax, eax
  0d052	0f 84 93 01 00
	00		 je	 $L190412
  0d058	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0d05f	0f 84 86 01 00
	00		 je	 $L190412

; 3378 : 				if(existsloc+1<numcurrent&&m_AllImagesID[existsloc+1]==nID){

  0d065	8b 4d a4	 mov	 ecx, DWORD PTR _existsloc$190405[ebp]
  0d068	83 c1 01	 add	 ecx, 1
  0d06b	3b 4d a8	 cmp	 ecx, DWORD PTR _numcurrent$190404[ebp]
  0d06e	0f 8d 77 01 00
	00		 jge	 $L190412
  0d074	8b 55 a4	 mov	 edx, DWORD PTR _existsloc$190405[ebp]
  0d077	83 c2 01	 add	 edx, 1
  0d07a	52		 push	 edx
  0d07b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d080	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0d085	8b 00		 mov	 eax, DWORD PTR [eax]
  0d087	3b 45 10	 cmp	 eax, DWORD PTR _nID$[ebp]
  0d08a	0f 85 5b 01 00
	00		 jne	 $L190412

; 3379 : 					if(existsloc+2<numcurrent&&m_AllImagesID[existsloc+2]==nID){

  0d090	8b 4d a4	 mov	 ecx, DWORD PTR _existsloc$190405[ebp]
  0d093	83 c1 02	 add	 ecx, 2
  0d096	3b 4d a8	 cmp	 ecx, DWORD PTR _numcurrent$190404[ebp]
  0d099	0f 8d 4c 01 00
	00		 jge	 $L190412
  0d09f	8b 55 a4	 mov	 edx, DWORD PTR _existsloc$190405[ebp]
  0d0a2	83 c2 02	 add	 edx, 2
  0d0a5	52		 push	 edx
  0d0a6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d0ab	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0d0b0	8b 00		 mov	 eax, DWORD PTR [eax]
  0d0b2	3b 45 10	 cmp	 eax, DWORD PTR _nID$[ebp]
  0d0b5	0f 85 30 01 00
	00		 jne	 $L190412

; 3380 : 						CImageList il2;

  0d0bb	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d0be	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0d0c3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 3381 : 						il2.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  0d0c7	6a 01		 push	 1
  0d0c9	6a 01		 push	 1
  0d0cb	68 ff 00 00 00	 push	 255			; 000000ffH
  0d0d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0d0d6	51		 push	 ecx
  0d0d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0d0dd	52		 push	 edx
  0d0de	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d0e1	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 3382 : 						il2.Add(&bmp,GetSysColor(COLOR_3DFACE));

  0d0e6	8b f4		 mov	 esi, esp
  0d0e8	6a 0f		 push	 15			; 0000000fH
  0d0ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0d0f0	3b f4		 cmp	 esi, esp
  0d0f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d0f7	50		 push	 eax
  0d0f8	8d 45 d8	 lea	 eax, DWORD PTR _bmp$190397[ebp]
  0d0fb	50		 push	 eax
  0d0fc	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d0ff	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3383 : 						HICON hIcon2 = il2.ExtractIcon(0);

  0d104	6a 00		 push	 0
  0d106	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d109	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0d10e	89 45 8c	 mov	 DWORD PTR _hIcon2$190416[ebp], eax

; 3384 : 						m_AllImages.Replace(existsloc+1,hIcon2);

  0d111	8b 4d 8c	 mov	 ecx, DWORD PTR _hIcon2$190416[ebp]
  0d114	51		 push	 ecx
  0d115	8b 55 a4	 mov	 edx, DWORD PTR _existsloc$190405[ebp]
  0d118	83 c2 01	 add	 edx, 1
  0d11b	52		 push	 edx
  0d11c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d121	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3385 : 						il2.Add(&bmp2,GetSysColor(COLOR_3DFACE));

  0d126	8b f4		 mov	 esi, esp
  0d128	6a 0f		 push	 15			; 0000000fH
  0d12a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0d130	3b f4		 cmp	 esi, esp
  0d132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d137	50		 push	 eax
  0d138	8d 45 c8	 lea	 eax, DWORD PTR _bmp2$190398[ebp]
  0d13b	50		 push	 eax
  0d13c	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d13f	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3386 : 						HICON hIcon3 = il2.ExtractIcon(1);

  0d144	6a 01		 push	 1
  0d146	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d149	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0d14e	89 45 88	 mov	 DWORD PTR _hIcon3$190417[ebp], eax

; 3387 : 						m_AllImages.Replace(existsloc+2,hIcon3);

  0d151	8b 4d 88	 mov	 ecx, DWORD PTR _hIcon3$190417[ebp]
  0d154	51		 push	 ecx
  0d155	8b 55 a4	 mov	 edx, DWORD PTR _existsloc$190405[ebp]
  0d158	83 c2 02	 add	 edx, 2
  0d15b	52		 push	 edx
  0d15c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d161	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3388 : 						il2.Add(&bmp3,GetSysColor(COLOR_3DFACE));

  0d166	8b f4		 mov	 esi, esp
  0d168	6a 0f		 push	 15			; 0000000fH
  0d16a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0d170	3b f4		 cmp	 esi, esp
  0d172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d177	50		 push	 eax
  0d178	8d 45 b8	 lea	 eax, DWORD PTR _bmp3$190399[ebp]
  0d17b	50		 push	 eax
  0d17c	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d17f	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3389 : 						HICON hIcon4 = il2.ExtractIcon(2);

  0d184	6a 02		 push	 2
  0d186	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d189	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0d18e	89 45 84	 mov	 DWORD PTR _hIcon4$190418[ebp], eax

; 3390 : 						m_AllImages.Replace(existsloc+3,hIcon4);

  0d191	8b 4d 84	 mov	 ecx, DWORD PTR _hIcon4$190418[ebp]
  0d194	51		 push	 ecx
  0d195	8b 55 a4	 mov	 edx, DWORD PTR _existsloc$190405[ebp]
  0d198	83 c2 03	 add	 edx, 3
  0d19b	52		 push	 edx
  0d19c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d1a1	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3391 : 						::DestroyIcon(hIcon2);

  0d1a6	8b f4		 mov	 esi, esp
  0d1a8	8b 45 8c	 mov	 eax, DWORD PTR _hIcon2$190416[ebp]
  0d1ab	50		 push	 eax
  0d1ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  0d1b2	3b f4		 cmp	 esi, esp
  0d1b4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3392 : 						::DestroyIcon(hIcon3);

  0d1b9	8b f4		 mov	 esi, esp
  0d1bb	8b 4d 88	 mov	 ecx, DWORD PTR _hIcon3$190417[ebp]
  0d1be	51		 push	 ecx
  0d1bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  0d1c5	3b f4		 cmp	 esi, esp
  0d1c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3393 : 						::DestroyIcon(hIcon4);

  0d1cc	8b f4		 mov	 esi, esp
  0d1ce	8b 55 84	 mov	 edx, DWORD PTR _hIcon4$190418[ebp]
  0d1d1	52		 push	 edx
  0d1d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  0d1d8	3b f4		 cmp	 esi, esp
  0d1da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3394 : 					}

  0d1df	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0d1e3	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  0d1e6	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L190412:

; 3395 : 				}
; 3396 : 			}
; 3397 : 		}
; 3398 : 		else{

  0d1eb	e9 c6 00 00 00	 jmp	 $L190419
$L190411:

; 3399 : 			m_AllImages.Add(hIcon);

  0d1f0	8b 45 e4	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0d1f3	50		 push	 eax
  0d1f4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d1f9	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAUHICON__@@@Z ; CImageList::Add

; 3400 : 			m_AllImagesID.Add(nID);

  0d1fe	8d 4d 10	 lea	 ecx, DWORD PTR _nID$[ebp]
  0d201	51		 push	 ecx
  0d202	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d207	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 3401 : 			loc=numcurrent;

  0d20c	8b 55 a8	 mov	 edx, DWORD PTR _numcurrent$190404[ebp]
  0d20f	89 55 ec	 mov	 DWORD PTR _loc$[ebp], edx

; 3402 : 			if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0d212	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0d217	85 c0		 test	 eax, eax
  0d219	0f 84 97 00 00
	00		 je	 $L190419
  0d21f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0d226	0f 84 8a 00 00
	00		 je	 $L190419

; 3403 : 				m_AllImages.Add(&bmp,GetSysColor(COLOR_3DFACE));

  0d22c	8b f4		 mov	 esi, esp
  0d22e	6a 0f		 push	 15			; 0000000fH
  0d230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0d236	3b f4		 cmp	 esi, esp
  0d238	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d23d	50		 push	 eax
  0d23e	8d 45 d8	 lea	 eax, DWORD PTR _bmp$190397[ebp]
  0d241	50		 push	 eax
  0d242	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d247	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3404 : 				m_AllImages.Add(&bmp2,GetSysColor(COLOR_3DFACE));

  0d24c	8b f4		 mov	 esi, esp
  0d24e	6a 0f		 push	 15			; 0000000fH
  0d250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0d256	3b f4		 cmp	 esi, esp
  0d258	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d25d	50		 push	 eax
  0d25e	8d 4d c8	 lea	 ecx, DWORD PTR _bmp2$190398[ebp]
  0d261	51		 push	 ecx
  0d262	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d267	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3405 : 				m_AllImages.Add(&bmp3,GetSysColor(COLOR_3DFACE));

  0d26c	8b f4		 mov	 esi, esp
  0d26e	6a 0f		 push	 15			; 0000000fH
  0d270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0d276	3b f4		 cmp	 esi, esp
  0d278	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d27d	50		 push	 eax
  0d27e	8d 55 b8	 lea	 edx, DWORD PTR _bmp3$190399[ebp]
  0d281	52		 push	 edx
  0d282	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0d287	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3406 : 				m_AllImagesID.Add(nID);

  0d28c	8d 45 10	 lea	 eax, DWORD PTR _nID$[ebp]
  0d28f	50		 push	 eax
  0d290	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d295	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 3407 : 				m_AllImagesID.Add(nID);

  0d29a	8d 4d 10	 lea	 ecx, DWORD PTR _nID$[ebp]
  0d29d	51		 push	 ecx
  0d29e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d2a3	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 3408 : 				m_AllImagesID.Add(nID);

  0d2a8	8d 55 10	 lea	 edx, DWORD PTR _nID$[ebp]
  0d2ab	52		 push	 edx
  0d2ac	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0d2b1	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add
$L190419:

; 3409 : 			}
; 3410 : 		}
; 3411 : 		::DestroyIcon(hIcon);

  0d2b6	8b f4		 mov	 esi, esp
  0d2b8	8b 45 e4	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0d2bb	50		 push	 eax
  0d2bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
  0d2c2	3b f4		 cmp	 esi, esp
  0d2c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3412 : 	}

  0d2c9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0d2cd	8d 4d b8	 lea	 ecx, DWORD PTR _bmp3$190399[ebp]
  0d2d0	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0d2d5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0d2d9	8d 4d c8	 lea	 ecx, DWORD PTR _bmp2$190398[ebp]
  0d2dc	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0d2e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0d2e8	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$190397[ebp]
  0d2eb	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L190396:

; 3413 : 	return(loc);

  0d2f0	8b 45 ec	 mov	 eax, DWORD PTR _loc$[ebp]

; 3414 : }

  0d2f3	52		 push	 edx
  0d2f4	8b cd		 mov	 ecx, ebp
  0d2f6	50		 push	 eax
  0d2f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193129
  0d2fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0d302	58		 pop	 eax
  0d303	5a		 pop	 edx
  0d304	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0d307	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0d30e	5f		 pop	 edi
  0d30f	5e		 pop	 esi
  0d310	83 c4 7c	 add	 esp, 124		; 0000007cH
  0d313	3b ec		 cmp	 ebp, esp
  0d315	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d31a	8b e5		 mov	 esp, ebp
  0d31c	5d		 pop	 ebp
  0d31d	c2 0c 00	 ret	 12			; 0000000cH
$L193129:
  0d320	04 00 00 00	 DD	 4
  0d324	00 00 00 00	 DD	 $L193128
$L193128:
  0d328	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0d32c	08 00 00 00	 DD	 8
  0d330	00 00 00 00	 DD	 $L193123
  0d334	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0d338	08 00 00 00	 DD	 8
  0d33c	00 00 00 00	 DD	 $L193124
  0d340	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0d344	08 00 00 00	 DD	 8
  0d348	00 00 00 00	 DD	 $L193125
  0d34c	94 ff ff ff	 DD	 -108			; ffffff94H
  0d350	08 00 00 00	 DD	 8
  0d354	00 00 00 00	 DD	 $L193126
$L193126:
  0d358	69		 DB	 105			; 00000069H
  0d359	6c		 DB	 108			; 0000006cH
  0d35a	32		 DB	 50			; 00000032H
  0d35b	00		 DB	 0
$L193125:
  0d35c	62		 DB	 98			; 00000062H
  0d35d	6d		 DB	 109			; 0000006dH
  0d35e	70		 DB	 112			; 00000070H
  0d35f	33		 DB	 51			; 00000033H
  0d360	00		 DB	 0
$L193124:
  0d361	62		 DB	 98			; 00000062H
  0d362	6d		 DB	 109			; 0000006dH
  0d363	70		 DB	 112			; 00000070H
  0d364	32		 DB	 50			; 00000032H
  0d365	00		 DB	 0
$L193123:
  0d366	62		 DB	 98			; 00000062H
  0d367	6d		 DB	 109			; 0000006dH
  0d368	70		 DB	 112			; 00000070H
  0d369	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193117:
  008a0	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$190397[ebp]
  008a3	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L193118:
  008a8	8d 4d c8	 lea	 ecx, DWORD PTR _bmp2$190398[ebp]
  008ab	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L193119:
  008b0	8d 4d b8	 lea	 ecx, DWORD PTR _bmp3$190399[ebp]
  008b3	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L193120:
  008b8	8d 4d 94	 lea	 ecx, DWORD PTR _il2$190415[ebp]
  008bb	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z:
  008c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193122
  008c5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ENDP ; BCMenu::AddToGlobalImageList
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
?SetMenuItemBkColor@BCMenu@@QAEXK@Z PROC NEAR		; BCMenu::SetMenuItemBkColor
; _this$ = ecx

; 3418 : { 

  0d370	55		 push	 ebp
  0d371	8b ec		 mov	 ebp, esp
  0d373	51		 push	 ecx
  0d374	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0d37b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3419 : 	m_menuItemBkColor = col;	

  0d37e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0d381	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  0d384	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 3420 : }

  0d387	8b e5		 mov	 esp, ebp
  0d389	5d		 pop	 ebp
  0d38a	c2 04 00	 ret	 4
?SetMenuItemBkColor@BCMenu@@QAEXK@Z ENDP		; BCMenu::SetMenuItemBkColor
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
_col$ = 8						; size = 4
?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z PROC NEAR	; BCMenu::SetMenuItemBitmapBkColor
; _this$ = ecx

; 3423 : { 

  0d390	55		 push	 ebp
  0d391	8b ec		 mov	 ebp, esp
  0d393	51		 push	 ecx
  0d394	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0d39b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3424 : 	m_menuItemBitmapBkColor = col; 	

  0d39e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0d3a1	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  0d3a4	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 3425 : 	m_bitmapBackground      = col;

  0d3a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0d3aa	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]
  0d3ad	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 3426 : }

  0d3b0	8b e5		 mov	 esp, ebp
  0d3b2	5d		 pop	 ebp
  0d3b3	c2 04 00	 ret	 4
?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ENDP		; BCMenu::SetMenuItemBitmapBkColor
_TEXT	ENDS
PUBLIC	?SetTextColor@BCMenu@@QAEXK@Z			; BCMenu::SetTextColor
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
?SetTextColor@BCMenu@@QAEXK@Z PROC NEAR			; BCMenu::SetTextColor
; _this$ = ecx

; 3429 : {

  0d3c0	55		 push	 ebp
  0d3c1	8b ec		 mov	 ebp, esp
  0d3c3	51		 push	 ecx
  0d3c4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0d3cb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3430 : 	m_menuItemTextColor = col;

  0d3ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0d3d1	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  0d3d4	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 3431 : }

  0d3d7	8b e5		 mov	 esp, ebp
  0d3d9	5d		 pop	 ebp
  0d3da	c2 04 00	 ret	 4
?SetTextColor@BCMenu@@QAEXK@Z ENDP			; BCMenu::SetTextColor
_TEXT	ENDS
PUBLIC	?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z ; BCMenu::SetMenuItemBitmap
xdata$x	SEGMENT
$T193143 DD	0ffffffffH
	DD	FLAT:$L193136
$T193138 DD	019930520H
	DD	01H
	DD	FLAT:$T193143
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_bmp$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_text$ = 12						; size = 4
_hBitmap$ = 16						; size = 4
?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z PROC NEAR ; BCMenu::SetMenuItemBitmap
; _this$ = ecx

; 3434 : {

  0d3e0	55		 push	 ebp
  0d3e1	8b ec		 mov	 ebp, esp
  0d3e3	6a ff		 push	 -1
  0d3e5	68 00 00 00 00	 push	 __ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z
  0d3ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0d3f0	50		 push	 eax
  0d3f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0d3f8	83 ec 14	 sub	 esp, 20			; 00000014H
  0d3fb	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0d400	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0d403	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0d406	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0d409	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0d40c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0d40f	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3435 : 	CBitmap bmp;

  0d412	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d415	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0d41a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3436 : 	ASSERT(hBitmap);

  0d421	83 7d 10 00	 cmp	 DWORD PTR _hBitmap$[ebp], 0
  0d425	75 14		 jne	 SHORT $L193135
  0d427	68 6c 0d 00 00	 push	 3436			; 00000d6cH
  0d42c	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0d431	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0d436	85 c0		 test	 eax, eax
  0d438	74 01		 je	 SHORT $L193135
  0d43a	cc		 int	 3
$L193135:

; 3437 : 	if (bmp.m_hObject)

  0d43b	83 7d e8 00	 cmp	 DWORD PTR _bmp$[ebp+4], 0
  0d43f	74 08		 je	 SHORT $L190441

; 3438 : 		bmp.Detach();

  0d441	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d444	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
$L190441:

; 3439 : 
; 3440 : 	bmp.Attach(hBitmap);

  0d449	8b 4d 10	 mov	 ecx, DWORD PTR _hBitmap$[ebp]
  0d44c	51		 push	 ecx
  0d44d	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d450	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 3441 : 	ModifyODMenuA( text, nID, &bmp );

  0d455	8d 55 e4	 lea	 edx, DWORD PTR _bmp$[ebp]
  0d458	52		 push	 edx
  0d459	8b 45 08	 mov	 eax, DWORD PTR _nID$[ebp]
  0d45c	50		 push	 eax
  0d45d	8b 4d 0c	 mov	 ecx, DWORD PTR _text$[ebp]
  0d460	51		 push	 ecx
  0d461	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0d464	e8 00 00 00 00	 call	 ?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuA

; 3442 : }

  0d469	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0d470	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d473	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0d478	52		 push	 edx
  0d479	8b cd		 mov	 ecx, ebp
  0d47b	50		 push	 eax
  0d47c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193142
  0d482	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0d487	58		 pop	 eax
  0d488	5a		 pop	 edx
  0d489	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0d48c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0d493	83 c4 20	 add	 esp, 32			; 00000020H
  0d496	3b ec		 cmp	 ebp, esp
  0d498	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d49d	8b e5		 mov	 esp, ebp
  0d49f	5d		 pop	 ebp
  0d4a0	c2 0c 00	 ret	 12			; 0000000cH
$L193142:
  0d4a3	01 00 00 00	 DD	 1
  0d4a7	00 00 00 00	 DD	 $L193141
$L193141:
  0d4ab	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0d4af	08 00 00 00	 DD	 8
  0d4b3	00 00 00 00	 DD	 $L193139
$L193139:
  0d4b7	62		 DB	 98			; 00000062H
  0d4b8	6d		 DB	 109			; 0000006dH
  0d4b9	70		 DB	 112			; 00000070H
  0d4ba	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193136:
  008ca	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  008cd	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z:
  008d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193138
  008d7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z ENDP ; BCMenu::SetMenuItemBitmap
PUBLIC	?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z		; BCMenu::SetMenuItemBitmap
EXTRN	__imp__LoadImageA@24:NEAR
xdata$x	SEGMENT
$T193153 DD	0ffffffffH
	DD	FLAT:$L193146
$T193148 DD	019930520H
	DD	01H
	DD	FLAT:$T193153
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_hBitmap$ = -36						; size = 4
_bmp$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_text$ = 12						; size = 4
_bitmap$ = 16						; size = 4
?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z PROC NEAR	; BCMenu::SetMenuItemBitmap
; _this$ = ecx

; 3445 : {

  0d4c0	55		 push	 ebp
  0d4c1	8b ec		 mov	 ebp, esp
  0d4c3	6a ff		 push	 -1
  0d4c5	68 00 00 00 00	 push	 __ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z
  0d4ca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0d4d0	50		 push	 eax
  0d4d1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0d4d8	83 ec 18	 sub	 esp, 24			; 00000018H
  0d4db	56		 push	 esi
  0d4dc	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0d4e1	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0d4e4	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0d4e7	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0d4ea	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0d4ed	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0d4f0	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0d4f3	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3446 : 	CBitmap bmp;

  0d4f6	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d4f9	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0d4fe	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3447 : 	HBITMAP hBitmap = NULL;

  0d505	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hBitmap$[ebp], 0

; 3448 : 	hBitmap = (HBITMAP)::LoadImage(NULL, bitmap, IMAGE_BITMAP, 
; 3449 : 		0, 0, LR_DEFAULTSIZE|LR_LOADFROMFILE);

  0d50c	8b f4		 mov	 esi, esp
  0d50e	6a 50		 push	 80			; 00000050H
  0d510	6a 00		 push	 0
  0d512	6a 00		 push	 0
  0d514	6a 00		 push	 0
  0d516	8b 45 10	 mov	 eax, DWORD PTR _bitmap$[ebp]
  0d519	50		 push	 eax
  0d51a	6a 00		 push	 0
  0d51c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadImageA@24
  0d522	3b f4		 cmp	 esi, esp
  0d524	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d529	89 45 dc	 mov	 DWORD PTR _hBitmap$[ebp], eax

; 3450 : 	ASSERT(hBitmap);

  0d52c	83 7d dc 00	 cmp	 DWORD PTR _hBitmap$[ebp], 0
  0d530	75 14		 jne	 SHORT $L193145
  0d532	68 7a 0d 00 00	 push	 3450			; 00000d7aH
  0d537	68 00 00 00 00	 push	 OFFSET FLAT:_THIS_FILE
  0d53c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0d541	85 c0		 test	 eax, eax
  0d543	74 01		 je	 SHORT $L193145
  0d545	cc		 int	 3
$L193145:

; 3451 : 
; 3452 : 	if (bmp.m_hObject)

  0d546	83 7d e8 00	 cmp	 DWORD PTR _bmp$[ebp+4], 0
  0d54a	74 08		 je	 SHORT $L190452

; 3453 : 		bmp.Detach();

  0d54c	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d54f	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
$L190452:

; 3454 : 
; 3455 : 	bmp.Attach(hBitmap);

  0d554	8b 55 dc	 mov	 edx, DWORD PTR _hBitmap$[ebp]
  0d557	52		 push	 edx
  0d558	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d55b	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 3456 : 	ModifyODMenuA( text, nID, &bmp );

  0d560	8d 45 e4	 lea	 eax, DWORD PTR _bmp$[ebp]
  0d563	50		 push	 eax
  0d564	8b 4d 08	 mov	 ecx, DWORD PTR _nID$[ebp]
  0d567	51		 push	 ecx
  0d568	8b 55 0c	 mov	 edx, DWORD PTR _text$[ebp]
  0d56b	52		 push	 edx
  0d56c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0d56f	e8 00 00 00 00	 call	 ?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuA

; 3457 : }

  0d574	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0d57b	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0d57e	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0d583	52		 push	 edx
  0d584	8b cd		 mov	 ecx, ebp
  0d586	50		 push	 eax
  0d587	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $L193152
  0d58d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0d592	58		 pop	 eax
  0d593	5a		 pop	 edx
  0d594	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0d597	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0d59e	5e		 pop	 esi
  0d59f	83 c4 24	 add	 esp, 36			; 00000024H
  0d5a2	3b ec		 cmp	 ebp, esp
  0d5a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0d5a9	8b e5		 mov	 esp, ebp
  0d5ab	5d		 pop	 ebp
  0d5ac	c2 0c 00	 ret	 12			; 0000000cH
$L193152:
  0d5af	01 00 00 00	 DD	 1
  0d5b3	00 00 00 00	 DD	 $L193151
$L193151:
  0d5b7	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0d5bb	08 00 00 00	 DD	 8
  0d5bf	00 00 00 00	 DD	 $L193149
$L193149:
  0d5c3	62		 DB	 98			; 00000062H
  0d5c4	6d		 DB	 109			; 0000006dH
  0d5c5	70		 DB	 112			; 00000070H
  0d5c6	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L193146:
  008dc	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  008df	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z:
  008e4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193148
  008e9	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z ENDP		; BCMenu::SetMenuItemBitmap
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z PROC NEAR ; ATL::operator==, COMDAT

; 2081 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2082 : 		return( str1.Compare( str2 ) == 0 );

  00004	8b f4		 mov	 esi, esp
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _str2$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0000f	3b f4		 cmp	 esi, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	8b f4		 mov	 esi, esp
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _str1$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	f7 d8		 neg	 eax
  0002b	1b c0		 sbb	 eax, eax
  0002d	40		 inc	 eax

; 2083 : 	}

  0002e	5e		 pop	 esi
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ENDP ; ATL::operator==
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_psz2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z PROC NEAR ; ATL::operator==, COMDAT

; 2087 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2088 : 		return( str1.Compare( psz2 ) == 0 );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _psz2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _str1$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	40		 inc	 eax

; 2089 : 	}

  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ENDP ; ATL::operator==
_TEXT	ENDS
EXTRN	?GetAt@CPtrArray@@QBEPAXH@Z:NEAR		; CPtrArray::GetAt
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt, COMDAT
; _this$ = ecx

; 1832 : 		{ return (TYPE)BASE_CLASS::GetAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?GetAt@CPtrArray@@QBEPAXH@Z ; CPtrArray::GetAt
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
_TEXT	ENDS
EXTRN	?Add@CPtrArray@@QAEHPAX@Z:NEAR			; CPtrArray::Add
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add, COMDAT
; _this$ = ecx

; 1842 : 	   { return BASE_CLASS::Add(newElement); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Add@CPtrArray@@QAEHPAX@Z ; CPtrArray::Add
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
_TEXT	ENDS
EXTRN	?Append@CPtrArray@@QAEHABV1@@Z:NEAR		; CPtrArray::Append
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append, COMDAT
; _this$ = ecx

; 1844 : 	   { return BASE_CLASS::Append(src); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Append@CPtrArray@@QAEHABV1@@Z ; CPtrArray::Append
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append
_TEXT	ENDS
EXTRN	?InsertAt@CPtrArray@@QAEXHPAXH@Z:NEAR		; CPtrArray::InsertAt
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
_nCount$ = 16						; size = 4
?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt, COMDAT
; _this$ = ecx

; 1850 : 		{ BASE_CLASS::InsertAt(nIndex, newElement, nCount); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _newElement$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00019	52		 push	 edx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?InsertAt@CPtrArray@@QAEXHPAXH@Z ; CPtrArray::InsertAt
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt
_TEXT	ENDS
EXTRN	??ACPtrArray@@QAEAAPAXH@Z:NEAR			; CPtrArray::operator[]
; Function compile flags: /Odt /RTCsu
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[], COMDAT
; _this$ = ecx

; 1858 : 		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??ACPtrArray@@QAEAAPAXH@Z ; CPtrArray::operator[]
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add, COMDAT
; _this$ = ecx

; 1842 : 	   { return BASE_CLASS::Add(newElement); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Add@CPtrArray@@QAEHPAX@Z ; CPtrArray::Add
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[], COMDAT
; _this$ = ecx

; 1858 : 		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??ACPtrArray@@QAEAAPAXH@Z ; CPtrArray::operator[]
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::Add, COMDAT
; _this$ = ecx

; 1842 : 	   { return BASE_CLASS::Add(newElement); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Add@CPtrArray@@QAEHPAX@Z ; CPtrArray::Add
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::Add
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[], COMDAT
; _this$ = ecx

; 1858 : 		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??ACPtrArray@@QAEAAPAXH@Z ; CPtrArray::operator[]
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
_TEXT	ENDS
PUBLIC	?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z	; CArray<int,int &>::Serialize
PUBLIC	?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z	; CArray<int,int &>::Dump
PUBLIC	?AssertValid@?$CArray@HAAH@@UBEXXZ		; CArray<int,int &>::AssertValid
PUBLIC	??_7?$CArray@HAAH@@6B@				; CArray<int,int &>::`vftable'
PUBLIC	??_G?$CArray@HAAH@@UAEPAXI@Z			; CArray<int,int &>::`scalar deleting destructor'
PUBLIC	??_R4?$CArray@HAAH@@6B@				; CArray<int,int &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@HAAH@@@8			; CArray<int,int &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@HAAH@@8				; CArray<int,int &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@HAAH@@8				; CArray<int,int &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CArray@HAAH@@8			; CArray<int,int &>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CArray@HAAH@@UAEPAXI@Z:NEAR		; CArray<int,int &>::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CObject::GetRuntimeClass
EXTRN	??0CObject@@IAE@XZ:NEAR				; CObject::CObject
;	COMDAT ??_7?$CArray@HAAH@@6B@
CONST	SEGMENT
??_7?$CArray@HAAH@@6B@ DD FLAT:??_R4?$CArray@HAAH@@6B@	; CArray<int,int &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@HAAH@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CArray@HAAH@@UBEXXZ
	DD	FLAT:?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT
??_R4?$CArray@HAAH@@6B@ DD 00H				; CArray<int,int &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@HAAH@@@8
	DD	FLAT:??_R3?$CArray@HAAH@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT
??_R0?AV?$CArray@HAAH@@@8 DD FLAT:??_7type_info@@6B@	; CArray<int,int &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@HAAH@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT
??_R3?$CArray@HAAH@@8 DD 00H				; CArray<int,int &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@HAAH@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT
??_R2?$CArray@HAAH@@8 DD FLAT:??_R1A@?0A@A@?$CArray@HAAH@@8 ; CArray<int,int &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CArray@HAAH@@8 DD FLAT:??_R0?AV?$CArray@HAAH@@@8 ; CArray<int,int &>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0?$CArray@HAAH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CArray@HAAH@@QAE@XZ PROC NEAR			; CArray<int,int &>::CArray<int,int &>, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HAAH@@6B@

; 350  : 	m_pData = NULL;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 351  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 352  : }

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c4 04	 add	 esp, 4
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??0?$CArray@HAAH@@QAE@XZ ENDP				; CArray<int,int &>::CArray<int,int &>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@HAAH@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CArray@HAAH@@QBEHXZ PROC NEAR		; CArray<int,int &>::GetSize, COMDAT
; _this$ = ecx

; 272  : 	{ return m_nSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSize@?$CArray@HAAH@@QBEHXZ ENDP			; CArray<int,int &>::GetSize
_TEXT	ENDS
PUBLIC	?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z		; CArray<int,int &>::SetAtGrow
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Add@?$CArray@HAAH@@QAEHAAH@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CArray@HAAH@@QAEHAAH@Z PROC NEAR			; CArray<int,int &>::Add, COMDAT
; _this$ = ecx

; 334  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 335  : 		SetAtGrow(nIndex, newElement);

  00020	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00023	52		 push	 edx
  00024	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z ; CArray<int,int &>::SetAtGrow

; 336  : 		return nIndex; }

  00030	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?Add@?$CArray@HAAH@@QAEHAAH@Z ENDP			; CArray<int,int &>::Add
_TEXT	ENDS
PUBLIC	?ElementAt@?$CArray@HAAH@@QAEAAHH@Z		; CArray<int,int &>::ElementAt
; Function compile flags: /Odt /RTCsu
;	COMDAT ??A?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CArray@HAAH@@QAEAAHH@Z PROC NEAR			; CArray<int,int &>::operator[], COMDAT
; _this$ = ecx

; 342  : 	{ return ElementAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?ElementAt@?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::ElementAt
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CArray@HAAH@@QAEAAHH@Z ENDP			; CArray<int,int &>::operator[]
_TEXT	ENDS
EXTRN	??1CObject@@UAE@XZ:NEAR				; CObject::~CObject
;	COMDAT xdata$x
xdata$x	SEGMENT
$T193176 DD	0ffffffffH
	DD	FLAT:$L193172
$T193174 DD	019930520H
	DD	01H
	DD	FLAT:$T193176
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT
$T193171 = -24						; size = 4
_i$190733 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CArray@HAAH@@UAE@XZ PROC NEAR			; CArray<int,int &>::~CArray<int,int &>, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CArray@HAAH@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00030	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HAAH@@6B@
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 357  : 	ASSERT_VALID(this);

  00043	68 65 01 00 00	 push	 357			; 00000165H
  00048	68 00 00 00 00	 push	 OFFSET FLAT:$SG190731
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 358  : 
; 359  : 	if (m_pData != NULL)

  00056	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00059	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0005d	74 34		 je	 SHORT $L190730

; 360  : 	{
; 361  : 		for( int i = 0; i < m_nSize; i++ )

  0005f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$190733[ebp], 0
  00066	eb 09		 jmp	 SHORT $L190734
$L190735:
  00068	8b 45 ec	 mov	 eax, DWORD PTR _i$190733[ebp]
  0006b	83 c0 01	 add	 eax, 1
  0006e	89 45 ec	 mov	 DWORD PTR _i$190733[ebp], eax
$L190734:
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 55 ec	 mov	 edx, DWORD PTR _i$190733[ebp]
  00077	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0007a	7d 02		 jge	 SHORT $L190736

; 362  : 			(m_pData + i)->~TYPE();

  0007c	eb ea		 jmp	 SHORT $L190735
$L190736:

; 363  : 		delete[] (BYTE*)m_pData;

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	89 4d e8	 mov	 DWORD PTR $T193171[ebp], ecx
  00087	8b 55 e8	 mov	 edx, DWORD PTR $T193171[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00090	83 c4 04	 add	 esp, 4
$L190730:

; 364  : 	}
; 365  : }

  00093	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L193172:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1?$CArray@HAAH@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193174
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1?$CArray@HAAH@@UAE@XZ ENDP				; CArray<int,int &>::~CArray<int,int &>
PUBLIC	?SetSize@?$CArray@HAAH@@QAEXHH@Z		; CArray<int,int &>::SetSize
PUBLIC	??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z	; SerializeElements<int>
EXTRN	?IsStoring@CArchive@@QBEHXZ:NEAR		; CArchive::IsStoring
EXTRN	?ReadCount@CArchive@@QAEKXZ:NEAR		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:NEAR		; CArchive::WriteCount
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nOldSize$190748 = -8					; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z PROC NEAR	; CArray<int,int &>::Serialize, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	ASSERT_VALID(this);

  00017	68 76 02 00 00	 push	 630			; 00000276H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:$SG190745
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 631  : 
; 632  : 	CObject::Serialize(ar);

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 633  : 	if (ar.IsStoring())

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00039	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0003e	85 c0		 test	 eax, eax
  00040	74 11		 je	 SHORT $L190746

; 634  : 	{
; 635  : 		ar.WriteCount(m_nSize);

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0004c	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 636  : 	}
; 637  : 	else

  00051	eb 19		 jmp	 SHORT $L190747
$L190746:

; 638  : 	{
; 639  : 		DWORD_PTR nOldSize = ar.ReadCount();

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00056	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  0005b	89 45 f8	 mov	 DWORD PTR _nOldSize$190748[ebp], eax

; 640  : 		SetSize(nOldSize, -1);

  0005e	6a ff		 push	 -1
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _nOldSize$190748[ebp]
  00063	51		 push	 ecx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HAAH@@QAEXHH@Z ; CArray<int,int &>::SetSize
$L190747:

; 641  : 	}
; 642  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00079	52		 push	 edx
  0007a	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ; SerializeElements<int>

; 643  : }

  00083	83 c4 08	 add	 esp, 8
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z ENDP	; CArray<int,int &>::Serialize
_TEXT	ENDS
PUBLIC	??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z	; DumpElements<int>
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:NEAR	; CObject::Dump
EXTRN	?GetDepth@CDumpContext@@QBEHXZ:NEAR		; CDumpContext::GetDepth
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:NEAR		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:NEAR		; CDumpContext::operator<<
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CArray<int,int &>::Dump, COMDAT
; _this$ = ecx

; 648  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 649  : 	CObject::Dump(dc);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 650  : 
; 651  : 	dc << "with " << m_nSize << " elements";

  0001a	68 00 00 00 00	 push	 OFFSET FLAT:$SG190762
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00025	52		 push	 edx
  00026	68 00 00 00 00	 push	 OFFSET FLAT:$SG190761
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002e	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00033	8b c8		 mov	 ecx, eax
  00035	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  0003a	8b c8		 mov	 ecx, eax
  0003c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 652  : 	if (dc.GetDepth() > 0)

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00044	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00049	85 c0		 test	 eax, eax
  0004b	7e 24		 jle	 SHORT $L190763

; 653  : 	{
; 654  : 		dc << "\n";

  0004d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190764
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00055	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 655  : 		DumpElements<TYPE>(dc, m_pData, m_nSize);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	50		 push	 eax
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z ; DumpElements<int>
$L190763:

; 656  : 	}
; 657  : 
; 658  : 	dc << "\n";

  00071	68 00 00 00 00	 push	 OFFSET FLAT:$SG190771
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00079	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 659  : }

  0007e	83 c4 04	 add	 esp, 4
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?Dump@?$CArray@HAAH@@UBEXAAVCDumpContext@@@Z ENDP	; CArray<int,int &>::Dump
_TEXT	ENDS
EXTRN	?AssertValid@CObject@@UBEXXZ:NEAR		; CObject::AssertValid
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:NEAR		; AfxIsValidAddress
; Function compile flags: /Odt /RTCsu
;	COMDAT ?AssertValid@?$CArray@HAAH@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CArray@HAAH@@UBEXXZ PROC NEAR		; CArray<int,int &>::AssertValid, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 664  : 	CObject::AssertValid();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 665  : 
; 666  : 	if (m_pData == NULL)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001d	75 3f		 jne	 SHORT $L190777

; 667  : 	{
; 668  : 		ASSERT(m_nSize == 0);

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00026	74 14		 je	 SHORT $L193182
  00028	68 9c 02 00 00	 push	 668			; 0000029cH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190779
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $L193182
  0003b	cc		 int	 3
$L193182:

; 669  : 		ASSERT(m_nMaxSize == 0);

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $L193183
  00045	68 9d 02 00 00	 push	 669			; 0000029dH
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:$SG190781
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $L193183
  00058	cc		 int	 3
$L193183:

; 670  : 	}
; 671  : 	else

  00059	e9 8c 00 00 00	 jmp	 $L190776
$L190777:

; 672  : 	{
; 673  : 		ASSERT(m_nSize >= 0);

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00065	7d 14		 jge	 SHORT $L193184
  00067	68 a1 02 00 00	 push	 673			; 000002a1H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:$SG190784
  00071	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00076	85 c0		 test	 eax, eax
  00078	74 01		 je	 SHORT $L193184
  0007a	cc		 int	 3
$L193184:

; 674  : 		ASSERT(m_nMaxSize >= 0);

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00082	7d 14		 jge	 SHORT $L193185
  00084	68 a2 02 00 00	 push	 674			; 000002a2H
  00089	68 00 00 00 00	 push	 OFFSET FLAT:$SG190786
  0008e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00093	85 c0		 test	 eax, eax
  00095	74 01		 je	 SHORT $L193185
  00097	cc		 int	 3
$L193185:

; 675  : 		ASSERT(m_nSize <= m_nMaxSize);

  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a1	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  000a4	7e 14		 jle	 SHORT $L193186
  000a6	68 a3 02 00 00	 push	 675			; 000002a3H
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG190788
  000b0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b5	85 c0		 test	 eax, eax
  000b7	74 01		 je	 SHORT $L193186
  000b9	cc		 int	 3
$L193186:

; 676  : 		ASSERT(AfxIsValidAddress(m_pData, m_nMaxSize * sizeof(TYPE)));

  000ba	6a 01		 push	 1
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000c2	c1 e2 02	 shl	 edx, 2
  000c5	52		 push	 edx
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  000d2	85 c0		 test	 eax, eax
  000d4	75 14		 jne	 SHORT $L190776
  000d6	68 a4 02 00 00	 push	 676			; 000002a4H
  000db	68 00 00 00 00	 push	 OFFSET FLAT:$SG190791
  000e0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000e5	85 c0		 test	 eax, eax
  000e7	74 01		 je	 SHORT $L190776
  000e9	cc		 int	 3
$L190776:

; 677  : 	}
; 678  : }

  000ea	83 c4 04	 add	 esp, 4
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
?AssertValid@?$CArray@HAAH@@UBEXXZ ENDP			; CArray<int,int &>::AssertValid
_TEXT	ENDS
PUBLIC	?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z ; CArray<BCMenu *,BCMenu *>::Serialize
PUBLIC	?Dump@?$CArray@PAVBCMenu@@PAV1@@@UBEXAAVCDumpContext@@@Z ; CArray<BCMenu *,BCMenu *>::Dump
PUBLIC	?AssertValid@?$CArray@PAVBCMenu@@PAV1@@@UBEXXZ	; CArray<BCMenu *,BCMenu *>::AssertValid
PUBLIC	??_7?$CArray@PAVBCMenu@@PAV1@@@6B@		; CArray<BCMenu *,BCMenu *>::`vftable'
PUBLIC	??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z	; CArray<BCMenu *,BCMenu *>::`scalar deleting destructor'
PUBLIC	??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@		; CArray<BCMenu *,BCMenu *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8		; CArray<BCMenu *,BCMenu *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@PAVBCMenu@@PAV1@@@8		; CArray<BCMenu *,BCMenu *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@PAVBCMenu@@PAV1@@@8		; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8	; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z:NEAR	; CArray<BCMenu *,BCMenu *>::`vector deleting destructor'
;	COMDAT ??_7?$CArray@PAVBCMenu@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CArray@PAVBCMenu@@PAV1@@@6B@ DD FLAT:??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@ ; CArray<BCMenu *,BCMenu *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CArray@PAVBCMenu@@PAV1@@@UBEXXZ
	DD	FLAT:?Dump@?$CArray@PAVBCMenu@@PAV1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@ DD 00H		; CArray<BCMenu *,BCMenu *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8
	DD	FLAT:??_R3?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8
_DATA	SEGMENT
??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CArray<BCMenu *,BCMenu *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@PAVBCMenu@@PAV1@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CArray@PAVBCMenu@@PAV1@@@8 DD 00H		; CArray<BCMenu *,BCMenu *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CArray@PAVBCMenu@@PAV1@@@8 DD FLAT:??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8 ; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8 DD FLAT:??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8 ; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ PROC NEAR		; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@PAVBCMenu@@PAV1@@@6B@

; 350  : 	m_pData = NULL;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 351  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 352  : }

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c4 04	 add	 esp, 4
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ ENDP		; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ PROC NEAR	; CArray<BCMenu *,BCMenu *>::GetSize, COMDAT
; _this$ = ecx

; 272  : 	{ return m_nSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ ENDP		; CArray<BCMenu *,BCMenu *>::GetSize
_TEXT	ENDS
PUBLIC	?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::SetAtGrow
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::Add, COMDAT
; _this$ = ecx

; 334  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 335  : 		SetAtGrow(nIndex, newElement);

  00020	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00023	52		 push	 edx
  00024	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::SetAtGrow

; 336  : 		return nIndex; }

  00030	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ENDP	; CArray<BCMenu *,BCMenu *>::Add
_TEXT	ENDS
PUBLIC	?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::ElementAt
; Function compile flags: /Odt /RTCsu
;	COMDAT ??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::operator[], COMDAT
; _this$ = ecx

; 342  : 	{ return ElementAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::ElementAt
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ENDP	; CArray<BCMenu *,BCMenu *>::operator[]
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T193199 DD	0ffffffffH
	DD	FLAT:$L193195
$T193197 DD	019930520H
	DD	01H
	DD	FLAT:$T193199
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
$T193194 = -24						; size = 4
_i$190822 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ PROC NEAR		; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00030	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@PAVBCMenu@@PAV1@@@6B@
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 357  : 	ASSERT_VALID(this);

  00043	68 65 01 00 00	 push	 357			; 00000165H
  00048	68 00 00 00 00	 push	 OFFSET FLAT:$SG190820
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 358  : 
; 359  : 	if (m_pData != NULL)

  00056	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00059	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0005d	74 34		 je	 SHORT $L190819

; 360  : 	{
; 361  : 		for( int i = 0; i < m_nSize; i++ )

  0005f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$190822[ebp], 0
  00066	eb 09		 jmp	 SHORT $L190823
$L190824:
  00068	8b 45 ec	 mov	 eax, DWORD PTR _i$190822[ebp]
  0006b	83 c0 01	 add	 eax, 1
  0006e	89 45 ec	 mov	 DWORD PTR _i$190822[ebp], eax
$L190823:
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 55 ec	 mov	 edx, DWORD PTR _i$190822[ebp]
  00077	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0007a	7d 02		 jge	 SHORT $L190825

; 362  : 			(m_pData + i)->~TYPE();

  0007c	eb ea		 jmp	 SHORT $L190824
$L190825:

; 363  : 		delete[] (BYTE*)m_pData;

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	89 4d e8	 mov	 DWORD PTR $T193194[ebp], ecx
  00087	8b 55 e8	 mov	 edx, DWORD PTR $T193194[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00090	83 c4 04	 add	 esp, 4
$L190819:

; 364  : 	}
; 365  : }

  00093	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L193195:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193197
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ENDP		; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
PUBLIC	?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z	; CArray<BCMenu *,BCMenu *>::SetSize
PUBLIC	??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z ; SerializeElements<BCMenu *>
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nOldSize$190837 = -8					; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::Serialize, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	ASSERT_VALID(this);

  00017	68 76 02 00 00	 push	 630			; 00000276H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:$SG190834
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 631  : 
; 632  : 	CObject::Serialize(ar);

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 633  : 	if (ar.IsStoring())

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00039	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0003e	85 c0		 test	 eax, eax
  00040	74 11		 je	 SHORT $L190835

; 634  : 	{
; 635  : 		ar.WriteCount(m_nSize);

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0004c	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 636  : 	}
; 637  : 	else

  00051	eb 19		 jmp	 SHORT $L190836
$L190835:

; 638  : 	{
; 639  : 		DWORD_PTR nOldSize = ar.ReadCount();

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00056	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  0005b	89 45 f8	 mov	 DWORD PTR _nOldSize$190837[ebp], eax

; 640  : 		SetSize(nOldSize, -1);

  0005e	6a ff		 push	 -1
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _nOldSize$190837[ebp]
  00063	51		 push	 ecx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z ; CArray<BCMenu *,BCMenu *>::SetSize
$L190836:

; 641  : 	}
; 642  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00079	52		 push	 edx
  0007a	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z ; SerializeElements<BCMenu *>

; 643  : }

  00083	83 c4 08	 add	 esp, 8
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CArray<BCMenu *,BCMenu *>::Serialize
_TEXT	ENDS
PUBLIC	??$DumpElements@PAVBCMenu@@@@YGXAAVCDumpContext@@PBQAVBCMenu@@H@Z ; DumpElements<BCMenu *>
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Dump@?$CArray@PAVBCMenu@@PAV1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CArray@PAVBCMenu@@PAV1@@@UBEXAAVCDumpContext@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::Dump, COMDAT
; _this$ = ecx

; 648  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 649  : 	CObject::Dump(dc);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 650  : 
; 651  : 	dc << "with " << m_nSize << " elements";

  0001a	68 00 00 00 00	 push	 OFFSET FLAT:$SG190851
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00025	52		 push	 edx
  00026	68 00 00 00 00	 push	 OFFSET FLAT:$SG190850
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002e	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00033	8b c8		 mov	 ecx, eax
  00035	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  0003a	8b c8		 mov	 ecx, eax
  0003c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 652  : 	if (dc.GetDepth() > 0)

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00044	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00049	85 c0		 test	 eax, eax
  0004b	7e 24		 jle	 SHORT $L190852

; 653  : 	{
; 654  : 		dc << "\n";

  0004d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190853
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00055	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 655  : 		DumpElements<TYPE>(dc, m_pData, m_nSize);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	50		 push	 eax
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$DumpElements@PAVBCMenu@@@@YGXAAVCDumpContext@@PBQAVBCMenu@@H@Z ; DumpElements<BCMenu *>
$L190852:

; 656  : 	}
; 657  : 
; 658  : 	dc << "\n";

  00071	68 00 00 00 00	 push	 OFFSET FLAT:$SG190860
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00079	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 659  : }

  0007e	83 c4 04	 add	 esp, 4
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?Dump@?$CArray@PAVBCMenu@@PAV1@@@UBEXAAVCDumpContext@@@Z ENDP ; CArray<BCMenu *,BCMenu *>::Dump
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@PAVBCMenu@@PAV1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CArray@PAVBCMenu@@PAV1@@@UBEXXZ PROC NEAR ; CArray<BCMenu *,BCMenu *>::AssertValid, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 664  : 	CObject::AssertValid();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 665  : 
; 666  : 	if (m_pData == NULL)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001d	75 3f		 jne	 SHORT $L190866

; 667  : 	{
; 668  : 		ASSERT(m_nSize == 0);

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00026	74 14		 je	 SHORT $L193205
  00028	68 9c 02 00 00	 push	 668			; 0000029cH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190868
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $L193205
  0003b	cc		 int	 3
$L193205:

; 669  : 		ASSERT(m_nMaxSize == 0);

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $L193206
  00045	68 9d 02 00 00	 push	 669			; 0000029dH
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:$SG190870
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $L193206
  00058	cc		 int	 3
$L193206:

; 670  : 	}
; 671  : 	else

  00059	e9 8c 00 00 00	 jmp	 $L190865
$L190866:

; 672  : 	{
; 673  : 		ASSERT(m_nSize >= 0);

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00065	7d 14		 jge	 SHORT $L193207
  00067	68 a1 02 00 00	 push	 673			; 000002a1H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:$SG190873
  00071	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00076	85 c0		 test	 eax, eax
  00078	74 01		 je	 SHORT $L193207
  0007a	cc		 int	 3
$L193207:

; 674  : 		ASSERT(m_nMaxSize >= 0);

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00082	7d 14		 jge	 SHORT $L193208
  00084	68 a2 02 00 00	 push	 674			; 000002a2H
  00089	68 00 00 00 00	 push	 OFFSET FLAT:$SG190875
  0008e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00093	85 c0		 test	 eax, eax
  00095	74 01		 je	 SHORT $L193208
  00097	cc		 int	 3
$L193208:

; 675  : 		ASSERT(m_nSize <= m_nMaxSize);

  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a1	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  000a4	7e 14		 jle	 SHORT $L193209
  000a6	68 a3 02 00 00	 push	 675			; 000002a3H
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG190877
  000b0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b5	85 c0		 test	 eax, eax
  000b7	74 01		 je	 SHORT $L193209
  000b9	cc		 int	 3
$L193209:

; 676  : 		ASSERT(AfxIsValidAddress(m_pData, m_nMaxSize * sizeof(TYPE)));

  000ba	6a 01		 push	 1
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000c2	c1 e2 02	 shl	 edx, 2
  000c5	52		 push	 edx
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  000d2	85 c0		 test	 eax, eax
  000d4	75 14		 jne	 SHORT $L190865
  000d6	68 a4 02 00 00	 push	 676			; 000002a4H
  000db	68 00 00 00 00	 push	 OFFSET FLAT:$SG190880
  000e0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000e5	85 c0		 test	 eax, eax
  000e7	74 01		 je	 SHORT $L190865
  000e9	cc		 int	 3
$L190865:

; 677  : 	}
; 678  : }

  000ea	83 c4 04	 add	 esp, 4
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
?AssertValid@?$CArray@PAVBCMenu@@PAV1@@@UBEXXZ ENDP	; CArray<BCMenu *,BCMenu *>::AssertValid
_TEXT	ENDS
PUBLIC	?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z	; CArray<int,int>::Serialize
PUBLIC	?Dump@?$CArray@HH@@UBEXAAVCDumpContext@@@Z	; CArray<int,int>::Dump
PUBLIC	?AssertValid@?$CArray@HH@@UBEXXZ		; CArray<int,int>::AssertValid
PUBLIC	??_7?$CArray@HH@@6B@				; CArray<int,int>::`vftable'
PUBLIC	??_G?$CArray@HH@@UAEPAXI@Z			; CArray<int,int>::`scalar deleting destructor'
PUBLIC	??_R4?$CArray@HH@@6B@				; CArray<int,int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@HH@@@8				; CArray<int,int> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@HH@@8				; CArray<int,int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@HH@@8				; CArray<int,int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CArray@HH@@8			; CArray<int,int>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CArray@HH@@UAEPAXI@Z:NEAR			; CArray<int,int>::`vector deleting destructor'
;	COMDAT ??_7?$CArray@HH@@6B@
CONST	SEGMENT
??_7?$CArray@HH@@6B@ DD FLAT:??_R4?$CArray@HH@@6B@	; CArray<int,int>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@HH@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CArray@HH@@UBEXXZ
	DD	FLAT:?Dump@?$CArray@HH@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CArray@HH@@6B@
rdata$r	SEGMENT
??_R4?$CArray@HH@@6B@ DD 00H				; CArray<int,int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@HH@@@8
	DD	FLAT:??_R3?$CArray@HH@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@HH@@@8
_DATA	SEGMENT
??_R0?AV?$CArray@HH@@@8 DD FLAT:??_7type_info@@6B@	; CArray<int,int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@HH@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CArray@HH@@8
rdata$r	SEGMENT
??_R3?$CArray@HH@@8 DD 00H				; CArray<int,int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@HH@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HH@@8
rdata$r	SEGMENT
??_R2?$CArray@HH@@8 DD FLAT:??_R1A@?0A@A@?$CArray@HH@@8	; CArray<int,int>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HH@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CArray@HH@@8 DD FLAT:??_R0?AV?$CArray@HH@@@8 ; CArray<int,int>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt /RTCsu
rdata$r	ENDS
;	COMDAT ??0?$CArray@HH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CArray@HH@@QAE@XZ PROC NEAR			; CArray<int,int>::CArray<int,int>, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HH@@6B@

; 350  : 	m_pData = NULL;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 351  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 352  : }

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c4 04	 add	 esp, 4
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??0?$CArray@HH@@QAE@XZ ENDP				; CArray<int,int>::CArray<int,int>
_TEXT	ENDS
PUBLIC	??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:NEAR	; AfxThrowInvalidArgException
;	COMDAT ??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
CONST	SEGMENT
??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'D:\Pr'
	DB	'ogram Files (x86)\Microsoft Visual Studio .NET 2003\Vc7\atlmf'
	DB	'c\include\afxtempl.h', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetAt@?$CArray@HH@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CArray@HH@@QAEAAHH@Z PROC NEAR			; CArray<int,int>::GetAt, COMDAT
; _this$ = ecx

; 287  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $L193214
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001d	7c 14		 jl	 SHORT $L193215
$L193214:
  0001f	68 20 01 00 00	 push	 288			; 00000120H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L193215
  00032	cc		 int	 3
$L193215:

; 289  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00033	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00037	7c 19		 jl	 SHORT $L190894
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	7d 0e		 jge	 SHORT $L190894

; 290  : 		return m_pData[nIndex]; 

  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0004d	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00050	eb 05		 jmp	 SHORT $L193213
$L190894:

; 291  : 	AfxThrowInvalidArgException();		

  00052	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L193213:

; 292  : }

  00057	83 c4 04	 add	 esp, 4
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?GetAt@?$CArray@HH@@QAEAAHH@Z ENDP			; CArray<int,int>::GetAt
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAt@?$CArray@HH@@QAEXHH@Z PROC NEAR			; CArray<int,int>::SetAt, COMDAT
; _this$ = ecx

; 303  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $L193217
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001d	7c 14		 jl	 SHORT $L193218
$L193217:
  0001f	68 30 01 00 00	 push	 304			; 00000130H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L193218
  00032	cc		 int	 3
$L193218:

; 305  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00033	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00037	7c 1c		 jl	 SHORT $L190903
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	7d 11		 jge	 SHORT $L190903

; 306  : 		m_pData[nIndex] = newElement; 

  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0004d	8b 55 0c	 mov	 edx, DWORD PTR _newElement$[ebp]
  00050	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 307  : 	else

  00053	eb 05		 jmp	 SHORT $L193216
$L190903:

; 308  : 		AfxThrowInvalidArgException();		

  00055	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L193216:

; 309  : }

  0005a	83 c4 04	 add	 esp, 4
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?SetAt@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::SetAt
_TEXT	ENDS
PUBLIC	?SetAtGrow@?$CArray@HH@@QAEXHH@Z		; CArray<int,int>::SetAtGrow
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Add@?$CArray@HH@@QAEHH@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CArray@HH@@QAEHH@Z PROC NEAR			; CArray<int,int>::Add, COMDAT
; _this$ = ecx

; 334  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 335  : 		SetAtGrow(nIndex, newElement);

  00020	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00023	52		 push	 edx
  00024	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetAtGrow@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetAtGrow

; 336  : 		return nIndex; }

  00030	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?Add@?$CArray@HH@@QAEHH@Z ENDP				; CArray<int,int>::Add
_TEXT	ENDS
EXTRN	__imp__memmove:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?RemoveAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
_i$190929 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CArray@HH@@QAEXHH@Z PROC NEAR		; CArray<int,int>::RemoveAt, COMDAT
; _this$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 	ASSERT_VALID(this);

  0001f	68 4e 02 00 00	 push	 590			; 0000024eH
  00024	68 00 00 00 00	 push	 OFFSET FLAT:$SG190919
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 591  : 	ASSERT(nIndex >= 0);

  00032	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00036	7d 14		 jge	 SHORT $L193221
  00038	68 4f 02 00 00	 push	 591			; 0000024fH
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190921
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $L193221
  0004b	cc		 int	 3
$L193221:

; 592  : 	ASSERT(nCount >= 0);

  0004c	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00050	7d 14		 jge	 SHORT $L193222
  00052	68 50 02 00 00	 push	 592			; 00000250H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:$SG190923
  0005c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00061	85 c0		 test	 eax, eax
  00063	74 01		 je	 SHORT $L193222
  00065	cc		 int	 3
$L193222:

; 593  : 	ASSERT(nIndex + nCount <= m_nSize);

  00066	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00069	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00072	7e 14		 jle	 SHORT $L193223
  00074	68 51 02 00 00	 push	 593			; 00000251H
  00079	68 00 00 00 00	 push	 OFFSET FLAT:$SG190925
  0007e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00083	85 c0		 test	 eax, eax
  00085	74 01		 je	 SHORT $L193223
  00087	cc		 int	 3
$L193223:

; 594  : 
; 595  : 	if(nIndex < 0 || nCount < 0 || (nIndex + nCount > m_nSize))

  00088	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0008c	7c 14		 jl	 SHORT $L190927
  0008e	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00092	7c 0e		 jl	 SHORT $L190927
  00094	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00097	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000a0	7e 05		 jle	 SHORT $L190926
$L190927:

; 596  : 		AfxThrowInvalidArgException();

  000a2	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L190926:

; 597  : 
; 598  : 	// just remove a range
; 599  : 	INT_PTR nMoveCount = m_nSize - (nIndex + nCount);

  000a7	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  000aa	03 55 0c	 add	 edx, DWORD PTR _nCount$[ebp]
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b3	2b ca		 sub	 ecx, edx
  000b5	89 4d f8	 mov	 DWORD PTR _nMoveCount$[ebp], ecx

; 600  : 	for( int i = 0; i < nCount; i++ )

  000b8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$190929[ebp], 0
  000bf	eb 09		 jmp	 SHORT $L190930
$L190931:
  000c1	8b 55 f4	 mov	 edx, DWORD PTR _i$190929[ebp]
  000c4	83 c2 01	 add	 edx, 1
  000c7	89 55 f4	 mov	 DWORD PTR _i$190929[ebp], edx
$L190930:
  000ca	8b 45 f4	 mov	 eax, DWORD PTR _i$190929[ebp]
  000cd	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000d0	7d 02		 jge	 SHORT $L190932

; 601  : 		(m_pData + nIndex + i)->~TYPE();

  000d2	eb ed		 jmp	 SHORT $L190931
$L190932:

; 602  : 	if (nMoveCount)

  000d4	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000d8	74 39		 je	 SHORT $L190933

; 603  : 		memmove( m_pData + nIndex, m_pData + nIndex + nCount,
; 604  : 			(size_t)nMoveCount * sizeof(TYPE));

  000da	8b 4d f8	 mov	 ecx, DWORD PTR _nMoveCount$[ebp]
  000dd	c1 e1 02	 shl	 ecx, 2
  000e0	8b f4		 mov	 esi, esp
  000e2	51		 push	 ecx
  000e3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  000ec	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000ef	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  000f2	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000f5	51		 push	 ecx
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  000ff	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00102	52		 push	 edx
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$L190933:

; 605  : 	m_nSize -= nCount;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  0011c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L193220:

; 606  : }

  00122	5e		 pop	 esi
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 08 00	 ret	 8
?RemoveAt@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::RemoveAt
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T193230 DD	0ffffffffH
	DD	FLAT:$L193226
$T193228 DD	019930520H
	DD	01H
	DD	FLAT:$T193230
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CArray@HH@@UAE@XZ
_TEXT	SEGMENT
$T193225 = -24						; size = 4
_i$190943 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CArray@HH@@UAE@XZ PROC NEAR			; CArray<int,int>::~CArray<int,int>, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CArray@HH@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00022	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00029	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00030	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HH@@6B@
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 357  : 	ASSERT_VALID(this);

  00043	68 65 01 00 00	 push	 357			; 00000165H
  00048	68 00 00 00 00	 push	 OFFSET FLAT:$SG190941
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 358  : 
; 359  : 	if (m_pData != NULL)

  00056	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00059	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0005d	74 34		 je	 SHORT $L190940

; 360  : 	{
; 361  : 		for( int i = 0; i < m_nSize; i++ )

  0005f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$190943[ebp], 0
  00066	eb 09		 jmp	 SHORT $L190944
$L190945:
  00068	8b 45 ec	 mov	 eax, DWORD PTR _i$190943[ebp]
  0006b	83 c0 01	 add	 eax, 1
  0006e	89 45 ec	 mov	 DWORD PTR _i$190943[ebp], eax
$L190944:
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 55 ec	 mov	 edx, DWORD PTR _i$190943[ebp]
  00077	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0007a	7d 02		 jge	 SHORT $L190946

; 362  : 			(m_pData + i)->~TYPE();

  0007c	eb ea		 jmp	 SHORT $L190945
$L190946:

; 363  : 		delete[] (BYTE*)m_pData;

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	89 4d e8	 mov	 DWORD PTR $T193225[ebp], ecx
  00087	8b 55 e8	 mov	 edx, DWORD PTR $T193225[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00090	83 c4 04	 add	 esp, 4
$L190940:

; 364  : 	}
; 365  : }

  00093	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L193226:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1?$CArray@HH@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193228
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1?$CArray@HH@@UAE@XZ ENDP				; CArray<int,int>::~CArray<int,int>
PUBLIC	?SetSize@?$CArray@HH@@QAEXHH@Z			; CArray<int,int>::SetSize
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nOldSize$190958 = -8					; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z PROC NEAR	; CArray<int,int>::Serialize, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	ASSERT_VALID(this);

  00017	68 76 02 00 00	 push	 630			; 00000276H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:$SG190955
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 631  : 
; 632  : 	CObject::Serialize(ar);

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 633  : 	if (ar.IsStoring())

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00039	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0003e	85 c0		 test	 eax, eax
  00040	74 11		 je	 SHORT $L190956

; 634  : 	{
; 635  : 		ar.WriteCount(m_nSize);

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0004c	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 636  : 	}
; 637  : 	else

  00051	eb 19		 jmp	 SHORT $L190957
$L190956:

; 638  : 	{
; 639  : 		DWORD_PTR nOldSize = ar.ReadCount();

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00056	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  0005b	89 45 f8	 mov	 DWORD PTR _nOldSize$190958[ebp], eax

; 640  : 		SetSize(nOldSize, -1);

  0005e	6a ff		 push	 -1
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _nOldSize$190958[ebp]
  00063	51		 push	 ecx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetSize
$L190957:

; 641  : 	}
; 642  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00079	52		 push	 edx
  0007a	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ; SerializeElements<int>

; 643  : }

  00083	83 c4 08	 add	 esp, 8
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z ENDP	; CArray<int,int>::Serialize
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Dump@?$CArray@HH@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CArray@HH@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CArray<int,int>::Dump, COMDAT
; _this$ = ecx

; 648  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 649  : 	CObject::Dump(dc);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 650  : 
; 651  : 	dc << "with " << m_nSize << " elements";

  0001a	68 00 00 00 00	 push	 OFFSET FLAT:$SG190966
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00025	52		 push	 edx
  00026	68 00 00 00 00	 push	 OFFSET FLAT:$SG190965
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002e	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00033	8b c8		 mov	 ecx, eax
  00035	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  0003a	8b c8		 mov	 ecx, eax
  0003c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 652  : 	if (dc.GetDepth() > 0)

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00044	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00049	85 c0		 test	 eax, eax
  0004b	7e 24		 jle	 SHORT $L190967

; 653  : 	{
; 654  : 		dc << "\n";

  0004d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190968
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00055	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 655  : 		DumpElements<TYPE>(dc, m_pData, m_nSize);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	50		 push	 eax
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z ; DumpElements<int>
$L190967:

; 656  : 	}
; 657  : 
; 658  : 	dc << "\n";

  00071	68 00 00 00 00	 push	 OFFSET FLAT:$SG190969
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00079	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 659  : }

  0007e	83 c4 04	 add	 esp, 4
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?Dump@?$CArray@HH@@UBEXAAVCDumpContext@@@Z ENDP		; CArray<int,int>::Dump
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?AssertValid@?$CArray@HH@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CArray@HH@@UBEXXZ PROC NEAR		; CArray<int,int>::AssertValid, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 664  : 	CObject::AssertValid();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 665  : 
; 666  : 	if (m_pData == NULL)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001d	75 3f		 jne	 SHORT $L190975

; 667  : 	{
; 668  : 		ASSERT(m_nSize == 0);

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00026	74 14		 je	 SHORT $L193236
  00028	68 9c 02 00 00	 push	 668			; 0000029cH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:$SG190977
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $L193236
  0003b	cc		 int	 3
$L193236:

; 669  : 		ASSERT(m_nMaxSize == 0);

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $L193237
  00045	68 9d 02 00 00	 push	 669			; 0000029dH
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:$SG190979
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $L193237
  00058	cc		 int	 3
$L193237:

; 670  : 	}
; 671  : 	else

  00059	e9 8c 00 00 00	 jmp	 $L190974
$L190975:

; 672  : 	{
; 673  : 		ASSERT(m_nSize >= 0);

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00065	7d 14		 jge	 SHORT $L193238
  00067	68 a1 02 00 00	 push	 673			; 000002a1H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:$SG190982
  00071	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00076	85 c0		 test	 eax, eax
  00078	74 01		 je	 SHORT $L193238
  0007a	cc		 int	 3
$L193238:

; 674  : 		ASSERT(m_nMaxSize >= 0);

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00082	7d 14		 jge	 SHORT $L193239
  00084	68 a2 02 00 00	 push	 674			; 000002a2H
  00089	68 00 00 00 00	 push	 OFFSET FLAT:$SG190984
  0008e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00093	85 c0		 test	 eax, eax
  00095	74 01		 je	 SHORT $L193239
  00097	cc		 int	 3
$L193239:

; 675  : 		ASSERT(m_nSize <= m_nMaxSize);

  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a1	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  000a4	7e 14		 jle	 SHORT $L193240
  000a6	68 a3 02 00 00	 push	 675			; 000002a3H
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG190986
  000b0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b5	85 c0		 test	 eax, eax
  000b7	74 01		 je	 SHORT $L193240
  000b9	cc		 int	 3
$L193240:

; 676  : 		ASSERT(AfxIsValidAddress(m_pData, m_nMaxSize * sizeof(TYPE)));

  000ba	6a 01		 push	 1
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000c2	c1 e2 02	 shl	 edx, 2
  000c5	52		 push	 edx
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  000d2	85 c0		 test	 eax, eax
  000d4	75 14		 jne	 SHORT $L190974
  000d6	68 a4 02 00 00	 push	 676			; 000002a4H
  000db	68 00 00 00 00	 push	 OFFSET FLAT:$SG190989
  000e0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000e5	85 c0		 test	 eax, eax
  000e7	74 01		 je	 SHORT $L190974
  000e9	cc		 int	 3
$L190974:

; 677  : 	}
; 678  : }

  000ea	83 c4 04	 add	 esp, 4
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
?AssertValid@?$CArray@HH@@UBEXXZ ENDP			; CArray<int,int>::AssertValid
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CArray@HAAH@@UAEPAXI@Z PROC NEAR			; CArray<int,int &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L191006
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L191006:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$CArray@HAAH@@UAEPAXI@Z ENDP			; CArray<int,int &>::`scalar deleting destructor'
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z PROC NEAR	; CArray<BCMenu *,BCMenu *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L191009
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L191009:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z ENDP		; CArray<BCMenu *,BCMenu *>::`scalar deleting destructor'
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HH@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CArray@HH@@UAEPAXI@Z PROC NEAR			; CArray<int,int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CArray@HH@@UAE@XZ	; CArray<int,int>::~CArray<int,int>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 09		 je	 SHORT $L191012
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L191012:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$CArray@HH@@UAEPAXI@Z ENDP				; CArray<int,int>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
; Function compile flags: /Odt /RTCsu
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT
tv192 = -76						; size = 4
tv193 = -72						; size = 4
tv130 = -68						; size = 4
$T193263 = -64						; size = 4
$T193262 = -60						; size = 4
$T193260 = -56						; size = 4
$T193253 = -52						; size = 4
$T193252 = -48						; size = 4
$T193251 = -44						; size = 4
$T193247 = -40						; size = 4
_i$191098 = -36						; size = 4
_pNewData$191085 = -32					; size = 4
_nNewMax$191076 = -28					; size = 4
_i$191070 = -24						; size = 4
_i$191061 = -20						; size = 4
_i$191048 = -16						; size = 4
_nAllocSize$191038 = -12				; size = 4
_i$191027 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@HAAH@@QAEXHH@Z PROC NEAR		; CArray<int,int &>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);

  0001b	68 72 01 00 00	 push	 370			; 00000172H
  00020	68 00 00 00 00	 push	 OFFSET FLAT:$SG191020
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 371  : 	ASSERT(nNewSize >= 0);

  0002e	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00032	7d 14		 jge	 SHORT $L193246
  00034	68 73 01 00 00	 push	 371			; 00000173H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:$SG191022
  0003e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00043	85 c0		 test	 eax, eax
  00045	74 01		 je	 SHORT $L193246
  00047	cc		 int	 3
$L193246:

; 372  : 
; 373  : 	if(nNewSize < 0 )

  00048	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0004c	7d 05		 jge	 SHORT $L191023

; 374  : 		AfxThrowInvalidArgException();

  0004e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191023:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00053	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00057	7c 09		 jl	 SHORT $L191024

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  0005f	89 42 10	 mov	 DWORD PTR [edx+16], eax
$L191024:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00062	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00066	75 60		 jne	 SHORT $L191025

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0006f	74 3e		 je	 SHORT $L191026

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00071	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$191027[ebp], 0
  00078	eb 09		 jmp	 SHORT $L191028
$L191029:
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _i$191027[ebp]
  0007d	83 c2 01	 add	 edx, 1
  00080	89 55 f8	 mov	 DWORD PTR _i$191027[ebp], edx
$L191028:
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _i$191027[ebp]
  00089	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008c	7d 02		 jge	 SHORT $L191030

; 385  : 				(m_pData + i)->~TYPE();

  0008e	eb ea		 jmp	 SHORT $L191029
$L191030:

; 386  : 			delete[] (BYTE*)m_pData;

  00090	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00096	89 45 d8	 mov	 DWORD PTR $T193247[ebp], eax
  00099	8b 4d d8	 mov	 ecx, DWORD PTR $T193247[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a2	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L191026:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  000c3	e9 45 03 00 00	 jmp	 $L193245
$L191025:
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000cf	0f 85 c9 00 00
	00		 jne	 $L191034

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow

  000d5	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _nNewSize$[ebp], 1073741823 ; 3fffffffH
  000dc	76 14		 jbe	 SHORT $L193248
  000de	68 8c 01 00 00	 push	 396			; 0000018cH
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:$SG191037
  000e8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ed	85 c0		 test	 eax, eax
  000ef	74 01		 je	 SHORT $L193248
  000f1	cc		 int	 3
$L193248:

; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  000f8	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  000fb	7e 08		 jle	 SHORT $L193249
  000fd	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00100	89 45 bc	 mov	 DWORD PTR tv130[ebp], eax
  00103	eb 09		 jmp	 SHORT $L193250
$L193249:
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010b	89 55 bc	 mov	 DWORD PTR tv130[ebp], edx
$L193250:
  0010e	8b 45 bc	 mov	 eax, DWORD PTR tv130[ebp]
  00111	89 45 f4	 mov	 DWORD PTR _nAllocSize$191038[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  00114	68 8f 01 00 00	 push	 399			; 0000018fH
  00119	68 00 00 00 00	 push	 OFFSET FLAT:$SG191044
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191038[ebp]
  00121	c1 e1 02	 shl	 ecx, 2
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	89 45 d4	 mov	 DWORD PTR $T193251[ebp], eax
  00130	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00133	8b 45 d4	 mov	 eax, DWORD PTR $T193251[ebp]
  00136	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  00139	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191038[ebp]
  0013c	c1 e1 02	 shl	 ecx, 2
  0013f	51		 push	 ecx
  00140	6a 00		 push	 0
  00142	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00145	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _memset
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  00151	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$191048[ebp], 0
  00158	eb 09		 jmp	 SHORT $L191049
$L191050:
  0015a	8b 4d f0	 mov	 ecx, DWORD PTR _i$191048[ebp]
  0015d	83 c1 01	 add	 ecx, 1
  00160	89 4d f0	 mov	 DWORD PTR _i$191048[ebp], ecx
$L191049:
  00163	8b 55 f0	 mov	 edx, DWORD PTR _i$191048[ebp]
  00166	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  00169	7d 1c		 jge	 SHORT $L191051

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  0016b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00171	8b 55 f0	 mov	 edx, DWORD PTR _i$191048[ebp]
  00174	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00177	50		 push	 eax
  00178	6a 04		 push	 4
  0017a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0017f	83 c4 08	 add	 esp, 8
  00182	89 45 d0	 mov	 DWORD PTR $T193252[ebp], eax
  00185	eb d3		 jmp	 SHORT $L191050
$L191051:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0018d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 407  : 		m_nMaxSize = nAllocSize;

  00190	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191038[ebp]
  00196	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  00199	e9 6f 02 00 00	 jmp	 $L193245
$L191034:
  0019e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  001a4	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  001a7	0f 8f b4 00 00
	00		 jg	 $L191056

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001b3	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  001b6	7e 6e		 jle	 SHORT $L191057

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  001b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  001be	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  001c1	c1 e1 02	 shl	 ecx, 2
  001c4	51		 push	 ecx
  001c5	6a 00		 push	 0
  001c7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d3	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _memset
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  001df	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$191061[ebp], 0
  001e6	eb 09		 jmp	 SHORT $L191062
$L191063:
  001e8	8b 4d ec	 mov	 ecx, DWORD PTR _i$191061[ebp]
  001eb	83 c1 01	 add	 ecx, 1
  001ee	89 4d ec	 mov	 DWORD PTR _i$191061[ebp], ecx
$L191062:
  001f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f4	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  001f7	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  001fa	39 45 ec	 cmp	 DWORD PTR _i$191061[ebp], eax
  001fd	7d 25		 jge	 SHORT $L191064

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00202	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00205	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00208	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0020b	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0020e	8b 45 ec	 mov	 eax, DWORD PTR _i$191061[ebp]
  00211	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00214	51		 push	 ecx
  00215	6a 04		 push	 4
  00217	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0021c	83 c4 08	 add	 esp, 8
  0021f	89 45 cc	 mov	 DWORD PTR $T193253[ebp], eax
  00222	eb c4		 jmp	 SHORT $L191063
$L191064:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  00224	eb 2d		 jmp	 SHORT $L191068
$L191057:
  00226	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00229	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0022c	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  0022f	7e 22		 jle	 SHORT $L191068

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  00231	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$191070[ebp], 0
  00238	eb 09		 jmp	 SHORT $L191071
$L191072:
  0023a	8b 4d e8	 mov	 ecx, DWORD PTR _i$191070[ebp]
  0023d	83 c1 01	 add	 ecx, 1
  00240	89 4d e8	 mov	 DWORD PTR _i$191070[ebp], ecx
$L191071:
  00243	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00246	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00249	2b 45 08	 sub	 eax, DWORD PTR _nNewSize$[ebp]
  0024c	39 45 e8	 cmp	 DWORD PTR _i$191070[ebp], eax
  0024f	7d 02		 jge	 SHORT $L191068

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  00251	eb e7		 jmp	 SHORT $L191072
$L191068:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  00253	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00256	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00259	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 429  : 	}
; 430  : 	else

  0025c	e9 ac 01 00 00	 jmp	 $L193245
$L191056:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  00261	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00264	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00267	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx

; 434  : 		if (nGrowBy == 0)

  0026a	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  0026e	75 45		 jne	 SHORT $L191075

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  00270	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00273	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00276	99		 cdq
  00277	83 e2 07	 and	 edx, 7
  0027a	03 c2		 add	 eax, edx
  0027c	c1 f8 03	 sar	 eax, 3
  0027f	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  00282	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  00286	7d 09		 jge	 SHORT $L193256
  00288	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv193[ebp], 4
  0028f	eb 1e		 jmp	 SHORT $L193257
$L193256:
  00291	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00298	7e 09		 jle	 SHORT $L193254
  0029a	c7 45 b4 00 04
	00 00		 mov	 DWORD PTR tv192[ebp], 1024 ; 00000400H
  002a1	eb 06		 jmp	 SHORT $L193255
$L193254:
  002a3	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  002a6	89 45 b4	 mov	 DWORD PTR tv192[ebp], eax
$L193255:
  002a9	8b 4d b4	 mov	 ecx, DWORD PTR tv192[ebp]
  002ac	89 4d b8	 mov	 DWORD PTR tv193[ebp], ecx
$L193257:
  002af	8b 55 b8	 mov	 edx, DWORD PTR tv193[ebp]
  002b2	89 55 0c	 mov	 DWORD PTR _nGrowBy$[ebp], edx
$L191075:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  002b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002bb	03 4d 0c	 add	 ecx, DWORD PTR _nGrowBy$[ebp]
  002be	39 4d 08	 cmp	 DWORD PTR _nNewSize$[ebp], ecx
  002c1	7d 0e		 jge	 SHORT $L191077

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  002c3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002c9	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  002cc	89 45 e4	 mov	 DWORD PTR _nNewMax$191076[ebp], eax

; 444  : 		else

  002cf	eb 06		 jmp	 SHORT $L191078
$L191077:

; 445  : 			nNewMax = nNewSize;  // no slush

  002d1	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002d4	89 4d e4	 mov	 DWORD PTR _nNewMax$191076[ebp], ecx
$L191078:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around

  002d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002da	8b 45 e4	 mov	 eax, DWORD PTR _nNewMax$191076[ebp]
  002dd	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  002e0	7d 14		 jge	 SHORT $L193258
  002e2	68 bf 01 00 00	 push	 447			; 000001bfH
  002e7	68 00 00 00 00	 push	 OFFSET FLAT:$SG191080
  002ec	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  002f1	85 c0		 test	 eax, eax
  002f3	74 01		 je	 SHORT $L193258
  002f5	cc		 int	 3
$L193258:

; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  002f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002f9	8b 45 e4	 mov	 eax, DWORD PTR _nNewMax$191076[ebp]
  002fc	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  002ff	7d 05		 jge	 SHORT $L191081

; 450  : 			AfxThrowInvalidArgException();

  00301	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191081:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow

  00306	81 7d e4 ff ff
	ff 3f		 cmp	 DWORD PTR _nNewMax$191076[ebp], 1073741823 ; 3fffffffH
  0030d	76 14		 jbe	 SHORT $L193259
  0030f	68 c5 01 00 00	 push	 453			; 000001c5H
  00314	68 00 00 00 00	 push	 OFFSET FLAT:$SG191084
  00319	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0031e	85 c0		 test	 eax, eax
  00320	74 01		 je	 SHORT $L193259
  00322	cc		 int	 3
$L193259:

; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  00323	8b 55 e4	 mov	 edx, DWORD PTR _nNewMax$191076[ebp]
  00326	c1 e2 02	 shl	 edx, 2
  00329	52		 push	 edx
  0032a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0032f	83 c4 04	 add	 esp, 4
  00332	89 45 c8	 mov	 DWORD PTR $T193260[ebp], eax
  00335	8b 45 c8	 mov	 eax, DWORD PTR $T193260[ebp]
  00338	89 45 e0	 mov	 DWORD PTR _pNewData$191085[ebp], eax

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  0033b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00341	c1 e2 02	 shl	 edx, 2
  00344	52		 push	 edx
  00345	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00348	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0034b	51		 push	 ecx
  0034c	8b 55 e0	 mov	 edx, DWORD PTR _pNewData$191085[ebp]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _memcpy
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);

  00358	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0035b	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0035e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00361	7f 14		 jg	 SHORT $L193261
  00363	68 cd 01 00 00	 push	 461			; 000001cdH
  00368	68 00 00 00 00	 push	 OFFSET FLAT:$SG191094
  0036d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00372	85 c0		 test	 eax, eax
  00374	74 01		 je	 SHORT $L193261
  00376	cc		 int	 3
$L193261:

; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00377	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037a	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0037d	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00380	c1 e1 02	 shl	 ecx, 2
  00383	51		 push	 ecx
  00384	6a 00		 push	 0
  00386	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00389	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0038c	8b 4d e0	 mov	 ecx, DWORD PTR _pNewData$191085[ebp]
  0038f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00392	52		 push	 edx
  00393	e8 00 00 00 00	 call	 _memset
  00398	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  0039b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$191098[ebp], 0
  003a2	eb 09		 jmp	 SHORT $L191099
$L191100:
  003a4	8b 45 dc	 mov	 eax, DWORD PTR _i$191098[ebp]
  003a7	83 c0 01	 add	 eax, 1
  003aa	89 45 dc	 mov	 DWORD PTR _i$191098[ebp], eax
$L191099:
  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  003b3	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  003b6	39 55 dc	 cmp	 DWORD PTR _i$191098[ebp], edx
  003b9	7d 22		 jge	 SHORT $L191101

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  003bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003be	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003c1	8b 55 e0	 mov	 edx, DWORD PTR _pNewData$191085[ebp]
  003c4	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  003c7	8b 4d dc	 mov	 ecx, DWORD PTR _i$191098[ebp]
  003ca	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  003cd	52		 push	 edx
  003ce	6a 04		 push	 4
  003d0	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  003d5	83 c4 08	 add	 esp, 8
  003d8	89 45 c4	 mov	 DWORD PTR $T193262[ebp], eax
  003db	eb c7		 jmp	 SHORT $L191100
$L191101:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  003dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003e3	89 4d c0	 mov	 DWORD PTR $T193263[ebp], ecx
  003e6	8b 55 c0	 mov	 edx, DWORD PTR $T193263[ebp]
  003e9	52		 push	 edx
  003ea	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003ef	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  003f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f5	8b 4d e0	 mov	 ecx, DWORD PTR _pNewData$191085[ebp]
  003f8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 472  : 		m_nSize = nNewSize;

  003fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003fe	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00401	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 473  : 		m_nMaxSize = nNewMax;

  00404	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00407	8b 55 e4	 mov	 edx, DWORD PTR _nNewMax$191076[ebp]
  0040a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
$L193245:

; 474  : 	}
; 475  : }

  0040d	5f		 pop	 edi
  0040e	83 c4 4c	 add	 esp, 76			; 0000004cH
  00411	3b ec		 cmp	 ebp, esp
  00413	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00418	8b e5		 mov	 esp, ebp
  0041a	5d		 pop	 ebp
  0041b	c2 08 00	 ret	 8
?SetSize@?$CArray@HAAH@@QAEXHH@Z ENDP			; CArray<int,int &>::SetSize
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odt /RTCsu
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CArray@HAAH@@QAEAAHH@Z PROC NEAR		; CArray<int,int &>::ElementAt, COMDAT
; _this$ = ecx

; 320  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 321  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $L193266
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001d	7c 14		 jl	 SHORT $L193267
$L193266:
  0001f	68 41 01 00 00	 push	 321			; 00000141H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L193267
  00032	cc		 int	 3
$L193267:

; 322  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00033	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00037	7c 19		 jl	 SHORT $L191114
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	7d 0e		 jge	 SHORT $L191114

; 323  : 		return m_pData[nIndex]; 

  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0004d	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00050	eb 05		 jmp	 SHORT $L193265
$L191114:

; 324  : 	AfxThrowInvalidArgException();		

  00052	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L193265:

; 325  : }

  00057	83 c4 04	 add	 esp, 4
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?ElementAt@?$CArray@HAAH@@QAEAAHH@Z ENDP		; CArray<int,int &>::ElementAt
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z PROC NEAR		; CArray<int,int &>::SetAtGrow, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 	ASSERT_VALID(this);

  0000e	68 16 02 00 00	 push	 534			; 00000216H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:$SG191122
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 535  : 	ASSERT(nIndex >= 0);

  00021	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00025	7d 14		 jge	 SHORT $L193269
  00027	68 17 02 00 00	 push	 535			; 00000217H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:$SG191124
  00031	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00036	85 c0		 test	 eax, eax
  00038	74 01		 je	 SHORT $L193269
  0003a	cc		 int	 3
$L193269:

; 536  : 	
; 537  : 	if(nIndex < 0)

  0003b	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0003f	7d 05		 jge	 SHORT $L191125

; 538  : 		AfxThrowInvalidArgException();

  00041	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191125:

; 539  : 
; 540  : 	if (nIndex >= m_nSize)

  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0004c	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0004f	7c 11		 jl	 SHORT $L191126

; 541  : 		SetSize(nIndex+1, -1);

  00051	6a ff		 push	 -1
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00056	83 c1 01	 add	 ecx, 1
  00059	51		 push	 ecx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HAAH@@QAEXHH@Z ; CArray<int,int &>::SetSize
$L191126:

; 542  : 	m_pData[nIndex] = newElement;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0006b	8b 55 0c	 mov	 edx, DWORD PTR _newElement$[ebp]
  0006e	8b 12		 mov	 edx, DWORD PTR [edx]
  00070	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$L193268:

; 543  : }

  00073	83 c4 04	 add	 esp, 4
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z ENDP		; CArray<int,int &>::SetAtGrow
_TEXT	ENDS
EXTRN	?Read@CArchive@@QAEIPAXI@Z:NEAR			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:NEAR		; CArchive::Write
; Function compile flags: /Odt /RTCsu
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT
tv91 = -32						; size = 4
tv81 = -28						; size = 4
_nElementsToRead$191148 = -24				; size = 4
_nElementsLeft$191144 = -20				; size = 4
_pData$191143 = -16					; size = 4
_nElementsToWrite$191138 = -12				; size = 4
_nElementsLeft$191134 = -8				; size = 4
_pData$191133 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z PROC NEAR ; SerializeElements<int>, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 70   : 	ASSERT(nCount == 0 ||

  00023	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00027	74 27		 je	 SHORT $L193271
  00029	6a 01		 push	 1
  0002b	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0002e	c1 e0 02	 shl	 eax, 2
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0003b	85 c0		 test	 eax, eax
  0003d	75 11		 jne	 SHORT $L193271
  0003f	6a 47		 push	 71			; 00000047H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:$SG191131
  00046	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0004b	85 c0		 test	 eax, eax
  0004d	74 01		 je	 SHORT $L193271
  0004f	cc		 int	 3
$L193271:

; 71   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 72   : 
; 73   : 	// default is bit-wise read/write
; 74   : 	if (ar.IsStoring())

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00053	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00058	85 c0		 test	 eax, eax
  0005a	74 5c		 je	 SHORT $L191132

; 75   :    {
; 76   : 	  TYPE* pData;
; 77   : 	  UINT_PTR nElementsLeft;
; 78   : 
; 79   : 	  nElementsLeft = nCount;

  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	89 45 f8	 mov	 DWORD PTR _nElementsLeft$191134[ebp], eax

; 80   : 	  pData = pElements;

  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00065	89 4d fc	 mov	 DWORD PTR _pData$191133[ebp], ecx
$L191136:

; 81   : 	  while( nElementsLeft > 0 )

  00068	83 7d f8 00	 cmp	 DWORD PTR _nElementsLeft$191134[ebp], 0
  0006c	76 48		 jbe	 SHORT $L191137

; 82   : 	  {
; 83   : 		 UINT nElementsToWrite;
; 84   : 
; 85   : 		 nElementsToWrite = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0006e	81 7d f8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$191134[ebp], 536870911 ; 1fffffffH
  00075	73 08		 jae	 SHORT $L193272
  00077	8b 55 f8	 mov	 edx, DWORD PTR _nElementsLeft$191134[ebp]
  0007a	89 55 e4	 mov	 DWORD PTR tv81[ebp], edx
  0007d	eb 07		 jmp	 SHORT $L193273
$L193272:
  0007f	c7 45 e4 ff ff
	ff 1f		 mov	 DWORD PTR tv81[ebp], 536870911 ; 1fffffffH
$L193273:
  00086	8b 45 e4	 mov	 eax, DWORD PTR tv81[ebp]
  00089	89 45 f4	 mov	 DWORD PTR _nElementsToWrite$191138[ebp], eax

; 86   : 		 ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$191138[ebp]
  0008f	c1 e1 02	 shl	 ecx, 2
  00092	51		 push	 ecx
  00093	8b 55 fc	 mov	 edx, DWORD PTR _pData$191133[ebp]
  00096	52		 push	 edx
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0009a	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 		 nElementsLeft -= nElementsToWrite;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _nElementsLeft$191134[ebp]
  000a2	2b 45 f4	 sub	 eax, DWORD PTR _nElementsToWrite$191138[ebp]
  000a5	89 45 f8	 mov	 DWORD PTR _nElementsLeft$191134[ebp], eax

; 88   : 		 pData += nElementsToWrite;

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$191138[ebp]
  000ab	8b 55 fc	 mov	 edx, DWORD PTR _pData$191133[ebp]
  000ae	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000b1	89 45 fc	 mov	 DWORD PTR _pData$191133[ebp], eax

; 89   : 	  }

  000b4	eb b2		 jmp	 SHORT $L191136
$L191137:

; 90   :    }
; 91   : 	else

  000b6	eb 5a		 jmp	 SHORT $L191127
$L191132:

; 92   :    {
; 93   : 	  TYPE* pData;
; 94   : 	  UINT_PTR nElementsLeft;
; 95   : 
; 96   : 	  nElementsLeft = nCount;

  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _nCount$[ebp]
  000bb	89 4d ec	 mov	 DWORD PTR _nElementsLeft$191144[ebp], ecx

; 97   : 	  pData = pElements;

  000be	8b 55 0c	 mov	 edx, DWORD PTR _pElements$[ebp]
  000c1	89 55 f0	 mov	 DWORD PTR _pData$191143[ebp], edx
$L191146:

; 98   : 	  while( nElementsLeft > 0 )

  000c4	83 7d ec 00	 cmp	 DWORD PTR _nElementsLeft$191144[ebp], 0
  000c8	76 48		 jbe	 SHORT $L191127

; 99   : 	  {
; 100  : 		 UINT nElementsToRead;
; 101  : 
; 102  : 		 nElementsToRead = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000ca	81 7d ec ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$191144[ebp], 536870911 ; 1fffffffH
  000d1	73 08		 jae	 SHORT $L193274
  000d3	8b 45 ec	 mov	 eax, DWORD PTR _nElementsLeft$191144[ebp]
  000d6	89 45 e0	 mov	 DWORD PTR tv91[ebp], eax
  000d9	eb 07		 jmp	 SHORT $L193275
$L193274:
  000db	c7 45 e0 ff ff
	ff 1f		 mov	 DWORD PTR tv91[ebp], 536870911 ; 1fffffffH
$L193275:
  000e2	8b 4d e0	 mov	 ecx, DWORD PTR tv91[ebp]
  000e5	89 4d e8	 mov	 DWORD PTR _nElementsToRead$191148[ebp], ecx

; 103  : 		 ar.Read(pData, nElementsToRead*sizeof(TYPE));

  000e8	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$191148[ebp]
  000eb	c1 e2 02	 shl	 edx, 2
  000ee	52		 push	 edx
  000ef	8b 45 f0	 mov	 eax, DWORD PTR _pData$191143[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f6	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 104  : 		 nElementsLeft -= nElementsToRead;

  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _nElementsLeft$191144[ebp]
  000fe	2b 4d e8	 sub	 ecx, DWORD PTR _nElementsToRead$191148[ebp]
  00101	89 4d ec	 mov	 DWORD PTR _nElementsLeft$191144[ebp], ecx

; 105  : 		 pData += nElementsToRead;

  00104	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$191148[ebp]
  00107	8b 45 f0	 mov	 eax, DWORD PTR _pData$191143[ebp]
  0010a	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0010d	89 4d f0	 mov	 DWORD PTR _pData$191143[ebp], ecx

; 106  : 	  }

  00110	eb b2		 jmp	 SHORT $L191146
$L191127:

; 107  :    }
; 108  : }

  00112	83 c4 20	 add	 esp, 32			; 00000020H
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ENDP	; SerializeElements<int>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z
_TEXT	SEGMENT
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z PROC NEAR	; DumpElements<int>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  : 	ASSERT(nCount == 0 ||

  00003	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00007	74 2a		 je	 SHORT $L191152
  00009	6a 00		 push	 0
  0000b	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0000e	c1 e0 02	 shl	 eax, 2
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0001b	85 c0		 test	 eax, eax
  0001d	75 14		 jne	 SHORT $L191152
  0001f	68 8b 00 00 00	 push	 139			; 0000008bH
  00024	68 00 00 00 00	 push	 OFFSET FLAT:$SG191156
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L191152
  00032	cc		 int	 3
$L191152:

; 139  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 140  : 	&dc; // not used
; 141  : 	pElements;  // not used
; 142  : 	nCount; // not used
; 143  : 
; 144  : 	// default does nothing
; 145  : }

  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z ENDP	; DumpElements<int>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z
_TEXT	SEGMENT
tv192 = -76						; size = 4
tv193 = -72						; size = 4
tv130 = -68						; size = 4
$T193296 = -64						; size = 4
$T193295 = -60						; size = 4
$T193293 = -56						; size = 4
$T193286 = -52						; size = 4
$T193285 = -48						; size = 4
$T193284 = -44						; size = 4
$T193280 = -40						; size = 4
_i$191242 = -36						; size = 4
_pNewData$191229 = -32					; size = 4
_nNewMax$191220 = -28					; size = 4
_i$191214 = -24						; size = 4
_i$191205 = -20						; size = 4
_i$191192 = -16						; size = 4
_nAllocSize$191182 = -12				; size = 4
_i$191171 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z PROC NEAR	; CArray<BCMenu *,BCMenu *>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);

  0001b	68 72 01 00 00	 push	 370			; 00000172H
  00020	68 00 00 00 00	 push	 OFFSET FLAT:$SG191164
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 371  : 	ASSERT(nNewSize >= 0);

  0002e	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00032	7d 14		 jge	 SHORT $L193279
  00034	68 73 01 00 00	 push	 371			; 00000173H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:$SG191166
  0003e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00043	85 c0		 test	 eax, eax
  00045	74 01		 je	 SHORT $L193279
  00047	cc		 int	 3
$L193279:

; 372  : 
; 373  : 	if(nNewSize < 0 )

  00048	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0004c	7d 05		 jge	 SHORT $L191167

; 374  : 		AfxThrowInvalidArgException();

  0004e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191167:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00053	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00057	7c 09		 jl	 SHORT $L191168

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  0005f	89 42 10	 mov	 DWORD PTR [edx+16], eax
$L191168:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00062	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00066	75 60		 jne	 SHORT $L191169

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0006f	74 3e		 je	 SHORT $L191170

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00071	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$191171[ebp], 0
  00078	eb 09		 jmp	 SHORT $L191172
$L191173:
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _i$191171[ebp]
  0007d	83 c2 01	 add	 edx, 1
  00080	89 55 f8	 mov	 DWORD PTR _i$191171[ebp], edx
$L191172:
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _i$191171[ebp]
  00089	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008c	7d 02		 jge	 SHORT $L191174

; 385  : 				(m_pData + i)->~TYPE();

  0008e	eb ea		 jmp	 SHORT $L191173
$L191174:

; 386  : 			delete[] (BYTE*)m_pData;

  00090	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00096	89 45 d8	 mov	 DWORD PTR $T193280[ebp], eax
  00099	8b 4d d8	 mov	 ecx, DWORD PTR $T193280[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a2	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L191170:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  000c3	e9 45 03 00 00	 jmp	 $L193278
$L191169:
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000cf	0f 85 c9 00 00
	00		 jne	 $L191178

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow

  000d5	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _nNewSize$[ebp], 1073741823 ; 3fffffffH
  000dc	76 14		 jbe	 SHORT $L193281
  000de	68 8c 01 00 00	 push	 396			; 0000018cH
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:$SG191181
  000e8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ed	85 c0		 test	 eax, eax
  000ef	74 01		 je	 SHORT $L193281
  000f1	cc		 int	 3
$L193281:

; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  000f8	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  000fb	7e 08		 jle	 SHORT $L193282
  000fd	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00100	89 45 bc	 mov	 DWORD PTR tv130[ebp], eax
  00103	eb 09		 jmp	 SHORT $L193283
$L193282:
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010b	89 55 bc	 mov	 DWORD PTR tv130[ebp], edx
$L193283:
  0010e	8b 45 bc	 mov	 eax, DWORD PTR tv130[ebp]
  00111	89 45 f4	 mov	 DWORD PTR _nAllocSize$191182[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  00114	68 8f 01 00 00	 push	 399			; 0000018fH
  00119	68 00 00 00 00	 push	 OFFSET FLAT:$SG191188
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191182[ebp]
  00121	c1 e1 02	 shl	 ecx, 2
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	89 45 d4	 mov	 DWORD PTR $T193284[ebp], eax
  00130	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00133	8b 45 d4	 mov	 eax, DWORD PTR $T193284[ebp]
  00136	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  00139	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191182[ebp]
  0013c	c1 e1 02	 shl	 ecx, 2
  0013f	51		 push	 ecx
  00140	6a 00		 push	 0
  00142	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00145	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _memset
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  00151	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$191192[ebp], 0
  00158	eb 09		 jmp	 SHORT $L191193
$L191194:
  0015a	8b 4d f0	 mov	 ecx, DWORD PTR _i$191192[ebp]
  0015d	83 c1 01	 add	 ecx, 1
  00160	89 4d f0	 mov	 DWORD PTR _i$191192[ebp], ecx
$L191193:
  00163	8b 55 f0	 mov	 edx, DWORD PTR _i$191192[ebp]
  00166	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  00169	7d 1c		 jge	 SHORT $L191195

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  0016b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00171	8b 55 f0	 mov	 edx, DWORD PTR _i$191192[ebp]
  00174	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00177	50		 push	 eax
  00178	6a 04		 push	 4
  0017a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0017f	83 c4 08	 add	 esp, 8
  00182	89 45 d0	 mov	 DWORD PTR $T193285[ebp], eax
  00185	eb d3		 jmp	 SHORT $L191194
$L191195:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0018d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 407  : 		m_nMaxSize = nAllocSize;

  00190	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191182[ebp]
  00196	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  00199	e9 6f 02 00 00	 jmp	 $L193278
$L191178:
  0019e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  001a4	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  001a7	0f 8f b4 00 00
	00		 jg	 $L191200

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001b3	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  001b6	7e 6e		 jle	 SHORT $L191201

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  001b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  001be	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  001c1	c1 e1 02	 shl	 ecx, 2
  001c4	51		 push	 ecx
  001c5	6a 00		 push	 0
  001c7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d3	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _memset
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  001df	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$191205[ebp], 0
  001e6	eb 09		 jmp	 SHORT $L191206
$L191207:
  001e8	8b 4d ec	 mov	 ecx, DWORD PTR _i$191205[ebp]
  001eb	83 c1 01	 add	 ecx, 1
  001ee	89 4d ec	 mov	 DWORD PTR _i$191205[ebp], ecx
$L191206:
  001f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f4	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  001f7	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  001fa	39 45 ec	 cmp	 DWORD PTR _i$191205[ebp], eax
  001fd	7d 25		 jge	 SHORT $L191208

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00202	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00205	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00208	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0020b	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0020e	8b 45 ec	 mov	 eax, DWORD PTR _i$191205[ebp]
  00211	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00214	51		 push	 ecx
  00215	6a 04		 push	 4
  00217	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0021c	83 c4 08	 add	 esp, 8
  0021f	89 45 cc	 mov	 DWORD PTR $T193286[ebp], eax
  00222	eb c4		 jmp	 SHORT $L191207
$L191208:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  00224	eb 2d		 jmp	 SHORT $L191212
$L191201:
  00226	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00229	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0022c	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  0022f	7e 22		 jle	 SHORT $L191212

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  00231	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$191214[ebp], 0
  00238	eb 09		 jmp	 SHORT $L191215
$L191216:
  0023a	8b 4d e8	 mov	 ecx, DWORD PTR _i$191214[ebp]
  0023d	83 c1 01	 add	 ecx, 1
  00240	89 4d e8	 mov	 DWORD PTR _i$191214[ebp], ecx
$L191215:
  00243	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00246	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00249	2b 45 08	 sub	 eax, DWORD PTR _nNewSize$[ebp]
  0024c	39 45 e8	 cmp	 DWORD PTR _i$191214[ebp], eax
  0024f	7d 02		 jge	 SHORT $L191212

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  00251	eb e7		 jmp	 SHORT $L191216
$L191212:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  00253	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00256	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00259	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 429  : 	}
; 430  : 	else

  0025c	e9 ac 01 00 00	 jmp	 $L193278
$L191200:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  00261	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00264	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00267	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx

; 434  : 		if (nGrowBy == 0)

  0026a	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  0026e	75 45		 jne	 SHORT $L191219

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  00270	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00273	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00276	99		 cdq
  00277	83 e2 07	 and	 edx, 7
  0027a	03 c2		 add	 eax, edx
  0027c	c1 f8 03	 sar	 eax, 3
  0027f	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  00282	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  00286	7d 09		 jge	 SHORT $L193289
  00288	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv193[ebp], 4
  0028f	eb 1e		 jmp	 SHORT $L193290
$L193289:
  00291	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00298	7e 09		 jle	 SHORT $L193287
  0029a	c7 45 b4 00 04
	00 00		 mov	 DWORD PTR tv192[ebp], 1024 ; 00000400H
  002a1	eb 06		 jmp	 SHORT $L193288
$L193287:
  002a3	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  002a6	89 45 b4	 mov	 DWORD PTR tv192[ebp], eax
$L193288:
  002a9	8b 4d b4	 mov	 ecx, DWORD PTR tv192[ebp]
  002ac	89 4d b8	 mov	 DWORD PTR tv193[ebp], ecx
$L193290:
  002af	8b 55 b8	 mov	 edx, DWORD PTR tv193[ebp]
  002b2	89 55 0c	 mov	 DWORD PTR _nGrowBy$[ebp], edx
$L191219:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  002b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002bb	03 4d 0c	 add	 ecx, DWORD PTR _nGrowBy$[ebp]
  002be	39 4d 08	 cmp	 DWORD PTR _nNewSize$[ebp], ecx
  002c1	7d 0e		 jge	 SHORT $L191221

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  002c3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002c9	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  002cc	89 45 e4	 mov	 DWORD PTR _nNewMax$191220[ebp], eax

; 444  : 		else

  002cf	eb 06		 jmp	 SHORT $L191222
$L191221:

; 445  : 			nNewMax = nNewSize;  // no slush

  002d1	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002d4	89 4d e4	 mov	 DWORD PTR _nNewMax$191220[ebp], ecx
$L191222:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around

  002d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002da	8b 45 e4	 mov	 eax, DWORD PTR _nNewMax$191220[ebp]
  002dd	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  002e0	7d 14		 jge	 SHORT $L193291
  002e2	68 bf 01 00 00	 push	 447			; 000001bfH
  002e7	68 00 00 00 00	 push	 OFFSET FLAT:$SG191224
  002ec	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  002f1	85 c0		 test	 eax, eax
  002f3	74 01		 je	 SHORT $L193291
  002f5	cc		 int	 3
$L193291:

; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  002f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002f9	8b 45 e4	 mov	 eax, DWORD PTR _nNewMax$191220[ebp]
  002fc	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  002ff	7d 05		 jge	 SHORT $L191225

; 450  : 			AfxThrowInvalidArgException();

  00301	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191225:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow

  00306	81 7d e4 ff ff
	ff 3f		 cmp	 DWORD PTR _nNewMax$191220[ebp], 1073741823 ; 3fffffffH
  0030d	76 14		 jbe	 SHORT $L193292
  0030f	68 c5 01 00 00	 push	 453			; 000001c5H
  00314	68 00 00 00 00	 push	 OFFSET FLAT:$SG191228
  00319	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0031e	85 c0		 test	 eax, eax
  00320	74 01		 je	 SHORT $L193292
  00322	cc		 int	 3
$L193292:

; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  00323	8b 55 e4	 mov	 edx, DWORD PTR _nNewMax$191220[ebp]
  00326	c1 e2 02	 shl	 edx, 2
  00329	52		 push	 edx
  0032a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0032f	83 c4 04	 add	 esp, 4
  00332	89 45 c8	 mov	 DWORD PTR $T193293[ebp], eax
  00335	8b 45 c8	 mov	 eax, DWORD PTR $T193293[ebp]
  00338	89 45 e0	 mov	 DWORD PTR _pNewData$191229[ebp], eax

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  0033b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00341	c1 e2 02	 shl	 edx, 2
  00344	52		 push	 edx
  00345	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00348	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0034b	51		 push	 ecx
  0034c	8b 55 e0	 mov	 edx, DWORD PTR _pNewData$191229[ebp]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _memcpy
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);

  00358	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0035b	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0035e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00361	7f 14		 jg	 SHORT $L193294
  00363	68 cd 01 00 00	 push	 461			; 000001cdH
  00368	68 00 00 00 00	 push	 OFFSET FLAT:$SG191238
  0036d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00372	85 c0		 test	 eax, eax
  00374	74 01		 je	 SHORT $L193294
  00376	cc		 int	 3
$L193294:

; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00377	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037a	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0037d	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00380	c1 e1 02	 shl	 ecx, 2
  00383	51		 push	 ecx
  00384	6a 00		 push	 0
  00386	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00389	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0038c	8b 4d e0	 mov	 ecx, DWORD PTR _pNewData$191229[ebp]
  0038f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00392	52		 push	 edx
  00393	e8 00 00 00 00	 call	 _memset
  00398	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  0039b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$191242[ebp], 0
  003a2	eb 09		 jmp	 SHORT $L191243
$L191244:
  003a4	8b 45 dc	 mov	 eax, DWORD PTR _i$191242[ebp]
  003a7	83 c0 01	 add	 eax, 1
  003aa	89 45 dc	 mov	 DWORD PTR _i$191242[ebp], eax
$L191243:
  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  003b3	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  003b6	39 55 dc	 cmp	 DWORD PTR _i$191242[ebp], edx
  003b9	7d 22		 jge	 SHORT $L191245

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  003bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003be	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003c1	8b 55 e0	 mov	 edx, DWORD PTR _pNewData$191229[ebp]
  003c4	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  003c7	8b 4d dc	 mov	 ecx, DWORD PTR _i$191242[ebp]
  003ca	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  003cd	52		 push	 edx
  003ce	6a 04		 push	 4
  003d0	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  003d5	83 c4 08	 add	 esp, 8
  003d8	89 45 c4	 mov	 DWORD PTR $T193295[ebp], eax
  003db	eb c7		 jmp	 SHORT $L191244
$L191245:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  003dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003e3	89 4d c0	 mov	 DWORD PTR $T193296[ebp], ecx
  003e6	8b 55 c0	 mov	 edx, DWORD PTR $T193296[ebp]
  003e9	52		 push	 edx
  003ea	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003ef	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  003f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f5	8b 4d e0	 mov	 ecx, DWORD PTR _pNewData$191229[ebp]
  003f8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 472  : 		m_nSize = nNewSize;

  003fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003fe	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00401	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 473  : 		m_nMaxSize = nNewMax;

  00404	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00407	8b 55 e4	 mov	 edx, DWORD PTR _nNewMax$191220[ebp]
  0040a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
$L193278:

; 474  : 	}
; 475  : }

  0040d	5f		 pop	 edi
  0040e	83 c4 4c	 add	 esp, 76			; 0000004cH
  00411	3b ec		 cmp	 ebp, esp
  00413	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00418	8b e5		 mov	 esp, ebp
  0041a	5d		 pop	 ebp
  0041b	c2 08 00	 ret	 8
?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z ENDP	; CArray<BCMenu *,BCMenu *>::SetSize
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::ElementAt, COMDAT
; _this$ = ecx

; 320  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 321  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $L193298
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001d	7c 14		 jl	 SHORT $L193299
$L193298:
  0001f	68 41 01 00 00	 push	 321			; 00000141H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@BMBEKJNI@D?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L193299
  00032	cc		 int	 3
$L193299:

; 322  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00033	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00037	7c 19		 jl	 SHORT $L191258
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	7d 0e		 jge	 SHORT $L191258

; 323  : 		return m_pData[nIndex]; 

  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0004d	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00050	eb 05		 jmp	 SHORT $L193297
$L191258:

; 324  : 	AfxThrowInvalidArgException();		

  00052	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L193297:

; 325  : }

  00057	83 c4 04	 add	 esp, 4
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ENDP ; CArray<BCMenu *,BCMenu *>::ElementAt
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::SetAtGrow, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 	ASSERT_VALID(this);

  0000e	68 16 02 00 00	 push	 534			; 00000216H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:$SG191266
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 535  : 	ASSERT(nIndex >= 0);

  00021	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00025	7d 14		 jge	 SHORT $L193301
  00027	68 17 02 00 00	 push	 535			; 00000217H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:$SG191268
  00031	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00036	85 c0		 test	 eax, eax
  00038	74 01		 je	 SHORT $L193301
  0003a	cc		 int	 3
$L193301:

; 536  : 	
; 537  : 	if(nIndex < 0)

  0003b	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0003f	7d 05		 jge	 SHORT $L191269

; 538  : 		AfxThrowInvalidArgException();

  00041	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191269:

; 539  : 
; 540  : 	if (nIndex >= m_nSize)

  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0004c	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0004f	7c 11		 jl	 SHORT $L191270

; 541  : 		SetSize(nIndex+1, -1);

  00051	6a ff		 push	 -1
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00056	83 c1 01	 add	 ecx, 1
  00059	51		 push	 ecx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z ; CArray<BCMenu *,BCMenu *>::SetSize
$L191270:

; 542  : 	m_pData[nIndex] = newElement;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0006b	8b 55 0c	 mov	 edx, DWORD PTR _newElement$[ebp]
  0006e	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$L193300:

; 543  : }

  00071	83 c4 04	 add	 esp, 4
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z ENDP ; CArray<BCMenu *,BCMenu *>::SetAtGrow
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z
_TEXT	SEGMENT
tv91 = -32						; size = 4
tv81 = -28						; size = 4
_nElementsToRead$191292 = -24				; size = 4
_nElementsLeft$191288 = -20				; size = 4
_pData$191287 = -16					; size = 4
_nElementsToWrite$191282 = -12				; size = 4
_nElementsLeft$191278 = -8				; size = 4
_pData$191277 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z PROC NEAR ; SerializeElements<BCMenu *>, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 70   : 	ASSERT(nCount == 0 ||

  00023	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00027	74 27		 je	 SHORT $L193303
  00029	6a 01		 push	 1
  0002b	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0002e	c1 e0 02	 shl	 eax, 2
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0003b	85 c0		 test	 eax, eax
  0003d	75 11		 jne	 SHORT $L193303
  0003f	6a 47		 push	 71			; 00000047H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:$SG191275
  00046	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0004b	85 c0		 test	 eax, eax
  0004d	74 01		 je	 SHORT $L193303
  0004f	cc		 int	 3
$L193303:

; 71   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 72   : 
; 73   : 	// default is bit-wise read/write
; 74   : 	if (ar.IsStoring())

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00053	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00058	85 c0		 test	 eax, eax
  0005a	74 5c		 je	 SHORT $L191276

; 75   :    {
; 76   : 	  TYPE* pData;
; 77   : 	  UINT_PTR nElementsLeft;
; 78   : 
; 79   : 	  nElementsLeft = nCount;

  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	89 45 f8	 mov	 DWORD PTR _nElementsLeft$191278[ebp], eax

; 80   : 	  pData = pElements;

  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00065	89 4d fc	 mov	 DWORD PTR _pData$191277[ebp], ecx
$L191280:

; 81   : 	  while( nElementsLeft > 0 )

  00068	83 7d f8 00	 cmp	 DWORD PTR _nElementsLeft$191278[ebp], 0
  0006c	76 48		 jbe	 SHORT $L191281

; 82   : 	  {
; 83   : 		 UINT nElementsToWrite;
; 84   : 
; 85   : 		 nElementsToWrite = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0006e	81 7d f8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$191278[ebp], 536870911 ; 1fffffffH
  00075	73 08		 jae	 SHORT $L193304
  00077	8b 55 f8	 mov	 edx, DWORD PTR _nElementsLeft$191278[ebp]
  0007a	89 55 e4	 mov	 DWORD PTR tv81[ebp], edx
  0007d	eb 07		 jmp	 SHORT $L193305
$L193304:
  0007f	c7 45 e4 ff ff
	ff 1f		 mov	 DWORD PTR tv81[ebp], 536870911 ; 1fffffffH
$L193305:
  00086	8b 45 e4	 mov	 eax, DWORD PTR tv81[ebp]
  00089	89 45 f4	 mov	 DWORD PTR _nElementsToWrite$191282[ebp], eax

; 86   : 		 ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$191282[ebp]
  0008f	c1 e1 02	 shl	 ecx, 2
  00092	51		 push	 ecx
  00093	8b 55 fc	 mov	 edx, DWORD PTR _pData$191277[ebp]
  00096	52		 push	 edx
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0009a	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 		 nElementsLeft -= nElementsToWrite;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _nElementsLeft$191278[ebp]
  000a2	2b 45 f4	 sub	 eax, DWORD PTR _nElementsToWrite$191282[ebp]
  000a5	89 45 f8	 mov	 DWORD PTR _nElementsLeft$191278[ebp], eax

; 88   : 		 pData += nElementsToWrite;

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$191282[ebp]
  000ab	8b 55 fc	 mov	 edx, DWORD PTR _pData$191277[ebp]
  000ae	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000b1	89 45 fc	 mov	 DWORD PTR _pData$191277[ebp], eax

; 89   : 	  }

  000b4	eb b2		 jmp	 SHORT $L191280
$L191281:

; 90   :    }
; 91   : 	else

  000b6	eb 5a		 jmp	 SHORT $L191271
$L191276:

; 92   :    {
; 93   : 	  TYPE* pData;
; 94   : 	  UINT_PTR nElementsLeft;
; 95   : 
; 96   : 	  nElementsLeft = nCount;

  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _nCount$[ebp]
  000bb	89 4d ec	 mov	 DWORD PTR _nElementsLeft$191288[ebp], ecx

; 97   : 	  pData = pElements;

  000be	8b 55 0c	 mov	 edx, DWORD PTR _pElements$[ebp]
  000c1	89 55 f0	 mov	 DWORD PTR _pData$191287[ebp], edx
$L191290:

; 98   : 	  while( nElementsLeft > 0 )

  000c4	83 7d ec 00	 cmp	 DWORD PTR _nElementsLeft$191288[ebp], 0
  000c8	76 48		 jbe	 SHORT $L191271

; 99   : 	  {
; 100  : 		 UINT nElementsToRead;
; 101  : 
; 102  : 		 nElementsToRead = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000ca	81 7d ec ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$191288[ebp], 536870911 ; 1fffffffH
  000d1	73 08		 jae	 SHORT $L193306
  000d3	8b 45 ec	 mov	 eax, DWORD PTR _nElementsLeft$191288[ebp]
  000d6	89 45 e0	 mov	 DWORD PTR tv91[ebp], eax
  000d9	eb 07		 jmp	 SHORT $L193307
$L193306:
  000db	c7 45 e0 ff ff
	ff 1f		 mov	 DWORD PTR tv91[ebp], 536870911 ; 1fffffffH
$L193307:
  000e2	8b 4d e0	 mov	 ecx, DWORD PTR tv91[ebp]
  000e5	89 4d e8	 mov	 DWORD PTR _nElementsToRead$191292[ebp], ecx

; 103  : 		 ar.Read(pData, nElementsToRead*sizeof(TYPE));

  000e8	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$191292[ebp]
  000eb	c1 e2 02	 shl	 edx, 2
  000ee	52		 push	 edx
  000ef	8b 45 f0	 mov	 eax, DWORD PTR _pData$191287[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f6	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 104  : 		 nElementsLeft -= nElementsToRead;

  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _nElementsLeft$191288[ebp]
  000fe	2b 4d e8	 sub	 ecx, DWORD PTR _nElementsToRead$191292[ebp]
  00101	89 4d ec	 mov	 DWORD PTR _nElementsLeft$191288[ebp], ecx

; 105  : 		 pData += nElementsToRead;

  00104	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$191292[ebp]
  00107	8b 45 f0	 mov	 eax, DWORD PTR _pData$191287[ebp]
  0010a	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0010d	89 4d f0	 mov	 DWORD PTR _pData$191287[ebp], ecx

; 106  : 	  }

  00110	eb b2		 jmp	 SHORT $L191290
$L191271:

; 107  :    }
; 108  : }

  00112	83 c4 20	 add	 esp, 32			; 00000020H
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z ENDP ; SerializeElements<BCMenu *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??$DumpElements@PAVBCMenu@@@@YGXAAVCDumpContext@@PBQAVBCMenu@@H@Z
_TEXT	SEGMENT
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAVBCMenu@@@@YGXAAVCDumpContext@@PBQAVBCMenu@@H@Z PROC NEAR ; DumpElements<BCMenu *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  : 	ASSERT(nCount == 0 ||

  00003	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00007	74 2a		 je	 SHORT $L191296
  00009	6a 00		 push	 0
  0000b	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0000e	c1 e0 02	 shl	 eax, 2
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0001b	85 c0		 test	 eax, eax
  0001d	75 14		 jne	 SHORT $L191296
  0001f	68 8b 00 00 00	 push	 139			; 0000008bH
  00024	68 00 00 00 00	 push	 OFFSET FLAT:$SG191300
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $L191296
  00032	cc		 int	 3
$L191296:

; 139  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 140  : 	&dc; // not used
; 141  : 	pElements;  // not used
; 142  : 	nCount; // not used
; 143  : 
; 144  : 	// default does nothing
; 145  : }

  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAVBCMenu@@@@YGXAAVCDumpContext@@PBQAVBCMenu@@H@Z ENDP ; DumpElements<BCMenu *>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
tv192 = -76						; size = 4
tv193 = -72						; size = 4
tv130 = -68						; size = 4
$T193328 = -64						; size = 4
$T193327 = -60						; size = 4
$T193325 = -56						; size = 4
$T193318 = -52						; size = 4
$T193317 = -48						; size = 4
$T193316 = -44						; size = 4
$T193312 = -40						; size = 4
_i$191386 = -36						; size = 4
_pNewData$191373 = -32					; size = 4
_nNewMax$191364 = -28					; size = 4
_i$191358 = -24						; size = 4
_i$191349 = -20						; size = 4
_i$191336 = -16						; size = 4
_nAllocSize$191326 = -12				; size = 4
_i$191315 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@HH@@QAEXHH@Z PROC NEAR		; CArray<int,int>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);

  0001b	68 72 01 00 00	 push	 370			; 00000172H
  00020	68 00 00 00 00	 push	 OFFSET FLAT:$SG191308
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 371  : 	ASSERT(nNewSize >= 0);

  0002e	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00032	7d 14		 jge	 SHORT $L193311
  00034	68 73 01 00 00	 push	 371			; 00000173H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:$SG191310
  0003e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00043	85 c0		 test	 eax, eax
  00045	74 01		 je	 SHORT $L193311
  00047	cc		 int	 3
$L193311:

; 372  : 
; 373  : 	if(nNewSize < 0 )

  00048	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0004c	7d 05		 jge	 SHORT $L191311

; 374  : 		AfxThrowInvalidArgException();

  0004e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191311:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00053	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00057	7c 09		 jl	 SHORT $L191312

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  0005f	89 42 10	 mov	 DWORD PTR [edx+16], eax
$L191312:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00062	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00066	75 60		 jne	 SHORT $L191313

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0006f	74 3e		 je	 SHORT $L191314

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00071	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$191315[ebp], 0
  00078	eb 09		 jmp	 SHORT $L191316
$L191317:
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _i$191315[ebp]
  0007d	83 c2 01	 add	 edx, 1
  00080	89 55 f8	 mov	 DWORD PTR _i$191315[ebp], edx
$L191316:
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _i$191315[ebp]
  00089	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008c	7d 02		 jge	 SHORT $L191318

; 385  : 				(m_pData + i)->~TYPE();

  0008e	eb ea		 jmp	 SHORT $L191317
$L191318:

; 386  : 			delete[] (BYTE*)m_pData;

  00090	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00096	89 45 d8	 mov	 DWORD PTR $T193312[ebp], eax
  00099	8b 4d d8	 mov	 ecx, DWORD PTR $T193312[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a2	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L191314:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  000c3	e9 45 03 00 00	 jmp	 $L193310
$L191313:
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000cf	0f 85 c9 00 00
	00		 jne	 $L191322

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow

  000d5	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _nNewSize$[ebp], 1073741823 ; 3fffffffH
  000dc	76 14		 jbe	 SHORT $L193313
  000de	68 8c 01 00 00	 push	 396			; 0000018cH
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:$SG191325
  000e8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ed	85 c0		 test	 eax, eax
  000ef	74 01		 je	 SHORT $L193313
  000f1	cc		 int	 3
$L193313:

; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  000f8	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  000fb	7e 08		 jle	 SHORT $L193314
  000fd	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00100	89 45 bc	 mov	 DWORD PTR tv130[ebp], eax
  00103	eb 09		 jmp	 SHORT $L193315
$L193314:
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010b	89 55 bc	 mov	 DWORD PTR tv130[ebp], edx
$L193315:
  0010e	8b 45 bc	 mov	 eax, DWORD PTR tv130[ebp]
  00111	89 45 f4	 mov	 DWORD PTR _nAllocSize$191326[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  00114	68 8f 01 00 00	 push	 399			; 0000018fH
  00119	68 00 00 00 00	 push	 OFFSET FLAT:$SG191332
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191326[ebp]
  00121	c1 e1 02	 shl	 ecx, 2
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	89 45 d4	 mov	 DWORD PTR $T193316[ebp], eax
  00130	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00133	8b 45 d4	 mov	 eax, DWORD PTR $T193316[ebp]
  00136	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  00139	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191326[ebp]
  0013c	c1 e1 02	 shl	 ecx, 2
  0013f	51		 push	 ecx
  00140	6a 00		 push	 0
  00142	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00145	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _memset
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  00151	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$191336[ebp], 0
  00158	eb 09		 jmp	 SHORT $L191337
$L191338:
  0015a	8b 4d f0	 mov	 ecx, DWORD PTR _i$191336[ebp]
  0015d	83 c1 01	 add	 ecx, 1
  00160	89 4d f0	 mov	 DWORD PTR _i$191336[ebp], ecx
$L191337:
  00163	8b 55 f0	 mov	 edx, DWORD PTR _i$191336[ebp]
  00166	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  00169	7d 1c		 jge	 SHORT $L191339

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  0016b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00171	8b 55 f0	 mov	 edx, DWORD PTR _i$191336[ebp]
  00174	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00177	50		 push	 eax
  00178	6a 04		 push	 4
  0017a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0017f	83 c4 08	 add	 esp, 8
  00182	89 45 d0	 mov	 DWORD PTR $T193317[ebp], eax
  00185	eb d3		 jmp	 SHORT $L191338
$L191339:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0018d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 407  : 		m_nMaxSize = nAllocSize;

  00190	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 4d f4	 mov	 ecx, DWORD PTR _nAllocSize$191326[ebp]
  00196	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  00199	e9 6f 02 00 00	 jmp	 $L193310
$L191322:
  0019e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  001a4	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  001a7	0f 8f b4 00 00
	00		 jg	 $L191344

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001b3	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  001b6	7e 6e		 jle	 SHORT $L191345

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  001b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  001be	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  001c1	c1 e1 02	 shl	 ecx, 2
  001c4	51		 push	 ecx
  001c5	6a 00		 push	 0
  001c7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d3	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _memset
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  001df	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$191349[ebp], 0
  001e6	eb 09		 jmp	 SHORT $L191350
$L191351:
  001e8	8b 4d ec	 mov	 ecx, DWORD PTR _i$191349[ebp]
  001eb	83 c1 01	 add	 ecx, 1
  001ee	89 4d ec	 mov	 DWORD PTR _i$191349[ebp], ecx
$L191350:
  001f1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f4	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  001f7	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  001fa	39 45 ec	 cmp	 DWORD PTR _i$191349[ebp], eax
  001fd	7d 25		 jge	 SHORT $L191352

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00202	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00205	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00208	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0020b	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0020e	8b 45 ec	 mov	 eax, DWORD PTR _i$191349[ebp]
  00211	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00214	51		 push	 ecx
  00215	6a 04		 push	 4
  00217	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0021c	83 c4 08	 add	 esp, 8
  0021f	89 45 cc	 mov	 DWORD PTR $T193318[ebp], eax
  00222	eb c4		 jmp	 SHORT $L191351
$L191352:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  00224	eb 2d		 jmp	 SHORT $L191356
$L191345:
  00226	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00229	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0022c	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  0022f	7e 22		 jle	 SHORT $L191356

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  00231	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$191358[ebp], 0
  00238	eb 09		 jmp	 SHORT $L191359
$L191360:
  0023a	8b 4d e8	 mov	 ecx, DWORD PTR _i$191358[ebp]
  0023d	83 c1 01	 add	 ecx, 1
  00240	89 4d e8	 mov	 DWORD PTR _i$191358[ebp], ecx
$L191359:
  00243	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00246	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00249	2b 45 08	 sub	 eax, DWORD PTR _nNewSize$[ebp]
  0024c	39 45 e8	 cmp	 DWORD PTR _i$191358[ebp], eax
  0024f	7d 02		 jge	 SHORT $L191356

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  00251	eb e7		 jmp	 SHORT $L191360
$L191356:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  00253	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00256	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00259	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 429  : 	}
; 430  : 	else

  0025c	e9 ac 01 00 00	 jmp	 $L193310
$L191344:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  00261	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00264	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00267	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx

; 434  : 		if (nGrowBy == 0)

  0026a	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  0026e	75 45		 jne	 SHORT $L191363

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  00270	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00273	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00276	99		 cdq
  00277	83 e2 07	 and	 edx, 7
  0027a	03 c2		 add	 eax, edx
  0027c	c1 f8 03	 sar	 eax, 3
  0027f	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  00282	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  00286	7d 09		 jge	 SHORT $L193321
  00288	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv193[ebp], 4
  0028f	eb 1e		 jmp	 SHORT $L193322
$L193321:
  00291	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00298	7e 09		 jle	 SHORT $L193319
  0029a	c7 45 b4 00 04
	00 00		 mov	 DWORD PTR tv192[ebp], 1024 ; 00000400H
  002a1	eb 06		 jmp	 SHORT $L193320
$L193319:
  002a3	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  002a6	89 45 b4	 mov	 DWORD PTR tv192[ebp], eax
$L193320:
  002a9	8b 4d b4	 mov	 ecx, DWORD PTR tv192[ebp]
  002ac	89 4d b8	 mov	 DWORD PTR tv193[ebp], ecx
$L193322:
  002af	8b 55 b8	 mov	 edx, DWORD PTR tv193[ebp]
  002b2	89 55 0c	 mov	 DWORD PTR _nGrowBy$[ebp], edx
$L191363:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  002b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002bb	03 4d 0c	 add	 ecx, DWORD PTR _nGrowBy$[ebp]
  002be	39 4d 08	 cmp	 DWORD PTR _nNewSize$[ebp], ecx
  002c1	7d 0e		 jge	 SHORT $L191365

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  002c3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002c9	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  002cc	89 45 e4	 mov	 DWORD PTR _nNewMax$191364[ebp], eax

; 444  : 		else

  002cf	eb 06		 jmp	 SHORT $L191366
$L191365:

; 445  : 			nNewMax = nNewSize;  // no slush

  002d1	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002d4	89 4d e4	 mov	 DWORD PTR _nNewMax$191364[ebp], ecx
$L191366:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around

  002d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002da	8b 45 e4	 mov	 eax, DWORD PTR _nNewMax$191364[ebp]
  002dd	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  002e0	7d 14		 jge	 SHORT $L193323
  002e2	68 bf 01 00 00	 push	 447			; 000001bfH
  002e7	68 00 00 00 00	 push	 OFFSET FLAT:$SG191368
  002ec	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  002f1	85 c0		 test	 eax, eax
  002f3	74 01		 je	 SHORT $L193323
  002f5	cc		 int	 3
$L193323:

; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  002f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002f9	8b 45 e4	 mov	 eax, DWORD PTR _nNewMax$191364[ebp]
  002fc	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  002ff	7d 05		 jge	 SHORT $L191369

; 450  : 			AfxThrowInvalidArgException();

  00301	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191369:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow

  00306	81 7d e4 ff ff
	ff 3f		 cmp	 DWORD PTR _nNewMax$191364[ebp], 1073741823 ; 3fffffffH
  0030d	76 14		 jbe	 SHORT $L193324
  0030f	68 c5 01 00 00	 push	 453			; 000001c5H
  00314	68 00 00 00 00	 push	 OFFSET FLAT:$SG191372
  00319	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0031e	85 c0		 test	 eax, eax
  00320	74 01		 je	 SHORT $L193324
  00322	cc		 int	 3
$L193324:

; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  00323	8b 55 e4	 mov	 edx, DWORD PTR _nNewMax$191364[ebp]
  00326	c1 e2 02	 shl	 edx, 2
  00329	52		 push	 edx
  0032a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0032f	83 c4 04	 add	 esp, 4
  00332	89 45 c8	 mov	 DWORD PTR $T193325[ebp], eax
  00335	8b 45 c8	 mov	 eax, DWORD PTR $T193325[ebp]
  00338	89 45 e0	 mov	 DWORD PTR _pNewData$191373[ebp], eax

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  0033b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00341	c1 e2 02	 shl	 edx, 2
  00344	52		 push	 edx
  00345	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00348	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0034b	51		 push	 ecx
  0034c	8b 55 e0	 mov	 edx, DWORD PTR _pNewData$191373[ebp]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 _memcpy
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);

  00358	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0035b	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0035e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00361	7f 14		 jg	 SHORT $L193326
  00363	68 cd 01 00 00	 push	 461			; 000001cdH
  00368	68 00 00 00 00	 push	 OFFSET FLAT:$SG191382
  0036d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00372	85 c0		 test	 eax, eax
  00374	74 01		 je	 SHORT $L193326
  00376	cc		 int	 3
$L193326:

; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00377	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037a	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0037d	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00380	c1 e1 02	 shl	 ecx, 2
  00383	51		 push	 ecx
  00384	6a 00		 push	 0
  00386	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00389	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0038c	8b 4d e0	 mov	 ecx, DWORD PTR _pNewData$191373[ebp]
  0038f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00392	52		 push	 edx
  00393	e8 00 00 00 00	 call	 _memset
  00398	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  0039b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$191386[ebp], 0
  003a2	eb 09		 jmp	 SHORT $L191387
$L191388:
  003a4	8b 45 dc	 mov	 eax, DWORD PTR _i$191386[ebp]
  003a7	83 c0 01	 add	 eax, 1
  003aa	89 45 dc	 mov	 DWORD PTR _i$191386[ebp], eax
$L191387:
  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  003b3	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  003b6	39 55 dc	 cmp	 DWORD PTR _i$191386[ebp], edx
  003b9	7d 22		 jge	 SHORT $L191389

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  003bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003be	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003c1	8b 55 e0	 mov	 edx, DWORD PTR _pNewData$191373[ebp]
  003c4	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  003c7	8b 4d dc	 mov	 ecx, DWORD PTR _i$191386[ebp]
  003ca	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  003cd	52		 push	 edx
  003ce	6a 04		 push	 4
  003d0	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  003d5	83 c4 08	 add	 esp, 8
  003d8	89 45 c4	 mov	 DWORD PTR $T193327[ebp], eax
  003db	eb c7		 jmp	 SHORT $L191388
$L191389:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  003dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003e3	89 4d c0	 mov	 DWORD PTR $T193328[ebp], ecx
  003e6	8b 55 c0	 mov	 edx, DWORD PTR $T193328[ebp]
  003e9	52		 push	 edx
  003ea	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003ef	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  003f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f5	8b 4d e0	 mov	 ecx, DWORD PTR _pNewData$191373[ebp]
  003f8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 472  : 		m_nSize = nNewSize;

  003fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003fe	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00401	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 473  : 		m_nMaxSize = nNewMax;

  00404	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00407	8b 55 e4	 mov	 edx, DWORD PTR _nNewMax$191364[ebp]
  0040a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
$L193310:

; 474  : 	}
; 475  : }

  0040d	5f		 pop	 edi
  0040e	83 c4 4c	 add	 esp, 76			; 0000004cH
  00411	3b ec		 cmp	 ebp, esp
  00413	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00418	8b e5		 mov	 esp, ebp
  0041a	5d		 pop	 ebp
  0041b	c2 08 00	 ret	 8
?SetSize@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::SetSize
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CArray@HH@@QAEXHH@Z PROC NEAR		; CArray<int,int>::SetAtGrow, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 	ASSERT_VALID(this);

  0000e	68 16 02 00 00	 push	 534			; 00000216H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:$SG191402
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 535  : 	ASSERT(nIndex >= 0);

  00021	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00025	7d 14		 jge	 SHORT $L193330
  00027	68 17 02 00 00	 push	 535			; 00000217H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:$SG191404
  00031	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00036	85 c0		 test	 eax, eax
  00038	74 01		 je	 SHORT $L193330
  0003a	cc		 int	 3
$L193330:

; 536  : 	
; 537  : 	if(nIndex < 0)

  0003b	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0003f	7d 05		 jge	 SHORT $L191405

; 538  : 		AfxThrowInvalidArgException();

  00041	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L191405:

; 539  : 
; 540  : 	if (nIndex >= m_nSize)

  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0004c	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0004f	7c 11		 jl	 SHORT $L191406

; 541  : 		SetSize(nIndex+1, -1);

  00051	6a ff		 push	 -1
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00056	83 c1 01	 add	 ecx, 1
  00059	51		 push	 ecx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetSize
$L191406:

; 542  : 	m_pData[nIndex] = newElement;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0006b	8b 55 0c	 mov	 edx, DWORD PTR _newElement$[ebp]
  0006e	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$L193329:

; 543  : }

  00071	83 c4 04	 add	 esp, 4
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?SetAtGrow@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::SetAtGrow
_TEXT	ENDS
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S7	DD	FLAT:_$E5
; Function compile flags: /Odt /RTCsu
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
CRT$XCU	ENDS
;	COMDAT _$E5
text$yc	SEGMENT
_$E5	PROC NEAR					; COMDAT

; 67   : CImageList BCMenu::m_AllImages;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  00008	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_$E5	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S10	DD	FLAT:_$E8
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E8
text$yc	SEGMENT
_$E8	PROC NEAR					; COMDAT

; 68   : CArray<int,int&> BCMenu::m_AllImagesID;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  00008	e8 00 00 00 00	 call	 ??0?$CArray@HAAH@@QAE@XZ ; CArray<int,int &>::CArray<int,int &>
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E9
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_$E8	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S12	DD	FLAT:_$E11
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E11
text$yc	SEGMENT
_$E11	PROC NEAR					; COMDAT

; 121  : static Win32Type g_Shell=IsShellType();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 ?IsShellType@@YA?AW4Win32Type@@XZ ; IsShellType
  00008	a3 00 00 00 00	 mov	 DWORD PTR _g_Shell, eax
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_$E11	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S15	DD	FLAT:_$E13
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E13
text$yc	SEGMENT
_$E13	PROC NEAR					; COMDAT

; 157  : CTypedPtrArray<CPtrArray, HMENU> BCMenu::m_AllSubMenus;  // Stores list of all sub-menus

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00008	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E14
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_$E13	ENDP
; Function compile flags: /Odt /RTCsu
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  00008	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_$E6	ENDP
; Function compile flags: /Odt /RTCsu
text$yd	ENDS
;	COMDAT _$E9
text$yd	SEGMENT
_$E9	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  00008	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_$E9	ENDP
; Function compile flags: /Odt /RTCsu
text$yd	ENDS
;	COMDAT _$E14
text$yd	SEGMENT
_$E14	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00008	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_$E14	ENDP
text$yd	ENDS
PUBLIC	?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A ; BCMenu::m_AllSubMenus
PUBLIC	?m_AllImages@BCMenu@@1VCImageList@@A		; BCMenu::m_AllImages
PUBLIC	?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A	; BCMenu::m_AllImagesID
_BSS	SEGMENT
?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A DB 014H DUP (?) ; BCMenu::m_AllSubMenus
?m_AllImages@BCMenu@@1VCImageList@@A DQ 01H DUP (?)	; BCMenu::m_AllImages
?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A DB 014H DUP (?) ; BCMenu::m_AllImagesID
_g_Shell DD	01H DUP (?)
_BSS	ENDS
END
