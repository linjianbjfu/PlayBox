; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\CommonControl\HyperLinkCtrl.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??_GCHyperLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CHyperLink@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CHyperLink@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CStatic@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCStatic@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CHyperLink@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCHyperLink@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4CHyperLink@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2A@@YAPADPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsstr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeflateRect@CRect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDC@CWnd@@QAEPAVCDC@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnTimer@CWnd@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtInRect@CRect@@QBEHUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWnd@@QBEXPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Invalidate@CWnd@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFont@CWnd@@QAEXPAVCFont@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_messageEntries@CHyperLink@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messageMap@CHyperLink@@1UAFX_MSGMAP@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFont@CWnd@@QBEPAVCFont@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RelayEvent@CToolTipCtrl@@QAEXPAUtagMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillTimer@CWnd@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CHyperLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CStatic@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CStatic@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CStatic@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CStatic@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?CtlColor@CHyperLink@@IAEPAUHBRUSH__@@PAVCDC@@I@Z ; CHyperLink::CtlColor
PUBLIC	?OnSetCursor@CHyperLink@@IAEHPAVCWnd@@II@Z	; CHyperLink::OnSetCursor
PUBLIC	?OnMouseMove@CHyperLink@@IAEXIVCPoint@@@Z	; CHyperLink::OnMouseMove
PUBLIC	?OnTimer@CHyperLink@@IAEXI@Z			; CHyperLink::OnTimer
PUBLIC	?OnEraseBkgnd@CHyperLink@@IAEHPAVCDC@@@Z	; CHyperLink::OnEraseBkgnd
PUBLIC	?OnClicked@CHyperLink@@IAEXXZ			; CHyperLink::OnClicked
PUBLIC	?_messageEntries@CHyperLink@@0QBUAFX_MSGMAP_ENTRY@@B ; CHyperLink::_messageEntries
PUBLIC	?messageMap@CHyperLink@@1UAFX_MSGMAP@@B		; CHyperLink::messageMap
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:NEAR ; CWnd::GetThisMessageMap
;	COMDAT ?_messageEntries@CHyperLink@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@CHyperLink@@0QBUAFX_MSGMAP_ENTRY@@B DD 0bc19H ; CHyperLink::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	09H
	DD	FLAT:?CtlColor@CHyperLink@@IAEPAUHBRUSH__@@PAVCDC@@I@Z
	DD	020H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	FLAT:?OnSetCursor@CHyperLink@@IAEHPAVCWnd@@II@Z
	DD	0200H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnMouseMove@CHyperLink@@IAEXIVCPoint@@@Z
	DD	0113H
	DD	00H
	DD	00H
	DD	00H
	DD	011H
	DD	FLAT:?OnTimer@CHyperLink@@IAEXI@Z
	DD	0bd11H
	DD	00H
	DD	00H
	DD	00H
	DD	035H
	DD	FLAT:?OnClicked@CHyperLink@@IAEXXZ
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CHyperLink@@IAEHPAVCDC@@@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@CHyperLink@@1UAFX_MSGMAP@@B
CONST	SEGMENT
?messageMap@CHyperLink@@1UAFX_MSGMAP@@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; CHyperLink::messageMap
	DD	FLAT:?_messageEntries@CHyperLink@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
CONST	SEGMENT
$SG197680 DB	'\winhlp32.exe', 00H
	ORG $+2
$SG197711 DB	'The operating system is out', 0aH, 'of memory or resourc'
	DB	'es.', 00H
$SG197713 DB	'The specified path was not found.', 00H
	ORG $+2
$SG197715 DB	'The specified file was not found.', 00H
	ORG $+6
$SG197717 DB	'The .EXE file is invalid', 0aH, '(non-Win32 .EXE or erro'
	DB	'r in .EXE image).', 00H
	ORG $+2
$SG197719 DB	'The operating system denied', 0aH, 'access to the specif'
	DB	'ied file.', 00H
	ORG $+2
$SG197721 DB	'The filename association is', 0aH, 'incomplete or invali'
	DB	'd.', 00H
	ORG $+5
$SG197723 DB	'The DDE transaction could not', 0aH, 'be completed becau'
	DB	'se other DDE transactions', 0aH, 'were being processed.', 00H
$SG197725 DB	'The DDE transaction failed.', 00H
	ORG $+4
$SG197727 DB	'The DDE transaction could not', 0aH, 'be completed becau'
	DB	'se the request timed out.', 00H
	ORG $+2
$SG197729 DB	'The specified dynamic-link library was not found.', 00H
	ORG $+2
$SG197731 DB	'There is no application associated', 0aH, 'with the give'
	DB	'n filename extension.', 00H
	ORG $+2
$SG197733 DB	'There was not enough memory to complete the operation.', 00H
	ORG $+1
$SG197735 DB	'A sharing violation occurred. ', 00H
	ORG $+1
$SG197737 DB	'Unknown Error (%d) occurred.', 00H
	ORG $+3
$SG197739 DB	'Unable to open hyperlink:', 0aH, 0aH, 00H
$SG197747 DB	'open', 00H
	ORG $+3
$SG197754 DB	'.htm', 00H
	ORG $+3
$SG197755 DB	'\shell\open\command', 00H
$SG197761 DB	'"%1"', 00H
	ORG $+3
$SG197763 DB	'%1', 00H
	ORG $+1
$SG197767 DB	' ', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??0CStatic@@QAE@XZ				; CStatic::CStatic
PUBLIC	??_R1A@?0A@A@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R4CHyperLink@@6B@				; CHyperLink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHyperLink@@@8				; CHyperLink `RTTI Type Descriptor'
PUBLIC	??_R3CHyperLink@@8				; CHyperLink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHyperLink@@8				; CHyperLink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CHyperLink@@8			; CHyperLink::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??_R0?AVCStatic@@@8				; CStatic `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CStatic@@8				; CStatic::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CHyperLink@@QAE@XZ				; CHyperLink::CHyperLink
PUBLIC	?PreTranslateMessage@CHyperLink@@UAEHPAUtagMSG@@@Z ; CHyperLink::PreTranslateMessage
PUBLIC	?DestroyWindow@CHyperLink@@UAEHXZ		; CHyperLink::DestroyWindow
PUBLIC	?PreSubclassWindow@CHyperLink@@MAEXXZ		; CHyperLink::PreSubclassWindow
PUBLIC	??0CFont@@QAE@XZ				; CFont::CFont
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
PUBLIC	?GetMessageMap@CHyperLink@@MBEPBUAFX_MSGMAP@@XZ	; CHyperLink::GetMessageMap
PUBLIC	??_7CHyperLink@@6B@				; CHyperLink::`vftable'
PUBLIC	??_GCHyperLink@@UAEPAXI@Z			; CHyperLink::`scalar deleting destructor'
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:NEAR ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:NEAR ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	__imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ:NEAR
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ:NEAR ; CStatic::GetRuntimeClass
EXTRN	?Create@CStatic@@UAEHPBDKABUtagRECT@@PAVCWnd@@I@Z:NEAR ; CStatic::Create
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	?DrawItem@CStatic@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:NEAR ; CStatic::DrawItem
EXTRN	??1CStatic@@UAE@XZ:NEAR				; CStatic::~CStatic
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	?OnChildNotify@CStatic@@MAEHIIJPAJ@Z:NEAR	; CStatic::OnChildNotify
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:NEAR		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:NEAR			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:NEAR ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:NEAR		; CWnd::get_accChildCount
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:NEAR ; CWnd::get_accChild
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDescription
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accRole
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:NEAR ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDefaultAction
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:NEAR	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:NEAR ; CWnd::accLocation
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:NEAR	; CWnd::accHitTest
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:NEAR ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:NEAR ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:NEAR	; CWnd::CreateAccessibleProxy
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??_ECHyperLink@@UAEPAXI@Z:NEAR			; CHyperLink::`vector deleting destructor'
EXTRN	??0CToolTipCtrl@@QAE@XZ:NEAR			; CToolTipCtrl::CToolTipCtrl
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
xdata$x	SEGMENT
$T198391 DD	0ffffffffH
	DD	FLAT:$L198380
	DD	00H
	DD	FLAT:$L198381
	DD	01H
	DD	FLAT:$L198382
	DD	02H
	DD	FLAT:$L198383
$T198388 DD	019930520H
	DD	04H
	DD	FLAT:$T198391
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CHyperLink@@6B@
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\commoncontrol\hyperlinkctrl.cpp
CONST	SEGMENT
??_7CHyperLink@@6B@ DD FLAT:??_R4CHyperLink@@6B@	; CHyperLink::`vftable'
	DD	FLAT:?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECHyperLink@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CHyperLink@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CHyperLink@@MAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CHyperLink@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CHyperLink@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CStatic@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?Create@CStatic@@UAEHPBDKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?DrawItem@CStatic@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??_R4CHyperLink@@6B@
rdata$r	SEGMENT
??_R4CHyperLink@@6B@ DD 00H				; CHyperLink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHyperLink@@@8
	DD	FLAT:??_R3CHyperLink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHyperLink@@@8
_DATA	SEGMENT
??_R0?AVCHyperLink@@@8 DD FLAT:??_7type_info@@6B@	; CHyperLink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHyperLink@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CHyperLink@@8
rdata$r	SEGMENT
??_R3CHyperLink@@8 DD 00H				; CHyperLink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CHyperLink@@8
rdata$r	ENDS
;	COMDAT ??_R2CHyperLink@@8
rdata$r	SEGMENT
??_R2CHyperLink@@8 DD FLAT:??_R1A@?0A@A@CHyperLink@@8	; CHyperLink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CStatic@@8
	DD	FLAT:??_R1A@?0A@A@CWnd@@8
	DD	FLAT:??_R1A@?0A@A@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CHyperLink@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CHyperLink@@8 DD FLAT:??_R0?AVCHyperLink@@@8 ; CHyperLink::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CStatic@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CStatic@@8 DD FLAT:??_R0?AVCStatic@@@8	; CStatic::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCStatic@@@8
_DATA	SEGMENT
??_R0?AVCStatic@@@8 DD FLAT:??_7type_info@@6B@		; CStatic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStatic@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHyperLink@@QAE@XZ PROC NEAR				; CHyperLink::CHyperLink
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CHyperLink@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CStatic@@QAE@XZ	; CStatic::CStatic
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CHyperLink@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 70	 add	 ecx, 112		; 00000070H
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00040	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 74	 add	 ecx, 116		; 00000074H
  0004a	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  0004f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00059	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  0005e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00062	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0006b	e8 00 00 00 00	 call	 ??0CToolTipCtrl@@QAE@XZ	; CToolTipCtrl::CToolTipCtrl

; 38   :     m_hLinkCursor       = NULL;                 // No cursor as yet

  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	c7 81 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+132], 0

; 39   :     m_crLinkColour      = RGB(  0,   0, 238);   // Blue

  0007d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00080	c7 42 54 00 00
	ee 00		 mov	 DWORD PTR [edx+84], 15597568 ; 00ee0000H

; 40   :     m_crVisitedColour   = RGB( 85,  26, 139);   // Purple

  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	c7 40 58 55 1a
	8b 00		 mov	 DWORD PTR [eax+88], 9116245 ; 008b1a55H

; 41   :     m_crHoverColour     = RGB(255,   0,   0);   // Red

  00091	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	c7 41 5c ff 00
	00 00		 mov	 DWORD PTR [ecx+92], 255	; 000000ffH

; 42   :     m_bOverControl      = FALSE;                // Cursor not yet over control

  0009b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 43   :     m_bVisited          = FALSE;                // Hasn't been visited yet.

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 44   :     m_nUnderline        = ulHover;              // Underline the link?

  000af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	c7 41 68 ff ff
	ff ff		 mov	 DWORD PTR [ecx+104], -1

; 45   :     m_bAdjustToFit      = TRUE;                 // Resize the window to fit the text?

  000b9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	c7 42 6c 01 00
	00 00		 mov	 DWORD PTR [edx+108], 1

; 46   :     m_strURL.Empty();

  000c3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	83 c1 70	 add	 ecx, 112		; 00000070H
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ

; 47   :     m_nTimerID          = 100;

  000cf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	c7 80 f8 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+248], 100 ; 00000064H

; 48   : 	m_StdFont.m_hObject           = NULL;

  000dc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0

; 49   : 	m_UnderlineFont.m_hObject    = NULL;

  000e9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0

; 50   : }

  000f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fa	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198380:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CStatic@@UAE@XZ	; CStatic::~CStatic
$L198381:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 70	 add	 ecx, 112		; 00000070H
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L198382:
  00014	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 74	 add	 ecx, 116		; 00000074H
  0001a	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L198383:
  0001f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00025	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
__ehhandler$??0CHyperLink@@QAE@XZ:
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198388
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CHyperLink@@QAE@XZ ENDP				; CHyperLink::CHyperLink
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	??1CHyperLink@@UAE@XZ				; CHyperLink::~CHyperLink
; Function compile flags: /Odt
;	COMDAT ??_GCHyperLink@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHyperLink@@UAEPAXI@Z PROC NEAR			; CHyperLink::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CHyperLink@@UAE@XZ	; CHyperLink::~CHyperLink
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L197477
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L197477:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCHyperLink@@UAEPAXI@Z ENDP				; CHyperLink::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
EXTRN	??1CToolTipCtrl@@UAE@XZ:NEAR			; CToolTipCtrl::~CToolTipCtrl
xdata$x	SEGMENT
$T198404 DD	0ffffffffH
	DD	FLAT:$L198396
	DD	00H
	DD	FLAT:$L198397
	DD	01H
	DD	FLAT:$L198398
	DD	02H
	DD	FLAT:$L198399
	DD	03H
	DD	FLAT:$L198400
$T198402 DD	019930520H
	DD	05H
	DD	FLAT:$T198404
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHyperLink@@UAE@XZ PROC NEAR				; CHyperLink::~CHyperLink
; _this$ = ecx

; 53   : {

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	6a ff		 push	 -1
  00115	68 00 00 00 00	 push	 __ehhandler$??1CHyperLink@@UAE@XZ
  0011a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00120	50		 push	 eax
  00121	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00128	51		 push	 ecx
  00129	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0012c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CHyperLink@@6B@
  00135	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 54   :     m_UnderlineFont.DeleteObject();

  0013c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	83 c1 74	 add	 ecx, 116		; 00000074H
  00142	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 55   : }

  00147	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0014b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00154	e8 00 00 00 00	 call	 ??1CToolTipCtrl@@UAE@XZ	; CToolTipCtrl::~CToolTipCtrl
  00159	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00163	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  00168	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0016c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	83 c1 74	 add	 ecx, 116		; 00000074H
  00172	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  00177	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0017b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	83 c1 70	 add	 ecx, 112		; 00000070H
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00187	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	e8 00 00 00 00	 call	 ??1CStatic@@UAE@XZ	; CStatic::~CStatic
  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198396:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1CStatic@@UAE@XZ	; CStatic::~CStatic
$L198397:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 70	 add	 ecx, 112		; 00000070H
  00042	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L198398:
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 74	 add	 ecx, 116		; 00000074H
  0004e	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L198399:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00059	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L198400:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00067	e9 00 00 00 00	 jmp	 ??1CToolTipCtrl@@UAE@XZ	; CToolTipCtrl::~CToolTipCtrl
__ehhandler$??1CHyperLink@@UAE@XZ:
  0006c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198402
  00071	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CHyperLink@@UAE@XZ ENDP				; CHyperLink::~CHyperLink
PUBLIC	?KillTimer@CWnd@@QAEHI@Z			; CWnd::KillTimer
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DestroyWindow@CHyperLink@@UAEHXZ PROC NEAR		; CHyperLink::DestroyWindow
; _this$ = ecx

; 61   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	51		 push	 ecx
  001b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   :     KillTimer(m_nTimerID);

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  001c0	51		 push	 ecx
  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer

; 63   : 	
; 64   : 	return CStatic::DestroyWindow();

  001c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cc	e8 00 00 00 00	 call	 ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow

; 65   : }

  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
?DestroyWindow@CHyperLink@@UAEHXZ ENDP			; CHyperLink::DestroyWindow
_TEXT	ENDS
PUBLIC	?RelayEvent@CToolTipCtrl@@QAEXPAUtagMSG@@@Z	; CToolTipCtrl::RelayEvent
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMsg$ = 8						; size = 4
?PreTranslateMessage@CHyperLink@@UAEHPAUtagMSG@@@Z PROC NEAR ; CHyperLink::PreTranslateMessage
; _this$ = ecx

; 68   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	51		 push	 ecx
  001e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 69   :     m_ToolTip.RelayEvent(pMsg);

  001e7	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  001ea	50		 push	 eax
  001eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ee	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  001f4	e8 00 00 00 00	 call	 ?RelayEvent@CToolTipCtrl@@QAEXPAUtagMSG@@@Z ; CToolTipCtrl::RelayEvent

; 70   :     return CStatic::PreTranslateMessage(pMsg);

  001f9	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  001fc	51		 push	 ecx
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00200	e8 00 00 00 00	 call	 ?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z ; CWnd::PreTranslateMessage

; 71   : }

  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c2 04 00	 ret	 4
?PreTranslateMessage@CHyperLink@@UAEHPAUtagMSG@@@Z ENDP	; CHyperLink::PreTranslateMessage
_TEXT	ENDS
PUBLIC	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetClientRect
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?SetUnderline@CHyperLink@@QAEXH@Z		; CHyperLink::SetUnderline
PUBLIC	?PositionWindow@CHyperLink@@IAEXXZ		; CHyperLink::PositionWindow
PUBLIC	?SetDefaultCursor@CHyperLink@@IAEXXZ		; CHyperLink::SetDefaultCursor
PUBLIC	?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z	; CFont::FromHandle
PUBLIC	?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
PUBLIC	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ		; CWnd::GetSafeHwnd
PUBLIC	?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z	; CFont::GetLogFont
PUBLIC	?GetFont@CWnd@@QBEPAVCFont@@XZ			; CWnd::GetFont
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:NEAR
EXTRN	__imp__GetStockObject@4:NEAR
EXTRN	__imp__SetWindowLongA@12:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	?GetStyle@CWnd@@QBEKXZ:NEAR			; CWnd::GetStyle
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBDPBUtagRECT@@I@Z:NEAR ; CToolTipCtrl::AddTool
EXTRN	?SetWindowTextA@CWnd@@QAEXPBD@Z:NEAR		; CWnd::SetWindowTextA
EXTRN	?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:NEAR ; CWnd::GetWindowTextA
xdata$x	SEGMENT
$T198416 DD	0ffffffffH
	DD	FLAT:$L198409
$T198411 DD	019930520H
	DD	01H
	DD	FLAT:$T198416
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -112						; size = 4
_hFont$197498 = -108					; size = 4
_strWndText$ = -104					; size = 4
_lf$ = -100						; size = 60
__$ArrayPad$ = -40					; size = 4
_dwStyle$ = -36						; size = 4
_pFont$ = -32						; size = 4
_rect$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
?PreSubclassWindow@CHyperLink@@MAEXXZ PROC NEAR		; CHyperLink::PreSubclassWindow
; _this$ = ecx

; 75   : {

  00210	55		 push	 ebp
  00211	8b ec		 mov	 ebp, esp
  00213	6a ff		 push	 -1
  00215	68 00 00 00 00	 push	 __ehhandler$?PreSubclassWindow@CHyperLink@@MAEXXZ
  0021a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00220	50		 push	 eax
  00221	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00228	83 ec 64	 sub	 esp, 100		; 00000064H
  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00230	89 45 d8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00233	89 4d 90	 mov	 DWORD PTR _this$[ebp], ecx

; 76   :     // We want to get mouse clicks via STN_CLICKED
; 77   :     DWORD dwStyle = GetStyle();

  00236	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00239	e8 00 00 00 00	 call	 ?GetStyle@CWnd@@QBEKXZ	; CWnd::GetStyle
  0023e	89 45 dc	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 78   :     ::SetWindowLong(GetSafeHwnd(), GWL_STYLE, dwStyle | SS_NOTIFY);

  00241	8b 45 dc	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00244	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  00249	50		 push	 eax
  0024a	6a f0		 push	 -16			; fffffff0H
  0024c	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0024f	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00254	50		 push	 eax
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 79   :     
; 80   :     // Set the URL as the window text
; 81   :     if (m_strURL.IsEmpty())

  0025b	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0025e	83 c1 70	 add	 ecx, 112		; 00000070H
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  00267	0f b6 c8	 movzx	 ecx, al
  0026a	85 c9		 test	 ecx, ecx
  0026c	74 0f		 je	 SHORT $L197492

; 82   :         GetWindowText(m_strURL);

  0026e	8b 55 90	 mov	 edx, DWORD PTR _this$[ebp]
  00271	83 c2 70	 add	 edx, 112		; 00000070H
  00274	52		 push	 edx
  00275	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00278	e8 00 00 00 00	 call	 ?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CWnd::GetWindowTextA
$L197492:

; 83   : 
; 84   :     // Check that the window text isn't empty. If it is, set it as the URL.
; 85   :     CString strWndText;

  0027d	8d 4d 98	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  00280	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00286	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 86   :     GetWindowText(strWndText);

  0028d	8d 45 98	 lea	 eax, DWORD PTR _strWndText$[ebp]
  00290	50		 push	 eax
  00291	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00294	e8 00 00 00 00	 call	 ?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CWnd::GetWindowTextA

; 87   :     if (strWndText.IsEmpty()) 

  00299	8d 4d 98	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  002a2	0f b6 c8	 movzx	 ecx, al
  002a5	85 c9		 test	 ecx, ecx
  002a7	74 15		 je	 SHORT $L197494

; 88   :     {
; 89   :         ASSERT(!m_strURL.IsEmpty());    // Window and URL both NULL. DUH!
; 90   :         SetWindowText(m_strURL);

  002a9	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  002ac	83 c1 70	 add	 ecx, 112		; 00000070H
  002af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002b5	50		 push	 eax
  002b6	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  002b9	e8 00 00 00 00	 call	 ?SetWindowTextA@CWnd@@QAEXPBD@Z ; CWnd::SetWindowTextA
$L197494:

; 91   :     }
; 92   : 
; 93   : 	CFont* pFont = GetFont();

  002be	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  002c1	e8 00 00 00 00	 call	 ?GetFont@CWnd@@QBEPAVCFont@@XZ ; CWnd::GetFont
  002c6	89 45 e0	 mov	 DWORD PTR _pFont$[ebp], eax

; 94   : 	if (!pFont)

  002c9	83 7d e0 00	 cmp	 DWORD PTR _pFont$[ebp], 0
  002cd	75 2e		 jne	 SHORT $L197497

; 95   : 	{
; 96   : 		HFONT hFont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);

  002cf	6a 11		 push	 17			; 00000011H
  002d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  002d7	89 45 94	 mov	 DWORD PTR _hFont$197498[ebp], eax

; 97   : 		if (hFont == NULL)

  002da	83 7d 94 00	 cmp	 DWORD PTR _hFont$197498[ebp], 0
  002de	75 0b		 jne	 SHORT $L197500

; 98   : 			hFont = (HFONT) GetStockObject(ANSI_VAR_FONT);

  002e0	6a 0c		 push	 12			; 0000000cH
  002e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  002e8	89 45 94	 mov	 DWORD PTR _hFont$197498[ebp], eax
$L197500:

; 99   : 		if (hFont)

  002eb	83 7d 94 00	 cmp	 DWORD PTR _hFont$197498[ebp], 0
  002ef	74 0c		 je	 SHORT $L197497

; 100  : 			pFont = CFont::FromHandle(hFont);

  002f1	8b 55 94	 mov	 edx, DWORD PTR _hFont$197498[ebp]
  002f4	52		 push	 edx
  002f5	e8 00 00 00 00	 call	 ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z ; CFont::FromHandle
  002fa	89 45 e0	 mov	 DWORD PTR _pFont$[ebp], eax
$L197497:

; 101  : 	}
; 102  : 	ASSERT(pFont->GetSafeHandle());
; 103  : 
; 104  :     // Create the underline font
; 105  :     LOGFONT lf;
; 106  :     pFont->GetLogFont(&lf);

  002fd	8d 45 9c	 lea	 eax, DWORD PTR _lf$[ebp]
  00300	50		 push	 eax
  00301	8b 4d e0	 mov	 ecx, DWORD PTR _pFont$[ebp]
  00304	e8 00 00 00 00	 call	 ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z ; CFont::GetLogFont

; 107  : 
; 108  : 	if( m_StdFont.m_hObject == NULL )

  00309	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0030c	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [ecx+128], 0
  00313	75 0f		 jne	 SHORT $L197505

; 109  : 	{
; 110  : 		m_StdFont.CreateFontIndirect(&lf);

  00315	8d 55 9c	 lea	 edx, DWORD PTR _lf$[ebp]
  00318	52		 push	 edx
  00319	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0031c	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0031f	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
$L197505:

; 111  : 	}
; 112  : 
; 113  :     lf.lfUnderline = (BYTE) TRUE;

  00324	c6 45 b1 01	 mov	 BYTE PTR _lf$[ebp+21], 1

; 114  : 	if( m_UnderlineFont.m_hObject == NULL )

  00328	8b 45 90	 mov	 eax, DWORD PTR _this$[ebp]
  0032b	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0032f	75 0f		 jne	 SHORT $L197507

; 115  : 	{
; 116  : 		m_UnderlineFont.CreateFontIndirect(&lf);

  00331	8d 4d 9c	 lea	 ecx, DWORD PTR _lf$[ebp]
  00334	51		 push	 ecx
  00335	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00338	83 c1 74	 add	 ecx, 116		; 00000074H
  0033b	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
$L197507:

; 117  : 	}
; 118  : 
; 119  :     PositionWindow();        // Adjust size of window to fit URL if necessary

  00340	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00343	e8 00 00 00 00	 call	 ?PositionWindow@CHyperLink@@IAEXXZ ; CHyperLink::PositionWindow

; 120  :     SetDefaultCursor();      // Try and load up a "hand" cursor

  00348	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0034b	e8 00 00 00 00	 call	 ?SetDefaultCursor@CHyperLink@@IAEXXZ ; CHyperLink::SetDefaultCursor

; 121  :     SetUnderline();

  00350	6a ff		 push	 -1
  00352	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  00355	e8 00 00 00 00	 call	 ?SetUnderline@CHyperLink@@QAEXH@Z ; CHyperLink::SetUnderline

; 122  : 
; 123  :     // Create the tooltip
; 124  :     CRect rect; 

  0035a	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  0035d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 125  :     GetClientRect(rect);

  00362	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00365	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0036a	50		 push	 eax
  0036b	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0036e	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 126  :     m_ToolTip.Create(this);

  00373	6a 00		 push	 0
  00375	8b 55 90	 mov	 edx, DWORD PTR _this$[ebp]
  00378	52		 push	 edx
  00379	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0037c	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00382	8b 45 90	 mov	 eax, DWORD PTR _this$[ebp]
  00385	8b 90 88 00 00
	00		 mov	 edx, DWORD PTR [eax+136]
  0038b	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]

; 127  :     m_ToolTip.AddTool(this, m_strURL, rect, TOOLTIP_ID);

  00391	6a 01		 push	 1
  00393	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00396	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0039b	50		 push	 eax
  0039c	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  0039f	83 c1 70	 add	 ecx, 112		; 00000070H
  003a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  003a8	50		 push	 eax
  003a9	8b 45 90	 mov	 eax, DWORD PTR _this$[ebp]
  003ac	50		 push	 eax
  003ad	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  003b0	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  003b6	e8 00 00 00 00	 call	 ?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBDPBUtagRECT@@I@Z ; CToolTipCtrl::AddTool

; 128  : 
; 129  :     CStatic::PreSubclassWindow();

  003bb	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  003be	e8 00 00 00 00	 call	 ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow

; 130  : }

  003c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003ca	8d 4d 98	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  003cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  003d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  003dd	8b 4d d8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e5	8b e5		 mov	 esp, ebp
  003e7	5d		 pop	 ebp
  003e8	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198409:
  00076	8d 4d 98	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  00079	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?PreSubclassWindow@CHyperLink@@MAEXXZ:
  0007f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198411
  00084	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?PreSubclassWindow@CHyperLink@@MAEXXZ ENDP		; CHyperLink::PreSubclassWindow
PUBLIC	?GetThisMessageMap@CHyperLink@@KGPBUAFX_MSGMAP@@XZ ; CHyperLink::GetThisMessageMap
; Function compile flags: /Odt
_TEXT	SEGMENT
?GetThisMessageMap@CHyperLink@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CHyperLink::GetThisMessageMap

; 132  : BEGIN_MESSAGE_MAP(CHyperLink, CStatic)

  003f0	55		 push	 ebp
  003f1	8b ec		 mov	 ebp, esp
  003f3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CHyperLink@@1UAFX_MSGMAP@@B ; CHyperLink::messageMap
  003f8	5d		 pop	 ebp
  003f9	c3		 ret	 0
?GetThisMessageMap@CHyperLink@@KGPBUAFX_MSGMAP@@XZ ENDP	; CHyperLink::GetThisMessageMap
; Function compile flags: /Odt
_this$ = -4						; size = 4
?GetMessageMap@CHyperLink@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CHyperLink::GetMessageMap
; _this$ = ecx

; 132  : BEGIN_MESSAGE_MAP(CHyperLink, CStatic)

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	51		 push	 ecx
  00404	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00407	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CHyperLink@@1UAFX_MSGMAP@@B ; CHyperLink::messageMap
  0040c	8b e5		 mov	 esp, ebp
  0040e	5d		 pop	 ebp
  0040f	c3		 ret	 0
?GetMessageMap@CHyperLink@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CHyperLink::GetMessageMap
_TEXT	ENDS
PUBLIC	?SetToolTip@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CHyperLink::SetToolTip
xdata$x	SEGMENT
$T198424 DD	0ffffffffH
	DD	FLAT:$L198420
$T198422 DD	019930520H
	DD	01H
	DD	FLAT:$T198424
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -32						; size = 4
_rect$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?SetToolTip@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CHyperLink::SetToolTip
; _this$ = ecx

; 147  : {

  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	6a ff		 push	 -1
  00415	68 00 00 00 00	 push	 __ehhandler$?SetToolTip@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0041a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00420	50		 push	 eax
  00421	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00428	83 ec 14	 sub	 esp, 20			; 00000014H
  0042b	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  0042e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 148  : 	CRect rect; 

  00435	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00438	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 149  : 	GetClientRect(rect);

  0043d	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00440	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00445	50		 push	 eax
  00446	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00449	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 150  : 	m_ToolTip.AddTool(this, str, rect, TOOLTIP_ID);

  0044e	6a 01		 push	 1
  00450	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00453	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00458	50		 push	 eax
  00459	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  0045c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00462	50		 push	 eax
  00463	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00466	50		 push	 eax
  00467	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0046a	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00470	e8 00 00 00 00	 call	 ?AddTool@CToolTipCtrl@@QAEHPAVCWnd@@PBDPBUtagRECT@@I@Z ; CToolTipCtrl::AddTool

; 151  : }

  00475	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0047c	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  0047f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00485	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00488	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0048f	8b e5		 mov	 esp, ebp
  00491	5d		 pop	 ebp
  00492	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L198420:
  00089	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  0008c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SetToolTip@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  00092	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198422
  00097	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetToolTip@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CHyperLink::SetToolTip
PUBLIC	?SetVisited@CHyperLink@@QAEXH@Z			; CHyperLink::SetVisited
PUBLIC	?GotoURL@CHyperLink@@IAEPAUHINSTANCE__@@PBDH@Z	; CHyperLink::GotoURL
PUBLIC	?ReportError@CHyperLink@@IAEXH@Z		; CHyperLink::ReportError
EXTRN	__imp__MessageBeep@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_result$ = -4						; size = 4
?OnClicked@CHyperLink@@IAEXXZ PROC NEAR			; CHyperLink::OnClicked
; _this$ = ecx

; 153  : {

  004a0	55		 push	 ebp
  004a1	8b ec		 mov	 ebp, esp
  004a3	83 ec 08	 sub	 esp, 8
  004a6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  :     m_bOverControl = FALSE;

  004a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ac	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 155  :     int result = (int)GotoURL(m_strURL, SW_SHOW);

  004b3	6a 05		 push	 5
  004b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004b8	83 c1 70	 add	 ecx, 112		; 00000070H
  004bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  004c1	50		 push	 eax
  004c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004c5	e8 00 00 00 00	 call	 ?GotoURL@CHyperLink@@IAEPAUHINSTANCE__@@PBDH@Z ; CHyperLink::GotoURL
  004ca	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 156  :     m_bVisited = (result > HINSTANCE_ERROR);

  004cd	33 c9		 xor	 ecx, ecx
  004cf	83 7d fc 20	 cmp	 DWORD PTR _result$[ebp], 32 ; 00000020H
  004d3	0f 9f c1	 setg	 cl
  004d6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004d9	89 4a 64	 mov	 DWORD PTR [edx+100], ecx

; 157  :     if (!m_bVisited)

  004dc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004df	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  004e3	75 16		 jne	 SHORT $L197551

; 158  :     {
; 159  :         MessageBeep(MB_ICONEXCLAMATION);     // Unable to follow link

  004e5	6a 30		 push	 48			; 00000030H
  004e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 160  :         ReportError(result);

  004ed	8b 4d fc	 mov	 ecx, DWORD PTR _result$[ebp]
  004f0	51		 push	 ecx
  004f1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004f4	e8 00 00 00 00	 call	 ?ReportError@CHyperLink@@IAEXH@Z ; CHyperLink::ReportError

; 161  :     }
; 162  :     else 

  004f9	eb 0a		 jmp	 SHORT $L197548
$L197551:

; 163  :         SetVisited();                        // Repaint to show visited colour

  004fb	6a 01		 push	 1
  004fd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00500	e8 00 00 00 00	 call	 ?SetVisited@CHyperLink@@QAEXH@Z ; CHyperLink::SetVisited
$L197548:

; 164  : }

  00505	8b e5		 mov	 esp, ebp
  00507	5d		 pop	 ebp
  00508	c3		 ret	 0
?OnClicked@CHyperLink@@IAEXXZ ENDP			; CHyperLink::OnClicked
_TEXT	ENDS
EXTRN	?SetBkMode@CDC@@QAEHH@Z:NEAR			; CDC::SetBkMode
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
_nCtlColor$ = 12					; size = 4
?CtlColor@CHyperLink@@IAEPAUHBRUSH__@@PAVCDC@@I@Z PROC NEAR ; CHyperLink::CtlColor
; _this$ = ecx

; 167  : {

  00510	55		 push	 ebp
  00511	8b ec		 mov	 ebp, esp
  00513	51		 push	 ecx
  00514	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 168  :     ASSERT(nCtlColor == CTLCOLOR_STATIC);
; 169  : 
; 170  :     if (m_bOverControl)

  00517	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0051a	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  0051e	74 14		 je	 SHORT $L197559

; 171  :         pDC->SetTextColor(m_crHoverColour);

  00520	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00523	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00526	52		 push	 edx
  00527	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  0052a	8b 10		 mov	 edx, DWORD PTR [eax]
  0052c	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0052f	ff 52 38	 call	 DWORD PTR [edx+56]

; 172  :     else if (m_bVisited)

  00532	eb 2f		 jmp	 SHORT $L197560
$L197559:
  00534	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00537	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  0053b	74 14		 je	 SHORT $L197561

; 173  :         pDC->SetTextColor(m_crVisitedColour);

  0053d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00540	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00543	52		 push	 edx
  00544	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  00547	8b 10		 mov	 edx, DWORD PTR [eax]
  00549	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0054c	ff 52 38	 call	 DWORD PTR [edx+56]

; 174  :     else

  0054f	eb 12		 jmp	 SHORT $L197560
$L197561:

; 175  :         pDC->SetTextColor(m_crLinkColour);

  00551	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00554	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00557	51		 push	 ecx
  00558	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  0055b	8b 02		 mov	 eax, DWORD PTR [edx]
  0055d	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00560	ff 50 38	 call	 DWORD PTR [eax+56]
$L197560:

; 176  : 
; 177  :     // transparent text.
; 178  :     pDC->SetBkMode(TRANSPARENT);

  00563	6a 01		 push	 1
  00565	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00568	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 179  :     return (HBRUSH)GetStockObject(NULL_BRUSH);

  0056d	6a 05		 push	 5
  0056f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4

; 180  : }

  00575	8b e5		 mov	 esp, ebp
  00577	5d		 pop	 ebp
  00578	c2 08 00	 ret	 8
?CtlColor@CHyperLink@@IAEPAUHBRUSH__@@PAVCDC@@I@Z ENDP	; CHyperLink::CtlColor
_TEXT	ENDS
PUBLIC	?Invalidate@CWnd@@QAEXH@Z			; CWnd::Invalidate
PUBLIC	?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z	; CWnd::SetTimer
PUBLIC	?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z		; CWnd::OnMouseMove
PUBLIC	?SetFont@CWnd@@QAEXPAVCFont@@H@Z		; CWnd::SetFont
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnMouseMove@CHyperLink@@IAEXIVCPoint@@@Z PROC NEAR	; CHyperLink::OnMouseMove
; _this$ = ecx

; 183  : {

  00580	55		 push	 ebp
  00581	8b ec		 mov	 ebp, esp
  00583	51		 push	 ecx
  00584	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  :     if (!m_bOverControl)        // Cursor has just moved over control

  00587	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0058a	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  0058e	75 44		 jne	 SHORT $L197569

; 185  :     {
; 186  :         m_bOverControl = TRUE;

  00590	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00593	c7 41 60 01 00
	00 00		 mov	 DWORD PTR [ecx+96], 1

; 187  : 
; 188  :         if (m_nUnderline == ulHover)

  0059a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0059d	83 7a 68 ff	 cmp	 DWORD PTR [edx+104], -1
  005a1	75 11		 jne	 SHORT $L197570

; 189  :             SetFont(&m_UnderlineFont);

  005a3	6a 01		 push	 1
  005a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005a8	83 c0 74	 add	 eax, 116		; 00000074H
  005ab	50		 push	 eax
  005ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005af	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont
$L197570:

; 190  :         Invalidate();

  005b4	6a 01		 push	 1
  005b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005b9	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate

; 191  : 
; 192  :         SetTimer(m_nTimerID, 100, NULL);

  005be	6a 00		 push	 0
  005c0	6a 64		 push	 100			; 00000064H
  005c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c5	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  005cb	52		 push	 edx
  005cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005cf	e8 00 00 00 00	 call	 ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ; CWnd::SetTimer
$L197569:

; 193  :     }
; 194  :     CStatic::OnMouseMove(nFlags, point);

  005d4	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  005d7	50		 push	 eax
  005d8	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  005db	51		 push	 ecx
  005dc	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  005df	52		 push	 edx
  005e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e3	e8 00 00 00 00	 call	 ?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z ; CWnd::OnMouseMove

; 195  : }

  005e8	8b e5		 mov	 esp, ebp
  005ea	5d		 pop	 ebp
  005eb	c2 0c 00	 ret	 12			; 0000000cH
?OnMouseMove@CHyperLink@@IAEXIVCPoint@@@Z ENDP		; CHyperLink::OnMouseMove
_TEXT	ENDS
PUBLIC	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetWindowRect
PUBLIC	?ScreenToClient@CWnd@@QBEXPAUtagPOINT@@@Z	; CWnd::ScreenToClient
PUBLIC	?UpdateWindow@CWnd@@QAEXXZ			; CWnd::UpdateWindow
PUBLIC	?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z	; CWnd::InvalidateRect
PUBLIC	??0CPoint@@QAE@J@Z				; CPoint::CPoint
PUBLIC	?PtInRect@CRect@@QBEHUtagPOINT@@@Z		; CRect::PtInRect
PUBLIC	?GetParent@CWnd@@QBEPAV1@XZ			; CWnd::GetParent
PUBLIC	?OnTimer@CWnd@@IAEXI@Z				; CWnd::OnTimer
EXTRN	?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::ScreenToClient
EXTRN	__imp__GetMessagePos@0:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T198429 = -32						; size = 8
_rect$ = -24						; size = 16
_p$ = -8						; size = 8
_nIDEvent$ = 8						; size = 4
?OnTimer@CHyperLink@@IAEXI@Z PROC NEAR			; CHyperLink::OnTimer
; _this$ = ecx

; 198  : {

  005f0	55		 push	 ebp
  005f1	8b ec		 mov	 ebp, esp
  005f3	83 ec 24	 sub	 esp, 36			; 00000024H
  005f6	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 199  :     CPoint p(GetMessagePos());

  005f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessagePos@0
  005ff	50		 push	 eax
  00600	8d 4d f8	 lea	 ecx, DWORD PTR _p$[ebp]
  00603	e8 00 00 00 00	 call	 ??0CPoint@@QAE@J@Z	; CPoint::CPoint

; 200  :     ScreenToClient(&p);

  00608	8d 45 f8	 lea	 eax, DWORD PTR _p$[ebp]
  0060b	50		 push	 eax
  0060c	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0060f	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagPOINT@@@Z ; CWnd::ScreenToClient

; 201  : 
; 202  :     CRect rect;

  00614	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00617	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 203  :     GetClientRect(rect);

  0061c	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  0061f	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00624	50		 push	 eax
  00625	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00628	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 204  :     if (!rect.PtInRect(p))

  0062d	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00630	89 4d e0	 mov	 DWORD PTR $T198429[ebp], ecx
  00633	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp+4]
  00636	89 55 e4	 mov	 DWORD PTR $T198429[ebp+4], edx
  00639	8b 45 e4	 mov	 eax, DWORD PTR $T198429[ebp+4]
  0063c	50		 push	 eax
  0063d	8b 4d e0	 mov	 ecx, DWORD PTR $T198429[ebp]
  00640	51		 push	 ecx
  00641	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00644	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  00649	85 c0		 test	 eax, eax
  0064b	0f 85 95 00 00
	00		 jne	 $L197578

; 205  :     {
; 206  :         m_bOverControl = FALSE;

  00651	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00654	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 207  :         KillTimer(m_nTimerID);

  0065b	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0065e	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00664	51		 push	 ecx
  00665	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00668	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer

; 208  : 
; 209  :         if (m_nUnderline != ulAlways)

  0066d	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00670	83 7a 68 01	 cmp	 DWORD PTR [edx+104], 1
  00674	74 11		 je	 SHORT $L197579

; 210  :             SetFont(&m_StdFont);

  00676	6a 01		 push	 1
  00678	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0067b	83 c0 7c	 add	 eax, 124		; 0000007cH
  0067e	50		 push	 eax
  0067f	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00682	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont
$L197579:

; 211  :         rect.bottom+=10;

  00687	8b 4d f4	 mov	 ecx, DWORD PTR _rect$[ebp+12]
  0068a	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0068d	89 4d f4	 mov	 DWORD PTR _rect$[ebp+12], ecx

; 212  :         InvalidateRect(rect);

  00690	6a 01		 push	 1
  00692	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  00695	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0069a	50		 push	 eax
  0069b	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0069e	e8 00 00 00 00	 call	 ?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::InvalidateRect

; 213  : 		GetWindowRect(&rect);

  006a3	8d 55 e8	 lea	 edx, DWORD PTR _rect$[ebp]
  006a6	52		 push	 edx
  006a7	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  006aa	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 214  : 		GetParent()->ScreenToClient(&rect);

  006af	8d 45 e8	 lea	 eax, DWORD PTR _rect$[ebp]
  006b2	50		 push	 eax
  006b3	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b6	e8 00 00 00 00	 call	 ?GetParent@CWnd@@QBEPAV1@XZ ; CWnd::GetParent
  006bb	8b c8		 mov	 ecx, eax
  006bd	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 215  : 		GetParent()->InvalidateRect(&rect);

  006c2	6a 01		 push	 1
  006c4	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  006c7	51		 push	 ecx
  006c8	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  006cb	e8 00 00 00 00	 call	 ?GetParent@CWnd@@QBEPAV1@XZ ; CWnd::GetParent
  006d0	8b c8		 mov	 ecx, eax
  006d2	e8 00 00 00 00	 call	 ?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::InvalidateRect

; 216  : 		GetParent()->UpdateWindow();

  006d7	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  006da	e8 00 00 00 00	 call	 ?GetParent@CWnd@@QBEPAV1@XZ ; CWnd::GetParent
  006df	8b c8		 mov	 ecx, eax
  006e1	e8 00 00 00 00	 call	 ?UpdateWindow@CWnd@@QAEXXZ ; CWnd::UpdateWindow
$L197578:

; 217  :     }
; 218  :     
; 219  : 	CStatic::OnTimer(nIDEvent);

  006e6	8b 55 08	 mov	 edx, DWORD PTR _nIDEvent$[ebp]
  006e9	52		 push	 edx
  006ea	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ed	e8 00 00 00 00	 call	 ?OnTimer@CWnd@@IAEXI@Z	; CWnd::OnTimer

; 220  : }

  006f2	8b e5		 mov	 esp, ebp
  006f4	5d		 pop	 ebp
  006f5	c2 04 00	 ret	 4
?OnTimer@CHyperLink@@IAEXI@Z ENDP			; CHyperLink::OnTimer
_TEXT	ENDS
EXTRN	__imp__SetCursor@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnSetCursor@CHyperLink@@IAEHPAVCWnd@@II@Z PROC NEAR	; CHyperLink::OnSetCursor
; _this$ = ecx

; 223  : {

  00700	55		 push	 ebp
  00701	8b ec		 mov	 ebp, esp
  00703	51		 push	 ecx
  00704	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 224  :     if (m_hLinkCursor)

  00707	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0070a	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00711	74 17		 je	 SHORT $L197586

; 225  :     {
; 226  :         ::SetCursor(m_hLinkCursor);

  00713	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00716	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0071c	52		 push	 edx
  0071d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 227  :         return TRUE;

  00723	b8 01 00 00 00	 mov	 eax, 1
  00728	eb 02		 jmp	 SHORT $L197585
$L197586:

; 228  :     }
; 229  :     return FALSE;

  0072a	33 c0		 xor	 eax, eax
$L197585:

; 230  : }

  0072c	8b e5		 mov	 esp, ebp
  0072e	5d		 pop	 ebp
  0072f	c2 0c 00	 ret	 12			; 0000000cH
?OnSetCursor@CHyperLink@@IAEHPAVCWnd@@II@Z ENDP		; CHyperLink::OnSetCursor
_TEXT	ENDS
EXTRN	__imp__GetSysColor@4:NEAR
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:NEAR	; CDC::FillSolidRect
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -20						; size = 4
_rect$ = -16						; size = 16
_pDC$ = 8						; size = 4
?OnEraseBkgnd@CHyperLink@@IAEHPAVCDC@@@Z PROC NEAR	; CHyperLink::OnEraseBkgnd
; _this$ = ecx

; 233  : {

  00740	55		 push	 ebp
  00741	8b ec		 mov	 ebp, esp
  00743	83 ec 14	 sub	 esp, 20			; 00000014H
  00746	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 234  :     CRect rect;

  00749	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  0074c	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 235  :     GetClientRect(rect);

  00751	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  00754	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00759	50		 push	 eax
  0075a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0075d	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 236  :     pDC->FillSolidRect(rect, ::GetSysColor(COLOR_3DFACE));

  00762	6a 0f		 push	 15			; 0000000fH
  00764	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0076a	50		 push	 eax
  0076b	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  0076e	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00773	50		 push	 eax
  00774	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00777	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 237  : 
; 238  :     return TRUE;

  0077c	b8 01 00 00 00	 mov	 eax, 1

; 239  : }

  00781	8b e5		 mov	 esp, ebp
  00783	5d		 pop	 ebp
  00784	c2 04 00	 ret	 4
?OnEraseBkgnd@CHyperLink@@IAEHPAVCDC@@@Z ENDP		; CHyperLink::OnEraseBkgnd
_TEXT	ENDS
PUBLIC	?SetURL@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CHyperLink::SetURL
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	__imp__IsWindow@4:NEAR
EXTRN	?UpdateTipText@CToolTipCtrl@@QAEXPBDPAVCWnd@@I@Z:NEAR ; CToolTipCtrl::UpdateTipText
xdata$x	SEGMENT
$T198437 DD	0ffffffffH
	DD	FLAT:$L198433
$T198435 DD	019930520H
	DD	01H
	DD	FLAT:$T198437
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strURL$ = 8						; size = 4
?SetURL@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CHyperLink::SetURL
; _this$ = ecx

; 245  : {

  00790	55		 push	 ebp
  00791	8b ec		 mov	 ebp, esp
  00793	6a ff		 push	 -1
  00795	68 00 00 00 00	 push	 __ehhandler$?SetURL@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0079a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  007a0	50		 push	 eax
  007a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  007a8	51		 push	 ecx
  007a9	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  007ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 246  :     m_strURL = strURL;

  007b3	8d 45 08	 lea	 eax, DWORD PTR _strURL$[ebp]
  007b6	50		 push	 eax
  007b7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007ba	83 c1 70	 add	 ecx, 112		; 00000070H
  007bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 247  : 
; 248  :     if (::IsWindow(GetSafeHwnd())) {

  007c3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007c6	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  007cb	50		 push	 eax
  007cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  007d2	85 c0		 test	 eax, eax
  007d4	74 26		 je	 SHORT $L197596

; 249  :         PositionWindow();

  007d6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007d9	e8 00 00 00 00	 call	 ?PositionWindow@CHyperLink@@IAEXXZ ; CHyperLink::PositionWindow

; 250  :         m_ToolTip.UpdateTipText(strURL, this, TOOLTIP_ID);

  007de	6a 01		 push	 1
  007e0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007e3	51		 push	 ecx
  007e4	8d 4d 08	 lea	 ecx, DWORD PTR _strURL$[ebp]
  007e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  007ed	50		 push	 eax
  007ee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007f1	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  007f7	e8 00 00 00 00	 call	 ?UpdateTipText@CToolTipCtrl@@QAEXPBDPAVCWnd@@I@Z ; CToolTipCtrl::UpdateTipText
$L197596:

; 251  :     }
; 252  : }

  007fc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00803	8d 4d 08	 lea	 ecx, DWORD PTR _strURL$[ebp]
  00806	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0080c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0080f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00816	8b e5		 mov	 esp, ebp
  00818	5d		 pop	 ebp
  00819	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L198433:
  0009c	8d 4d 08	 lea	 ecx, DWORD PTR _strURL$[ebp]
  0009f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SetURL@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  000a5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198435
  000aa	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetURL@CHyperLink@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CHyperLink::SetURL
PUBLIC	?GetURL@CHyperLink@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CHyperLink::GetURL
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T198440 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetURL@CHyperLink@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC NEAR ; CHyperLink::GetURL
; _this$ = ecx

; 255  : { 

  00820	55		 push	 ebp
  00821	8b ec		 mov	 ebp, esp
  00823	83 ec 08	 sub	 esp, 8
  00826	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00829	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T198440[ebp], 0

; 256  :     return m_strURL;   

  00830	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00833	83 c0 70	 add	 eax, 112		; 00000070H
  00836	50		 push	 eax
  00837	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0083a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00840	8b 4d fc	 mov	 ecx, DWORD PTR $T198440[ebp]
  00843	83 c9 01	 or	 ecx, 1
  00846	89 4d fc	 mov	 DWORD PTR $T198440[ebp], ecx
  00849	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 257  : }

  0084c	8b e5		 mov	 esp, ebp
  0084e	5d		 pop	 ebp
  0084f	c2 04 00	 ret	 4
?GetURL@CHyperLink@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CHyperLink::GetURL
_TEXT	ENDS
PUBLIC	?SetColours@CHyperLink@@QAEXKKK@Z		; CHyperLink::SetColours
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crLinkColour$ = 8					; size = 4
_crVisitedColour$ = 12					; size = 4
_crHoverColour$ = 16					; size = 4
?SetColours@CHyperLink@@QAEXKKK@Z PROC NEAR		; CHyperLink::SetColours
; _this$ = ecx

; 261  : { 

  00860	55		 push	 ebp
  00861	8b ec		 mov	 ebp, esp
  00863	51		 push	 ecx
  00864	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 262  :     m_crLinkColour    = crLinkColour; 

  00867	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0086a	8b 4d 08	 mov	 ecx, DWORD PTR _crLinkColour$[ebp]
  0086d	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 263  :     m_crVisitedColour = crVisitedColour;

  00870	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00873	8b 45 0c	 mov	 eax, DWORD PTR _crVisitedColour$[ebp]
  00876	89 42 58	 mov	 DWORD PTR [edx+88], eax

; 264  : 
; 265  : 	if (crHoverColour == -1)

  00879	83 7d 10 ff	 cmp	 DWORD PTR _crHoverColour$[ebp], -1
  0087d	75 10		 jne	 SHORT $L197607

; 266  : 		m_crHoverColour = ::GetSysColor(COLOR_HIGHLIGHT);

  0087f	6a 0d		 push	 13			; 0000000dH
  00881	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00887	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0088a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 267  : 	else

  0088d	eb 09		 jmp	 SHORT $L197608
$L197607:

; 268  : 		m_crHoverColour = crHoverColour;

  0088f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00892	8b 45 10	 mov	 eax, DWORD PTR _crHoverColour$[ebp]
  00895	89 42 5c	 mov	 DWORD PTR [edx+92], eax
$L197608:

; 269  : 
; 270  :     if (::IsWindow(m_hWnd))

  00898	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0089b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0089e	52		 push	 edx
  0089f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  008a5	85 c0		 test	 eax, eax
  008a7	74 0a		 je	 SHORT $L197606

; 271  :         Invalidate(); 

  008a9	6a 01		 push	 1
  008ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008ae	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L197606:

; 272  : }

  008b3	8b e5		 mov	 esp, ebp
  008b5	5d		 pop	 ebp
  008b6	c2 0c 00	 ret	 12			; 0000000cH
?SetColours@CHyperLink@@QAEXKKK@Z ENDP			; CHyperLink::SetColours
_TEXT	ENDS
PUBLIC	?GetLinkColour@CHyperLink@@QBEKXZ		; CHyperLink::GetLinkColour
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLinkColour@CHyperLink@@QBEKXZ PROC NEAR		; CHyperLink::GetLinkColour
; _this$ = ecx

; 275  : { 

  008c0	55		 push	 ebp
  008c1	8b ec		 mov	 ebp, esp
  008c3	51		 push	 ecx
  008c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :     return m_crLinkColour; 

  008c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008ca	8b 40 54	 mov	 eax, DWORD PTR [eax+84]

; 277  : }

  008cd	8b e5		 mov	 esp, ebp
  008cf	5d		 pop	 ebp
  008d0	c3		 ret	 0
?GetLinkColour@CHyperLink@@QBEKXZ ENDP			; CHyperLink::GetLinkColour
_TEXT	ENDS
PUBLIC	?GetVisitedColour@CHyperLink@@QBEKXZ		; CHyperLink::GetVisitedColour
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVisitedColour@CHyperLink@@QBEKXZ PROC NEAR		; CHyperLink::GetVisitedColour
; _this$ = ecx

; 280  : {

  008e0	55		 push	 ebp
  008e1	8b ec		 mov	 ebp, esp
  008e3	51		 push	 ecx
  008e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  :     return m_crVisitedColour; 

  008e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008ea	8b 40 58	 mov	 eax, DWORD PTR [eax+88]

; 282  : }

  008ed	8b e5		 mov	 esp, ebp
  008ef	5d		 pop	 ebp
  008f0	c3		 ret	 0
?GetVisitedColour@CHyperLink@@QBEKXZ ENDP		; CHyperLink::GetVisitedColour
_TEXT	ENDS
PUBLIC	?GetHoverColour@CHyperLink@@QBEKXZ		; CHyperLink::GetHoverColour
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHoverColour@CHyperLink@@QBEKXZ PROC NEAR		; CHyperLink::GetHoverColour
; _this$ = ecx

; 285  : {

  00900	55		 push	 ebp
  00901	8b ec		 mov	 ebp, esp
  00903	51		 push	 ecx
  00904	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  :     return m_crHoverColour;

  00907	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0090a	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]

; 287  : }

  0090d	8b e5		 mov	 esp, ebp
  0090f	5d		 pop	 ebp
  00910	c3		 ret	 0
?GetHoverColour@CHyperLink@@QBEKXZ ENDP			; CHyperLink::GetHoverColour
; Function compile flags: /Odt
_this$ = -4						; size = 4
_bVisited$ = 8						; size = 4
?SetVisited@CHyperLink@@QAEXH@Z PROC NEAR		; CHyperLink::SetVisited
; _this$ = ecx

; 290  : { 

  00920	55		 push	 ebp
  00921	8b ec		 mov	 ebp, esp
  00923	51		 push	 ecx
  00924	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     m_bVisited = bVisited; 

  00927	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0092a	8b 4d 08	 mov	 ecx, DWORD PTR _bVisited$[ebp]
  0092d	89 48 64	 mov	 DWORD PTR [eax+100], ecx

; 292  : 
; 293  :     if (::IsWindow(GetSafeHwnd()))

  00930	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00933	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00938	50		 push	 eax
  00939	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0093f	85 c0		 test	 eax, eax
  00941	74 0a		 je	 SHORT $L197622

; 294  :         Invalidate(); 

  00943	6a 01		 push	 1
  00945	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00948	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L197622:

; 295  : }

  0094d	8b e5		 mov	 esp, ebp
  0094f	5d		 pop	 ebp
  00950	c2 04 00	 ret	 4
?SetVisited@CHyperLink@@QAEXH@Z ENDP			; CHyperLink::SetVisited
_TEXT	ENDS
PUBLIC	?GetVisited@CHyperLink@@QBEHXZ			; CHyperLink::GetVisited
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVisited@CHyperLink@@QBEHXZ PROC NEAR		; CHyperLink::GetVisited
; _this$ = ecx

; 298  : { 

  00960	55		 push	 ebp
  00961	8b ec		 mov	 ebp, esp
  00963	51		 push	 ecx
  00964	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  :     return m_bVisited; 

  00967	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0096a	8b 40 64	 mov	 eax, DWORD PTR [eax+100]

; 300  : }

  0096d	8b e5		 mov	 esp, ebp
  0096f	5d		 pop	 ebp
  00970	c3		 ret	 0
?GetVisited@CHyperLink@@QBEHXZ ENDP			; CHyperLink::GetVisited
_TEXT	ENDS
PUBLIC	?SetLinkCursor@CHyperLink@@QAEXPAUHICON__@@@Z	; CHyperLink::SetLinkCursor
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hCursor$ = 8						; size = 4
?SetLinkCursor@CHyperLink@@QAEXPAUHICON__@@@Z PROC NEAR	; CHyperLink::SetLinkCursor
; _this$ = ecx

; 303  : { 

  00980	55		 push	 ebp
  00981	8b ec		 mov	 ebp, esp
  00983	51		 push	 ecx
  00984	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  :     m_hLinkCursor = hCursor;

  00987	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0098a	8b 4d 08	 mov	 ecx, DWORD PTR _hCursor$[ebp]
  0098d	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx

; 305  :     if (m_hLinkCursor == NULL)

  00993	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00996	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  0099d	75 08		 jne	 SHORT $L197630

; 306  :         SetDefaultCursor();

  0099f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009a2	e8 00 00 00 00	 call	 ?SetDefaultCursor@CHyperLink@@IAEXXZ ; CHyperLink::SetDefaultCursor
$L197630:

; 307  : }

  009a7	8b e5		 mov	 esp, ebp
  009a9	5d		 pop	 ebp
  009aa	c2 04 00	 ret	 4
?SetLinkCursor@CHyperLink@@QAEXPAUHICON__@@@Z ENDP	; CHyperLink::SetLinkCursor
_TEXT	ENDS
PUBLIC	?GetLinkCursor@CHyperLink@@QBEPAUHICON__@@XZ	; CHyperLink::GetLinkCursor
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLinkCursor@CHyperLink@@QBEPAUHICON__@@XZ PROC NEAR	; CHyperLink::GetLinkCursor
; _this$ = ecx

; 310  : {

  009b0	55		 push	 ebp
  009b1	8b ec		 mov	 ebp, esp
  009b3	51		 push	 ecx
  009b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 311  :     return m_hLinkCursor;

  009b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009ba	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]

; 312  : }

  009c0	8b e5		 mov	 esp, ebp
  009c2	5d		 pop	 ebp
  009c3	c3		 ret	 0
?GetLinkCursor@CHyperLink@@QBEPAUHICON__@@XZ ENDP	; CHyperLink::GetLinkCursor
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nUnderline$ = 8					; size = 4
?SetUnderline@CHyperLink@@QAEXH@Z PROC NEAR		; CHyperLink::SetUnderline
; _this$ = ecx

; 315  : {

  009d0	55		 push	 ebp
  009d1	8b ec		 mov	 ebp, esp
  009d3	51		 push	 ecx
  009d4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 316  :     if (m_nUnderline == nUnderline)

  009d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009da	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  009dd	3b 4d 08	 cmp	 ecx, DWORD PTR _nUnderline$[ebp]
  009e0	75 02		 jne	 SHORT $L197639

; 317  :         return;

  009e2	eb 50		 jmp	 SHORT $L197638
$L197639:

; 318  : 
; 319  :     if (::IsWindow(GetSafeHwnd()))

  009e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009e7	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  009ec	50		 push	 eax
  009ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  009f3	85 c0		 test	 eax, eax
  009f5	74 34		 je	 SHORT $L197640

; 320  :     {
; 321  :         if (nUnderline == ulAlways)

  009f7	83 7d 08 01	 cmp	 DWORD PTR _nUnderline$[ebp], 1
  009fb	75 13		 jne	 SHORT $L197641

; 322  :             SetFont(&m_UnderlineFont);

  009fd	6a 01		 push	 1
  009ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a02	83 c2 74	 add	 edx, 116		; 00000074H
  00a05	52		 push	 edx
  00a06	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a09	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 323  :         else

  00a0e	eb 11		 jmp	 SHORT $L197642
$L197641:

; 324  :             SetFont(&m_StdFont);

  00a10	6a 01		 push	 1
  00a12	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a15	83 c0 7c	 add	 eax, 124		; 0000007cH
  00a18	50		 push	 eax
  00a19	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a1c	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont
$L197642:

; 325  : 
; 326  :         Invalidate(); 

  00a21	6a 01		 push	 1
  00a23	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a26	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L197640:

; 327  :     }
; 328  : 
; 329  :     m_nUnderline = nUnderline;

  00a2b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a2e	8b 55 08	 mov	 edx, DWORD PTR _nUnderline$[ebp]
  00a31	89 51 68	 mov	 DWORD PTR [ecx+104], edx
$L197638:

; 330  : }

  00a34	8b e5		 mov	 esp, ebp
  00a36	5d		 pop	 ebp
  00a37	c2 04 00	 ret	 4
?SetUnderline@CHyperLink@@QAEXH@Z ENDP			; CHyperLink::SetUnderline
_TEXT	ENDS
PUBLIC	?GetUnderline@CHyperLink@@QBEHXZ		; CHyperLink::GetUnderline
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnderline@CHyperLink@@QBEHXZ PROC NEAR		; CHyperLink::GetUnderline
; _this$ = ecx

; 333  : { 

  00a40	55		 push	 ebp
  00a41	8b ec		 mov	 ebp, esp
  00a43	51		 push	 ecx
  00a44	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return m_nUnderline; 

  00a47	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a4a	8b 40 68	 mov	 eax, DWORD PTR [eax+104]

; 335  : }

  00a4d	8b e5		 mov	 esp, ebp
  00a4f	5d		 pop	 ebp
  00a50	c3		 ret	 0
?GetUnderline@CHyperLink@@QBEHXZ ENDP			; CHyperLink::GetUnderline
_TEXT	ENDS
PUBLIC	?SetAutoSize@CHyperLink@@QAEXH@Z		; CHyperLink::SetAutoSize
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bAutoSize$ = 8						; size = 4
?SetAutoSize@CHyperLink@@QAEXH@Z PROC NEAR		; CHyperLink::SetAutoSize
; _this$ = ecx

; 338  : {

  00a60	55		 push	 ebp
  00a61	8b ec		 mov	 ebp, esp
  00a63	51		 push	 ecx
  00a64	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :     m_bAdjustToFit = bAutoSize;

  00a67	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a6a	8b 4d 08	 mov	 ecx, DWORD PTR _bAutoSize$[ebp]
  00a6d	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 340  : 
; 341  :     if (::IsWindow(GetSafeHwnd()))

  00a70	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a73	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00a78	50		 push	 eax
  00a79	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00a7f	85 c0		 test	 eax, eax
  00a81	74 08		 je	 SHORT $L197649

; 342  :         PositionWindow();

  00a83	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a86	e8 00 00 00 00	 call	 ?PositionWindow@CHyperLink@@IAEXXZ ; CHyperLink::PositionWindow
$L197649:

; 343  : }

  00a8b	8b e5		 mov	 esp, ebp
  00a8d	5d		 pop	 ebp
  00a8e	c2 04 00	 ret	 4
?SetAutoSize@CHyperLink@@QAEXH@Z ENDP			; CHyperLink::SetAutoSize
_TEXT	ENDS
PUBLIC	?GetAutoSize@CHyperLink@@QBEHXZ			; CHyperLink::GetAutoSize
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAutoSize@CHyperLink@@QBEHXZ PROC NEAR		; CHyperLink::GetAutoSize
; _this$ = ecx

; 346  : { 

  00aa0	55		 push	 ebp
  00aa1	8b ec		 mov	 ebp, esp
  00aa3	51		 push	 ecx
  00aa4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 347  :     return m_bAdjustToFit; 

  00aa7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00aaa	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]

; 348  : }

  00aad	8b e5		 mov	 esp, ebp
  00aaf	5d		 pop	 ebp
  00ab0	c3		 ret	 0
?GetAutoSize@CHyperLink@@QBEHXZ ENDP			; CHyperLink::GetAutoSize
_TEXT	ENDS
PUBLIC	?GetDC@CWnd@@QAEPAVCDC@@XZ			; CWnd::GetDC
PUBLIC	?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z			; CWnd::ReleaseDC
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?DeflateRect@CRect@@QAEXHH@Z			; CRect::DeflateRect
PUBLIC	?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDC::GetTextExtent
EXTRN	?ClientToScreen@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::ClientToScreen
EXTRN	?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z:NEAR	; CWnd::SetWindowPos
xdata$x	SEGMENT
$T198459 DD	0ffffffffH
	DD	FLAT:$L198455
$T198457 DD	019930520H
	DD	01H
	DD	FLAT:$T198459
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -76						; size = 4
_pParent$ = -72						; size = 4
_WndRect$ = -68						; size = 16
_strWndText$ = -52					; size = 4
_dwStyle$ = -48						; size = 4
_pDC$ = -44						; size = 4
_Extent$ = -40						; size = 8
_ClientRect$ = -32					; size = 16
_pOldFont$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?PositionWindow@CHyperLink@@IAEXXZ PROC NEAR		; CHyperLink::PositionWindow
; _this$ = ecx

; 360  : {

  00ac0	55		 push	 ebp
  00ac1	8b ec		 mov	 ebp, esp
  00ac3	6a ff		 push	 -1
  00ac5	68 00 00 00 00	 push	 __ehhandler$?PositionWindow@CHyperLink@@IAEXXZ
  00aca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00ad0	50		 push	 eax
  00ad1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00ad8	83 ec 40	 sub	 esp, 64			; 00000040H
  00adb	56		 push	 esi
  00adc	89 4d b4	 mov	 DWORD PTR _this$[ebp], ecx

; 361  :     if (!::IsWindow(GetSafeHwnd()) || !m_bAdjustToFit) 

  00adf	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ae2	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00ae7	50		 push	 eax
  00ae8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00aee	85 c0		 test	 eax, eax
  00af0	74 09		 je	 SHORT $L197658
  00af2	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  00af5	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  00af9	75 05		 jne	 SHORT $L197657
$L197658:

; 362  :         return;

  00afb	e9 c4 01 00 00	 jmp	 $L197656
$L197657:

; 363  : 
; 364  :     // Get the current window position
; 365  :     CRect WndRect, ClientRect;

  00b00	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00b03	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  00b08	8d 4d e0	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00b0b	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 366  :     GetWindowRect(WndRect);

  00b10	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00b13	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00b18	50		 push	 eax
  00b19	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1c	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 367  :     GetClientRect(ClientRect);

  00b21	8d 4d e0	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00b24	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00b29	50		 push	 eax
  00b2a	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2d	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 368  : 
; 369  :     ClientToScreen(ClientRect);

  00b32	8d 4d e0	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00b35	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00b3a	50		 push	 eax
  00b3b	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b3e	e8 00 00 00 00	 call	 ?ClientToScreen@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ClientToScreen

; 370  : 
; 371  :     CWnd* pParent = GetParent();

  00b43	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b46	e8 00 00 00 00	 call	 ?GetParent@CWnd@@QBEPAV1@XZ ; CWnd::GetParent
  00b4b	89 45 b8	 mov	 DWORD PTR _pParent$[ebp], eax

; 372  :     if (pParent)

  00b4e	83 7d b8 00	 cmp	 DWORD PTR _pParent$[ebp], 0
  00b52	74 22		 je	 SHORT $L197662

; 373  :     {
; 374  :         pParent->ScreenToClient(WndRect);

  00b54	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00b57	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00b5c	50		 push	 eax
  00b5d	8b 4d b8	 mov	 ecx, DWORD PTR _pParent$[ebp]
  00b60	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 375  :         pParent->ScreenToClient(ClientRect);

  00b65	8d 4d e0	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00b68	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00b6d	50		 push	 eax
  00b6e	8b 4d b8	 mov	 ecx, DWORD PTR _pParent$[ebp]
  00b71	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient
$L197662:

; 376  :     }
; 377  : 
; 378  :     // Get the size of the window text
; 379  :     CString strWndText;

  00b76	8d 4d cc	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  00b79	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00b7f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 380  :     GetWindowText(strWndText);

  00b86	8d 4d cc	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  00b89	51		 push	 ecx
  00b8a	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b8d	e8 00 00 00 00	 call	 ?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CWnd::GetWindowTextA

; 381  : 
; 382  :     CDC* pDC = GetDC();

  00b92	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b95	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  00b9a	89 45 d4	 mov	 DWORD PTR _pDC$[ebp], eax

; 383  :     CFont* pOldFont = pDC->SelectObject(&m_UnderlineFont);

  00b9d	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00ba0	83 c2 74	 add	 edx, 116		; 00000074H
  00ba3	52		 push	 edx
  00ba4	8b 45 d4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00ba7	8b 10		 mov	 edx, DWORD PTR [eax]
  00ba9	8b 4d d4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00bac	ff 52 30	 call	 DWORD PTR [edx+48]
  00baf	89 45 f0	 mov	 DWORD PTR _pOldFont$[ebp], eax

; 384  :     CSize Extent = pDC->GetTextExtent(strWndText);

  00bb2	8d 45 cc	 lea	 eax, DWORD PTR _strWndText$[ebp]
  00bb5	50		 push	 eax
  00bb6	8d 4d d8	 lea	 ecx, DWORD PTR _Extent$[ebp]
  00bb9	51		 push	 ecx
  00bba	8b 4d d4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00bbd	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDC::GetTextExtent

; 385  :     pDC->SelectObject(pOldFont);

  00bc2	8b 55 f0	 mov	 edx, DWORD PTR _pOldFont$[ebp]
  00bc5	52		 push	 edx
  00bc6	8b 45 d4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00bc9	8b 10		 mov	 edx, DWORD PTR [eax]
  00bcb	8b 4d d4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00bce	ff 52 30	 call	 DWORD PTR [edx+48]

; 386  :     ReleaseDC(pDC);

  00bd1	8b 45 d4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00bd4	50		 push	 eax
  00bd5	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd8	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 387  : 
; 388  :     // Adjust for window borders
; 389  :     Extent.cx += WndRect.Width() - ClientRect.Width(); 

  00bdd	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00be0	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00be5	8b f0		 mov	 esi, eax
  00be7	8d 4d e0	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00bea	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00bef	2b f0		 sub	 esi, eax
  00bf1	03 75 d8	 add	 esi, DWORD PTR _Extent$[ebp]
  00bf4	89 75 d8	 mov	 DWORD PTR _Extent$[ebp], esi

; 390  :     Extent.cy += WndRect.Height() - ClientRect.Height(); 

  00bf7	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00bfa	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00bff	8b f0		 mov	 esi, eax
  00c01	8d 4d e0	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00c04	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00c09	2b f0		 sub	 esi, eax
  00c0b	03 75 dc	 add	 esi, DWORD PTR _Extent$[ebp+4]
  00c0e	89 75 dc	 mov	 DWORD PTR _Extent$[ebp+4], esi

; 391  : 
; 392  :     // Get the text justification via the window style
; 393  :     DWORD dwStyle = GetStyle();

  00c11	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00c14	e8 00 00 00 00	 call	 ?GetStyle@CWnd@@QBEKXZ	; CWnd::GetStyle
  00c19	89 45 d0	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 394  : 
; 395  :     // Recalc the window size and position based on the text justification
; 396  :     if (dwStyle & SS_CENTERIMAGE)

  00c1c	8b 4d d0	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  00c1f	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00c25	74 1d		 je	 SHORT $L197669

; 397  :         WndRect.DeflateRect(0, (WndRect.Height() - Extent.cy)/2);

  00c27	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00c2a	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00c2f	2b 45 dc	 sub	 eax, DWORD PTR _Extent$[ebp+4]
  00c32	99		 cdq
  00c33	2b c2		 sub	 eax, edx
  00c35	d1 f8		 sar	 eax, 1
  00c37	50		 push	 eax
  00c38	6a 00		 push	 0
  00c3a	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00c3d	e8 00 00 00 00	 call	 ?DeflateRect@CRect@@QAEXHH@Z ; CRect::DeflateRect

; 398  :     else

  00c42	eb 09		 jmp	 SHORT $L197670
$L197669:

; 399  :         WndRect.bottom = WndRect.top + Extent.cy;

  00c44	8b 55 c0	 mov	 edx, DWORD PTR _WndRect$[ebp+4]
  00c47	03 55 dc	 add	 edx, DWORD PTR _Extent$[ebp+4]
  00c4a	89 55 c8	 mov	 DWORD PTR _WndRect$[ebp+12], edx
$L197670:

; 400  : 
; 401  :     if (dwStyle & SS_CENTER)   

  00c4d	8b 45 d0	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00c50	83 e0 01	 and	 eax, 1
  00c53	74 1d		 je	 SHORT $L197671

; 402  :         WndRect.DeflateRect((WndRect.Width() - Extent.cx)/2, 0);

  00c55	6a 00		 push	 0
  00c57	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00c5a	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00c5f	2b 45 d8	 sub	 eax, DWORD PTR _Extent$[ebp]
  00c62	99		 cdq
  00c63	2b c2		 sub	 eax, edx
  00c65	d1 f8		 sar	 eax, 1
  00c67	50		 push	 eax
  00c68	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00c6b	e8 00 00 00 00	 call	 ?DeflateRect@CRect@@QAEXHH@Z ; CRect::DeflateRect

; 403  :     else if (dwStyle & SS_RIGHT) 

  00c70	eb 1c		 jmp	 SHORT $L197672
$L197671:
  00c72	8b 4d d0	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  00c75	83 e1 02	 and	 ecx, 2
  00c78	74 0b		 je	 SHORT $L197673

; 404  :         WndRect.left  = WndRect.right - Extent.cx;

  00c7a	8b 55 c4	 mov	 edx, DWORD PTR _WndRect$[ebp+8]
  00c7d	2b 55 d8	 sub	 edx, DWORD PTR _Extent$[ebp]
  00c80	89 55 bc	 mov	 DWORD PTR _WndRect$[ebp], edx

; 405  :     else // SS_LEFT = 0, so we can't test for it explicitly 

  00c83	eb 09		 jmp	 SHORT $L197672
$L197673:

; 406  :         WndRect.right = WndRect.left + Extent.cx;

  00c85	8b 45 bc	 mov	 eax, DWORD PTR _WndRect$[ebp]
  00c88	03 45 d8	 add	 eax, DWORD PTR _Extent$[ebp]
  00c8b	89 45 c4	 mov	 DWORD PTR _WndRect$[ebp+8], eax
$L197672:

; 407  : 
; 408  :     // Move the window
; 409  :     SetWindowPos(NULL, WndRect.left, WndRect.top, WndRect.Width(), WndRect.Height(), SWP_NOZORDER);

  00c8e	6a 04		 push	 4
  00c90	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00c93	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00c98	50		 push	 eax
  00c99	8d 4d bc	 lea	 ecx, DWORD PTR _WndRect$[ebp]
  00c9c	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00ca1	50		 push	 eax
  00ca2	8b 4d c0	 mov	 ecx, DWORD PTR _WndRect$[ebp+4]
  00ca5	51		 push	 ecx
  00ca6	8b 55 bc	 mov	 edx, DWORD PTR _WndRect$[ebp]
  00ca9	52		 push	 edx
  00caa	6a 00		 push	 0
  00cac	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00caf	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 410  : }

  00cb4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00cbb	8d 4d cc	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  00cbe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L197656:
  00cc4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00cc7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00cce	5e		 pop	 esi
  00ccf	8b e5		 mov	 esp, ebp
  00cd1	5d		 pop	 ebp
  00cd2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198455:
  000af	8d 4d cc	 lea	 ecx, DWORD PTR _strWndText$[ebp]
  000b2	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?PositionWindow@CHyperLink@@IAEXXZ:
  000b8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198457
  000bd	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?PositionWindow@CHyperLink@@IAEXXZ ENDP			; CHyperLink::PositionWindow
EXTRN	__imp__CopyIcon@4:NEAR
EXTRN	__imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z:NEAR
EXTRN	__imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z:NEAR
EXTRN	__imp__FreeLibrary@4:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
EXTRN	__imp__LoadLibraryA@4:NEAR
EXTRN	__imp__LoadCursorA@8:NEAR
EXTRN	__imp__GetWindowsDirectoryA@8:NEAR
xdata$x	SEGMENT
$T198465 DD	0ffffffffH
	DD	FLAT:$L198461
$T198463 DD	019930520H
	DD	01H
	DD	FLAT:$T198465
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
_hHandCursor$197683 = -24				; size = 4
_hModule$197681 = -20					; size = 4
_strWndDir$197679 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SetDefaultCursor@CHyperLink@@IAEXXZ PROC NEAR		; CHyperLink::SetDefaultCursor
; _this$ = ecx

; 418  : {

  00ce0	55		 push	 ebp
  00ce1	8b ec		 mov	 ebp, esp
  00ce3	6a ff		 push	 -1
  00ce5	68 00 00 00 00	 push	 __ehhandler$?SetDefaultCursor@CHyperLink@@IAEXXZ
  00cea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00cf0	50		 push	 eax
  00cf1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00cf8	83 ec 10	 sub	 esp, 16			; 00000010H
  00cfb	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 419  :     if (m_hLinkCursor == NULL)                // No cursor handle - load our own

  00cfe	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00d01	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00d08	0f 85 9e 00 00
	00		 jne	 $L197677

; 420  :     {
; 421  :         // Get the windows directory
; 422  :         CString strWndDir;

  00d0e	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  00d11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00d17	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 423  :         GetWindowsDirectory(strWndDir.GetBuffer(MAX_PATH), MAX_PATH);

  00d1e	68 04 01 00 00	 push	 260			; 00000104H
  00d23	68 04 01 00 00	 push	 260			; 00000104H
  00d28	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  00d2b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z
  00d31	50		 push	 eax
  00d32	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowsDirectoryA@8

; 424  :         strWndDir.ReleaseBuffer();

  00d38	6a ff		 push	 -1
  00d3a	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  00d3d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z

; 425  : 
; 426  :         strWndDir += _T("\\winhlp32.exe");

  00d43	68 00 00 00 00	 push	 OFFSET FLAT:$SG197680
  00d48	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  00d4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 427  :         // This retrieves cursor #106 from winhlp32.exe, which is a hand pointer
; 428  :         HMODULE hModule = LoadLibrary(strWndDir);

  00d51	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  00d54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00d5a	50		 push	 eax
  00d5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00d61	89 45 ec	 mov	 DWORD PTR _hModule$197681[ebp], eax

; 429  :         if (hModule) {

  00d64	83 7d ec 00	 cmp	 DWORD PTR _hModule$197681[ebp], 0
  00d68	74 28		 je	 SHORT $L197682

; 430  :             HCURSOR hHandCursor = ::LoadCursor(hModule, MAKEINTRESOURCE(106));

  00d6a	6a 6a		 push	 106			; 0000006aH
  00d6c	8b 4d ec	 mov	 ecx, DWORD PTR _hModule$197681[ebp]
  00d6f	51		 push	 ecx
  00d70	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00d76	89 45 e8	 mov	 DWORD PTR _hHandCursor$197683[ebp], eax

; 431  :             if (hHandCursor)

  00d79	83 7d e8 00	 cmp	 DWORD PTR _hHandCursor$197683[ebp], 0
  00d7d	74 13		 je	 SHORT $L197682

; 432  :                 m_hLinkCursor = CopyCursor(hHandCursor);

  00d7f	8b 55 e8	 mov	 edx, DWORD PTR _hHandCursor$197683[ebp]
  00d82	52		 push	 edx
  00d83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyIcon@4
  00d89	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00d8c	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax
$L197682:

; 433  :         }
; 434  :         FreeLibrary(hModule);

  00d92	8b 55 ec	 mov	 edx, DWORD PTR _hModule$197681[ebp]
  00d95	52		 push	 edx
  00d96	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4

; 435  :     }

  00d9c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00da3	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  00da6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L197677:

; 436  : }

  00dac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00daf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00db6	8b e5		 mov	 esp, ebp
  00db8	5d		 pop	 ebp
  00db9	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198461:
  000c2	8d 4d f0	 lea	 ecx, DWORD PTR _strWndDir$197679[ebp]
  000c5	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SetDefaultCursor@CHyperLink@@IAEXXZ:
  000cb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198463
  000d0	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetDefaultCursor@CHyperLink@@IAEXXZ ENDP		; CHyperLink::SetDefaultCursor
PUBLIC	?GetRegKey@CHyperLink@@IAEJPAUHKEY__@@PBDPAD@Z	; CHyperLink::GetRegKey
EXTRN	__imp__lstrcpyA@8:NEAR
EXTRN	__imp__RegCloseKey@4:NEAR
EXTRN	__imp__RegOpenKeyExA@20:NEAR
EXTRN	__imp__RegQueryValueA@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -284						; size = 4
_data$197700 = -280					; size = 260
__$ArrayPad$ = -16					; size = 4
_datasize$197699 = -12					; size = 4
_retval$ = -8						; size = 4
_hkey$ = -4						; size = 4
__$ReturnAddr$ = 4					; size = 4
_key$ = 8						; size = 4
_subkey$ = 12						; size = 4
_retdata$ = 16						; size = 4
?GetRegKey@CHyperLink@@IAEJPAUHKEY__@@PBDPAD@Z PROC NEAR ; CHyperLink::GetRegKey
; _this$ = ecx

; 439  : {

  00dc0	55		 push	 ebp
  00dc1	8b ec		 mov	 ebp, esp
  00dc3	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00dc9	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00dce	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00dd1	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 440  :     HKEY hkey;
; 441  :     LONG retval = RegOpenKeyEx(key, subkey, 0, KEY_QUERY_VALUE, &hkey);

  00dd7	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00dda	50		 push	 eax
  00ddb	6a 01		 push	 1
  00ddd	6a 00		 push	 0
  00ddf	8b 4d 0c	 mov	 ecx, DWORD PTR _subkey$[ebp]
  00de2	51		 push	 ecx
  00de3	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  00de6	52		 push	 edx
  00de7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00ded	89 45 f8	 mov	 DWORD PTR _retval$[ebp], eax

; 442  : 
; 443  :     if (retval == ERROR_SUCCESS) {

  00df0	83 7d f8 00	 cmp	 DWORD PTR _retval$[ebp], 0
  00df4	75 39		 jne	 SHORT $L197698

; 444  :         long datasize = MAX_PATH;

  00df6	c7 45 f4 04 01
	00 00		 mov	 DWORD PTR _datasize$197699[ebp], 260 ; 00000104H

; 445  :         TCHAR data[MAX_PATH];
; 446  :         RegQueryValue(hkey, NULL, data, &datasize);

  00dfd	8d 45 f4	 lea	 eax, DWORD PTR _datasize$197699[ebp]
  00e00	50		 push	 eax
  00e01	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _data$197700[ebp]
  00e07	51		 push	 ecx
  00e08	6a 00		 push	 0
  00e0a	8b 55 fc	 mov	 edx, DWORD PTR _hkey$[ebp]
  00e0d	52		 push	 edx
  00e0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueA@16

; 447  :         lstrcpy(retdata,data);

  00e14	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _data$197700[ebp]
  00e1a	50		 push	 eax
  00e1b	8b 4d 10	 mov	 ecx, DWORD PTR _retdata$[ebp]
  00e1e	51		 push	 ecx
  00e1f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyA@8

; 448  :         RegCloseKey(hkey);

  00e25	8b 55 fc	 mov	 edx, DWORD PTR _hkey$[ebp]
  00e28	52		 push	 edx
  00e29	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$L197698:

; 449  :     }
; 450  : 
; 451  :     return retval;

  00e2f	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]

; 452  : }

  00e32	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e35	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e3a	8b e5		 mov	 esp, ebp
  00e3c	5d		 pop	 ebp
  00e3d	c2 0c 00	 ret	 12			; 0000000cH
?GetRegKey@CHyperLink@@IAEJPAUHKEY__@@PBDPAD@Z ENDP	; CHyperLink::GetRegKey
_TEXT	ENDS
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ; ATL::operator+
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
EXTRN	?AfxMessageBox@@YGHPBDII@Z:NEAR			; AfxMessageBox
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:NEAR
xdata$x	SEGMENT
$T198478 DD	0ffffffffH
	DD	FLAT:$L198471
	DD	00H
	DD	FLAT:$L198472
$T198474 DD	019930520H
	DD	02H
	DD	FLAT:$T198478
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv145 = -36						; size = 4
tv65 = -32						; size = 4
tv67 = -28						; size = 4
_this$ = -24						; size = 4
$T198470 = -20						; size = 4
_str$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nError$ = 8						; size = 4
?ReportError@CHyperLink@@IAEXH@Z PROC NEAR		; CHyperLink::ReportError
; _this$ = ecx

; 455  : {

  00e40	55		 push	 ebp
  00e41	8b ec		 mov	 ebp, esp
  00e43	6a ff		 push	 -1
  00e45	68 00 00 00 00	 push	 __ehhandler$?ReportError@CHyperLink@@IAEXH@Z
  00e4a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00e50	50		 push	 eax
  00e51	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00e58	83 ec 18	 sub	 esp, 24			; 00000018H
  00e5b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 456  :     CString str;

  00e5e	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00e61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00e67	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 457  :     switch (nError) {

  00e6e	8b 45 08	 mov	 eax, DWORD PTR _nError$[ebp]
  00e71	89 45 e4	 mov	 DWORD PTR tv67[ebp], eax
  00e74	83 7d e4 20	 cmp	 DWORD PTR tv67[ebp], 32	; 00000020H
  00e78	0f 87 f1 00 00
	00		 ja	 $L197736
  00e7e	8b 4d e4	 mov	 ecx, DWORD PTR tv67[ebp]
  00e81	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $L198475[ecx]
  00e88	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L198477[edx*4]
$L197710:

; 458  :         case 0:                       str = "The operating system is out\nof memory or resources."; break;

  00e8f	68 00 00 00 00	 push	 OFFSET FLAT:$SG197711
  00e94	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00e97	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00e9d	e9 e3 00 00 00	 jmp	 $L197707
$L197712:

; 459  :         case SE_ERR_PNF:              str = "The specified path was not found."; break;

  00ea2	68 00 00 00 00	 push	 OFFSET FLAT:$SG197713
  00ea7	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00eaa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00eb0	e9 d0 00 00 00	 jmp	 $L197707
$L197714:

; 460  :         case SE_ERR_FNF:              str = "The specified file was not found."; break;

  00eb5	68 00 00 00 00	 push	 OFFSET FLAT:$SG197715
  00eba	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00ebd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00ec3	e9 bd 00 00 00	 jmp	 $L197707
$L197716:

; 461  :         case ERROR_BAD_FORMAT:        str = "The .EXE file is invalid\n(non-Win32 .EXE or error in .EXE image)."; break;

  00ec8	68 00 00 00 00	 push	 OFFSET FLAT:$SG197717
  00ecd	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00ed0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00ed6	e9 aa 00 00 00	 jmp	 $L197707
$L197718:

; 462  :         case SE_ERR_ACCESSDENIED:     str = "The operating system denied\naccess to the specified file."; break;

  00edb	68 00 00 00 00	 push	 OFFSET FLAT:$SG197719
  00ee0	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00ee3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00ee9	e9 97 00 00 00	 jmp	 $L197707
$L197720:

; 463  :         case SE_ERR_ASSOCINCOMPLETE:  str = "The filename association is\nincomplete or invalid."; break;

  00eee	68 00 00 00 00	 push	 OFFSET FLAT:$SG197721
  00ef3	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00ef6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00efc	e9 84 00 00 00	 jmp	 $L197707
$L197722:

; 464  :         case SE_ERR_DDEBUSY:          str = "The DDE transaction could not\nbe completed because other DDE transactions\nwere being processed."; break;

  00f01	68 00 00 00 00	 push	 OFFSET FLAT:$SG197723
  00f06	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00f0f	eb 74		 jmp	 SHORT $L197707
$L197724:

; 465  :         case SE_ERR_DDEFAIL:          str = "The DDE transaction failed."; break;

  00f11	68 00 00 00 00	 push	 OFFSET FLAT:$SG197725
  00f16	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00f1f	eb 64		 jmp	 SHORT $L197707
$L197726:

; 466  :         case SE_ERR_DDETIMEOUT:       str = "The DDE transaction could not\nbe completed because the request timed out."; break;

  00f21	68 00 00 00 00	 push	 OFFSET FLAT:$SG197727
  00f26	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f29	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00f2f	eb 54		 jmp	 SHORT $L197707
$L197728:

; 467  :         case SE_ERR_DLLNOTFOUND:      str = "The specified dynamic-link library was not found."; break;

  00f31	68 00 00 00 00	 push	 OFFSET FLAT:$SG197729
  00f36	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00f3f	eb 44		 jmp	 SHORT $L197707
$L197730:

; 468  :         case SE_ERR_NOASSOC:          str = "There is no application associated\nwith the given filename extension."; break;

  00f41	68 00 00 00 00	 push	 OFFSET FLAT:$SG197731
  00f46	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f49	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00f4f	eb 34		 jmp	 SHORT $L197707
$L197732:

; 469  :         case SE_ERR_OOM:              str = "There was not enough memory to complete the operation."; break;

  00f51	68 00 00 00 00	 push	 OFFSET FLAT:$SG197733
  00f56	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f59	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00f5f	eb 24		 jmp	 SHORT $L197707
$L197734:

; 470  :         case SE_ERR_SHARE:            str = "A sharing violation occurred. ";

  00f61	68 00 00 00 00	 push	 OFFSET FLAT:$SG197735
  00f66	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f69	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
$L197736:

; 471  :         default:                      str.Format(_T("Unknown Error (%d) occurred."), nError); break;

  00f6f	8b 45 08	 mov	 eax, DWORD PTR _nError$[ebp]
  00f72	50		 push	 eax
  00f73	68 00 00 00 00	 push	 OFFSET FLAT:$SG197737
  00f78	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00f7b	51		 push	 ecx
  00f7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00f82	83 c4 0c	 add	 esp, 12			; 0000000cH
$L197707:

; 472  :     }
; 473  :     str = "Unable to open hyperlink:\n\n" + str;

  00f85	8d 55 f0	 lea	 edx, DWORD PTR _str$[ebp]
  00f88	52		 push	 edx
  00f89	68 00 00 00 00	 push	 OFFSET FLAT:$SG197739
  00f8e	8d 45 ec	 lea	 eax, DWORD PTR $T198470[ebp]
  00f91	50		 push	 eax
  00f92	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ; ATL::operator+
  00f97	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f9a	89 45 e0	 mov	 DWORD PTR tv65[ebp], eax
  00f9d	8b 4d e0	 mov	 ecx, DWORD PTR tv65[ebp]
  00fa0	89 4d dc	 mov	 DWORD PTR tv145[ebp], ecx
  00fa3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00fa7	8b 55 dc	 mov	 edx, DWORD PTR tv145[ebp]
  00faa	52		 push	 edx
  00fab	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00fae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00fb4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00fb8	8d 4d ec	 lea	 ecx, DWORD PTR $T198470[ebp]
  00fbb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 474  :     AfxMessageBox(str, MB_ICONEXCLAMATION | MB_OK);

  00fc1	6a 00		 push	 0
  00fc3	6a 30		 push	 48			; 00000030H
  00fc5	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00fc8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00fce	50		 push	 eax
  00fcf	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 475  : }

  00fd4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00fdb	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00fde	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00fe4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00fe7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00fee	8b e5		 mov	 esp, ebp
  00ff0	5d		 pop	 ebp
  00ff1	c2 04 00	 ret	 4
$L198477:
  00ff4	00 00 00 00	 DD	 $L197710
  00ff8	00 00 00 00	 DD	 $L197714
  00ffc	00 00 00 00	 DD	 $L197712
  01000	00 00 00 00	 DD	 $L197718
  01004	00 00 00 00	 DD	 $L197732
  01008	00 00 00 00	 DD	 $L197716
  0100c	00 00 00 00	 DD	 $L197734
  01010	00 00 00 00	 DD	 $L197720
  01014	00 00 00 00	 DD	 $L197726
  01018	00 00 00 00	 DD	 $L197724
  0101c	00 00 00 00	 DD	 $L197722
  01020	00 00 00 00	 DD	 $L197730
  01024	00 00 00 00	 DD	 $L197728
  01028	00 00 00 00	 DD	 $L197736
$L198475:
  0102c	00		 DB	 0
  0102d	0d		 DB	 13			; 0000000dH
  0102e	01		 DB	 1
  0102f	02		 DB	 2
  01030	0d		 DB	 13			; 0000000dH
  01031	03		 DB	 3
  01032	0d		 DB	 13			; 0000000dH
  01033	0d		 DB	 13			; 0000000dH
  01034	04		 DB	 4
  01035	0d		 DB	 13			; 0000000dH
  01036	0d		 DB	 13			; 0000000dH
  01037	05		 DB	 5
  01038	0d		 DB	 13			; 0000000dH
  01039	0d		 DB	 13			; 0000000dH
  0103a	0d		 DB	 13			; 0000000dH
  0103b	0d		 DB	 13			; 0000000dH
  0103c	0d		 DB	 13			; 0000000dH
  0103d	0d		 DB	 13			; 0000000dH
  0103e	0d		 DB	 13			; 0000000dH
  0103f	0d		 DB	 13			; 0000000dH
  01040	0d		 DB	 13			; 0000000dH
  01041	0d		 DB	 13			; 0000000dH
  01042	0d		 DB	 13			; 0000000dH
  01043	0d		 DB	 13			; 0000000dH
  01044	0d		 DB	 13			; 0000000dH
  01045	0d		 DB	 13			; 0000000dH
  01046	06		 DB	 6
  01047	07		 DB	 7
  01048	08		 DB	 8
  01049	09		 DB	 9
  0104a	0a		 DB	 10			; 0000000aH
  0104b	0b		 DB	 11			; 0000000bH
  0104c	0c		 DB	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L198471:
  000d5	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  000d8	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L198472:
  000de	8d 4d ec	 lea	 ecx, DWORD PTR $T198470[ebp]
  000e1	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?ReportError@CHyperLink@@IAEXH@Z:
  000e7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198474
  000ec	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ReportError@CHyperLink@@IAEXH@Z ENDP			; CHyperLink::ReportError
PUBLIC	__tcsstr
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	?T2A@@YAPADPAD@Z				; T2A
EXTRN	__imp__lstrcatA@8:NEAR
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	__imp__ShellExecuteA@24:NEAR
EXTRN	__imp__WinExec@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -556						; size = 4
_pos$197760 = -552					; size = 4
__acp$197769 = -544					; size = 4
_result$ = -532						; size = 4
_key$ = -528						; size = 520
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_url$ = 8						; size = 4
_showcmd$ = 12						; size = 4
?GotoURL@CHyperLink@@IAEPAUHINSTANCE__@@PBDH@Z PROC NEAR ; CHyperLink::GotoURL
; _this$ = ecx

; 478  : {

  01050	55		 push	 ebp
  01051	8b ec		 mov	 ebp, esp
  01053	81 ec 2c 02 00
	00		 sub	 esp, 556		; 0000022cH
  01059	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0105e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01061	89 8d d4 fd ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 479  :     TCHAR key[MAX_PATH + MAX_PATH];
; 480  : 
; 481  :     // First try ShellExecute()
; 482  :     HINSTANCE result = ShellExecute(NULL, _T("open"), url, NULL,NULL, showcmd);

  01067	8b 45 0c	 mov	 eax, DWORD PTR _showcmd$[ebp]
  0106a	50		 push	 eax
  0106b	6a 00		 push	 0
  0106d	6a 00		 push	 0
  0106f	8b 4d 08	 mov	 ecx, DWORD PTR _url$[ebp]
  01072	51		 push	 ecx
  01073	68 00 00 00 00	 push	 OFFSET FLAT:$SG197747
  01078	6a 00		 push	 0
  0107a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  01080	89 85 ec fd ff
	ff		 mov	 DWORD PTR _result$[ebp], eax

; 483  : 
; 484  :     // If it failed, get the .htm regkey and lookup the program
; 485  :     if ((UINT)result <= HINSTANCE_ERROR) {

  01086	83 bd ec fd ff
	ff 20		 cmp	 DWORD PTR _result$[ebp], 32 ; 00000020H
  0108d	0f 87 20 01 00
	00		 ja	 $L197749

; 486  : 
; 487  :         if (GetRegKey(HKEY_CLASSES_ROOT, _T(".htm"), key) == ERROR_SUCCESS) {

  01093	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR _key$[ebp]
  01099	52		 push	 edx
  0109a	68 00 00 00 00	 push	 OFFSET FLAT:$SG197754
  0109f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  010a4	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010aa	e8 00 00 00 00	 call	 ?GetRegKey@CHyperLink@@IAEJPAUHKEY__@@PBDPAD@Z ; CHyperLink::GetRegKey
  010af	85 c0		 test	 eax, eax
  010b1	0f 85 fc 00 00
	00		 jne	 $L197749

; 488  :             lstrcat(key, _T("\\shell\\open\\command"));

  010b7	68 00 00 00 00	 push	 OFFSET FLAT:$SG197755
  010bc	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _key$[ebp]
  010c2	50		 push	 eax
  010c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcatA@8

; 489  : 
; 490  :             if (GetRegKey(HKEY_CLASSES_ROOT,key,key) == ERROR_SUCCESS) {

  010c9	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _key$[ebp]
  010cf	51		 push	 ecx
  010d0	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR _key$[ebp]
  010d6	52		 push	 edx
  010d7	68 00 00 00 80	 push	 -2147483648		; 80000000H
  010dc	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010e2	e8 00 00 00 00	 call	 ?GetRegKey@CHyperLink@@IAEJPAUHKEY__@@PBDPAD@Z ; CHyperLink::GetRegKey
  010e7	85 c0		 test	 eax, eax
  010e9	0f 85 c4 00 00
	00		 jne	 $L197749

; 491  :                 TCHAR *pos;
; 492  :                 pos = _tcsstr(key, _T("\"%1\""));

  010ef	68 00 00 00 00	 push	 OFFSET FLAT:$SG197761
  010f4	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _key$[ebp]
  010fa	50		 push	 eax
  010fb	e8 00 00 00 00	 call	 __tcsstr
  01100	83 c4 08	 add	 esp, 8
  01103	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _pos$197760[ebp], eax

; 493  :                 if (pos == NULL) {                     // No quotes found

  01109	83 bd d8 fd ff
	ff 00		 cmp	 DWORD PTR _pos$197760[ebp], 0
  01110	75 4a		 jne	 SHORT $L197762

; 494  :                     pos = _tcsstr(key, _T("%1"));      // Check for %1, without quotes 

  01112	68 00 00 00 00	 push	 OFFSET FLAT:$SG197763
  01117	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _key$[ebp]
  0111d	51		 push	 ecx
  0111e	e8 00 00 00 00	 call	 __tcsstr
  01123	83 c4 08	 add	 esp, 8
  01126	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _pos$197760[ebp], eax

; 495  :                     if (pos == NULL)                   // No parameter at all...

  0112c	83 bd d8 fd ff
	ff 00		 cmp	 DWORD PTR _pos$197760[ebp], 0
  01133	75 1c		 jne	 SHORT $L197764

; 496  :                         pos = key+lstrlen(key)-1;

  01135	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR _key$[ebp]
  0113b	52		 push	 edx
  0113c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  01142	8d 84 05 ef fd
	ff ff		 lea	 eax, DWORD PTR _key$[ebp+eax-1]
  01149	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _pos$197760[ebp], eax

; 497  :                     else

  0114f	eb 09		 jmp	 SHORT $L197765
$L197764:

; 498  :                         *pos = '\0';                   // Remove the parameter

  01151	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pos$197760[ebp]
  01157	c6 01 00	 mov	 BYTE PTR [ecx], 0
$L197765:

; 499  :                 }
; 500  :                 else

  0115a	eb 09		 jmp	 SHORT $L197766
$L197762:

; 501  :                     *pos = '\0';                       // Remove the parameter

  0115c	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _pos$197760[ebp]
  01162	c6 02 00	 mov	 BYTE PTR [edx], 0
$L197766:

; 502  : 
; 503  :                 lstrcat(pos, _T(" "));

  01165	68 00 00 00 00	 push	 OFFSET FLAT:$SG197767
  0116a	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pos$197760[ebp]
  01170	50		 push	 eax
  01171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcatA@8

; 504  :                 lstrcat(pos, url);

  01177	8b 4d 08	 mov	 ecx, DWORD PTR _url$[ebp]
  0117a	51		 push	 ecx
  0117b	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _pos$197760[ebp]
  01181	52		 push	 edx
  01182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcatA@8

; 505  : 
; 506  :                 USES_CONVERSION;

  01188	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0118d	89 85 e0 fd ff
	ff		 mov	 DWORD PTR __acp$197769[ebp], eax

; 507  :                 result = (HINSTANCE) WinExec(T2A(key),showcmd);

  01193	8b 45 0c	 mov	 eax, DWORD PTR _showcmd$[ebp]
  01196	50		 push	 eax
  01197	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _key$[ebp]
  0119d	51		 push	 ecx
  0119e	e8 00 00 00 00	 call	 ?T2A@@YAPADPAD@Z	; T2A
  011a3	83 c4 04	 add	 esp, 4
  011a6	50		 push	 eax
  011a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WinExec@8
  011ad	89 85 ec fd ff
	ff		 mov	 DWORD PTR _result$[ebp], eax
$L197749:

; 508  :             }
; 509  :         }
; 510  :     }
; 511  : 
; 512  :     return result;

  011b3	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]

; 513  : }

  011b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  011bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  011c1	8b e5		 mov	 esp, ebp
  011c3	5d		 pop	 ebp
  011c4	c2 08 00	 ret	 8
?GotoURL@CHyperLink@@IAEPAUHINSTANCE__@@PBDH@Z ENDP	; CHyperLink::GotoURL
_TEXT	ENDS
EXTRN	__imp___mbsstr:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsstr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcsstr PROC NEAR					; COMDAT

; 847  : __inline _PC _tcsstr(_CPC _s1,_CPC _s2) {return (_PC)_mbsstr((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsstr
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
__tcsstr ENDP
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00011	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0001b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00028	83 bd 70 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0002f	75 15		 jne	 SHORT $L24173
  00031	83 bd 64 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00038	72 0c		 jb	 SHORT $L24173

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  0003a	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00044	eb 0a		 jmp	 SHORT $L24174
$L24173:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00046	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24174:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  00050	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0005c	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 93   : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24161 = -24					; size = 4
_lcidThread$ = -20					; size = 4
_szACP$ = -16						; size = 7
__$ArrayPad$ = -8					; size = 4
_nACP$ = -4						; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0001b	89 45 ec	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  0001e	6a 07		 push	 7
  00020	8d 45 f0	 lea	 eax, DWORD PTR _szACP$[ebp]
  00023	50		 push	 eax
  00024	68 04 10 00 00	 push	 4100			; 00001004H
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  0002c	51		 push	 ecx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00033	85 c0		 test	 eax, eax
  00035	74 34		 je	 SHORT $L24160

; 111  : 	{
; 112  : 		char* pch = szACP;

  00037	8d 55 f0	 lea	 edx, DWORD PTR _szACP$[ebp]
  0003a	89 55 e8	 mov	 DWORD PTR _pch$24161[ebp], edx
$L24163:

; 113  : 		while (*pch != '\0')

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00040	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00043	85 c9		 test	 ecx, ecx
  00045	74 24		 je	 SHORT $L24160

; 114  : 		{
; 115  : 			nACP *= 10;

  00047	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  0004a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0004d	89 55 fc	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00050	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00053	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  00059	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0005d	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
  00060	8b 4d e8	 mov	 ecx, DWORD PTR _pch$24161[ebp]
  00063	83 c1 01	 add	 ecx, 1
  00066	89 4d e8	 mov	 DWORD PTR _pch$24161[ebp], ecx

; 117  : 		}

  00069	eb d2		 jmp	 SHORT $L24163
$L24160:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0006f	75 09		 jne	 SHORT $L24165

; 121  : 		nACP = ::GetACP();

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00077	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
$L24165:

; 122  : 
; 123  : 	return nACP;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 158  : 	return( g_pfnGetThreadACP() );

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 159  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:NEAR
EXTRN	__imp_?GetManager@?$CSimpleStringT@D$00@ATL@@QBEPAUIAtlStringMgr@2@XZ:NEAR
EXTRN	__imp_?StringLength@?$CSimpleStringT@D$00@ATL@@SAHPBD@Z:NEAR
EXTRN	__imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
xdata$x	SEGMENT
$T198506 DD	0ffffffffH
	DD	FLAT:$L198499
$T198504 DD	019930520H
	DD	01H
	DD	FLAT:$T198506
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT
$T198501 = -20						; size = 4
_strResult$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_psz1$ = 12						; size = 4
_str2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z PROC NEAR ; ATL::operator+, COMDAT

; 2032 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 08	 sub	 esp, 8
  0001b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T198501[ebp], 0

; 2033 : 		CStringT strResult( str2.GetManager() );

  00022	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CSimpleStringT@D$00@ATL@@QBEPAUIAtlStringMgr@2@XZ
  0002b	50		 push	 eax
  0002c	8d 4d f0	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2034 : 
; 2035 : 		Concatenate( strResult, psz1, StringLength( psz1 ), str2, str2.GetLength() );

  0003c	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00045	50		 push	 eax
  00046	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0004f	50		 push	 eax
  00050	8b 45 0c	 mov	 eax, DWORD PTR _psz1$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?StringLength@?$CSimpleStringT@D$00@ATL@@SAHPBD@Z
  0005a	83 c4 04	 add	 esp, 4
  0005d	50		 push	 eax
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _psz1$[ebp]
  00061	51		 push	 ecx
  00062	8d 55 f0	 lea	 edx, DWORD PTR _strResult$[ebp]
  00065	52		 push	 edx
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  0006c	83 c4 14	 add	 esp, 20			; 00000014H

; 2036 : 
; 2037 : 		return( strResult );

  0006f	8d 45 f0	 lea	 eax, DWORD PTR _strResult$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0007c	8b 4d ec	 mov	 ecx, DWORD PTR $T198501[ebp]
  0007f	83 c9 01	 or	 ecx, 1
  00082	89 4d ec	 mov	 DWORD PTR $T198501[ebp], ecx
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008c	8d 4d f0	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00095	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2038 : 	}

  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L198499:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198504
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ENDP ; ATL::operator+
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?T2A@@YAPADPAD@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
?T2A@@YAPADPAD@Z PROC NEAR				; T2A, COMDAT

; 763  : 	inline LPSTR T2A(LPTSTR lp) { return lp; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _lp$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?T2A@@YAPADPAD@Z ENDP					; T2A
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwPoint$ = 8						; size = 4
??0CPoint@@QAE@J@Z PROC NEAR				; CPoint::CPoint, COMDAT
; _this$ = ecx

; 69   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   : 		x = (short)LOWORD(dwPoint);

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwPoint$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	0f bf c8	 movsx	 ecx, ax
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	89 0a		 mov	 DWORD PTR [edx], ecx

; 71   : 		y = (short)HIWORD(dwPoint);

  00017	8b 45 08	 mov	 eax, DWORD PTR _dwPoint$[ebp]
  0001a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0001d	0f bf c8	 movsx	 ecx, ax
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 72   : 	}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0CPoint@@QAE@J@Z ENDP					; CPoint::CPoint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 110  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT
; _this$ = ecx

; 123  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT
; _this$ = ecx

; 125  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT
; _this$ = ecx

; 143  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
EXTRN	__imp__PtInRect@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?PtInRect@CRect@@QBEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_point$ = 8						; size = 8
?PtInRect@CRect@@QBEHUtagPOINT@@@Z PROC NEAR		; CRect::PtInRect, COMDAT
; _this$ = ecx

; 151  : 	{ return ::PtInRect(this, point); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp+4]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?PtInRect@CRect@@QBEHUtagPOINT@@@Z ENDP			; CRect::PtInRect
_TEXT	ENDS
EXTRN	__imp__InflateRect@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?DeflateRect@CRect@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?DeflateRect@CRect@@QAEXHH@Z PROC NEAR			; CRect::DeflateRect, COMDAT
; _this$ = ecx

; 167  : 	{ ::InflateRect(this, -x, -y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	f7 d8		 neg	 eax
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00010	f7 d9		 neg	 ecx
  00012	51		 push	 ecx
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	52		 push	 edx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?DeflateRect@CRect@@QAEXHH@Z ENDP			; CRect::DeflateRect
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 41   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT
; _this$ = ecx

; 43   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
EXTRN	?FromHandle@CGdiObject@@SGPAV1@PAX@Z:NEAR	; CGdiObject::FromHandle
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT
_hFont$ = 8						; size = 4
?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z PROC NEAR	; CFont::FromHandle, COMDAT

; 151  : 	{ return (CFont*) CGdiObject::FromHandle(hFont); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _hFont$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?FromHandle@CGdiObject@@SGPAV1@PAX@Z ; CGdiObject::FromHandle
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z ENDP		; CFont::FromHandle
_TEXT	ENDS
PUBLIC	??_R0?AVCGdiObject@@@8				; CGdiObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CGdiObject@@8			; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R4CFont@@6B@					; CFont::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFont@@@8				; CFont `RTTI Type Descriptor'
PUBLIC	??_R3CFont@@8					; CFont::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFont@@8					; CFont::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CFont@@8				; CFont::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:NEAR ; CFont::GetRuntimeClass
EXTRN	??_ECFont@@UAEPAXI@Z:NEAR			; CFont::`vector deleting destructor'
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:??_R4CFont@@6B@			; CFont::`vftable'
	DD	FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT
??_R4CFont@@6B@ DD 00H					; CFont::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFont@@@8
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT
??_R0?AVCFont@@@8 DD FLAT:??_7type_info@@6B@		; CFont `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFont@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT
??_R3CFont@@8 DD 00H					; CFont::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CFont@@8
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT
??_R2CFont@@8 DD FLAT:??_R1A@?0A@A@CFont@@8		; CFont::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFont@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CFont@@8 DD FLAT:??_R0?AVCFont@@@8		; CFont::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CGdiObject@@8 DD FLAT:??_R0?AVCGdiObject@@@8 ; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT
??_R0?AVCGdiObject@@@8 DD FLAT:??_7type_info@@6B@	; CGdiObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGdiObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFont@@QAE@XZ PROC NEAR				; CFont::CFont, COMDAT
; _this$ = ecx

; 153  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CFont@@QAE@XZ ENDP					; CFont::CFont
_TEXT	ENDS
PUBLIC	??_R4CGdiObject@@6B@				; CGdiObject::`RTTI Complete Object Locator'
PUBLIC	??_R3CGdiObject@@8				; CGdiObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGdiObject@@8				; CGdiObject::`RTTI Base Class Array'
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CGdiObject::GetRuntimeClass
EXTRN	??_ECGdiObject@@UAEPAXI@Z:NEAR			; CGdiObject::`vector deleting destructor'
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:??_R4CGdiObject@@6B@	; CGdiObject::`vftable'
	DD	FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT
??_R4CGdiObject@@6B@ DD 00H				; CGdiObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGdiObject@@@8
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT
??_R3CGdiObject@@8 DD 00H				; CGdiObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT
??_R2CGdiObject@@8 DD FLAT:??_R1A@?0A@A@CGdiObject@@8	; CGdiObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGdiObject@@QAE@XZ PROC NEAR				; CGdiObject::CGdiObject, COMDAT
; _this$ = ecx

; 82   : 	{ m_hObject = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObject@@IAE@XZ PROC NEAR				; CObject::CObject, COMDAT
; _this$ = ecx

; 21   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGdiObject@@UAEPAXI@Z PROC NEAR			; CGdiObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41495
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41495:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
xdata$x	SEGMENT
$T198551 DD	0ffffffffH
	DD	FLAT:$L198547
$T198549 DD	019930520H
	DD	01H
	DD	FLAT:$T198551
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGdiObject@@UAE@XZ PROC NEAR				; CGdiObject::~CGdiObject, COMDAT
; _this$ = ecx

; 84   : 	{ DeleteObject(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGdiObject@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L198547:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CGdiObject@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198549
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CObject@@UAE@XZ PROC NEAR				; CObject::~CObject, COMDAT
; _this$ = ecx

; 23   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFont@@UAEPAXI@Z PROC NEAR				; CFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41640
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41640:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFont@@UAE@XZ PROC NEAR				; CFont::~CFont, COMDAT
; _this$ = ecx

; 155  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
EXTRN	__imp__CreateFontIndirectA@4:NEAR
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:NEAR		; CGdiObject::Attach
; Function compile flags: /Odt
;	COMDAT ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpLogFont$ = 8						; size = 4
?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z PROC NEAR ; CFont::CreateFontIndirectA, COMDAT
; _this$ = ecx

; 157  : 	{ return Attach(::CreateFontIndirect(lpLogFont)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpLogFont$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ENDP	; CFont::CreateFontIndirectA
_TEXT	ENDS
EXTRN	__imp__GetObjectA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pLogFont$ = 8						; size = 4
?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z PROC NEAR	; CFont::GetLogFont, COMDAT
; _this$ = ecx

; 168  : 	{ ASSERT(m_hObject != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 		return ::GetObject(m_hObject, sizeof(LOGFONT), pLogFont); }

  00007	8b 45 08	 mov	 eax, DWORD PTR _pLogFont$[ebp]
  0000a	50		 push	 eax
  0000b	6a 3c		 push	 60			; 0000003cH
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z ENDP		; CFont::GetLogFont
_TEXT	ENDS
PUBLIC	??0CSize@@QAE@UtagSIZE@@@Z			; CSize::CSize
EXTRN	__imp__GetTextExtentPoint32A@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_size$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CDC::GetTextExtent, COMDAT
; _this$ = ecx

; 617  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 618  : 		ASSERT(m_hAttribDC != NULL);
; 619  : 		SIZE size;
; 620  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, str, (int)str.GetLength(), &size));

  00009	8d 45 f8	 lea	 eax, DWORD PTR _size$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00020	50		 push	 eax
  00021	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00027	52		 push	 edx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16

; 621  : 		return size;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _size$[ebp+4]
  00031	50		 push	 eax
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _size$[ebp]
  00035	51		 push	 ecx
  00036	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CSize@@QAE@UtagSIZE@@@Z ; CSize::CSize
  0003e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 622  : 	}

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDC::GetTextExtent
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initSize$ = 8						; size = 8
??0CSize@@QAE@UtagSIZE@@@Z PROC NEAR			; CSize::CSize, COMDAT
; _this$ = ecx

; 26   : 	{ *(SIZE*)this = initSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initSize$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _initSize$[ebp+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??0CSize@@QAE@UtagSIZE@@@Z ENDP				; CSize::CSize
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ PROC NEAR		; CWnd::GetSafeHwnd, COMDAT
; _this$ = ecx

; 27   : 	{ return this == NULL ? NULL : m_hWnd; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L198571
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L198572
$L198571:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L198572:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ENDP		; CWnd::GetSafeHwnd
_TEXT	ENDS
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetFont@CWnd@@QAEXPAVCFont@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pFont$ = 8						; size = 4
_bRedraw$ = 12						; size = 4
?SetFont@CWnd@@QAEXPAVCFont@@H@Z PROC NEAR		; CWnd::SetFont, COMDAT
; _this$ = ecx

; 58   : 	{ ASSERT(::IsWindow(m_hWnd)); ::SendMessage(m_hWnd, WM_SETFONT, (WPARAM)pFont->GetSafeHandle(), bRedraw); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRedraw$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	6a 30		 push	 48			; 00000030H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0001c	52		 push	 edx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?SetFont@CWnd@@QAEXPAVCFont@@H@Z ENDP			; CWnd::SetFont
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC NEAR		; CGdiObject::GetSafeHandle, COMDAT
; _this$ = ecx

; 80   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L198577
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L198578
$L198577:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L198578:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
_TEXT	ENDS
;	COMDAT ?GetFont@CWnd@@QBEPAVCFont@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFont@CWnd@@QBEPAVCFont@@XZ PROC NEAR		; CWnd::GetFont, COMDAT
; _this$ = ecx

; 60   : 	{ ASSERT(::IsWindow(m_hWnd)); return CFont::FromHandle(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 		(HFONT)::SendMessage(m_hWnd, WM_GETFONT, 0, 0)); }

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 31		 push	 49			; 00000031H
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00013	51		 push	 ecx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z ; CFont::FromHandle
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?GetFont@CWnd@@QBEPAVCFont@@XZ ENDP			; CWnd::GetFont
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetWindowRect, COMDAT
; _this$ = ecx

; 105  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetWindowRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetClientRect, COMDAT
; _this$ = ecx

; 107  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ScreenToClient@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ScreenToClient@CWnd@@QBEXPAUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpPoint$ = 8						; size = 4
?ScreenToClient@CWnd@@QBEXPAUtagPOINT@@@Z PROC NEAR	; CWnd::ScreenToClient, COMDAT
; _this$ = ecx

; 115  : 	{ ASSERT(::IsWindow(m_hWnd)); ::ScreenToClient(m_hWnd, lpPoint); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpPoint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ScreenToClient@CWnd@@QBEXPAUtagPOINT@@@Z ENDP		; CWnd::ScreenToClient
_TEXT	ENDS
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
EXTRN	__imp__GetDC@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDC@CWnd@@QAEPAVCDC@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDC@CWnd@@QAEPAVCDC@@XZ PROC NEAR			; CWnd::GetDC, COMDAT
; _this$ = ecx

; 121  : 	{ ASSERT(::IsWindow(m_hWnd)); return CDC::FromHandle(::GetDC(m_hWnd)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetDC@CWnd@@QAEPAVCDC@@XZ ENDP				; CWnd::GetDC
_TEXT	ENDS
EXTRN	__imp__ReleaseDC@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z PROC NEAR		; CWnd::ReleaseDC, COMDAT
; _this$ = ecx

; 125  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::ReleaseDC(m_hWnd, pDC->m_hDC); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ENDP			; CWnd::ReleaseDC
_TEXT	ENDS
EXTRN	__imp__UpdateWindow@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateWindow@CWnd@@QAEXXZ PROC NEAR			; CWnd::UpdateWindow, COMDAT
; _this$ = ecx

; 127  : 	{ ASSERT(::IsWindow(m_hWnd)); ::UpdateWindow(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?UpdateWindow@CWnd@@QAEXXZ ENDP				; CWnd::UpdateWindow
_TEXT	ENDS
EXTRN	__imp__InvalidateRect@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Invalidate@CWnd@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bErase$ = 8						; size = 4
?Invalidate@CWnd@@QAEXH@Z PROC NEAR			; CWnd::Invalidate, COMDAT
; _this$ = ecx

; 135  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _bErase$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?Invalidate@CWnd@@QAEXH@Z ENDP				; CWnd::Invalidate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
_bErase$ = 12						; size = 4
?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z PROC NEAR	; CWnd::InvalidateRect, COMDAT
; _this$ = ecx

; 137  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, lpRect, bErase); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _bErase$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?InvalidateRect@CWnd@@QAEXPBUtagRECT@@H@Z ENDP		; CWnd::InvalidateRect
_TEXT	ENDS
EXTRN	__imp__SetTimer@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
_nElapse$ = 12						; size = 4
_lpfnTimer$ = 16					; size = 4
?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z PROC NEAR	; CWnd::SetTimer, COMDAT
; _this$ = ecx

; 182  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::SetTimer(m_hWnd, nIDEvent, nElapse,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  : 		lpfnTimer); }

  00007	8b 45 10	 mov	 eax, DWORD PTR _lpfnTimer$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nElapse$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nIDEvent$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ENDP	; CWnd::SetTimer
_TEXT	ENDS
EXTRN	__imp__KillTimer@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?KillTimer@CWnd@@QAEHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
?KillTimer@CWnd@@QAEHI@Z PROC NEAR			; CWnd::KillTimer, COMDAT
; _this$ = ecx

; 185  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::KillTimer(m_hWnd, nIDEvent); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIDEvent$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?KillTimer@CWnd@@QAEHI@Z ENDP				; CWnd::KillTimer
_TEXT	ENDS
EXTRN	__imp__GetParent@4:NEAR
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:NEAR	; CWnd::FromHandle
; Function compile flags: /Odt
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetParent@CWnd@@QBEPAV1@XZ PROC NEAR			; CWnd::GetParent, COMDAT
; _this$ = ecx

; 282  : 	{ ASSERT(::IsWindow(m_hWnd)); return CWnd::FromHandle(::GetParent(m_hWnd)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetParent@CWnd@@QBEPAV1@XZ ENDP			; CWnd::GetParent
_TEXT	ENDS
EXTRN	?Default@CWnd@@IAEJXZ:NEAR			; CWnd::Default
; Function compile flags: /Odt
;	COMDAT ?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z PROC NEAR		; CWnd::OnMouseMove, COMDAT
; _this$ = ecx

; 476  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z ENDP		; CWnd::OnMouseMove
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnTimer@CWnd@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@CWnd@@IAEXI@Z PROC NEAR			; CWnd::OnTimer, COMDAT
; _this$ = ecx

; 488  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?OnTimer@CWnd@@IAEXI@Z ENDP				; CWnd::OnTimer
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT
; _this$ = ecx

; 545  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT
; _this$ = ecx

; 549  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT
; _this$ = ecx

; 551  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
PUBLIC	??_7CStatic@@6B@				; CStatic::`vftable'
PUBLIC	??_GCStatic@@UAEPAXI@Z				; CStatic::`scalar deleting destructor'
PUBLIC	??_R4CStatic@@6B@				; CStatic::`RTTI Complete Object Locator'
PUBLIC	??_R3CStatic@@8					; CStatic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStatic@@8					; CStatic::`RTTI Base Class Array'
EXTRN	?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ:NEAR	; CWnd::GetMessageMap
EXTRN	??_ECStatic@@UAEPAXI@Z:NEAR			; CStatic::`vector deleting destructor'
EXTRN	??0CWnd@@QAE@XZ:NEAR				; CWnd::CWnd
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT
??_7CStatic@@6B@ DD FLAT:??_R4CStatic@@6B@		; CStatic::`vftable'
	DD	FLAT:?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECStatic@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CStatic@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?Create@CStatic@@UAEHPBDKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?DrawItem@CStatic@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??_R4CStatic@@6B@
rdata$r	SEGMENT
??_R4CStatic@@6B@ DD 00H				; CStatic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStatic@@@8
	DD	FLAT:??_R3CStatic@@8
rdata$r	ENDS
;	COMDAT ??_R3CStatic@@8
rdata$r	SEGMENT
??_R3CStatic@@8 DD 00H					; CStatic::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CStatic@@8
rdata$r	ENDS
;	COMDAT ??_R2CStatic@@8
rdata$r	SEGMENT
??_R2CStatic@@8 DD FLAT:??_R1A@?0A@A@CStatic@@8		; CStatic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CWnd@@8
	DD	FLAT:??_R1A@?0A@A@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CStatic@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStatic@@QAE@XZ PROC NEAR				; CStatic::CStatic, COMDAT
; _this$ = ecx

; 588  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CStatic@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CStatic@@QAE@XZ ENDP					; CStatic::CStatic
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStatic@@UAEPAXI@Z PROC NEAR			; CStatic::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CStatic@@UAE@XZ	; CStatic::~CStatic
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L44524
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L44524:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCStatic@@UAEPAXI@Z ENDP				; CStatic::`scalar deleting destructor'
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcmn.inl
_TEXT	ENDS
;	COMDAT ?RelayEvent@CToolTipCtrl@@QAEXPAUtagMSG@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
?RelayEvent@CToolTipCtrl@@QAEXPAUtagMSG@@@Z PROC NEAR	; CToolTipCtrl::RelayEvent, COMDAT
; _this$ = ecx

; 370  : 	{ ASSERT(::IsWindow(m_hWnd));  ::SendMessage(m_hWnd, TTM_RELAYEVENT, 0, (LPARAM)lpMsg); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 07 04 00 00	 push	 1031			; 00000407H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?RelayEvent@CToolTipCtrl@@QAEXPAUtagMSG@@@Z ENDP	; CToolTipCtrl::RelayEvent
_TEXT	ENDS
END
