; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\CBufferDC.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??_GCBufferDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CBufferDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBufferDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CBufferDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufferDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Escape@CDC@@UAEHHHPBDPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TextOutA@CDC@@UAEHHHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtVisible@CDC@@UBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4CBufferDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRectEmpty@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBufferDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?IsRectEmpty@CRect@@QBEHXZ			; CRect::IsRectEmpty
PUBLIC	?PtVisible@CDC@@UBEHHH@Z			; CDC::PtVisible
PUBLIC	?RectVisible@CDC@@UBEHPBUtagRECT@@@Z		; CDC::RectVisible
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	?TextOutA@CDC@@UAEHHHPBDH@Z			; CDC::TextOutA
PUBLIC	?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z	; CDC::ExtTextOutA
PUBLIC	?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z	; CDC::TabbedTextOutA
PUBLIC	?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z		; CDC::DrawTextA
PUBLIC	??_R1A@?0A@A@CDC@@8				; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ; CDC::DrawTextExA
PUBLIC	??_R0?AVCDC@@@8					; CDC `RTTI Type Descriptor'
PUBLIC	?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z ; CDC::GrayStringA
PUBLIC	??BCGdiObject@@QBEPAXXZ				; CGdiObject::operator void *
PUBLIC	?Escape@CDC@@UAEHHHPBDPAX@Z			; CDC::Escape
PUBLIC	??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z	; CBufferDC::CBufferDC
PUBLIC	??_7CBufferDC@@6B@				; CBufferDC::`vftable'
PUBLIC	??_GCBufferDC@@UAEPAXI@Z			; CBufferDC::`scalar deleting destructor'
PUBLIC	??0CBitmap@@QAE@XZ				; CBitmap::CBitmap
PUBLIC	??1CBitmap@@UAE@XZ				; CBitmap::~CBitmap
PUBLIC	??_R4CBufferDC@@6B@				; CBufferDC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufferDC@@@8				; CBufferDC `RTTI Type Descriptor'
PUBLIC	??_R3CBufferDC@@8				; CBufferDC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufferDC@@8				; CBufferDC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBufferDC@@8			; CBufferDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:NEAR		; CDC::Attach
EXTRN	?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetAttribDC
EXTRN	?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetOutputDC
EXTRN	?ReleaseAttribDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseAttribDC
EXTRN	?ReleaseOutputDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseOutputDC
EXTRN	??0CDC@@QAE@XZ:NEAR				; CDC::CDC
EXTRN	?SaveDC@CDC@@UAEHXZ:NEAR			; CDC::SaveDC
EXTRN	?RestoreDC@CDC@@UAEHH@Z:NEAR			; CDC::RestoreDC
EXTRN	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z:NEAR ; CDC::SelectStockObject
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?SetBkColor@CDC@@UAEKK@Z:NEAR			; CDC::SetBkColor
EXTRN	?SetTextColor@CDC@@UAEKK@Z:NEAR			; CDC::SetTextColor
EXTRN	?SetMapMode@CDC@@UAEHH@Z:NEAR			; CDC::SetMapMode
EXTRN	?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::SetViewportOrg
EXTRN	?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::OffsetViewportOrg
EXTRN	?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetViewportExt
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleViewportExt
EXTRN	?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetWindowExt
EXTRN	?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleWindowExt
EXTRN	?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z:NEAR	; CDC::GetClipBox
EXTRN	?ExcludeClipRect@CDC@@QAEHHHHH@Z:NEAR		; CDC::ExcludeClipRect
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp__CreateCompatibleBitmap@12:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	__imp__GetClipBox@8:NEAR
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:NEAR		; CGdiObject::Attach
EXTRN	??_ECBufferDC@@UAEPAXI@Z:NEAR			; CBufferDC::`vector deleting destructor'
EXTRN	??1CDC@@UAE@XZ:NEAR				; CDC::~CDC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ:NEAR ; CDC::GetRuntimeClass
xdata$x	SEGMENT
$T197869 DD	0ffffffffH
	DD	FLAT:$L197861
	DD	00H
	DD	FLAT:$L197862
$T197866 DD	019930520H
	DD	02H
	DD	FLAT:$T197869
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CBufferDC@@6B@
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\cbufferdc.cpp
CONST	SEGMENT
??_7CBufferDC@@6B@ DD FLAT:??_R4CBufferDC@@6B@		; CBufferDC::`vftable'
	DD	FLAT:?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBufferDC@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?ReleaseAttribDC@CDC@@UAEXXZ
	DD	FLAT:?ReleaseOutputDC@CDC@@UAEXXZ
	DD	FLAT:?SaveDC@CDC@@UAEHXZ
	DD	FLAT:?RestoreDC@CDC@@UAEHH@Z
	DD	FLAT:?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z
	DD	FLAT:?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z
	DD	FLAT:?SetBkColor@CDC@@UAEKK@Z
	DD	FLAT:?SetTextColor@CDC@@UAEKK@Z
	DD	FLAT:?SetMapMode@CDC@@UAEHH@Z
	DD	FLAT:?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z
	DD	FLAT:?PtVisible@CDC@@UBEHHH@Z
	DD	FLAT:?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
	DD	FLAT:?TextOutA@CDC@@UAEHHHPBDH@Z
	DD	FLAT:?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
	DD	FLAT:?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
	DD	FLAT:?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
	DD	FLAT:?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
	DD	FLAT:?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
	DD	FLAT:?Escape@CDC@@UAEHHHPBDPAX@Z
CONST	ENDS
;	COMDAT ??_R4CBufferDC@@6B@
rdata$r	SEGMENT
??_R4CBufferDC@@6B@ DD 00H				; CBufferDC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufferDC@@@8
	DD	FLAT:??_R3CBufferDC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufferDC@@@8
_DATA	SEGMENT
??_R0?AVCBufferDC@@@8 DD FLAT:??_7type_info@@6B@	; CBufferDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufferDC@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBufferDC@@8
rdata$r	SEGMENT
??_R3CBufferDC@@8 DD 00H				; CBufferDC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBufferDC@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufferDC@@8
rdata$r	SEGMENT
??_R2CBufferDC@@8 DD FLAT:??_R1A@?0A@A@CBufferDC@@8	; CBufferDC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CDC@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBufferDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBufferDC@@8 DD FLAT:??_R0?AVCBufferDC@@@8	; CBufferDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CDC@@8 DD FLAT:??_R0?AVCDC@@@8		; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT
??_R0?AVCDC@@@8 DD FLAT:??_7type_info@@6B@		; CDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDC@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hDestDC$ = 8						; size = 4
_rcPaint$ = 12						; size = 4
??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z PROC NEAR	; CBufferDC::CBufferDC
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBufferDC@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 55 08	 mov	 edx, DWORD PTR _hDestDC$[ebp]
  0003a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 14	 add	 ecx, 20			; 00000014H
  00043	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00048	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00052	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 6    : 	if ( rcPaint.IsRectEmpty() )

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _rcPaint$[ebp]
  0005a	e8 00 00 00 00	 call	 ?IsRectEmpty@CRect@@QBEHXZ ; CRect::IsRectEmpty
  0005f	85 c0		 test	 eax, eax
  00061	74 1b		 je	 SHORT $L197387

; 7    : 	{
; 8    : 		::GetClipBox (m_hDestDC, m_rect);

  00063	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00069	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0006e	50		 push	 eax
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00075	51		 push	 ecx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClipBox@8

; 9    : 	}
; 10   : 	else

  0007c	eb 1f		 jmp	 SHORT $L197388
$L197387:

; 11   : 	{
; 12   : 		m_rect = rcPaint;

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _rcPaint$[ebp]
  00081	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00084	83 c0 1c	 add	 eax, 28			; 0000001cH
  00087	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00089	89 08		 mov	 DWORD PTR [eax], ecx
  0008b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0008e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00091	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00094	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00097	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0009a	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L197388:

; 13   : 	}
; 14   : 	VERIFY(Attach (::CreateCompatibleDC (m_hDestDC)));

  0009d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a3	51		 push	 ecx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  000aa	50		 push	 eax
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach

; 15   : 	m_bitmap.Attach (::CreateCompatibleBitmap (m_hDestDC, m_rect.right, m_rect.bottom));

  000b3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000b9	50		 push	 eax
  000ba	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000c0	52		 push	 edx
  000c1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c7	51		 push	 ecx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  000ce	50		 push	 eax
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	83 c1 14	 add	 ecx, 20			; 00000014H
  000d5	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 16   : 	m_hOldBitmap = ::SelectObject (m_hDC, m_bitmap);

  000da	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	83 c1 14	 add	 ecx, 20			; 00000014H
  000e0	e8 00 00 00 00	 call	 ??BCGdiObject@@QBEPAXXZ	; CGdiObject::operator void *
  000e5	50		 push	 eax
  000e6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ec	50		 push	 eax
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  000f3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 17   : 
; 18   : 	if ( m_rect.top > 0 )

  000f9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000fc	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00100	7e 1a		 jle	 SHORT $L197390

; 19   : 	{
; 20   : 		ExcludeClipRect (0, 0, m_rect.right, m_rect.top);

  00102	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00105	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00108	51		 push	 ecx
  00109	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0010c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	6a 00		 push	 0
  00114	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?ExcludeClipRect@CDC@@QAEHHHHH@Z ; CDC::ExcludeClipRect
$L197390:

; 21   : 	}
; 22   : 	if ( m_rect.left > 0 )

  0011c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00123	7e 1f		 jle	 SHORT $L197386

; 23   : 	{
; 24   : 		ExcludeClipRect (0, m_rect.top, m_rect.left, m_rect.bottom);

  00125	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00128	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0012b	50		 push	 eax
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00132	52		 push	 edx
  00133	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00136	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00139	51		 push	 ecx
  0013a	6a 00		 push	 0
  0013c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	e8 00 00 00 00	 call	 ?ExcludeClipRect@CDC@@QAEHHHHH@Z ; CDC::ExcludeClipRect
$L197386:

; 25   : 	}
; 26   : }

  00144	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L197861:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L197862:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 14	 add	 ecx, 20			; 00000014H
  0000e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T197866
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z ENDP		; CBufferDC::CBufferDC
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	??1CBufferDC@@UAE@XZ				; CBufferDC::~CBufferDC
; Function compile flags: /Odt
;	COMDAT ??_GCBufferDC@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBufferDC@@UAEPAXI@Z PROC NEAR			; CBufferDC::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBufferDC@@UAE@XZ	; CBufferDC::~CBufferDC
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L197395
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L197395:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBufferDC@@UAEPAXI@Z ENDP				; CBufferDC::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
EXTRN	?Detach@CDC@@QAEPAUHDC__@@XZ:NEAR		; CDC::Detach
EXTRN	__imp__BitBlt@36:NEAR
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	?Detach@CGdiObject@@QAEPAXXZ:NEAR		; CGdiObject::Detach
xdata$x	SEGMENT
$T197879 DD	0ffffffffH
	DD	FLAT:$L197874
	DD	00H
	DD	FLAT:$L197875
$T197877 DD	019930520H
	DD	02H
	DD	FLAT:$T197879
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24						; size = 4
_pObj$ = -20						; size = 4
_pDc$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBufferDC@@UAE@XZ PROC NEAR				; CBufferDC::~CBufferDC
; _this$ = ecx

; 30   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	6a ff		 push	 -1
  00165	68 00 00 00 00	 push	 __ehhandler$??1CBufferDC@@UAE@XZ
  0016a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00170	50		 push	 eax
  00171	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00178	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0017b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0017e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00181	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBufferDC@@6B@
  00187	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 	VERIFY(::BitBlt (m_hDestDC, m_rect.left, m_rect.top, m_rect.Width(), m_rect.Height(), m_hDC, m_rect.left, m_rect.top, SRCCOPY));

  0018e	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00193	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00199	52		 push	 edx
  0019a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0019d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  001a0	51		 push	 ecx
  001a1	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001a4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001a7	50		 push	 eax
  001a8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ab	83 c1 1c	 add	 ecx, 28			; 0000001cH
  001ae	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  001b3	50		 push	 eax
  001b4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	83 c1 1c	 add	 ecx, 28			; 0000001cH
  001ba	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  001bf	50		 push	 eax
  001c0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001c6	52		 push	 edx
  001c7	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001ca	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  001cd	51		 push	 ecx
  001ce	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001d1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001d4	50		 push	 eax
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 32   : 	::SelectObject (m_hDC, m_hOldBitmap);

  001db	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001de	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001e1	52		 push	 edx
  001e2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001e5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e8	51		 push	 ecx
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 33   : 	HGDIOBJ pObj = m_bitmap.Detach();

  001ef	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	83 c1 14	 add	 ecx, 20			; 00000014H
  001f5	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
  001fa	89 45 ec	 mov	 DWORD PTR _pObj$[ebp], eax

; 34   : 	::DeleteObject(pObj);

  001fd	8b 55 ec	 mov	 edx, DWORD PTR _pObj$[ebp]
  00200	52		 push	 edx
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 35   : 	HDC pDc=Detach();

  00207	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020a	e8 00 00 00 00	 call	 ?Detach@CDC@@QAEPAUHDC__@@XZ ; CDC::Detach
  0020f	89 45 f0	 mov	 DWORD PTR _pDc$[ebp], eax

; 36   : 	::DeleteDC(pDc);

  00212	8b 45 f0	 mov	 eax, DWORD PTR _pDc$[ebp]
  00215	50		 push	 eax
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 37   : }

  0021c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00220	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00223	83 c1 14	 add	 ecx, 20			; 00000014H
  00226	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0022b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00232	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00235	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0023a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0023d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00244	8b e5		 mov	 esp, ebp
  00246	5d		 pop	 ebp
  00247	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L197874:
  0001d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L197875:
  00025	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 14	 add	 ecx, 20			; 00000014H
  0002b	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??1CBufferDC@@UAE@XZ:
  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T197877
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CBufferDC@@UAE@XZ ENDP				; CBufferDC::~CBufferDC
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 110  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT
; _this$ = ecx

; 123  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT
; _this$ = ecx

; 125  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT
; _this$ = ecx

; 143  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
EXTRN	__imp__IsRectEmpty@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?IsRectEmpty@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRectEmpty@CRect@@QBEHXZ PROC NEAR			; CRect::IsRectEmpty, COMDAT
; _this$ = ecx

; 147  : 	{ return ::IsRectEmpty(this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsRectEmpty@4
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?IsRectEmpty@CRect@@QBEHXZ ENDP				; CRect::IsRectEmpty
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 41   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT
; _this$ = ecx

; 43   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
??BCGdiObject@@QBEPAXXZ PROC NEAR			; CGdiObject::operator void *, COMDAT
; _this$ = ecx

; 78   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L197899
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L197900
$L197899:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L197900:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??BCGdiObject@@QBEPAXXZ ENDP				; CGdiObject::operator void *
_TEXT	ENDS
PUBLIC	??_R0?AVCGdiObject@@@8				; CGdiObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CGdiObject@@8			; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R4CBitmap@@6B@				; CBitmap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBitmap@@@8				; CBitmap `RTTI Type Descriptor'
PUBLIC	??_R3CBitmap@@8					; CBitmap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBitmap@@8					; CBitmap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBitmap@@8				; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??_7CBitmap@@6B@				; CBitmap::`vftable'
PUBLIC	??_GCBitmap@@UAEPAXI@Z				; CBitmap::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ:NEAR ; CBitmap::GetRuntimeClass
EXTRN	??_ECBitmap@@UAEPAXI@Z:NEAR			; CBitmap::`vector deleting destructor'
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT
??_7CBitmap@@6B@ DD FLAT:??_R4CBitmap@@6B@		; CBitmap::`vftable'
	DD	FLAT:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBitmap@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT
??_R4CBitmap@@6B@ DD 00H				; CBitmap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBitmap@@@8
	DD	FLAT:??_R3CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT
??_R0?AVCBitmap@@@8 DD FLAT:??_7type_info@@6B@		; CBitmap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBitmap@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT
??_R3CBitmap@@8 DD 00H					; CBitmap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT
??_R2CBitmap@@8 DD FLAT:??_R1A@?0A@A@CBitmap@@8		; CBitmap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBitmap@@8 DD FLAT:??_R0?AVCBitmap@@@8	; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CGdiObject@@8 DD FLAT:??_R0?AVCGdiObject@@@8 ; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT
??_R0?AVCGdiObject@@@8 DD FLAT:??_7type_info@@6B@	; CGdiObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGdiObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBitmap@@QAE@XZ PROC NEAR				; CBitmap::CBitmap, COMDAT
; _this$ = ecx

; 177  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBitmap@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CBitmap@@QAE@XZ ENDP					; CBitmap::CBitmap
_TEXT	ENDS
PUBLIC	??_R4CGdiObject@@6B@				; CGdiObject::`RTTI Complete Object Locator'
PUBLIC	??_R3CGdiObject@@8				; CGdiObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGdiObject@@8				; CGdiObject::`RTTI Base Class Array'
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CGdiObject::GetRuntimeClass
EXTRN	??_ECGdiObject@@UAEPAXI@Z:NEAR			; CGdiObject::`vector deleting destructor'
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:??_R4CGdiObject@@6B@	; CGdiObject::`vftable'
	DD	FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT
??_R4CGdiObject@@6B@ DD 00H				; CGdiObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGdiObject@@@8
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT
??_R3CGdiObject@@8 DD 00H				; CGdiObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT
??_R2CGdiObject@@8 DD FLAT:??_R1A@?0A@A@CGdiObject@@8	; CGdiObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGdiObject@@QAE@XZ PROC NEAR				; CGdiObject::CGdiObject, COMDAT
; _this$ = ecx

; 82   : 	{ m_hObject = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObject@@IAE@XZ PROC NEAR				; CObject::CObject, COMDAT
; _this$ = ecx

; 21   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGdiObject@@UAEPAXI@Z PROC NEAR			; CGdiObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41495
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41495:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
xdata$x	SEGMENT
$T197917 DD	0ffffffffH
	DD	FLAT:$L197913
$T197915 DD	019930520H
	DD	01H
	DD	FLAT:$T197917
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGdiObject@@UAE@XZ PROC NEAR				; CGdiObject::~CGdiObject, COMDAT
; _this$ = ecx

; 84   : 	{ DeleteObject(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGdiObject@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L197913:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CGdiObject@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T197915
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CObject@@UAE@XZ PROC NEAR				; CObject::~CObject, COMDAT
; _this$ = ecx

; 23   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBitmap@@UAEPAXI@Z PROC NEAR			; CBitmap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41685
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41685:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBitmap@@UAEPAXI@Z ENDP				; CBitmap::`scalar deleting destructor'
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBitmap@@UAE@XZ PROC NEAR				; CBitmap::~CBitmap, COMDAT
; _this$ = ecx

; 179  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBitmap@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CBitmap@@UAE@XZ ENDP					; CBitmap::~CBitmap
_TEXT	ENDS
EXTRN	__imp__PtVisible@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?PtVisible@CDC@@UBEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?PtVisible@CDC@@UBEHHH@Z PROC NEAR			; CDC::PtVisible, COMDAT
; _this$ = ecx

; 446  : 	{ ASSERT(m_hDC != NULL); return ::PtVisible(m_hDC, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtVisible@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?PtVisible@CDC@@UBEHHH@Z ENDP				; CDC::PtVisible
_TEXT	ENDS
EXTRN	__imp__RectVisible@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?RectVisible@CDC@@UBEHPBUtagRECT@@@Z PROC NEAR		; CDC::RectVisible, COMDAT
; _this$ = ecx

; 450  : 	{ ASSERT(m_hDC != NULL); return ::RectVisible(m_hDC, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RectVisible@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?RectVisible@CDC@@UBEHPBUtagRECT@@@Z ENDP		; CDC::RectVisible
_TEXT	ENDS
EXTRN	__imp__TextOutA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?TextOutA@CDC@@UAEHHHPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_lpszString$ = 16					; size = 4
_nCount$ = 20						; size = 4
?TextOutA@CDC@@UAEHHHPBDH@Z PROC NEAR			; CDC::TextOutA, COMDAT
; _this$ = ecx

; 568  : 	{ ASSERT(m_hDC != NULL); return ::TextOut(m_hDC, x, y, lpszString, nCount); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _nCount$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _lpszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?TextOutA@CDC@@UAEHHHPBDH@Z ENDP			; CDC::TextOutA
_TEXT	ENDS
EXTRN	__imp__ExtTextOutA@32:NEAR
; Function compile flags: /Odt
;	COMDAT ?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nOptions$ = 16						; size = 4
_lpRect$ = 20						; size = 4
_lpszString$ = 24					; size = 4
_nCount$ = 28						; size = 4
_lpDxWidths$ = 32					; size = 4
?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z PROC NEAR ; CDC::ExtTextOutA, COMDAT
; _this$ = ecx

; 573  : 	{ ASSERT(m_hDC != NULL); return ::ExtTextOut(m_hDC, x, y, nOptions, lpRect,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 574  : 		lpszString, nCount, lpDxWidths); }

  00007	8b 45 20	 mov	 eax, DWORD PTR _lpDxWidths$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 1c	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _lpszString$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _lpRect$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 10	 mov	 ecx, DWORD PTR _nOptions$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExtTextOutA@32
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 1c 00	 ret	 28			; 0000001cH
?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z ENDP	; CDC::ExtTextOutA
_TEXT	ENDS
PUBLIC	??0CSize@@QAE@K@Z				; CSize::CSize
EXTRN	__imp__TabbedTextOutA@32:NEAR
; Function compile flags: /Odt
;	COMDAT ?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lpszString$ = 20					; size = 4
_nCount$ = 24						; size = 4
_nTabPositions$ = 28					; size = 4
_lpnTabStopPositions$ = 32				; size = 4
_nTabOrigin$ = 36					; size = 4
?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z PROC NEAR ; CDC::TabbedTextOutA, COMDAT
; _this$ = ecx

; 581  : 	{ ASSERT(m_hDC != NULL); return ::TabbedTextOut(m_hDC, x, y, lpszString, nCount,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 582  : 		nTabPositions, lpnTabStopPositions, nTabOrigin); }

  00007	8b 45 24	 mov	 eax, DWORD PTR _nTabOrigin$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR _lpnTabStopPositions$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 1c	 mov	 edx, DWORD PTR _nTabPositions$[ebp]
  00012	52		 push	 edx
  00013	8b 45 18	 mov	 eax, DWORD PTR _nCount$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _lpszString$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TabbedTextOutA@32
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	e8 00 00 00 00	 call	 ??0CSize@@QAE@K@Z	; CSize::CSize
  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 20 00	 ret	 32			; 00000020H
?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z ENDP	; CDC::TabbedTextOutA
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwSize$ = 8						; size = 4
??0CSize@@QAE@K@Z PROC NEAR				; CSize::CSize, COMDAT
; _this$ = ecx

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 		cx = (short)LOWORD(dwSize);

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	0f bf c8	 movsx	 ecx, ax
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	89 0a		 mov	 DWORD PTR [edx], ecx

; 32   : 		cy = (short)HIWORD(dwSize);

  00017	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0001a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0001d	0f bf c8	 movsx	 ecx, ax
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 33   : 	}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0CSize@@QAE@K@Z ENDP					; CSize::CSize
_TEXT	ENDS
EXTRN	__imp__DrawTextA@20:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszString$ = 8					; size = 4
_nCount$ = 12						; size = 4
_lpRect$ = 16						; size = 4
_nFormat$ = 20						; size = 4
?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z PROC NEAR	; CDC::DrawTextA, COMDAT
; _this$ = ecx

; 589  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 		return ::DrawText(m_hDC, lpszString, nCount, lpRect, nFormat); }

  00007	8b 45 14	 mov	 eax, DWORD PTR _nFormat$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpszString$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z ENDP		; CDC::DrawTextA
_TEXT	ENDS
EXTRN	__imp__DrawTextExA@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszString$ = 8					; size = 4
_nCount$ = 12						; size = 4
_lpRect$ = 16						; size = 4
_nFormat$ = 20						; size = 4
_lpDTParams$ = 24					; size = 4
?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z PROC NEAR ; CDC::DrawTextExA, COMDAT
; _this$ = ecx

; 600  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		return ::DrawTextEx(m_hDC, lpszString, nCount, lpRect, nFormat, lpDTParams); }

  00007	8b 45 18	 mov	 eax, DWORD PTR _lpDTParams$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nFormat$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _lpszString$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextExA@24
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ENDP ; CDC::DrawTextExA
_TEXT	ENDS
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
EXTRN	__imp__GrayStringA@36:NEAR
; Function compile flags: /Odt
;	COMDAT ?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBrush$ = 8						; size = 4
_lpfnOutput$ = 12					; size = 4
_lpData$ = 16						; size = 4
_nCount$ = 20						; size = 4
_x$ = 24						; size = 4
_y$ = 28						; size = 4
_nWidth$ = 32						; size = 4
_nHeight$ = 36						; size = 4
?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z PROC NEAR ; CDC::GrayStringA, COMDAT
; _this$ = ecx

; 659  : 	{ ASSERT(m_hDC != NULL); return ::GrayString(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 660  : 		(GRAYSTRINGPROC)lpfnOutput, lpData, nCount, x, y, nWidth, nHeight); }

  00007	8b 45 24	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 1c	 mov	 edx, DWORD PTR _y$[ebp]
  00012	52		 push	 edx
  00013	8b 45 18	 mov	 eax, DWORD PTR _x$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _lpData$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _lpfnOutput$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _pBrush$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	52		 push	 edx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrayStringA@36
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 20 00	 ret	 32			; 00000020H
?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z ENDP ; CDC::GrayStringA
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC NEAR		; CGdiObject::GetSafeHandle, COMDAT
; _this$ = ecx

; 80   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L197947
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L197948
$L197947:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L197948:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
_TEXT	ENDS
EXTRN	__imp__Escape@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Escape@CDC@@UAEHHHPBDPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nEscape$ = 8						; size = 4
_nCount$ = 12						; size = 4
_lpszInData$ = 16					; size = 4
_lpOutData$ = 20					; size = 4
?Escape@CDC@@UAEHHHPBDPAX@Z PROC NEAR			; CDC::Escape, COMDAT
; _this$ = ecx

; 703  : 	{ ASSERT(m_hDC != NULL); return ::Escape(m_hDC, nEscape, nCount, lpszInData, lpOutData);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _lpOutData$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _lpszInData$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nEscape$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Escape@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?Escape@CDC@@UAEHHHPBDPAX@Z ENDP			; CDC::Escape
_TEXT	ENDS
END
