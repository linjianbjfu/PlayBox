; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\CommonControl\SkinScroll\custdraw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?fCustomDraw@@3HA				; fCustomDraw
PUBLIC	?hdcSkin@@3PAUHDC__@@A				; hdcSkin
PUBLIC	?hSkinBmp@@3PAUHBITMAP__@@A			; hSkinBmp
PUBLIC	?hpen@@3PAUHPEN__@@A				; hpen
PUBLIC	?oldpen@@3PAUHPEN__@@A				; oldpen
PUBLIC	?whitepen@@3PAUHPEN__@@A			; whitepen
PUBLIC	?hfont@@3PAUHFONT__@@A				; hfont
PUBLIC	?hemf@@3PAUHENHMETAFILE__@@A			; hemf
PUBLIC	?cdt_horz_normal@@3PAUCustomDrawTable@@A	; cdt_horz_normal
PUBLIC	?cdt_horz_hot@@3PAUCustomDrawTable@@A		; cdt_horz_hot
PUBLIC	?cdt_horz_active@@3PAUCustomDrawTable@@A	; cdt_horz_active
PUBLIC	?cdt_vert_normal@@3PAUCustomDrawTable@@A	; cdt_vert_normal
PUBLIC	?cdt_vert_hot@@3PAUCustomDrawTable@@A		; cdt_vert_hot
PUBLIC	?cdt_vert_active@@3PAUCustomDrawTable@@A	; cdt_vert_active
_BSS	SEGMENT
?hdcSkin@@3PAUHDC__@@A DD 01H DUP (?)			; hdcSkin
?hSkinBmp@@3PAUHBITMAP__@@A DD 01H DUP (?)		; hSkinBmp
?hpen@@3PAUHPEN__@@A DD 01H DUP (?)			; hpen
?oldpen@@3PAUHPEN__@@A DD 01H DUP (?)			; oldpen
?whitepen@@3PAUHPEN__@@A DD 01H DUP (?)			; whitepen
?hfont@@3PAUHFONT__@@A DD 01H DUP (?)			; hfont
?hemf@@3PAUHENHMETAFILE__@@A DD 01H DUP (?)		; hemf
_BSS	ENDS
_DATA	SEGMENT
?fCustomDraw@@3HA DD 01H				; fCustomDraw
_DATA	ENDS
CONST	SEGMENT
$SG197520 DB	'c:\skin01.bmp', 00H
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?cdt_horz_normal@@3PAUCustomDrawTable@@A DD 00H		; cdt_horz_normal
	DD	00H
	DD	012H
	DD	012H
	DD	00H
	DD	013H
	DD	012H
	DD	012H
	DD	00H
	DD	053H
	DD	01H
	DD	012H
	DD	00H
	DD	053H
	DD	01H
	DD	012H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	036H
	DD	00H
	DD	09H
	DD	012H
	DD	03fH
	DD	00H
	DD	01H
	DD	012H
	DD	03fH
	DD	00H
	DD	09H
	DD	012H
?cdt_horz_hot@@3PAUCustomDrawTable@@A DD 012H		; cdt_horz_hot
	DD	00H
	DD	012H
	DD	012H
	DD	012H
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	036H
	DD	013H
	DD	09H
	DD	012H
	DD	03fH
	DD	013H
	DD	01H
	DD	012H
	DD	03fH
	DD	013H
	DD	09H
	DD	012H
?cdt_horz_active@@3PAUCustomDrawTable@@A DD 024H	; cdt_horz_active
	DD	00H
	DD	012H
	DD	012H
	DD	024H
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	04H
	DD	053H
	DD	01H
	DD	012H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	036H
	DD	026H
	DD	09H
	DD	012H
	DD	03fH
	DD	026H
	DD	01H
	DD	012H
	DD	03fH
	DD	026H
	DD	09H
	DD	012H
?cdt_vert_normal@@3PAUCustomDrawTable@@A DD 048H	; cdt_vert_normal
	DD	00H
	DD	012H
	DD	012H
	DD	048H
	DD	013H
	DD	012H
	DD	012H
	DD	00H
	DD	070H
	DD	012H
	DD	01H
	DD	00H
	DD	070H
	DD	012H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	07eH
	DD	00H
	DD	012H
	DD	09H
	DD	07eH
	DD	09H
	DD	012H
	DD	01H
	DD	07eH
	DD	09H
	DD	012H
	DD	09H
?cdt_vert_hot@@3PAUCustomDrawTable@@A DD 05aH		; cdt_vert_hot
	DD	00H
	DD	012H
	DD	012H
	DD	05aH
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	07eH
	DD	013H
	DD	012H
	DD	09H
	DD	07eH
	DD	01cH
	DD	012H
	DD	01H
	DD	07eH
	DD	01cH
	DD	012H
	DD	09H
?cdt_vert_active@@3PAUCustomDrawTable@@A DD 06cH	; cdt_vert_active
	DD	00H
	DD	012H
	DD	012H
	DD	06cH
	DD	013H
	DD	012H
	DD	012H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	04H
	DD	053H
	DD	012H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	07eH
	DD	026H
	DD	012H
	DD	09H
	DD	07eH
	DD	02fH
	DD	012H
	DD	01H
	DD	07eH
	DD	02fH
	DD	012H
	DD	09H
_DATA	ENDS
CONST	SEGMENT
	ORG $+2
$SG197559 DB	'ScrollBarCornerColor', 00H
CONST	ENDS
PUBLIC	_InitTest
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	__imp__LoadImageA@24:NEAR
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\commoncontrol\skinscroll\custdraw.cpp
_TEXT	SEGMENT
_InitTest PROC NEAR

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	hdcSkin  = CreateCompatibleDC(0);

  00003	6a 00		 push	 0
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?hdcSkin@@3PAUHDC__@@A, eax ; hdcSkin

; 25   : 	hSkinBmp = (HBITMAP)LoadImage(0, "c:\\skin01.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

  00010	68 10 20 00 00	 push	 8208			; 00002010H
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:$SG197520
  00020	6a 00		 push	 0
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadImageA@24
  00028	a3 00 00 00 00	 mov	 DWORD PTR ?hSkinBmp@@3PAUHBITMAP__@@A, eax ; hSkinBmp

; 26   : 	SelectObject(hdcSkin, hSkinBmp);

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSkinBmp@@3PAUHBITMAP__@@A ; hSkinBmp
  00032	50		 push	 eax
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hdcSkin@@3PAUHDC__@@A ; hdcSkin
  00039	51		 push	 ecx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 27   : 
; 28   : //	DeleteEnhMetaFile(hemf);
; 29   : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_InitTest ENDP
_TEXT	ENDS
PUBLIC	?HandleCustomDraw@@YAJIPAUNMCSBCUSTOMDRAW@@PAVCDibBitmap@@1@Z ; HandleCustomDraw
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
EXTRN	?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z:NEAR	; CDibBitmap::Draw
EXTRN	?GetWidth@CDibBitmap@@QAEHXZ:NEAR		; CDibBitmap::GetWidth
EXTRN	?GetHeight@CDibBitmap@@QAEHXZ:NEAR		; CDibBitmap::GetHeight
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:NEAR	; CDC::FillSolidRect
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
; Function compile flags: /Odt
_TEXT	SEGMENT
tv87 = -52						; size = 4
tv82 = -48						; size = 4
_delta$197585 = -44					; size = 4
_h$197584 = -40						; size = 4
_w$197583 = -36						; size = 4
_delta$197572 = -32					; size = 4
_h$197571 = -28						; size = 4
_w$197570 = -24						; size = 4
_clr$197558 = -20					; size = 4
_rc$197557 = -16					; size = 4
_pDC$ = -12						; size = 4
_code$ = -8						; size = 4
_rc$ = -4						; size = 4
_ctrlid$ = 8						; size = 4
_nm$ = 12						; size = 4
_bmpV$ = 16						; size = 4
_bmpH$ = 20						; size = 4
?HandleCustomDraw@@YAJIPAUNMCSBCUSTOMDRAW@@PAVCDibBitmap@@1@Z PROC NEAR ; HandleCustomDraw

; 129  : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	83 ec 34	 sub	 esp, 52			; 00000034H

; 130  : 	RECT *rc;
; 131  : 	//CustomDrawTable *cdt;
; 132  : 	UINT code = NM_CUSTOMDRAW;

  00056	c7 45 f8 f4 ff
	ff ff		 mov	 DWORD PTR _code$[ebp], -12 ; fffffff4H

; 133  : 
; 134  : 	CDC* pDC = CDC::FromHandle(nm->hdc);

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  00060	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  00069	89 45 f4	 mov	 DWORD PTR _pDC$[ebp], eax

; 135  : 
; 136  : 	UNREFERENCED_PARAMETER(ctrlid);
; 137  : 
; 138  : 	if(bmpV == NULL || bmpH == NULL)

  0006c	83 7d 10 00	 cmp	 DWORD PTR _bmpV$[ebp], 0
  00070	74 06		 je	 SHORT $L197549
  00072	83 7d 14 00	 cmp	 DWORD PTR _bmpH$[ebp], 0
  00076	75 07		 jne	 SHORT $L197548
$L197549:

; 139  : 		return CDRF_DODEFAULT;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 05 05 00 00	 jmp	 $L197544
$L197548:

; 140  : 
; 141  : 	// inserted buttons do not use PREPAINT etc..
; 142  : 	if(nm->nBar == SB_INSBUT)

  0007f	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  00082	83 7a 2c fe	 cmp	 DWORD PTR [edx+44], -2	; fffffffeH
  00086	75 0a		 jne	 SHORT $L197550

; 143  : 	{
; 144  : 		//CoolSB_DrawProc(nm->hdc, nm->uItem, nm->uState, &nm->rect);
; 145  : 		return CDRF_SKIPDEFAULT;

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	e9 f2 04 00 00	 jmp	 $L197544
$L197550:

; 146  : 	}
; 147  : 	
; 148  : 	if(!fCustomDraw) return CDRF_DODEFAULT;

  00092	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fCustomDraw@@3HA, 0 ; fCustomDraw
  00099	75 07		 jne	 SHORT $L197551
  0009b	33 c0		 xor	 eax, eax
  0009d	e9 e2 04 00 00	 jmp	 $L197544
$L197551:

; 149  : 
; 150  : 	if(nm->dwDrawStage == CDDS_PREPAINT)

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  000a5	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  000a9	75 1a		 jne	 SHORT $L197555

; 151  : 	{
; 152  : 		if(fCustomDraw)

  000ab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fCustomDraw@@3HA, 0 ; fCustomDraw
  000b2	74 0a		 je	 SHORT $L197553

; 153  : 			return CDRF_SKIPDEFAULT;

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	e9 c6 04 00 00	 jmp	 $L197544
$L197553:

; 154  : 		else
; 155  : 			return CDRF_DODEFAULT;

  000be	33 c0		 xor	 eax, eax
  000c0	e9 bf 04 00 00	 jmp	 $L197544
$L197555:

; 156  : 	}
; 157  : 
; 158  : 
; 159  : 	if(nm->dwDrawStage == CDDS_POSTPAINT)
; 160  : 	{
; 161  : 		
; 162  : 	}
; 163  : 
; 164  : 	//the sizing gripper in the bottom-right corner
; 165  : 	if(nm->nBar == SB_BOTH)	

  000c5	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  000c8	83 7a 2c 03	 cmp	 DWORD PTR [edx+44], 3
  000cc	75 59		 jne	 SHORT $L197556

; 166  : 	{
; 167  : 		RECT *rc = &nm->rect;

  000ce	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  000d1	83 c0 14	 add	 eax, 20			; 00000014H
  000d4	89 45 f0	 mov	 DWORD PTR _rc$197557[ebp], eax

; 168  : 		//StretchBlt(nm->hdc, rc->left, rc->top, rc->right-rc->left, rc->bottom-rc->top,
; 169  : 		//	hdcSkin, 100, 100, 18, 18, SRCCOPY);
; 170  : 		COLORREF clr = ::AfxGetUIManager()->UIGetSkinMgr()->GetColor("ScrollBarCornerColor");

  000d7	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  000dc	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  000df	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  000e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e4	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  000e7	ff 52 28	 call	 DWORD PTR [edx+40]
  000ea	89 45 cc	 mov	 DWORD PTR tv87[ebp], eax
  000ed	68 00 00 00 00	 push	 OFFSET FLAT:$SG197559
  000f2	8b 45 cc	 mov	 eax, DWORD PTR tv87[ebp]
  000f5	8b 10		 mov	 edx, DWORD PTR [eax]
  000f7	8b 4d cc	 mov	 ecx, DWORD PTR tv87[ebp]
  000fa	ff 52 08	 call	 DWORD PTR [edx+8]
  000fd	89 45 ec	 mov	 DWORD PTR _clr$197558[ebp], eax

; 171  : 		if(clr == 0)

  00100	83 7d ec 00	 cmp	 DWORD PTR _clr$197558[ebp], 0
  00104	75 07		 jne	 SHORT $L197560

; 172  : 			clr = RGB(255,255,255);

  00106	c7 45 ec ff ff
	ff 00		 mov	 DWORD PTR _clr$197558[ebp], 16777215 ; 00ffffffH
$L197560:

; 173  : 		pDC->FillSolidRect(	rc, clr);

  0010d	8b 45 ec	 mov	 eax, DWORD PTR _clr$197558[ebp]
  00110	50		 push	 eax
  00111	8b 4d f0	 mov	 ecx, DWORD PTR _rc$197557[ebp]
  00114	51		 push	 ecx
  00115	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00118	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 174  : 		return CDRF_SKIPDEFAULT;

  0011d	b8 04 00 00 00	 mov	 eax, 4
  00122	e9 5d 04 00 00	 jmp	 $L197544
$L197556:

; 175  : 	}
; 176  : 
; 177  : 	rc = &nm->rect;

  00127	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  0012a	83 c2 14	 add	 edx, 20			; 00000014H
  0012d	89 55 fc	 mov	 DWORD PTR _rc$[ebp], edx

; 178  : 	if(rc->left == 0 && rc->right == 0)

  00130	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00133	83 38 00	 cmp	 DWORD PTR [eax], 0
  00136	75 13		 jne	 SHORT $L197567
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0013b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0013f	75 0a		 jne	 SHORT $L197567

; 179  : 		return CDRF_SKIPDEFAULT;

  00141	b8 04 00 00 00	 mov	 eax, 4
  00146	e9 39 04 00 00	 jmp	 $L197544
$L197567:

; 180  : 
; 181  : 	else if(nm->nBar == SB_HORZ)

  0014b	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  0014e	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00152	0f 85 01 02 00
	00		 jne	 $L197569

; 182  : 	{
; 183  : 		int w = bmpH->GetWidth() / 3;

  00158	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  0015b	e8 00 00 00 00	 call	 ?GetWidth@CDibBitmap@@QAEHXZ ; CDibBitmap::GetWidth
  00160	99		 cdq
  00161	b9 03 00 00 00	 mov	 ecx, 3
  00166	f7 f9		 idiv	 ecx
  00168	89 45 e8	 mov	 DWORD PTR _w$197570[ebp], eax

; 184  : 		int h = bmpH->GetHeight() / 6;

  0016b	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  0016e	e8 00 00 00 00	 call	 ?GetHeight@CDibBitmap@@QAEHXZ ; CDibBitmap::GetHeight
  00173	99		 cdq
  00174	b9 06 00 00 00	 mov	 ecx, 6
  00179	f7 f9		 idiv	 ecx
  0017b	89 45 e4	 mov	 DWORD PTR _h$197571[ebp], eax

; 185  : 		int delta = 0;

  0017e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _delta$197572[ebp], 0

; 186  : 		rc = &nm->rect;

  00185	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  00188	83 c2 14	 add	 edx, 20			; 00000014H
  0018b	89 55 fc	 mov	 DWORD PTR _rc$[ebp], edx

; 187  : 
; 188  : 		if(nm->uState == CDIS_HOT)	

  0018e	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  00191	83 78 28 40	 cmp	 DWORD PTR [eax+40], 64	; 00000040H
  00195	75 08		 jne	 SHORT $L197573

; 189  : 			delta = w;

  00197	8b 4d e8	 mov	 ecx, DWORD PTR _w$197570[ebp]
  0019a	89 4d e0	 mov	 DWORD PTR _delta$197572[ebp], ecx

; 190  : 		else if(nm->uState == CDIS_SELECTED) 

  0019d	eb 11		 jmp	 SHORT $L197574
$L197573:
  0019f	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  001a2	83 7a 28 01	 cmp	 DWORD PTR [edx+40], 1
  001a6	75 08		 jne	 SHORT $L197574

; 191  : 			delta = w * 2;

  001a8	8b 45 e8	 mov	 eax, DWORD PTR _w$197570[ebp]
  001ab	d1 e0		 shl	 eax, 1
  001ad	89 45 e0	 mov	 DWORD PTR _delta$197572[ebp], eax
$L197574:

; 192  : 		
; 193  : 		if(nm->uItem == HTSCROLL_THUMB)

  001b0	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  001b3	83 79 24 05	 cmp	 DWORD PTR [ecx+36], 5
  001b7	0f 85 b7 00 00
	00		 jne	 $L197576

; 194  : 		{
; 195  : 			bmpH->Draw(pDC, rc->left, rc->top, 2 ,h, delta, h * 4, 2, h);

  001bd	8b 55 e4	 mov	 edx, DWORD PTR _h$197571[ebp]
  001c0	52		 push	 edx
  001c1	6a 02		 push	 2
  001c3	8b 45 e4	 mov	 eax, DWORD PTR _h$197571[ebp]
  001c6	c1 e0 02	 shl	 eax, 2
  001c9	50		 push	 eax
  001ca	8b 4d e0	 mov	 ecx, DWORD PTR _delta$197572[ebp]
  001cd	51		 push	 ecx
  001ce	8b 55 e4	 mov	 edx, DWORD PTR _h$197571[ebp]
  001d1	52		 push	 edx
  001d2	6a 02		 push	 2
  001d4	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  001d7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001da	51		 push	 ecx
  001db	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  001de	8b 02		 mov	 eax, DWORD PTR [edx]
  001e0	50		 push	 eax
  001e1	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  001e4	51		 push	 ecx
  001e5	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  001e8	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 196  : 			bmpH->Draw(pDC, rc->left + 2, rc->top, (rc->right-rc->left)-4, rc->bottom-rc->top, delta, h*6, 1, h);

  001ed	8b 55 e4	 mov	 edx, DWORD PTR _h$197571[ebp]
  001f0	52		 push	 edx
  001f1	6a 01		 push	 1
  001f3	8b 45 e4	 mov	 eax, DWORD PTR _h$197571[ebp]
  001f6	6b c0 06	 imul	 eax, 6
  001f9	50		 push	 eax
  001fa	8b 4d e0	 mov	 ecx, DWORD PTR _delta$197572[ebp]
  001fd	51		 push	 ecx
  001fe	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00201	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00204	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00207	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0020a	51		 push	 ecx
  0020b	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0020e	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00211	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00214	2b 08		 sub	 ecx, DWORD PTR [eax]
  00216	83 e9 04	 sub	 ecx, 4
  00219	51		 push	 ecx
  0021a	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0021d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00220	50		 push	 eax
  00221	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00224	8b 11		 mov	 edx, DWORD PTR [ecx]
  00226	83 c2 02	 add	 edx, 2
  00229	52		 push	 edx
  0022a	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  0022d	50		 push	 eax
  0022e	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  00231	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 197  : 			bmpH->Draw(pDC, rc->right-2, rc->top, 2, h, delta, h * 5, 2,h);

  00236	8b 4d e4	 mov	 ecx, DWORD PTR _h$197571[ebp]
  00239	51		 push	 ecx
  0023a	6a 02		 push	 2
  0023c	8b 55 e4	 mov	 edx, DWORD PTR _h$197571[ebp]
  0023f	6b d2 05	 imul	 edx, 5
  00242	52		 push	 edx
  00243	8b 45 e0	 mov	 eax, DWORD PTR _delta$197572[ebp]
  00246	50		 push	 eax
  00247	8b 4d e4	 mov	 ecx, DWORD PTR _h$197571[ebp]
  0024a	51		 push	 ecx
  0024b	6a 02		 push	 2
  0024d	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00250	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00253	50		 push	 eax
  00254	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00257	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0025a	83 ea 02	 sub	 edx, 2
  0025d	52		 push	 edx
  0025e	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00261	50		 push	 eax
  00262	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  00265	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 198  : 			return CDRF_SKIPDEFAULT;

  0026a	b8 04 00 00 00	 mov	 eax, 4
  0026f	e9 10 03 00 00	 jmp	 $L197544
$L197576:

; 199  : 		}
; 200  : 		if(nm->uItem == HTSCROLL_LEFT)

  00274	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  00277	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0027b	75 3b		 jne	 SHORT $L197577

; 201  : 		{
; 202  : 			bmpH->Draw(pDC, rc->left, rc->top, w,h, delta, h, w, h);

  0027d	8b 55 e4	 mov	 edx, DWORD PTR _h$197571[ebp]
  00280	52		 push	 edx
  00281	8b 45 e8	 mov	 eax, DWORD PTR _w$197570[ebp]
  00284	50		 push	 eax
  00285	8b 4d e4	 mov	 ecx, DWORD PTR _h$197571[ebp]
  00288	51		 push	 ecx
  00289	8b 55 e0	 mov	 edx, DWORD PTR _delta$197572[ebp]
  0028c	52		 push	 edx
  0028d	8b 45 e4	 mov	 eax, DWORD PTR _h$197571[ebp]
  00290	50		 push	 eax
  00291	8b 4d e8	 mov	 ecx, DWORD PTR _w$197570[ebp]
  00294	51		 push	 ecx
  00295	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00298	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0029b	50		 push	 eax
  0029c	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0029f	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a1	52		 push	 edx
  002a2	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  002a5	50		 push	 eax
  002a6	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  002a9	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 203  : 			return CDRF_SKIPDEFAULT;

  002ae	b8 04 00 00 00	 mov	 eax, 4
  002b3	e9 cc 02 00 00	 jmp	 $L197544
$L197577:

; 204  : 		}
; 205  : 		if(nm->uItem == HTSCROLL_RIGHT)

  002b8	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  002bb	83 79 24 01	 cmp	 DWORD PTR [ecx+36], 1
  002bf	75 3d		 jne	 SHORT $L197578

; 206  : 		{
; 207  : 			bmpH->Draw(pDC, rc->left, rc->top, w ,h, delta, h * 2, w, h);

  002c1	8b 55 e4	 mov	 edx, DWORD PTR _h$197571[ebp]
  002c4	52		 push	 edx
  002c5	8b 45 e8	 mov	 eax, DWORD PTR _w$197570[ebp]
  002c8	50		 push	 eax
  002c9	8b 4d e4	 mov	 ecx, DWORD PTR _h$197571[ebp]
  002cc	d1 e1		 shl	 ecx, 1
  002ce	51		 push	 ecx
  002cf	8b 55 e0	 mov	 edx, DWORD PTR _delta$197572[ebp]
  002d2	52		 push	 edx
  002d3	8b 45 e4	 mov	 eax, DWORD PTR _h$197571[ebp]
  002d6	50		 push	 eax
  002d7	8b 4d e8	 mov	 ecx, DWORD PTR _w$197570[ebp]
  002da	51		 push	 ecx
  002db	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  002de	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002e1	50		 push	 eax
  002e2	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  002e5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e7	52		 push	 edx
  002e8	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  002eb	50		 push	 eax
  002ec	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  002ef	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 208  : 			return CDRF_SKIPDEFAULT;

  002f4	b8 04 00 00 00	 mov	 eax, 4
  002f9	e9 86 02 00 00	 jmp	 $L197544
$L197578:

; 209  : 		}
; 210  : 		if(nm->uItem == HTSCROLL_PAGELEFT || nm->uItem == HTSCROLL_PAGERIGHT)

  002fe	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  00301	83 79 24 02	 cmp	 DWORD PTR [ecx+36], 2
  00305	74 09		 je	 SHORT $L197580
  00307	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  0030a	83 7a 24 03	 cmp	 DWORD PTR [edx+36], 3
  0030e	75 44		 jne	 SHORT $L197579
$L197580:

; 211  : 		{
; 212  : 			bmpH->Draw(pDC, rc->left, rc->top, rc->right - rc->left ,h, w, h*3, 1, h);

  00310	8b 45 e4	 mov	 eax, DWORD PTR _h$197571[ebp]
  00313	50		 push	 eax
  00314	6a 01		 push	 1
  00316	8b 4d e4	 mov	 ecx, DWORD PTR _h$197571[ebp]
  00319	6b c9 03	 imul	 ecx, 3
  0031c	51		 push	 ecx
  0031d	8b 55 e8	 mov	 edx, DWORD PTR _w$197570[ebp]
  00320	52		 push	 edx
  00321	8b 45 e4	 mov	 eax, DWORD PTR _h$197571[ebp]
  00324	50		 push	 eax
  00325	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00328	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0032b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0032e	2b 02		 sub	 eax, DWORD PTR [edx]
  00330	50		 push	 eax
  00331	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00334	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00337	52		 push	 edx
  00338	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  0033b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033d	51		 push	 ecx
  0033e	8b 55 f4	 mov	 edx, DWORD PTR _pDC$[ebp]
  00341	52		 push	 edx
  00342	8b 4d 14	 mov	 ecx, DWORD PTR _bmpH$[ebp]
  00345	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 213  : 			return CDRF_SKIPDEFAULT;

  0034a	b8 04 00 00 00	 mov	 eax, 4
  0034f	e9 30 02 00 00	 jmp	 $L197544
$L197579:

; 214  : 		}
; 215  : 
; 216  : 	}
; 217  : 	else if(nm->nBar == SB_VERT)

  00354	e9 26 02 00 00	 jmp	 $L197568
$L197569:
  00359	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  0035c	83 78 2c 01	 cmp	 DWORD PTR [eax+44], 1
  00360	0f 85 05 02 00
	00		 jne	 $L197582

; 218  : 	{
; 219  : 		rc = &nm->rect;

  00366	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  00369	83 c1 14	 add	 ecx, 20			; 00000014H
  0036c	89 4d fc	 mov	 DWORD PTR _rc$[ebp], ecx

; 220  : 		int w = bmpV->GetWidth() / 6;

  0036f	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  00372	e8 00 00 00 00	 call	 ?GetWidth@CDibBitmap@@QAEHXZ ; CDibBitmap::GetWidth
  00377	99		 cdq
  00378	b9 06 00 00 00	 mov	 ecx, 6
  0037d	f7 f9		 idiv	 ecx
  0037f	89 45 dc	 mov	 DWORD PTR _w$197583[ebp], eax

; 221  : 		int h = bmpV->GetHeight() / 3;

  00382	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  00385	e8 00 00 00 00	 call	 ?GetHeight@CDibBitmap@@QAEHXZ ; CDibBitmap::GetHeight
  0038a	99		 cdq
  0038b	b9 03 00 00 00	 mov	 ecx, 3
  00390	f7 f9		 idiv	 ecx
  00392	89 45 d8	 mov	 DWORD PTR _h$197584[ebp], eax

; 222  : 		int delta = 0;

  00395	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _delta$197585[ebp], 0

; 223  : 		if(nm->uState == CDIS_HOT)		

  0039c	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  0039f	83 7a 28 40	 cmp	 DWORD PTR [edx+40], 64	; 00000040H
  003a3	75 08		 jne	 SHORT $L197586

; 224  : 			delta = h;

  003a5	8b 45 d8	 mov	 eax, DWORD PTR _h$197584[ebp]
  003a8	89 45 d4	 mov	 DWORD PTR _delta$197585[ebp], eax

; 225  : 		else if(nm->uState == CDIS_SELECTED)  

  003ab	eb 11		 jmp	 SHORT $L197587
$L197586:
  003ad	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  003b0	83 79 28 01	 cmp	 DWORD PTR [ecx+40], 1
  003b4	75 08		 jne	 SHORT $L197587

; 226  : 			delta = h * 2;

  003b6	8b 55 d8	 mov	 edx, DWORD PTR _h$197584[ebp]
  003b9	d1 e2		 shl	 edx, 1
  003bb	89 55 d4	 mov	 DWORD PTR _delta$197585[ebp], edx
$L197587:

; 227  : 
; 228  : 		if(nm->uItem == HTSCROLL_THUMB)

  003be	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  003c1	83 78 24 05	 cmp	 DWORD PTR [eax+36], 5
  003c5	0f 85 bf 00 00
	00		 jne	 $L197589

; 229  : 		{
; 230  : 			bmpV->Draw(pDC, rc->left, rc->top, w , 2, w * 3, 2 + delta, w, 2);

  003cb	6a 02		 push	 2
  003cd	8b 4d dc	 mov	 ecx, DWORD PTR _w$197583[ebp]
  003d0	51		 push	 ecx
  003d1	8b 55 d4	 mov	 edx, DWORD PTR _delta$197585[ebp]
  003d4	83 c2 02	 add	 edx, 2
  003d7	52		 push	 edx
  003d8	8b 45 dc	 mov	 eax, DWORD PTR _w$197583[ebp]
  003db	6b c0 03	 imul	 eax, 3
  003de	50		 push	 eax
  003df	6a 02		 push	 2
  003e1	8b 4d dc	 mov	 ecx, DWORD PTR _w$197583[ebp]
  003e4	51		 push	 ecx
  003e5	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  003e8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003eb	50		 push	 eax
  003ec	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  003ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f1	52		 push	 edx
  003f2	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  003f5	50		 push	 eax
  003f6	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  003f9	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 231  : 			bmpV->Draw(pDC, rc->left, rc->top + 2, (rc->right-rc->left), rc->bottom-rc->top - 4, w * 5, 1 + delta, w, 1);

  003fe	6a 01		 push	 1
  00400	8b 4d dc	 mov	 ecx, DWORD PTR _w$197583[ebp]
  00403	51		 push	 ecx
  00404	8b 55 d4	 mov	 edx, DWORD PTR _delta$197585[ebp]
  00407	83 c2 01	 add	 edx, 1
  0040a	52		 push	 edx
  0040b	8b 45 dc	 mov	 eax, DWORD PTR _w$197583[ebp]
  0040e	6b c0 05	 imul	 eax, 5
  00411	50		 push	 eax
  00412	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00415	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00418	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0041b	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  0041e	83 e8 04	 sub	 eax, 4
  00421	50		 push	 eax
  00422	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00425	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  00428	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0042b	2b 02		 sub	 eax, DWORD PTR [edx]
  0042d	50		 push	 eax
  0042e	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00431	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00434	83 c2 02	 add	 edx, 2
  00437	52		 push	 edx
  00438	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  0043b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043d	51		 push	 ecx
  0043e	8b 55 f4	 mov	 edx, DWORD PTR _pDC$[ebp]
  00441	52		 push	 edx
  00442	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  00445	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 232  : 			bmpV->Draw(pDC, rc->left, rc->bottom-2, w, 2, w * 4, 2 + delta, w,2);

  0044a	6a 02		 push	 2
  0044c	8b 45 dc	 mov	 eax, DWORD PTR _w$197583[ebp]
  0044f	50		 push	 eax
  00450	8b 4d d4	 mov	 ecx, DWORD PTR _delta$197585[ebp]
  00453	83 c1 02	 add	 ecx, 2
  00456	51		 push	 ecx
  00457	8b 55 dc	 mov	 edx, DWORD PTR _w$197583[ebp]
  0045a	c1 e2 02	 shl	 edx, 2
  0045d	52		 push	 edx
  0045e	6a 02		 push	 2
  00460	8b 45 dc	 mov	 eax, DWORD PTR _w$197583[ebp]
  00463	50		 push	 eax
  00464	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00467	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0046a	83 ea 02	 sub	 edx, 2
  0046d	52		 push	 edx
  0046e	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00471	8b 08		 mov	 ecx, DWORD PTR [eax]
  00473	51		 push	 ecx
  00474	8b 55 f4	 mov	 edx, DWORD PTR _pDC$[ebp]
  00477	52		 push	 edx
  00478	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  0047b	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 233  : 			return CDRF_SKIPDEFAULT;

  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	e9 fa 00 00 00	 jmp	 $L197544
$L197589:

; 234  : 		}
; 235  : 		if(nm->uItem == HTSCROLL_UP)

  0048a	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  0048d	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00491	75 3c		 jne	 SHORT $L197590

; 236  : 		{
; 237  : 			bmpV->Draw(pDC, rc->left, rc->top, w ,h, 0, h + delta, w, h);

  00493	8b 4d d8	 mov	 ecx, DWORD PTR _h$197584[ebp]
  00496	51		 push	 ecx
  00497	8b 55 dc	 mov	 edx, DWORD PTR _w$197583[ebp]
  0049a	52		 push	 edx
  0049b	8b 45 d8	 mov	 eax, DWORD PTR _h$197584[ebp]
  0049e	03 45 d4	 add	 eax, DWORD PTR _delta$197585[ebp]
  004a1	50		 push	 eax
  004a2	6a 00		 push	 0
  004a4	8b 4d d8	 mov	 ecx, DWORD PTR _h$197584[ebp]
  004a7	51		 push	 ecx
  004a8	8b 55 dc	 mov	 edx, DWORD PTR _w$197583[ebp]
  004ab	52		 push	 edx
  004ac	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  004af	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004b2	51		 push	 ecx
  004b3	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  004b6	8b 02		 mov	 eax, DWORD PTR [edx]
  004b8	50		 push	 eax
  004b9	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  004bc	51		 push	 ecx
  004bd	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  004c0	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 238  : 			return CDRF_SKIPDEFAULT;

  004c5	b8 04 00 00 00	 mov	 eax, 4
  004ca	e9 b5 00 00 00	 jmp	 $L197544
$L197590:

; 239  : 		}
; 240  : 		if(nm->uItem == HTSCROLL_DOWN)

  004cf	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  004d2	83 7a 24 01	 cmp	 DWORD PTR [edx+36], 1
  004d6	75 3b		 jne	 SHORT $L197591

; 241  : 		{
; 242  : 			bmpV->Draw(pDC, rc->left, rc->top, w, h, w * 1, h + delta, w, h);

  004d8	8b 45 d8	 mov	 eax, DWORD PTR _h$197584[ebp]
  004db	50		 push	 eax
  004dc	8b 4d dc	 mov	 ecx, DWORD PTR _w$197583[ebp]
  004df	51		 push	 ecx
  004e0	8b 55 d8	 mov	 edx, DWORD PTR _h$197584[ebp]
  004e3	03 55 d4	 add	 edx, DWORD PTR _delta$197585[ebp]
  004e6	52		 push	 edx
  004e7	8b 45 dc	 mov	 eax, DWORD PTR _w$197583[ebp]
  004ea	50		 push	 eax
  004eb	8b 4d d8	 mov	 ecx, DWORD PTR _h$197584[ebp]
  004ee	51		 push	 ecx
  004ef	8b 55 dc	 mov	 edx, DWORD PTR _w$197583[ebp]
  004f2	52		 push	 edx
  004f3	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  004f6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004f9	51		 push	 ecx
  004fa	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  004fd	8b 02		 mov	 eax, DWORD PTR [edx]
  004ff	50		 push	 eax
  00500	8b 4d f4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00503	51		 push	 ecx
  00504	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  00507	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 243  : 			return CDRF_SKIPDEFAULT;

  0050c	b8 04 00 00 00	 mov	 eax, 4
  00511	eb 71		 jmp	 SHORT $L197544
$L197591:

; 244  : 		}
; 245  : 		if(nm->uItem == HTSCROLL_PAGEGUP || nm->uItem == HTSCROLL_PAGEGDOWN)

  00513	8b 55 0c	 mov	 edx, DWORD PTR _nm$[ebp]
  00516	83 7a 24 02	 cmp	 DWORD PTR [edx+36], 2
  0051a	74 09		 je	 SHORT $L197593
  0051c	8b 45 0c	 mov	 eax, DWORD PTR _nm$[ebp]
  0051f	83 78 24 03	 cmp	 DWORD PTR [eax+36], 3
  00523	75 44		 jne	 SHORT $L197592
$L197593:

; 246  : 		{
; 247  : 			bmpV->Draw(pDC, rc->left, rc->top, w, rc->bottom - rc->top , w * 2, 1 + delta, w, 1);

  00525	6a 01		 push	 1
  00527	8b 4d dc	 mov	 ecx, DWORD PTR _w$197583[ebp]
  0052a	51		 push	 ecx
  0052b	8b 55 d4	 mov	 edx, DWORD PTR _delta$197585[ebp]
  0052e	83 c2 01	 add	 edx, 1
  00531	52		 push	 edx
  00532	8b 45 dc	 mov	 eax, DWORD PTR _w$197583[ebp]
  00535	d1 e0		 shl	 eax, 1
  00537	50		 push	 eax
  00538	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  0053b	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0053e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00541	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00544	50		 push	 eax
  00545	8b 4d dc	 mov	 ecx, DWORD PTR _w$197583[ebp]
  00548	51		 push	 ecx
  00549	8b 55 fc	 mov	 edx, DWORD PTR _rc$[ebp]
  0054c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0054f	50		 push	 eax
  00550	8b 4d fc	 mov	 ecx, DWORD PTR _rc$[ebp]
  00553	8b 11		 mov	 edx, DWORD PTR [ecx]
  00555	52		 push	 edx
  00556	8b 45 f4	 mov	 eax, DWORD PTR _pDC$[ebp]
  00559	50		 push	 eax
  0055a	8b 4d 10	 mov	 ecx, DWORD PTR _bmpV$[ebp]
  0055d	e8 00 00 00 00	 call	 ?Draw@CDibBitmap@@QAEHPAVCDC@@HHHHHHHH@Z ; CDibBitmap::Draw

; 248  : 			return CDRF_SKIPDEFAULT;

  00562	b8 04 00 00 00	 mov	 eax, 4
  00567	eb 1b		 jmp	 SHORT $L197544
$L197592:

; 249  : 		}
; 250  : 	}
; 251  : 	//INSERTED BUTTONS are handled here...
; 252  : 	else if(nm->nBar == SB_INSBUT)

  00569	eb 14		 jmp	 SHORT $L197568
$L197582:
  0056b	8b 4d 0c	 mov	 ecx, DWORD PTR _nm$[ebp]
  0056e	83 79 2c fe	 cmp	 DWORD PTR [ecx+44], -2	; fffffffeH
  00572	75 07		 jne	 SHORT $L197595

; 253  : 	{
; 254  : 		//CoolSB_DrawProc(nm->hdc, nm->uItem, nm->uState, &nm->rect);
; 255  : 		return CDRF_SKIPDEFAULT;

  00574	b8 04 00 00 00	 mov	 eax, 4
  00579	eb 09		 jmp	 SHORT $L197544
$L197595:

; 256  : 	}
; 257  : 	else
; 258  : 	{
; 259  : 		return CDRF_DODEFAULT;

  0057b	33 c0		 xor	 eax, eax
  0057d	eb 05		 jmp	 SHORT $L197544
$L197568:

; 260  : 	}
; 261  : 
; 262  : 	return CDRF_SKIPDEFAULT;

  0057f	b8 04 00 00 00	 mov	 eax, 4
$L197544:

; 263  : 
; 264  : }

  00584	8b e5		 mov	 esp, ebp
  00586	5d		 pop	 ebp
  00587	c3		 ret	 0
?HandleCustomDraw@@YAJIPAUNMCSBCUSTOMDRAW@@PAVCDibBitmap@@1@Z ENDP ; HandleCustomDraw
_TEXT	ENDS
END
