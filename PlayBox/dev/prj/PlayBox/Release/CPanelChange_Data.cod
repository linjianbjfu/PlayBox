; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\TopPanel\CPanelChange_Data.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??1IData@@MAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DataAppStart@IData@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DataAppExit@IData@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIData@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPanelChange@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPanelChange@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPanelChange@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IPanelChange@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPanelChange@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIPanelChange@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_val@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVIMessageObserver@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEABQAVIMessageObserver@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAVIMessageObserver@@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_ptr@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAVIMessageObserver@@@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAVIMessageObserver@@@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3IPanelChange@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CPanelChange@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IPanelChange@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CPanelChange@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IPanelChange@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPanelChange@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVIData@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVIPanelChange@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCPanelChange@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4IPanelChange@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4IData@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CPanelChange@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R0?AVIMessageObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVIPanelChangeObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7IPanelChange@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CPanelChange@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7IData@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?m_pPanelChange@CPanelChange@@2PAV1@A		; CPanelChange::m_pPanelChange
_BSS	SEGMENT
?m_pPanelChange@CPanelChange@@2PAV1@A DD 01H DUP (?)	; CPanelChange::m_pPanelChange
_BSS	ENDS
CONST	SEGMENT
$SG197508 DB	'DataAppStart', 00H
	ORG $+3
$SG197509 DB	'CPanelChangeData', 00H
	ORG $+3
$SG197510 DB	'main.txt', 00H
	ORG $+3
$SG197513 DB	'DataAppStart--OUT', 00H
	ORG $+2
$SG197514 DB	'CPanelChangeData', 00H
	ORG $+3
$SG197515 DB	'main.txt', 00H
	ORG $+3
$SG197521 DB	'DataAppExit', 00H
$SG197522 DB	'CPanelChangeData', 00H
	ORG $+3
$SG197523 DB	'main.txt', 00H
	ORG $+3
$SG197528 DB	'DataAppExit--out', 00H
	ORG $+3
$SG197529 DB	'CPanelChangeData', 00H
	ORG $+3
$SG197530 DB	'main.txt', 00H
	ORG $+3
$SG197537 DB	'ToFull', 00H
	ORG $+1
$SG197538 DB	'ToFull', 00H
	ORG $+1
$SG197539 DB	'ShowUI.txt', 00H
	ORG $+1
_ID_MESSAGE_PANEL_CHANGE DD 02H
CONST	ENDS
PUBLIC	?GetInstance@CPanelChange@@SAPAVIData@@XZ	; CPanelChange::GetInstance
PUBLIC	??0CPanelChange@@QAE@XZ				; CPanelChange::CPanelChange
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\toppanel\cpanelchange_data.cpp
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T198727 = -4						; size = 4
?GetInstance@CPanelChange@@SAPAVIData@@XZ PROC NEAR	; CPanelChange::GetInstance

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 9    : 	if( m_pPanelChange == NULL )

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pPanelChange@CPanelChange@@2PAV1@A, 0 ; CPanelChange::m_pPanelChange
  0000d	75 2f		 jne	 SHORT $L197482

; 10   : 	{
; 11   : 		m_pPanelChange = new CPanelChange();		

  0000f	6a 0c		 push	 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4
  00019	89 45 fc	 mov	 DWORD PTR $T198727[ebp], eax
  0001c	83 7d fc 00	 cmp	 DWORD PTR $T198727[ebp], 0
  00020	74 0d		 je	 SHORT $L198728
  00022	8b 4d fc	 mov	 ecx, DWORD PTR $T198727[ebp]
  00025	e8 00 00 00 00	 call	 ??0CPanelChange@@QAE@XZ
  0002a	89 45 f8	 mov	 DWORD PTR tv70[ebp], eax
  0002d	eb 07		 jmp	 SHORT $L198729
$L198728:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L198729:
  00036	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?m_pPanelChange@CPanelChange@@2PAV1@A, eax ; CPanelChange::m_pPanelChange
$L197482:

; 12   : 	}
; 13   : 	return m_pPanelChange;

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pPanelChange@CPanelChange@@2PAV1@A ; CPanelChange::m_pPanelChange

; 14   : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetInstance@CPanelChange@@SAPAVIData@@XZ ENDP		; CPanelChange::GetInstance
_TEXT	ENDS
PUBLIC	??_R4CPanelChange@@6B@				; CPanelChange::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPanelChange@@@8			; CPanelChange `RTTI Type Descriptor'
PUBLIC	??_R3CPanelChange@@8				; CPanelChange::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPanelChange@@8				; CPanelChange::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CPanelChange@@8			; CPanelChange::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@IPanelChange@@8			; IPanelChange::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVIPanelChange@@@8			; IPanelChange `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@IData@@8				; IData::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVIData@@@8				; IData `RTTI Type Descriptor'
PUBLIC	??0IPanelChange@@QAE@XZ				; IPanelChange::IPanelChange
PUBLIC	?DataAppStart@CPanelChange@@UAEXXZ		; CPanelChange::DataAppStart
PUBLIC	?DataAppExit@CPanelChange@@UAEXXZ		; CPanelChange::DataAppExit
PUBLIC	?IPanelChange_ToFullScreen@CPanelChange@@UAEXPAVCWnd@@@Z ; CPanelChange::IPanelChange_ToFullScreen
PUBLIC	?IPanelChange_IsFullScreen@CPanelChange@@UAE_NXZ ; CPanelChange::IPanelChange_IsFullScreen
PUBLIC	?IPanelChange_ExitFullScreen@CPanelChange@@UAEXXZ ; CPanelChange::IPanelChange_ExitFullScreen
PUBLIC	?IPanelChange_Max@CPanelChange@@UAE_NXZ		; CPanelChange::IPanelChange_Max
PUBLIC	?IPanelChange_Min@CPanelChange@@UAE_NXZ		; CPanelChange::IPanelChange_Min
PUBLIC	?IPanelChange_Restore@CPanelChange@@UAE_NXZ	; CPanelChange::IPanelChange_Restore
PUBLIC	?IPanelChange_Close@CPanelChange@@UAEXXZ	; CPanelChange::IPanelChange_Close
PUBLIC	??_7CPanelChange@@6B@				; CPanelChange::`vftable'
PUBLIC	??_GCPanelChange@@UAEPAXI@Z			; CPanelChange::`scalar deleting destructor'
EXTRN	??_ECPanelChange@@UAEPAXI@Z:NEAR		; CPanelChange::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7CPanelChange@@6B@
CONST	SEGMENT
??_7CPanelChange@@6B@ DD FLAT:??_R4CPanelChange@@6B@	; CPanelChange::`vftable'
	DD	FLAT:??_ECPanelChange@@UAEPAXI@Z
	DD	FLAT:?DataAppStart@CPanelChange@@UAEXXZ
	DD	FLAT:?DataAppExit@CPanelChange@@UAEXXZ
	DD	FLAT:?IPanelChange_ToFullScreen@CPanelChange@@UAEXPAVCWnd@@@Z
	DD	FLAT:?IPanelChange_ExitFullScreen@CPanelChange@@UAEXXZ
	DD	FLAT:?IPanelChange_IsFullScreen@CPanelChange@@UAE_NXZ
	DD	FLAT:?IPanelChange_Max@CPanelChange@@UAE_NXZ
	DD	FLAT:?IPanelChange_Min@CPanelChange@@UAE_NXZ
	DD	FLAT:?IPanelChange_Restore@CPanelChange@@UAE_NXZ
	DD	FLAT:?IPanelChange_Close@CPanelChange@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R4CPanelChange@@6B@
rdata$r	SEGMENT
??_R4CPanelChange@@6B@ DD 00H				; CPanelChange::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPanelChange@@@8
	DD	FLAT:??_R3CPanelChange@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPanelChange@@@8
_DATA	SEGMENT
??_R0?AVCPanelChange@@@8 DD FLAT:??_7type_info@@6B@	; CPanelChange `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPanelChange@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CPanelChange@@8
rdata$r	SEGMENT
??_R3CPanelChange@@8 DD 00H				; CPanelChange::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CPanelChange@@8
rdata$r	ENDS
;	COMDAT ??_R2CPanelChange@@8
rdata$r	SEGMENT
??_R2CPanelChange@@8 DD FLAT:??_R1A@?0A@A@CPanelChange@@8 ; CPanelChange::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@IPanelChange@@8
	DD	FLAT:??_R1A@?0A@A@IData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPanelChange@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CPanelChange@@8 DD FLAT:??_R0?AVCPanelChange@@@8 ; CPanelChange::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IPanelChange@@8
rdata$r	SEGMENT
??_R1A@?0A@A@IPanelChange@@8 DD FLAT:??_R0?AVIPanelChange@@@8 ; IPanelChange::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVIPanelChange@@@8
_DATA	SEGMENT
??_R0?AVIPanelChange@@@8 DD FLAT:??_7type_info@@6B@	; IPanelChange `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIPanelChange@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@IData@@8
rdata$r	SEGMENT
??_R1A@?0A@A@IData@@8 DD FLAT:??_R0?AVIData@@@8		; IData::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVIData@@@8
_DATA	SEGMENT
??_R0?AVIData@@@8 DD FLAT:??_7type_info@@6B@		; IData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIData@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0CPanelChange@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPanelChange@@QAE@XZ PROC NEAR			; CPanelChange::CPanelChange, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPanelChange@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPanelChange@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CPanelChange@@QAE@XZ ENDP				; CPanelChange::CPanelChange
_TEXT	ENDS
PUBLIC	??1CPanelChange@@UAE@XZ				; CPanelChange::~CPanelChange
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??_GCPanelChange@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPanelChange@@UAEPAXI@Z PROC NEAR			; CPanelChange::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPanelChange@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $L197490
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L197490:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GCPanelChange@@UAEPAXI@Z ENDP			; CPanelChange::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?DataAppStart@IData@@UAEXXZ			; IData::DataAppStart
PUBLIC	?DataAppExit@IData@@UAEXXZ			; IData::DataAppExit
PUBLIC	??0IData@@QAE@XZ				; IData::IData
PUBLIC	??_R4IPanelChange@@6B@				; IPanelChange::`RTTI Complete Object Locator'
PUBLIC	??_R3IPanelChange@@8				; IPanelChange::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IPanelChange@@8				; IPanelChange::`RTTI Base Class Array'
PUBLIC	??_7IPanelChange@@6B@				; IPanelChange::`vftable'
PUBLIC	??_GIPanelChange@@UAEPAXI@Z			; IPanelChange::`scalar deleting destructor'
EXTRN	__purecall:NEAR
EXTRN	??_EIPanelChange@@UAEPAXI@Z:NEAR		; IPanelChange::`vector deleting destructor'
;	COMDAT ??_7IPanelChange@@6B@
CONST	SEGMENT
??_7IPanelChange@@6B@ DD FLAT:??_R4IPanelChange@@6B@	; IPanelChange::`vftable'
	DD	FLAT:??_EIPanelChange@@UAEPAXI@Z
	DD	FLAT:?DataAppStart@IData@@UAEXXZ
	DD	FLAT:?DataAppExit@IData@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4IPanelChange@@6B@
rdata$r	SEGMENT
??_R4IPanelChange@@6B@ DD 00H				; IPanelChange::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIPanelChange@@@8
	DD	FLAT:??_R3IPanelChange@@8
rdata$r	ENDS
;	COMDAT ??_R3IPanelChange@@8
rdata$r	SEGMENT
??_R3IPanelChange@@8 DD 00H				; IPanelChange::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IPanelChange@@8
rdata$r	ENDS
;	COMDAT ??_R2IPanelChange@@8
rdata$r	SEGMENT
??_R2IPanelChange@@8 DD FLAT:??_R1A@?0A@A@IPanelChange@@8 ; IPanelChange::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@IData@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0IPanelChange@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPanelChange@@QAE@XZ PROC NEAR			; IPanelChange::IPanelChange, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IData@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7IPanelChange@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IPanelChange@@QAE@XZ ENDP				; IPanelChange::IPanelChange
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\datainterface\idata.h
_TEXT	ENDS
;	COMDAT ?DataAppStart@IData@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DataAppStart@IData@@UAEXXZ PROC NEAR			; IData::DataAppStart, COMDAT
; _this$ = ecx

; 15   : 	virtual void	DataAppStart(){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?DataAppStart@IData@@UAEXXZ ENDP			; IData::DataAppStart
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DataAppExit@IData@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DataAppExit@IData@@UAEXXZ PROC NEAR			; IData::DataAppExit, COMDAT
; _this$ = ecx

; 18   : 	virtual void	DataAppExit(){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?DataAppExit@IData@@UAEXXZ ENDP				; IData::DataAppExit
_TEXT	ENDS
PUBLIC	??1IPanelChange@@UAE@XZ				; IPanelChange::~IPanelChange
; Function compile flags: /Odt
;	COMDAT ??1CPanelChange@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPanelChange@@UAE@XZ PROC NEAR			; CPanelChange::~CPanelChange, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1IPanelChange@@UAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CPanelChange@@UAE@XZ ENDP				; CPanelChange::~CPanelChange
_TEXT	ENDS
PUBLIC	??1IData@@MAE@XZ				; IData::~IData
; Function compile flags: /Odt
;	COMDAT ??1IPanelChange@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1IPanelChange@@UAE@XZ PROC NEAR			; IPanelChange::~IPanelChange, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1IData@@MAE@XZ	; IData::~IData
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1IPanelChange@@UAE@XZ ENDP				; IPanelChange::~IPanelChange
_TEXT	ENDS
PUBLIC	??_R4IData@@6B@					; IData::`RTTI Complete Object Locator'
PUBLIC	??_R3IData@@8					; IData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IData@@8					; IData::`RTTI Base Class Array'
PUBLIC	??_7IData@@6B@					; IData::`vftable'
PUBLIC	??_GIData@@MAEPAXI@Z				; IData::`scalar deleting destructor'
EXTRN	??_EIData@@MAEPAXI@Z:NEAR			; IData::`vector deleting destructor'
;	COMDAT ??_7IData@@6B@
CONST	SEGMENT
??_7IData@@6B@ DD FLAT:??_R4IData@@6B@			; IData::`vftable'
	DD	FLAT:??_EIData@@MAEPAXI@Z
	DD	FLAT:?DataAppStart@IData@@UAEXXZ
	DD	FLAT:?DataAppExit@IData@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R4IData@@6B@
rdata$r	SEGMENT
??_R4IData@@6B@ DD 00H					; IData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIData@@@8
	DD	FLAT:??_R3IData@@8
rdata$r	ENDS
;	COMDAT ??_R3IData@@8
rdata$r	SEGMENT
??_R3IData@@8 DD 00H					; IData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IData@@8
rdata$r	ENDS
;	COMDAT ??_R2IData@@8
rdata$r	SEGMENT
??_R2IData@@8 DD FLAT:??_R1A@?0A@A@IData@@8		; IData::`RTTI Base Class Array'
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??1IData@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1IData@@MAE@XZ PROC NEAR				; IData::~IData, COMDAT
; _this$ = ecx

; 10   : 	virtual ~IData(){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7IData@@6B@
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1IData@@MAE@XZ ENDP					; IData::~IData
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GIData@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIData@@MAEPAXI@Z PROC NEAR				; IData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1IData@@MAE@XZ	; IData::~IData
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $L197393
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L197393:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GIData@@MAEPAXI@Z ENDP				; IData::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GIPanelChange@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIPanelChange@@UAEPAXI@Z PROC NEAR			; IPanelChange::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1IPanelChange@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $L197500
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L197500:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GIPanelChange@@UAEPAXI@Z ENDP			; IPanelChange::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IData@@QAE@XZ PROC NEAR				; IData::IData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7IData@@6B@
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0IData@@QAE@XZ ENDP					; IData::IData
_TEXT	ENDS
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_?YL_Log@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H0PBDZZ:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T198769 DD	0ffffffffH
	DD	FLAT:$L198759
	DD	00H
	DD	FLAT:$L198760
	DD	0ffffffffH
	DD	FLAT:$L198761
	DD	02H
	DD	FLAT:$L198762
$T198766 DD	019930520H
	DD	04H
	DD	FLAT:$T198769
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\toppanel\cpanelchange_data.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -128						; size = 4
$T198758 = -124						; size = 28
$T198757 = -96						; size = 28
$T198756 = -68						; size = 28
$T198755 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?DataAppStart@CPanelChange@@UAEXXZ PROC NEAR		; CPanelChange::DataAppStart
; _this$ = ecx

; 17   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp
  00053	6a ff		 push	 -1
  00055	68 00 00 00 00	 push	 __ehhandler$?DataAppStart@CPanelChange@@UAEXXZ
  0005a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00060	50		 push	 eax
  00061	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00068	83 ec 74	 sub	 esp, 116		; 00000074H
  0006b	89 4d 80	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 	YL_Log( STR_LOG_FILE,LOG_NOTICE,"CPanelChangeData","DataAppStart");

  0006e	68 00 00 00 00	 push	 OFFSET FLAT:$SG197509
  00073	8d 4d d8	 lea	 ecx, DWORD PTR $T198755[ebp]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00083	68 00 00 00 00	 push	 OFFSET FLAT:$SG197510
  00088	8d 4d bc	 lea	 ecx, DWORD PTR $T198756[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00091	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00095	68 00 00 00 00	 push	 OFFSET FLAT:$SG197508
  0009a	8d 45 d8	 lea	 eax, DWORD PTR $T198755[ebp]
  0009d	50		 push	 eax
  0009e	6a 01		 push	 1
  000a0	8d 4d bc	 lea	 ecx, DWORD PTR $T198756[ebp]
  000a3	51		 push	 ecx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?YL_Log@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H0PBDZZ
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b1	8d 4d bc	 lea	 ecx, DWORD PTR $T198756[ebp]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  000ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c1	8d 4d d8	 lea	 ecx, DWORD PTR $T198755[ebp]
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 19   : 	m_bFullScreen = false;

  000ca	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	c6 42 04 00	 mov	 BYTE PTR [edx+4], 0

; 20   : 	pWndFullScreen = NULL;

  000d1	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 21   : 	YL_Log( STR_LOG_FILE,LOG_NOTICE,"CPanelChangeData","DataAppStart--OUT");

  000db	68 00 00 00 00	 push	 OFFSET FLAT:$SG197514
  000e0	8d 4d a0	 lea	 ecx, DWORD PTR $T198757[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  000e9	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:$SG197515
  000f5	8d 4d 84	 lea	 ecx, DWORD PTR $T198758[ebp]
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  000fe	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00102	68 00 00 00 00	 push	 OFFSET FLAT:$SG197513
  00107	8d 4d a0	 lea	 ecx, DWORD PTR $T198757[ebp]
  0010a	51		 push	 ecx
  0010b	6a 01		 push	 1
  0010d	8d 55 84	 lea	 edx, DWORD PTR $T198758[ebp]
  00110	52		 push	 edx
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?YL_Log@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H0PBDZZ
  00117	83 c4 10	 add	 esp, 16			; 00000010H
  0011a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0011e	8d 4d 84	 lea	 ecx, DWORD PTR $T198758[ebp]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00127	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012e	8d 4d a0	 lea	 ecx, DWORD PTR $T198757[ebp]
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 22   : }

  00137	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198759:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T198755[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198760:
  00009	8d 4d bc	 lea	 ecx, DWORD PTR $T198756[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198761:
  00012	8d 4d a0	 lea	 ecx, DWORD PTR $T198757[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198762:
  0001b	8d 4d 84	 lea	 ecx, DWORD PTR $T198758[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?DataAppStart@CPanelChange@@UAEXXZ:
  00024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198766
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DataAppStart@CPanelChange@@UAEXXZ ENDP			; CPanelChange::DataAppStart
xdata$x	SEGMENT
$T198787 DD	0ffffffffH
	DD	FLAT:$L198780
	DD	00H
	DD	FLAT:$L198781
	DD	0ffffffffH
	DD	FLAT:$L198782
	DD	02H
	DD	FLAT:$L198783
$T198785 DD	019930520H
	DD	04H
	DD	FLAT:$T198787
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv82 = -140						; size = 4
_this$ = -136						; size = 4
$T198779 = -132						; size = 28
$T198778 = -104						; size = 28
$T198775 = -76						; size = 4
$T198774 = -72						; size = 4
$T198773 = -68						; size = 28
$T198772 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?DataAppExit@CPanelChange@@UAEXXZ PROC NEAR		; CPanelChange::DataAppExit
; _this$ = ecx

; 25   : {

  00150	55		 push	 ebp
  00151	8b ec		 mov	 ebp, esp
  00153	6a ff		 push	 -1
  00155	68 00 00 00 00	 push	 __ehhandler$?DataAppExit@CPanelChange@@UAEXXZ
  0015a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00160	50		 push	 eax
  00161	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00168	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0016e	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	YL_Log( STR_LOG_FILE,LOG_NOTICE,"CPanelChangeData","DataAppExit");

  00174	68 00 00 00 00	 push	 OFFSET FLAT:$SG197522
  00179	8d 4d d8	 lea	 ecx, DWORD PTR $T198772[ebp]
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00182	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00189	68 00 00 00 00	 push	 OFFSET FLAT:$SG197523
  0018e	8d 4d bc	 lea	 ecx, DWORD PTR $T198773[ebp]
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00197	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:$SG197521
  001a0	8d 45 d8	 lea	 eax, DWORD PTR $T198772[ebp]
  001a3	50		 push	 eax
  001a4	6a 01		 push	 1
  001a6	8d 4d bc	 lea	 ecx, DWORD PTR $T198773[ebp]
  001a9	51		 push	 ecx
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?YL_Log@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H0PBDZZ
  001b0	83 c4 10	 add	 esp, 16			; 00000010H
  001b3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001b7	8d 4d bc	 lea	 ecx, DWORD PTR $T198773[ebp]
  001ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c7	8d 4d d8	 lea	 ecx, DWORD PTR $T198772[ebp]
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 27   : 	delete this;

  001d0	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001d6	89 55 b4	 mov	 DWORD PTR $T198775[ebp], edx
  001d9	8b 45 b4	 mov	 eax, DWORD PTR $T198775[ebp]
  001dc	89 45 b8	 mov	 DWORD PTR $T198774[ebp], eax
  001df	83 7d b8 00	 cmp	 DWORD PTR $T198774[ebp], 0
  001e3	74 14		 je	 SHORT $L198776
  001e5	6a 01		 push	 1
  001e7	8b 4d b8	 mov	 ecx, DWORD PTR $T198774[ebp]
  001ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ec	8b 4d b8	 mov	 ecx, DWORD PTR $T198774[ebp]
  001ef	ff 12		 call	 DWORD PTR [edx]
  001f1	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], eax
  001f7	eb 0a		 jmp	 SHORT $L198777
$L198776:
  001f9	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$L198777:

; 28   : 	YL_Log( STR_LOG_FILE,LOG_NOTICE,"CPanelChangeData","DataAppExit--out");

  00203	68 00 00 00 00	 push	 OFFSET FLAT:$SG197529
  00208	8d 4d 98	 lea	 ecx, DWORD PTR $T198778[ebp]
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00211	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00218	68 00 00 00 00	 push	 OFFSET FLAT:$SG197530
  0021d	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198779[ebp]
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00229	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0022d	68 00 00 00 00	 push	 OFFSET FLAT:$SG197528
  00232	8d 45 98	 lea	 eax, DWORD PTR $T198778[ebp]
  00235	50		 push	 eax
  00236	6a 01		 push	 1
  00238	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198779[ebp]
  0023e	51		 push	 ecx
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?YL_Log@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H0PBDZZ
  00245	83 c4 10	 add	 esp, 16			; 00000010H
  00248	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0024c	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198779[ebp]
  00252	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00258	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025f	8d 4d 98	 lea	 ecx, DWORD PTR $T198778[ebp]
  00262	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 29   : }

  00268	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00272	8b e5		 mov	 esp, ebp
  00274	5d		 pop	 ebp
  00275	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198780:
  0002e	8d 4d d8	 lea	 ecx, DWORD PTR $T198772[ebp]
  00031	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198781:
  00037	8d 4d bc	 lea	 ecx, DWORD PTR $T198773[ebp]
  0003a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198782:
  00040	8d 4d 98	 lea	 ecx, DWORD PTR $T198778[ebp]
  00043	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198783:
  00049	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198779[ebp]
  0004f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?DataAppExit@CPanelChange@@UAEXXZ:
  00055	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198785
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DataAppExit@CPanelChange@@UAEXXZ ENDP			; CPanelChange::DataAppExit
PUBLIC	??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
PUBLIC	??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
PUBLIC	?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
PUBLIC	?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
PUBLIC	??_R0?AVIMessageObserver@@@8			; IMessageObserver `RTTI Type Descriptor'
PUBLIC	??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
PUBLIC	??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
PUBLIC	??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
PUBLIC	??_R0?AVIPanelChangeObserver@@@8		; IPanelChangeObserver `RTTI Type Descriptor'
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
EXTRN	___RTDynamicCast:NEAR
EXTRN	?AfxGetMessageManager@@YAPAVIMessageManager@@XZ:NEAR ; AfxGetMessageManager
EXTRN	?AfxGetMainWindow@@YAPAVCWnd@@XZ:NEAR		; AfxGetMainWindow
xdata$x	SEGMENT
$T198799 DD	0ffffffffH
	DD	FLAT:$L198793
	DD	00H
	DD	FLAT:$L198794
	DD	0ffffffffH
	DD	FLAT:$L198795
$T198797 DD	019930520H
	DD	03H
	DD	FLAT:$T198799
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_R0?AVIPanelChangeObserver@@@8
_DATA	SEGMENT
??_R0?AVIPanelChangeObserver@@@8 DD FLAT:??_7type_info@@6B@ ; IPanelChangeObserver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIPanelChangeObserver@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVIMessageObserver@@@8
_DATA	SEGMENT
??_R0?AVIMessageObserver@@@8 DD FLAT:??_7type_info@@6B@	; IMessageObserver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIMessageObserver@@', 00H
	ORG $-31
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVIMessageObserver@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
tv86 = -104						; size = 4
_this$ = -100						; size = 4
$T198792 = -96						; size = 4
$T198791 = -92						; size = 4
$T198790 = -88						; size = 28
$T198789 = -60						; size = 28
_pOb$198041 = -32					; size = 4
_itOb$198034 = -28					; size = 4
_listOb$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_pWnd$ = 8						; size = 4
?IPanelChange_ToFullScreen@CPanelChange@@UAEXPAVCWnd@@@Z PROC NEAR ; CPanelChange::IPanelChange_ToFullScreen
; _this$ = ecx

; 32   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	6a ff		 push	 -1
  00285	68 00 00 00 00	 push	 __ehhandler$?IPanelChange_ToFullScreen@CPanelChange@@UAEXPAVCWnd@@@Z
  0028a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00290	50		 push	 eax
  00291	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00298	83 ec 5c	 sub	 esp, 92			; 0000005cH
  0029b	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	YL_Log("ShowUI.txt",LOG_DEBUG,"ToFull","ToFull");

  0029e	68 00 00 00 00	 push	 OFFSET FLAT:$SG197538
  002a3	8d 4d c4	 lea	 ecx, DWORD PTR $T198789[ebp]
  002a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  002ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  002b3	68 00 00 00 00	 push	 OFFSET FLAT:$SG197539
  002b8	8d 4d a8	 lea	 ecx, DWORD PTR $T198790[ebp]
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  002c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002c5	68 00 00 00 00	 push	 OFFSET FLAT:$SG197537
  002ca	8d 45 c4	 lea	 eax, DWORD PTR $T198789[ebp]
  002cd	50		 push	 eax
  002ce	6a 00		 push	 0
  002d0	8d 4d a8	 lea	 ecx, DWORD PTR $T198790[ebp]
  002d3	51		 push	 ecx
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?YL_Log@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H0PBDZZ
  002da	83 c4 10	 add	 esp, 16			; 00000010H
  002dd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002e1	8d 4d a8	 lea	 ecx, DWORD PTR $T198790[ebp]
  002e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002f1	8d 4d c4	 lea	 ecx, DWORD PTR $T198789[ebp]
  002f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 34   : 	AfxGetMainWindow()->ShowWindow( SW_SHOW );

  002fa	6a 05		 push	 5
  002fc	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00301	8b c8		 mov	 ecx, eax
  00303	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 35   : 	m_bFullScreen = true;

  00308	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  0030b	c6 42 04 01	 mov	 BYTE PTR [edx+4], 1

; 36   : 	pWndFullScreen = pWnd;

  0030f	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00312	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00315	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 37   : 
; 38   : 	list<IMessageObserver*> listOb;

  00318	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0031b	e8 00 00 00 00	 call	 ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
  00320	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 39   : 	AfxGetMessageManager()->QueryObservers( ID_MESSAGE_PANEL_CHANGE,listOb);

  00327	e8 00 00 00 00	 call	 ?AfxGetMessageManager@@YAPAVIMessageManager@@XZ ; AfxGetMessageManager
  0032c	89 45 98	 mov	 DWORD PTR tv86[ebp], eax
  0032f	8d 55 e8	 lea	 edx, DWORD PTR _listOb$[ebp]
  00332	52		 push	 edx
  00333	68 00 00 00 00	 push	 OFFSET FLAT:_ID_MESSAGE_PANEL_CHANGE
  00338	8b 45 98	 mov	 eax, DWORD PTR tv86[ebp]
  0033b	8b 10		 mov	 edx, DWORD PTR [eax]
  0033d	8b 4d 98	 mov	 ecx, DWORD PTR tv86[ebp]
  00340	ff 52 0c	 call	 DWORD PTR [edx+12]

; 40   : 	for( list<IMessageObserver*>::iterator itOb = listOb.begin();itOb != listOb.end();itOb++ )

  00343	8d 45 e4	 lea	 eax, DWORD PTR _itOb$198034[ebp]
  00346	50		 push	 eax
  00347	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0034a	e8 00 00 00 00	 call	 ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
  0034f	eb 0e		 jmp	 SHORT $L198038
$L198039:
  00351	6a 00		 push	 0
  00353	8d 4d a4	 lea	 ecx, DWORD PTR $T198791[ebp]
  00356	51		 push	 ecx
  00357	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198034[ebp]
  0035a	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
$L198038:
  0035f	8d 55 a0	 lea	 edx, DWORD PTR $T198792[ebp]
  00362	52		 push	 edx
  00363	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00366	e8 00 00 00 00	 call	 ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
  0036b	50		 push	 eax
  0036c	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198034[ebp]
  0036f	e8 00 00 00 00	 call	 ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
  00374	0f b6 c0	 movzx	 eax, al
  00377	85 c0		 test	 eax, eax
  00379	74 38		 je	 SHORT $L198040

; 41   : 	{
; 42   : 		IPanelChangeObserver * pOb = dynamic_cast<IPanelChangeObserver*>(*itOb);

  0037b	6a 00		 push	 0
  0037d	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIPanelChangeObserver@@@8
  00382	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIMessageObserver@@@8
  00387	6a 00		 push	 0
  00389	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198034[ebp]
  0038c	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
  00391	8b 08		 mov	 ecx, DWORD PTR [eax]
  00393	51		 push	 ecx
  00394	e8 00 00 00 00	 call	 ___RTDynamicCast
  00399	83 c4 14	 add	 esp, 20			; 00000014H
  0039c	89 45 e0	 mov	 DWORD PTR _pOb$198041[ebp], eax

; 43   : 		pOb->IPanelChangeOb_ToFullScreen( pWndFullScreen );

  0039f	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  003a2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003a5	50		 push	 eax
  003a6	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198041[ebp]
  003a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ab	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198041[ebp]
  003ae	ff 52 14	 call	 DWORD PTR [edx+20]

; 44   : 	}

  003b1	eb 9e		 jmp	 SHORT $L198039
$L198040:

; 45   : }

  003b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003ba	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  003bd	e8 00 00 00 00	 call	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
  003c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  003cc	8b e5		 mov	 esp, ebp
  003ce	5d		 pop	 ebp
  003cf	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L198793:
  0005f	8d 4d c4	 lea	 ecx, DWORD PTR $T198789[ebp]
  00062	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198794:
  00068	8d 4d a8	 lea	 ecx, DWORD PTR $T198790[ebp]
  0006b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198795:
  00071	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
__ehhandler$?IPanelChange_ToFullScreen@CPanelChange@@UAEXPAVCWnd@@@Z:
  00079	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198797
  0007e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IPanelChange_ToFullScreen@CPanelChange@@UAEXPAVCWnd@@@Z ENDP ; CPanelChange::IPanelChange_ToFullScreen
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IPanelChange_IsFullScreen@CPanelChange@@UAE_NXZ PROC NEAR ; CPanelChange::IPanelChange_IsFullScreen
; _this$ = ecx

; 48   : {

  003e0	55		 push	 ebp
  003e1	8b ec		 mov	 ebp, esp
  003e3	51		 push	 ecx
  003e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	return m_bFullScreen;

  003e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ea	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 50   : }

  003ed	8b e5		 mov	 esp, ebp
  003ef	5d		 pop	 ebp
  003f0	c3		 ret	 0
?IPanelChange_IsFullScreen@CPanelChange@@UAE_NXZ ENDP	; CPanelChange::IPanelChange_IsFullScreen
_TEXT	ENDS
xdata$x	SEGMENT
$T198808 DD	0ffffffffH
	DD	FLAT:$L198804
$T198806 DD	019930520H
	DD	01H
	DD	FLAT:$T198808
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv70 = -48						; size = 4
_this$ = -44						; size = 4
$T198803 = -40						; size = 4
$T198802 = -36						; size = 4
_pOb$198060 = -32					; size = 4
_itOb$198053 = -28					; size = 4
_listOb$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?IPanelChange_ExitFullScreen@CPanelChange@@UAEXXZ PROC NEAR ; CPanelChange::IPanelChange_ExitFullScreen
; _this$ = ecx

; 53   : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	6a ff		 push	 -1
  00405	68 00 00 00 00	 push	 __ehhandler$?IPanelChange_ExitFullScreen@CPanelChange@@UAEXXZ
  0040a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00410	50		 push	 eax
  00411	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00418	83 ec 24	 sub	 esp, 36			; 00000024H
  0041b	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	m_bFullScreen = false;

  0041e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00421	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 55   : 
; 56   : 	list<IMessageObserver*> listOb;

  00425	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00428	e8 00 00 00 00	 call	 ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
  0042d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 57   : 	AfxGetMessageManager()->QueryObservers( ID_MESSAGE_PANEL_CHANGE,listOb);

  00434	e8 00 00 00 00	 call	 ?AfxGetMessageManager@@YAPAVIMessageManager@@XZ ; AfxGetMessageManager
  00439	89 45 d0	 mov	 DWORD PTR tv70[ebp], eax
  0043c	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0043f	51		 push	 ecx
  00440	68 00 00 00 00	 push	 OFFSET FLAT:_ID_MESSAGE_PANEL_CHANGE
  00445	8b 55 d0	 mov	 edx, DWORD PTR tv70[ebp]
  00448	8b 02		 mov	 eax, DWORD PTR [edx]
  0044a	8b 4d d0	 mov	 ecx, DWORD PTR tv70[ebp]
  0044d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 58   : 	for( list<IMessageObserver*>::iterator itOb = listOb.begin();itOb != listOb.end();itOb++ )

  00450	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198053[ebp]
  00453	51		 push	 ecx
  00454	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00457	e8 00 00 00 00	 call	 ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
  0045c	eb 0e		 jmp	 SHORT $L198057
$L198058:
  0045e	6a 00		 push	 0
  00460	8d 55 dc	 lea	 edx, DWORD PTR $T198802[ebp]
  00463	52		 push	 edx
  00464	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198053[ebp]
  00467	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
$L198057:
  0046c	8d 45 d8	 lea	 eax, DWORD PTR $T198803[ebp]
  0046f	50		 push	 eax
  00470	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00473	e8 00 00 00 00	 call	 ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
  00478	50		 push	 eax
  00479	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198053[ebp]
  0047c	e8 00 00 00 00	 call	 ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
  00481	0f b6 c8	 movzx	 ecx, al
  00484	85 c9		 test	 ecx, ecx
  00486	74 38		 je	 SHORT $L198059

; 59   : 	{
; 60   : 		IPanelChangeObserver * pOb = dynamic_cast<IPanelChangeObserver*>(*itOb);

  00488	6a 00		 push	 0
  0048a	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIPanelChangeObserver@@@8
  0048f	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIMessageObserver@@@8
  00494	6a 00		 push	 0
  00496	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198053[ebp]
  00499	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
  0049e	8b 10		 mov	 edx, DWORD PTR [eax]
  004a0	52		 push	 edx
  004a1	e8 00 00 00 00	 call	 ___RTDynamicCast
  004a6	83 c4 14	 add	 esp, 20			; 00000014H
  004a9	89 45 e0	 mov	 DWORD PTR _pOb$198060[ebp], eax

; 61   : 		pOb->IPanelChangeOb_ExitFullScreen( pWndFullScreen );

  004ac	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  004af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004b2	51		 push	 ecx
  004b3	8b 55 e0	 mov	 edx, DWORD PTR _pOb$198060[ebp]
  004b6	8b 02		 mov	 eax, DWORD PTR [edx]
  004b8	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198060[ebp]
  004bb	ff 50 18	 call	 DWORD PTR [eax+24]

; 62   : 	}

  004be	eb 9e		 jmp	 SHORT $L198058
$L198059:

; 63   : 	pWndFullScreen = NULL;

  004c0	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  004c3	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 64   : }

  004ca	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004d1	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  004d4	e8 00 00 00 00	 call	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
  004d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004e3	8b e5		 mov	 esp, ebp
  004e5	5d		 pop	 ebp
  004e6	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198804:
  00083	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00086	e9 00 00 00 00	 jmp	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
__ehhandler$?IPanelChange_ExitFullScreen@CPanelChange@@UAEXXZ:
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198806
  00090	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IPanelChange_ExitFullScreen@CPanelChange@@UAEXXZ ENDP	; CPanelChange::IPanelChange_ExitFullScreen
xdata$x	SEGMENT
$T198817 DD	0ffffffffH
	DD	FLAT:$L198813
$T198815 DD	019930520H
	DD	01H
	DD	FLAT:$T198817
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv69 = -52						; size = 4
_this$ = -48						; size = 4
$T198812 = -41						; size = 1
$T198811 = -40						; size = 4
$T198810 = -36						; size = 4
_pOb$198075 = -32					; size = 4
_itOb$198068 = -28					; size = 4
_listOb$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?IPanelChange_Max@CPanelChange@@UAE_NXZ PROC NEAR	; CPanelChange::IPanelChange_Max
; _this$ = ecx

; 67   : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	6a ff		 push	 -1
  004f5	68 00 00 00 00	 push	 __ehhandler$?IPanelChange_Max@CPanelChange@@UAE_NXZ
  004fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00500	50		 push	 eax
  00501	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00508	83 ec 28	 sub	 esp, 40			; 00000028H
  0050b	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	list<IMessageObserver*> listOb;

  0050e	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00511	e8 00 00 00 00	 call	 ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
  00516	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 69   : 	AfxGetMessageManager()->QueryObservers( ID_MESSAGE_PANEL_CHANGE,listOb);

  0051d	e8 00 00 00 00	 call	 ?AfxGetMessageManager@@YAPAVIMessageManager@@XZ ; AfxGetMessageManager
  00522	89 45 cc	 mov	 DWORD PTR tv69[ebp], eax
  00525	8d 45 e8	 lea	 eax, DWORD PTR _listOb$[ebp]
  00528	50		 push	 eax
  00529	68 00 00 00 00	 push	 OFFSET FLAT:_ID_MESSAGE_PANEL_CHANGE
  0052e	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  00531	8b 11		 mov	 edx, DWORD PTR [ecx]
  00533	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  00536	ff 52 0c	 call	 DWORD PTR [edx+12]

; 70   : 	for( list<IMessageObserver*>::iterator itOb = listOb.begin();itOb != listOb.end();itOb++ )

  00539	8d 45 e4	 lea	 eax, DWORD PTR _itOb$198068[ebp]
  0053c	50		 push	 eax
  0053d	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00540	e8 00 00 00 00	 call	 ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
  00545	eb 0e		 jmp	 SHORT $L198072
$L198073:
  00547	6a 00		 push	 0
  00549	8d 4d dc	 lea	 ecx, DWORD PTR $T198810[ebp]
  0054c	51		 push	 ecx
  0054d	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198068[ebp]
  00550	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
$L198072:
  00555	8d 55 d8	 lea	 edx, DWORD PTR $T198811[ebp]
  00558	52		 push	 edx
  00559	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0055c	e8 00 00 00 00	 call	 ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
  00561	50		 push	 eax
  00562	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198068[ebp]
  00565	e8 00 00 00 00	 call	 ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
  0056a	0f b6 c0	 movzx	 eax, al
  0056d	85 c0		 test	 eax, eax
  0056f	74 31		 je	 SHORT $L198074

; 71   : 	{
; 72   : 		IPanelChangeObserver * pOb = dynamic_cast<IPanelChangeObserver*>(*itOb);

  00571	6a 00		 push	 0
  00573	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIPanelChangeObserver@@@8
  00578	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIMessageObserver@@@8
  0057d	6a 00		 push	 0
  0057f	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198068[ebp]
  00582	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
  00587	8b 08		 mov	 ecx, DWORD PTR [eax]
  00589	51		 push	 ecx
  0058a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0058f	83 c4 14	 add	 esp, 20			; 00000014H
  00592	89 45 e0	 mov	 DWORD PTR _pOb$198075[ebp], eax

; 73   : 		pOb->IPanelChangeOb_WindowMax();

  00595	8b 55 e0	 mov	 edx, DWORD PTR _pOb$198075[ebp]
  00598	8b 02		 mov	 eax, DWORD PTR [edx]
  0059a	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198075[ebp]
  0059d	ff 50 04	 call	 DWORD PTR [eax+4]

; 74   : 	}

  005a0	eb a5		 jmp	 SHORT $L198073
$L198074:

; 75   : 	return true;

  005a2	c6 45 d7 01	 mov	 BYTE PTR $T198812[ebp], 1
  005a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005ad	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  005b0	e8 00 00 00 00	 call	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
  005b5	8a 45 d7	 mov	 al, BYTE PTR $T198812[ebp]

; 76   : }

  005b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  005c2	8b e5		 mov	 esp, ebp
  005c4	5d		 pop	 ebp
  005c5	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198813:
  00095	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00098	e9 00 00 00 00	 jmp	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
__ehhandler$?IPanelChange_Max@CPanelChange@@UAE_NXZ:
  0009d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198815
  000a2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IPanelChange_Max@CPanelChange@@UAE_NXZ ENDP		; CPanelChange::IPanelChange_Max
xdata$x	SEGMENT
$T198826 DD	0ffffffffH
	DD	FLAT:$L198822
$T198824 DD	019930520H
	DD	01H
	DD	FLAT:$T198826
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv69 = -52						; size = 4
_this$ = -48						; size = 4
$T198821 = -41						; size = 1
$T198820 = -40						; size = 4
$T198819 = -36						; size = 4
_pOb$198091 = -32					; size = 4
_itOb$198084 = -28					; size = 4
_listOb$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?IPanelChange_Min@CPanelChange@@UAE_NXZ PROC NEAR	; CPanelChange::IPanelChange_Min
; _this$ = ecx

; 79   : {

  005d0	55		 push	 ebp
  005d1	8b ec		 mov	 ebp, esp
  005d3	6a ff		 push	 -1
  005d5	68 00 00 00 00	 push	 __ehhandler$?IPanelChange_Min@CPanelChange@@UAE_NXZ
  005da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  005e0	50		 push	 eax
  005e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  005e8	83 ec 28	 sub	 esp, 40			; 00000028H
  005eb	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	list<IMessageObserver*> listOb;

  005ee	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  005f1	e8 00 00 00 00	 call	 ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
  005f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 81   : 	AfxGetMessageManager()->QueryObservers( ID_MESSAGE_PANEL_CHANGE,listOb);

  005fd	e8 00 00 00 00	 call	 ?AfxGetMessageManager@@YAPAVIMessageManager@@XZ ; AfxGetMessageManager
  00602	89 45 cc	 mov	 DWORD PTR tv69[ebp], eax
  00605	8d 45 e8	 lea	 eax, DWORD PTR _listOb$[ebp]
  00608	50		 push	 eax
  00609	68 00 00 00 00	 push	 OFFSET FLAT:_ID_MESSAGE_PANEL_CHANGE
  0060e	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  00611	8b 11		 mov	 edx, DWORD PTR [ecx]
  00613	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  00616	ff 52 0c	 call	 DWORD PTR [edx+12]

; 82   : 	for( list<IMessageObserver*>::iterator itOb = listOb.begin();itOb != listOb.end();itOb++ )

  00619	8d 45 e4	 lea	 eax, DWORD PTR _itOb$198084[ebp]
  0061c	50		 push	 eax
  0061d	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00620	e8 00 00 00 00	 call	 ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
  00625	eb 0e		 jmp	 SHORT $L198088
$L198089:
  00627	6a 00		 push	 0
  00629	8d 4d dc	 lea	 ecx, DWORD PTR $T198819[ebp]
  0062c	51		 push	 ecx
  0062d	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198084[ebp]
  00630	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
$L198088:
  00635	8d 55 d8	 lea	 edx, DWORD PTR $T198820[ebp]
  00638	52		 push	 edx
  00639	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0063c	e8 00 00 00 00	 call	 ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
  00641	50		 push	 eax
  00642	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198084[ebp]
  00645	e8 00 00 00 00	 call	 ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
  0064a	0f b6 c0	 movzx	 eax, al
  0064d	85 c0		 test	 eax, eax
  0064f	74 31		 je	 SHORT $L198090

; 83   : 	{
; 84   : 		IPanelChangeObserver * pOb = dynamic_cast<IPanelChangeObserver*>(*itOb);

  00651	6a 00		 push	 0
  00653	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIPanelChangeObserver@@@8
  00658	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIMessageObserver@@@8
  0065d	6a 00		 push	 0
  0065f	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198084[ebp]
  00662	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
  00667	8b 08		 mov	 ecx, DWORD PTR [eax]
  00669	51		 push	 ecx
  0066a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0066f	83 c4 14	 add	 esp, 20			; 00000014H
  00672	89 45 e0	 mov	 DWORD PTR _pOb$198091[ebp], eax

; 85   : 		pOb->IPanelChangeOb_WindowMin();

  00675	8b 55 e0	 mov	 edx, DWORD PTR _pOb$198091[ebp]
  00678	8b 02		 mov	 eax, DWORD PTR [edx]
  0067a	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198091[ebp]
  0067d	ff 50 08	 call	 DWORD PTR [eax+8]

; 86   : 	}

  00680	eb a5		 jmp	 SHORT $L198089
$L198090:

; 87   : 	return true;

  00682	c6 45 d7 01	 mov	 BYTE PTR $T198821[ebp], 1
  00686	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0068d	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00690	e8 00 00 00 00	 call	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
  00695	8a 45 d7	 mov	 al, BYTE PTR $T198821[ebp]

; 88   : }

  00698	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0069b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  006a2	8b e5		 mov	 esp, ebp
  006a4	5d		 pop	 ebp
  006a5	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198822:
  000a7	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  000aa	e9 00 00 00 00	 jmp	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
__ehhandler$?IPanelChange_Min@CPanelChange@@UAE_NXZ:
  000af	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198824
  000b4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IPanelChange_Min@CPanelChange@@UAE_NXZ ENDP		; CPanelChange::IPanelChange_Min
xdata$x	SEGMENT
$T198835 DD	0ffffffffH
	DD	FLAT:$L198831
$T198833 DD	019930520H
	DD	01H
	DD	FLAT:$T198835
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv69 = -52						; size = 4
_this$ = -48						; size = 4
$T198830 = -41						; size = 1
$T198829 = -40						; size = 4
$T198828 = -36						; size = 4
_pOb$198107 = -32					; size = 4
_itOb$198100 = -28					; size = 4
_listOb$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?IPanelChange_Restore@CPanelChange@@UAE_NXZ PROC NEAR	; CPanelChange::IPanelChange_Restore
; _this$ = ecx

; 91   : {

  006b0	55		 push	 ebp
  006b1	8b ec		 mov	 ebp, esp
  006b3	6a ff		 push	 -1
  006b5	68 00 00 00 00	 push	 __ehhandler$?IPanelChange_Restore@CPanelChange@@UAE_NXZ
  006ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  006c0	50		 push	 eax
  006c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  006c8	83 ec 28	 sub	 esp, 40			; 00000028H
  006cb	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 	list<IMessageObserver*> listOb;

  006ce	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  006d1	e8 00 00 00 00	 call	 ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
  006d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   : 	AfxGetMessageManager()->QueryObservers( ID_MESSAGE_PANEL_CHANGE,listOb);

  006dd	e8 00 00 00 00	 call	 ?AfxGetMessageManager@@YAPAVIMessageManager@@XZ ; AfxGetMessageManager
  006e2	89 45 cc	 mov	 DWORD PTR tv69[ebp], eax
  006e5	8d 45 e8	 lea	 eax, DWORD PTR _listOb$[ebp]
  006e8	50		 push	 eax
  006e9	68 00 00 00 00	 push	 OFFSET FLAT:_ID_MESSAGE_PANEL_CHANGE
  006ee	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  006f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  006f3	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  006f6	ff 52 0c	 call	 DWORD PTR [edx+12]

; 94   : 	for( list<IMessageObserver*>::iterator itOb = listOb.begin();itOb != listOb.end();itOb++ )

  006f9	8d 45 e4	 lea	 eax, DWORD PTR _itOb$198100[ebp]
  006fc	50		 push	 eax
  006fd	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00700	e8 00 00 00 00	 call	 ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
  00705	eb 0e		 jmp	 SHORT $L198104
$L198105:
  00707	6a 00		 push	 0
  00709	8d 4d dc	 lea	 ecx, DWORD PTR $T198828[ebp]
  0070c	51		 push	 ecx
  0070d	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198100[ebp]
  00710	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
$L198104:
  00715	8d 55 d8	 lea	 edx, DWORD PTR $T198829[ebp]
  00718	52		 push	 edx
  00719	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0071c	e8 00 00 00 00	 call	 ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
  00721	50		 push	 eax
  00722	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198100[ebp]
  00725	e8 00 00 00 00	 call	 ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
  0072a	0f b6 c0	 movzx	 eax, al
  0072d	85 c0		 test	 eax, eax
  0072f	74 31		 je	 SHORT $L198106

; 95   : 	{
; 96   : 		IPanelChangeObserver * pOb = dynamic_cast<IPanelChangeObserver*>(*itOb);

  00731	6a 00		 push	 0
  00733	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIPanelChangeObserver@@@8
  00738	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIMessageObserver@@@8
  0073d	6a 00		 push	 0
  0073f	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198100[ebp]
  00742	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
  00747	8b 08		 mov	 ecx, DWORD PTR [eax]
  00749	51		 push	 ecx
  0074a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0074f	83 c4 14	 add	 esp, 20			; 00000014H
  00752	89 45 e0	 mov	 DWORD PTR _pOb$198107[ebp], eax

; 97   : 		pOb->IPanelChangeOb_WindowRestore();

  00755	8b 55 e0	 mov	 edx, DWORD PTR _pOb$198107[ebp]
  00758	8b 02		 mov	 eax, DWORD PTR [edx]
  0075a	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198107[ebp]
  0075d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 98   : 	}

  00760	eb a5		 jmp	 SHORT $L198105
$L198106:

; 99   : 	return true;

  00762	c6 45 d7 01	 mov	 BYTE PTR $T198830[ebp], 1
  00766	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0076d	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  00770	e8 00 00 00 00	 call	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
  00775	8a 45 d7	 mov	 al, BYTE PTR $T198830[ebp]

; 100  : }

  00778	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0077b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00782	8b e5		 mov	 esp, ebp
  00784	5d		 pop	 ebp
  00785	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198831:
  000b9	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  000bc	e9 00 00 00 00	 jmp	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
__ehhandler$?IPanelChange_Restore@CPanelChange@@UAE_NXZ:
  000c1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198833
  000c6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IPanelChange_Restore@CPanelChange@@UAE_NXZ ENDP	; CPanelChange::IPanelChange_Restore
xdata$x	SEGMENT
$T198843 DD	0ffffffffH
	DD	FLAT:$L198839
$T198841 DD	019930520H
	DD	01H
	DD	FLAT:$T198843
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv69 = -48						; size = 4
_this$ = -44						; size = 4
$T198838 = -40						; size = 4
$T198837 = -36						; size = 4
_pOb$198123 = -32					; size = 4
_itOb$198116 = -28					; size = 4
_listOb$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?IPanelChange_Close@CPanelChange@@UAEXXZ PROC NEAR	; CPanelChange::IPanelChange_Close
; _this$ = ecx

; 103  : {

  00790	55		 push	 ebp
  00791	8b ec		 mov	 ebp, esp
  00793	6a ff		 push	 -1
  00795	68 00 00 00 00	 push	 __ehhandler$?IPanelChange_Close@CPanelChange@@UAEXXZ
  0079a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  007a0	50		 push	 eax
  007a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  007a8	83 ec 24	 sub	 esp, 36			; 00000024H
  007ab	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 	list<IMessageObserver*> listOb;

  007ae	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  007b1	e8 00 00 00 00	 call	 ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
  007b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 105  : 	AfxGetMessageManager()->QueryObservers( ID_MESSAGE_PANEL_CHANGE,listOb);

  007bd	e8 00 00 00 00	 call	 ?AfxGetMessageManager@@YAPAVIMessageManager@@XZ ; AfxGetMessageManager
  007c2	89 45 d0	 mov	 DWORD PTR tv69[ebp], eax
  007c5	8d 45 e8	 lea	 eax, DWORD PTR _listOb$[ebp]
  007c8	50		 push	 eax
  007c9	68 00 00 00 00	 push	 OFFSET FLAT:_ID_MESSAGE_PANEL_CHANGE
  007ce	8b 4d d0	 mov	 ecx, DWORD PTR tv69[ebp]
  007d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  007d3	8b 4d d0	 mov	 ecx, DWORD PTR tv69[ebp]
  007d6	ff 52 0c	 call	 DWORD PTR [edx+12]

; 106  : 	for( list<IMessageObserver*>::iterator itOb = listOb.begin();itOb != listOb.end();itOb++ )

  007d9	8d 45 e4	 lea	 eax, DWORD PTR _itOb$198116[ebp]
  007dc	50		 push	 eax
  007dd	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  007e0	e8 00 00 00 00	 call	 ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
  007e5	eb 0e		 jmp	 SHORT $L198120
$L198121:
  007e7	6a 00		 push	 0
  007e9	8d 4d dc	 lea	 ecx, DWORD PTR $T198837[ebp]
  007ec	51		 push	 ecx
  007ed	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198116[ebp]
  007f0	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
$L198120:
  007f5	8d 55 d8	 lea	 edx, DWORD PTR $T198838[ebp]
  007f8	52		 push	 edx
  007f9	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  007fc	e8 00 00 00 00	 call	 ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
  00801	50		 push	 eax
  00802	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198116[ebp]
  00805	e8 00 00 00 00	 call	 ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
  0080a	0f b6 c0	 movzx	 eax, al
  0080d	85 c0		 test	 eax, eax
  0080f	74 31		 je	 SHORT $L198122

; 107  : 	{
; 108  : 		IPanelChangeObserver * pOb = dynamic_cast<IPanelChangeObserver*>(*itOb);

  00811	6a 00		 push	 0
  00813	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIPanelChangeObserver@@@8
  00818	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVIMessageObserver@@@8
  0081d	6a 00		 push	 0
  0081f	8d 4d e4	 lea	 ecx, DWORD PTR _itOb$198116[ebp]
  00822	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
  00827	8b 08		 mov	 ecx, DWORD PTR [eax]
  00829	51		 push	 ecx
  0082a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0082f	83 c4 14	 add	 esp, 20			; 00000014H
  00832	89 45 e0	 mov	 DWORD PTR _pOb$198123[ebp], eax

; 109  : 		pOb->IPanelChangeOb_WindowClose();

  00835	8b 55 e0	 mov	 edx, DWORD PTR _pOb$198123[ebp]
  00838	8b 02		 mov	 eax, DWORD PTR [edx]
  0083a	8b 4d e0	 mov	 ecx, DWORD PTR _pOb$198123[ebp]
  0083d	ff 50 10	 call	 DWORD PTR [eax+16]

; 110  : 	}

  00840	eb a5		 jmp	 SHORT $L198121
$L198122:

; 111  : }

  00842	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00849	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  0084c	e8 00 00 00 00	 call	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
  00851	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00854	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0085b	8b e5		 mov	 esp, ebp
  0085d	5d		 pop	 ebp
  0085e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198839:
  000cb	8d 4d e8	 lea	 ecx, DWORD PTR _listOb$[ebp]
  000ce	e9 00 00 00 00	 jmp	 ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
__ehhandler$?IPanelChange_Close@CPanelChange@@UAEXXZ:
  000d3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198841
  000d8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?IPanelChange_Close@CPanelChange@@UAEXXZ ENDP		; CPanelChange::IPanelChange_Close
PUBLIC	??0?$_List_val@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ; std::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >
PUBLIC	?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Buynode
PUBLIC	??0?$allocator@PAVIMessageObserver@@@std@@QAE@XZ ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >, COMDAT
; _this$ = ecx

; 280  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	51		 push	 ecx
  0000a	8b cc		 mov	 ecx, esp
  0000c	e8 00 00 00 00	 call	 ??0?$allocator@PAVIMessageObserver@@@std@@QAE@XZ ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$_List_val@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ; std::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Buynode
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00027	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 281  : 		}

  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??0?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::list<IMessageObserver *,std::allocator<IMessageObserver *> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEXXZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Tidy
; Function compile flags: /Odt
;	COMDAT ??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >, COMDAT
; _this$ = ecx

; 364  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 365  : 		_Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEXXZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Tidy

; 366  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::~list<IMessageObserver *,std::allocator<IMessageObserver *> >
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
PUBLIC	??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::iterator
; Function compile flags: /Odt
;	COMDAT ?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin, COMDAT
; _this$ = ecx

; 376  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 377  : 		return (iterator(_Nextnode(_Myhead)));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  00013	83 c4 04	 add	 esp, 4
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	52		 push	 edx
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::iterator
  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 378  : 		}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?begin@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::begin
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end, COMDAT
; _this$ = ecx

; 386  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 387  : 		return (iterator(_Myhead));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::iterator
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 388  : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?end@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::end
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEABQAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator*
; Function compile flags: /Odt
;	COMDAT ??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 239  : 			{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 240  : 			return ((reference)**(const_iterator *)this);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??Dconst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEABQAVIMessageObserver@@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator*

; 241  : 			}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??Diterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEAAPAVIMessageObserver@@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
; Function compile flags: /Odt
;	COMDAT ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Tmp$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 256  : 			iterator _Tmp = *this;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 257  : 			++*this;

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++

; 258  : 			return (_Tmp);

  00019	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$[ebp]
  0001f	89 02		 mov	 DWORD PTR [edx], eax
  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 259  : 			}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??8const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator==
; Function compile flags: /Odt
;	COMDAT ??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 201  : 			{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 			return (!(*this == _Right));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??8const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator==
  00013	0f b6 c0	 movzx	 eax, al
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 203  : 			}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??9const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator!=
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode, COMDAT

; 107  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 108  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 109  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::deallocate
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocate
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::construct
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::destroy
PUBLIC	?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Prevnode
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T198868 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T198870 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L198864
$T198869 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T198870
$T198866 DD	019930520H
	DD	02H
	DD	FLAT:$T198868
	DD	01H
	DD	FLAT:$T198869
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ
_TEXT	SEGMENT
tv93 = -36						; size = 4
tv92 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Buynode, COMDAT
; _this$ = ecx

; 898  : 		{	// allocate a head node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	83 ec 14	 sub	 esp, 20			; 00000014H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00022	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 899  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00025	6a 01		 push	 1
  00027	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocate
  0002f	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 900  : 		int _Linkcnt = 0;

  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Linkcnt$[ebp], 0

; 901  : 
; 902  : 		_TRY_BEGIN

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 903  : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  00040	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 e0	 mov	 DWORD PTR tv92[ebp], eax
  0004f	8d 4d e8	 lea	 ecx, DWORD PTR __Pnode$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 e0	 mov	 edx, DWORD PTR tv92[ebp]
  00056	52		 push	 edx
  00057	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 01	 add	 ecx, 1
  0005d	e8 00 00 00 00	 call	 ?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::construct

; 904  : 		++_Linkcnt;

  00062	8b 45 ec	 mov	 eax, DWORD PTR __Linkcnt$[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 45 ec	 mov	 DWORD PTR __Linkcnt$[ebp], eax

; 905  : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Prevnode
  00074	83 c4 04	 add	 esp, 4
  00077	89 45 dc	 mov	 DWORD PTR tv93[ebp], eax
  0007a	8d 55 e8	 lea	 edx, DWORD PTR __Pnode$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 dc	 mov	 eax, DWORD PTR tv93[ebp]
  00081	50		 push	 eax
  00082	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	83 c1 01	 add	 ecx, 1
  00088	e8 00 00 00 00	 call	 ?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::construct
  0008d	eb 35		 jmp	 SHORT $L198863
$L198864:

; 906  : 		_CATCH_ALL
; 907  : 		if (0 < _Linkcnt)

  0008f	83 7d ec 00	 cmp	 DWORD PTR __Linkcnt$[ebp], 0
  00093	7e 18		 jle	 SHORT $L198231

; 908  : 			this->_Alptr.destroy(&_Nextnode(_Pnode));

  00095	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  0009e	83 c4 04	 add	 esp, 4
  000a1	50		 push	 eax
  000a2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::destroy
$L198231:

; 909  : 		this->_Alnod.deallocate(_Pnode, 1);

  000ad	6a 01		 push	 1
  000af	8b 55 e8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  000b2	52		 push	 edx
  000b3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::deallocate

; 910  : 		_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$L198863:

; 911  : 		_CATCH_END

  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 912  : 		return (_Pnode);

  000cb	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$L198861:

; 913  : 		}

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198866
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Buynode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Buynode
PUBLIC	?clear@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEXXZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::clear
; Function compile flags: /Odt
;	COMDAT ?_Tidy@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEXXZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Tidy, COMDAT
; _this$ = ecx

; 929  : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 930  : 		clear();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?clear@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEXXZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::clear

; 931  : 		this->_Alptr.destroy(&_Nextnode(_Myhead));

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 01	 add	 ecx, 1
  00025	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::destroy

; 932  : 		this->_Alptr.destroy(&_Prevnode(_Myhead));

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Prevnode
  00036	83 c4 04	 add	 esp, 4
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 01	 add	 ecx, 1
  00040	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::destroy

; 933  : 		this->_Alnod.deallocate(_Myhead, 1);

  00045	6a 01		 push	 1
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004d	52		 push	 edx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::deallocate

; 934  : 		_Myhead = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 935  : 		}

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Tidy@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAEXXZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ; std::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >
PUBLIC	??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
; Function compile flags: /Odt
;	COMDAT ??0?$_List_val@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z PROC NEAR ; std::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >, COMDAT
; _this$ = ecx

; 82   : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	51		 push	 ecx
  0000a	8b cc		 mov	 ecx, esp
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
  00015	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??0?$_List_ptr@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ; std::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >
  0001d	8d 4d 08	 lea	 ecx, DWORD PTR __Al$[ebp]
  00020	51		 push	 ecx
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 02	 add	 ecx, 2
  00027	e8 00 00 00 00	 call	 ??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>

; 83   : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$_List_val@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ENDP ; std::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_val<IMessageObserver *,std::allocator<IMessageObserver *> >
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVIMessageObserver@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVIMessageObserver@@@std@@QAE@XZ PROC NEAR ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0?$allocator@PAVIMessageObserver@@@std@@QAE@XZ ENDP	; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::const_iterator
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\list
;	COMDAT ??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 235  : 			{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::const_iterator

; 236  : 			}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator++
; Function compile flags: /Odt
;	COMDAT ??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 249  : 			{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 250  : 			++(*(const_iterator *)this);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??Econst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator++

; 251  : 			return (*this);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 252  : 			}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??Eiterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?_Myval@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAVIMessageObserver@@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Myval
; Function compile flags: /Odt
;	COMDAT ??Dconst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEABQAVIMessageObserver@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dconst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEABQAVIMessageObserver@@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 160  : 			{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 			return (_Myval(_Ptr));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Myval@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAVIMessageObserver@@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Myval
  00012	83 c4 04	 add	 esp, 4

; 162  : 			}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??Dconst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBEABQAVIMessageObserver@@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator*
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 196  : 			{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 			return (_Ptr == _Right._Ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	2b 01		 sub	 eax, DWORD PTR [ecx]
  00011	f7 d8		 neg	 eax
  00013	1b c0		 sbb	 eax, eax
  00015	40		 inc	 eax

; 198  : 			}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??8const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator==
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Prevnode, COMDAT

; 112  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 114  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Prevnode
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAVIMessageObserver@@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAVIMessageObserver@@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Myval, COMDAT

; 117  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 		return ((_Vref)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 119  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAVIMessageObserver@@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Myval
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::destroy
; Function compile flags: /Odt
;	COMDAT ?clear@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnext$ = -8						; size = 4
__Pnode$ = -4						; size = 4
?clear@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEXXZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::clear, COMDAT
; _this$ = ecx

; 610  : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 611  : 		_Nodeptr _Pnext;
; 612  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  00015	83 c4 04	 add	 esp, 4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	89 55 fc	 mov	 DWORD PTR __Pnode$[ebp], edx

; 613  : 		_Nextnode(_Myhead) = _Myhead;

  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  00029	83 c4 04	 add	 esp, 4
  0002c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00032	89 08		 mov	 DWORD PTR [eax], ecx

; 614  : 		_Prevnode(_Myhead) = _Myhead;

  00034	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?_Prevnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Prevnode
  00040	83 c4 04	 add	 esp, 4
  00043	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	89 10		 mov	 DWORD PTR [eax], edx

; 615  : 		_Mysize = 0;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 616  : 
; 617  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00055	eb 06		 jmp	 SHORT $L198296
$L198297:
  00057	8b 4d f8	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  0005a	89 4d fc	 mov	 DWORD PTR __Pnode$[ebp], ecx
$L198296:
  0005d	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00063	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00066	74 2d		 je	 SHORT $L198293

; 618  : 			{	// delete an element
; 619  : 			_Pnext = _Nextnode(_Pnode);

  00068	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  00071	83 c4 04	 add	 esp, 4
  00074	8b 10		 mov	 edx, DWORD PTR [eax]
  00076	89 55 f8	 mov	 DWORD PTR __Pnext$[ebp], edx

; 620  : 			this->_Alnod.destroy(_Pnode);

  00079	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::destroy

; 621  : 			this->_Alnod.deallocate(_Pnode, 1);

  00085	6a 01		 push	 1
  00087	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::deallocate

; 622  : 			}

  00093	eb c2		 jmp	 SHORT $L198297
$L198293:

; 623  : 		}

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?clear@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEXXZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::clear
_TEXT	ENDS
PUBLIC	??0?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ; std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >
PUBLIC	??$?0PAVIMessageObserver@@@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *><IMessageObserver *>
; Function compile flags: /Odt
;	COMDAT ??0?$_List_ptr@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_List_ptr@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z PROC NEAR ; std::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >, COMDAT
; _this$ = ecx

; 64   : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	51		 push	 ecx
  0000a	8b cc		 mov	 ecx, esp
  0000c	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
  00015	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??0?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ; std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >
  0001d	8d 4d 08	 lea	 ecx, DWORD PTR __Al$[ebp]
  00020	51		 push	 ecx
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 01	 add	 ecx, 1
  00027	e8 00 00 00 00	 call	 ??$?0PAVIMessageObserver@@@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *><IMessageObserver *>

; 65   : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$_List_ptr@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ENDP ; std::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_ptr<IMessageObserver *,std::allocator<IMessageObserver *> >
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??0?$allocator@PAVIMessageObserver@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<IMessageObserver *>::allocator<IMessageObserver *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 131  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 132  : 		operator delete(_Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4

; 133  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>
; Function compile flags: /Odt
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 136  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>
  00012	83 c4 08	 add	 esp, 8

; 138  : 		}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *,std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>
; Function compile flags: /Odt
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 146  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 		_Construct(_Ptr, _Val);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$_Construct@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *,std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>
  00014	83 c4 08	 add	 esp, 8

; 148  : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>
; Function compile flags: /Odt
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 151  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 		_Destroy(_Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$_Destroy@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>
  00010	83 c4 04	 add	 esp, 4

; 153  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::destroy
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\list
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
??0const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 156  : 			{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 157  : 			}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0const_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAE@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::const_iterator
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Econst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 170  : 			{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 			_Ptr = _Nextnode(_Ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Nextnode@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@PAU342@@Z ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::_Nextnode
  00012	83 c4 04	 add	 esp, 4
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	89 02		 mov	 DWORD PTR [edx], eax

; 172  : 			return (*this);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 173  : 			}

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??Econst_iterator@?$list@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<IMessageObserver *,std::allocator<IMessageObserver *> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??$?0PAVIMessageObserver@@@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node><IMessageObserver *>
; Function compile flags: /Odt
;	COMDAT ??0?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z PROC NEAR ; std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >, COMDAT
; _this$ = ecx

; 44   : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$?0PAVIMessageObserver@@@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node><IMessageObserver *>

; 45   : 		}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@IAE@V?$allocator@PAVIMessageObserver@@@1@@Z ENDP ; std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 151  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 		_Destroy(_Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$_Destroy@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>
  00010	83 c4 04	 add	 esp, 4

; 153  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::destroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??$?0PAVIMessageObserver@@@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVIMessageObserver@@@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *><IMessageObserver *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??$?0PAVIMessageObserver@@@?$allocator@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *><IMessageObserver *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>, COMDAT

; 33   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000f	83 c4 04	 add	 esp, 4

; 35   : 	}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Odt
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
$T198921 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *,std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>, COMDAT

; 41   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	50		 push	 eax
  0000a	6a 04		 push	 4
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR $T198921[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR $T198921[ebp], 0
  0001b	74 12		 je	 SHORT $L198922
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T198921[ebp]
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR $T198921[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR tv68[ebp], ecx
  0002d	eb 07		 jmp	 SHORT $L198371
$L198922:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L198371:

; 43   : 	}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *,std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>, COMDAT

; 48   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??$?0PAVIMessageObserver@@@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVIMessageObserver@@@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z PROC NEAR ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node><IMessageObserver *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??$?0PAVIMessageObserver@@@?$allocator@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVIMessageObserver@@@1@@Z ENDP ; std::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>::allocator<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node><IMessageObserver *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>, COMDAT

; 48   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVIMessageObserver@@V?$allocator@PAVIMessageObserver@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<IMessageObserver *,std::allocator<IMessageObserver *> >::_Node>
_TEXT	ENDS
END
