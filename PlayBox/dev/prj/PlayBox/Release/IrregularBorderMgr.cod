; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\IrregularBorder\IrregularBorderMgr.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?DeleteImage@CTranslucentDialog@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DIBINFO@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDIBINFO@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiPlusBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@CGdiPlusBitmap@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CGdiPlusBitmap@@QAE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiPlusBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1IData@@MAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DataAppStart@IData@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DataAppExit@IData@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GIData@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiPlusBitmap@CSkinButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@CGdiPlusBitmap@CSkinButton@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CGdiPlusBitmap@CSkinButton@@QAE_NPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiPlusBitmap@CSkinButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1HTTPObserver@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownStart@HTTPObserver@@UAEXPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownFinish@HTTPObserver@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownFailed@HTTPObserver@@UAEXPBDW4HTTP_DOWN_FAILED_REASON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownProgress@HTTPObserver@@UAEXPBDII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HTTPOb_DownloadPause@HTTPObserver@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GHTTPObserver@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1P2PObserver@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownStart@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownFinish@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownFailed@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4P2P_DOWN_FAILED_REASON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownProgress@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_DownPause@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?P2POb_SigChange@P2PObserver@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GP2PObserver@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClsid@CShockwaveFlash@@QAEABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIrregularBorderMgr@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiPlusBitmap@CSkinButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiPlusBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3P2PObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3HTTPObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3DIBINFO@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiPlusBitmap@CSkinButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiPlusBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2P2PObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2HTTPObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2DIBINFO@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IData@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiPlusBitmap@CSkinButton@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiPlusBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@P2PObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@HTTPObserver@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@DIBINFO@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVIData@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCGdiPlusBitmap@CSkinButton@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCGdiPlusBitmap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVP2PObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVHTTPObserver@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVDIBINFO@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4IData@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CGdiPlusBitmap@CSkinButton@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CGdiPlusBitmap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4P2PObserver@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4HTTPObserver@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4DIBINFO@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rect@Gdiplus@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Graphics@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@Image@Gdiplus@@UAEPAV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2GdiplusBase@Gdiplus@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3GdiplusBase@Gdiplus@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Image@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4Image@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVImage@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Image@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVGdiplusBase@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GImage@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHeight@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWidth@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Image@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetOwner@CWnd@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clsid@?1??GetClsid@CShockwaveFlash@@QAEABU_GUID@@XZ@4U3@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7P2PObserver@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7HTTPObserver@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiPlusBitmap@CSkinButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7IData@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromFile@Bitmap@Gdiplus@@SAPAV12@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Image@Gdiplus@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Bitmap@Gdiplus@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4Bitmap@Gdiplus@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVBitmap@Gdiplus@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Bitmap@Gdiplus@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GBitmap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Bitmap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiPlusBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7DIBINFO@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?m_pMgr@CIrregularBorderMgr@@0PAV1@A		; CIrregularBorderMgr::m_pMgr
_BSS	SEGMENT
?m_pMgr@CIrregularBorderMgr@@0PAV1@A DD 01H DUP (?)	; CIrregularBorderMgr::m_pMgr
_BSS	ENDS
CONST	SEGMENT
$SG202142 DB	00H
$SG202147 DB	00H
$SG202152 DB	00H
$SG202157 DB	00H
$SG202207 DB	'Enter InitTransDlg', 00H
	ORG $+1
$SG202208 DB	'USRCLK', 00H
	ORG $+1
$SG202216 DB	'\topleft.png', 00H
	ORG $+3
$SG202217 DB	'\sbujectskin\', 00H
	ORG $+2
$SG202220 DB	'USRCLK', 00H
	ORG $+1
$SG202224 DB	'cloneTopLeft: %d ,h: %d, %s', 0dH, 0aH, 00H
	ORG $+2
$SG202227 DB	'USRCLK', 00H
	ORG $+1
$SG202231 DB	'TopLeft hide', 00H
	ORG $+3
$SG202232 DB	'USRCLK', 00H
	ORG $+1
$SG202236 DB	'\topright.png', 00H
	ORG $+2
$SG202237 DB	'\sbujectskin\', 00H
	ORG $+2
$SG202240 DB	'USRCLK', 00H
	ORG $+1
$SG202244 DB	'cloneTopRight: %d ,h: %d, %s', 0dH, 0aH, 00H
	ORG $+1
$SG202247 DB	'USRCLK', 00H
	ORG $+1
$SG202251 DB	'TopRight Hide', 00H
	ORG $+2
$SG202252 DB	'USRCLK', 00H
	ORG $+1
$SG202256 DB	'\bottomright.png', 00H
	ORG $+3
$SG202257 DB	'\sbujectskin\', 00H
	ORG $+2
$SG202264 DB	'\bottomleft.png', 00H
$SG202265 DB	'\sbujectskin\', 00H
	ORG $+2
$SG202311 DB	'toppanel', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00011	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0001b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00028	83 bd 70 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0002f	75 15		 jne	 SHORT $L24173
  00031	83 bd 64 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00038	72 0c		 jb	 SHORT $L24173

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  0003a	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00044	eb 0a		 jmp	 SHORT $L24174
$L24173:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00046	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24174:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  00050	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0005c	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 93   : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24161 = -24					; size = 4
_lcidThread$ = -20					; size = 4
_szACP$ = -16						; size = 7
__$ArrayPad$ = -8					; size = 4
_nACP$ = -4						; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0001b	89 45 ec	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  0001e	6a 07		 push	 7
  00020	8d 45 f0	 lea	 eax, DWORD PTR _szACP$[ebp]
  00023	50		 push	 eax
  00024	68 04 10 00 00	 push	 4100			; 00001004H
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  0002c	51		 push	 ecx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00033	85 c0		 test	 eax, eax
  00035	74 34		 je	 SHORT $L24160

; 111  : 	{
; 112  : 		char* pch = szACP;

  00037	8d 55 f0	 lea	 edx, DWORD PTR _szACP$[ebp]
  0003a	89 55 e8	 mov	 DWORD PTR _pch$24161[ebp], edx
$L24163:

; 113  : 		while (*pch != '\0')

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00040	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00043	85 c9		 test	 ecx, ecx
  00045	74 24		 je	 SHORT $L24160

; 114  : 		{
; 115  : 			nACP *= 10;

  00047	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  0004a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0004d	89 55 fc	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00050	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00053	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  00059	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0005d	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
  00060	8b 4d e8	 mov	 ecx, DWORD PTR _pch$24161[ebp]
  00063	83 c1 01	 add	 ecx, 1
  00066	89 4d e8	 mov	 DWORD PTR _pch$24161[ebp], ecx

; 117  : 		}

  00069	eb d2		 jmp	 SHORT $L24163
$L24160:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0006f	75 09		 jne	 SHORT $L24165

; 121  : 		nACP = ::GetACP();

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00077	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
$L24165:

; 122  : 
; 123  : 	return nACP;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ	; CIrregularBorderMgr::GetInstance
PUBLIC	??0CIrregularBorderMgr@@QAE@XZ			; CIrregularBorderMgr::CIrregularBorderMgr
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T202979 DD	0ffffffffH
	DD	FLAT:$L202972
$T202976 DD	019930520H
	DD	01H
	DD	FLAT:$T202979
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\irregularbordermgr.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -24						; size = 4
$T202969 = -20						; size = 4
$T202968 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ PROC NEAR	; CIrregularBorderMgr::GetInstance

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 13   : 	if(CIrregularBorderMgr::m_pMgr == NULL)

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A, 0 ; CIrregularBorderMgr::m_pMgr
  00022	75 44		 jne	 SHORT $L202121

; 14   : 		CIrregularBorderMgr::m_pMgr = new CIrregularBorderMgr();

  00024	6a 1c		 push	 28			; 0000001cH
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	83 c4 04	 add	 esp, 4
  0002e	89 45 ec	 mov	 DWORD PTR $T202969[ebp], eax
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	83 7d ec 00	 cmp	 DWORD PTR $T202969[ebp], 0
  0003c	74 0d		 je	 SHORT $L202970
  0003e	8b 4d ec	 mov	 ecx, DWORD PTR $T202969[ebp]
  00041	e8 00 00 00 00	 call	 ??0CIrregularBorderMgr@@QAE@XZ ; CIrregularBorderMgr::CIrregularBorderMgr
  00046	89 45 e8	 mov	 DWORD PTR tv72[ebp], eax
  00049	eb 07		 jmp	 SHORT $L202971
$L202970:
  0004b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L202971:
  00052	8b 45 e8	 mov	 eax, DWORD PTR tv72[ebp]
  00055	89 45 f0	 mov	 DWORD PTR $T202968[ebp], eax
  00058	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR $T202968[ebp]
  00062	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A, ecx ; CIrregularBorderMgr::m_pMgr
$L202121:

; 15   : 	
; 16   : 	return CIrregularBorderMgr::m_pMgr;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A ; CIrregularBorderMgr::m_pMgr

; 17   : }

  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202972:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T202969[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202976
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetInstance@CIrregularBorderMgr@@SAPAV1@XZ ENDP	; CIrregularBorderMgr::GetInstance
PUBLIC	?DelInstance@CIrregularBorderMgr@@SAXXZ		; CIrregularBorderMgr::DelInstance
PUBLIC	??_GCIrregularBorderMgr@@QAEPAXI@Z		; CIrregularBorderMgr::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T202983 = -8						; size = 4
$T202982 = -4						; size = 4
?DelInstance@CIrregularBorderMgr@@SAXXZ PROC NEAR	; CIrregularBorderMgr::DelInstance

; 20   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp
  00083	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 21   : 	delete CIrregularBorderMgr::m_pMgr;

  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pMgr@CIrregularBorderMgr@@0PAV1@A ; CIrregularBorderMgr::m_pMgr
  0008b	89 45 f8	 mov	 DWORD PTR $T202983[ebp], eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR $T202983[ebp]
  00091	89 4d fc	 mov	 DWORD PTR $T202982[ebp], ecx
  00094	83 7d fc 00	 cmp	 DWORD PTR $T202982[ebp], 0
  00098	74 0f		 je	 SHORT $L202984
  0009a	6a 01		 push	 1
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR $T202982[ebp]
  0009f	e8 00 00 00 00	 call	 ??_GCIrregularBorderMgr@@QAEPAXI@Z
  000a4	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  000a7	eb 07		 jmp	 SHORT $L202128
$L202984:
  000a9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L202128:

; 22   : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?DelInstance@CIrregularBorderMgr@@SAXXZ ENDP		; CIrregularBorderMgr::DelInstance
_TEXT	ENDS
PUBLIC	??1CIrregularBorderMgr@@QAE@XZ			; CIrregularBorderMgr::~CIrregularBorderMgr
; Function compile flags: /Odt
;	COMDAT ??_GCIrregularBorderMgr@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCIrregularBorderMgr@@QAEPAXI@Z PROC NEAR		; CIrregularBorderMgr::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CIrregularBorderMgr@@QAE@XZ ; CIrregularBorderMgr::~CIrregularBorderMgr
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $L202134
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L202134:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GCIrregularBorderMgr@@QAEPAXI@Z ENDP			; CIrregularBorderMgr::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	?SetOwner@CWnd@@QAEXPAV1@@Z			; CWnd::SetOwner
EXTRN	??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z:NEAR	; CTranslucentDialog::CTranslucentDialog
EXTRN	?AfxGetMainWindow@@YAPAVCWnd@@XZ:NEAR		; AfxGetMainWindow
xdata$x	SEGMENT
$T203012 DD	0ffffffffH
	DD	FLAT:$L203005
	DD	0ffffffffH
	DD	FLAT:$L203006
	DD	0ffffffffH
	DD	FLAT:$L203007
	DD	0ffffffffH
	DD	FLAT:$L203008
$T203010 DD	019930520H
	DD	04H
	DD	FLAT:$T203012
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv141 = -68						; size = 4
tv130 = -64						; size = 4
tv87 = -60						; size = 4
tv76 = -56						; size = 4
_this$ = -52						; size = 4
$T203002 = -48						; size = 4
$T203001 = -44						; size = 4
$T202998 = -40						; size = 4
$T202997 = -36						; size = 4
$T202994 = -32						; size = 4
$T202993 = -28						; size = 4
$T202990 = -24						; size = 4
$T202989 = -20						; size = 4
_pWnd$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CIrregularBorderMgr@@QAE@XZ PROC NEAR		; CIrregularBorderMgr::CIrregularBorderMgr
; _this$ = ecx

; 25   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	6a ff		 push	 -1
  000c5	68 00 00 00 00	 push	 __ehhandler$??0CIrregularBorderMgr@@QAE@XZ
  000ca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  000d0	50		 push	 eax
  000d1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  000d8	83 ec 38	 sub	 esp, 56			; 00000038H
  000db	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 	m_pMainWnd = AfxGetMainWindow();

  000de	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  000e3	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	89 01		 mov	 DWORD PTR [ecx], eax

; 27   : 	m_pBottomLeftWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  000e8	68 98 00 00 00	 push	 152			; 00000098H
  000ed	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  000f2	89 45 e8	 mov	 DWORD PTR $T202990[ebp], eax
  000f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000fc	83 7d e8 00	 cmp	 DWORD PTR $T202990[ebp], 0
  00100	74 19		 je	 SHORT $L202991
  00102	6a 00		 push	 0
  00104	68 00 00 00 00	 push	 OFFSET FLAT:$SG202142
  00109	68 88 00 00 00	 push	 136			; 00000088H
  0010e	8b 4d e8	 mov	 ecx, DWORD PTR $T202990[ebp]
  00111	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  00116	89 45 c8	 mov	 DWORD PTR tv76[ebp], eax
  00119	eb 07		 jmp	 SHORT $L202992
$L202991:
  0011b	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L202992:
  00122	8b 55 c8	 mov	 edx, DWORD PTR tv76[ebp]
  00125	89 55 ec	 mov	 DWORD PTR $T202989[ebp], edx
  00128	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00132	8b 4d ec	 mov	 ecx, DWORD PTR $T202989[ebp]
  00135	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 28   : 	m_pBottomRightWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  00138	68 98 00 00 00	 push	 152			; 00000098H
  0013d	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00142	89 45 e0	 mov	 DWORD PTR $T202994[ebp], eax
  00145	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0014c	83 7d e0 00	 cmp	 DWORD PTR $T202994[ebp], 0
  00150	74 19		 je	 SHORT $L202995
  00152	6a 00		 push	 0
  00154	68 00 00 00 00	 push	 OFFSET FLAT:$SG202147
  00159	68 88 00 00 00	 push	 136			; 00000088H
  0015e	8b 4d e0	 mov	 ecx, DWORD PTR $T202994[ebp]
  00161	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  00166	89 45 c4	 mov	 DWORD PTR tv87[ebp], eax
  00169	eb 07		 jmp	 SHORT $L202996
$L202995:
  0016b	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L202996:
  00172	8b 55 c4	 mov	 edx, DWORD PTR tv87[ebp]
  00175	89 55 e4	 mov	 DWORD PTR $T202993[ebp], edx
  00178	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0017f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00182	8b 4d e4	 mov	 ecx, DWORD PTR $T202993[ebp]
  00185	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 29   : 	m_pTopRightWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  00188	68 98 00 00 00	 push	 152			; 00000098H
  0018d	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00192	89 45 d8	 mov	 DWORD PTR $T202998[ebp], eax
  00195	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0019c	83 7d d8 00	 cmp	 DWORD PTR $T202998[ebp], 0
  001a0	74 19		 je	 SHORT $L202999
  001a2	6a 00		 push	 0
  001a4	68 00 00 00 00	 push	 OFFSET FLAT:$SG202152
  001a9	68 88 00 00 00	 push	 136			; 00000088H
  001ae	8b 4d d8	 mov	 ecx, DWORD PTR $T202998[ebp]
  001b1	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  001b6	89 45 c0	 mov	 DWORD PTR tv130[ebp], eax
  001b9	eb 07		 jmp	 SHORT $L203000
$L202999:
  001bb	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$L203000:
  001c2	8b 55 c0	 mov	 edx, DWORD PTR tv130[ebp]
  001c5	89 55 dc	 mov	 DWORD PTR $T202997[ebp], edx
  001c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001cf	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  001d2	8b 4d dc	 mov	 ecx, DWORD PTR $T202997[ebp]
  001d5	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 30   : 	m_pTopLeftWnd = new CTranslucentDialog(IDD_TRANS_DLG, "");

  001d8	68 98 00 00 00	 push	 152			; 00000098H
  001dd	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  001e2	89 45 d0	 mov	 DWORD PTR $T203002[ebp], eax
  001e5	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  001ec	83 7d d0 00	 cmp	 DWORD PTR $T203002[ebp], 0
  001f0	74 19		 je	 SHORT $L203003
  001f2	6a 00		 push	 0
  001f4	68 00 00 00 00	 push	 OFFSET FLAT:$SG202157
  001f9	68 88 00 00 00	 push	 136			; 00000088H
  001fe	8b 4d d0	 mov	 ecx, DWORD PTR $T203002[ebp]
  00201	e8 00 00 00 00	 call	 ??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ; CTranslucentDialog::CTranslucentDialog
  00206	89 45 bc	 mov	 DWORD PTR tv141[ebp], eax
  00209	eb 07		 jmp	 SHORT $L203004
$L203003:
  0020b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$L203004:
  00212	8b 55 bc	 mov	 edx, DWORD PTR tv141[ebp]
  00215	89 55 d4	 mov	 DWORD PTR $T203001[ebp], edx
  00218	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0021f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00222	8b 4d d4	 mov	 ecx, DWORD PTR $T203001[ebp]
  00225	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 31   : 
; 32   : 	m_pTopLeftWnd->m_position = LEFT_TOP_CORNER;

  00228	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0022b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0022e	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 33   : 	m_pTopRightWnd->m_position = RIGHT_TOP_CORNER;

  00235	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00238	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0023b	c7 42 74 02 00
	00 00		 mov	 DWORD PTR [edx+116], 2

; 34   : 	m_pBottomLeftWnd->m_position = LEFT_BOTTOM_CORNER;

  00242	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00245	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00248	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1

; 35   : 	m_pBottomRightWnd->m_position = RIGHT_BOTTOM_CORNER;

  0024f	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00252	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00255	c7 40 74 03 00
	00 00		 mov	 DWORD PTR [eax+116], 3

; 36   : 
; 37   : 	m_pBottomLeftWnd->Create(IDD_TRANS_DLG,::AfxGetMainWindow());

  0025c	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00261	50		 push	 eax
  00262	68 88 00 00 00	 push	 136			; 00000088H
  00267	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0026d	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00270	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00273	8b 12		 mov	 edx, DWORD PTR [edx]
  00275	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]

; 38   : 	m_pBottomRightWnd->Create(IDD_TRANS_DLG,::AfxGetMainWindow());

  0027b	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00280	50		 push	 eax
  00281	68 88 00 00 00	 push	 136			; 00000088H
  00286	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00289	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0028c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0028f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00292	8b 11		 mov	 edx, DWORD PTR [ecx]
  00294	8b c8		 mov	 ecx, eax
  00296	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]

; 39   : 	m_pTopRightWnd->Create(IDD_TRANS_DLG,m_pBottomRightWnd);

  0029c	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0029f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002a2	51		 push	 ecx
  002a3	68 88 00 00 00	 push	 136			; 00000088H
  002a8	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  002ab	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002ae	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b1	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  002b4	8b 10		 mov	 edx, DWORD PTR [eax]
  002b6	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]

; 40   : 	m_pTopLeftWnd->Create(IDD_TRANS_DLG,m_pBottomRightWnd);

  002bc	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  002bf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002c2	51		 push	 ecx
  002c3	68 88 00 00 00	 push	 136			; 00000088H
  002c8	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  002cb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002ce	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d1	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002d4	8b 10		 mov	 edx, DWORD PTR [eax]
  002d6	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]

; 41   : 
; 42   : 	CWnd * pWnd = AfxGetMainWindow();

  002dc	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  002e1	89 45 f0	 mov	 DWORD PTR _pWnd$[ebp], eax

; 43   : 	m_pTopRightWnd->SetOwner(AfxGetMainWindow());

  002e4	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  002e9	50		 push	 eax
  002ea	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  002ed	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002f0	e8 00 00 00 00	 call	 ?SetOwner@CWnd@@QAEXPAV1@@Z ; CWnd::SetOwner

; 44   : 	m_curSubject = NULL;

  002f5	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f8	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 45   : 
; 46   : 	m_bUpdateView = false;

  002ff	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00302	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 47   : }

  00309	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0030c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0030f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00316	8b e5		 mov	 esp, ebp
  00318	5d		 pop	 ebp
  00319	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L203005:
  00015	8b 45 e8	 mov	 eax, DWORD PTR $T202990[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0001e	c3		 ret	 0
$L203006:
  0001f	8b 45 e0	 mov	 eax, DWORD PTR $T202994[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00028	c3		 ret	 0
$L203007:
  00029	8b 45 d8	 mov	 eax, DWORD PTR $T202998[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00032	c3		 ret	 0
$L203008:
  00033	8b 45 d0	 mov	 eax, DWORD PTR $T203002[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0003c	c3		 ret	 0
__ehhandler$??0CIrregularBorderMgr@@QAE@XZ:
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203010
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CIrregularBorderMgr@@QAE@XZ ENDP			; CIrregularBorderMgr::CIrregularBorderMgr
; Function compile flags: /Odt
_TEXT	SEGMENT
tv95 = -52						; size = 4
tv87 = -48						; size = 4
tv79 = -44						; size = 4
tv71 = -40						; size = 4
_this$ = -36						; size = 4
$T203027 = -32						; size = 4
$T203026 = -28						; size = 4
$T203023 = -24						; size = 4
$T203022 = -20						; size = 4
$T203019 = -16						; size = 4
$T203018 = -12						; size = 4
$T203015 = -8						; size = 4
$T203014 = -4						; size = 4
??1CIrregularBorderMgr@@QAE@XZ PROC NEAR		; CIrregularBorderMgr::~CIrregularBorderMgr
; _this$ = ecx

; 50   : {

  00320	55		 push	 ebp
  00321	8b ec		 mov	 ebp, esp
  00323	83 ec 34	 sub	 esp, 52			; 00000034H
  00326	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 	delete m_pBottomLeftWnd;

  00329	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0032c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0032f	89 4d f8	 mov	 DWORD PTR $T203015[ebp], ecx
  00332	8b 55 f8	 mov	 edx, DWORD PTR $T203015[ebp]
  00335	89 55 fc	 mov	 DWORD PTR $T203014[ebp], edx
  00338	83 7d fc 00	 cmp	 DWORD PTR $T203014[ebp], 0
  0033c	74 12		 je	 SHORT $L203016
  0033e	6a 01		 push	 1
  00340	8b 45 fc	 mov	 eax, DWORD PTR $T203014[ebp]
  00343	8b 10		 mov	 edx, DWORD PTR [eax]
  00345	8b 4d fc	 mov	 ecx, DWORD PTR $T203014[ebp]
  00348	ff 52 04	 call	 DWORD PTR [edx+4]
  0034b	89 45 d8	 mov	 DWORD PTR tv71[ebp], eax
  0034e	eb 07		 jmp	 SHORT $L203017
$L203016:
  00350	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L203017:

; 52   : 	delete m_pBottomRightWnd;

  00357	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0035a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0035d	89 4d f0	 mov	 DWORD PTR $T203019[ebp], ecx
  00360	8b 55 f0	 mov	 edx, DWORD PTR $T203019[ebp]
  00363	89 55 f4	 mov	 DWORD PTR $T203018[ebp], edx
  00366	83 7d f4 00	 cmp	 DWORD PTR $T203018[ebp], 0
  0036a	74 12		 je	 SHORT $L203020
  0036c	6a 01		 push	 1
  0036e	8b 45 f4	 mov	 eax, DWORD PTR $T203018[ebp]
  00371	8b 10		 mov	 edx, DWORD PTR [eax]
  00373	8b 4d f4	 mov	 ecx, DWORD PTR $T203018[ebp]
  00376	ff 52 04	 call	 DWORD PTR [edx+4]
  00379	89 45 d4	 mov	 DWORD PTR tv79[ebp], eax
  0037c	eb 07		 jmp	 SHORT $L203021
$L203020:
  0037e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$L203021:

; 53   : 	delete m_pTopRightWnd;

  00385	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00388	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0038b	89 4d e8	 mov	 DWORD PTR $T203023[ebp], ecx
  0038e	8b 55 e8	 mov	 edx, DWORD PTR $T203023[ebp]
  00391	89 55 ec	 mov	 DWORD PTR $T203022[ebp], edx
  00394	83 7d ec 00	 cmp	 DWORD PTR $T203022[ebp], 0
  00398	74 12		 je	 SHORT $L203024
  0039a	6a 01		 push	 1
  0039c	8b 45 ec	 mov	 eax, DWORD PTR $T203022[ebp]
  0039f	8b 10		 mov	 edx, DWORD PTR [eax]
  003a1	8b 4d ec	 mov	 ecx, DWORD PTR $T203022[ebp]
  003a4	ff 52 04	 call	 DWORD PTR [edx+4]
  003a7	89 45 d0	 mov	 DWORD PTR tv87[ebp], eax
  003aa	eb 07		 jmp	 SHORT $L203025
$L203024:
  003ac	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L203025:

; 54   : 	delete m_pTopLeftWnd;

  003b3	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  003b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003b9	89 4d e0	 mov	 DWORD PTR $T203027[ebp], ecx
  003bc	8b 55 e0	 mov	 edx, DWORD PTR $T203027[ebp]
  003bf	89 55 e4	 mov	 DWORD PTR $T203026[ebp], edx
  003c2	83 7d e4 00	 cmp	 DWORD PTR $T203026[ebp], 0
  003c6	74 12		 je	 SHORT $L203028
  003c8	6a 01		 push	 1
  003ca	8b 45 e4	 mov	 eax, DWORD PTR $T203026[ebp]
  003cd	8b 10		 mov	 edx, DWORD PTR [eax]
  003cf	8b 4d e4	 mov	 ecx, DWORD PTR $T203026[ebp]
  003d2	ff 52 04	 call	 DWORD PTR [edx+4]
  003d5	89 45 cc	 mov	 DWORD PTR tv95[ebp], eax
  003d8	eb 07		 jmp	 SHORT $L202161
$L203028:
  003da	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$L202161:

; 55   : }

  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	c3		 ret	 0
??1CIrregularBorderMgr@@QAE@XZ ENDP			; CIrregularBorderMgr::~CIrregularBorderMgr
_TEXT	ENDS
PUBLIC	?LoadSubject@CIrregularBorderMgr@@QAEXXZ	; CIrregularBorderMgr::LoadSubject
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LoadSubject@CIrregularBorderMgr@@QAEXXZ PROC NEAR	; CIrregularBorderMgr::LoadSubject
; _this$ = ecx

; 58   : {

  003f0	55		 push	 ebp
  003f1	8b ec		 mov	 ebp, esp
  003f3	51		 push	 ecx
  003f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : }

  003f7	8b e5		 mov	 esp, ebp
  003f9	5d		 pop	 ebp
  003fa	c3		 ret	 0
?LoadSubject@CIrregularBorderMgr@@QAEXXZ ENDP		; CIrregularBorderMgr::LoadSubject
_TEXT	ENDS
PUBLIC	?DeletePngImage@CIrregularBorderMgr@@QAEXXZ	; CIrregularBorderMgr::DeletePngImage
PUBLIC	?DeleteImage@CTranslucentDialog@@QAEXXZ		; CTranslucentDialog::DeleteImage
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeletePngImage@CIrregularBorderMgr@@QAEXXZ PROC NEAR	; CIrregularBorderMgr::DeletePngImage
; _this$ = ecx

; 62   : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	51		 push	 ecx
  00404	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	m_pBottomLeftWnd->DeleteImage();

  00407	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0040a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0040d	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 64   : 	m_pBottomRightWnd->DeleteImage();

  00412	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00415	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00418	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 65   : 	m_pTopLeftWnd->DeleteImage();

  0041d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00420	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00423	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 66   : 	m_pTopRightWnd->DeleteImage();

  00428	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0042e	e8 00 00 00 00	 call	 ?DeleteImage@CTranslucentDialog@@QAEXXZ ; CTranslucentDialog::DeleteImage

; 67   : }

  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c3		 ret	 0
?DeletePngImage@CIrregularBorderMgr@@QAEXXZ ENDP	; CIrregularBorderMgr::DeletePngImage
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\translucentdialog.h
_TEXT	ENDS
;	COMDAT ?DeleteImage@CTranslucentDialog@@QAEXXZ
_TEXT	SEGMENT
tv73 = -16						; size = 4
_this$ = -12						; size = 4
$T203034 = -8						; size = 4
$T203033 = -4						; size = 4
?DeleteImage@CTranslucentDialog@@QAEXXZ PROC NEAR	; CTranslucentDialog::DeleteImage, COMDAT
; _this$ = ecx

; 33   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 		if( m_pImage != NULL)

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00013	74 30		 je	 SHORT $L197465

; 35   : 			delete m_pImage; 

  00015	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001e	89 55 f8	 mov	 DWORD PTR $T203034[ebp], edx
  00021	8b 45 f8	 mov	 eax, DWORD PTR $T203034[ebp]
  00024	89 45 fc	 mov	 DWORD PTR $T203033[ebp], eax
  00027	83 7d fc 00	 cmp	 DWORD PTR $T203033[ebp], 0
  0002b	74 11		 je	 SHORT $L203035
  0002d	6a 01		 push	 1
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR $T203033[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T203033[ebp]
  00037	ff 12		 call	 DWORD PTR [edx]
  00039	89 45 f0	 mov	 DWORD PTR tv73[ebp], eax
  0003c	eb 07		 jmp	 SHORT $L197465
$L203035:
  0003e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L197465:

; 36   : 		m_pImage = NULL;

  00045	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0

; 37   : 	};

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?DeleteImage@CTranslucentDialog@@QAEXXZ ENDP		; CTranslucentDialog::DeleteImage
_TEXT	ENDS
PUBLIC	?ShowTransDlg@CIrregularBorderMgr@@QAEX_N@Z	; CIrregularBorderMgr::ShowTransDlg
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\irregularbordermgr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nShow$ = -4						; size = 4
_bShow$ = 8						; size = 1
?ShowTransDlg@CIrregularBorderMgr@@QAEX_N@Z PROC NEAR	; CIrregularBorderMgr::ShowTransDlg
; _this$ = ecx

; 70   : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 08	 sub	 esp, 8
  00446	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	int nShow = bShow? SW_SHOWNOACTIVATE: SW_HIDE;

  00449	0f b6 45 08	 movzx	 eax, BYTE PTR _bShow$[ebp]
  0044d	f7 d8		 neg	 eax
  0044f	1b c0		 sbb	 eax, eax
  00451	83 e0 04	 and	 eax, 4
  00454	89 45 fc	 mov	 DWORD PTR _nShow$[ebp], eax

; 72   : 
; 73   : 	m_pTopLeftWnd->ShowWindow(m_pTopLeftWnd->m_pImage ? nShow: SW_HIDE);

  00457	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0045a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0045d	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00463	f7 d8		 neg	 eax
  00465	1b c0		 sbb	 eax, eax
  00467	23 45 fc	 and	 eax, DWORD PTR _nShow$[ebp]
  0046a	50		 push	 eax
  0046b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0046e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00471	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 74   : 	m_pTopRightWnd->ShowWindow(m_pTopRightWnd->m_pImage ? nShow: SW_HIDE);

  00476	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00479	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0047c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00482	f7 d9		 neg	 ecx
  00484	1b c9		 sbb	 ecx, ecx
  00486	23 4d fc	 and	 ecx, DWORD PTR _nShow$[ebp]
  00489	51		 push	 ecx
  0048a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0048d	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00490	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 75   : 	m_pBottomRightWnd->ShowWindow(m_pBottomRightWnd->m_pImage ? nShow: SW_HIDE);

  00495	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00498	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0049b	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  004a1	f7 da		 neg	 edx
  004a3	1b d2		 sbb	 edx, edx
  004a5	23 55 fc	 and	 edx, DWORD PTR _nShow$[ebp]
  004a8	52		 push	 edx
  004a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ac	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  004af	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 76   : 	m_pBottomLeftWnd->ShowWindow(m_pBottomLeftWnd->m_pImage ? nShow: SW_HIDE);

  004b4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004b7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  004ba	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  004c0	f7 d8		 neg	 eax
  004c2	1b c0		 sbb	 eax, eax
  004c4	23 45 fc	 and	 eax, DWORD PTR _nShow$[ebp]
  004c7	50		 push	 eax
  004c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004cb	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  004ce	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 77   : }

  004d3	8b e5		 mov	 esp, ebp
  004d5	5d		 pop	 ebp
  004d6	c2 04 00	 ret	 4
?ShowTransDlg@CIrregularBorderMgr@@QAEX_N@Z ENDP	; CIrregularBorderMgr::ShowTransDlg
_TEXT	ENDS
PUBLIC	?SetMainWnd@CIrregularBorderMgr@@QAEXPAVCWnd@@@Z ; CIrregularBorderMgr::SetMainWnd
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pWnd$ = 8						; size = 4
?SetMainWnd@CIrregularBorderMgr@@QAEXPAVCWnd@@@Z PROC NEAR ; CIrregularBorderMgr::SetMainWnd
; _this$ = ecx

; 80   : {

  004e0	55		 push	 ebp
  004e1	8b ec		 mov	 ebp, esp
  004e3	51		 push	 ecx
  004e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : }

  004e7	8b e5		 mov	 esp, ebp
  004e9	5d		 pop	 ebp
  004ea	c2 04 00	 ret	 4
?SetMainWnd@CIrregularBorderMgr@@QAEXPAVCWnd@@@Z ENDP	; CIrregularBorderMgr::SetMainWnd
_TEXT	ENDS
PUBLIC	?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
PUBLIC	??0Image@Gdiplus@@QAE@PB_WH@Z			; Gdiplus::Image::Image
PUBLIC	??1Image@Gdiplus@@UAE@XZ			; Gdiplus::Image::~Image
PUBLIC	?Clone@Image@Gdiplus@@UAEPAV12@XZ		; Gdiplus::Image::Clone
PUBLIC	?GetWidth@Image@Gdiplus@@QAEIXZ			; Gdiplus::Image::GetWidth
PUBLIC	?GetHeight@Image@Gdiplus@@QAEIXZ		; Gdiplus::Image::GetHeight
PUBLIC	?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ ; Gdiplus::Image::GetLastStatus
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__chkstk:NEAR
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T203051 DD	0ffffffffH
	DD	FLAT:$L203044
	DD	00H
	DD	FLAT:$L203045
$T203047 DD	019930520H
	DD	02H
	DD	FLAT:$T203051
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
$T203043 = -4152					; size = 4
$T203042 = -4148					; size = 4
_image$ = -4144						; size = 16
_lLen$ = -4128						; size = 4
_szWidePath$ = -4124					; size = 4096
__$ArrayPad$ = -24					; size = 4
_h$ = -20						; size = 4
_w$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_path$ = 8						; size = 28
?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CloneImage

; 84   : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	6a ff		 push	 -1
  004f5	68 00 00 00 00	 push	 __ehhandler$?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  004fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00500	50		 push	 eax
  00501	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00508	b8 2c 10 00 00	 mov	 eax, 4140		; 0000102cH
  0050d	e8 00 00 00 00	 call	 __chkstk
  00512	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00517	89 45 e8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0051a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 85   : 	WCHAR szWidePath[2048];   
; 86   : 	long lLen = MultiByteToWideChar(CP_ACP,0,path.c_str(),path.length(),szWidePath,sizeof(szWidePath)); 

  00521	68 00 10 00 00	 push	 4096			; 00001000H
  00526	8d 85 e4 ef ff
	ff		 lea	 eax, DWORD PTR _szWidePath$[ebp]
  0052c	50		 push	 eax
  0052d	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  00530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  00536	50		 push	 eax
  00537	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  0053a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00540	50		 push	 eax
  00541	6a 00		 push	 0
  00543	6a 00		 push	 0
  00545	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0054b	89 85 e0 ef ff
	ff		 mov	 DWORD PTR _lLen$[ebp], eax

; 87   : 	szWidePath[lLen] = '\0';     

  00551	8b 8d e0 ef ff
	ff		 mov	 ecx, DWORD PTR _lLen$[ebp]
  00557	66 c7 84 4d e4
	ef ff ff 00 00	 mov	 WORD PTR _szWidePath$[ebp+ecx*2], 0

; 88   : 
; 89   : 	Image image(szWidePath);

  00561	6a 00		 push	 0
  00563	8d 95 e4 ef ff
	ff		 lea	 edx, DWORD PTR _szWidePath$[ebp]
  00569	52		 push	 edx
  0056a	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  00570	e8 00 00 00 00	 call	 ??0Image@Gdiplus@@QAE@PB_WH@Z ; Gdiplus::Image::Image
  00575	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 90   : 	if(image.GetLastStatus() != S_OK)

  00579	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  0057f	e8 00 00 00 00	 call	 ?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ ; Gdiplus::Image::GetLastStatus
  00584	85 c0		 test	 eax, eax
  00586	74 31		 je	 SHORT $L202192

; 91   : 	{
; 92   : 		return NULL;

  00588	c7 85 cc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR $T203042[ebp], 0
  00592	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00596	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  0059c	e8 00 00 00 00	 call	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
  005a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005a8	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  005ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  005b1	8b 85 cc ef ff
	ff		 mov	 eax, DWORD PTR $T203042[ebp]
  005b7	eb 52		 jmp	 SHORT $L202187
$L202192:

; 93   : 	}
; 94   : 	int w = image.GetWidth();

  005b9	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  005bf	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  005c4	89 45 f0	 mov	 DWORD PTR _w$[ebp], eax

; 95   : 	int h = image.GetHeight(); 

  005c7	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  005cd	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  005d2	89 45 ec	 mov	 DWORD PTR _h$[ebp], eax

; 96   : 	TRACE("w: %d ,h: %d, %s\r\n", w,h,path.c_str());
; 97   : 	return image.Clone();

  005d5	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  005db	e8 00 00 00 00	 call	 ?Clone@Image@Gdiplus@@UAEPAV12@XZ ; Gdiplus::Image::Clone
  005e0	89 85 c8 ef ff
	ff		 mov	 DWORD PTR $T203043[ebp], eax
  005e6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005ea	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  005f0	e8 00 00 00 00	 call	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
  005f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005fc	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  005ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00605	8b 85 c8 ef ff
	ff		 mov	 eax, DWORD PTR $T203043[ebp]
$L202187:

; 98   : }

  0060b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0060e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00615	8b 4d e8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00618	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0061d	8b e5		 mov	 esp, ebp
  0061f	5d		 pop	 ebp
  00620	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L203044:
  00047	8d 4d 08	 lea	 ecx, DWORD PTR _path$[ebp]
  0004a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203045:
  00050	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR _image$[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
__ehhandler$?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203047
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CloneImage
PUBLIC	?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z	; CIrregularBorderMgr::InitTransDlg
PUBLIC	?OnMove@CIrregularBorderMgr@@QAEXHH@Z		; CIrregularBorderMgr::OnMove
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:NEAR
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:NEAR
EXTRN	?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z:NEAR ; CTranslucentDialog::UpdatePosition
EXTRN	?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:NEAR ; YL_FileInfo::IsValid
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
xdata$x	SEGMENT
$T203122 DD	0ffffffffH
	DD	FLAT:$L203084
	DD	00H
	DD	FLAT:$L203085
	DD	0ffffffffH
	DD	FLAT:$L203086
	DD	02H
	DD	FLAT:$L203087
	DD	0ffffffffH
	DD	FLAT:$L203087
	DD	04H
	DD	FLAT:$L203088
	DD	05H
	DD	FLAT:$L203089
	DD	06H
	DD	FLAT:$L203090
	DD	04H
	DD	FLAT:$L203090
	DD	08H
	DD	FLAT:$L203089
	DD	08H
	DD	FLAT:$L203091
	DD	0aH
	DD	FLAT:$L203092
	DD	08H
	DD	FLAT:$L203094
	DD	0cH
	DD	FLAT:$L203095
	DD	0dH
	DD	FLAT:$L203096
	DD	08H
	DD	FLAT:$L203097
	DD	0fH
	DD	FLAT:$L203098
	DD	08H
	DD	FLAT:$L203099
	DD	011H
	DD	FLAT:$L203100
	DD	012H
	DD	FLAT:$L203101
	DD	08H
	DD	FLAT:$L203102
	DD	014H
	DD	FLAT:$L203103
	DD	08H
	DD	FLAT:$L203105
	DD	016H
	DD	FLAT:$L203106
	DD	017H
	DD	FLAT:$L203107
	DD	08H
	DD	FLAT:$L203108
	DD	019H
	DD	FLAT:$L203109
	DD	08H
	DD	FLAT:$L203110
	DD	01bH
	DD	FLAT:$L203111
	DD	01cH
	DD	FLAT:$L203112
	DD	08H
	DD	FLAT:$L203114
	DD	01eH
	DD	FLAT:$L203115
	DD	01fH
	DD	FLAT:$L203116
$T203119 DD	019930520H
	DD	021H
	DD	FLAT:$T203122
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv596 = -960						; size = 4
tv595 = -956						; size = 4
tv593 = -952						; size = 4
tv179 = -948						; size = 4
tv591 = -944						; size = 4
tv288 = -940						; size = 4
tv589 = -936						; size = 4
tv295 = -932						; size = 4
tv587 = -928						; size = 4
tv586 = -924						; size = 4
tv584 = -920						; size = 4
tv330 = -916						; size = 4
tv582 = -912						; size = 4
tv372 = -908						; size = 4
tv580 = -904						; size = 4
tv377 = -900						; size = 4
tv576 = -896						; size = 4
tv358 = -892						; size = 4
tv572 = -888						; size = 4
tv571 = -884						; size = 4
tv567 = -880						; size = 4
tv214 = -876						; size = 4
tv565 = -872						; size = 4
tv256 = -868						; size = 4
tv563 = -864						; size = 4
tv261 = -860						; size = 4
tv559 = -856						; size = 4
tv242 = -852						; size = 4
tv555 = -848						; size = 4
tv554 = -844						; size = 4
tv549 = -840						; size = 4
tv78 = -836						; size = 4
tv547 = -832						; size = 4
tv89 = -828						; size = 4
tv543 = -824						; size = 4
tv83 = -820						; size = 4
tv66 = -816						; size = 4
_this$ = -812						; size = 4
$T203083 = -808						; size = 4
$T203082 = -804						; size = 28
$T203081 = -776						; size = 28
$T203080 = -748						; size = 28
$T203079 = -720						; size = 4
$T203078 = -716						; size = 28
$T203077 = -688						; size = 28
$T203076 = -660						; size = 28
$T203075 = -632						; size = 28
$T203074 = -604						; size = 28
$T203073 = -576						; size = 28
$T203072 = -548						; size = 28
$T203071 = -520						; size = 4
$T203070 = -516						; size = 28
$T203069 = -488						; size = 28
$T203068 = -460						; size = 28
$T203067 = -432						; size = 28
$T203066 = -404						; size = 28
$T203065 = -376						; size = 28
$T203064 = -348						; size = 28
$T203063 = -320						; size = 28
$T203062 = -292						; size = 28
$T203061 = -264						; size = 4
$T203060 = -260						; size = 28
$T203059 = -232						; size = 28
$T203058 = -204						; size = 28
$T203057 = -176						; size = 28
$T203056 = -148						; size = 4
$T203055 = -144						; size = 28
$T203054 = -116						; size = 28
_strLog$202243 = -88					; size = 4
_strLog$202223 = -84					; size = 4
_path$202209 = -80					; size = 28
_pngpath$202212 = -52					; size = 28
__$ArrayPad$ = -24					; size = 4
_pCurSubject$ = -20					; size = 4
_pSkin$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_bMustInit$ = 8						; size = 4
?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z PROC NEAR	; CIrregularBorderMgr::InitTransDlg
; _this$ = ecx

; 101  : {

  00630	55		 push	 ebp
  00631	8b ec		 mov	 ebp, esp
  00633	6a ff		 push	 -1
  00635	68 00 00 00 00	 push	 __ehhandler$?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z
  0063a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00640	50		 push	 eax
  00641	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00648	81 ec b4 03 00
	00		 sub	 esp, 948		; 000003b4H
  0064e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00653	89 45 e8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00656	89 8d d4 fc ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	ISkinMgr *pSkin = AfxGetUIManager()->UIGetSkinMgr();

  0065c	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  00661	89 85 d0 fc ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00667	8b 85 d0 fc ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  0066d	8b 10		 mov	 edx, DWORD PTR [eax]
  0066f	8b 8d d0 fc ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  00675	ff 52 28	 call	 DWORD PTR [edx+40]
  00678	89 45 f0	 mov	 DWORD PTR _pSkin$[ebp], eax

; 103  : 	OneSubject *pCurSubject = pSkin->GetCurSubject();

  0067b	8b 45 f0	 mov	 eax, DWORD PTR _pSkin$[ebp]
  0067e	8b 10		 mov	 edx, DWORD PTR [eax]
  00680	8b 4d f0	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  00683	ff 52 28	 call	 DWORD PTR [edx+40]
  00686	89 45 ec	 mov	 DWORD PTR _pCurSubject$[ebp], eax

; 104  : 
; 105  : 	if(pCurSubject != m_curSubject || bMustInit)

  00689	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0068f	8b 4d ec	 mov	 ecx, DWORD PTR _pCurSubject$[ebp]
  00692	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00695	75 0a		 jne	 SHORT $L202204
  00697	83 7d 08 00	 cmp	 DWORD PTR _bMustInit$[ebp], 0
  0069b	0f 84 74 0a 00
	00		 je	 $L202200
$L202204:

; 106  : 	{
; 107  : 		LogUserActMsg(STR_USER_CLICK, "Enter InitTransDlg");

  006a1	68 00 00 00 00	 push	 OFFSET FLAT:$SG202207
  006a6	8d 4d 8c	 lea	 ecx, DWORD PTR $T203054[ebp]
  006a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  006af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  006b6	68 00 00 00 00	 push	 OFFSET FLAT:$SG202208
  006bb	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T203055[ebp]
  006c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  006c7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  006cb	8d 55 8c	 lea	 edx, DWORD PTR $T203054[ebp]
  006ce	52		 push	 edx
  006cf	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T203055[ebp]
  006d5	50		 push	 eax
  006d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  006dc	83 c4 08	 add	 esp, 8
  006df	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  006e3	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T203055[ebp]
  006e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  006ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006f6	8d 4d 8c	 lea	 ecx, DWORD PTR $T203054[ebp]
  006f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 108  : 		m_curSubject = pCurSubject;

  006ff	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00705	8b 55 ec	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  00708	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 109  : 
; 110  : 		string path = pSkin->GetSkinPath();

  0070b	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T203056[ebp]
  00711	50		 push	 eax
  00712	8b 4d f0	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  00715	8b 11		 mov	 edx, DWORD PTR [ecx]
  00717	8b 4d f0	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  0071a	ff 52 40	 call	 DWORD PTR [edx+64]
  0071d	89 85 cc fc ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
  00723	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  00729	89 85 c8 fc ff
	ff		 mov	 DWORD PTR tv543[ebp], eax
  0072f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00736	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR tv543[ebp]
  0073c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00742	50		 push	 eax
  00743	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00746	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0074c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00750	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T203056[ebp]
  00756	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 111  : 
; 112  : 		DeletePngImage();

  0075c	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00762	e8 00 00 00 00	 call	 ?DeletePngImage@CIrregularBorderMgr@@QAEXXZ ; CIrregularBorderMgr::DeletePngImage

; 113  : 		if(m_curSubject == NULL)

  00767	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0076d	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00771	75 55		 jne	 SHORT $L202211

; 114  : 		{
; 115  : 			m_pTopLeftWnd->ShowWindow(SW_HIDE);

  00773	6a 00		 push	 0
  00775	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0077b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0077e	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 116  : 			m_pTopRightWnd->ShowWindow(SW_HIDE);

  00783	6a 00		 push	 0
  00785	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0078b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0078e	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 117  : 			m_pBottomRightWnd->ShowWindow(SW_HIDE);

  00793	6a 00		 push	 0
  00795	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0079b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0079e	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 118  : 			m_pBottomLeftWnd->ShowWindow(SW_HIDE);

  007a3	6a 00		 push	 0
  007a5	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  007ab	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  007ae	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 119  : 			return;

  007b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  007ba	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  007bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  007c3	e9 4d 09 00 00	 jmp	 $L202200
$L202211:

; 120  : 		}
; 121  : 		string pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\topleft.png";

  007c8	68 00 00 00 00	 push	 OFFSET FLAT:$SG202217
  007cd	8d 45 b0	 lea	 eax, DWORD PTR _path$202209[ebp]
  007d0	50		 push	 eax
  007d1	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T203057[ebp]
  007d7	51		 push	 ecx
  007d8	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  007dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  007e0	89 85 c4 fc ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  007e6	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR tv89[ebp]
  007ec	89 95 c0 fc ff
	ff		 mov	 DWORD PTR tv547[ebp], edx
  007f2	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  007f6	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  007fc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  007ff	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00802	51		 push	 ecx
  00803	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR tv547[ebp]
  00809	52		 push	 edx
  0080a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR $T203058[ebp]
  00810	50		 push	 eax
  00811	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00816	83 c4 0c	 add	 esp, 12			; 0000000cH
  00819	89 85 bc fc ff
	ff		 mov	 DWORD PTR tv78[ebp], eax
  0081f	8b 8d bc fc ff
	ff		 mov	 ecx, DWORD PTR tv78[ebp]
  00825	89 8d b8 fc ff
	ff		 mov	 DWORD PTR tv549[ebp], ecx
  0082b	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0082f	68 00 00 00 00	 push	 OFFSET FLAT:$SG202216
  00834	8b 95 b8 fc ff
	ff		 mov	 edx, DWORD PTR tv549[ebp]
  0083a	52		 push	 edx
  0083b	8d 45 cc	 lea	 eax, DWORD PTR _pngpath$202212[ebp]
  0083e	50		 push	 eax
  0083f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00844	83 c4 0c	 add	 esp, 12			; 0000000cH
  00847	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0084b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T203058[ebp]
  00851	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00857	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0085b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T203057[ebp]
  00861	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 122  : 		LogUserActMsg(STR_USER_CLICK, pngpath.c_str());

  00867	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  0086a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00870	50		 push	 eax
  00871	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T203059[ebp]
  00877	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0087d	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00881	68 00 00 00 00	 push	 OFFSET FLAT:$SG202220
  00886	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T203060[ebp]
  0088c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00892	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00896	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T203059[ebp]
  0089c	51		 push	 ecx
  0089d	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T203060[ebp]
  008a3	52		 push	 edx
  008a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  008aa	83 c4 08	 add	 esp, 8
  008ad	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  008b1	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T203060[ebp]
  008b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  008bd	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  008c1	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T203059[ebp]
  008c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 123  : 		if( YL_FileInfo::IsValid(pngpath) && pCurSubject->ptLeftTop.x != -1000)

  008cd	8d 45 cc	 lea	 eax, DWORD PTR _pngpath$202212[ebp]
  008d0	50		 push	 eax
  008d1	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  008d6	83 c4 04	 add	 esp, 4
  008d9	0f b6 c8	 movzx	 ecx, al
  008dc	85 c9		 test	 ecx, ecx
  008de	0f 84 57 01 00
	00		 je	 $L202221
  008e4	8b 55 ec	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  008e7	81 7a 70 18 fc
	ff ff		 cmp	 DWORD PTR [edx+112], -1000 ; fffffc18H
  008ee	0f 84 47 01 00
	00		 je	 $L202221

; 124  : 		{
; 125  : 			m_pTopLeftWnd->ShowWindow(SW_SHOWNOACTIVATE);

  008f4	6a 04		 push	 4
  008f6	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  008fc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008ff	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 126  : 			m_pTopLeftWnd->m_pImage = CloneImage(pngpath.c_str());

  00904	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00907	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0090d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00910	8b cc		 mov	 ecx, esp
  00912	89 a5 f8 fe ff
	ff		 mov	 DWORD PTR $T203061[ebp], esp
  00918	50		 push	 eax
  00919	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0091f	89 85 b4 fc ff
	ff		 mov	 DWORD PTR tv554[ebp], eax
  00925	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  0092a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0092d	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv555[ebp], eax
  00933	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00939	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0093c	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR tv555[ebp]
  00942	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 127  : 			CString strLog;

  00948	8d 4d ac	 lea	 ecx, DWORD PTR _strLog$202223[ebp]
  0094b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00951	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 128  : 			strLog.Format("cloneTopLeft: %d ,h: %d, %s\r\n", m_pTopLeftWnd->m_pImage->GetWidth(),m_pTopLeftWnd->m_pImage->GetHeight(),path.c_str());

  00955	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00958	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0095e	50		 push	 eax
  0095f	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00965	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00968	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0096e	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  00973	50		 push	 eax
  00974	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0097a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0097d	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  00983	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  00988	50		 push	 eax
  00989	68 00 00 00 00	 push	 OFFSET FLAT:$SG202224
  0098e	8d 55 ac	 lea	 edx, DWORD PTR _strLog$202223[ebp]
  00991	52		 push	 edx
  00992	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00998	83 c4 14	 add	 esp, 20			; 00000014H

; 129  : 			LogUserActMsg(STR_USER_CLICK, string(strLog));

  0099b	68 00 00 00 00	 push	 OFFSET FLAT:$SG202227
  009a0	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T203063[ebp]
  009a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  009ac	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  009b0	8d 4d ac	 lea	 ecx, DWORD PTR _strLog$202223[ebp]
  009b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  009b9	50		 push	 eax
  009ba	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T203062[ebp]
  009c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  009c6	89 85 ac fc ff
	ff		 mov	 DWORD PTR tv242[ebp], eax
  009cc	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR tv242[ebp]
  009d2	89 85 a8 fc ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
  009d8	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  009dc	8b 8d a8 fc ff
	ff		 mov	 ecx, DWORD PTR tv559[ebp]
  009e2	51		 push	 ecx
  009e3	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR $T203063[ebp]
  009e9	52		 push	 edx
  009ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  009f0	83 c4 08	 add	 esp, 8
  009f3	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  009f7	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T203062[ebp]
  009fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00a03	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00a07	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T203063[ebp]
  00a0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 130  : 			m_pTopLeftWnd->UpdatePosition( pCurSubject->ptLeftTop);

  00a13	8b 45 ec	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  00a16	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00a19	51		 push	 ecx
  00a1a	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00a1d	52		 push	 edx
  00a1e	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00a24	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00a27	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 131  : 		}else

  00a2c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00a30	8d 4d ac	 lea	 ecx, DWORD PTR _strLog$202223[ebp]
  00a33	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00a39	eb 71		 jmp	 SHORT $L202228
$L202221:

; 132  : 		{
; 133  : 			m_pTopLeftWnd->ShowWindow(SW_HIDE);

  00a3b	6a 00		 push	 0
  00a3d	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a43	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00a46	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 134  : 			LogUserActMsg(STR_USER_CLICK, "TopLeft hide");

  00a4b	68 00 00 00 00	 push	 OFFSET FLAT:$SG202231
  00a50	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T203064[ebp]
  00a56	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00a5c	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00a60	68 00 00 00 00	 push	 OFFSET FLAT:$SG202232
  00a65	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T203065[ebp]
  00a6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00a71	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00a75	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR $T203064[ebp]
  00a7b	52		 push	 edx
  00a7c	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR $T203065[ebp]
  00a82	50		 push	 eax
  00a83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00a89	83 c4 08	 add	 esp, 8
  00a8c	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00a90	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T203065[ebp]
  00a96	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00a9c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00aa0	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T203064[ebp]
  00aa6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L202228:

; 135  : 		}
; 136  : 
; 137  : 		pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\topright.png";

  00aac	68 00 00 00 00	 push	 OFFSET FLAT:$SG202237
  00ab1	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00ab4	51		 push	 ecx
  00ab5	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR $T203066[ebp]
  00abb	52		 push	 edx
  00abc	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00ac1	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ac4	89 85 a4 fc ff
	ff		 mov	 DWORD PTR tv261[ebp], eax
  00aca	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR tv261[ebp]
  00ad0	89 85 a0 fc ff
	ff		 mov	 DWORD PTR tv563[ebp], eax
  00ad6	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00ada	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ae0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00ae3	83 c2 1c	 add	 edx, 28			; 0000001cH
  00ae6	52		 push	 edx
  00ae7	8b 85 a0 fc ff
	ff		 mov	 eax, DWORD PTR tv563[ebp]
  00aed	50		 push	 eax
  00aee	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T203067[ebp]
  00af4	51		 push	 ecx
  00af5	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00afa	83 c4 0c	 add	 esp, 12			; 0000000cH
  00afd	89 85 9c fc ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  00b03	8b 95 9c fc ff
	ff		 mov	 edx, DWORD PTR tv256[ebp]
  00b09	89 95 98 fc ff
	ff		 mov	 DWORD PTR tv565[ebp], edx
  00b0f	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00b13	68 00 00 00 00	 push	 OFFSET FLAT:$SG202236
  00b18	8b 85 98 fc ff
	ff		 mov	 eax, DWORD PTR tv565[ebp]
  00b1e	50		 push	 eax
  00b1f	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T203068[ebp]
  00b25	51		 push	 ecx
  00b26	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00b2b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b2e	89 85 94 fc ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  00b34	8b 95 94 fc ff
	ff		 mov	 edx, DWORD PTR tv214[ebp]
  00b3a	89 95 90 fc ff
	ff		 mov	 DWORD PTR tv567[ebp], edx
  00b40	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  00b44	8b 85 90 fc ff
	ff		 mov	 eax, DWORD PTR tv567[ebp]
  00b4a	50		 push	 eax
  00b4b	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00b4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00b54	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00b58	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T203068[ebp]
  00b5e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00b64	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00b68	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T203067[ebp]
  00b6e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00b74	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00b78	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T203066[ebp]
  00b7e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 138  : 		LogUserActMsg(STR_USER_CLICK, pngpath.c_str());

  00b84	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00b87	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00b8d	50		 push	 eax
  00b8e	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T203069[ebp]
  00b94	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00b9a	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00b9e	68 00 00 00 00	 push	 OFFSET FLAT:$SG202240
  00ba3	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR $T203070[ebp]
  00ba9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00baf	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00bb3	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T203069[ebp]
  00bb9	51		 push	 ecx
  00bba	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR $T203070[ebp]
  00bc0	52		 push	 edx
  00bc1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00bc7	83 c4 08	 add	 esp, 8
  00bca	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00bce	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR $T203070[ebp]
  00bd4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00bda	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00bde	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T203069[ebp]
  00be4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 139  : 		if( YL_FileInfo::IsValid(pngpath)&& pCurSubject->ptRightTop.x != -1000)

  00bea	8d 45 cc	 lea	 eax, DWORD PTR _pngpath$202212[ebp]
  00bed	50		 push	 eax
  00bee	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  00bf3	83 c4 04	 add	 esp, 4
  00bf6	0f b6 c8	 movzx	 ecx, al
  00bf9	85 c9		 test	 ecx, ecx
  00bfb	0f 84 57 01 00
	00		 je	 $L202241
  00c01	8b 55 ec	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  00c04	81 7a 78 18 fc
	ff ff		 cmp	 DWORD PTR [edx+120], -1000 ; fffffc18H
  00c0b	0f 84 47 01 00
	00		 je	 $L202241

; 140  : 		{
; 141  : 			m_pTopRightWnd->ShowWindow(SW_SHOWNOACTIVATE);

  00c11	6a 04		 push	 4
  00c13	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00c19	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00c1c	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 142  : 			m_pTopRightWnd->m_pImage = CloneImage(pngpath.c_str());

  00c21	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00c24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00c2a	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00c2d	8b cc		 mov	 ecx, esp
  00c2f	89 a5 f8 fd ff
	ff		 mov	 DWORD PTR $T203071[ebp], esp
  00c35	50		 push	 eax
  00c36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00c3c	89 85 8c fc ff
	ff		 mov	 DWORD PTR tv571[ebp], eax
  00c42	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  00c47	83 c4 1c	 add	 esp, 28			; 0000001cH
  00c4a	89 85 88 fc ff
	ff		 mov	 DWORD PTR tv572[ebp], eax
  00c50	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c56	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00c59	8b 85 88 fc ff
	ff		 mov	 eax, DWORD PTR tv572[ebp]
  00c5f	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 143  : 
; 144  : 			CString strLog;

  00c65	8d 4d a8	 lea	 ecx, DWORD PTR _strLog$202243[ebp]
  00c68	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00c6e	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H

; 145  : 			strLog.Format("cloneTopRight: %d ,h: %d, %s\r\n", m_pTopRightWnd->m_pImage->GetWidth(),m_pTopRightWnd->m_pImage->GetHeight(),path.c_str());

  00c72	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00c75	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00c7b	50		 push	 eax
  00c7c	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c82	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00c85	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00c8b	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  00c90	50		 push	 eax
  00c91	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00c97	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00c9a	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  00ca0	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  00ca5	50		 push	 eax
  00ca6	68 00 00 00 00	 push	 OFFSET FLAT:$SG202244
  00cab	8d 55 a8	 lea	 edx, DWORD PTR _strLog$202243[ebp]
  00cae	52		 push	 edx
  00caf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00cb5	83 c4 14	 add	 esp, 20			; 00000014H

; 146  : 			LogUserActMsg(STR_USER_CLICK, string(strLog));

  00cb8	68 00 00 00 00	 push	 OFFSET FLAT:$SG202247
  00cbd	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T203073[ebp]
  00cc3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00cc9	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  00ccd	8d 4d a8	 lea	 ecx, DWORD PTR _strLog$202243[ebp]
  00cd0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00cd6	50		 push	 eax
  00cd7	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T203072[ebp]
  00cdd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00ce3	89 85 84 fc ff
	ff		 mov	 DWORD PTR tv358[ebp], eax
  00ce9	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR tv358[ebp]
  00cef	89 85 80 fc ff
	ff		 mov	 DWORD PTR tv576[ebp], eax
  00cf5	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  00cf9	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR tv576[ebp]
  00cff	51		 push	 ecx
  00d00	8d 95 c0 fd ff
	ff		 lea	 edx, DWORD PTR $T203073[ebp]
  00d06	52		 push	 edx
  00d07	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00d0d	83 c4 08	 add	 esp, 8
  00d10	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  00d14	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T203072[ebp]
  00d1a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00d20	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  00d24	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T203073[ebp]
  00d2a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 147  : 
; 148  : 			m_pTopRightWnd->UpdatePosition(pCurSubject->ptRightTop);

  00d30	8b 45 ec	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  00d33	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00d36	51		 push	 ecx
  00d37	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  00d3a	52		 push	 edx
  00d3b	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00d41	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d44	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 149  : 		}

  00d49	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00d4d	8d 4d a8	 lea	 ecx, DWORD PTR _strLog$202243[ebp]
  00d50	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 150  : 		else

  00d56	eb 71		 jmp	 SHORT $L202248
$L202241:

; 151  : 		{
; 152  : 			m_pTopRightWnd->ShowWindow(SW_HIDE);

  00d58	6a 00		 push	 0
  00d5a	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00d60	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00d63	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 153  : 			LogUserActMsg(STR_USER_CLICK, "TopRight Hide");

  00d68	68 00 00 00 00	 push	 OFFSET FLAT:$SG202251
  00d6d	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T203074[ebp]
  00d73	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00d79	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  00d7d	68 00 00 00 00	 push	 OFFSET FLAT:$SG202252
  00d82	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T203075[ebp]
  00d88	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00d8e	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  00d92	8d 95 a4 fd ff
	ff		 lea	 edx, DWORD PTR $T203074[ebp]
  00d98	52		 push	 edx
  00d99	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR $T203075[ebp]
  00d9f	50		 push	 eax
  00da0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogUserActMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00da6	83 c4 08	 add	 esp, 8
  00da9	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  00dad	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T203075[ebp]
  00db3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00db9	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00dbd	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T203074[ebp]
  00dc3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L202248:

; 154  : 		}
; 155  : 
; 156  : 		pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\bottomright.png";

  00dc9	68 00 00 00 00	 push	 OFFSET FLAT:$SG202257
  00dce	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00dd1	51		 push	 ecx
  00dd2	8d 95 6c fd ff
	ff		 lea	 edx, DWORD PTR $T203076[ebp]
  00dd8	52		 push	 edx
  00dd9	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00dde	83 c4 0c	 add	 esp, 12			; 0000000cH
  00de1	89 85 7c fc ff
	ff		 mov	 DWORD PTR tv377[ebp], eax
  00de7	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR tv377[ebp]
  00ded	89 85 78 fc ff
	ff		 mov	 DWORD PTR tv580[ebp], eax
  00df3	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  00df7	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00dfd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00e00	83 c2 1c	 add	 edx, 28			; 0000001cH
  00e03	52		 push	 edx
  00e04	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR tv580[ebp]
  00e0a	50		 push	 eax
  00e0b	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T203077[ebp]
  00e11	51		 push	 ecx
  00e12	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00e17	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e1a	89 85 74 fc ff
	ff		 mov	 DWORD PTR tv372[ebp], eax
  00e20	8b 95 74 fc ff
	ff		 mov	 edx, DWORD PTR tv372[ebp]
  00e26	89 95 70 fc ff
	ff		 mov	 DWORD PTR tv582[ebp], edx
  00e2c	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  00e30	68 00 00 00 00	 push	 OFFSET FLAT:$SG202256
  00e35	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR tv582[ebp]
  00e3b	50		 push	 eax
  00e3c	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T203078[ebp]
  00e42	51		 push	 ecx
  00e43	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00e48	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e4b	89 85 6c fc ff
	ff		 mov	 DWORD PTR tv330[ebp], eax
  00e51	8b 95 6c fc ff
	ff		 mov	 edx, DWORD PTR tv330[ebp]
  00e57	89 95 68 fc ff
	ff		 mov	 DWORD PTR tv584[ebp], edx
  00e5d	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  00e61	8b 85 68 fc ff
	ff		 mov	 eax, DWORD PTR tv584[ebp]
  00e67	50		 push	 eax
  00e68	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00e6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00e71	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  00e75	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T203078[ebp]
  00e7b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00e81	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  00e85	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T203077[ebp]
  00e8b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00e91	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00e95	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T203076[ebp]
  00e9b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 157  : 		if( YL_FileInfo::IsValid(pngpath)&& pCurSubject->ptRightBottom.x != -1000)

  00ea1	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00ea4	51		 push	 ecx
  00ea5	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  00eaa	83 c4 04	 add	 esp, 4
  00ead	0f b6 d0	 movzx	 edx, al
  00eb0	85 d2		 test	 edx, edx
  00eb2	0f 84 84 00 00
	00		 je	 $L202258
  00eb8	8b 45 ec	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  00ebb	81 b8 88 00 00
	00 18 fc ff ff	 cmp	 DWORD PTR [eax+136], -1000 ; fffffc18H
  00ec5	74 75		 je	 SHORT $L202258

; 158  : 		{
; 159  : 			m_pBottomRightWnd->ShowWindow(SW_SHOWNOACTIVATE);

  00ec7	6a 04		 push	 4
  00ec9	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ecf	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00ed2	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 160  : 			m_pBottomRightWnd->m_pImage = CloneImage(pngpath.c_str());

  00ed7	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00eda	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00ee0	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00ee3	8b cc		 mov	 ecx, esp
  00ee5	89 a5 30 fd ff
	ff		 mov	 DWORD PTR $T203079[ebp], esp
  00eeb	50		 push	 eax
  00eec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00ef2	89 85 64 fc ff
	ff		 mov	 DWORD PTR tv586[ebp], eax
  00ef8	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  00efd	83 c4 1c	 add	 esp, 28			; 0000001cH
  00f00	89 85 60 fc ff
	ff		 mov	 DWORD PTR tv587[ebp], eax
  00f06	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00f0c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00f0f	8b 8d 60 fc ff
	ff		 mov	 ecx, DWORD PTR tv587[ebp]
  00f15	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 161  : 			m_pBottomRightWnd->UpdatePosition(pCurSubject->ptRightBottom);

  00f1b	8b 55 ec	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  00f1e	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00f24	50		 push	 eax
  00f25	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00f2b	51		 push	 ecx
  00f2c	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00f32	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00f35	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 162  : 		}
; 163  : 		else

  00f3a	eb 10		 jmp	 SHORT $L202260
$L202258:

; 164  : 		{
; 165  : 			m_pBottomRightWnd->ShowWindow(SW_HIDE);

  00f3c	6a 00		 push	 0
  00f3e	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00f44	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f47	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L202260:

; 166  : 		}
; 167  : 
; 168  : 		pngpath = path + "\\sbujectskin\\" + m_curSubject->strSubName + "\\bottomleft.png";

  00f4c	68 00 00 00 00	 push	 OFFSET FLAT:$SG202265
  00f51	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00f54	51		 push	 ecx
  00f55	8d 95 14 fd ff
	ff		 lea	 edx, DWORD PTR $T203080[ebp]
  00f5b	52		 push	 edx
  00f5c	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00f61	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f64	89 85 5c fc ff
	ff		 mov	 DWORD PTR tv295[ebp], eax
  00f6a	8b 85 5c fc ff
	ff		 mov	 eax, DWORD PTR tv295[ebp]
  00f70	89 85 58 fc ff
	ff		 mov	 DWORD PTR tv589[ebp], eax
  00f76	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  00f7a	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f80	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00f83	83 c2 1c	 add	 edx, 28			; 0000001cH
  00f86	52		 push	 edx
  00f87	8b 85 58 fc ff
	ff		 mov	 eax, DWORD PTR tv589[ebp]
  00f8d	50		 push	 eax
  00f8e	8d 8d f8 fc ff
	ff		 lea	 ecx, DWORD PTR $T203081[ebp]
  00f94	51		 push	 ecx
  00f95	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00f9a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f9d	89 85 54 fc ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  00fa3	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR tv288[ebp]
  00fa9	89 95 50 fc ff
	ff		 mov	 DWORD PTR tv591[ebp], edx
  00faf	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  00fb3	68 00 00 00 00	 push	 OFFSET FLAT:$SG202264
  00fb8	8b 85 50 fc ff
	ff		 mov	 eax, DWORD PTR tv591[ebp]
  00fbe	50		 push	 eax
  00fbf	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T203082[ebp]
  00fc5	51		 push	 ecx
  00fc6	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00fcb	83 c4 0c	 add	 esp, 12			; 0000000cH
  00fce	89 85 4c fc ff
	ff		 mov	 DWORD PTR tv179[ebp], eax
  00fd4	8b 95 4c fc ff
	ff		 mov	 edx, DWORD PTR tv179[ebp]
  00fda	89 95 48 fc ff
	ff		 mov	 DWORD PTR tv593[ebp], edx
  00fe0	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  00fe4	8b 85 48 fc ff
	ff		 mov	 eax, DWORD PTR tv593[ebp]
  00fea	50		 push	 eax
  00feb	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  00fee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00ff4	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  00ff8	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T203082[ebp]
  00ffe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01004	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  01008	8d 8d f8 fc ff
	ff		 lea	 ecx, DWORD PTR $T203081[ebp]
  0100e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01014	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  01018	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR $T203080[ebp]
  0101e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 169  : 		if( YL_FileInfo::IsValid(pngpath)&& pCurSubject->ptLeftBottom.x != -1000)

  01024	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  01027	51		 push	 ecx
  01028	e8 00 00 00 00	 call	 ?IsValid@YL_FileInfo@@SA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_FileInfo::IsValid
  0102d	83 c4 04	 add	 esp, 4
  01030	0f b6 d0	 movzx	 edx, al
  01033	85 d2		 test	 edx, edx
  01035	0f 84 84 00 00
	00		 je	 $L202266
  0103b	8b 45 ec	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  0103e	81 b8 80 00 00
	00 18 fc ff ff	 cmp	 DWORD PTR [eax+128], -1000 ; fffffc18H
  01048	74 75		 je	 SHORT $L202266

; 170  : 		{
; 171  : 			m_pBottomLeftWnd->ShowWindow(SW_SHOWNOACTIVATE);

  0104a	6a 04		 push	 4
  0104c	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01052	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  01055	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 172  : 			m_pBottomLeftWnd->m_pImage = CloneImage(pngpath.c_str());

  0105a	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  0105d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  01063	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01066	8b cc		 mov	 ecx, esp
  01068	89 a5 d8 fc ff
	ff		 mov	 DWORD PTR $T203083[ebp], esp
  0106e	50		 push	 eax
  0106f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  01075	89 85 44 fc ff
	ff		 mov	 DWORD PTR tv595[ebp], eax
  0107b	e8 00 00 00 00	 call	 ?CloneImage@@YAPAVImage@Gdiplus@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CloneImage
  01080	83 c4 1c	 add	 esp, 28			; 0000001cH
  01083	89 85 40 fc ff
	ff		 mov	 DWORD PTR tv596[ebp], eax
  01089	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0108f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01092	8b 8d 40 fc ff
	ff		 mov	 ecx, DWORD PTR tv596[ebp]
  01098	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 173  : 			m_pBottomLeftWnd->UpdatePosition(pCurSubject->ptLeftBottom);

  0109e	8b 55 ec	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  010a1	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  010a7	50		 push	 eax
  010a8	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  010ae	51		 push	 ecx
  010af	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  010b5	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  010b8	e8 00 00 00 00	 call	 ?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition

; 174  : 		}
; 175  : 		else

  010bd	eb 10		 jmp	 SHORT $L202268
$L202266:

; 176  : 		{
; 177  : 			m_pBottomLeftWnd->ShowWindow(SW_HIDE);

  010bf	6a 00		 push	 0
  010c1	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  010c7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  010ca	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L202268:

; 178  : 		}
; 179  : 
; 180  : 		m_bUpdateView = true;

  010cf	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010d5	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 181  : 		OnMove(0,0);

  010dc	6a 00		 push	 0
  010de	6a 00		 push	 0
  010e0	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010e6	e8 00 00 00 00	 call	 ?OnMove@CIrregularBorderMgr@@QAEXHH@Z ; CIrregularBorderMgr::OnMove

; 182  : 		m_bUpdateView = false;

  010eb	8b 95 d4 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  010f1	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 183  : 	}

  010f8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  010fc	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  010ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  01105	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0110c	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  0110f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L202200:

; 184  : 
; 185  : 
; 186  : }

  01115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0111f	8b 4d e8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01127	8b e5		 mov	 esp, ebp
  01129	5d		 pop	 ebp
  0112a	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L203084:
  00065	8d 4d 8c	 lea	 ecx, DWORD PTR $T203054[ebp]
  00068	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203085:
  0006e	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T203055[ebp]
  00074	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203086:
  0007a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T203056[ebp]
  00080	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L203087:
  00086	8d 4d b0	 lea	 ecx, DWORD PTR _path$202209[ebp]
  00089	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203088:
  0008f	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T203057[ebp]
  00095	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203089:
  0009b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T203058[ebp]
  000a1	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203090:
  000a7	8d 4d cc	 lea	 ecx, DWORD PTR _pngpath$202212[ebp]
  000aa	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203091:
  000b0	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T203059[ebp]
  000b6	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203092:
  000bc	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T203060[ebp]
  000c2	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203094:
  000c8	8d 4d ac	 lea	 ecx, DWORD PTR _strLog$202223[ebp]
  000cb	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L203095:
  000d1	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T203063[ebp]
  000d7	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203096:
  000dd	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T203062[ebp]
  000e3	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203097:
  000e9	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T203064[ebp]
  000ef	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203098:
  000f5	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T203065[ebp]
  000fb	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203099:
  00101	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T203066[ebp]
  00107	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203100:
  0010d	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T203067[ebp]
  00113	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203101:
  00119	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T203068[ebp]
  0011f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203102:
  00125	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T203069[ebp]
  0012b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203103:
  00131	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR $T203070[ebp]
  00137	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203105:
  0013d	8d 4d a8	 lea	 ecx, DWORD PTR _strLog$202243[ebp]
  00140	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L203106:
  00146	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T203073[ebp]
  0014c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203107:
  00152	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T203072[ebp]
  00158	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203108:
  0015e	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T203074[ebp]
  00164	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203109:
  0016a	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T203075[ebp]
  00170	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203110:
  00176	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T203076[ebp]
  0017c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203111:
  00182	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T203077[ebp]
  00188	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203112:
  0018e	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T203078[ebp]
  00194	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203114:
  0019a	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR $T203080[ebp]
  001a0	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203115:
  001a6	8d 8d f8 fc ff
	ff		 lea	 ecx, DWORD PTR $T203081[ebp]
  001ac	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203116:
  001b2	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T203082[ebp]
  001b8	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z:
  001be	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203119
  001c3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z ENDP		; CIrregularBorderMgr::InitTransDlg
PUBLIC	?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode
PUBLIC	??0Rect@Gdiplus@@QAE@HHHH@Z			; Gdiplus::Rect::Rect
PUBLIC	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ; Gdiplus::Graphics::DrawImage
PUBLIC	?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z ; CIrregularBorderMgr::DrawToppanelPng
PUBLIC	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z		; Gdiplus::Graphics::Graphics
PUBLIC	??1Graphics@Gdiplus@@QAE@XZ			; Gdiplus::Graphics::~Graphics
xdata$x	SEGMENT
$T203128 DD	0ffffffffH
	DD	FLAT:$L203124
$T203126 DD	019930520H
	DD	01H
	DD	FLAT:$T203128
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -68						; size = 4
_rr$202287 = -64					; size = 16
_h$202286 = -48						; size = 4
_rr$202280 = -44					; size = 16
_pImgLeft$ = -28					; size = 4
_graph$ = -24						; size = 8
_pImgRight$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_rc$ = 12						; size = 16
?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z PROC NEAR ; CIrregularBorderMgr::DrawToppanelPng
; _this$ = ecx

; 188  : {

  01130	55		 push	 ebp
  01131	8b ec		 mov	 ebp, esp
  01133	6a ff		 push	 -1
  01135	68 00 00 00 00	 push	 __ehhandler$?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z
  0113a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01140	50		 push	 eax
  01141	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01148	83 ec 38	 sub	 esp, 56			; 00000038H
  0114b	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 	InitTransDlg();

  0114e	6a 00		 push	 0
  01150	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01153	e8 00 00 00 00	 call	 ?InitTransDlg@CIrregularBorderMgr@@QAEXH@Z ; CIrregularBorderMgr::InitTransDlg

; 190  : 	if(m_curSubject == NULL)

  01158	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0115b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0115f	75 05		 jne	 SHORT $L202274

; 191  : 		return ;

  01161	e9 9c 01 00 00	 jmp	 $L202273
$L202274:

; 192  : 
; 193  : 	Gdiplus::Image* pImgRight = m_pTopRightWnd->m_pImage;

  01166	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01169	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0116c	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  01172	89 45 f0	 mov	 DWORD PTR _pImgRight$[ebp], eax

; 194  : 	Gdiplus::Image* pImgLeft = m_pTopLeftWnd->m_pImage;

  01175	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01178	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0117b	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  01181	89 45 e4	 mov	 DWORD PTR _pImgLeft$[ebp], eax

; 195  : 
; 196  : 	if(pImgRight == NULL && pImgLeft == NULL)

  01184	83 7d f0 00	 cmp	 DWORD PTR _pImgRight$[ebp], 0
  01188	75 0b		 jne	 SHORT $L202277
  0118a	83 7d e4 00	 cmp	 DWORD PTR _pImgLeft$[ebp], 0
  0118e	75 05		 jne	 SHORT $L202277

; 197  : 		return;

  01190	e9 6d 01 00 00	 jmp	 $L202273
$L202277:

; 198  : 
; 199  : 	Gdiplus::Graphics graph(pDC->m_hDC);

  01195	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01198	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0119b	52		 push	 edx
  0119c	8d 4d e8	 lea	 ecx, DWORD PTR _graph$[ebp]
  0119f	e8 00 00 00 00	 call	 ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ; Gdiplus::Graphics::Graphics
  011a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 200  : 	graph.SetSmoothingMode(Gdiplus::SmoothingModeNone);

  011ab	6a 03		 push	 3
  011ad	8d 4d e8	 lea	 ecx, DWORD PTR _graph$[ebp]
  011b0	e8 00 00 00 00	 call	 ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode

; 201  : 
; 202  : 	if(pImgLeft)

  011b5	83 7d e4 00	 cmp	 DWORD PTR _pImgLeft$[ebp], 0
  011b9	0f 84 9a 00 00
	00		 je	 $L202279

; 203  : 	{
; 204  : 		Rect rr(0,0, pImgLeft->GetWidth() - (m_curSubject->ptLeftTop.x + 2), pImgLeft->GetHeight() - (m_curSubject->ptLeftTop.y + 2));

  011bf	8b 4d e4	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  011c2	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  011c7	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  011ca	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  011cd	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  011d0	83 c1 02	 add	 ecx, 2
  011d3	2b c1		 sub	 eax, ecx
  011d5	50		 push	 eax
  011d6	8b 4d e4	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  011d9	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  011de	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  011e1	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  011e4	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  011e7	83 c2 02	 add	 edx, 2
  011ea	2b c2		 sub	 eax, edx
  011ec	50		 push	 eax
  011ed	6a 00		 push	 0
  011ef	6a 00		 push	 0
  011f1	8d 4d d4	 lea	 ecx, DWORD PTR _rr$202280[ebp]
  011f4	e8 00 00 00 00	 call	 ??0Rect@Gdiplus@@QAE@HHHH@Z ; Gdiplus::Rect::Rect

; 205  : 		graph.DrawImage(pImgLeft,
; 206  : 			rr,
; 207  : 			(int)m_curSubject->ptLeftTop.x + 2, 
; 208  : 			(int)m_curSubject->ptLeftTop.y + 2,
; 209  : 			(int)pImgLeft->GetWidth() - (m_curSubject->ptLeftTop.x + 2), 
; 210  : 			(int)pImgLeft->GetHeight() - (m_curSubject->ptLeftTop.y + 2),
; 211  : 			UnitPixel );

  011f9	6a 00		 push	 0
  011fb	6a 00		 push	 0
  011fd	6a 00		 push	 0
  011ff	6a 02		 push	 2
  01201	8b 4d e4	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  01204	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  01209	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0120c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0120f	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  01212	83 c1 02	 add	 ecx, 2
  01215	2b c1		 sub	 eax, ecx
  01217	50		 push	 eax
  01218	8b 4d e4	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  0121b	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  01220	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  01223	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  01226	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  01229	83 c2 02	 add	 edx, 2
  0122c	2b c2		 sub	 eax, edx
  0122e	50		 push	 eax
  0122f	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  01232	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01235	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  01238	83 c2 02	 add	 edx, 2
  0123b	52		 push	 edx
  0123c	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0123f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01242	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  01245	83 c2 02	 add	 edx, 2
  01248	52		 push	 edx
  01249	8d 45 d4	 lea	 eax, DWORD PTR _rr$202280[ebp]
  0124c	50		 push	 eax
  0124d	8b 4d e4	 mov	 ecx, DWORD PTR _pImgLeft$[ebp]
  01250	51		 push	 ecx
  01251	8d 4d e8	 lea	 ecx, DWORD PTR _graph$[ebp]
  01254	e8 00 00 00 00	 call	 ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ; Gdiplus::Graphics::DrawImage
$L202279:

; 212  : 	}
; 213  : 	if(pImgRight)

  01259	83 7d f0 00	 cmp	 DWORD PTR _pImgRight$[ebp], 0
  0125d	0f 84 90 00 00
	00		 je	 $L202285

; 214  : 	{
; 215  : 		int h = pImgRight->GetHeight();

  01263	8b 4d f0	 mov	 ecx, DWORD PTR _pImgRight$[ebp]
  01266	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  0126b	89 45 d0	 mov	 DWORD PTR _h$202286[ebp], eax

; 216  : 		Rect rr(rc.right - m_curSubject->ptRightTop.x + 2,0,m_curSubject->ptRightTop.x - 2, pImgRight->GetHeight() - m_curSubject->ptRightTop.y - 2);

  0126e	8b 4d f0	 mov	 ecx, DWORD PTR _pImgRight$[ebp]
  01271	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  01276	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  01279	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0127c	2b 41 7c	 sub	 eax, DWORD PTR [ecx+124]
  0127f	83 e8 02	 sub	 eax, 2
  01282	50		 push	 eax
  01283	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  01286	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01289	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0128c	83 e9 02	 sub	 ecx, 2
  0128f	51		 push	 ecx
  01290	6a 00		 push	 0
  01292	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  01295	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01298	8b 4d 14	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  0129b	2b 48 78	 sub	 ecx, DWORD PTR [eax+120]
  0129e	83 c1 02	 add	 ecx, 2
  012a1	51		 push	 ecx
  012a2	8d 4d c0	 lea	 ecx, DWORD PTR _rr$202287[ebp]
  012a5	e8 00 00 00 00	 call	 ??0Rect@Gdiplus@@QAE@HHHH@Z ; Gdiplus::Rect::Rect

; 217  : 		graph.DrawImage(pImgRight, 
; 218  : 			rr,
; 219  : 			(int)0, 
; 220  : 			(int)m_curSubject->ptRightTop.y + 2,
; 221  : 			(int)m_curSubject->ptRightTop.x - 2, 
; 222  : 			(int)pImgRight->GetHeight() - m_curSubject->ptRightTop.y - 2,
; 223  : 			UnitPixel);

  012aa	6a 00		 push	 0
  012ac	6a 00		 push	 0
  012ae	6a 00		 push	 0
  012b0	6a 02		 push	 2
  012b2	8b 4d f0	 mov	 ecx, DWORD PTR _pImgRight$[ebp]
  012b5	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  012ba	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  012bd	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  012c0	2b 41 7c	 sub	 eax, DWORD PTR [ecx+124]
  012c3	83 e8 02	 sub	 eax, 2
  012c6	50		 push	 eax
  012c7	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  012ca	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  012cd	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  012d0	83 e9 02	 sub	 ecx, 2
  012d3	51		 push	 ecx
  012d4	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  012d7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  012da	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  012dd	83 c1 02	 add	 ecx, 2
  012e0	51		 push	 ecx
  012e1	6a 00		 push	 0
  012e3	8d 55 c0	 lea	 edx, DWORD PTR _rr$202287[ebp]
  012e6	52		 push	 edx
  012e7	8b 45 f0	 mov	 eax, DWORD PTR _pImgRight$[ebp]
  012ea	50		 push	 eax
  012eb	8d 4d e8	 lea	 ecx, DWORD PTR _graph$[ebp]
  012ee	e8 00 00 00 00	 call	 ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ; Gdiplus::Graphics::DrawImage
$L202285:

; 224  : 	}
; 225  : }

  012f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  012fa	8d 4d e8	 lea	 ecx, DWORD PTR _graph$[ebp]
  012fd	e8 00 00 00 00	 call	 ??1Graphics@Gdiplus@@QAE@XZ ; Gdiplus::Graphics::~Graphics
$L202273:
  01302	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01305	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0130c	8b e5		 mov	 esp, ebp
  0130e	5d		 pop	 ebp
  0130f	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L203124:
  001c8	8d 4d e8	 lea	 ecx, DWORD PTR _graph$[ebp]
  001cb	e9 00 00 00 00	 jmp	 ??1Graphics@Gdiplus@@QAE@XZ ; Gdiplus::Graphics::~Graphics
__ehhandler$?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z:
  001d0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203126
  001d5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawToppanelPng@CIrregularBorderMgr@@QAEXPAVCDC@@VCRect@@@Z ENDP ; CIrregularBorderMgr::DrawToppanelPng
PUBLIC	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetWindowRect
PUBLIC	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z		; CWnd::MoveWindow
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
EXTRN	__imp__IsWindowVisible@4:NEAR
EXTRN	?UpdateView@CTranslucentDialog@@QAEXH@Z:NEAR	; CTranslucentDialog::UpdateView
EXTRN	?GetImageHeight@CTranslucentDialog@@QAEHXZ:NEAR	; CTranslucentDialog::GetImageHeight
EXTRN	?GetImageWidth@CTranslucentDialog@@QAEHXZ:NEAR	; CTranslucentDialog::GetImageWidth
EXTRN	?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z:NEAR	; CWnd::SetWindowPos
xdata$x	SEGMENT
$T203135 DD	0ffffffffH
	DD	FLAT:$L203131
$T203133 DD	019930520H
	DD	01H
	DD	FLAT:$T203135
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv333 = -96						; size = 4
tv308 = -92						; size = 4
tv303 = -88						; size = 4
tv332 = -84						; size = 4
tv334 = -80						; size = 4
tv276 = -76						; size = 4
tv271 = -72						; size = 4
tv185 = -68						; size = 4
tv180 = -64						; size = 4
tv67 = -60						; size = 4
_this$ = -56						; size = 4
$T203130 = -52						; size = 4
_pWnd$202309 = -48					; size = 4
_pWnd$202307 = -44					; size = 4
_pWnd$202304 = -40					; size = 4
_pCurSubject$ = -36					; size = 4
_rc$ = -32						; size = 16
_pSkin$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?OnMove@CIrregularBorderMgr@@QAEXHH@Z PROC NEAR		; CIrregularBorderMgr::OnMove
; _this$ = ecx

; 228  : {

  01320	55		 push	 ebp
  01321	8b ec		 mov	 ebp, esp
  01323	6a ff		 push	 -1
  01325	68 00 00 00 00	 push	 __ehhandler$?OnMove@CIrregularBorderMgr@@QAEXHH@Z
  0132a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01330	50		 push	 eax
  01331	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01338	83 ec 54	 sub	 esp, 84			; 00000054H
  0133b	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	CRect rc;

  0133e	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  01341	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 230  : 
; 231  : 	ISkinMgr *pSkin = AfxGetUIManager()->UIGetSkinMgr();

  01346	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  0134b	89 45 c4	 mov	 DWORD PTR tv67[ebp], eax
  0134e	8b 45 c4	 mov	 eax, DWORD PTR tv67[ebp]
  01351	8b 10		 mov	 edx, DWORD PTR [eax]
  01353	8b 4d c4	 mov	 ecx, DWORD PTR tv67[ebp]
  01356	ff 52 28	 call	 DWORD PTR [edx+40]
  01359	89 45 f0	 mov	 DWORD PTR _pSkin$[ebp], eax

; 232  : 	if(pSkin == NULL)

  0135c	83 7d f0 00	 cmp	 DWORD PTR _pSkin$[ebp], 0
  01360	75 05		 jne	 SHORT $L202299

; 233  : 		return;

  01362	e9 84 03 00 00	 jmp	 $L202296
$L202299:

; 234  : 	OneSubject *pCurSubject = pSkin->GetCurSubject();

  01367	8b 45 f0	 mov	 eax, DWORD PTR _pSkin$[ebp]
  0136a	8b 10		 mov	 edx, DWORD PTR [eax]
  0136c	8b 4d f0	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  0136f	ff 52 28	 call	 DWORD PTR [edx+40]
  01372	89 45 dc	 mov	 DWORD PTR _pCurSubject$[ebp], eax

; 235  : 	m_pMainWnd = AfxGetMainWindow();

  01375	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  0137a	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0137d	89 01		 mov	 DWORD PTR [ecx], eax

; 236  : 
; 237  : 	if(pCurSubject == NULL)

  0137f	83 7d dc 00	 cmp	 DWORD PTR _pCurSubject$[ebp], 0
  01383	75 05		 jne	 SHORT $L202301

; 238  : 		return;

  01385	e9 61 03 00 00	 jmp	 $L202296
$L202301:

; 239  : 	m_pMainWnd->GetWindowRect(&rc);

  0138a	8d 55 e0	 lea	 edx, DWORD PTR _rc$[ebp]
  0138d	52		 push	 edx
  0138e	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01391	8b 08		 mov	 ecx, DWORD PTR [eax]
  01393	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 240  : 	rc.top -= 162;

  01398	8b 4d e4	 mov	 ecx, DWORD PTR _rc$[ebp+4]
  0139b	81 e9 a2 00 00
	00		 sub	 ecx, 162		; 000000a2H
  013a1	89 4d e4	 mov	 DWORD PTR _rc$[ebp+4], ecx

; 241  : 	rc.bottom = rc.top + 164;

  013a4	8b 55 e4	 mov	 edx, DWORD PTR _rc$[ebp+4]
  013a7	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  013ad	89 55 ec	 mov	 DWORD PTR _rc$[ebp+12], edx

; 242  : 	rc.right = rc.left + 209;

  013b0	8b 45 e0	 mov	 eax, DWORD PTR _rc$[ebp]
  013b3	05 d1 00 00 00	 add	 eax, 209		; 000000d1H
  013b8	89 45 e8	 mov	 DWORD PTR _rc$[ebp+8], eax

; 243  : 
; 244  : 	if(m_pTopLeftWnd != NULL && IsWindowVisible(m_pTopLeftWnd->m_hWnd))

  013bb	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  013be	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  013c2	74 7f		 je	 SHORT $L202302
  013c4	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  013c7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  013ca	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  013cd	51		 push	 ecx
  013ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  013d4	85 c0		 test	 eax, eax
  013d6	74 6b		 je	 SHORT $L202302

; 245  : 	{
; 246  : 		m_pMainWnd->GetWindowRect(&rc);

  013d8	8d 55 e0	 lea	 edx, DWORD PTR _rc$[ebp]
  013db	52		 push	 edx
  013dc	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  013df	8b 08		 mov	 ecx, DWORD PTR [eax]
  013e1	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 247  : 		rc.left = rc.left - pCurSubject->ptLeftTop.x;

  013e6	8b 4d dc	 mov	 ecx, DWORD PTR _pCurSubject$[ebp]
  013e9	8b 55 e0	 mov	 edx, DWORD PTR _rc$[ebp]
  013ec	2b 51 70	 sub	 edx, DWORD PTR [ecx+112]
  013ef	89 55 e0	 mov	 DWORD PTR _rc$[ebp], edx

; 248  : 		rc.top = rc.top - pCurSubject->ptLeftTop.y;

  013f2	8b 45 dc	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  013f5	8b 4d e4	 mov	 ecx, DWORD PTR _rc$[ebp+4]
  013f8	2b 48 74	 sub	 ecx, DWORD PTR [eax+116]
  013fb	89 4d e4	 mov	 DWORD PTR _rc$[ebp+4], ecx

; 249  : 		rc.bottom = rc.top + m_pTopLeftWnd->GetImageHeight();

  013fe	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01401	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01404	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  01409	03 45 e4	 add	 eax, DWORD PTR _rc$[ebp+4]
  0140c	89 45 ec	 mov	 DWORD PTR _rc$[ebp+12], eax

; 250  : 		rc.right = rc.left + m_pTopLeftWnd->GetImageWidth();

  0140f	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01412	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01415	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  0141a	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp]
  0141d	89 45 e8	 mov	 DWORD PTR _rc$[ebp+8], eax

; 251  : 		m_pTopLeftWnd->MoveWindow(&rc);

  01420	6a 01		 push	 1
  01422	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  01425	51		 push	 ecx
  01426	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01429	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0142c	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 252  : 		m_pTopLeftWnd->UpdateView(m_bUpdateView);

  01431	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01434	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01437	51		 push	 ecx
  01438	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0143b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0143e	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L202302:

; 253  : 	}
; 254  : 	if(m_pTopRightWnd != NULL  && IsWindowVisible(m_pTopRightWnd->m_hWnd))

  01443	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01446	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0144a	0f 84 c1 00 00
	00		 je	 $L202303
  01450	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01453	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01456	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  01459	50		 push	 eax
  0145a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  01460	85 c0		 test	 eax, eax
  01462	0f 84 a9 00 00
	00		 je	 $L202303

; 255  : 	{
; 256  : 		m_pMainWnd->GetWindowRect(&rc);

  01468	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  0146b	51		 push	 ecx
  0146c	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0146f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01471	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 257  : 		rc.left = rc.right - pCurSubject->ptRightTop.x;

  01476	8b 45 dc	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01479	8b 4d e8	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  0147c	2b 48 78	 sub	 ecx, DWORD PTR [eax+120]
  0147f	89 4d e0	 mov	 DWORD PTR _rc$[ebp], ecx

; 258  : 		rc.top = rc.top - pCurSubject->ptRightTop.y;

  01482	8b 55 dc	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  01485	8b 45 e4	 mov	 eax, DWORD PTR _rc$[ebp+4]
  01488	2b 42 7c	 sub	 eax, DWORD PTR [edx+124]
  0148b	89 45 e4	 mov	 DWORD PTR _rc$[ebp+4], eax

; 259  : 		rc.bottom = rc.top + m_pTopRightWnd->GetImageHeight();

  0148e	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01491	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  01494	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  01499	03 45 e4	 add	 eax, DWORD PTR _rc$[ebp+4]
  0149c	89 45 ec	 mov	 DWORD PTR _rc$[ebp+12], eax

; 260  : 		rc.right = rc.left + m_pTopRightWnd->GetImageWidth();

  0149f	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  014a2	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  014a5	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  014aa	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp]
  014ad	89 45 e8	 mov	 DWORD PTR _rc$[ebp+8], eax

; 261  : 	//	m_pTopRightWnd->MoveWindow(&rc);
; 262  : 		CWnd *pWnd = AfxGetUIManager()->UIGetChangeColorMgr()->GetSkinWnd();

  014b0	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  014b5	89 45 c0	 mov	 DWORD PTR tv180[ebp], eax
  014b8	8b 45 c0	 mov	 eax, DWORD PTR tv180[ebp]
  014bb	8b 10		 mov	 edx, DWORD PTR [eax]
  014bd	8b 4d c0	 mov	 ecx, DWORD PTR tv180[ebp]
  014c0	ff 52 2c	 call	 DWORD PTR [edx+44]
  014c3	89 45 bc	 mov	 DWORD PTR tv185[ebp], eax
  014c6	8b 45 bc	 mov	 eax, DWORD PTR tv185[ebp]
  014c9	8b 10		 mov	 edx, DWORD PTR [eax]
  014cb	8b 4d bc	 mov	 ecx, DWORD PTR tv185[ebp]
  014ce	ff 52 14	 call	 DWORD PTR [edx+20]
  014d1	89 45 d8	 mov	 DWORD PTR _pWnd$202304[ebp], eax

; 263  : 		m_pTopRightWnd->SetWindowPos(pWnd, rc.left, rc.top, rc.Width(),rc.Height(), SWP_NOACTIVATE);

  014d4	6a 10		 push	 16			; 00000010H
  014d6	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  014d9	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  014de	50		 push	 eax
  014df	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  014e2	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  014e7	50		 push	 eax
  014e8	8b 45 e4	 mov	 eax, DWORD PTR _rc$[ebp+4]
  014eb	50		 push	 eax
  014ec	8b 4d e0	 mov	 ecx, DWORD PTR _rc$[ebp]
  014ef	51		 push	 ecx
  014f0	8b 55 d8	 mov	 edx, DWORD PTR _pWnd$202304[ebp]
  014f3	52		 push	 edx
  014f4	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  014f7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  014fa	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 264  : 		m_pTopRightWnd->UpdateView(m_bUpdateView);

  014ff	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01502	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01505	52		 push	 edx
  01506	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01509	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0150c	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L202303:

; 265  : 	}
; 266  : 
; 267  : 	if(m_pBottomLeftWnd != NULL && IsWindowVisible(m_pBottomLeftWnd->m_hWnd))

  01511	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01514	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  01518	0f 84 85 00 00
	00		 je	 $L202305
  0151e	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01521	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01524	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01527	51		 push	 ecx
  01528	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  0152e	85 c0		 test	 eax, eax
  01530	74 71		 je	 SHORT $L202305

; 268  : 	{
; 269  : 		m_pMainWnd->GetWindowRect(&rc);

  01532	8d 55 e0	 lea	 edx, DWORD PTR _rc$[ebp]
  01535	52		 push	 edx
  01536	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01539	8b 08		 mov	 ecx, DWORD PTR [eax]
  0153b	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 270  : 		rc.left = rc.left - pCurSubject->ptLeftBottom.x;

  01540	8b 4d dc	 mov	 ecx, DWORD PTR _pCurSubject$[ebp]
  01543	8b 55 e0	 mov	 edx, DWORD PTR _rc$[ebp]
  01546	2b 91 80 00 00
	00		 sub	 edx, DWORD PTR [ecx+128]
  0154c	89 55 e0	 mov	 DWORD PTR _rc$[ebp], edx

; 271  : 		rc.top = rc.bottom - pCurSubject->ptLeftBottom.y;

  0154f	8b 45 dc	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  01552	8b 4d ec	 mov	 ecx, DWORD PTR _rc$[ebp+12]
  01555	2b 88 84 00 00
	00		 sub	 ecx, DWORD PTR [eax+132]
  0155b	89 4d e4	 mov	 DWORD PTR _rc$[ebp+4], ecx

; 272  : 		rc.bottom = rc.top + m_pBottomLeftWnd->GetImageHeight();

  0155e	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01561	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01564	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  01569	03 45 e4	 add	 eax, DWORD PTR _rc$[ebp+4]
  0156c	89 45 ec	 mov	 DWORD PTR _rc$[ebp+12], eax

; 273  : 		rc.right = rc.left + m_pBottomLeftWnd->GetImageWidth();

  0156f	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01572	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01575	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  0157a	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp]
  0157d	89 45 e8	 mov	 DWORD PTR _rc$[ebp+8], eax

; 274  : 		m_pBottomLeftWnd->MoveWindow(&rc);

  01580	6a 01		 push	 1
  01582	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  01585	51		 push	 ecx
  01586	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01589	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0158c	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 275  : 		m_pBottomLeftWnd->UpdateView(m_bUpdateView);

  01591	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01594	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01597	51		 push	 ecx
  01598	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0159b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0159e	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L202305:

; 276  : 	}
; 277  : 	if(m_pBottomRightWnd != NULL  && IsWindowVisible(m_pBottomRightWnd->m_hWnd))

  015a3	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  015a6	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  015aa	0f 84 c9 00 00
	00		 je	 $L202306
  015b0	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  015b3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  015b6	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  015b9	50		 push	 eax
  015ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  015c0	85 c0		 test	 eax, eax
  015c2	0f 84 b1 00 00
	00		 je	 $L202306

; 278  : 	{
; 279  : 		m_pMainWnd->GetWindowRect(&rc);

  015c8	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  015cb	51		 push	 ecx
  015cc	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  015cf	8b 0a		 mov	 ecx, DWORD PTR [edx]
  015d1	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 280  : 		rc.left = rc.right - pCurSubject->ptRightBottom.x;

  015d6	8b 45 dc	 mov	 eax, DWORD PTR _pCurSubject$[ebp]
  015d9	8b 4d e8	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  015dc	2b 88 88 00 00
	00		 sub	 ecx, DWORD PTR [eax+136]
  015e2	89 4d e0	 mov	 DWORD PTR _rc$[ebp], ecx

; 281  : 		rc.top = rc.bottom - pCurSubject->ptRightBottom.y;

  015e5	8b 55 dc	 mov	 edx, DWORD PTR _pCurSubject$[ebp]
  015e8	8b 45 ec	 mov	 eax, DWORD PTR _rc$[ebp+12]
  015eb	2b 82 8c 00 00
	00		 sub	 eax, DWORD PTR [edx+140]
  015f1	89 45 e4	 mov	 DWORD PTR _rc$[ebp+4], eax

; 282  : 		rc.bottom = rc.top + m_pBottomRightWnd->GetImageHeight();

  015f4	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  015f7	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  015fa	e8 00 00 00 00	 call	 ?GetImageHeight@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageHeight
  015ff	03 45 e4	 add	 eax, DWORD PTR _rc$[ebp+4]
  01602	89 45 ec	 mov	 DWORD PTR _rc$[ebp+12], eax

; 283  : 		rc.right = rc.left + m_pBottomRightWnd->GetImageWidth();

  01605	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01608	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0160b	e8 00 00 00 00	 call	 ?GetImageWidth@CTranslucentDialog@@QAEHXZ ; CTranslucentDialog::GetImageWidth
  01610	03 45 e0	 add	 eax, DWORD PTR _rc$[ebp]
  01613	89 45 e8	 mov	 DWORD PTR _rc$[ebp+8], eax

; 284  : 		//m_pBottomRightWnd->MoveWindow(&rc);
; 285  : 		CWnd *pWnd = AfxGetUIManager()->UIGetChangeColorMgr()->GetSkinWnd();

  01616	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  0161b	89 45 b8	 mov	 DWORD PTR tv271[ebp], eax
  0161e	8b 45 b8	 mov	 eax, DWORD PTR tv271[ebp]
  01621	8b 10		 mov	 edx, DWORD PTR [eax]
  01623	8b 4d b8	 mov	 ecx, DWORD PTR tv271[ebp]
  01626	ff 52 2c	 call	 DWORD PTR [edx+44]
  01629	89 45 b4	 mov	 DWORD PTR tv276[ebp], eax
  0162c	8b 45 b4	 mov	 eax, DWORD PTR tv276[ebp]
  0162f	8b 10		 mov	 edx, DWORD PTR [eax]
  01631	8b 4d b4	 mov	 ecx, DWORD PTR tv276[ebp]
  01634	ff 52 14	 call	 DWORD PTR [edx+20]
  01637	89 45 d4	 mov	 DWORD PTR _pWnd$202307[ebp], eax

; 286  : 		m_pBottomRightWnd->SetWindowPos(AfxGetMainWindow(), rc.left, rc.top, rc.Width(),rc.Height(), SWP_NOACTIVATE);

  0163a	6a 10		 push	 16			; 00000010H
  0163c	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  0163f	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  01644	50		 push	 eax
  01645	8d 4d e0	 lea	 ecx, DWORD PTR _rc$[ebp]
  01648	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  0164d	50		 push	 eax
  0164e	8b 45 e4	 mov	 eax, DWORD PTR _rc$[ebp+4]
  01651	50		 push	 eax
  01652	8b 4d e0	 mov	 ecx, DWORD PTR _rc$[ebp]
  01655	51		 push	 ecx
  01656	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  0165b	50		 push	 eax
  0165c	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0165f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  01662	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 287  : 		m_pBottomRightWnd->UpdateView(m_bUpdateView);

  01667	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0166a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0166d	51		 push	 ecx
  0166e	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01671	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  01674	e8 00 00 00 00	 call	 ?UpdateView@CTranslucentDialog@@QAEXH@Z ; CTranslucentDialog::UpdateView
$L202306:

; 288  : 
; 289  : 	}
; 290  : 	if(m_bUpdateView)

  01679	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0167c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  01680	74 69		 je	 SHORT $L202296

; 291  : 	{
; 292  : 		CWnd *pWnd = AfxGetUIManager()->UIGetLayoutMgr()->GetWnd("toppanel");

  01682	51		 push	 ecx
  01683	8b cc		 mov	 ecx, esp
  01685	89 65 cc	 mov	 DWORD PTR $T203130[ebp], esp
  01688	68 00 00 00 00	 push	 OFFSET FLAT:$SG202311
  0168d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  01693	89 45 b0	 mov	 DWORD PTR tv334[ebp], eax
  01696	8b 4d b0	 mov	 ecx, DWORD PTR tv334[ebp]
  01699	89 4d ac	 mov	 DWORD PTR tv332[ebp], ecx
  0169c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  016a3	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  016a8	89 45 a8	 mov	 DWORD PTR tv303[ebp], eax
  016ab	8b 55 a8	 mov	 edx, DWORD PTR tv303[ebp]
  016ae	8b 02		 mov	 eax, DWORD PTR [edx]
  016b0	8b 4d a8	 mov	 ecx, DWORD PTR tv303[ebp]
  016b3	ff 50 24	 call	 DWORD PTR [eax+36]
  016b6	89 45 a4	 mov	 DWORD PTR tv308[ebp], eax
  016b9	8b 4d a4	 mov	 ecx, DWORD PTR tv308[ebp]
  016bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  016be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  016c5	8b 4d a4	 mov	 ecx, DWORD PTR tv308[ebp]
  016c8	ff 52 2c	 call	 DWORD PTR [edx+44]
  016cb	89 45 a0	 mov	 DWORD PTR tv333[ebp], eax
  016ce	8b 45 a0	 mov	 eax, DWORD PTR tv333[ebp]
  016d1	89 45 d0	 mov	 DWORD PTR _pWnd$202309[ebp], eax

; 293  : 		if(pWnd)

  016d4	83 7d d0 00	 cmp	 DWORD PTR _pWnd$202309[ebp], 0
  016d8	74 11		 je	 SHORT $L202296

; 294  : 			pWnd->RedrawWindow(NULL, NULL, RDW_INVALIDATE | RDW_UPDATENOW | RDW_ERASE | RDW_ALLCHILDREN);

  016da	68 85 01 00 00	 push	 389			; 00000185H
  016df	6a 00		 push	 0
  016e1	6a 00		 push	 0
  016e3	8b 4d d0	 mov	 ecx, DWORD PTR _pWnd$202309[ebp]
  016e6	e8 00 00 00 00	 call	 ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$L202296:

; 295  : 	}
; 296  : }

  016eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  016ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  016f5	8b e5		 mov	 esp, ebp
  016f7	5d		 pop	 ebp
  016f8	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L203131:
  001da	8b 4d cc	 mov	 ecx, DWORD PTR $T203130[ebp]
  001dd	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?OnMove@CIrregularBorderMgr@@QAEXHH@Z:
  001e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203133
  001e8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnMove@CIrregularBorderMgr@@QAEXHH@Z ENDP		; CIrregularBorderMgr::OnMove
PUBLIC	?OnSize@CIrregularBorderMgr@@QAEXXZ		; CIrregularBorderMgr::OnSize
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnSize@CIrregularBorderMgr@@QAEXXZ PROC NEAR		; CIrregularBorderMgr::OnSize
; _this$ = ecx

; 299  : {

  01700	55		 push	 ebp
  01701	8b ec		 mov	 ebp, esp
  01703	51		 push	 ecx
  01704	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  : 	OnMove(0,0);

  01707	6a 00		 push	 0
  01709	6a 00		 push	 0
  0170b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0170e	e8 00 00 00 00	 call	 ?OnMove@CIrregularBorderMgr@@QAEXHH@Z ; CIrregularBorderMgr::OnMove

; 301  : }

  01713	8b e5		 mov	 esp, ebp
  01715	5d		 pop	 ebp
  01716	c3		 ret	 0
?OnSize@CIrregularBorderMgr@@QAEXXZ ENDP		; CIrregularBorderMgr::OnSize
_TEXT	ENDS
PUBLIC	?LoadChangeSubjectData@CIrregularBorderMgr@@AAEXXZ ; CIrregularBorderMgr::LoadChangeSubjectData
; Function compile flags: /Odt
_TEXT	SEGMENT
tv66 = -16						; size = 4
_this$ = -12						; size = 4
_pCurSubject$ = -8					; size = 4
_pSkin$ = -4						; size = 4
?LoadChangeSubjectData@CIrregularBorderMgr@@AAEXXZ PROC NEAR ; CIrregularBorderMgr::LoadChangeSubjectData
; _this$ = ecx

; 304  : {

  01720	55		 push	 ebp
  01721	8b ec		 mov	 ebp, esp
  01723	83 ec 10	 sub	 esp, 16			; 00000010H
  01726	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 305  : 	ISkinMgr *pSkin = AfxGetUIManager()->UIGetSkinMgr();

  01729	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  0172e	89 45 f0	 mov	 DWORD PTR tv66[ebp], eax
  01731	8b 45 f0	 mov	 eax, DWORD PTR tv66[ebp]
  01734	8b 10		 mov	 edx, DWORD PTR [eax]
  01736	8b 4d f0	 mov	 ecx, DWORD PTR tv66[ebp]
  01739	ff 52 28	 call	 DWORD PTR [edx+40]
  0173c	89 45 fc	 mov	 DWORD PTR _pSkin$[ebp], eax

; 306  : 	OneSubject *pCurSubject = pSkin->GetCurSubject();

  0173f	8b 45 fc	 mov	 eax, DWORD PTR _pSkin$[ebp]
  01742	8b 10		 mov	 edx, DWORD PTR [eax]
  01744	8b 4d fc	 mov	 ecx, DWORD PTR _pSkin$[ebp]
  01747	ff 52 28	 call	 DWORD PTR [edx+40]
  0174a	89 45 f8	 mov	 DWORD PTR _pCurSubject$[ebp], eax

; 307  : }

  0174d	8b e5		 mov	 esp, ebp
  0174f	5d		 pop	 ebp
  01750	c3		 ret	 0
?LoadChangeSubjectData@CIrregularBorderMgr@@AAEXXZ ENDP	; CIrregularBorderMgr::LoadChangeSubjectData
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 110  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT
; _this$ = ecx

; 123  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT
; _this$ = ecx

; 125  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 37   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
_TEXT	ENDS
;	COMDAT ?SetOwner@CWnd@@QAEXPAV1@@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_pOwnerWnd$ = 8						; size = 4
?SetOwner@CWnd@@QAEXPAV1@@Z PROC NEAR			; CWnd::SetOwner, COMDAT
; _this$ = ecx

; 41   : 	{ m_hWndOwner = pOwnerWnd != NULL ? pOwnerWnd->m_hWnd : NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d 08 00	 cmp	 DWORD PTR _pOwnerWnd$[ebp], 0
  0000d	74 0b		 je	 SHORT $L203149
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pOwnerWnd$[ebp]
  00012	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00015	89 4d f8	 mov	 DWORD PTR tv67[ebp], ecx
  00018	eb 07		 jmp	 SHORT $L203150
$L203149:
  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$L203150:
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]
  00027	89 42 38	 mov	 DWORD PTR [edx+56], eax
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?SetOwner@CWnd@@QAEXPAV1@@Z ENDP			; CWnd::SetOwner
_TEXT	ENDS
EXTRN	?MoveWindow@CWnd@@QAEXHHHHH@Z:NEAR		; CWnd::MoveWindow
; Function compile flags: /Odt
;	COMDAT ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
_bRepaint$ = 12						; size = 4
?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z PROC NEAR		; CWnd::MoveWindow, COMDAT
; _this$ = ecx

; 89   : 	{ MoveWindow(lpRect->left, lpRect->top, lpRect->right - lpRect->left,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 		lpRect->bottom - lpRect->top, bRepaint); }

  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXHHHHH@Z ; CWnd::MoveWindow
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ENDP		; CWnd::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetWindowRect, COMDAT
; _this$ = ecx

; 105  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetWindowRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetWindowRect
_TEXT	ENDS
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
EXTRN	__imp__RedrawWindow@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRectUpdate$ = 8					; size = 4
_prgnUpdate$ = 12					; size = 4
_flags$ = 16						; size = 4
?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z PROC NEAR ; CWnd::RedrawWindow, COMDAT
; _this$ = ecx

; 172  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::RedrawWindow(m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(), flags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _prgnUpdate$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _lpRectUpdate$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RedrawWindow@16
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ENDP	; CWnd::RedrawWindow
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC NEAR		; CGdiObject::GetSafeHandle, COMDAT
; _this$ = ecx

; 80   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L203159
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L203160
$L203159:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L203160:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplustypes.h
_TEXT	ENDS
;	COMDAT ??0Rect@Gdiplus@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
??0Rect@Gdiplus@@QAE@HHHH@Z PROC NEAR			; Gdiplus::Rect::Rect, COMDAT
; _this$ = ecx

; 527  :     Rect(IN INT x,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 528  :          IN INT y,
; 529  :          IN INT width,
; 530  :          IN INT height)
; 531  :     {
; 532  :         X = x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 533  :         Y = y;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 534  :         Width = width;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 535  :         Height = height;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _height$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 536  :     }

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0Rect@Gdiplus@@QAE@HHHH@Z ENDP			; Gdiplus::Rect::Rect
_TEXT	ENDS
PUBLIC	?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics
EXTRN	_GdipCreateFromHDC@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusgraphics.h
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_graphics$ = -4						; size = 4
_hdc$ = 8						; size = 4
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z PROC NEAR		; Gdiplus::Graphics::Graphics, COMDAT
; _this$ = ecx

; 53   :     Graphics(IN HDC hdc)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :     {
; 55   :         GpGraphics *graphics = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _graphics$[ebp], 0

; 56   : 
; 57   :         lastResult = DllExports::GdipCreateFromHDC(hdc, &graphics);

  00010	8d 45 fc	 lea	 eax, DWORD PTR _graphics$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _hdc$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _GdipCreateFromHDC@8
  0001d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 
; 59   :         SetNativeGraphics(graphics);

  00023	8b 45 fc	 mov	 eax, DWORD PTR _graphics$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics

; 60   :     }

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ENDP		; Gdiplus::Graphics::Graphics
_TEXT	ENDS
EXTRN	_GdipDeleteGraphics@4:NEAR
; Function compile flags: /Odt
;	COMDAT ??1Graphics@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Graphics@Gdiplus@@QAE@XZ PROC NEAR			; Gdiplus::Graphics::~Graphics, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :         DllExports::GdipDeleteGraphics(nativeGraphics);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _GdipDeleteGraphics@4

; 104  :     }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1Graphics@Gdiplus@@QAE@XZ ENDP			; Gdiplus::Graphics::~Graphics
_TEXT	ENDS
PUBLIC	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus
EXTRN	_GdipSetSmoothingMode@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_smoothingMode$ = 8					; size = 4
?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z PROC NEAR ; Gdiplus::Graphics::SetSmoothingMode, COMDAT
; _this$ = ecx

; 246  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  :         return SetStatus(DllExports::GdipSetSmoothingMode(nativeGraphics,
; 248  :                                                           smoothingMode));

  00007	8b 45 08	 mov	 eax, DWORD PTR _smoothingMode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _GdipSetSmoothingMode@8
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 249  :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ENDP ; Gdiplus::Graphics::SetSmoothingMode
_TEXT	ENDS
EXTRN	_GdipDrawImageRectRectI@56:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z
_TEXT	SEGMENT
tv86 = -12						; size = 4
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_image$ = 8						; size = 4
_destRect$ = 12						; size = 4
_srcx$ = 16						; size = 4
_srcy$ = 20						; size = 4
_srcwidth$ = 24						; size = 4
_srcheight$ = 28					; size = 4
_srcUnit$ = 32						; size = 4
_imageAttributes$ = 36					; size = 4
_callback$ = 40						; size = 4
_callbackData$ = 44					; size = 4
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z PROC NEAR ; Gdiplus::Graphics::DrawImage, COMDAT
; _this$ = ecx

; 1707 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1708 :         return SetStatus(DllExports::GdipDrawImageRectRectI(nativeGraphics,
; 1709 :                                                             image ? image->nativeImage
; 1710 :                                                                   : NULL,
; 1711 :                                                             destRect.X,
; 1712 :                                                             destRect.Y,
; 1713 :                                                             destRect.Width,
; 1714 :                                                             destRect.Height,
; 1715 :                                                             srcx,
; 1716 :                                                             srcy,
; 1717 :                                                             srcwidth,
; 1718 :                                                             srcheight,
; 1719 :                                                             srcUnit,
; 1720 :                                                             imageAttributes
; 1721 :                                                             ? imageAttributes->nativeImageAttr
; 1722 :                                                             : NULL,
; 1723 :                                                             callback,
; 1724 :                                                             callbackData));

  00009	83 7d 24 00	 cmp	 DWORD PTR _imageAttributes$[ebp], 0
  0000d	74 0a		 je	 SHORT $L203171
  0000f	8b 45 24	 mov	 eax, DWORD PTR _imageAttributes$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d f8	 mov	 DWORD PTR tv70[ebp], ecx
  00017	eb 07		 jmp	 SHORT $L203172
$L203171:
  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L203172:
  00020	83 7d 08 00	 cmp	 DWORD PTR _image$[ebp], 0
  00024	74 0b		 je	 SHORT $L203173
  00026	8b 55 08	 mov	 edx, DWORD PTR _image$[ebp]
  00029	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002c	89 45 f4	 mov	 DWORD PTR tv86[ebp], eax
  0002f	eb 07		 jmp	 SHORT $L203174
$L203173:
  00031	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$L203174:
  00038	8b 4d 2c	 mov	 ecx, DWORD PTR _callbackData$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 28	 mov	 edx, DWORD PTR _callback$[ebp]
  0003f	52		 push	 edx
  00040	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
  00043	50		 push	 eax
  00044	8b 4d 20	 mov	 ecx, DWORD PTR _srcUnit$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 1c	 mov	 edx, DWORD PTR _srcheight$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 18	 mov	 eax, DWORD PTR _srcwidth$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 14	 mov	 ecx, DWORD PTR _srcy$[ebp]
  00053	51		 push	 ecx
  00054	8b 55 10	 mov	 edx, DWORD PTR _srcx$[ebp]
  00057	52		 push	 edx
  00058	8b 45 0c	 mov	 eax, DWORD PTR _destRect$[ebp]
  0005b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005e	51		 push	 ecx
  0005f	8b 55 0c	 mov	 edx, DWORD PTR _destRect$[ebp]
  00062	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00065	50		 push	 eax
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _destRect$[ebp]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	52		 push	 edx
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _destRect$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	51		 push	 ecx
  00073	8b 55 f4	 mov	 edx, DWORD PTR tv86[ebp]
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _GdipDrawImageRectRectI@56
  00082	50		 push	 eax
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1725 :     }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 28 00	 ret	 40			; 00000028H
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@ABVRect@2@HHHHW4Unit@2@PBVImageAttributes@2@P6GHPAX@Z4@Z ENDP ; Gdiplus::Graphics::DrawImage
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_graphics$ = 8						; size = 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z PROC NEAR ; Gdiplus::Graphics::SetNativeGraphics, COMDAT
; _this$ = ecx

; 2339 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2340 :         this->nativeGraphics = graphics;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _graphics$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 2341 :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ENDP ; Gdiplus::Graphics::SetNativeGraphics
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC NEAR ; Gdiplus::Graphics::SetStatus, COMDAT
; _this$ = ecx

; 2344 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2345 :         if (status != Ok)

  00007	83 7d 08 00	 cmp	 DWORD PTR _status$[ebp], 0
  0000b	74 0e		 je	 SHORT $L126192

; 2346 :             return (lastResult = status);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _status$[ebp]
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00016	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00019	eb 03		 jmp	 SHORT $L126191
$L126192:

; 2347 :         else
; 2348 :             return status;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$L126191:

; 2349 :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::Graphics::SetStatus
_TEXT	ENDS
PUBLIC	??_R13?0A@A@GdiplusBase@Gdiplus@@8		; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (4,-1,0,0)'
PUBLIC	??_R0?AVGdiplusBase@Gdiplus@@@8			; Gdiplus::GdiplusBase `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@Image@Gdiplus@@8			; Gdiplus::Image::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVImage@Gdiplus@@@8			; Gdiplus::Image `RTTI Type Descriptor'
PUBLIC	??_R4Image@Gdiplus@@6B@				; Gdiplus::Image::`RTTI Complete Object Locator'
PUBLIC	??_R3Image@Gdiplus@@8				; Gdiplus::Image::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Image@Gdiplus@@8				; Gdiplus::Image::`RTTI Base Class Array'
PUBLIC	??_7Image@Gdiplus@@6B@				; Gdiplus::Image::`vftable'
PUBLIC	??_GImage@Gdiplus@@UAEPAXI@Z			; Gdiplus::Image::`scalar deleting destructor'
EXTRN	_GdipLoadImageFromFile@8:NEAR
EXTRN	_GdipLoadImageFromFileICM@8:NEAR
EXTRN	??_EImage@Gdiplus@@UAEPAXI@Z:NEAR		; Gdiplus::Image::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7Image@Gdiplus@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
CONST	SEGMENT
??_7Image@Gdiplus@@6B@ DD FLAT:??_R4Image@Gdiplus@@6B@	; Gdiplus::Image::`vftable'
	DD	FLAT:??_EImage@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Image@Gdiplus@@UAEPAV12@XZ
CONST	ENDS
;	COMDAT ??_R4Image@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4Image@Gdiplus@@6B@ DD 00H				; Gdiplus::Image::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVImage@Gdiplus@@@8
	DD	FLAT:??_R3Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVImage@Gdiplus@@@8
_DATA	SEGMENT
??_R0?AVImage@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@	; Gdiplus::Image `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVImage@Gdiplus@@', 00H
_DATA	ENDS
;	COMDAT ??_R3Image@Gdiplus@@8
rdata$r	SEGMENT
??_R3Image@Gdiplus@@8 DD 00H				; Gdiplus::Image::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R2Image@Gdiplus@@8
rdata$r	SEGMENT
??_R2Image@Gdiplus@@8 DD FLAT:??_R1A@?0A@A@Image@Gdiplus@@8 ; Gdiplus::Image::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@Image@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@A@Image@Gdiplus@@8 DD FLAT:??_R0?AVImage@Gdiplus@@@8 ; Gdiplus::Image::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R13?0A@A@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT
??_R13?0A@A@GdiplusBase@Gdiplus@@8 DD FLAT:??_R0?AVGdiplusBase@Gdiplus@@@8 ; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (4,-1,0,0)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVGdiplusBase@Gdiplus@@@8
_DATA	SEGMENT
??_R0?AVGdiplusBase@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@ ; Gdiplus::GdiplusBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGdiplusBase@Gdiplus@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0Image@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_useEmbeddedColorManagement$ = 12			; size = 4
??0Image@Gdiplus@@QAE@PB_WH@Z PROC NEAR			; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Image@Gdiplus@@6B@

; 24   :     nativeImage = NULL;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 25   :     if(useEmbeddedColorManagement)

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _useEmbeddedColorManagement$[ebp], 0
  0001e	74 18		 je	 SHORT $L126808

; 26   :     {
; 27   :         lastResult = DllExports::GdipLoadImageFromFileICM(
; 28   :             filename, 
; 29   :             &nativeImage
; 30   :         );

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	83 c2 04	 add	 edx, 4
  00026	52		 push	 edx
  00027	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _GdipLoadImageFromFileICM@8
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 31   :     }
; 32   :     else

  00036	eb 16		 jmp	 SHORT $L126807
$L126808:

; 33   :     {      
; 34   :         lastResult = DllExports::GdipLoadImageFromFile(
; 35   :             filename, 
; 36   :             &nativeImage
; 37   :         );

  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 04	 add	 edx, 4
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _GdipLoadImageFromFile@8
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L126807:

; 38   :     }
; 39   : }

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
??0Image@Gdiplus@@QAE@PB_WH@Z ENDP			; Gdiplus::Image::Image
_TEXT	ENDS
PUBLIC	??3GdiplusBase@Gdiplus@@SAXPAX@Z		; Gdiplus::GdiplusBase::operator delete
; Function compile flags: /Odt
;	COMDAT ??_GImage@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GImage@Gdiplus@@UAEPAXI@Z PROC NEAR			; Gdiplus::Image::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Image@Gdiplus@@UAE@XZ ; Gdiplus::Image::~Image
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $L119539
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3GdiplusBase@Gdiplus@@SAXPAX@Z ; Gdiplus::GdiplusBase::operator delete
  00020	83 c4 04	 add	 esp, 4
$L119539:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GImage@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::Image::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_GdipFree@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbase.h
;	COMDAT ??3GdiplusBase@Gdiplus@@SAXPAX@Z
_TEXT	SEGMENT
_in_pVoid$ = 8						; size = 4
??3GdiplusBase@Gdiplus@@SAXPAX@Z PROC NEAR		; Gdiplus::GdiplusBase::operator delete, COMDAT

; 22   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :        DllExports::GdipFree(in_pVoid);

  00003	8b 45 08	 mov	 eax, DWORD PTR _in_pVoid$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _GdipFree@4

; 24   :     }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3GdiplusBase@Gdiplus@@SAXPAX@Z ENDP			; Gdiplus::GdiplusBase::operator delete
_TEXT	ENDS
EXTRN	_GdipDisposeImage@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
;	COMDAT ??1Image@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Image@Gdiplus@@UAE@XZ PROC NEAR			; Gdiplus::Image::~Image, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Image@Gdiplus@@6B@

; 91   :     DllExports::GdipDisposeImage(nativeImage);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _GdipDisposeImage@4

; 92   : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??1Image@Gdiplus@@UAE@XZ ENDP				; Gdiplus::Image::~Image
_TEXT	ENDS
PUBLIC	??2GdiplusBase@Gdiplus@@SAPAXI@Z		; Gdiplus::GdiplusBase::operator new
PUBLIC	??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ; Gdiplus::Image::Image
PUBLIC	?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus
EXTRN	_GdipCloneImage@8:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T203197 DD	0ffffffffH
	DD	FLAT:$L203193
$T203195 DD	019930520H
	DD	01H
	DD	FLAT:$T203197
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ?Clone@Image@Gdiplus@@UAEPAV12@XZ
_TEXT	SEGMENT
tv80 = -32						; size = 4
_this$ = -28						; size = 4
$T203190 = -24						; size = 4
$T203189 = -20						; size = 4
_cloneimage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Image@Gdiplus@@UAEPAV12@XZ PROC NEAR		; Gdiplus::Image::Clone, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@Image@Gdiplus@@UAEPAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 14	 sub	 esp, 20			; 00000014H
  0001b	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 97   :     GpImage *cloneimage = NULL;

  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cloneimage$[ebp], 0

; 98   : 
; 99   :     SetStatus(DllExports::GdipCloneImage(nativeImage, &cloneimage));

  00025	8d 45 f0	 lea	 eax, DWORD PTR _cloneimage$[ebp]
  00028	50		 push	 eax
  00029	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 _GdipCloneImage@8
  00035	50		 push	 eax
  00036	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 100  : 
; 101  :     return new Image(cloneimage, lastResult);

  0003e	6a 10		 push	 16			; 00000010H
  00040	e8 00 00 00 00	 call	 ??2GdiplusBase@Gdiplus@@SAPAXI@Z ; Gdiplus::GdiplusBase::operator new
  00045	83 c4 04	 add	 esp, 4
  00048	89 45 e8	 mov	 DWORD PTR $T203190[ebp], eax
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00052	83 7d e8 00	 cmp	 DWORD PTR $T203190[ebp], 0
  00056	74 18		 je	 SHORT $L203191
  00058	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	51		 push	 ecx
  0005f	8b 55 f0	 mov	 edx, DWORD PTR _cloneimage$[ebp]
  00062	52		 push	 edx
  00063	8b 4d e8	 mov	 ecx, DWORD PTR $T203190[ebp]
  00066	e8 00 00 00 00	 call	 ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ; Gdiplus::Image::Image
  0006b	89 45 e0	 mov	 DWORD PTR tv80[ebp], eax
  0006e	eb 07		 jmp	 SHORT $L203192
$L203191:
  00070	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$L203192:
  00077	8b 45 e0	 mov	 eax, DWORD PTR tv80[ebp]
  0007a	89 45 ec	 mov	 DWORD PTR $T203189[ebp], eax
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8b 45 ec	 mov	 eax, DWORD PTR $T203189[ebp]

; 102  : }

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L203193:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T203190[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3GdiplusBase@Gdiplus@@SAXPAX@Z ; Gdiplus::GdiplusBase::operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Clone@Image@Gdiplus@@UAEPAV12@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203195
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Clone@Image@Gdiplus@@UAEPAV12@XZ ENDP			; Gdiplus::Image::Clone
EXTRN	_GdipAlloc@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbase.h
;	COMDAT ??2GdiplusBase@Gdiplus@@SAPAXI@Z
_TEXT	SEGMENT
_in_size$ = 8						; size = 4
??2GdiplusBase@Gdiplus@@SAPAXI@Z PROC NEAR		; Gdiplus::GdiplusBase::operator new, COMDAT

; 26   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   :        return DllExports::GdipAlloc(in_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR _in_size$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _GdipAlloc@4

; 28   :     }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2GdiplusBase@Gdiplus@@SAPAXI@Z ENDP			; Gdiplus::GdiplusBase::operator new
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusheaders.h
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC NEAR ; Gdiplus::Image::SetStatus, COMDAT
; _this$ = ecx

; 472  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 473  :         if (status != Ok)

  00007	83 7d 08 00	 cmp	 DWORD PTR _status$[ebp], 0
  0000b	74 0e		 je	 SHORT $L119534

; 474  :             return (lastResult = status);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _status$[ebp]
  00013	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00016	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00019	eb 03		 jmp	 SHORT $L119533
$L119534:

; 475  :         else
; 476  :             return status;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$L119533:

; 477  :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Image::SetStatus
_TEXT	ENDS
EXTRN	_GdipGetImageWidth@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
;	COMDAT ?GetWidth@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_width$ = -4						; size = 4
?GetWidth@Image@Gdiplus@@QAEIXZ PROC NEAR		; Gdiplus::Image::GetWidth, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :     UINT width = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _width$[ebp], 0

; 227  : 
; 228  :     SetStatus(DllExports::GdipGetImageWidth(nativeImage, &width));

  00010	8d 45 fc	 lea	 eax, DWORD PTR _width$[ebp]
  00013	50		 push	 eax
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _GdipGetImageWidth@8
  00020	50		 push	 eax
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 229  : 
; 230  :     return width;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _width$[ebp]

; 231  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?GetWidth@Image@Gdiplus@@QAEIXZ ENDP			; Gdiplus::Image::GetWidth
_TEXT	ENDS
EXTRN	_GdipGetImageHeight@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetHeight@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_height$ = -4						; size = 4
?GetHeight@Image@Gdiplus@@QAEIXZ PROC NEAR		; Gdiplus::Image::GetHeight, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 236  :     UINT height = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _height$[ebp], 0

; 237  : 
; 238  :     SetStatus(DllExports::GdipGetImageHeight(nativeImage, &height));

  00010	8d 45 fc	 lea	 eax, DWORD PTR _height$[ebp]
  00013	50		 push	 eax
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _GdipGetImageHeight@8
  00020	50		 push	 eax
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 239  : 
; 240  :     return height;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]

; 241  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?GetHeight@Image@Gdiplus@@QAEIXZ ENDP			; Gdiplus::Image::GetHeight
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_lastStatus$ = -4					; size = 4
?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ PROC NEAR ; Gdiplus::Image::GetLastStatus, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 489  :     Status lastStatus = lastResult;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 4d fc	 mov	 DWORD PTR _lastStatus$[ebp], ecx

; 490  :     lastResult = Ok;

  00012	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00015	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 491  : 
; 492  :     return lastStatus;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _lastStatus$[ebp]

; 493  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?GetLastStatus@Image@Gdiplus@@QBE?AW4Status@2@XZ ENDP	; Gdiplus::Image::GetLastStatus
_TEXT	ENDS
PUBLIC	?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage
; Function compile flags: /Odt
;	COMDAT ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativeImage$ = 8					; size = 4
_status$ = 12						; size = 4
??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z PROC NEAR ; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Image@Gdiplus@@6B@

; 498  :     SetNativeImage(nativeImage);

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nativeImage$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage

; 499  :     lastResult = status;

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _status$[ebp]
  00022	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 500  : }

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ENDP	; Gdiplus::Image::Image
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativeImage$ = 8					; size = 4
?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z PROC NEAR ; Gdiplus::Image::SetNativeImage, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 505  :     this->nativeImage = nativeImage;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nativeImage$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 506  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ENDP	; Gdiplus::Image::SetNativeImage
_TEXT	ENDS
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T203224 DD	0ffffffffH
	DD	FLAT:$L203218
	DD	00H
	DD	FLAT:$L203217
$T203222 DD	019930520H
	DD	02H
	DD	FLAT:$T203224
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T203219 = -44						; size = 4
$T203216 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T203219[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00025	50		 push	 eax
  00026	8d 4d d8	 lea	 ecx, DWORD PTR $T203216[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0002f	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  00032	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  00035	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00038	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0003f	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00042	52		 push	 edx
  00043	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00056	8b 45 d4	 mov	 eax, DWORD PTR $T203219[ebp]
  00059	83 c8 01	 or	 eax, 1
  0005c	89 45 d4	 mov	 DWORD PTR $T203219[ebp], eax
  0005f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T203216[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0006c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L203217:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T203216[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203218:
  00009	8b 45 d4	 mov	 eax, DWORD PTR $T203219[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $L203220
  00015	83 65 d4 fe	 and	 DWORD PTR $T203219[ebp], -2 ; fffffffeH
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203220:
  00022	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203222
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T203237 DD	0ffffffffH
	DD	FLAT:$L203231
	DD	00H
	DD	FLAT:$L203230
$T203235 DD	019930520H
	DD	02H
	DD	FLAT:$T203237
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T203232 = -44						; size = 4
$T203229 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 51   : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T203232[ebp], 0

; 52   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00025	50		 push	 eax
  00026	8d 4d d8	 lea	 ecx, DWORD PTR $T203229[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0002f	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  00032	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  00035	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00038	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0003f	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00042	52		 push	 edx
  00043	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00056	8b 45 d4	 mov	 eax, DWORD PTR $T203232[ebp]
  00059	83 c8 01	 or	 eax, 1
  0005c	89 45 d4	 mov	 DWORD PTR $T203232[ebp], eax
  0005f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T203229[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0006c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 53   : 	}

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L203230:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T203229[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203231:
  00009	8b 45 d4	 mov	 eax, DWORD PTR $T203232[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $L203233
  00015	83 65 d4 fe	 and	 DWORD PTR $T203232[ebp], -2 ; fffffffeH
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L203233:
  00022	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203235
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
END
