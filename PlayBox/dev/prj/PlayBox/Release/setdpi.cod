; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\setdpi.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnlockResource@@YGHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG197538 DB	'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 00H
	ORG $+3
$SG197583 DB	'T', 00H, 'a', 00H, 'h', 00H, 'o', 00H, 'm', 00H, 'a', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	??0CSetDPI@@QAE@XZ				; CSetDPI::CSetDPI
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\setdpi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSetDPI@@QAE@XZ PROC NEAR				; CSetDPI::CSetDPI
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 311  :     hwnd=0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 312  :     font=0;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 313  :     oldfont=0;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 314  :     inst=0;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 315  :     IDD=0;

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 316  : }

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0CSetDPI@@QAE@XZ ENDP					; CSetDPI::CSetDPI
_TEXT	ENDS
PUBLIC	?Detach@CSetDPI@@QAEXXZ				; CSetDPI::Detach
PUBLIC	??1CSetDPI@@QAE@XZ				; CSetDPI::~CSetDPI
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSetDPI@@QAE@XZ PROC NEAR				; CSetDPI::~CSetDPI
; _this$ = ecx

; 318  : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp
  00043	51		 push	 ecx
  00044	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     Detach();

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Detach@CSetDPI@@QAEXXZ	; CSetDPI::Detach

; 320  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??1CSetDPI@@QAE@XZ ENDP					; CSetDPI::~CSetDPI
_TEXT	ENDS
PUBLIC	?UnlockResource@@YGHPAX@Z			; UnlockResource
PUBLIC	__real@4052000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4020000000000000
PUBLIC	?Attach@CSetDPI@@QAEXPAUHINSTANCE__@@PAUHWND__@@HN@Z ; CSetDPI::Attach
PUBLIC	?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ; helper::DlgTemplateItemCount
PUBLIC	?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ; helper::FindFirstDlgItem
PUBLIC	?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ; helper::FindNextDlgItem
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__FreeResource@4:NEAR
EXTRN	__imp__LockResource@4:NEAR
EXTRN	__imp__CreateFontW@56:NEAR
EXTRN	__imp__MoveWindow@24:NEAR
EXTRN	__imp__BeginPaint@8:NEAR
EXTRN	__imp__EndPaint@8:NEAR
EXTRN	__ftol2:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__fltused:NEAR
EXTRN	__imp__GetClientRect@8:NEAR
EXTRN	__imp__AdjustWindowRectEx@16:NEAR
EXTRN	__imp__GetDlgCtrlID@4:NEAR
EXTRN	__imp__ClientToScreen@8:NEAR
EXTRN	__imp__FindResourceA@12:NEAR
EXTRN	__imp__LoadResource@8:NEAR
EXTRN	__imp__GetWindow@8:NEAR
;	COMDAT __real@4052000000000000
CONST	SEGMENT
__real@4052000000000000 DQ 04052000000000000r	; 72
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
tv416 = -204						; size = 4
tv412 = -200						; size = 4
tv408 = -196						; size = 4
tv404 = -192						; size = 4
tv368 = -188						; size = 4
tv364 = -184						; size = 4
_this$ = -180						; size = 4
_t$ = -176						; size = 4
_hDialogTemplate$ = -172				; size = 4
_item$ = -168						; size = 4
_lpDialogTemplate$ = -164				; size = 4
_y_n$ = -160						; size = 8
_hResource$ = -152					; size = 4
_dd$ = -148						; size = 20
_x_n$ = -128						; size = 8
_wnd$ = -116						; size = 4
_szf$ = -112						; size = 8
_y_d$ = -104						; size = 8
_ps$ = -96						; size = 64
__$ArrayPad$ = -32					; size = 4
_dc$ = -28						; size = 4
_rect$ = -24						; size = 16
_x_d$ = -8						; size = 8
__$ReturnAddr$ = 4					; size = 4
_hInst$ = 8						; size = 4
__hwnd$ = 12						; size = 4
__IDD$ = 16						; size = 4
_dpi$ = 20						; size = 8
?Attach@CSetDPI@@QAEXPAUHINSTANCE__@@PAUHWND__@@HN@Z PROC NEAR ; CSetDPI::Attach
; _this$ = ecx

; 323  : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0006e	89 45 e0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00071	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 324  :     int t;
; 325  : 
; 326  :     if (hwnd) Detach();

  00077	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0007d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00081	74 0b		 je	 SHORT $L197598
  00083	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?Detach@CSetDPI@@QAEXXZ	; CSetDPI::Detach
$L197598:

; 327  : 
; 328  :     inst = hInst;

  0008e	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00094	8b 55 08	 mov	 edx, DWORD PTR _hInst$[ebp]
  00097	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 329  :     IDD = _IDD;

  0009a	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 4d 10	 mov	 ecx, DWORD PTR __IDD$[ebp]
  000a3	89 08		 mov	 DWORD PTR [eax], ecx

; 330  : 
; 331  :     hwnd=_hwnd;

  000a5	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000ab	8b 45 0c	 mov	 eax, DWORD PTR __hwnd$[ebp]
  000ae	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 332  : 
; 333  :     helper::DLGTEMPLATEEX *lpDialogTemplate;
; 334  : 
; 335  :     if (!hInst)
; 336  : 	    { } // hInst = AfxFindResourceHandle(IMAKEINTRESOURCE(IDD), RT_DIALOG);
; 337  : 
; 338  : 	HRSRC hResource = ::FindResource(hInst, MAKEINTRESOURCE(IDD), RT_DIALOG);

  000b1	6a 05		 push	 5
  000b3	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000bc	52		 push	 edx
  000bd	8b 45 08	 mov	 eax, DWORD PTR _hInst$[ebp]
  000c0	50		 push	 eax
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  000c7	89 85 68 ff ff
	ff		 mov	 DWORD PTR _hResource$[ebp], eax

; 339  : 	HANDLE hDialogTemplate = LoadResource(hInst, hResource);

  000cd	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _hResource$[ebp]
  000d3	51		 push	 ecx
  000d4	8b 55 08	 mov	 edx, DWORD PTR _hInst$[ebp]
  000d7	52		 push	 edx
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  000de	89 85 54 ff ff
	ff		 mov	 DWORD PTR _hDialogTemplate$[ebp], eax

; 340  : 	lpDialogTemplate = (helper::DLGTEMPLATEEX *)LockResource(hDialogTemplate);    

  000e4	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _hDialogTemplate$[ebp]
  000ea	50		 push	 eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  000f1	89 85 5c ff ff
	ff		 mov	 DWORD PTR _lpDialogTemplate$[ebp], eax

; 341  : 
; 342  : 
; 343  : 	dialogdata_t dd;
; 344  :     querydialogdata((LPCSTR)lpDialogTemplate,&dd);

  000f7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _dd$[ebp]
  000fd	51		 push	 ecx
  000fe	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ?querydialogdata@@YAXPBDPAUdialogdata_t@@@Z ; querydialogdata
  0010a	83 c4 08	 add	 esp, 8

; 345  : 
; 346  :     if ((dd.pt<0)||(dd.pt>32767))

  0010d	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _dd$[ebp], 0
  00114	7c 0c		 jl	 SHORT $L197613
  00116	81 bd 6c ff ff
	ff ff 7f 00 00	 cmp	 DWORD PTR _dd$[ebp], 32767 ; 00007fffH
  00120	7e 20		 jle	 SHORT $L197612
$L197613:

; 347  :     {
; 348  :         // I don't know what to do if it happens this way
; 349  :         // this is a compromise solution:
; 350  :         dd.pt=-dd.pt;

  00122	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _dd$[ebp]
  00128	f7 d8		 neg	 eax
  0012a	89 85 6c ff ff
	ff		 mov	 DWORD PTR _dd$[ebp], eax

; 351  :         dd.pt&=0xFFFF;

  00130	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dd$[ebp]
  00136	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0013c	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _dd$[ebp], ecx
$L197612:

; 352  :     }
; 353  : 
; 354  :     font=CreateFontW(
; 355  : 		-(int)(dd.pt*dpi/72.0 + 0.5), // negative makes it use "char size"
; 356  :     0,              // logical average character width 
; 357  :     0,              // angle of escapement 
; 358  :     0,              // base-line orientation angle 
; 359  :     dd.weight,  // weight
; 360  :     dd.italic,  // italic
; 361  :     FALSE,          // underline attribute flag 
; 362  :     FALSE,          // strikeout attribute flag 
; 363  :     DEFAULT_CHARSET,    // character set identifier 
; 364  :     OUT_DEFAULT_PRECIS, // output precision 
; 365  :     CLIP_DEFAULT_PRECIS,// clipping precision 
; 366  :     DEFAULT_QUALITY,    // output quality 
; 367  :     DEFAULT_PITCH,  // pitch and family 
; 368  :     dd.faceName  // pointer to typeface name string 
; 369  :     );

  00142	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _dd$[ebp+16]
  00148	52		 push	 edx
  00149	6a 00		 push	 0
  0014b	6a 00		 push	 0
  0014d	6a 00		 push	 0
  0014f	6a 00		 push	 0
  00151	6a 01		 push	 1
  00153	6a 00		 push	 0
  00155	6a 00		 push	 0
  00157	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _dd$[ebp+12]
  0015d	50		 push	 eax
  0015e	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _dd$[ebp+8]
  00164	51		 push	 ecx
  00165	6a 00		 push	 0
  00167	6a 00		 push	 0
  00169	6a 00		 push	 0
  0016b	db 85 6c ff ff
	ff		 fild	 DWORD PTR _dd$[ebp]
  00171	dc 4d 14	 fmul	 QWORD PTR _dpi$[ebp]
  00174	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4052000000000000
  0017a	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00180	e8 00 00 00 00	 call	 __ftol2
  00185	f7 d8		 neg	 eax
  00187	50		 push	 eax
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontW@56
  0018e	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00194	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 370  : 
; 371  :     oldfont=(HFONT)::SendMessage(hwnd, WM_GETFONT, 0, 0);

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	6a 31		 push	 49			; 00000031H
  0019d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  001a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a6	51		 push	 ecx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  001ad	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001b3	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 372  :     SendMessage(hwnd, WM_SETFONT, (LPARAM)font, TRUE);

  001b6	6a 01		 push	 1
  001b8	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  001be	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001c1	51		 push	 ecx
  001c2	6a 30		 push	 48			; 00000030H
  001c4	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001cd	50		 push	 eax
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 373  :   
; 374  : 	SIZE szf;
; 375  : 
; 376  : 	
; 377  :     PAINTSTRUCT ps;
; 378  :     HDC dc=BeginPaint(hwnd, &ps);

  001d4	8d 4d a0	 lea	 ecx, DWORD PTR _ps$[ebp]
  001d7	51		 push	 ecx
  001d8	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001de	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e1	50		 push	 eax
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  001e8	89 45 e4	 mov	 DWORD PTR _dc$[ebp], eax

; 379  :     getptsize(dc,font,&szf);

  001eb	8d 4d 90	 lea	 ecx, DWORD PTR _szf$[ebp]
  001ee	51		 push	 ecx
  001ef	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001f5	83 c2 0c	 add	 edx, 12			; 0000000cH
  001f8	52		 push	 edx
  001f9	8d 45 e4	 lea	 eax, DWORD PTR _dc$[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z ; getptsize
  00202	83 c4 0c	 add	 esp, 12			; 0000000cH

; 380  :     EndPaint(hwnd, &ps);

  00205	8d 4d a0	 lea	 ecx, DWORD PTR _ps$[ebp]
  00208	51		 push	 ecx
  00209	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0020f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00212	50		 push	 eax
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8

; 381  : 	
; 382  : 
; 383  :     double x_n=szf.cx,

  00219	db 45 90	 fild	 DWORD PTR _szf$[ebp]
  0021c	dd 5d 80	 fstp	 QWORD PTR _x_n$[ebp]

; 384  :            x_d=4,

  0021f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4010000000000000
  00225	dd 5d f8	 fstp	 QWORD PTR _x_d$[ebp]

; 385  :            y_n=szf.cy,

  00228	db 45 94	 fild	 DWORD PTR _szf$[ebp+4]
  0022b	dd 9d 60 ff ff
	ff		 fstp	 QWORD PTR _y_n$[ebp]

; 386  :            y_d=8;

  00231	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4020000000000000
  00237	dd 5d 98	 fstp	 QWORD PTR _y_d$[ebp]

; 387  : 
; 388  : 	RECT rect;
; 389  : 	GetClientRect(hwnd,&rect);	

  0023a	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00244	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00247	50		 push	 eax
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 390  : 	
; 391  : 	rect.right=rect.left+(int)(lpDialogTemplate->cx*x_n/x_d+0.5);

  0024e	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpDialogTemplate$[ebp]
  00254	0f bf 51 16	 movsx	 edx, WORD PTR [ecx+22]
  00258	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv364[ebp], edx
  0025e	db 85 48 ff ff
	ff		 fild	 DWORD PTR tv364[ebp]
  00264	dc 4d 80	 fmul	 QWORD PTR _x_n$[ebp]
  00267	dc 75 f8	 fdiv	 QWORD PTR _x_d$[ebp]
  0026a	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00270	e8 00 00 00 00	 call	 __ftol2
  00275	03 45 e8	 add	 eax, DWORD PTR _rect$[ebp]
  00278	89 45 f0	 mov	 DWORD PTR _rect$[ebp+8], eax

; 392  : 	rect.bottom=rect.top+(int)(lpDialogTemplate->cy*y_n/y_d+0.5);

  0027b	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpDialogTemplate$[ebp]
  00281	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  00285	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv368[ebp], ecx
  0028b	db 85 44 ff ff
	ff		 fild	 DWORD PTR tv368[ebp]
  00291	dc 8d 60 ff ff
	ff		 fmul	 QWORD PTR _y_n$[ebp]
  00297	dc 75 98	 fdiv	 QWORD PTR _y_d$[ebp]
  0029a	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  002a0	e8 00 00 00 00	 call	 __ftol2
  002a5	03 45 ec	 add	 eax, DWORD PTR _rect$[ebp+4]
  002a8	89 45 f4	 mov	 DWORD PTR _rect$[ebp+12], eax

; 393  : 
; 394  : 	ClientToScreen(hwnd, (LPPOINT)&rect);

  002ab	8d 55 e8	 lea	 edx, DWORD PTR _rect$[ebp]
  002ae	52		 push	 edx
  002af	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002b8	51		 push	 ecx
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 395  : 	ClientToScreen(hwnd, ((LPPOINT)&rect)+1);

  002bf	8d 55 f0	 lea	 edx, DWORD PTR _rect$[ebp+8]
  002c2	52		 push	 edx
  002c3	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002cc	51		 push	 ecx
  002cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 396  : 
; 397  :     AdjustWindowRectEx(&rect, lpDialogTemplate->style, dd.has_menu, lpDialogTemplate->exStyle );

  002d3	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  002d9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002dc	50		 push	 eax
  002dd	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _dd$[ebp+4]
  002e3	51		 push	 ecx
  002e4	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  002ea	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002ed	50		 push	 eax
  002ee	8d 4d e8	 lea	 ecx, DWORD PTR _rect$[ebp]
  002f1	51		 push	 ecx
  002f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustWindowRectEx@16

; 398  : 	MoveWindow(hwnd,rect.left,rect.top,rect.right-rect.left,rect.bottom-rect.top,TRUE);

  002f8	6a 01		 push	 1
  002fa	8b 55 f4	 mov	 edx, DWORD PTR _rect$[ebp+12]
  002fd	2b 55 ec	 sub	 edx, DWORD PTR _rect$[ebp+4]
  00300	52		 push	 edx
  00301	8b 45 f0	 mov	 eax, DWORD PTR _rect$[ebp+8]
  00304	2b 45 e8	 sub	 eax, DWORD PTR _rect$[ebp]
  00307	50		 push	 eax
  00308	8b 4d ec	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  0030b	51		 push	 ecx
  0030c	8b 55 e8	 mov	 edx, DWORD PTR _rect$[ebp]
  0030f	52		 push	 edx
  00310	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00316	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00319	51		 push	 ecx
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 399  : 
; 400  : 
; 401  : 	helper::DLGITEMTEMPLATEEX *item=
; 402  : 		(helper::DLGITEMTEMPLATEEX *)helper::FindFirstDlgItem((DLGTEMPLATE *)lpDialogTemplate);

  00320	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _lpDialogTemplate$[ebp]
  00326	52		 push	 edx
  00327	e8 00 00 00 00	 call	 ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ; helper::FindFirstDlgItem
  0032c	83 c4 04	 add	 esp, 4
  0032f	89 85 58 ff ff
	ff		 mov	 DWORD PTR _item$[ebp], eax

; 403  : 
; 404  : 	HWND wnd;
; 405  : 
; 406  : 	for(t=0;t<helper::DlgTemplateItemCount((DLGTEMPLATE *)lpDialogTemplate);t++)

  00335	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _t$[ebp], 0
  0033f	eb 0f		 jmp	 SHORT $L197634
$L197635:
  00341	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _t$[ebp]
  00347	83 c0 01	 add	 eax, 1
  0034a	89 85 50 ff ff
	ff		 mov	 DWORD PTR _t$[ebp], eax
$L197634:
  00350	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpDialogTemplate$[ebp]
  00356	51		 push	 ecx
  00357	e8 00 00 00 00	 call	 ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ; helper::DlgTemplateItemCount
  0035c	83 c4 04	 add	 esp, 4
  0035f	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00362	39 95 50 ff ff
	ff		 cmp	 DWORD PTR _t$[ebp], edx
  00368	0f 8d 4c 01 00
	00		 jge	 $L197636

; 407  : 	{
; 408  : 		// OLD IMPLEMENTATION: wnd=GetDlgItem(hwnd,item->id);
; 409  : 
; 410  : 	    // TODO: check if it is the best implementation
; 411  : 	    //       are we sure that controls will preserve the order?
; 412  : 
; 413  : 		if (!t) 

  0036e	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _t$[ebp], 0
  00375	75 17		 jne	 SHORT $L197637

; 414  : 			wnd=GetWindow(hwnd,GW_CHILD);

  00377	6a 05		 push	 5
  00379	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0037f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00382	51		 push	 ecx
  00383	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  00389	89 45 8c	 mov	 DWORD PTR _wnd$[ebp], eax

; 415  : 		else

  0038c	eb 0f		 jmp	 SHORT $L197640
$L197637:

; 416  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  0038e	6a 02		 push	 2
  00390	8b 55 8c	 mov	 edx, DWORD PTR _wnd$[ebp]
  00393	52		 push	 edx
  00394	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  0039a	89 45 8c	 mov	 DWORD PTR _wnd$[ebp], eax
$L197640:

; 417  : 		
; 418  : 		while ((wnd)&&(GetDlgCtrlID(wnd) != item->id)) 

  0039d	83 7d 8c 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  003a1	74 26		 je	 SHORT $L197641
  003a3	8b 45 8c	 mov	 eax, DWORD PTR _wnd$[ebp]
  003a6	50		 push	 eax
  003a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgCtrlID@4
  003ad	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _item$[ebp]
  003b3	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  003b6	74 11		 je	 SHORT $L197641

; 419  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  003b8	6a 02		 push	 2
  003ba	8b 55 8c	 mov	 edx, DWORD PTR _wnd$[ebp]
  003bd	52		 push	 edx
  003be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  003c4	89 45 8c	 mov	 DWORD PTR _wnd$[ebp], eax
  003c7	eb d4		 jmp	 SHORT $L197640
$L197641:

; 420  : 
; 421  : 		if (!wnd) break;

  003c9	83 7d 8c 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  003cd	75 05		 jne	 SHORT $L197642
  003cf	e9 e6 00 00 00	 jmp	 $L197636
$L197642:

; 422  : 	    
; 423  : 		MoveWindow(wnd,(int)(item->x*x_n/x_d+0.5),
; 424  : 		               (int)(item->y*y_n/y_d+0.5),
; 425  : 		               (int)(item->cx*x_n/x_d+0.5),
; 426  : 		               (int)(item->cy*y_n/y_d+0.5), TRUE);

  003d4	6a 01		 push	 1
  003d6	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _item$[ebp]
  003dc	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  003e0	89 8d 40 ff ff
	ff		 mov	 DWORD PTR tv404[ebp], ecx
  003e6	db 85 40 ff ff
	ff		 fild	 DWORD PTR tv404[ebp]
  003ec	dc 8d 60 ff ff
	ff		 fmul	 QWORD PTR _y_n$[ebp]
  003f2	dc 75 98	 fdiv	 QWORD PTR _y_d$[ebp]
  003f5	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  003fb	e8 00 00 00 00	 call	 __ftol2
  00400	50		 push	 eax
  00401	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _item$[ebp]
  00407	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  0040b	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv408[ebp], eax
  00411	db 85 3c ff ff
	ff		 fild	 DWORD PTR tv408[ebp]
  00417	dc 4d 80	 fmul	 QWORD PTR _x_n$[ebp]
  0041a	dc 75 f8	 fdiv	 QWORD PTR _x_d$[ebp]
  0041d	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00423	e8 00 00 00 00	 call	 __ftol2
  00428	50		 push	 eax
  00429	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _item$[ebp]
  0042f	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  00433	89 95 38 ff ff
	ff		 mov	 DWORD PTR tv412[ebp], edx
  00439	db 85 38 ff ff
	ff		 fild	 DWORD PTR tv412[ebp]
  0043f	dc 8d 60 ff ff
	ff		 fmul	 QWORD PTR _y_n$[ebp]
  00445	dc 75 98	 fdiv	 QWORD PTR _y_d$[ebp]
  00448	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0044e	e8 00 00 00 00	 call	 __ftol2
  00453	50		 push	 eax
  00454	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _item$[ebp]
  0045a	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  0045e	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv416[ebp], ecx
  00464	db 85 34 ff ff
	ff		 fild	 DWORD PTR tv416[ebp]
  0046a	dc 4d 80	 fmul	 QWORD PTR _x_n$[ebp]
  0046d	dc 75 f8	 fdiv	 QWORD PTR _x_d$[ebp]
  00470	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00476	e8 00 00 00 00	 call	 __ftol2
  0047b	50		 push	 eax
  0047c	8b 55 8c	 mov	 edx, DWORD PTR _wnd$[ebp]
  0047f	52		 push	 edx
  00480	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 427  : 
; 428  :         SendMessage(wnd, WM_SETFONT, (LPARAM)font, TRUE);

  00486	6a 01		 push	 1
  00488	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0048e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00491	51		 push	 ecx
  00492	6a 30		 push	 48			; 00000030H
  00494	8b 55 8c	 mov	 edx, DWORD PTR _wnd$[ebp]
  00497	52		 push	 edx
  00498	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 429  : 		
; 430  : 		item=(helper::DLGITEMTEMPLATEEX *)helper::FindNextDlgItem((DLGITEMTEMPLATE *)item,TRUE);

  0049e	6a 01		 push	 1
  004a0	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _item$[ebp]
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ; helper::FindNextDlgItem
  004ac	83 c4 08	 add	 esp, 8
  004af	89 85 58 ff ff
	ff		 mov	 DWORD PTR _item$[ebp], eax

; 431  : 	}

  004b5	e9 87 fe ff ff	 jmp	 $L197635
$L197636:

; 432  : 
; 433  :     UnlockResource(hDialogTemplate);    

  004ba	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _hDialogTemplate$[ebp]
  004c0	51		 push	 ecx
  004c1	e8 00 00 00 00	 call	 ?UnlockResource@@YGHPAX@Z ; UnlockResource

; 434  :     FreeResource(hDialogTemplate);

  004c6	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _hDialogTemplate$[ebp]
  004cc	52		 push	 edx
  004cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4

; 435  : }

  004d3	8b 4d e0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004db	8b e5		 mov	 esp, ebp
  004dd	5d		 pop	 ebp
  004de	c2 14 00	 ret	 20			; 00000014H
?Attach@CSetDPI@@QAEXPAUHINSTANCE__@@PAUHWND__@@HN@Z ENDP ; CSetDPI::Attach
_TEXT	ENDS
PUBLIC	?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z	; helper::IsDialogEx
; Function compile flags: /Odt
;	COMDAT ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z
_TEXT	SEGMENT
_pTemplate$ = 8						; size = 4
?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z PROC NEAR ; helper::DlgTemplateItemCount, COMDAT

; 97   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 		if (IsDialogEx(pTemplate))

  00003	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z ; helper::IsDialogEx
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 08		 je	 SHORT $L197459

; 99   : 			return reinterpret_cast<DLGTEMPLATEEX*>(pTemplate)->cDlgItems;

  00013	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00016	83 c0 10	 add	 eax, 16			; 00000010H
  00019	eb 06		 jmp	 SHORT $L197458
$L197459:

; 100  : 		else
; 101  : 			return pTemplate->cdit;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  0001e	83 c0 08	 add	 eax, 8
$L197458:

; 102  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ENDP ; helper::DlgTemplateItemCount
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT
_pTemplate$ = 8						; size = 4
?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z PROC NEAR	; helper::IsDialogEx, COMDAT

; 92   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 		return ((DLGTEMPLATEEX*)pTemplate)->signature == 0xFFFF;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00006	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  0000a	2d ff ff 00 00	 sub	 eax, 65535		; 0000ffffH
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax

; 94   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z ENDP		; helper::IsDialogEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z
_TEXT	SEGMENT
_pw$ = -12						; size = 4
_dwStyle$ = -8						; size = 4
_bDialogEx$ = -4					; size = 4
_pTemplate$ = 8						; size = 4
?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z PROC NEAR ; helper::FindFirstDlgItem, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  : 		BOOL bDialogEx = IsDialogEx(pTemplate);

  00006	8b 45 08	 mov	 eax, DWORD PTR _pTemplate$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?IsDialogEx@helper@@SAHPBUDLGTEMPLATE@@@Z ; helper::IsDialogEx
  0000f	83 c4 04	 add	 esp, 4
  00012	89 45 fc	 mov	 DWORD PTR _bDialogEx$[ebp], eax

; 115  : 
; 116  : 		WORD* pw;
; 117  : 		DWORD dwStyle;
; 118  : 		if (bDialogEx)

  00015	83 7d fc 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  00019	74 14		 je	 SHORT $L197470

; 119  : 		{
; 120  : 			pw = (WORD*)((DLGTEMPLATEEX*)pTemplate + 1);

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pTemplate$[ebp]
  0001e	83 c1 1a	 add	 ecx, 26			; 0000001aH
  00021	89 4d f4	 mov	 DWORD PTR _pw$[ebp], ecx

; 121  : 			dwStyle = ((DLGTEMPLATEEX*)pTemplate)->style;

  00024	8b 55 08	 mov	 edx, DWORD PTR _pTemplate$[ebp]
  00027	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0002a	89 45 f8	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 122  : 		}
; 123  : 		else

  0002d	eb 11		 jmp	 SHORT $L197474
$L197470:

; 124  : 		{
; 125  : 			pw = (WORD*)(pTemplate + 1);

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pTemplate$[ebp]
  00032	83 c1 12	 add	 ecx, 18			; 00000012H
  00035	89 4d f4	 mov	 DWORD PTR _pw$[ebp], ecx

; 126  : 			dwStyle = pTemplate->style;

  00038	8b 55 08	 mov	 edx, DWORD PTR _pTemplate$[ebp]
  0003b	8b 02		 mov	 eax, DWORD PTR [edx]
  0003d	89 45 f8	 mov	 DWORD PTR _dwStyle$[ebp], eax
$L197474:

; 127  : 		}
; 128  : 
; 129  : 		// Check for presence of menu and skip it if there is one
; 130  : 		// 0x0000 means there is no menu
; 131  : 		// 0xFFFF means there is a menu ID following
; 132  : 		// Everything else means that this is a NULL terminated Unicode string
; 133  : 		// which identifies the menu resource
; 134  : 		if (*pw == 0xFFFF)

  00040	8b 4d f4	 mov	 ecx, DWORD PTR _pw$[ebp]
  00043	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00046	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  0004c	75 0b		 jne	 SHORT $L197479

; 135  : 			pw += 2;				// Has menu ID, so skip 2 words

  0004e	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  00051	83 c0 04	 add	 eax, 4
  00054	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax

; 136  : 		else

  00057	eb 15		 jmp	 SHORT $L197477
$L197479:

; 137  : 			while (*pw++);			// Either No menu, or string, skip past terminating NULL

  00059	8b 4d f4	 mov	 ecx, DWORD PTR _pw$[ebp]
  0005c	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0005f	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  00062	83 c0 02	 add	 eax, 2
  00065	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax
  00068	85 d2		 test	 edx, edx
  0006a	74 02		 je	 SHORT $L197477
  0006c	eb eb		 jmp	 SHORT $L197479
$L197477:

; 138  : 
; 139  : 		// Check for presence of class name string
; 140  : 		// 0x0000 means "Use system dialog class name"
; 141  : 		// 0xFFFF means there is a window class (atom) specified
; 142  : 		// Everything else means that this is a NULL terminated Unicode string
; 143  : 		// which identifies the menu resource
; 144  : 		if (*pw == 0xFFFF)

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR _pw$[ebp]
  00071	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00074	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  0007a	75 0b		 jne	 SHORT $L197484

; 145  : 			pw += 2;				// Has class atom, so skip 2 words

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  0007f	83 c0 04	 add	 eax, 4
  00082	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax

; 146  : 		else

  00085	eb 15		 jmp	 SHORT $L197487
$L197484:

; 147  : 			while (*pw++);			// Either No class, or string, skip past terminating NULL

  00087	8b 4d f4	 mov	 ecx, DWORD PTR _pw$[ebp]
  0008a	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0008d	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  00090	83 c0 02	 add	 eax, 2
  00093	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax
  00096	85 d2		 test	 edx, edx
  00098	74 02		 je	 SHORT $L197487
  0009a	eb eb		 jmp	 SHORT $L197484
$L197487:

; 148  : 
; 149  : 		// Skip caption string
; 150  : 		while (*pw++);

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR _pw$[ebp]
  0009f	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000a2	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  000a5	83 c0 02	 add	 eax, 2
  000a8	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax
  000ab	85 d2		 test	 edx, edx
  000ad	74 02		 je	 SHORT $L197488
  000af	eb eb		 jmp	 SHORT $L197487
$L197488:

; 151  : 
; 152  : 		// If we have DS_SETFONT, there is extra font information which we must now skip
; 153  : 		if (dwStyle & DS_SETFONT)

  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  000b4	83 e1 40	 and	 ecx, 64			; 00000040H
  000b7	74 2f		 je	 SHORT $L197489

; 154  : 		{
; 155  : 			// If it is a regular DLGTEMPLATE there is only a short for the point size
; 156  : 			// and a string specifying the font (typefacename).  If this is a DLGTEMPLATEEX
; 157  : 			// then there is also the font weight, and bItalic which must be skipped
; 158  : 			if (bDialogEx)

  000b9	83 7d fc 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  000bd	74 0b		 je	 SHORT $L197490

; 159  : 				pw += 3;			// Skip font size, weight, (italic, charset)

  000bf	8b 55 f4	 mov	 edx, DWORD PTR _pw$[ebp]
  000c2	83 c2 06	 add	 edx, 6
  000c5	89 55 f4	 mov	 DWORD PTR _pw$[ebp], edx

; 160  : 			else

  000c8	eb 09		 jmp	 SHORT $L197493
$L197490:

; 161  : 				pw += 1;			// Skip font size

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  000cd	83 c0 02	 add	 eax, 2
  000d0	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax
$L197493:

; 162  : 			while (*pw++);			// Skip typeface name

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR _pw$[ebp]
  000d6	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000d9	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  000dc	83 c0 02	 add	 eax, 2
  000df	89 45 f4	 mov	 DWORD PTR _pw$[ebp], eax
  000e2	85 d2		 test	 edx, edx
  000e4	74 02		 je	 SHORT $L197489
  000e6	eb eb		 jmp	 SHORT $L197493
$L197489:

; 163  : 		}
; 164  : 
; 165  : 		// Dword-align and return
; 166  : 		return (DLGITEMTEMPLATE*)(((DWORD_PTR)pw + 3) & ~3);

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _pw$[ebp]
  000eb	83 c0 03	 add	 eax, 3
  000ee	83 e0 fc	 and	 eax, -4			; fffffffcH

; 167  : 	}

  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ENDP ; helper::FindFirstDlgItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z
_TEXT	SEGMENT
_pw$ = -8						; size = 4
_cbExtra$ = -4						; size = 2
_pItem$ = 8						; size = 4
_bDialogEx$ = 12					; size = 4
?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z PROC NEAR ; helper::FindNextDlgItem, COMDAT

; 172  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 173  : 		WORD* pw;
; 174  : 
; 175  : 		// First skip fixed size header information, size of which depends
; 176  : 		// if this is a DLGITEMTEMPLATE or DLGITEMTEMPLATEEX
; 177  : 		if (bDialogEx)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  0000a	74 0b		 je	 SHORT $L197499

; 178  : 			pw = (WORD*)((DLGITEMTEMPLATEEX*)pItem + 1);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000f	83 c0 18	 add	 eax, 24			; 00000018H
  00012	89 45 f8	 mov	 DWORD PTR _pw$[ebp], eax

; 179  : 		else

  00015	eb 09		 jmp	 SHORT $L197502
$L197499:

; 180  : 			pw = (WORD*)(pItem + 1);

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  0001a	83 c1 12	 add	 ecx, 18			; 00000012H
  0001d	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx
$L197502:

; 181  : 
; 182  : 		if (*pw == 0xFFFF)			// Skip class name ordinal or string

  00020	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  00023	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00026	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0002b	75 0b		 jne	 SHORT $L197507

; 183  : 			pw += 2; // (WORDs)

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  00030	83 c1 04	 add	 ecx, 4
  00033	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx

; 184  : 		else

  00036	eb 15		 jmp	 SHORT $L197505
$L197507:

; 185  : 			while (*pw++);

  00038	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  0003b	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  00041	83 c1 02	 add	 ecx, 2
  00044	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx
  00047	85 c0		 test	 eax, eax
  00049	74 02		 je	 SHORT $L197505
  0004b	eb eb		 jmp	 SHORT $L197507
$L197505:

; 186  : 
; 187  : 		if (*pw == 0xFFFF)			// Skip title ordinal or string

  0004d	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  00050	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00053	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00058	75 0b		 jne	 SHORT $L197512

; 188  : 			pw += 2; // (WORDs)

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  0005d	83 c1 04	 add	 ecx, 4
  00060	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx

; 189  : 		else

  00063	eb 15		 jmp	 SHORT $L197510
$L197512:

; 190  : 			while (*pw++);

  00065	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  00068	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  0006e	83 c1 02	 add	 ecx, 2
  00071	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx
  00074	85 c0		 test	 eax, eax
  00076	74 02		 je	 SHORT $L197510
  00078	eb eb		 jmp	 SHORT $L197512
$L197510:

; 191  : 
; 192  : 		WORD cbExtra = *pw++;		// Skip extra data

  0007a	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  0007d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00080	66 89 45 fc	 mov	 WORD PTR _cbExtra$[ebp], ax
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _pw$[ebp]
  00087	83 c1 02	 add	 ecx, 2
  0008a	89 4d f8	 mov	 DWORD PTR _pw$[ebp], ecx

; 193  : 
; 194  : 		// cbExtra includes the size WORD in DIALOG resource.
; 195  : 		if (cbExtra != 0 && !bDialogEx)

  0008d	0f b7 55 fc	 movzx	 edx, WORD PTR _cbExtra$[ebp]
  00091	85 d2		 test	 edx, edx
  00093	74 11		 je	 SHORT $L197515
  00095	83 7d 0c 00	 cmp	 DWORD PTR _bDialogEx$[ebp], 0
  00099	75 0b		 jne	 SHORT $L197515

; 196  : 			cbExtra -= 2;

  0009b	0f b7 45 fc	 movzx	 eax, WORD PTR _cbExtra$[ebp]
  0009f	83 e8 02	 sub	 eax, 2
  000a2	66 89 45 fc	 mov	 WORD PTR _cbExtra$[ebp], ax
$L197515:

; 197  : 
; 198  : 		// Dword-align and return
; 199  : 		return (DLGITEMTEMPLATE*)(((DWORD_PTR)pw + cbExtra + 3) & ~3);

  000a6	0f b7 4d fc	 movzx	 ecx, WORD PTR _cbExtra$[ebp]
  000aa	8b 55 f8	 mov	 edx, DWORD PTR _pw$[ebp]
  000ad	8d 44 0a 03	 lea	 eax, DWORD PTR [edx+ecx+3]
  000b1	83 e0 fc	 and	 eax, -4			; fffffffcH

; 200  : 	}

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ENDP ; helper::FindNextDlgItem
_TEXT	ENDS
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__GetTextMetricsA@8:NEAR
EXTRN	__imp__GetTextExtentPointA@16:NEAR
;	COMDAT ?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA
_DATA	SEGMENT
?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA DD FLAT:$SG197538 ; `getptsize'::`2'::sym
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_sz$ = -68						; size = 8
_t$ = -60						; size = 56
_oldfont$ = -4						; size = 4
_dc$ = 8						; size = 4
_font$ = 12						; size = 4
_pSize$ = 16						; size = 4
?getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z PROC NEAR ; getptsize

; 214  : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp
  004f3	83 ec 44	 sub	 esp, 68			; 00000044H

; 215  :     HFONT oldfont = 0;

  004f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _oldfont$[ebp], 0

; 216  :     static char *sym = "abcdefghijklmnopqrstuvwxyz"
; 217  :                        "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
; 218  :     SIZE sz;
; 219  :     TEXTMETRICA t;      
; 220  :     oldfont = (HFONT)SelectObject(dc,font);

  004fd	8b 45 0c	 mov	 eax, DWORD PTR _font$[ebp]
  00500	8b 08		 mov	 ecx, DWORD PTR [eax]
  00502	51		 push	 ecx
  00503	8b 55 08	 mov	 edx, DWORD PTR _dc$[ebp]
  00506	8b 02		 mov	 eax, DWORD PTR [edx]
  00508	50		 push	 eax
  00509	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  0050f	89 45 fc	 mov	 DWORD PTR _oldfont$[ebp], eax

; 221  :     GetTextMetricsA(dc,&t);

  00512	8d 4d c4	 lea	 ecx, DWORD PTR _t$[ebp]
  00515	51		 push	 ecx
  00516	8b 55 08	 mov	 edx, DWORD PTR _dc$[ebp]
  00519	8b 02		 mov	 eax, DWORD PTR [edx]
  0051b	50		 push	 eax
  0051c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextMetricsA@8

; 222  :     GetTextExtentPointA(dc,sym, 52, &sz);

  00522	8d 4d bc	 lea	 ecx, DWORD PTR _sz$[ebp]
  00525	51		 push	 ecx
  00526	6a 34		 push	 52			; 00000034H
  00528	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sym@?1??getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z@4PADA
  0052e	52		 push	 edx
  0052f	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00532	8b 08		 mov	 ecx, DWORD PTR [eax]
  00534	51		 push	 ecx
  00535	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPointA@16

; 223  :     pSize->cy = t.tmHeight;

  0053b	8b 55 10	 mov	 edx, DWORD PTR _pSize$[ebp]
  0053e	8b 45 c4	 mov	 eax, DWORD PTR _t$[ebp]
  00541	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 224  :     pSize->cx = (sz.cx / 26 + 1) / 2;

  00544	8b 45 bc	 mov	 eax, DWORD PTR _sz$[ebp]
  00547	99		 cdq
  00548	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0054d	f7 f9		 idiv	 ecx
  0054f	83 c0 01	 add	 eax, 1
  00552	99		 cdq
  00553	2b c2		 sub	 eax, edx
  00555	d1 f8		 sar	 eax, 1
  00557	8b 55 10	 mov	 edx, DWORD PTR _pSize$[ebp]
  0055a	89 02		 mov	 DWORD PTR [edx], eax

; 225  :     SelectObject(dc,oldfont);    

  0055c	8b 45 fc	 mov	 eax, DWORD PTR _oldfont$[ebp]
  0055f	50		 push	 eax
  00560	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00563	8b 11		 mov	 edx, DWORD PTR [ecx]
  00565	52		 push	 edx
  00566	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 226  : }

  0056c	8b e5		 mov	 esp, ebp
  0056e	5d		 pop	 ebp
  0056f	c3		 ret	 0
?getptsize@@YAXAAPAUHDC__@@AAPAUHFONT__@@PAUtagSIZE@@@Z ENDP ; getptsize
_TEXT	ENDS
EXTRN	__imp__wcslen:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv85 = -20						; size = 4
tv71 = -16						; size = 4
_rstyle$ = -12						; size = 4
_dialogex$ = -8						; size = 4
_p$ = -4						; size = 4
_data$ = 8						; size = 4
_result$ = 12						; size = 4
?querydialogdata@@YAXPBDPAUdialogdata_t@@@Z PROC NEAR	; querydialogdata

; 232  : {

  00570	55		 push	 ebp
  00571	8b ec		 mov	 ebp, esp
  00573	83 ec 14	 sub	 esp, 20			; 00000014H

; 233  :     WORD *p = (WORD *)data; 

  00576	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00579	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 234  :     unsigned long rstyle = dword_at(p); 

  0057c	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0057f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00581	89 55 f4	 mov	 DWORD PTR _rstyle$[ebp], edx

; 235  :     int dialogex=0;

  00584	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dialogex$[ebp], 0

; 236  : 
; 237  :     p += 2;

  0058b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0058e	83 c0 04	 add	 eax, 4
  00591	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 238  : 
; 239  :     if (rstyle == 0xffff0001)

  00594	81 7d f4 01 00
	ff ff		 cmp	 DWORD PTR _rstyle$[ebp], -65535 ; ffff0001H
  0059b	75 23		 jne	 SHORT $L197551

; 240  :     {
; 241  :         p+=4;

  0059d	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  005a0	83 c1 08	 add	 ecx, 8
  005a3	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 242  :         rstyle=dword_at(p);

  005a6	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  005a9	8b 02		 mov	 eax, DWORD PTR [edx]
  005ab	89 45 f4	 mov	 DWORD PTR _rstyle$[ebp], eax

; 243  :         p+=2;

  005ae	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  005b1	83 c1 04	 add	 ecx, 4
  005b4	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 244  :         dialogex=1;

  005b7	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dialogex$[ebp], 1

; 245  :     }else

  005be	eb 09		 jmp	 SHORT $L197553
$L197551:

; 246  :         p+=2;

  005c0	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  005c3	83 c2 04	 add	 edx, 4
  005c6	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
$L197553:

; 247  : 
; 248  :     p+=5;

  005c9	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  005cc	83 c0 0a	 add	 eax, 10			; 0000000aH
  005cf	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 249  : 
; 250  :     // Skip menu
; 251  :     switch(word_at(p))

  005d2	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  005d5	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  005d8	89 55 f0	 mov	 DWORD PTR tv71[ebp], edx
  005db	83 7d f0 00	 cmp	 DWORD PTR tv71[ebp], 0
  005df	74 0b		 je	 SHORT $L197559
  005e1	81 7d f0 ff ff
	00 00		 cmp	 DWORD PTR tv71[ebp], 65535 ; 0000ffffH
  005e8	74 17		 je	 SHORT $L197560
  005ea	eb 2a		 jmp	 SHORT $L197561
$L197559:

; 252  :     {
; 253  :     case 0x0000: // no menu name
; 254  :         result->has_menu=0;

  005ec	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  005ef	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 255  :         p++;

  005f6	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  005f9	83 c1 02	 add	 ecx, 2
  005fc	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 256  :         break;

  005ff	eb 36		 jmp	 SHORT $L197556
$L197560:

; 257  :     case 0xffff: // has menu        
; 258  :         result->has_menu=1;

  00601	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  00604	c7 42 04 01 00
	00 00		 mov	 DWORD PTR [edx+4], 1

; 259  :         p += 2; 

  0060b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0060e	83 c0 04	 add	 eax, 4
  00611	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 260  :         break;

  00614	eb 21		 jmp	 SHORT $L197556
$L197561:

; 261  :     default:     // has menu
; 262  :         result->has_menu=1;     

  00616	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  00619	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 263  :         p+=wcslen((LPCWSTR)p)+1;

  00620	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00623	52		 push	 edx
  00624	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0062a	83 c4 04	 add	 esp, 4
  0062d	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00630	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  00634	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
$L197556:

; 264  :         break;
; 265  :     }    
; 266  : 
; 267  :     // skip class name
; 268  :     switch(word_at(p))

  00637	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0063a	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0063d	89 4d ec	 mov	 DWORD PTR tv85[ebp], ecx
  00640	83 7d ec 00	 cmp	 DWORD PTR tv85[ebp], 0
  00644	74 0b		 je	 SHORT $L197568
  00646	81 7d ec ff ff
	00 00		 cmp	 DWORD PTR tv85[ebp], 65535 ; 0000ffffH
  0064d	74 0d		 je	 SHORT $L197569
  0064f	eb 16		 jmp	 SHORT $L197570
$L197568:

; 269  :     {
; 270  :     case 0x0000:
; 271  :         p++;

  00651	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00654	83 c2 02	 add	 edx, 2
  00657	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 272  :         break;

  0065a	eb 22		 jmp	 SHORT $L197565
$L197569:

; 273  :     case 0xffff:        
; 274  :         p += 2;

  0065c	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0065f	83 c0 04	 add	 eax, 4
  00662	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 275  :         break;

  00665	eb 17		 jmp	 SHORT $L197565
$L197570:

; 276  :     default:
; 277  :         p+=wcslen((LPCWSTR)p)+1;

  00667	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0066a	51		 push	 ecx
  0066b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00671	83 c4 04	 add	 esp, 4
  00674	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00677	8d 44 42 02	 lea	 eax, DWORD PTR [edx+eax*2+2]
  0067b	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax
$L197565:

; 278  :         break;
; 279  :     }
; 280  : 
; 281  :     // skip the caption
; 282  :     p+=wcslen((LPCWSTR)p)+1;

  0067e	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00681	51		 push	 ecx
  00682	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00688	83 c4 04	 add	 esp, 4
  0068b	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0068e	8d 44 42 02	 lea	 eax, DWORD PTR [edx+eax*2+2]
  00692	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 283  : 
; 284  :     // get the font name 
; 285  : 
; 286  :     if (rstyle & DS_SETFONT)

  00695	8b 4d f4	 mov	 ecx, DWORD PTR _rstyle$[ebp]
  00698	83 e1 40	 and	 ecx, 64			; 00000040H
  0069b	0f 84 88 00 00
	00		 je	 $L197573

; 287  :     {
; 288  :         result->pt = word_at(p); p++;

  006a1	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  006a4	0f b7 02	 movzx	 eax, WORD PTR [edx]
  006a7	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  006aa	89 01		 mov	 DWORD PTR [ecx], eax
  006ac	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  006af	83 c2 02	 add	 edx, 2
  006b2	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 289  :         if (dialogex)

  006b5	83 7d f8 00	 cmp	 DWORD PTR _dialogex$[ebp], 0
  006b9	74 35		 je	 SHORT $L197575

; 290  :         {
; 291  :             result->weight = word_at(p); p++;

  006bb	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  006be	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  006c1	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  006c4	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  006c7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  006ca	83 c0 02	 add	 eax, 2
  006cd	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 292  :             result->italic = LOBYTE(word_at(p)); p++;

  006d0	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  006d3	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  006d6	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  006dc	0f b6 c2	 movzx	 eax, dl
  006df	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  006e2	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  006e5	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  006e8	83 c2 02	 add	 edx, 2
  006eb	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 293  :         }else

  006ee	eb 14		 jmp	 SHORT $L197580
$L197575:

; 294  :         {
; 295  :             result->weight = FW_DONTCARE;

  006f0	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  006f3	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 296  :             result->italic = FALSE;

  006fa	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  006fd	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L197580:

; 297  :         }
; 298  :         result->faceName = (LPCWSTR)p;              

  00704	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  00707	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0070a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 299  :         p += wcslen( result->faceName ) + 1;

  0070d	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  00710	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00713	52		 push	 edx
  00714	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0071a	83 c4 04	 add	 esp, 4
  0071d	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00720	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  00724	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx

; 300  :     }else

  00727	eb 27		 jmp	 SHORT $L197545
$L197573:

; 301  :     {
; 302  :         result->faceName=L"Tahoma"; // TODO: put system font name here

  00729	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  0072c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET FLAT:$SG197583

; 303  :         result->pt=8; // TODO

  00733	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  00736	c7 01 08 00 00
	00		 mov	 DWORD PTR [ecx], 8

; 304  :         result->weight=FW_NORMAL; // TODO

  0073c	8b 55 0c	 mov	 edx, DWORD PTR _result$[ebp]
  0073f	c7 42 08 90 01
	00 00		 mov	 DWORD PTR [edx+8], 400	; 00000190H

; 305  :         result->italic=FALSE; // TODO

  00746	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00749	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$L197545:

; 306  :     }
; 307  : }

  00750	8b e5		 mov	 esp, ebp
  00752	5d		 pop	 ebp
  00753	c3		 ret	 0
?querydialogdata@@YAXPBDPAUdialogdata_t@@@Z ENDP	; querydialogdata
_TEXT	ENDS
EXTRN	__imp__DeleteObject@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -28						; size = 4
_hDialogTemplate$ = -24					; size = 4
_item$ = -20						; size = 4
_t$ = -16						; size = 4
_lpDialogTemplate$ = -12				; size = 4
_hResource$ = -8					; size = 4
_wnd$ = -4						; size = 4
?Detach@CSetDPI@@QAEXXZ PROC NEAR			; CSetDPI::Detach
; _this$ = ecx

; 438  : {

  00760	55		 push	 ebp
  00761	8b ec		 mov	 ebp, esp
  00763	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00766	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 439  :     if (!hwnd) return;

  00769	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0076c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00770	75 05		 jne	 SHORT $L197653
  00772	e9 4e 01 00 00	 jmp	 $L197652
$L197653:

; 440  :     SendMessage(hwnd, WM_SETFONT, (LPARAM)oldfont, TRUE);

  00777	6a 01		 push	 1
  00779	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0077c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0077f	52		 push	 edx
  00780	6a 30		 push	 48			; 00000030H
  00782	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00785	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00788	51		 push	 ecx
  00789	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 441  : 
; 442  : 
; 443  : 	HRSRC hResource = ::FindResource(inst, MAKEINTRESOURCE(IDD), RT_DIALOG);

  0078f	6a 05		 push	 5
  00791	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00794	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00797	50		 push	 eax
  00798	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0079b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0079e	52		 push	 edx
  0079f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  007a5	89 45 f8	 mov	 DWORD PTR _hResource$[ebp], eax

; 444  : 	HANDLE hDialogTemplate = LoadResource(inst, hResource);

  007a8	8b 45 f8	 mov	 eax, DWORD PTR _hResource$[ebp]
  007ab	50		 push	 eax
  007ac	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  007b2	52		 push	 edx
  007b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  007b9	89 45 e8	 mov	 DWORD PTR _hDialogTemplate$[ebp], eax

; 445  : 	helper::DLGTEMPLATEEX *lpDialogTemplate = 
; 446  : 		(helper::DLGTEMPLATEEX *)LockResource(hDialogTemplate);    

  007bc	8b 45 e8	 mov	 eax, DWORD PTR _hDialogTemplate$[ebp]
  007bf	50		 push	 eax
  007c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  007c6	89 45 f4	 mov	 DWORD PTR _lpDialogTemplate$[ebp], eax

; 447  : 
; 448  : 
; 449  : 	helper::DLGITEMTEMPLATEEX *item=
; 450  : 		(helper::DLGITEMTEMPLATEEX *)helper::FindFirstDlgItem((DLGTEMPLATE *)lpDialogTemplate);

  007c9	8b 4d f4	 mov	 ecx, DWORD PTR _lpDialogTemplate$[ebp]
  007cc	51		 push	 ecx
  007cd	e8 00 00 00 00	 call	 ?FindFirstDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PBUDLGTEMPLATE@@@Z ; helper::FindFirstDlgItem
  007d2	83 c4 04	 add	 esp, 4
  007d5	89 45 ec	 mov	 DWORD PTR _item$[ebp], eax

; 451  : 
; 452  : 	int t;
; 453  : 	HWND wnd;
; 454  : 	for(t=0;t<helper::DlgTemplateItemCount((DLGTEMPLATE *)lpDialogTemplate);t++)

  007d8	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  007df	eb 09		 jmp	 SHORT $L197671
$L197672:
  007e1	8b 55 f0	 mov	 edx, DWORD PTR _t$[ebp]
  007e4	83 c2 01	 add	 edx, 1
  007e7	89 55 f0	 mov	 DWORD PTR _t$[ebp], edx
$L197671:
  007ea	8b 45 f4	 mov	 eax, DWORD PTR _lpDialogTemplate$[ebp]
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?DlgTemplateItemCount@helper@@SAAAGPAUDLGTEMPLATE@@@Z ; helper::DlgTemplateItemCount
  007f3	83 c4 04	 add	 esp, 4
  007f6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  007f9	39 4d f0	 cmp	 DWORD PTR _t$[ebp], ecx
  007fc	0f 8d 85 00 00
	00		 jge	 $L197673

; 455  : 	{
; 456  : 		// OLD IMPLEMENTATION: wnd=GetDlgItem(hwnd,item->id);
; 457  : 
; 458  : 	    // TODO: check if it is the best implementation
; 459  : 	    //       are we sure that controls will preserve the order?
; 460  : 
; 461  : 		if (!t) 

  00802	83 7d f0 00	 cmp	 DWORD PTR _t$[ebp], 0
  00806	75 14		 jne	 SHORT $L197674

; 462  : 			wnd=GetWindow(hwnd,GW_CHILD);

  00808	6a 05		 push	 5
  0080a	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0080d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00810	50		 push	 eax
  00811	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  00817	89 45 fc	 mov	 DWORD PTR _wnd$[ebp], eax

; 463  : 		else

  0081a	eb 0f		 jmp	 SHORT $L197677
$L197674:

; 464  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  0081c	6a 02		 push	 2
  0081e	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  00821	51		 push	 ecx
  00822	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  00828	89 45 fc	 mov	 DWORD PTR _wnd$[ebp], eax
$L197677:

; 465  : 		
; 466  : 		while ((wnd)&&(GetDlgCtrlID(wnd) != item->id)) 

  0082b	83 7d fc 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  0082f	74 23		 je	 SHORT $L197678
  00831	8b 55 fc	 mov	 edx, DWORD PTR _wnd$[ebp]
  00834	52		 push	 edx
  00835	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgCtrlID@4
  0083b	8b 4d ec	 mov	 ecx, DWORD PTR _item$[ebp]
  0083e	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00841	74 11		 je	 SHORT $L197678

; 467  : 			wnd=GetWindow(wnd,GW_HWNDNEXT);

  00843	6a 02		 push	 2
  00845	8b 55 fc	 mov	 edx, DWORD PTR _wnd$[ebp]
  00848	52		 push	 edx
  00849	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindow@8
  0084f	89 45 fc	 mov	 DWORD PTR _wnd$[ebp], eax
  00852	eb d7		 jmp	 SHORT $L197677
$L197678:

; 468  : 
; 469  : 		if (!wnd) break;

  00854	83 7d fc 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  00858	75 02		 jne	 SHORT $L197679
  0085a	eb 2b		 jmp	 SHORT $L197673
$L197679:

; 470  : 
; 471  :         SendMessage(wnd, WM_SETFONT, (LPARAM)oldfont, TRUE);		

  0085c	6a 01		 push	 1
  0085e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00861	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00864	51		 push	 ecx
  00865	6a 30		 push	 48			; 00000030H
  00867	8b 55 fc	 mov	 edx, DWORD PTR _wnd$[ebp]
  0086a	52		 push	 edx
  0086b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 472  : 		item=(helper::DLGITEMTEMPLATEEX *)helper::FindNextDlgItem((DLGITEMTEMPLATE *)item,TRUE);

  00871	6a 01		 push	 1
  00873	8b 45 ec	 mov	 eax, DWORD PTR _item$[ebp]
  00876	50		 push	 eax
  00877	e8 00 00 00 00	 call	 ?FindNextDlgItem@helper@@SAPAUDLGITEMTEMPLATE@@PAU2@H@Z ; helper::FindNextDlgItem
  0087c	83 c4 08	 add	 esp, 8
  0087f	89 45 ec	 mov	 DWORD PTR _item$[ebp], eax

; 473  : 	}

  00882	e9 5a ff ff ff	 jmp	 $L197672
$L197673:

; 474  : 
; 475  :     UnlockResource(hDialogTemplate);    

  00887	8b 4d e8	 mov	 ecx, DWORD PTR _hDialogTemplate$[ebp]
  0088a	51		 push	 ecx
  0088b	e8 00 00 00 00	 call	 ?UnlockResource@@YGHPAX@Z ; UnlockResource

; 476  :     FreeResource(hDialogTemplate);

  00890	8b 55 e8	 mov	 edx, DWORD PTR _hDialogTemplate$[ebp]
  00893	52		 push	 edx
  00894	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4

; 477  : 
; 478  : 
; 479  :     DeleteObject(font);

  0089a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0089d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  008a0	51		 push	 ecx
  008a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 480  :     hwnd=0;

  008a7	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  008aa	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 481  :     font=0;

  008b1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  008b4	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 482  :     oldfont=0;

  008bb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  008be	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L197652:

; 483  : }

  008c5	8b e5		 mov	 esp, ebp
  008c7	5d		 pop	 ebp
  008c8	c3		 ret	 0
?Detach@CSetDPI@@QAEXXZ ENDP				; CSetDPI::Detach
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxv_w32.h
_TEXT	ENDS
;	COMDAT ?UnlockResource@@YGHPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?UnlockResource@@YGHPAX@Z PROC NEAR			; UnlockResource, COMDAT

; 272  : AFX_INLINE int WINAPI UnlockResource(HGLOBAL) { return 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?UnlockResource@@YGHPAX@Z ENDP				; UnlockResource
_TEXT	ENDS
END
