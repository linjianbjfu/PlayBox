; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\IrregularBorder\TranslucentDialog.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?SetDontMoveContent@CWindowsMover@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTranslucentDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CTranslucentDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CTranslucentDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDialog@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CTranslucentDialog@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCTranslucentDialog@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Create@CDialog@@UAEHIPAVCWnd@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4CTranslucentDialog@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetActiveWindow@CWnd@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseHDC@Graphics@Gdiplus@@QAEXPAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetInterpolationMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4InterpolationMode@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Graphics@Gdiplus@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHeight@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWidth@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWnd@@IAEHPAUtagCREATESTRUCTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_messageEntries@CTranslucentDialog@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messageMap@CTranslucentDialog@@1UAFX_MSGMAP@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTranslucentDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_messageEntries@CTranslucentDialog@@0QBUAFX_MSGMAP_ENTRY@@B ; CTranslucentDialog::_messageEntries
PUBLIC	?messageMap@CTranslucentDialog@@1UAFX_MSGMAP@@B	; CTranslucentDialog::messageMap
PUBLIC	?OnEraseBkgnd@CTranslucentDialog@@AAEHPAVCDC@@@Z ; CTranslucentDialog::OnEraseBkgnd
PUBLIC	?OnCreate@CTranslucentDialog@@AAEHPAUtagCREATESTRUCTA@@@Z ; CTranslucentDialog::OnCreate
PUBLIC	?OnLButtonDown@CTranslucentDialog@@AAEXIVCPoint@@@Z ; CTranslucentDialog::OnLButtonDown
PUBLIC	?OnLButtonUp@CTranslucentDialog@@QAEXIVCPoint@@@Z ; CTranslucentDialog::OnLButtonUp
PUBLIC	?OnMouseMove@CTranslucentDialog@@QAEXIVCPoint@@@Z ; CTranslucentDialog::OnMouseMove
EXTRN	?GetThisMessageMap@CDialog@@KGPBUAFX_MSGMAP@@XZ:NEAR ; CDialog::GetThisMessageMap
;	COMDAT ?_messageEntries@CTranslucentDialog@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@CTranslucentDialog@@0QBUAFX_MSGMAP_ENTRY@@B DD 014H ; CTranslucentDialog::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CTranslucentDialog@@AAEHPAVCDC@@@Z
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	FLAT:?OnCreate@CTranslucentDialog@@AAEHPAUtagCREATESTRUCTA@@@Z
	DD	0201H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnLButtonDown@CTranslucentDialog@@AAEXIVCPoint@@@Z
	DD	0202H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnLButtonUp@CTranslucentDialog@@QAEXIVCPoint@@@Z
	DD	0200H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnMouseMove@CTranslucentDialog@@QAEXIVCPoint@@@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@CTranslucentDialog@@1UAFX_MSGMAP@@B
CONST	SEGMENT
?messageMap@CTranslucentDialog@@1UAFX_MSGMAP@@B DD FLAT:?GetThisMessageMap@CDialog@@KGPBUAFX_MSGMAP@@XZ ; CTranslucentDialog::messageMap
	DD	FLAT:?_messageEntries@CTranslucentDialog@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
CONST	SEGMENT
$SG199142 DB	'User32.DLL', 00H
	ORG $+1
$SG199155 DB	'UpdateLayeredWindow', 00H
CONST	ENDS
PUBLIC	?Create@CDialog@@UAEHIPAVCWnd@@@Z		; CDialog::Create
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CDialog@@8				; CDialog::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCDialog@@@8				; CDialog `RTTI Type Descriptor'
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??_R4CTranslucentDialog@@6B@			; CTranslucentDialog::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTranslucentDialog@@@8			; CTranslucentDialog `RTTI Type Descriptor'
PUBLIC	??_R3CTranslucentDialog@@8			; CTranslucentDialog::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTranslucentDialog@@8			; CTranslucentDialog::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CTranslucentDialog@@8		; CTranslucentDialog::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z	; CTranslucentDialog::CTranslucentDialog
PUBLIC	?OnInitDialog@CTranslucentDialog@@MAEHXZ	; CTranslucentDialog::OnInitDialog
PUBLIC	?GetMessageMap@CTranslucentDialog@@MBEPBUAFX_MSGMAP@@XZ ; CTranslucentDialog::GetMessageMap
PUBLIC	??_7CTranslucentDialog@@6B@			; CTranslucentDialog::`vftable'
PUBLIC	??_GCTranslucentDialog@@UAEPAXI@Z		; CTranslucentDialog::`scalar deleting destructor'
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:NEAR ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:NEAR ; CWnd::CreateControlSite
EXTRN	?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ:NEAR ; CDialog::GetRuntimeClass
EXTRN	?Create@CDialog@@UAEHPBDPAVCWnd@@@Z:NEAR	; CDialog::Create
EXTRN	?CreateIndirect@CDialog@@UAEHPBUDLGTEMPLATE@@PAVCWnd@@PAX@Z:NEAR ; CDialog::CreateIndirect
EXTRN	?CreateIndirect@CDialog@@UAEHPAXPAVCWnd@@@Z:NEAR ; CDialog::CreateIndirect
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	??0CDialog@@QAE@IPAVCWnd@@@Z:NEAR		; CDialog::CDialog
EXTRN	?DoModal@CDialog@@UAEHXZ:NEAR			; CDialog::DoModal
EXTRN	?OnSetFont@CDialog@@UAEXPAVCFont@@@Z:NEAR	; CDialog::OnSetFont
EXTRN	?OnOK@CDialog@@MAEXXZ:NEAR			; CDialog::OnOK
EXTRN	?OnCancel@CDialog@@MAEXXZ:NEAR			; CDialog::OnCancel
EXTRN	?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z:NEAR ; CDialog::PreTranslateMessage
EXTRN	?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CDialog::OnCmdMsg
EXTRN	?CheckAutoCenter@CDialog@@UAEHXZ:NEAR		; CDialog::CheckAutoCenter
EXTRN	?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CDialog::SetOccDialogInfo
EXTRN	?PreInitDialog@CDialog@@MAEXXZ:NEAR		; CDialog::PreInitDialog
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:NEAR		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:NEAR			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:NEAR ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:NEAR		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:NEAR ; CWnd::get_accChild
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDescription
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accRole
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:NEAR ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDefaultAction
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:NEAR	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:NEAR ; CWnd::accLocation
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:NEAR	; CWnd::accHitTest
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:NEAR ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:NEAR ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:NEAR	; CWnd::CreateAccessibleProxy
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	??_ECTranslucentDialog@@UAEPAXI@Z:NEAR		; CTranslucentDialog::`vector deleting destructor'
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
;	COMDAT ??_7CTranslucentDialog@@6B@
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\translucentdialog.cpp
CONST	SEGMENT
??_7CTranslucentDialog@@6B@ DD FLAT:??_R4CTranslucentDialog@@6B@ ; CTranslucentDialog::`vftable'
	DD	FLAT:?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECTranslucentDialog@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CTranslucentDialog@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CDialog@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?Create@CDialog@@UAEHIPAVCWnd@@@Z
	DD	FLAT:?Create@CDialog@@UAEHPBDPAVCWnd@@@Z
	DD	FLAT:?CreateIndirect@CDialog@@UAEHPAXPAVCWnd@@@Z
	DD	FLAT:?CreateIndirect@CDialog@@UAEHPBUDLGTEMPLATE@@PAVCWnd@@PAX@Z
	DD	FLAT:?DoModal@CDialog@@UAEHXZ
	DD	FLAT:?OnInitDialog@CTranslucentDialog@@MAEHXZ
	DD	FLAT:?OnSetFont@CDialog@@UAEXPAVCFont@@@Z
	DD	FLAT:?OnOK@CDialog@@MAEXXZ
	DD	FLAT:?OnCancel@CDialog@@MAEXXZ
	DD	FLAT:?PreInitDialog@CDialog@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R4CTranslucentDialog@@6B@
rdata$r	SEGMENT
??_R4CTranslucentDialog@@6B@ DD 00H			; CTranslucentDialog::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTranslucentDialog@@@8
	DD	FLAT:??_R3CTranslucentDialog@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTranslucentDialog@@@8
_DATA	SEGMENT
??_R0?AVCTranslucentDialog@@@8 DD FLAT:??_7type_info@@6B@ ; CTranslucentDialog `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTranslucentDialog@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CTranslucentDialog@@8
rdata$r	SEGMENT
??_R3CTranslucentDialog@@8 DD 00H			; CTranslucentDialog::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CTranslucentDialog@@8
rdata$r	ENDS
;	COMDAT ??_R2CTranslucentDialog@@8
rdata$r	SEGMENT
??_R2CTranslucentDialog@@8 DD FLAT:??_R1A@?0A@A@CTranslucentDialog@@8 ; CTranslucentDialog::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CDialog@@8
	DD	FLAT:??_R1A@?0A@A@CWnd@@8
	DD	FLAT:??_R1A@?0A@A@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CTranslucentDialog@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CTranslucentDialog@@8 DD FLAT:??_R0?AVCTranslucentDialog@@@8 ; CTranslucentDialog::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDialog@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CDialog@@8 DD FLAT:??_R0?AVCDialog@@@8	; CDialog::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCDialog@@@8
_DATA	SEGMENT
??_R0?AVCDialog@@@8 DD FLAT:??_7type_info@@6B@		; CDialog `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDialog@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDTemplate$ = 8					; size = 4
_lpszFile$ = 12						; size = 4
_pParent$ = 16						; size = 4
??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z PROC NEAR	; CTranslucentDialog::CTranslucentDialog
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nIDTemplate$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0CDialog@@QAE@IPAVCWnd@@@Z ; CDialog::CDialog
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CTranslucentDialog@@6B@
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c6 80 94 00 00
	00 01		 mov	 BYTE PTR [eax+148], 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c6 81 95 00 00
	00 01		 mov	 BYTE PTR [ecx+149], 1

; 11   : 	m_pImage = NULL;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	c7 82 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+136], 0

; 12   : 	m_nCx = m_nCy = 0;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+132], 0
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0

; 13   : }

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 0c 00	 ret	 12			; 0000000cH
??0CTranslucentDialog@@QAE@IPBDPAVCWnd@@@Z ENDP		; CTranslucentDialog::CTranslucentDialog
_TEXT	ENDS
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	??1CTranslucentDialog@@UAE@XZ			; CTranslucentDialog::~CTranslucentDialog
; Function compile flags: /Odt
;	COMDAT ??_GCTranslucentDialog@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTranslucentDialog@@UAEPAXI@Z PROC NEAR		; CTranslucentDialog::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTranslucentDialog@@UAE@XZ ; CTranslucentDialog::~CTranslucentDialog
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L199005
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L199005:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCTranslucentDialog@@UAEPAXI@Z ENDP			; CTranslucentDialog::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CDialog@@UAE@XZ:NEAR				; CDialog::~CDialog
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T199661 DD	0ffffffffH
	DD	FLAT:$L199654
$T199658 DD	019930520H
	DD	01H
	DD	FLAT:$T199661
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -28						; size = 4
_this$ = -24						; size = 4
$T199651 = -20						; size = 4
$T199650 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTranslucentDialog@@UAE@XZ PROC NEAR			; CTranslucentDialog::~CTranslucentDialog
; _this$ = ecx

; 16   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp
  00073	6a ff		 push	 -1
  00075	68 00 00 00 00	 push	 __ehhandler$??1CTranslucentDialog@@UAE@XZ
  0007a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00080	50		 push	 eax
  00081	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00088	83 ec 10	 sub	 esp, 16			; 00000010H
  0008b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0008e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00091	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTranslucentDialog@@6B@
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 17   : 	delete m_pImage;

  0009e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  000a7	89 55 ec	 mov	 DWORD PTR $T199651[ebp], edx
  000aa	8b 45 ec	 mov	 eax, DWORD PTR $T199651[ebp]
  000ad	89 45 f0	 mov	 DWORD PTR $T199650[ebp], eax
  000b0	83 7d f0 00	 cmp	 DWORD PTR $T199650[ebp], 0
  000b4	74 11		 je	 SHORT $L199652
  000b6	6a 01		 push	 1
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR $T199650[ebp]
  000bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR $T199650[ebp]
  000c0	ff 12		 call	 DWORD PTR [edx]
  000c2	89 45 e4	 mov	 DWORD PTR tv72[ebp], eax
  000c5	eb 07		 jmp	 SHORT $L199653
$L199652:
  000c7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L199653:

; 18   : 	m_pImage = NULL;

  000ce	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0

; 19   : }

  000db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1CDialog@@UAE@XZ	; CDialog::~CDialog
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L199654:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDialog@@UAE@XZ	; CDialog::~CDialog
__ehhandler$??1CTranslucentDialog@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199658
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CTranslucentDialog@@UAE@XZ ENDP			; CTranslucentDialog::~CTranslucentDialog
PUBLIC	?GetThisMessageMap@CTranslucentDialog@@KGPBUAFX_MSGMAP@@XZ ; CTranslucentDialog::GetThisMessageMap
; Function compile flags: /Odt
_TEXT	SEGMENT
?GetThisMessageMap@CTranslucentDialog@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CTranslucentDialog::GetThisMessageMap

; 21   : BEGIN_MESSAGE_MAP(CTranslucentDialog, CDialog)

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CTranslucentDialog@@1UAFX_MSGMAP@@B ; CTranslucentDialog::messageMap
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?GetThisMessageMap@CTranslucentDialog@@KGPBUAFX_MSGMAP@@XZ ENDP ; CTranslucentDialog::GetThisMessageMap
; Function compile flags: /Odt
_this$ = -4						; size = 4
?GetMessageMap@CTranslucentDialog@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CTranslucentDialog::GetMessageMap
; _this$ = ecx

; 21   : BEGIN_MESSAGE_MAP(CTranslucentDialog, CDialog)

  00110	55		 push	 ebp
  00111	8b ec		 mov	 ebp, esp
  00113	51		 push	 ecx
  00114	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00117	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CTranslucentDialog@@1UAFX_MSGMAP@@B ; CTranslucentDialog::messageMap
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
?GetMessageMap@CTranslucentDialog@@MBEPBUAFX_MSGMAP@@XZ ENDP ; CTranslucentDialog::GetMessageMap
_TEXT	ENDS
PUBLIC	?SetEnableDrag@CTranslucentDialog@@QAEX_N@Z	; CTranslucentDialog::SetEnableDrag
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnableDrag$ = 8					; size = 1
?SetEnableDrag@CTranslucentDialog@@QAEX_N@Z PROC NEAR	; CTranslucentDialog::SetEnableDrag
; _this$ = ecx

; 30   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	51		 push	 ecx
  00124	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	m_bEnableDrag = bEnableDrag;

  00127	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012a	8a 4d 08	 mov	 cl, BYTE PTR _bEnableDrag$[ebp]
  0012d	88 88 94 00 00
	00		 mov	 BYTE PTR [eax+148], cl

; 32   : }

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 04 00	 ret	 4
?SetEnableDrag@CTranslucentDialog@@QAEX_N@Z ENDP	; CTranslucentDialog::SetEnableDrag
_TEXT	ENDS
PUBLIC	?SetCenterAligned@CTranslucentDialog@@QAEX_N@Z	; CTranslucentDialog::SetCenterAligned
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bCenterAligned$ = 8					; size = 1
?SetCenterAligned@CTranslucentDialog@@QAEX_N@Z PROC NEAR ; CTranslucentDialog::SetCenterAligned
; _this$ = ecx

; 35   : {

  00140	55		 push	 ebp
  00141	8b ec		 mov	 ebp, esp
  00143	51		 push	 ecx
  00144	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	m_bCenterAligned = bCenterAligned;

  00147	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8a 4d 08	 mov	 cl, BYTE PTR _bCenterAligned$[ebp]
  0014d	88 88 95 00 00
	00		 mov	 BYTE PTR [eax+149], cl

; 37   : }

  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 04 00	 ret	 4
?SetCenterAligned@CTranslucentDialog@@QAEX_N@Z ENDP	; CTranslucentDialog::SetCenterAligned
_TEXT	ENDS
EXTRN	?OnInitDialog@CDialog@@UAEHXZ:NEAR		; CDialog::OnInitDialog
EXTRN	__imp__GetWindowLongA@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwStyle$ = -4						; size = 4
?OnInitDialog@CTranslucentDialog@@MAEHXZ PROC NEAR	; CTranslucentDialog::OnInitDialog
; _this$ = ecx

; 40   : {

  00160	55		 push	 ebp
  00161	8b ec		 mov	 ebp, esp
  00163	83 ec 08	 sub	 esp, 8
  00166	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	CDialog::OnInitDialog();

  00169	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog

; 42   : 	// must be WS_POPUP
; 43   : 	DWORD dwStyle = ::GetWindowLong(m_hWnd, GWL_STYLE);

  00171	6a f0		 push	 -16			; fffffff0H
  00173	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00176	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00179	51		 push	 ecx
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00180	89 45 fc	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 44   : 	VERIFY((dwStyle & WS_POPUP) != 0);
; 45   : 	VERIFY((dwStyle & WS_CHILD) == 0);
; 46   : 
; 47   : 	m_blend.BlendOp = 0;

  00183	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00186	c6 82 90 00 00
	00 00		 mov	 BYTE PTR [edx+144], 0

; 48   : 	m_blend.BlendFlags = 0;

  0018d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00190	c6 80 91 00 00
	00 00		 mov	 BYTE PTR [eax+145], 0

; 49   : 	m_blend.AlphaFormat = 1;

  00197	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019a	c6 81 93 00 00
	00 01		 mov	 BYTE PTR [ecx+147], 1

; 50   : 	m_blend.SourceConstantAlpha = 255;//AC_SRC_ALPHA

  001a1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001a4	c6 82 92 00 00
	00 ff		 mov	 BYTE PTR [edx+146], 255	; 000000ffH

; 51   : 	return TRUE;

  001ab	b8 01 00 00 00	 mov	 eax, 1

; 52   : }

  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
?OnInitDialog@CTranslucentDialog@@MAEHXZ ENDP		; CTranslucentDialog::OnInitDialog
; Function compile flags: /Odt
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?OnEraseBkgnd@CTranslucentDialog@@AAEHPAVCDC@@@Z PROC NEAR ; CTranslucentDialog::OnEraseBkgnd
; _this$ = ecx

; 55   : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	51		 push	 ecx
  001c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   : 	return TRUE;

  001c7	b8 01 00 00 00	 mov	 eax, 1

; 57   : }

  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 04 00	 ret	 4
?OnEraseBkgnd@CTranslucentDialog@@AAEHPAVCDC@@@Z ENDP	; CTranslucentDialog::OnEraseBkgnd
_TEXT	ENDS
PUBLIC	?OnCreate@CWnd@@IAEHPAUtagCREATESTRUCTA@@@Z	; CWnd::OnCreate
EXTRN	?ModifyStyle@CWnd@@QAEHKKI@Z:NEAR		; CWnd::ModifyStyle
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpCreateStruct$ = 8					; size = 4
?OnCreate@CTranslucentDialog@@AAEHPAUtagCREATESTRUCTA@@@Z PROC NEAR ; CTranslucentDialog::OnCreate
; _this$ = ecx

; 60   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	51		 push	 ecx
  001e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 	// Must be overlapped
; 62   : 	VERIFY((lpCreateStruct->style & WS_POPUP) == 0);
; 63   : 	VERIFY((lpCreateStruct->style & WS_CHILD) == 0);
; 64   : 
; 65   : 	if (CDialog::OnCreate(lpCreateStruct) == -1)

  001e7	8b 45 08	 mov	 eax, DWORD PTR _lpCreateStruct$[ebp]
  001ea	50		 push	 eax
  001eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ee	e8 00 00 00 00	 call	 ?OnCreate@CWnd@@IAEHPAUtagCREATESTRUCTA@@@Z ; CWnd::OnCreate
  001f3	83 f8 ff	 cmp	 eax, -1
  001f6	75 05		 jne	 SHORT $L199064

; 66   : 		return -1;

  001f8	83 c8 ff	 or	 eax, -1
  001fb	eb 23		 jmp	 SHORT $L199061
$L199064:

; 67   : 	m_pLastImage = NULL;

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00200	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0

; 68   : 	ModifyStyle(WS_CAPTION, WS_POPUP, 0);

  0020a	6a 00		 push	 0
  0020c	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00211	68 00 00 c0 00	 push	 12582912		; 00c00000H
  00216	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00219	e8 00 00 00 00	 call	 ?ModifyStyle@CWnd@@QAEHKKI@Z ; CWnd::ModifyStyle

; 69   : 	return 0;

  0021e	33 c0		 xor	 eax, eax
$L199061:

; 70   : }

  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c2 04 00	 ret	 4
?OnCreate@CTranslucentDialog@@AAEHPAUtagCREATESTRUCTA@@@Z ENDP ; CTranslucentDialog::OnCreate
_TEXT	ENDS
PUBLIC	?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ; CTranslucentDialog::UpdatePosition
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 8
?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z PROC NEAR ; CTranslucentDialog::UpdatePosition
; _this$ = ecx

; 73   : {

  00230	55		 push	 ebp
  00231	8b ec		 mov	 ebp, esp
  00233	51		 push	 ecx
  00234	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	m_ptPos = p;

  00237	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0023d	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  00240	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp+4]
  00243	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 75   : }

  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c2 08 00	 ret	 8
?UpdatePosition@CTranslucentDialog@@QAEXUtagPOINT@@@Z ENDP ; CTranslucentDialog::UpdatePosition
_TEXT	ENDS
PUBLIC	?GetWidth@Image@Gdiplus@@QAEIXZ			; Gdiplus::Image::GetWidth
PUBLIC	?GetImageWidth@CTranslucentDialog@@QAEHXZ	; CTranslucentDialog::GetImageWidth
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetImageWidth@CTranslucentDialog@@QAEHXZ PROC NEAR	; CTranslucentDialog::GetImageWidth
; _this$ = ecx

; 78   : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	51		 push	 ecx
  00254	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   : 	if(m_pImage == NULL)

  00257	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00261	75 04		 jne	 SHORT $L199072

; 80   : 		return 0;

  00263	33 c0		 xor	 eax, eax
  00265	eb 0e		 jmp	 SHORT $L199071
$L199072:

; 81   : 	else
; 82   : 		return m_pImage->GetWidth();

  00267	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026a	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  00270	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
$L199071:

; 83   : }

  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c3		 ret	 0
?GetImageWidth@CTranslucentDialog@@QAEHXZ ENDP		; CTranslucentDialog::GetImageWidth
_TEXT	ENDS
PUBLIC	?GetHeight@Image@Gdiplus@@QAEIXZ		; Gdiplus::Image::GetHeight
PUBLIC	?GetImageHeight@CTranslucentDialog@@QAEHXZ	; CTranslucentDialog::GetImageHeight
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetImageHeight@CTranslucentDialog@@QAEHXZ PROC NEAR	; CTranslucentDialog::GetImageHeight
; _this$ = ecx

; 86   : {

  00280	55		 push	 ebp
  00281	8b ec		 mov	 ebp, esp
  00283	51		 push	 ecx
  00284	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   : 	if(m_pImage == NULL)

  00287	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00291	75 04		 jne	 SHORT $L199077

; 88   : 		return 0;

  00293	33 c0		 xor	 eax, eax
  00295	eb 0e		 jmp	 SHORT $L199076
$L199077:

; 89   : 	else
; 90   : 		return m_pImage->GetHeight();

  00297	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  002a0	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
$L199076:

; 91   : }

  002a5	8b e5		 mov	 esp, ebp
  002a7	5d		 pop	 ebp
  002a8	c3		 ret	 0
?GetImageHeight@CTranslucentDialog@@QAEHXZ ENDP		; CTranslucentDialog::GetImageHeight
_TEXT	ENDS
PUBLIC	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetWindowRect
PUBLIC	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetClientRect
PUBLIC	?SetInterpolationMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4InterpolationMode@2@@Z ; Gdiplus::Graphics::SetInterpolationMode
PUBLIC	?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?SetDontMoveContent@CWindowsMover@@QAEXXZ	; CWindowsMover::SetDontMoveContent
PUBLIC	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z ; Gdiplus::Graphics::DrawImage
PUBLIC	?UpdateView@CTranslucentDialog@@QAEXH@Z		; CTranslucentDialog::UpdateView
PUBLIC	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z		; Gdiplus::Graphics::Graphics
PUBLIC	??1Graphics@Gdiplus@@QAE@XZ			; Gdiplus::Graphics::~Graphics
PUBLIC	?ReleaseHDC@Graphics@Gdiplus@@QAEXPAUHDC__@@@Z	; Gdiplus::Graphics::ReleaseHDC
EXTRN	__imp__FreeLibrary@4:NEAR
EXTRN	__imp__GetProcAddress@8:NEAR
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	?GetInstance@CWindowsMover@@SAPAV1@XZ:NEAR	; CWindowsMover::GetInstance
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	__imp__CreateDIBSection@24:NEAR
EXTRN	__imp__LoadLibraryA@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	__imp__SetWindowLongA@12:NEAR
EXTRN	_memset:NEAR
xdata$x	SEGMENT
$T199686 DD	0ffffffffH
	DD	FLAT:$L199682
$T199684 DD	019930520H
	DD	01H
	DD	FLAT:$T199686
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv381 = -208						; size = 4
tv345 = -204						; size = 4
tv303 = -200						; size = 4
tv267 = -196						; size = 4
_this$ = -192						; size = 4
_i$199133 = -188					; size = 4
_i$199125 = -184					; size = 4
_i$199117 = -180					; size = 4
_i$199109 = -176					; size = 4
_hbmpOld$199103 = -172					; size = 4
_ptSrc$199156 = -168					; size = 8
_ptWinPos$199104 = -160					; size = 8
_ret$199157 = -152					; size = 4
_graph$199105 = -148					; size = 8
_nStart$199106 = -140					; size = 4
_UpdateLayeredWindow$199153 = -136			; size = 4
_hFuncInst$199141 = -132				; size = 4
_nSize$199107 = -128					; size = 4
_sizeWindow$ = -124					; size = 8
_rcClient$ = -116					; size = 16
_sizeAllWindow$ = -100					; size = 8
_nBytesPerLine$ = -92					; size = 4
_dwExStyle$ = -88					; size = 4
_pvBits$ = -84						; size = 4
_hDC$ = -80						; size = 4
_rcWindow$ = -76					; size = 16
_hdcMemory$ = -60					; size = 4
_hbmpMem$ = -56						; size = 4
_stBmpInfoHeader$ = -52					; size = 40
__$EHRec$ = -12						; size = 12
_bMustUpdate$ = 8					; size = 4
?UpdateView@CTranslucentDialog@@QAEXH@Z PROC NEAR	; CTranslucentDialog::UpdateView
; _this$ = ecx

; 94   : {

  002b0	55		 push	 ebp
  002b1	8b ec		 mov	 ebp, esp
  002b3	6a ff		 push	 -1
  002b5	68 00 00 00 00	 push	 __ehhandler$?UpdateView@CTranslucentDialog@@QAEXH@Z
  002ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  002c0	50		 push	 eax
  002c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  002c8	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  002ce	56		 push	 esi
  002cf	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 	if(m_pImage == NULL)

  002d5	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002db	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  002e2	75 05		 jne	 SHORT $L199083

; 96   : 	{ 
; 97   : 		return;

  002e4	e9 a7 07 00 00	 jmp	 $L199082
$L199083:

; 98   : 	}
; 99   : 	if(m_pLastImage == m_pImage && !bMustUpdate)

  002e9	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002ef	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  002f5	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  002fb	3b 82 88 00 00
	00		 cmp	 eax, DWORD PTR [edx+136]
  00301	75 6f		 jne	 SHORT $L199084
  00303	83 7d 08 00	 cmp	 DWORD PTR _bMustUpdate$[ebp], 0
  00307	75 69		 jne	 SHORT $L199084

; 100  : 	{
; 101  : 		if(m_pLastImage == NULL)

  00309	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0030f	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00316	75 05		 jne	 SHORT $L199085

; 102  : 		{
; 103  : 			return;

  00318	e9 73 07 00 00	 jmp	 $L199082
$L199085:

; 104  : 		}
; 105  : 		TRACE("w: %d ,h: %d, wold:%d, hold%d\r\n", m_pImage->GetWidth(),m_pImage->GetHeight(),m_pImage->GetWidth(),m_pImage->GetHeight());
; 106  : 		if(m_pLastImage->GetWidth() == m_pImage->GetWidth() 
; 107  : 			&& m_pLastImage->GetHeight() == m_pImage->GetHeight())

  0031d	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00323	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  00329	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  0032e	8b f0		 mov	 esi, eax
  00330	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00336	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0033c	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  00341	3b f0		 cmp	 esi, eax
  00343	75 2d		 jne	 SHORT $L199084
  00345	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0034b	8b 89 8c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+140]
  00351	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  00356	8b f0		 mov	 esi, eax
  00358	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0035e	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00364	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  00369	3b f0		 cmp	 esi, eax
  0036b	75 05		 jne	 SHORT $L199084

; 108  : 		{
; 109  : 			return;

  0036d	e9 1e 07 00 00	 jmp	 $L199082
$L199084:

; 110  : 		}
; 111  : 	}
; 112  : 
; 113  : 	m_pLastImage = m_pImage;

  00372	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00378	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0037e	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00384	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 114  : 	
; 115  : 	SIZE sizeWindow = { m_pImage->GetWidth(), m_pImage->GetHeight() };

  0038a	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00390	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00396	e8 00 00 00 00	 call	 ?GetWidth@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetWidth
  0039b	89 45 84	 mov	 DWORD PTR _sizeWindow$[ebp], eax
  0039e	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  003a4	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  003aa	e8 00 00 00 00	 call	 ?GetHeight@Image@Gdiplus@@QAEIXZ ; Gdiplus::Image::GetHeight
  003af	89 45 88	 mov	 DWORD PTR _sizeWindow$[ebp+4], eax

; 116  : 
; 117  : 	DWORD dwExStyle = ::GetWindowLong(m_hWnd, GWL_EXSTYLE);

  003b2	6a ec		 push	 -20			; ffffffecH
  003b4	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  003ba	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  003bd	50		 push	 eax
  003be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  003c4	89 45 a8	 mov	 DWORD PTR _dwExStyle$[ebp], eax

; 118  : 	if ((dwExStyle & 0x80000) != 0x80000)

  003c7	8b 4d a8	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  003ca	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  003d0	75 1c		 jne	 SHORT $L199089

; 119  : 		::SetWindowLong(m_hWnd, GWL_EXSTYLE, dwExStyle | 0x80000);

  003d2	8b 55 a8	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  003d5	81 ca 00 00 08
	00		 or	 edx, 524288		; 00080000H
  003db	52		 push	 edx
  003dc	6a ec		 push	 -20			; ffffffecH
  003de	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  003e4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003e7	51		 push	 ecx
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
$L199089:

; 120  : 
; 121  : 	CWindowsMover::GetInstance()->SetDontMoveContent();

  003ee	e8 00 00 00 00	 call	 ?GetInstance@CWindowsMover@@SAPAV1@XZ ; CWindowsMover::GetInstance
  003f3	8b c8		 mov	 ecx, eax
  003f5	e8 00 00 00 00	 call	 ?SetDontMoveContent@CWindowsMover@@QAEXXZ ; CWindowsMover::SetDontMoveContent

; 122  : 
; 123  : 	HDC hDC = ::GetDC(m_hWnd);

  003fa	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00400	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00403	50		 push	 eax
  00404	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0040a	89 45 b0	 mov	 DWORD PTR _hDC$[ebp], eax

; 124  : 	HDC hdcMemory = CreateCompatibleDC(hDC);

  0040d	8b 4d b0	 mov	 ecx, DWORD PTR _hDC$[ebp]
  00410	51		 push	 ecx
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00417	89 45 c4	 mov	 DWORD PTR _hdcMemory$[ebp], eax

; 125  : 
; 126  : 	RECT rcWindow;
; 127  : 	GetWindowRect(&rcWindow);

  0041a	8d 55 b4	 lea	 edx, DWORD PTR _rcWindow$[ebp]
  0041d	52		 push	 edx
  0041e	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00424	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 128  : 
; 129  : 	CRect rcClient;

  00429	8d 4d 8c	 lea	 ecx, DWORD PTR _rcClient$[ebp]
  0042c	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 130  : 	GetClientRect(&rcClient);

  00431	8d 45 8c	 lea	 eax, DWORD PTR _rcClient$[ebp]
  00434	50		 push	 eax
  00435	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0043b	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 131  : 
; 132  : 	SIZE sizeAllWindow = {rcClient.Width(), rcClient.Height()};

  00440	8d 4d 8c	 lea	 ecx, DWORD PTR _rcClient$[ebp]
  00443	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00448	89 45 9c	 mov	 DWORD PTR _sizeAllWindow$[ebp], eax
  0044b	8d 4d 8c	 lea	 ecx, DWORD PTR _rcClient$[ebp]
  0044e	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00453	89 45 a0	 mov	 DWORD PTR _sizeAllWindow$[ebp+4], eax

; 133  : 	BITMAPINFOHEADER stBmpInfoHeader = { 0 };   

  00456	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _stBmpInfoHeader$[ebp], 0
  0045d	33 c9		 xor	 ecx, ecx
  0045f	89 4d d0	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+4], ecx
  00462	89 4d d4	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+8], ecx
  00465	89 4d d8	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+12], ecx
  00468	89 4d dc	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+16], ecx
  0046b	89 4d e0	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+20], ecx
  0046e	89 4d e4	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+24], ecx
  00471	89 4d e8	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+28], ecx
  00474	89 4d ec	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+32], ecx
  00477	89 4d f0	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+36], ecx

; 134  : 	int nBytesPerLine = ((sizeWindow.cx * 32 + 31) & (~31)) >> 3;

  0047a	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  0047d	c1 e2 05	 shl	 edx, 5
  00480	83 c2 1f	 add	 edx, 31			; 0000001fH
  00483	83 e2 e0	 and	 edx, -32		; ffffffe0H
  00486	c1 fa 03	 sar	 edx, 3
  00489	89 55 a4	 mov	 DWORD PTR _nBytesPerLine$[ebp], edx

; 135  : 	stBmpInfoHeader.biSize = sizeof(BITMAPINFOHEADER);   

  0048c	c7 45 cc 28 00
	00 00		 mov	 DWORD PTR _stBmpInfoHeader$[ebp], 40 ; 00000028H

; 136  : 	stBmpInfoHeader.biWidth = rcClient.Width();//sizeWindow.cx;   

  00493	8d 4d 8c	 lea	 ecx, DWORD PTR _rcClient$[ebp]
  00496	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  0049b	89 45 d0	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+4], eax

; 137  : 	stBmpInfoHeader.biHeight = rcClient.Height();//sizeWindow.cy;   

  0049e	8d 4d 8c	 lea	 ecx, DWORD PTR _rcClient$[ebp]
  004a1	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  004a6	89 45 d4	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+8], eax

; 138  : 	stBmpInfoHeader.biPlanes = 1;   

  004a9	66 c7 45 d8 01
	00		 mov	 WORD PTR _stBmpInfoHeader$[ebp+12], 1

; 139  : 	stBmpInfoHeader.biBitCount = 32;   

  004af	66 c7 45 da 20
	00		 mov	 WORD PTR _stBmpInfoHeader$[ebp+14], 32 ; 00000020H

; 140  : 	stBmpInfoHeader.biCompression = BI_RGB;   

  004b5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _stBmpInfoHeader$[ebp+16], 0

; 141  : 	stBmpInfoHeader.biClrUsed = 0;   

  004bc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _stBmpInfoHeader$[ebp+32], 0

; 142  : 	stBmpInfoHeader.biSizeImage = nBytesPerLine * sizeWindow.cy;   

  004c3	8b 45 a4	 mov	 eax, DWORD PTR _nBytesPerLine$[ebp]
  004c6	0f af 45 88	 imul	 eax, DWORD PTR _sizeWindow$[ebp+4]
  004ca	89 45 e0	 mov	 DWORD PTR _stBmpInfoHeader$[ebp+20], eax

; 143  : 
; 144  : 	PVOID pvBits = NULL;   

  004cd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _pvBits$[ebp], 0

; 145  : 	HBITMAP hbmpMem = ::CreateDIBSection(NULL, (PBITMAPINFO)&stBmpInfoHeader, DIB_RGB_COLORS, &pvBits, NULL, 0);

  004d4	6a 00		 push	 0
  004d6	6a 00		 push	 0
  004d8	8d 4d ac	 lea	 ecx, DWORD PTR _pvBits$[ebp]
  004db	51		 push	 ecx
  004dc	6a 00		 push	 0
  004de	8d 55 cc	 lea	 edx, DWORD PTR _stBmpInfoHeader$[ebp]
  004e1	52		 push	 edx
  004e2	6a 00		 push	 0
  004e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDIBSection@24
  004ea	89 45 c8	 mov	 DWORD PTR _hbmpMem$[ebp], eax

; 146  : 	ASSERT(hbmpMem != NULL);
; 147  : 
; 148  : 	memset( pvBits, 0, sizeWindow.cx * 4 * sizeWindow.cy);

  004ed	8b 45 84	 mov	 eax, DWORD PTR _sizeWindow$[ebp]
  004f0	c1 e0 02	 shl	 eax, 2
  004f3	0f af 45 88	 imul	 eax, DWORD PTR _sizeWindow$[ebp+4]
  004f7	50		 push	 eax
  004f8	6a 00		 push	 0
  004fa	8b 4d ac	 mov	 ecx, DWORD PTR _pvBits$[ebp]
  004fd	51		 push	 ecx
  004fe	e8 00 00 00 00	 call	 _memset
  00503	83 c4 0c	 add	 esp, 12			; 0000000cH

; 149  : 	if(hbmpMem)   

  00506	83 7d c8 00	 cmp	 DWORD PTR _hbmpMem$[ebp], 0
  0050a	0f 84 6c 05 00
	00		 je	 $L199102

; 150  : 	{   
; 151  : 		HGDIOBJ hbmpOld = ::SelectObject( hdcMemory, hbmpMem);

  00510	8b 55 c8	 mov	 edx, DWORD PTR _hbmpMem$[ebp]
  00513	52		 push	 edx
  00514	8b 45 c4	 mov	 eax, DWORD PTR _hdcMemory$[ebp]
  00517	50		 push	 eax
  00518	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  0051e	89 85 54 ff ff
	ff		 mov	 DWORD PTR _hbmpOld$199103[ebp], eax

; 152  : 		//POINT ptWinPos = { m_rcWindow.left, m_rcWindow.top };
; 153  : 		POINT ptWinPos = { rcWindow.left, rcWindow.top };

  00524	8b 4d b4	 mov	 ecx, DWORD PTR _rcWindow$[ebp]
  00527	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _ptWinPos$199104[ebp], ecx
  0052d	8b 55 b8	 mov	 edx, DWORD PTR _rcWindow$[ebp+4]
  00530	89 95 64 ff ff
	ff		 mov	 DWORD PTR _ptWinPos$199104[ebp+4], edx

; 154  : 		Gdiplus::Graphics graph(hdcMemory);

  00536	8b 45 c4	 mov	 eax, DWORD PTR _hdcMemory$[ebp]
  00539	50		 push	 eax
  0053a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00540	e8 00 00 00 00	 call	 ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ; Gdiplus::Graphics::Graphics
  00545	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 155  : 		//graph.SetSmoothingMode(Gdiplus::SmoothingModeNone);
; 156  : 		graph.SetSmoothingMode(SmoothingModeAntiAlias);

  0054c	6a 04		 push	 4
  0054e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00554	e8 00 00 00 00	 call	 ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode

; 157  : 		graph.SetInterpolationMode(InterpolationModeHighQualityBicubic);

  00559	6a 07		 push	 7
  0055b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00561	e8 00 00 00 00	 call	 ?SetInterpolationMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4InterpolationMode@2@@Z ; Gdiplus::Graphics::SetInterpolationMode

; 158  : 		graph.DrawImage(m_pImage, 0, 0, sizeWindow.cx, sizeWindow.cy);

  00566	8b 4d 88	 mov	 ecx, DWORD PTR _sizeWindow$[ebp+4]
  00569	51		 push	 ecx
  0056a	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  0056d	52		 push	 edx
  0056e	6a 00		 push	 0
  00570	6a 00		 push	 0
  00572	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00578	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0057e	51		 push	 ecx
  0057f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00585	e8 00 00 00 00	 call	 ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z ; Gdiplus::Graphics::DrawImage

; 159  : 
; 160  : 		int nStart, nSize;
; 161  : 		if(m_position == LEFT_TOP_CORNER && m_ptPos.x + 2 < sizeWindow.cx && m_ptPos.y + 2< sizeWindow.cy)

  0058a	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00590	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00594	0f 85 ff 00 00
	00		 jne	 $L199108
  0059a	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  005a0	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  005a3	83 c1 02	 add	 ecx, 2
  005a6	3b 4d 84	 cmp	 ecx, DWORD PTR _sizeWindow$[ebp]
  005a9	0f 8d ea 00 00
	00		 jge	 $L199108
  005af	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  005b5	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  005b8	83 c0 02	 add	 eax, 2
  005bb	3b 45 88	 cmp	 eax, DWORD PTR _sizeWindow$[ebp+4]
  005be	0f 8d d5 00 00
	00		 jge	 $L199108

; 162  : 		{
; 163  : 			for(int i = 0 ; i<sizeAllWindow.cy - (m_ptPos.y + 2) ; i++)

  005c4	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$199109[ebp], 0
  005ce	eb 0f		 jmp	 SHORT $L199110
$L199111:
  005d0	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _i$199109[ebp]
  005d6	83 c1 01	 add	 ecx, 1
  005d9	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _i$199109[ebp], ecx
$L199110:
  005df	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  005e5	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  005e8	83 c0 02	 add	 eax, 2
  005eb	8b 4d a0	 mov	 ecx, DWORD PTR _sizeAllWindow$[ebp+4]
  005ee	2b c8		 sub	 ecx, eax
  005f0	39 8d 50 ff ff
	ff		 cmp	 DWORD PTR _i$199109[ebp], ecx
  005f6	0f 8d 9d 00 00
	00		 jge	 $L199108

; 164  : 			{
; 165  : 				nStart = sizeWindow.cx * 4 * i + (m_ptPos.x + 2) * 4;

  005fc	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  005ff	c1 e2 02	 shl	 edx, 2
  00602	0f af 95 50 ff
	ff ff		 imul	 edx, DWORD PTR _i$199109[ebp]
  00609	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0060f	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00612	8d 54 8a 08	 lea	 edx, DWORD PTR [edx+ecx*4+8]
  00616	89 95 74 ff ff
	ff		 mov	 DWORD PTR _nStart$199106[ebp], edx

; 166  : 				nSize = (m_ptPos.x + 2 < 0) ? sizeWindow.cx * 4 : ( sizeWindow.cx - m_ptPos.x - 2) * 4;

  0061c	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00622	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00625	83 c1 02	 add	 ecx, 2
  00628	79 0e		 jns	 SHORT $L199674
  0062a	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  0062d	c1 e2 02	 shl	 edx, 2
  00630	89 95 3c ff ff
	ff		 mov	 DWORD PTR tv267[ebp], edx
  00636	eb 19		 jmp	 SHORT $L199675
$L199674:
  00638	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0063e	8b 4d 84	 mov	 ecx, DWORD PTR _sizeWindow$[ebp]
  00641	2b 48 78	 sub	 ecx, DWORD PTR [eax+120]
  00644	8d 14 8d f8 ff
	ff ff		 lea	 edx, DWORD PTR [ecx*4-8]
  0064b	89 95 3c ff ff
	ff		 mov	 DWORD PTR tv267[ebp], edx
$L199675:
  00651	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv267[ebp]
  00657	89 45 80	 mov	 DWORD PTR _nSize$199107[ebp], eax

; 167  : 				if(nStart < 0 || nSize + nStart > stBmpInfoHeader.biSizeImage || nSize < 0)

  0065a	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _nStart$199106[ebp], 0
  00661	7c 14		 jl	 SHORT $L199114
  00663	8b 4d 80	 mov	 ecx, DWORD PTR _nSize$199107[ebp]
  00666	03 8d 74 ff ff
	ff		 add	 ecx, DWORD PTR _nStart$199106[ebp]
  0066c	3b 4d e0	 cmp	 ecx, DWORD PTR _stBmpInfoHeader$[ebp+20]
  0066f	77 06		 ja	 SHORT $L199114
  00671	83 7d 80 00	 cmp	 DWORD PTR _nSize$199107[ebp], 0
  00675	7d 05		 jge	 SHORT $L199113
$L199114:

; 168  : 					continue;

  00677	e9 54 ff ff ff	 jmp	 $L199111
$L199113:

; 169  : 				memset(((BYTE*)pvBits) + nStart , 0, nSize);

  0067c	8b 55 80	 mov	 edx, DWORD PTR _nSize$199107[ebp]
  0067f	52		 push	 edx
  00680	6a 00		 push	 0
  00682	8b 45 ac	 mov	 eax, DWORD PTR _pvBits$[ebp]
  00685	03 85 74 ff ff
	ff		 add	 eax, DWORD PTR _nStart$199106[ebp]
  0068b	50		 push	 eax
  0068c	e8 00 00 00 00	 call	 _memset
  00691	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 			}

  00694	e9 37 ff ff ff	 jmp	 $L199111
$L199108:

; 171  : 		}
; 172  : 
; 173  : 		if(m_position == RIGHT_TOP_CORNER && m_ptPos.x - 2 > 0 && m_ptPos.y +2 < sizeWindow.cy)

  00699	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0069f	83 79 74 02	 cmp	 DWORD PTR [ecx+116], 2
  006a3	0f 85 f1 00 00
	00		 jne	 $L199116
  006a9	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  006af	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  006b2	83 e8 02	 sub	 eax, 2
  006b5	85 c0		 test	 eax, eax
  006b7	0f 8e dd 00 00
	00		 jle	 $L199116
  006bd	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006c3	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  006c6	83 c2 02	 add	 edx, 2
  006c9	3b 55 88	 cmp	 edx, DWORD PTR _sizeWindow$[ebp+4]
  006cc	0f 8d c8 00 00
	00		 jge	 $L199116

; 174  : 		{
; 175  : 			for(int i = 0 ; i<sizeAllWindow.cy - (m_ptPos.y + 2) ; i++)

  006d2	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$199117[ebp], 0
  006dc	eb 0f		 jmp	 SHORT $L199118
$L199119:
  006de	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _i$199117[ebp]
  006e4	83 c0 01	 add	 eax, 1
  006e7	89 85 4c ff ff
	ff		 mov	 DWORD PTR _i$199117[ebp], eax
$L199118:
  006ed	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006f3	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  006f6	83 c2 02	 add	 edx, 2
  006f9	8b 45 a0	 mov	 eax, DWORD PTR _sizeAllWindow$[ebp+4]
  006fc	2b c2		 sub	 eax, edx
  006fe	39 85 4c ff ff
	ff		 cmp	 DWORD PTR _i$199117[ebp], eax
  00704	0f 8d 90 00 00
	00		 jge	 $L199116

; 176  : 			{
; 177  : 				nStart = sizeWindow.cx * 4 * i;

  0070a	8b 4d 84	 mov	 ecx, DWORD PTR _sizeWindow$[ebp]
  0070d	c1 e1 02	 shl	 ecx, 2
  00710	0f af 8d 4c ff
	ff ff		 imul	 ecx, DWORD PTR _i$199117[ebp]
  00717	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _nStart$199106[ebp], ecx

; 178  : 				nSize = (m_ptPos.x - 2 > sizeWindow.cx) ? sizeWindow.cx * 4 : (m_ptPos.x - 2) * 4;

  0071d	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00723	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00726	83 e8 02	 sub	 eax, 2
  00729	3b 45 84	 cmp	 eax, DWORD PTR _sizeWindow$[ebp]
  0072c	7e 0e		 jle	 SHORT $L199676
  0072e	8b 4d 84	 mov	 ecx, DWORD PTR _sizeWindow$[ebp]
  00731	c1 e1 02	 shl	 ecx, 2
  00734	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv303[ebp], ecx
  0073a	eb 16		 jmp	 SHORT $L199677
$L199676:
  0073c	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00742	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00745	8d 0c 85 f8 ff
	ff ff		 lea	 ecx, DWORD PTR [eax*4-8]
  0074c	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv303[ebp], ecx
$L199677:
  00752	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv303[ebp]
  00758	89 55 80	 mov	 DWORD PTR _nSize$199107[ebp], edx

; 179  : 				if(nStart < 0 || nSize + nStart > stBmpInfoHeader.biSizeImage || nSize < 0)

  0075b	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _nStart$199106[ebp], 0
  00762	7c 14		 jl	 SHORT $L199122
  00764	8b 45 80	 mov	 eax, DWORD PTR _nSize$199107[ebp]
  00767	03 85 74 ff ff
	ff		 add	 eax, DWORD PTR _nStart$199106[ebp]
  0076d	3b 45 e0	 cmp	 eax, DWORD PTR _stBmpInfoHeader$[ebp+20]
  00770	77 06		 ja	 SHORT $L199122
  00772	83 7d 80 00	 cmp	 DWORD PTR _nSize$199107[ebp], 0
  00776	7d 05		 jge	 SHORT $L199121
$L199122:

; 180  : 					continue;

  00778	e9 61 ff ff ff	 jmp	 $L199119
$L199121:

; 181  : 				memset(((BYTE*)pvBits) + nStart , 0, nSize);

  0077d	8b 4d 80	 mov	 ecx, DWORD PTR _nSize$199107[ebp]
  00780	51		 push	 ecx
  00781	6a 00		 push	 0
  00783	8b 55 ac	 mov	 edx, DWORD PTR _pvBits$[ebp]
  00786	03 95 74 ff ff
	ff		 add	 edx, DWORD PTR _nStart$199106[ebp]
  0078c	52		 push	 edx
  0078d	e8 00 00 00 00	 call	 _memset
  00792	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  : 			}

  00795	e9 44 ff ff ff	 jmp	 $L199119
$L199116:

; 183  : 
; 184  : 		}
; 185  : 		
; 186  : 		if(m_position == LEFT_BOTTOM_CORNER&& m_ptPos.x + 2 < sizeWindow.cx  && m_ptPos.y - 2 > 0)

  0079a	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  007a0	83 78 74 01	 cmp	 DWORD PTR [eax+116], 1
  007a4	0f 85 fb 00 00
	00		 jne	 $L199124
  007aa	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  007b0	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  007b3	83 c2 02	 add	 edx, 2
  007b6	3b 55 84	 cmp	 edx, DWORD PTR _sizeWindow$[ebp]
  007b9	0f 8d e6 00 00
	00		 jge	 $L199124
  007bf	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  007c5	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  007c8	83 e9 02	 sub	 ecx, 2
  007cb	85 c9		 test	 ecx, ecx
  007cd	0f 8e d2 00 00
	00		 jle	 $L199124

; 187  : 		{
; 188  : 			for(int i = (sizeWindow.cy - m_ptPos.y + 2) ; i<sizeWindow.cy ; i++)

  007d3	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  007d9	8b 45 88	 mov	 eax, DWORD PTR _sizeWindow$[ebp+4]
  007dc	2b 42 7c	 sub	 eax, DWORD PTR [edx+124]
  007df	83 c0 02	 add	 eax, 2
  007e2	89 85 48 ff ff
	ff		 mov	 DWORD PTR _i$199125[ebp], eax
  007e8	eb 0f		 jmp	 SHORT $L199126
$L199127:
  007ea	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _i$199125[ebp]
  007f0	83 c1 01	 add	 ecx, 1
  007f3	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _i$199125[ebp], ecx
$L199126:
  007f9	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _i$199125[ebp]
  007ff	3b 55 88	 cmp	 edx, DWORD PTR _sizeWindow$[ebp+4]
  00802	0f 8d 9d 00 00
	00		 jge	 $L199124

; 189  : 			{
; 190  : 				nStart = sizeWindow.cx * 4 * i + (m_ptPos.x + 2) * 4;

  00808	8b 45 84	 mov	 eax, DWORD PTR _sizeWindow$[ebp]
  0080b	c1 e0 02	 shl	 eax, 2
  0080e	0f af 85 48 ff
	ff ff		 imul	 eax, DWORD PTR _i$199125[ebp]
  00815	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0081b	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0081e	8d 44 90 08	 lea	 eax, DWORD PTR [eax+edx*4+8]
  00822	89 85 74 ff ff
	ff		 mov	 DWORD PTR _nStart$199106[ebp], eax

; 191  : 				nSize = (m_ptPos.x + 2 < 0) ? sizeWindow.cx * 4 : ( sizeWindow.cx - m_ptPos.x - 2) * 4;

  00828	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0082e	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00831	83 c2 02	 add	 edx, 2
  00834	79 0e		 jns	 SHORT $L199678
  00836	8b 45 84	 mov	 eax, DWORD PTR _sizeWindow$[ebp]
  00839	c1 e0 02	 shl	 eax, 2
  0083c	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv345[ebp], eax
  00842	eb 19		 jmp	 SHORT $L199679
$L199678:
  00844	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0084a	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  0084d	2b 51 78	 sub	 edx, DWORD PTR [ecx+120]
  00850	8d 04 95 f8 ff
	ff ff		 lea	 eax, DWORD PTR [edx*4-8]
  00857	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv345[ebp], eax
$L199679:
  0085d	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv345[ebp]
  00863	89 4d 80	 mov	 DWORD PTR _nSize$199107[ebp], ecx

; 192  : 				if(nStart < 0 || nSize + nStart > stBmpInfoHeader.biSizeImage|| nSize < 0)

  00866	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _nStart$199106[ebp], 0
  0086d	7c 14		 jl	 SHORT $L199130
  0086f	8b 55 80	 mov	 edx, DWORD PTR _nSize$199107[ebp]
  00872	03 95 74 ff ff
	ff		 add	 edx, DWORD PTR _nStart$199106[ebp]
  00878	3b 55 e0	 cmp	 edx, DWORD PTR _stBmpInfoHeader$[ebp+20]
  0087b	77 06		 ja	 SHORT $L199130
  0087d	83 7d 80 00	 cmp	 DWORD PTR _nSize$199107[ebp], 0
  00881	7d 05		 jge	 SHORT $L199129
$L199130:

; 193  : 					continue;

  00883	e9 62 ff ff ff	 jmp	 $L199127
$L199129:

; 194  : 				memset(((BYTE*)pvBits) + nStart , 0, nSize);

  00888	8b 45 80	 mov	 eax, DWORD PTR _nSize$199107[ebp]
  0088b	50		 push	 eax
  0088c	6a 00		 push	 0
  0088e	8b 4d ac	 mov	 ecx, DWORD PTR _pvBits$[ebp]
  00891	03 8d 74 ff ff
	ff		 add	 ecx, DWORD PTR _nStart$199106[ebp]
  00897	51		 push	 ecx
  00898	e8 00 00 00 00	 call	 _memset
  0089d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 			}

  008a0	e9 45 ff ff ff	 jmp	 $L199127
$L199124:

; 196  : 		}
; 197  : 		if(m_position == RIGHT_BOTTOM_CORNER && m_ptPos.x - 2 > 0  && m_ptPos.y - 2 > 0)

  008a5	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  008ab	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  008af	0f 85 ed 00 00
	00		 jne	 $L199132
  008b5	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  008bb	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  008be	83 e9 02	 sub	 ecx, 2
  008c1	85 c9		 test	 ecx, ecx
  008c3	0f 8e d9 00 00
	00		 jle	 $L199132
  008c9	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  008cf	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  008d2	83 e8 02	 sub	 eax, 2
  008d5	85 c0		 test	 eax, eax
  008d7	0f 8e c5 00 00
	00		 jle	 $L199132

; 198  : 		{
; 199  : 			for(int i = (sizeWindow.cy - m_ptPos.y + 2) ; i<sizeWindow.cy ; i++)

  008dd	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  008e3	8b 55 88	 mov	 edx, DWORD PTR _sizeWindow$[ebp+4]
  008e6	2b 51 7c	 sub	 edx, DWORD PTR [ecx+124]
  008e9	83 c2 02	 add	 edx, 2
  008ec	89 95 44 ff ff
	ff		 mov	 DWORD PTR _i$199133[ebp], edx
  008f2	eb 0f		 jmp	 SHORT $L199134
$L199135:
  008f4	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _i$199133[ebp]
  008fa	83 c0 01	 add	 eax, 1
  008fd	89 85 44 ff ff
	ff		 mov	 DWORD PTR _i$199133[ebp], eax
$L199134:
  00903	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _i$199133[ebp]
  00909	3b 4d 88	 cmp	 ecx, DWORD PTR _sizeWindow$[ebp+4]
  0090c	0f 8d 90 00 00
	00		 jge	 $L199132

; 200  : 			{
; 201  : 				nStart = sizeWindow.cx * 4 * i;

  00912	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  00915	c1 e2 02	 shl	 edx, 2
  00918	0f af 95 44 ff
	ff ff		 imul	 edx, DWORD PTR _i$199133[ebp]
  0091f	89 95 74 ff ff
	ff		 mov	 DWORD PTR _nStart$199106[ebp], edx

; 202  : 				nSize = (m_ptPos.x - 2 > sizeWindow.cx) ? sizeWindow.cx * 4 : (m_ptPos.x - 2) * 4;

  00925	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0092b	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0092e	83 e9 02	 sub	 ecx, 2
  00931	3b 4d 84	 cmp	 ecx, DWORD PTR _sizeWindow$[ebp]
  00934	7e 0e		 jle	 SHORT $L199680
  00936	8b 55 84	 mov	 edx, DWORD PTR _sizeWindow$[ebp]
  00939	c1 e2 02	 shl	 edx, 2
  0093c	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv381[ebp], edx
  00942	eb 16		 jmp	 SHORT $L199681
$L199680:
  00944	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0094a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0094d	8d 14 8d f8 ff
	ff ff		 lea	 edx, DWORD PTR [ecx*4-8]
  00954	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv381[ebp], edx
$L199681:
  0095a	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv381[ebp]
  00960	89 45 80	 mov	 DWORD PTR _nSize$199107[ebp], eax

; 203  : 				if(nStart < 0 || nSize + nStart > stBmpInfoHeader.biSizeImage|| nSize < 0)

  00963	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _nStart$199106[ebp], 0
  0096a	7c 14		 jl	 SHORT $L199138
  0096c	8b 4d 80	 mov	 ecx, DWORD PTR _nSize$199107[ebp]
  0096f	03 8d 74 ff ff
	ff		 add	 ecx, DWORD PTR _nStart$199106[ebp]
  00975	3b 4d e0	 cmp	 ecx, DWORD PTR _stBmpInfoHeader$[ebp+20]
  00978	77 06		 ja	 SHORT $L199138
  0097a	83 7d 80 00	 cmp	 DWORD PTR _nSize$199107[ebp], 0
  0097e	7d 05		 jge	 SHORT $L199137
$L199138:

; 204  : 					continue;

  00980	e9 6f ff ff ff	 jmp	 $L199135
$L199137:

; 205  : 				memset(((BYTE*)pvBits) + nStart , 0, nSize);

  00985	8b 55 80	 mov	 edx, DWORD PTR _nSize$199107[ebp]
  00988	52		 push	 edx
  00989	6a 00		 push	 0
  0098b	8b 45 ac	 mov	 eax, DWORD PTR _pvBits$[ebp]
  0098e	03 85 74 ff ff
	ff		 add	 eax, DWORD PTR _nStart$199106[ebp]
  00994	50		 push	 eax
  00995	e8 00 00 00 00	 call	 _memset
  0099a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : 			}

  0099d	e9 52 ff ff ff	 jmp	 $L199135
$L199132:

; 207  : 		}
; 208  : 
; 209  : 		if(!CWindowsMover::GetInstance()->m_bDontMoveContent)

  009a2	e8 00 00 00 00	 call	 ?GetInstance@CWindowsMover@@SAPAV1@XZ ; CWindowsMover::GetInstance
  009a7	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  009ab	75 08		 jne	 SHORT $L199140

; 210  : 			Sleep(50);

  009ad	6a 32		 push	 50			; 00000032H
  009af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
$L199140:

; 211  : 
; 212  : 		HMODULE hFuncInst = LoadLibrary(_T("User32.DLL"));

  009b5	68 00 00 00 00	 push	 OFFSET FLAT:$SG199142
  009ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  009c0	89 85 7c ff ff
	ff		 mov	 DWORD PTR _hFuncInst$199141[ebp], eax

; 213  : 		typedef BOOL (WINAPI *MYFUNC)(HWND, HDC, POINT*, SIZE*, HDC, POINT*, COLORREF, BLENDFUNCTION*, DWORD);          
; 214  : 		MYFUNC UpdateLayeredWindow;
; 215  : 		UpdateLayeredWindow = (MYFUNC)::GetProcAddress(hFuncInst, "UpdateLayeredWindow");

  009c6	68 00 00 00 00	 push	 OFFSET FLAT:$SG199155
  009cb	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _hFuncInst$199141[ebp]
  009d1	51		 push	 ecx
  009d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  009d8	89 85 78 ff ff
	ff		 mov	 DWORD PTR _UpdateLayeredWindow$199153[ebp], eax

; 216  : 		POINT ptSrc = { 0, 0};

  009de	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptSrc$199156[ebp], 0
  009e8	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptSrc$199156[ebp+4], 0

; 217  : 		int ret = UpdateLayeredWindow(m_hWnd, hDC, &ptWinPos, &sizeAllWindow, hdcMemory, &ptSrc, 0, &m_blend, 2);

  009f2	6a 02		 push	 2
  009f4	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  009fa	81 c2 90 00 00
	00		 add	 edx, 144		; 00000090H
  00a00	52		 push	 edx
  00a01	6a 00		 push	 0
  00a03	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ptSrc$199156[ebp]
  00a09	50		 push	 eax
  00a0a	8b 4d c4	 mov	 ecx, DWORD PTR _hdcMemory$[ebp]
  00a0d	51		 push	 ecx
  00a0e	8d 55 9c	 lea	 edx, DWORD PTR _sizeAllWindow$[ebp]
  00a11	52		 push	 edx
  00a12	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ptWinPos$199104[ebp]
  00a18	50		 push	 eax
  00a19	8b 4d b0	 mov	 ecx, DWORD PTR _hDC$[ebp]
  00a1c	51		 push	 ecx
  00a1d	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00a23	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00a26	50		 push	 eax
  00a27	ff 95 78 ff ff
	ff		 call	 DWORD PTR _UpdateLayeredWindow$199153[ebp]
  00a2d	89 85 68 ff ff
	ff		 mov	 DWORD PTR _ret$199157[ebp], eax

; 218  : 
; 219  : 		graph.ReleaseHDC(hdcMemory);

  00a33	8b 4d c4	 mov	 ecx, DWORD PTR _hdcMemory$[ebp]
  00a36	51		 push	 ecx
  00a37	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00a3d	e8 00 00 00 00	 call	 ?ReleaseHDC@Graphics@Gdiplus@@QAEXPAUHDC__@@@Z ; Gdiplus::Graphics::ReleaseHDC

; 220  : 		::SelectObject( hdcMemory, hbmpOld);   

  00a42	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _hbmpOld$199103[ebp]
  00a48	52		 push	 edx
  00a49	8b 45 c4	 mov	 eax, DWORD PTR _hdcMemory$[ebp]
  00a4c	50		 push	 eax
  00a4d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 221  : 		::DeleteObject(hbmpMem);  

  00a53	8b 4d c8	 mov	 ecx, DWORD PTR _hbmpMem$[ebp]
  00a56	51		 push	 ecx
  00a57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 222  : 		FreeLibrary(hFuncInst);

  00a5d	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _hFuncInst$199141[ebp]
  00a63	52		 push	 edx
  00a64	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4

; 223  : 	}

  00a6a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a71	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00a77	e8 00 00 00 00	 call	 ??1Graphics@Gdiplus@@QAE@XZ ; Gdiplus::Graphics::~Graphics
$L199102:

; 224  : 	::DeleteDC(hdcMemory);

  00a7c	8b 45 c4	 mov	 eax, DWORD PTR _hdcMemory$[ebp]
  00a7f	50		 push	 eax
  00a80	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 225  : 	::DeleteDC(hDC);

  00a86	8b 4d b0	 mov	 ecx, DWORD PTR _hDC$[ebp]
  00a89	51		 push	 ecx
  00a8a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
$L199082:

; 226  : }

  00a90	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00a93	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00a9a	5e		 pop	 esi
  00a9b	8b e5		 mov	 esp, ebp
  00a9d	5d		 pop	 ebp
  00a9e	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L199682:
  00012	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _graph$199105[ebp]
  00018	e9 00 00 00 00	 jmp	 ??1Graphics@Gdiplus@@QAE@XZ ; Gdiplus::Graphics::~Graphics
__ehhandler$?UpdateView@CTranslucentDialog@@QAEXH@Z:
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199684
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?UpdateView@CTranslucentDialog@@QAEXH@Z ENDP		; CTranslucentDialog::UpdateView
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\layoutmgr\seperatemode\windowsmover.h
;	COMDAT ?SetDontMoveContent@CWindowsMover@@QAEXXZ
_TEXT	SEGMENT
tv76 = -172						; size = 4
tv71 = -168						; size = 4
_this$ = -164						; size = 4
_version$ = -160					; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?SetDontMoveContent@CWindowsMover@@QAEXXZ PROC NEAR	; CWindowsMover::SetDontMoveContent, COMDAT
; _this$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00011	57		 push	 edi
  00012	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 		OSVERSIONINFO  version = {0};

  00018	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _version$[ebp], 0
  00022	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00027	33 c0		 xor	 eax, eax
  00029	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR _version$[ebp+4]
  0002f	f3 ab		 rep stosd

; 58   : 		version.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);

  00031	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _version$[ebp], 148 ; 00000094H

; 59   : 		::GetVersionEx(&version);

  0003b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _version$[ebp]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 60   : 		if(version.dwMajorVersion < 6)

  00048	83 bd 64 ff ff
	ff 06		 cmp	 DWORD PTR _version$[ebp+4], 6
  0004f	73 55		 jae	 SHORT $L198992

; 61   : 		{
; 62   : 			if(AfxGetUIManager()->UIGetLayoutMgr()->GetDisplayMode() == DISPLAY_SEPERATE_MODE)

  00051	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  00056	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  0005c	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  0006a	ff 52 24	 call	 DWORD PTR [edx+36]
  0006d	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  00073	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]
  00079	8b 10		 mov	 edx, DWORD PTR [eax]
  0007b	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv76[ebp]
  00081	ff 52 7c	 call	 DWORD PTR [edx+124]
  00084	85 c0		 test	 eax, eax
  00086	75 0f		 jne	 SHORT $L198993

; 63   : 				m_bDontMoveContent = false;

  00088	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0008e	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 64   : 			else

  00095	eb 0d		 jmp	 SHORT $L198994
$L198993:

; 65   : 				m_bDontMoveContent = true;

  00097	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	c7 41 3c 01 00
	00 00		 mov	 DWORD PTR [ecx+60], 1
$L198994:

; 66   : 		}
; 67   : 		else

  000a4	eb 0d		 jmp	 SHORT $L198989
$L198992:

; 68   : 		{
; 69   : 			m_bDontMoveContent = false;

  000a6	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000ac	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0
$L198989:

; 70   : 		}
; 71   : 	};

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	5f		 pop	 edi
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?SetDontMoveContent@CWindowsMover@@QAEXXZ ENDP		; CWindowsMover::SetDontMoveContent
_TEXT	ENDS
PUBLIC	?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z	; CWnd::ClientToScreen
PUBLIC	?SetActiveWindow@CWnd@@QAEPAV1@XZ		; CWnd::SetActiveWindow
PUBLIC	?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z		; CWnd::OnLButtonDown
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__ScreenToClient@8:NEAR
EXTRN	?AfxGetMainWindow@@YAPAVCWnd@@XZ:NEAR		; AfxGetMainWindow
EXTRN	?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z:NEAR	; CWnd::SetWindowPos
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\irregularborder\translucentdialog.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_wParam$199164 = -8					; size = 4
_lParam$199165 = -4					; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonDown@CTranslucentDialog@@AAEXIVCPoint@@@Z PROC NEAR ; CTranslucentDialog::OnLButtonDown
; _this$ = ecx

; 229  : {

  00ab0	55		 push	 ebp
  00ab1	8b ec		 mov	 ebp, esp
  00ab3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00ab6	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 230  : 	if (m_bEnableDrag)

  00ab9	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00abc	0f b6 88 94 00
	00 00		 movzx	 ecx, BYTE PTR [eax+148]
  00ac3	85 c9		 test	 ecx, ecx
  00ac5	74 55		 je	 SHORT $L199163

; 231  : 	{
; 232  : 		//::SendMessage(AfxGetMainWindow()->m_hWnd, WM_SYSCOMMAND, 0xF012, 0);
; 233  : 		WPARAM wParam;
; 234  : 		LPARAM lParam;
; 235  : 
; 236  : 		ClientToScreen( &point);

  00ac7	8d 55 0c	 lea	 edx, DWORD PTR _point$[ebp]
  00aca	52		 push	 edx
  00acb	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ace	e8 00 00 00 00	 call	 ?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z ; CWnd::ClientToScreen

; 237  : 		::ScreenToClient( AfxGetMainWindow()->m_hWnd,&point );

  00ad3	8d 45 0c	 lea	 eax, DWORD PTR _point$[ebp]
  00ad6	50		 push	 eax
  00ad7	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00adc	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00adf	51		 push	 ecx
  00ae0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 238  : 
; 239  : 		wParam = nFlags;

  00ae6	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00ae9	89 55 f8	 mov	 DWORD PTR _wParam$199164[ebp], edx

; 240  : 		lParam = (WORD)point.x;

  00aec	0f b7 45 0c	 movzx	 eax, WORD PTR _point$[ebp]
  00af0	89 45 fc	 mov	 DWORD PTR _lParam$199165[ebp], eax

; 241  : 		lParam += ((WORD)point.y) << 16;		

  00af3	0f b7 4d 10	 movzx	 ecx, WORD PTR _point$[ebp+4]
  00af7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00afa	03 4d fc	 add	 ecx, DWORD PTR _lParam$199165[ebp]
  00afd	89 4d fc	 mov	 DWORD PTR _lParam$199165[ebp], ecx

; 242  : 
; 243  : 		::SendMessage(AfxGetMainWindow()->m_hWnd,WM_LBUTTONDOWN, wParam,lParam );	

  00b00	8b 55 fc	 mov	 edx, DWORD PTR _lParam$199165[ebp]
  00b03	52		 push	 edx
  00b04	8b 45 f8	 mov	 eax, DWORD PTR _wParam$199164[ebp]
  00b07	50		 push	 eax
  00b08	68 01 02 00 00	 push	 513			; 00000201H
  00b0d	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00b12	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00b15	51		 push	 ecx
  00b16	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$L199163:

; 244  : 	}
; 245  : 	CDialog::OnLButtonDown(nFlags, point);

  00b1c	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  00b1f	52		 push	 edx
  00b20	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  00b23	50		 push	 eax
  00b24	8b 4d 08	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  00b27	51		 push	 ecx
  00b28	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2b	e8 00 00 00 00	 call	 ?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z ; CWnd::OnLButtonDown

; 246  : 	AfxGetMainWindow()->SetActiveWindow();

  00b30	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00b35	8b c8		 mov	 ecx, eax
  00b37	e8 00 00 00 00	 call	 ?SetActiveWindow@CWnd@@QAEPAV1@XZ ; CWnd::SetActiveWindow

; 247  : 	SetWindowPos(AfxGetMainWindow(), 0,0,0,0, SWP_NOACTIVATE|SWP_NOMOVE|SWP_NOSIZE);

  00b3c	6a 13		 push	 19			; 00000013H
  00b3e	6a 00		 push	 0
  00b40	6a 00		 push	 0
  00b42	6a 00		 push	 0
  00b44	6a 00		 push	 0
  00b46	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00b4b	50		 push	 eax
  00b4c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b4f	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 248  : } 

  00b54	8b e5		 mov	 esp, ebp
  00b56	5d		 pop	 ebp
  00b57	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonDown@CTranslucentDialog@@AAEXIVCPoint@@@Z ENDP ; CTranslucentDialog::OnLButtonDown
_TEXT	ENDS
PUBLIC	?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z		; CWnd::OnLButtonUp
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -12						; size = 4
_wParam$199174 = -8					; size = 4
_lParam$199175 = -4					; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonUp@CTranslucentDialog@@QAEXIVCPoint@@@Z PROC NEAR ; CTranslucentDialog::OnLButtonUp
; _this$ = ecx

; 251  : {

  00b60	55		 push	 ebp
  00b61	8b ec		 mov	 ebp, esp
  00b63	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00b66	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 252  : 	if (m_bEnableDrag)

  00b69	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00b6c	0f b6 88 94 00
	00 00		 movzx	 ecx, BYTE PTR [eax+148]
  00b73	85 c9		 test	 ecx, ecx
  00b75	74 55		 je	 SHORT $L199173

; 253  : 	{
; 254  : 		WPARAM wParam;
; 255  : 		LPARAM lParam;
; 256  : 
; 257  : 		ClientToScreen( &point);

  00b77	8d 55 0c	 lea	 edx, DWORD PTR _point$[ebp]
  00b7a	52		 push	 edx
  00b7b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b7e	e8 00 00 00 00	 call	 ?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z ; CWnd::ClientToScreen

; 258  : 		::ScreenToClient( AfxGetMainWindow()->m_hWnd,&point );

  00b83	8d 45 0c	 lea	 eax, DWORD PTR _point$[ebp]
  00b86	50		 push	 eax
  00b87	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00b8c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00b8f	51		 push	 ecx
  00b90	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 259  : 
; 260  : 		wParam = nFlags;

  00b96	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00b99	89 55 f8	 mov	 DWORD PTR _wParam$199174[ebp], edx

; 261  : 		lParam = (WORD)point.x;

  00b9c	0f b7 45 0c	 movzx	 eax, WORD PTR _point$[ebp]
  00ba0	89 45 fc	 mov	 DWORD PTR _lParam$199175[ebp], eax

; 262  : 		lParam += ((WORD)point.y) << 16;		

  00ba3	0f b7 4d 10	 movzx	 ecx, WORD PTR _point$[ebp+4]
  00ba7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00baa	03 4d fc	 add	 ecx, DWORD PTR _lParam$199175[ebp]
  00bad	89 4d fc	 mov	 DWORD PTR _lParam$199175[ebp], ecx

; 263  : 		//::PostMessage( AfxGetMainWindow()->m_hWnd,WM_NCLBUTTONDOWN, HTCAPTION, lParam );	
; 264  : 		::SendMessage(AfxGetMainWindow()->m_hWnd,WM_LBUTTONUP, wParam,lParam );

  00bb0	8b 55 fc	 mov	 edx, DWORD PTR _lParam$199175[ebp]
  00bb3	52		 push	 edx
  00bb4	8b 45 f8	 mov	 eax, DWORD PTR _wParam$199174[ebp]
  00bb7	50		 push	 eax
  00bb8	68 02 02 00 00	 push	 514			; 00000202H
  00bbd	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00bc2	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00bc5	51		 push	 ecx
  00bc6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$L199173:

; 265  : 	}
; 266  : 	CDialog::OnLButtonUp(nFlags, point);

  00bcc	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  00bcf	52		 push	 edx
  00bd0	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  00bd3	50		 push	 eax
  00bd4	8b 4d 08	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  00bd7	51		 push	 ecx
  00bd8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00bdb	e8 00 00 00 00	 call	 ?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z ; CWnd::OnLButtonUp

; 267  : 	AfxGetMainWindow()->SetActiveWindow();

  00be0	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00be5	8b c8		 mov	 ecx, eax
  00be7	e8 00 00 00 00	 call	 ?SetActiveWindow@CWnd@@QAEPAV1@XZ ; CWnd::SetActiveWindow

; 268  : 	//AfxGetMainWindow()->SetFocus();
; 269  : 	SetWindowPos(AfxGetMainWindow(), 0,0,0,0, SWP_NOACTIVATE|SWP_NOMOVE|SWP_NOSIZE);

  00bec	6a 13		 push	 19			; 00000013H
  00bee	6a 00		 push	 0
  00bf0	6a 00		 push	 0
  00bf2	6a 00		 push	 0
  00bf4	6a 00		 push	 0
  00bf6	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00bfb	50		 push	 eax
  00bfc	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00bff	e8 00 00 00 00	 call	 ?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z ; CWnd::SetWindowPos

; 270  : }

  00c04	8b e5		 mov	 esp, ebp
  00c06	5d		 pop	 ebp
  00c07	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonUp@CTranslucentDialog@@QAEXIVCPoint@@@Z ENDP	; CTranslucentDialog::OnLButtonUp
_TEXT	ENDS
PUBLIC	?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z		; CWnd::OnMouseMove
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -12						; size = 4
_wParam$199184 = -8					; size = 4
_lParam$199185 = -4					; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnMouseMove@CTranslucentDialog@@QAEXIVCPoint@@@Z PROC NEAR ; CTranslucentDialog::OnMouseMove
; _this$ = ecx

; 273  : {

  00c10	55		 push	 ebp
  00c11	8b ec		 mov	 ebp, esp
  00c13	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00c16	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 274  : 	if (m_bEnableDrag && (nFlags & MK_LBUTTON))

  00c19	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00c1c	0f b6 88 94 00
	00 00		 movzx	 ecx, BYTE PTR [eax+148]
  00c23	85 c9		 test	 ecx, ecx
  00c25	74 5d		 je	 SHORT $L199183
  00c27	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00c2a	83 e2 01	 and	 edx, 1
  00c2d	74 55		 je	 SHORT $L199183

; 275  : 	{
; 276  : 		WPARAM wParam;
; 277  : 		LPARAM lParam;
; 278  : 
; 279  : 		ClientToScreen( &point);

  00c2f	8d 45 0c	 lea	 eax, DWORD PTR _point$[ebp]
  00c32	50		 push	 eax
  00c33	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00c36	e8 00 00 00 00	 call	 ?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z ; CWnd::ClientToScreen

; 280  : 		::ScreenToClient( AfxGetMainWindow()->m_hWnd,&point );

  00c3b	8d 4d 0c	 lea	 ecx, DWORD PTR _point$[ebp]
  00c3e	51		 push	 ecx
  00c3f	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00c44	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00c47	52		 push	 edx
  00c48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 281  : 
; 282  : 		wParam = nFlags;

  00c4e	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  00c51	89 45 f8	 mov	 DWORD PTR _wParam$199184[ebp], eax

; 283  : 		lParam = (WORD)point.x;

  00c54	0f b7 4d 0c	 movzx	 ecx, WORD PTR _point$[ebp]
  00c58	89 4d fc	 mov	 DWORD PTR _lParam$199185[ebp], ecx

; 284  : 		lParam += ((WORD)point.y) << 16;		

  00c5b	0f b7 55 10	 movzx	 edx, WORD PTR _point$[ebp+4]
  00c5f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00c62	03 55 fc	 add	 edx, DWORD PTR _lParam$199185[ebp]
  00c65	89 55 fc	 mov	 DWORD PTR _lParam$199185[ebp], edx

; 285  : 		//::PostMessage( AfxGetMainWindow()->m_hWnd,WM_NCLBUTTONDOWN, HTCAPTION, lParam );	
; 286  : 		::SendMessage(AfxGetMainWindow()->m_hWnd,WM_MOUSEMOVE, wParam,lParam );

  00c68	8b 45 fc	 mov	 eax, DWORD PTR _lParam$199185[ebp]
  00c6b	50		 push	 eax
  00c6c	8b 4d f8	 mov	 ecx, DWORD PTR _wParam$199184[ebp]
  00c6f	51		 push	 ecx
  00c70	68 00 02 00 00	 push	 512			; 00000200H
  00c75	e8 00 00 00 00	 call	 ?AfxGetMainWindow@@YAPAVCWnd@@XZ ; AfxGetMainWindow
  00c7a	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00c7d	52		 push	 edx
  00c7e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$L199183:

; 287  : 	}
; 288  : 	CDialog::OnMouseMove(nFlags, point);

  00c84	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  00c87	50		 push	 eax
  00c88	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  00c8b	51		 push	 ecx
  00c8c	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00c8f	52		 push	 edx
  00c90	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00c93	e8 00 00 00 00	 call	 ?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z ; CWnd::OnMouseMove

; 289  : }

  00c98	8b e5		 mov	 esp, ebp
  00c9a	5d		 pop	 ebp
  00c9b	c2 0c 00	 ret	 12			; 0000000cH
?OnMouseMove@CTranslucentDialog@@QAEXIVCPoint@@@Z ENDP	; CTranslucentDialog::OnMouseMove
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 110  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT
; _this$ = ecx

; 123  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT
; _this$ = ecx

; 125  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 41   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT
; _this$ = ecx

; 43   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetWindowRect, COMDAT
; _this$ = ecx

; 105  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetWindowRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetClientRect, COMDAT
; _this$ = ecx

; 107  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ClientToScreen@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpPoint$ = 8						; size = 4
?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z PROC NEAR	; CWnd::ClientToScreen, COMDAT
; _this$ = ecx

; 113  : 	{ ASSERT(::IsWindow(m_hWnd)); ::ClientToScreen(m_hWnd, lpPoint); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpPoint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ClientToScreen@CWnd@@QBEXPAUtagPOINT@@@Z ENDP		; CWnd::ClientToScreen
_TEXT	ENDS
EXTRN	__imp__SetActiveWindow@4:NEAR
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:NEAR	; CWnd::FromHandle
; Function compile flags: /Odt
;	COMDAT ?SetActiveWindow@CWnd@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetActiveWindow@CWnd@@QAEPAV1@XZ PROC NEAR		; CWnd::SetActiveWindow, COMDAT
; _this$ = ecx

; 195  : 	{ ASSERT(::IsWindow(m_hWnd)); return CWnd::FromHandle(::SetActiveWindow(m_hWnd)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetActiveWindow@4
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?SetActiveWindow@CWnd@@QAEPAV1@XZ ENDP			; CWnd::SetActiveWindow
_TEXT	ENDS
EXTRN	?Default@CWnd@@IAEJXZ:NEAR			; CWnd::Default
; Function compile flags: /Odt
;	COMDAT ?OnCreate@CWnd@@IAEHPAUtagCREATESTRUCTA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnCreate@CWnd@@IAEHPAUtagCREATESTRUCTA@@@Z PROC NEAR	; CWnd::OnCreate, COMDAT
; _this$ = ecx

; 360  : 	{ return (int)Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?OnCreate@CWnd@@IAEHPAUtagCREATESTRUCTA@@@Z ENDP	; CWnd::OnCreate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z PROC NEAR		; CWnd::OnLButtonDown, COMDAT
; _this$ = ecx

; 464  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z ENDP		; CWnd::OnLButtonDown
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z PROC NEAR		; CWnd::OnLButtonUp, COMDAT
; _this$ = ecx

; 466  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z ENDP		; CWnd::OnLButtonUp
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z PROC NEAR		; CWnd::OnMouseMove, COMDAT
; _this$ = ecx

; 476  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z ENDP		; CWnd::OnMouseMove
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT
; _this$ = ecx

; 545  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT
; _this$ = ecx

; 549  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT
; _this$ = ecx

; 551  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Create@CDialog@@UAEHIPAVCWnd@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDTemplate$ = 8					; size = 4
_pParentWnd$ = 12					; size = 4
?Create@CDialog@@UAEHIPAVCWnd@@@Z PROC NEAR		; CDialog::Create, COMDAT
; _this$ = ecx

; 569  : 	{ return Create(MAKEINTRESOURCE(nIDTemplate), pParentWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _pParentWnd$[ebp]
  0000a	50		 push	 eax
  0000b	0f b7 4d 08	 movzx	 ecx, WORD PTR _nIDTemplate$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?Create@CDialog@@UAEHIPAVCWnd@@@Z ENDP			; CDialog::Create
_TEXT	ENDS
PUBLIC	?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics
EXTRN	_GdipCreateFromHDC@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusgraphics.h
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_graphics$ = -4						; size = 4
_hdc$ = 8						; size = 4
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z PROC NEAR		; Gdiplus::Graphics::Graphics, COMDAT
; _this$ = ecx

; 53   :     Graphics(IN HDC hdc)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :     {
; 55   :         GpGraphics *graphics = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _graphics$[ebp], 0

; 56   : 
; 57   :         lastResult = DllExports::GdipCreateFromHDC(hdc, &graphics);

  00010	8d 45 fc	 lea	 eax, DWORD PTR _graphics$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _hdc$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _GdipCreateFromHDC@8
  0001d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 
; 59   :         SetNativeGraphics(graphics);

  00023	8b 45 fc	 mov	 eax, DWORD PTR _graphics$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics

; 60   :     }

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ENDP		; Gdiplus::Graphics::Graphics
_TEXT	ENDS
EXTRN	_GdipDeleteGraphics@4:NEAR
; Function compile flags: /Odt
;	COMDAT ??1Graphics@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Graphics@Gdiplus@@QAE@XZ PROC NEAR			; Gdiplus::Graphics::~Graphics, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :         DllExports::GdipDeleteGraphics(nativeGraphics);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _GdipDeleteGraphics@4

; 104  :     }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1Graphics@Gdiplus@@QAE@XZ ENDP			; Gdiplus::Graphics::~Graphics
_TEXT	ENDS
PUBLIC	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus
EXTRN	_GdipReleaseDC@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ReleaseHDC@Graphics@Gdiplus@@QAEXPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hdc$ = 8						; size = 4
?ReleaseHDC@Graphics@Gdiplus@@QAEXPAUHDC__@@@Z PROC NEAR ; Gdiplus::Graphics::ReleaseHDC, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 128  :         SetStatus(DllExports::GdipReleaseDC(nativeGraphics, hdc));

  00007	8b 45 08	 mov	 eax, DWORD PTR _hdc$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _GdipReleaseDC@8
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 129  :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?ReleaseHDC@Graphics@Gdiplus@@QAEXPAUHDC__@@@Z ENDP	; Gdiplus::Graphics::ReleaseHDC
_TEXT	ENDS
EXTRN	_GdipSetInterpolationMode@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetInterpolationMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4InterpolationMode@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_interpolationMode$ = 8					; size = 4
?SetInterpolationMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4InterpolationMode@2@@Z PROC NEAR ; Gdiplus::Graphics::SetInterpolationMode, COMDAT
; _this$ = ecx

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 231  :         return SetStatus(DllExports::GdipSetInterpolationMode(nativeGraphics,
; 232  :                                                            interpolationMode));

  00007	8b 45 08	 mov	 eax, DWORD PTR _interpolationMode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _GdipSetInterpolationMode@8
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 233  :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetInterpolationMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4InterpolationMode@2@@Z ENDP ; Gdiplus::Graphics::SetInterpolationMode
_TEXT	ENDS
EXTRN	_GdipSetSmoothingMode@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_smoothingMode$ = 8					; size = 4
?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z PROC NEAR ; Gdiplus::Graphics::SetSmoothingMode, COMDAT
; _this$ = ecx

; 246  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  :         return SetStatus(DllExports::GdipSetSmoothingMode(nativeGraphics,
; 248  :                                                           smoothingMode));

  00007	8b 45 08	 mov	 eax, DWORD PTR _smoothingMode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _GdipSetSmoothingMode@8
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 249  :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ENDP ; Gdiplus::Graphics::SetSmoothingMode
_TEXT	ENDS
EXTRN	_GdipDrawImageRectI@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_image$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z PROC NEAR ; Gdiplus::Graphics::DrawImage, COMDAT
; _this$ = ecx

; 1558 :                      IN INT height) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1559 :         return SetStatus(DllExports::GdipDrawImageRectI(nativeGraphics,
; 1560 :                                                         image ? image->nativeImage
; 1561 :                                                               : NULL,
; 1562 :                                                         x,
; 1563 :                                                         y,
; 1564 :                                                         width,
; 1565 :                                                         height));

  00009	83 7d 08 00	 cmp	 DWORD PTR _image$[ebp], 0
  0000d	74 0b		 je	 SHORT $L199745
  0000f	8b 45 08	 mov	 eax, DWORD PTR _image$[ebp]
  00012	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00015	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
  00018	eb 07		 jmp	 SHORT $L199746
$L199745:
  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L199746:
  00021	8b 55 18	 mov	 edx, DWORD PTR _height$[ebp]
  00024	52		 push	 edx
  00025	8b 45 14	 mov	 eax, DWORD PTR _width$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00030	52		 push	 edx
  00031	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _GdipDrawImageRectI@24
  00040	50		 push	 eax
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1566 :     }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 14 00	 ret	 20			; 00000014H
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@HHHH@Z ENDP ; Gdiplus::Graphics::DrawImage
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_graphics$ = 8						; size = 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z PROC NEAR ; Gdiplus::Graphics::SetNativeGraphics, COMDAT
; _this$ = ecx

; 2339 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2340 :         this->nativeGraphics = graphics;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _graphics$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 2341 :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ENDP ; Gdiplus::Graphics::SetNativeGraphics
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC NEAR ; Gdiplus::Graphics::SetStatus, COMDAT
; _this$ = ecx

; 2344 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2345 :         if (status != Ok)

  00007	83 7d 08 00	 cmp	 DWORD PTR _status$[ebp], 0
  0000b	74 0e		 je	 SHORT $L126192

; 2346 :             return (lastResult = status);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _status$[ebp]
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00016	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00019	eb 03		 jmp	 SHORT $L126191
$L126192:

; 2347 :         else
; 2348 :             return status;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$L126191:

; 2349 :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::Graphics::SetStatus
_TEXT	ENDS
PUBLIC	?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus
EXTRN	_GdipGetImageWidth@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
;	COMDAT ?GetWidth@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_width$ = -4						; size = 4
?GetWidth@Image@Gdiplus@@QAEIXZ PROC NEAR		; Gdiplus::Image::GetWidth, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :     UINT width = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _width$[ebp], 0

; 227  : 
; 228  :     SetStatus(DllExports::GdipGetImageWidth(nativeImage, &width));

  00010	8d 45 fc	 lea	 eax, DWORD PTR _width$[ebp]
  00013	50		 push	 eax
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _GdipGetImageWidth@8
  00020	50		 push	 eax
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 229  : 
; 230  :     return width;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _width$[ebp]

; 231  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?GetWidth@Image@Gdiplus@@QAEIXZ ENDP			; Gdiplus::Image::GetWidth
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusheaders.h
_TEXT	ENDS
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC NEAR ; Gdiplus::Image::SetStatus, COMDAT
; _this$ = ecx

; 472  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 473  :         if (status != Ok)

  00007	83 7d 08 00	 cmp	 DWORD PTR _status$[ebp], 0
  0000b	74 0e		 je	 SHORT $L119534

; 474  :             return (lastResult = status);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _status$[ebp]
  00013	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00016	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00019	eb 03		 jmp	 SHORT $L119533
$L119534:

; 475  :         else
; 476  :             return status;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
$L119533:

; 477  :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Image::SetStatus
_TEXT	ENDS
EXTRN	_GdipGetImageHeight@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\gdiplusbitmap.h
;	COMDAT ?GetHeight@Image@Gdiplus@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_height$ = -4						; size = 4
?GetHeight@Image@Gdiplus@@QAEIXZ PROC NEAR		; Gdiplus::Image::GetHeight, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 236  :     UINT height = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _height$[ebp], 0

; 237  : 
; 238  :     SetStatus(DllExports::GdipGetImageHeight(nativeImage, &height));

  00010	8d 45 fc	 lea	 eax, DWORD PTR _height$[ebp]
  00013	50		 push	 eax
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _GdipGetImageHeight@8
  00020	50		 push	 eax
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 239  : 
; 240  :     return height;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _height$[ebp]

; 241  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?GetHeight@Image@Gdiplus@@QAEIXZ ENDP			; Gdiplus::Image::GetHeight
_TEXT	ENDS
END
