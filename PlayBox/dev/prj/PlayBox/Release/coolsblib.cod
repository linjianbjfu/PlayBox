; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\CommonControl\SkinScroll\coolsblib.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG76848 DB	01H DUP (?)
	ALIGN	4

_pEnableScrollBar DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_szPropStr DB	'CoolSBSubclassPtr', 00H
	ORG $+2
$SG76849 DB	'tooltips_class32', 00H
_DATA	ENDS
PUBLIC	_GetScrollWndFromHwnd
EXTRN	__imp__GetPropA@8:NEAR
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\commoncontrol\skinscroll\coolsblib.c
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_GetScrollWndFromHwnd PROC NEAR

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 	return (SCROLLWND *)GetProp(hwnd, szPropStr);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_szPropStr
  00008	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPropA@8

; 45   : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_GetScrollWndFromHwnd ENDP
_TEXT	ENDS
PUBLIC	_GetScrollBarFromHwnd
; Function compile flags: /Odt
_TEXT	SEGMENT
_sw$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_GetScrollBarFromHwnd PROC NEAR

; 48   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	51		 push	 ecx

; 49   : 	SCROLLWND *sw = GetScrollWndFromHwnd(hwnd);

  00024	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 fc	 mov	 DWORD PTR _sw$[ebp], eax

; 50   : 	
; 51   : 	if(!sw) return 0;

  00033	83 7d fc 00	 cmp	 DWORD PTR _sw$[ebp], 0
  00037	75 04		 jne	 SHORT $L76760
  00039	33 c0		 xor	 eax, eax
  0003b	eb 20		 jmp	 SHORT $L76758
$L76760:

; 52   : 	
; 53   : 	if(nBar == SB_HORZ)

  0003d	83 7d 0c 00	 cmp	 DWORD PTR _nBar$[ebp], 0
  00041	75 08		 jne	 SHORT $L76761

; 54   : 		return &sw->sbarHorz;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  00046	83 c0 08	 add	 eax, 8
  00049	eb 12		 jmp	 SHORT $L76758
$L76761:

; 55   : 	else if(nBar == SB_VERT)

  0004b	83 7d 0c 01	 cmp	 DWORD PTR _nBar$[ebp], 1
  0004f	75 0a		 jne	 SHORT $L76763

; 56   : 		return &sw->sbarVert;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _sw$[ebp]
  00054	05 54 03 00 00	 add	 eax, 852		; 00000354H
  00059	eb 02		 jmp	 SHORT $L76758
$L76763:

; 57   : 	else
; 58   : 		return 0;

  0005b	33 c0		 xor	 eax, eax
$L76758:

; 59   : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_GetScrollBarFromHwnd ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_IsCoolScrollEnabled@4
; Function compile flags: /Odt
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_CoolSB_IsCoolScrollEnabled@4 PROC NEAR

; 62   : {

  00070	55		 push	 ebp
  00071	8b ec		 mov	 ebp, esp

; 63   : 	if(GetScrollWndFromHwnd(hwnd))

  00073	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  0007c	83 c4 04	 add	 esp, 4
  0007f	85 c0		 test	 eax, eax
  00081	74 07		 je	 SHORT $L76768

; 64   : 		return TRUE;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	eb 02		 jmp	 SHORT $L76767
$L76768:

; 65   : 	else
; 66   : 		return FALSE;

  0008a	33 c0		 xor	 eax, eax
$L76767:

; 67   : }

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_CoolSB_IsCoolScrollEnabled@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetESBProc@4
; Function compile flags: /Odt
_TEXT	SEGMENT
_proc$ = 8						; size = 4
_CoolSB_SetESBProc@4 PROC NEAR

; 84   : {

  00090	55		 push	 ebp
  00091	8b ec		 mov	 ebp, esp

; 85   : 	pEnableScrollBar = proc;

  00093	8b 45 08	 mov	 eax, DWORD PTR _proc$[ebp]
  00096	a3 00 00 00 00	 mov	 DWORD PTR _pEnableScrollBar, eax

; 86   : }

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
_CoolSB_SetESBProc@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetDefaultMinThumbSize@0
EXTRN	__imp__GetVersion@0:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_dwVersion$ = -4					; size = 4
_CoolSB_GetDefaultMinThumbSize@0 PROC NEAR

; 126  : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp
  000a3	51		 push	 ecx

; 127  : 	DWORD dwVersion = GetVersion();

  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersion@0
  000aa	89 45 fc	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 128  : 
; 129  : 	// set the minimum thumb size for a scrollbar. This
; 130  : 	// differs between NT4 and 2000, so need to check to see
; 131  : 	// which platform we are running under
; 132  : 	if(dwVersion < 0x80000000)              // Windows NT/2000

  000ad	81 7d fc 00 00
	00 80		 cmp	 DWORD PTR _dwVersion$[ebp], -2147483648 ; 80000000H
  000b4	73 27		 jae	 SHORT $L76799

; 133  : 	{
; 134  : 		if(LOBYTE(LOWORD(dwVersion)) >= 5)

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _dwVersion$[ebp]
  000b9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000be	0f b7 c8	 movzx	 ecx, ax
  000c1	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000c7	0f b6 d1	 movzx	 edx, cl
  000ca	83 fa 05	 cmp	 edx, 5
  000cd	7c 07		 jl	 SHORT $L76804

; 135  : 			return MINTHUMBSIZE_2000;

  000cf	b8 06 00 00 00	 mov	 eax, 6
  000d4	eb 0c		 jmp	 SHORT $L76797
$L76804:

; 136  : 		else
; 137  : 			return MINTHUMBSIZE_NT4;

  000d6	b8 08 00 00 00	 mov	 eax, 8
  000db	eb 05		 jmp	 SHORT $L76797
$L76799:

; 138  : 	}
; 139  : 	else
; 140  : 	{
; 141  : 		return MINTHUMBSIZE_NT4;

  000dd	b8 08 00 00 00	 mov	 eax, 8
$L76797:

; 142  : 	}
; 143  : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_CoolSB_GetDefaultMinThumbSize@0 ENDP
_TEXT	ENDS
PUBLIC	_InitializeCoolSB@4
PUBLIC	_CoolSB_SetMinThumbSize@12
EXTRN	__imp__GetScrollInfo@12:NEAR
EXTRN	__imp__EnableScrollBar@12:NEAR
EXTRN	__imp__SetPropA@12:NEAR
EXTRN	__imp__GetClientRect@8:NEAR
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__CreateWindowExA@48:NEAR
EXTRN	__imp__GetWindowLongA@8:NEAR
EXTRN	__imp__SetWindowLongA@12:NEAR
EXTRN	__imp__InitCommonControlsEx@4:NEAR
EXTRN	__imp__GetModuleHandleA@4:NEAR
EXTRN	__imp__HeapAlloc@12:NEAR
EXTRN	_CoolSBWndProc@16:NEAR
EXTRN	__imp__GetProcessHeap@0:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_ice$ = -80						; size = 8
_ti$ = -72						; size = 44
_dwCurStyle$ = -28					; size = 4
_si$ = -24						; size = 4
_sw$ = -20						; size = 4
_rect$ = -16						; size = 16
_hwnd$ = 8						; size = 4
_InitializeCoolSB@4 PROC NEAR

; 168  : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	83 ec 50	 sub	 esp, 80			; 00000050H

; 169  : 	SCROLLWND *sw;
; 170  : 	SCROLLINFO *si;
; 171  : 	INITCOMMONCONTROLSEX ice;
; 172  : 	TOOLINFO ti;
; 173  : 	RECT rect;
; 174  : 	DWORD dwCurStyle;
; 175  : 	//BOOL fDisabled;
; 176  : 
; 177  : 	if(pEnableScrollBar == 0)

  000f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pEnableScrollBar, 0
  000fd	75 0a		 jne	 SHORT $L76829

; 178  : 		pEnableScrollBar = EnableScrollBar;

  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__EnableScrollBar@12
  00104	a3 00 00 00 00	 mov	 DWORD PTR _pEnableScrollBar, eax
$L76829:

; 179  : 
; 180  : 	GetClientRect(hwnd, &rect);

  00109	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  0010c	51		 push	 ecx
  0010d	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00110	52		 push	 edx
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 181  : 
; 182  : 	//if we have already initialized Cool Scrollbars for this window,
; 183  : 	//then stop the user from doing it again
; 184  : 	if(GetScrollWndFromHwnd(hwnd) != 0)

  00117	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  00120	83 c4 04	 add	 esp, 4
  00123	85 c0		 test	 eax, eax
  00125	74 07		 je	 SHORT $L76830

; 185  : 	{
; 186  : 		return FALSE;

  00127	33 c0		 xor	 eax, eax
  00129	e9 40 02 00 00	 jmp	 $L76822
$L76830:

; 187  : 	}
; 188  : 
; 189  : 	//allocate a private scrollbar structure which we 
; 190  : 	//will use to keep track of the scrollbar data
; 191  : 	sw = (SCROLLWND *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(SCROLLWND));

  0012e	68 c0 06 00 00	 push	 1728			; 000006c0H
  00133	6a 08		 push	 8
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0013b	50		 push	 eax
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00142	89 45 ec	 mov	 DWORD PTR _sw$[ebp], eax

; 192  : 
; 193  : 	si = &sw->sbarHorz.scrollInfo;

  00145	8b 4d ec	 mov	 ecx, DWORD PTR _sw$[ebp]
  00148	83 c1 10	 add	 ecx, 16			; 00000010H
  0014b	89 4d e8	 mov	 DWORD PTR _si$[ebp], ecx

; 194  : 	si->cbSize = sizeof(SCROLLINFO);

  0014e	8b 55 e8	 mov	 edx, DWORD PTR _si$[ebp]
  00151	c7 02 1c 00 00
	00		 mov	 DWORD PTR [edx], 28	; 0000001cH

; 195  : 	si->fMask  = SIF_ALL;

  00157	8b 45 e8	 mov	 eax, DWORD PTR _si$[ebp]
  0015a	c7 40 04 17 00
	00 00		 mov	 DWORD PTR [eax+4], 23	; 00000017H

; 196  : 	GetScrollInfo(hwnd, SB_HORZ, si);

  00161	8b 4d e8	 mov	 ecx, DWORD PTR _si$[ebp]
  00164	51		 push	 ecx
  00165	6a 00		 push	 0
  00167	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0016a	52		 push	 edx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12

; 197  : 
; 198  : 	si = &sw->sbarVert.scrollInfo;

  00171	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  00174	05 5c 03 00 00	 add	 eax, 860		; 0000035cH
  00179	89 45 e8	 mov	 DWORD PTR _si$[ebp], eax

; 199  : 	si->cbSize = sizeof(SCROLLINFO);

  0017c	8b 4d e8	 mov	 ecx, DWORD PTR _si$[ebp]
  0017f	c7 01 1c 00 00
	00		 mov	 DWORD PTR [ecx], 28	; 0000001cH

; 200  : 	si->fMask  = SIF_ALL;

  00185	8b 55 e8	 mov	 edx, DWORD PTR _si$[ebp]
  00188	c7 42 04 17 00
	00 00		 mov	 DWORD PTR [edx+4], 23	; 00000017H

; 201  : 	GetScrollInfo(hwnd, SB_VERT, si);

  0018f	8b 45 e8	 mov	 eax, DWORD PTR _si$[ebp]
  00192	50		 push	 eax
  00193	6a 01		 push	 1
  00195	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00198	51		 push	 ecx
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12

; 202  : 
; 203  : 	//check to see if the window has left-aligned scrollbars
; 204  : 	if(GetWindowLong(hwnd, GWL_EXSTYLE) & WS_EX_LEFTSCROLLBAR)

  0019f	6a ec		 push	 -20			; ffffffecH
  001a1	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  001a4	52		 push	 edx
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  001ab	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  001b0	74 0f		 je	 SHORT $L76835

; 205  : 		sw->fLeftScrollbar = TRUE;

  001b2	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  001b5	c7 80 a4 06 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+1700], 1

; 206  : 	else

  001bf	eb 0d		 jmp	 SHORT $L76836
$L76835:

; 207  : 		sw->fLeftScrollbar = FALSE;

  001c1	8b 4d ec	 mov	 ecx, DWORD PTR _sw$[ebp]
  001c4	c7 81 a4 06 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1700], 0
$L76836:

; 208  : 
; 209  : 	dwCurStyle = GetWindowLong(hwnd, GWL_STYLE);

  001ce	6a f0		 push	 -16			; fffffff0H
  001d0	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  001d3	52		 push	 edx
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  001da	89 45 e4	 mov	 DWORD PTR _dwCurStyle$[ebp], eax

; 210  : 
; 211  : 	SetProp(hwnd, szPropStr, (HANDLE)sw);

  001dd	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  001e0	50		 push	 eax
  001e1	68 00 00 00 00	 push	 OFFSET FLAT:_szPropStr
  001e6	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  001e9	51		 push	 ecx
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetPropA@12

; 212  : 
; 213  : 	//try to enable the scrollbar arrows - if the return value is
; 214  : 	//non-zero, then the scrollbars were previously disabled
; 215  : 	//fDisabled = pEnableScrollBar(hwnd, SB_HORZ, ESB_ENABLE_BOTH);
; 216  : 
; 217  : 	//scrollbars will automatically get enabled, even if
; 218  : 	//they aren't to start with....sorry, but there isn't an
; 219  : 	//easy alternative.
; 220  : 	if(dwCurStyle & WS_HSCROLL)

  001f0	8b 55 e4	 mov	 edx, DWORD PTR _dwCurStyle$[ebp]
  001f3	81 e2 00 00 10
	00		 and	 edx, 1048576		; 00100000H
  001f9	74 0a		 je	 SHORT $L76838

; 221  : 		sw->sbarHorz.fScrollFlags = CSBS_VISIBLE;

  001fb	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  001fe	c7 40 08 08 00
	00 00		 mov	 DWORD PTR [eax+8], 8
$L76838:

; 222  : 
; 223  : 	if(dwCurStyle & WS_VSCROLL)

  00205	8b 4d e4	 mov	 ecx, DWORD PTR _dwCurStyle$[ebp]
  00208	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0020e	74 0d		 je	 SHORT $L76839

; 224  : 		sw->sbarVert.fScrollFlags = CSBS_VISIBLE;

  00210	8b 55 ec	 mov	 edx, DWORD PTR _sw$[ebp]
  00213	c7 82 54 03 00
	00 08 00 00 00	 mov	 DWORD PTR [edx+852], 8
$L76839:

; 225  : 
; 226  : 	//need to be able to distinguish between horizontal and vertical
; 227  : 	//scrollbars in some instances
; 228  : 	sw->sbarHorz.nBarType	     = SB_HORZ;

  0021d	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  00220	c7 80 48 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+840], 0

; 229  : 	sw->sbarVert.nBarType	     = SB_VERT;

  0022a	8b 4d ec	 mov	 ecx, DWORD PTR _sw$[ebp]
  0022d	c7 81 94 06 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1684], 1

; 230  : 
; 231  : 	sw->sbarHorz.fFlatScrollbar  = CSBS_NORMAL;

  00237	8b 55 ec	 mov	 edx, DWORD PTR _sw$[ebp]
  0023a	c7 82 4c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+844], 0

; 232  : 	sw->sbarVert.fFlatScrollbar  = CSBS_NORMAL;

  00244	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  00247	c7 80 98 06 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1688], 0

; 233  : 
; 234  : 	//set the default arrow sizes for the scrollbars
; 235  : 	sw->sbarHorz.nArrowLength	 = SYSTEM_METRIC;

  00251	8b 4d ec	 mov	 ecx, DWORD PTR _sw$[ebp]
  00254	c7 41 2c ff ff
	ff ff		 mov	 DWORD PTR [ecx+44], -1

; 236  : 	sw->sbarHorz.nArrowWidth	 = SYSTEM_METRIC;

  0025b	8b 55 ec	 mov	 edx, DWORD PTR _sw$[ebp]
  0025e	c7 42 30 ff ff
	ff ff		 mov	 DWORD PTR [edx+48], -1

; 237  : 	sw->sbarVert.nArrowLength	 = SYSTEM_METRIC;

  00265	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  00268	c7 80 78 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+888], -1

; 238  : 	sw->sbarVert.nArrowWidth	 = SYSTEM_METRIC;

  00272	8b 4d ec	 mov	 ecx, DWORD PTR _sw$[ebp]
  00275	c7 81 7c 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+892], -1

; 239  : 
; 240  : 	sw->bPreventStyleChange		 = FALSE;

  0027f	8b 55 ec	 mov	 edx, DWORD PTR _sw$[ebp]
  00282	c7 82 bc 06 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1724], 0

; 241  : #pragma warning( disable: 4311 4312)		
; 242  : 	sw->oldproc = (WNDPROC)SetWindowLong(hwnd, GWL_WNDPROC, (LONG)CoolSBWndProc);

  0028c	68 00 00 00 00	 push	 OFFSET FLAT:_CoolSBWndProc@16
  00291	6a fc		 push	 -4			; fffffffcH
  00293	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00296	50		 push	 eax
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  0029d	8b 4d ec	 mov	 ecx, DWORD PTR _sw$[ebp]
  002a0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 243  : #pragma warning( default: 4311 4312)	
; 244  : 	CoolSB_SetMinThumbSize(hwnd, SB_BOTH, CoolSB_GetDefaultMinThumbSize());

  002a3	e8 00 00 00 00	 call	 _CoolSB_GetDefaultMinThumbSize@0
  002a8	50		 push	 eax
  002a9	6a 03		 push	 3
  002ab	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  002ae	52		 push	 edx
  002af	e8 00 00 00 00	 call	 _CoolSB_SetMinThumbSize@12

; 245  : 
; 246  : #ifdef COOLSB_TOOLTIPS
; 247  : 	ice.dwSize = sizeof(ice);

  002b4	c7 45 b0 08 00
	00 00		 mov	 DWORD PTR _ice$[ebp], 8

; 248  : 	ice.dwICC  = ICC_BAR_CLASSES;

  002bb	c7 45 b4 04 00
	00 00		 mov	 DWORD PTR _ice$[ebp+4], 4

; 249  : 	InitCommonControlsEx(&ice);

  002c2	8d 45 b0	 lea	 eax, DWORD PTR _ice$[ebp]
  002c5	50		 push	 eax
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitCommonControlsEx@4

; 250  : 
; 251  : 	sw->hwndToolTip = CreateWindowEx(WS_EX_TOPMOST | WS_EX_TOOLWINDOW, TOOLTIPS_CLASS, _T(""),
; 252  :                             WS_POPUP | TTS_NOPREFIX | TTS_ALWAYSTIP,
; 253  :                             CW_USEDEFAULT, CW_USEDEFAULT,
; 254  :                             CW_USEDEFAULT, CW_USEDEFAULT,
; 255  :                             hwnd, NULL, GetModuleHandle(0),
; 256  :                             NULL);

  002cc	6a 00		 push	 0
  002ce	6a 00		 push	 0
  002d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  002d6	50		 push	 eax
  002d7	6a 00		 push	 0
  002d9	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  002dc	51		 push	 ecx
  002dd	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002e2	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002e7	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002ec	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002f1	68 03 00 00 80	 push	 -2147483645		; 80000003H
  002f6	68 00 00 00 00	 push	 OFFSET FLAT:$SG76848
  002fb	68 00 00 00 00	 push	 OFFSET FLAT:$SG76849
  00300	68 88 00 00 00	 push	 136			; 00000088H
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  0030b	8b 55 ec	 mov	 edx, DWORD PTR _sw$[ebp]
  0030e	89 82 a8 06 00
	00		 mov	 DWORD PTR [edx+1704], eax

; 257  : 
; 258  : 	ti.cbSize = sizeof(TOOLINFO);

  00314	c7 45 b8 2c 00
	00 00		 mov	 DWORD PTR _ti$[ebp], 44	; 0000002cH

; 259  : 	ti.uFlags = TTF_IDISHWND;

  0031b	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _ti$[ebp+4], 1

; 260  : 	ti.hwnd   = hwnd;

  00322	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00325	89 45 c0	 mov	 DWORD PTR _ti$[ebp+8], eax

; 261  : #pragma warning( disable: 4311)	
; 262  : 	ti.uId    = (UINT)hwnd;

  00328	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0032b	89 4d c4	 mov	 DWORD PTR _ti$[ebp+12], ecx

; 263  : #pragma warning( default: 4311)	
; 264  : 	ti.lpszText = LPSTR_TEXTCALLBACK;

  0032e	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _ti$[ebp+36], -1

; 265  : 	ti.hinst   = GetModuleHandle(0);

  00335	6a 00		 push	 0
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0033d	89 45 d8	 mov	 DWORD PTR _ti$[ebp+32], eax

; 266  : 
; 267  : 	SendMessage(sw->hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

  00340	8d 55 b8	 lea	 edx, DWORD PTR _ti$[ebp]
  00343	52		 push	 edx
  00344	6a 00		 push	 0
  00346	68 04 04 00 00	 push	 1028			; 00000404H
  0034b	8b 45 ec	 mov	 eax, DWORD PTR _sw$[ebp]
  0034e	8b 88 a8 06 00
	00		 mov	 ecx, DWORD PTR [eax+1704]
  00354	51		 push	 ecx
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 268  : 	
; 269  : #else
; 270  : 
; 271  : 	UNREFERENCED_PARAMETER(ice);
; 272  : 	UNREFERENCED_PARAMETER(ti);
; 273  : 	sw->hwndToolTip = 0;
; 274  : 
; 275  : #endif
; 276  : 	
; 277  : 	//send the window a frame changed message to update the scrollbars
; 278  : 	RedrawNonClient(hwnd, TRUE);

  0035b	6a 01		 push	 1
  0035d	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00360	52		 push	 edx
  00361	e8 00 00 00 00	 call	 _RedrawNonClient
  00366	83 c4 08	 add	 esp, 8

; 279  : 
; 280  : 	return TRUE;

  00369	b8 01 00 00 00	 mov	 eax, 1
$L76822:

; 281  : }

  0036e	8b e5		 mov	 esp, ebp
  00370	5d		 pop	 ebp
  00371	c2 04 00	 ret	 4
_InitializeCoolSB@4 ENDP
_TEXT	ENDS
EXTRN	__imp__SetWindowPos@28:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_fFrameChanged$ = 12					; size = 4
_RedrawNonClient PROC NEAR

; 91   : {

  00380	55		 push	 ebp
  00381	8b ec		 mov	 ebp, esp

; 92   : 	if(fFrameChanged == FALSE)

  00383	83 7d 0c 00	 cmp	 DWORD PTR _fFrameChanged$[ebp], 0
  00387	75 15		 jne	 SHORT $L76792

; 93   : 	{
; 94   : 		/*
; 95   : 		RECT rect;
; 96   : 		HRGN hrgn1, hrgn2;
; 97   : 		
; 98   : 		SCROLLWND *sw = GetScrollWndFromHwnd(hwnd);
; 99   : 		
; 100  : 		GetScrollRect(sw, SB_HORZ, hwnd, &rect);
; 101  : 		hrgn1 = CreateRectRgnIndirect(&rect);
; 102  : 		
; 103  : 		GetScrollRect(sw, SB_VERT, hwnd, &rect);
; 104  : 		hrgn2 = CreateRectRgnIndirect(&rect);
; 105  : 		
; 106  : 		CombineRgn(hrgn1, hrgn2, hrgn1, RGN_OR);
; 107  : 		
; 108  : 		SendMessage(hwnd, WM_NCPAINT, (WPARAM)hrgn1, 0);
; 109  : 		
; 110  : 		DeleteObject(hrgn1);
; 111  : 		DeleteObject(hrgn2);*/
; 112  : 
; 113  : 		SendMessage(hwnd, WM_NCPAINT, (WPARAM)1, 0);

  00389	6a 00		 push	 0
  0038b	6a 01		 push	 1
  0038d	68 85 00 00 00	 push	 133			; 00000085H
  00392	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00395	50		 push	 eax
  00396	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 114  : 	}
; 115  : 	else

  0039c	eb 16		 jmp	 SHORT $L76791
$L76792:

; 116  : 	{
; 117  : 		SetWindowPos(hwnd, 0, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_NOACTIVATE
; 118  : 			| SWP_FRAMECHANGED | SWP_DRAWFRAME);

  0039e	6a 37		 push	 55			; 00000037H
  003a0	6a 00		 push	 0
  003a2	6a 00		 push	 0
  003a4	6a 00		 push	 0
  003a6	6a 00		 push	 0
  003a8	6a 00		 push	 0
  003aa	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  003ad	51		 push	 ecx
  003ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
$L76791:

; 119  : 	}
; 120  : }

  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
_RedrawNonClient ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_EnableScrollBar@12
; Function compile flags: /Odt
_TEXT	SEGMENT
_oldstate$ = -12					; size = 4
_bFailed$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_wArrows$ = 16						; size = 4
_CoolSB_EnableScrollBar@12 PROC NEAR

; 284  : {

  003c0	55		 push	 ebp
  003c1	8b ec		 mov	 ebp, esp
  003c3	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 285  : 	SCROLLBAR *sbar;
; 286  : 	UINT oldstate;
; 287  : 	BOOL bFailed = FALSE;

  003c6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 0

; 288  : 
; 289  : 	if(!CoolSB_IsCoolScrollEnabled(hwnd))

  003cd	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  003d0	50		 push	 eax
  003d1	e8 00 00 00 00	 call	 _CoolSB_IsCoolScrollEnabled@4
  003d6	85 c0		 test	 eax, eax
  003d8	75 17		 jne	 SHORT $L76864

; 290  : 		return EnableScrollBar(hwnd, wSBflags, wArrows);

  003da	8b 4d 10	 mov	 ecx, DWORD PTR _wArrows$[ebp]
  003dd	51		 push	 ecx
  003de	8b 55 0c	 mov	 edx, DWORD PTR _wSBflags$[ebp]
  003e1	52		 push	 edx
  003e2	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  003e5	50		 push	 eax
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableScrollBar@12
  003ec	e9 a1 00 00 00	 jmp	 $L76860
$L76864:

; 291  : 
; 292  : 	if((wSBflags == SB_HORZ || wSBflags == SB_BOTH) && 
; 293  : 		(sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  003f1	83 7d 0c 00	 cmp	 DWORD PTR _wSBflags$[ebp], 0
  003f5	74 06		 je	 SHORT $L76866
  003f7	83 7d 0c 03	 cmp	 DWORD PTR _wSBflags$[ebp], 3
  003fb	75 40		 jne	 SHORT $L76865
$L76866:
  003fd	6a 00		 push	 0
  003ff	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00402	51		 push	 ecx
  00403	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00408	83 c4 08	 add	 esp, 8
  0040b	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0040e	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00412	74 29		 je	 SHORT $L76865

; 294  : 	{
; 295  : 		oldstate = sbar->fScrollFlags;

  00414	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00417	8b 02		 mov	 eax, DWORD PTR [edx]
  00419	89 45 f4	 mov	 DWORD PTR _oldstate$[ebp], eax

; 296  : 		
; 297  : 		//clear any existing state, and OR in the disabled flags
; 298  : 		sbar->fScrollFlags = (sbar->fScrollFlags & ~ESB_DISABLE_BOTH) | wArrows;

  0041c	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0041f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00421	83 e2 fc	 and	 edx, -4			; fffffffcH
  00424	0b 55 10	 or	 edx, DWORD PTR _wArrows$[ebp]
  00427	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0042a	89 10		 mov	 DWORD PTR [eax], edx

; 299  : 
; 300  : 		if(oldstate == sbar->fScrollFlags)

  0042c	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0042f	8b 55 f4	 mov	 edx, DWORD PTR _oldstate$[ebp]
  00432	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00434	75 07		 jne	 SHORT $L76865

; 301  : 			bFailed = TRUE;

  00436	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$L76865:

; 302  : 
; 303  : 	}
; 304  : 
; 305  : 	if((wSBflags == SB_VERT || wSBflags == SB_BOTH) && 
; 306  : 		(sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  0043d	83 7d 0c 01	 cmp	 DWORD PTR _wSBflags$[ebp], 1
  00441	74 06		 je	 SHORT $L76869
  00443	83 7d 0c 03	 cmp	 DWORD PTR _wSBflags$[ebp], 3
  00447	75 40		 jne	 SHORT $L76868
$L76869:
  00449	6a 01		 push	 1
  0044b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0044e	50		 push	 eax
  0044f	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00454	83 c4 08	 add	 esp, 8
  00457	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0045a	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  0045e	74 29		 je	 SHORT $L76868

; 307  : 	{
; 308  : 		oldstate = sbar->fScrollFlags;

  00460	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00463	8b 11		 mov	 edx, DWORD PTR [ecx]
  00465	89 55 f4	 mov	 DWORD PTR _oldstate$[ebp], edx

; 309  : 		
; 310  : 		//clear any existing state, and OR in the disabled flags
; 311  : 		sbar->fScrollFlags = (sbar->fScrollFlags & ~ESB_DISABLE_BOTH) | wArrows;

  00468	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0046b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046d	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00470	0b 4d 10	 or	 ecx, DWORD PTR _wArrows$[ebp]
  00473	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00476	89 0a		 mov	 DWORD PTR [edx], ecx

; 312  : 
; 313  : 		if(oldstate == sbar->fScrollFlags)

  00478	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0047b	8b 4d f4	 mov	 ecx, DWORD PTR _oldstate$[ebp]
  0047e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00480	75 07		 jne	 SHORT $L76868

; 314  : 			bFailed = TRUE;

  00482	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$L76868:

; 315  : 	}
; 316  : 
; 317  : 	return !bFailed;

  00489	33 c0		 xor	 eax, eax
  0048b	83 7d f8 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  0048f	0f 94 c0	 sete	 al
$L76860:

; 318  : }

  00492	8b e5		 mov	 esp, ebp
  00494	5d		 pop	 ebp
  00495	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_EnableScrollBar@12 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollBarInfo@4
; Function compile flags: /Odt
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_CoolSB_GetScrollBarInfo@4 PROC NEAR

; 321  : {

  004a0	55		 push	 ebp
  004a1	8b ec		 mov	 ebp, esp

; 322  : //	SCROLLBARINFO sbi; not defined in winuser.h
; 323  : 	return FALSE;	

  004a3	33 c0		 xor	 eax, eax

; 324  : }

  004a5	5d		 pop	 ebp
  004a6	c2 04 00	 ret	 4
_CoolSB_GetScrollBarInfo@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollInfo@12
; Function compile flags: /Odt
_TEXT	SEGMENT
_copied$ = -8						; size = 4
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_fnBar$ = 12						; size = 4
_lpsi$ = 16						; size = 4
_CoolSB_GetScrollInfo@12 PROC NEAR

; 327  : {

  004b0	55		 push	 ebp
  004b1	8b ec		 mov	 ebp, esp
  004b3	83 ec 08	 sub	 esp, 8

; 328  : 	SCROLLINFO *mysi;
; 329  : 	BOOL copied = FALSE;

  004b6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 0

; 330  : 	
; 331  : 	if(!lpsi)

  004bd	83 7d 10 00	 cmp	 DWORD PTR _lpsi$[ebp], 0
  004c1	75 07		 jne	 SHORT $L76884

; 332  : 		return FALSE;

  004c3	33 c0		 xor	 eax, eax
  004c5	e9 b7 00 00 00	 jmp	 $L76881
$L76884:

; 333  : 
; 334  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, fnBar)))

  004ca	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  004cd	50		 push	 eax
  004ce	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  004d1	51		 push	 ecx
  004d2	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  004d7	83 c4 08	 add	 esp, 8
  004da	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  004dd	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  004e1	75 17		 jne	 SHORT $L76885

; 335  : 	{
; 336  : 		return GetScrollInfo(hwnd, fnBar, lpsi);

  004e3	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  004e6	52		 push	 edx
  004e7	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  004ea	50		 push	 eax
  004eb	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  004ee	51		 push	 ecx
  004ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12
  004f5	e9 87 00 00 00	 jmp	 $L76881
$L76885:

; 337  : 	}
; 338  : 	
; 339  : 	if(lpsi->fMask & SIF_PAGE)

  004fa	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  004fd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00500	83 e0 02	 and	 eax, 2
  00503	74 13		 je	 SHORT $L76886

; 340  : 	{
; 341  : 		lpsi->nPage = mysi->nPage;

  00505	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  00508	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  0050b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0050e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 342  : 		copied = TRUE;

  00511	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76886:

; 343  : 	}
; 344  : 
; 345  : 	if(lpsi->fMask & SIF_POS)

  00518	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  0051b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0051e	83 e2 04	 and	 edx, 4
  00521	74 13		 je	 SHORT $L76887

; 346  : 	{
; 347  : 		lpsi->nPos = mysi->nPos;

  00523	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00526	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00529	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0052c	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 348  : 		copied = TRUE;

  0052f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76887:

; 349  : 	}
; 350  : 
; 351  : 	if(lpsi->fMask & SIF_TRACKPOS)

  00536	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00539	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0053c	83 e1 10	 and	 ecx, 16			; 00000010H
  0053f	74 13		 je	 SHORT $L76888

; 352  : 	{
; 353  : 		lpsi->nTrackPos = mysi->nTrackPos;

  00541	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00544	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00547	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0054a	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 354  : 		copied = TRUE;

  0054d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76888:

; 355  : 	}
; 356  : 
; 357  : 	if(lpsi->fMask & SIF_RANGE)

  00554	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00557	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0055a	83 e0 01	 and	 eax, 1
  0055d	74 1f		 je	 SHORT $L76889

; 358  : 	{
; 359  : 		lpsi->nMin = mysi->nMin;

  0055f	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  00562	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00565	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00568	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 360  : 		lpsi->nMax = mysi->nMax;

  0056b	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  0056e	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00571	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00574	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 361  : 		copied = TRUE;

  00577	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _copied$[ebp], 1
$L76889:

; 362  : 	}
; 363  : 
; 364  : 	return copied;

  0057e	8b 45 f8	 mov	 eax, DWORD PTR _copied$[ebp]
$L76881:

; 365  : }

  00581	8b e5		 mov	 esp, ebp
  00583	5d		 pop	 ebp
  00584	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_GetScrollInfo@12 ENDP
; Function compile flags: /Odt
_sb$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_fnBar$ = 12						; size = 4
_GetScrollInfoFromHwnd PROC NEAR

; 146  : {

  00590	55		 push	 ebp
  00591	8b ec		 mov	 ebp, esp
  00593	51		 push	 ecx

; 147  : 	SCROLLBAR *sb = GetScrollBarFromHwnd(hwnd, fnBar);

  00594	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  00597	50		 push	 eax
  00598	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0059b	51		 push	 ecx
  0059c	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  005a1	83 c4 08	 add	 esp, 8
  005a4	89 45 fc	 mov	 DWORD PTR _sb$[ebp], eax

; 148  : 
; 149  : 	if(sb == 0)

  005a7	83 7d fc 00	 cmp	 DWORD PTR _sb$[ebp], 0
  005ab	75 04		 jne	 SHORT $L76814

; 150  : 		return FALSE;

  005ad	33 c0		 xor	 eax, eax
  005af	eb 1e		 jmp	 SHORT $L76812
$L76814:

; 151  : 
; 152  : 	if(fnBar == SB_HORZ)

  005b1	83 7d 0c 00	 cmp	 DWORD PTR _fnBar$[ebp], 0
  005b5	75 08		 jne	 SHORT $L76815

; 153  : 	{
; 154  : 		return &sb->scrollInfo;

  005b7	8b 45 fc	 mov	 eax, DWORD PTR _sb$[ebp]
  005ba	83 c0 08	 add	 eax, 8
  005bd	eb 10		 jmp	 SHORT $L76812
$L76815:

; 155  : 	}
; 156  : 	else if(fnBar == SB_VERT)

  005bf	83 7d 0c 01	 cmp	 DWORD PTR _fnBar$[ebp], 1
  005c3	75 08		 jne	 SHORT $L76817

; 157  : 	{
; 158  : 		return &sb->scrollInfo;

  005c5	8b 45 fc	 mov	 eax, DWORD PTR _sb$[ebp]
  005c8	83 c0 08	 add	 eax, 8
  005cb	eb 02		 jmp	 SHORT $L76812
$L76817:

; 159  : 	}
; 160  : 	else
; 161  : 		return NULL;

  005cd	33 c0		 xor	 eax, eax
$L76812:

; 162  : }

  005cf	8b e5		 mov	 esp, ebp
  005d1	5d		 pop	 ebp
  005d2	c3		 ret	 0
_GetScrollInfoFromHwnd ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollPos@8
EXTRN	__imp__GetScrollPos@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_CoolSB_GetScrollPos@8 PROC NEAR

; 368  : {

  005e0	55		 push	 ebp
  005e1	8b ec		 mov	 ebp, esp
  005e3	51		 push	 ecx

; 369  : 	SCROLLINFO *mysi;
; 370  : 	
; 371  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  005e4	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  005e7	50		 push	 eax
  005e8	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  005eb	51		 push	 ecx
  005ec	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  005f1	83 c4 08	 add	 esp, 8
  005f4	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  005f7	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  005fb	75 10		 jne	 SHORT $L76896

; 372  : 		return GetScrollPos(hwnd, nBar);

  005fd	8b 55 0c	 mov	 edx, DWORD PTR _nBar$[ebp]
  00600	52		 push	 edx
  00601	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00604	50		 push	 eax
  00605	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollPos@8
  0060b	eb 06		 jmp	 SHORT $L76894
$L76896:

; 373  : 
; 374  : 	return mysi->nPos;

  0060d	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00610	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
$L76894:

; 375  : }

  00613	8b e5		 mov	 esp, ebp
  00615	5d		 pop	 ebp
  00616	c2 08 00	 ret	 8
_CoolSB_GetScrollPos@8 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetScrollRange@16
EXTRN	__imp__GetScrollRange@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_lpMinPos$ = 16						; size = 4
_lpMaxPos$ = 20						; size = 4
_CoolSB_GetScrollRange@16 PROC NEAR

; 378  : {

  00620	55		 push	 ebp
  00621	8b ec		 mov	 ebp, esp
  00623	51		 push	 ecx

; 379  : 	SCROLLINFO *mysi;
; 380  : 	
; 381  : 	if(!lpMinPos || !lpMaxPos)

  00624	83 7d 10 00	 cmp	 DWORD PTR _lpMinPos$[ebp], 0
  00628	74 06		 je	 SHORT $L76908
  0062a	83 7d 14 00	 cmp	 DWORD PTR _lpMaxPos$[ebp], 0
  0062e	75 04		 jne	 SHORT $L76907
$L76908:

; 382  : 		return FALSE;

  00630	33 c0		 xor	 eax, eax
  00632	eb 4c		 jmp	 SHORT $L76905
$L76907:

; 383  : 
; 384  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  00634	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  00637	50		 push	 eax
  00638	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0063b	51		 push	 ecx
  0063c	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00641	83 c4 08	 add	 esp, 8
  00644	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  00647	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  0064b	75 18		 jne	 SHORT $L76909

; 385  : 		return GetScrollRange(hwnd, nBar, lpMinPos, lpMaxPos);

  0064d	8b 55 14	 mov	 edx, DWORD PTR _lpMaxPos$[ebp]
  00650	52		 push	 edx
  00651	8b 45 10	 mov	 eax, DWORD PTR _lpMinPos$[ebp]
  00654	50		 push	 eax
  00655	8b 4d 0c	 mov	 ecx, DWORD PTR _nBar$[ebp]
  00658	51		 push	 ecx
  00659	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0065c	52		 push	 edx
  0065d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollRange@16
  00663	eb 1b		 jmp	 SHORT $L76905
$L76909:

; 386  : 
; 387  : 	*lpMinPos = mysi->nMin;

  00665	8b 45 10	 mov	 eax, DWORD PTR _lpMinPos$[ebp]
  00668	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0066b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0066e	89 10		 mov	 DWORD PTR [eax], edx

; 388  : 	*lpMaxPos = mysi->nMax;

  00670	8b 45 14	 mov	 eax, DWORD PTR _lpMaxPos$[ebp]
  00673	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00676	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00679	89 10		 mov	 DWORD PTR [eax], edx

; 389  : 
; 390  : 	return TRUE;

  0067b	b8 01 00 00 00	 mov	 eax, 1
$L76905:

; 391  : }

  00680	8b e5		 mov	 esp, ebp
  00682	5d		 pop	 ebp
  00683	c2 10 00	 ret	 16			; 00000010H
_CoolSB_GetScrollRange@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetScrollInfo@16
PUBLIC	_CoolSB_ShowScrollBar@12
EXTRN	_CoolSB_IsThumbTracking@4:NEAR
EXTRN	__imp__SetScrollInfo@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv159 = -44						; size = 4
tv161 = -40						; size = 4
tv149 = -36						; size = 4
tv140 = -32						; size = 4
tv130 = -28						; size = 4
tv129 = -24						; size = 4
tv92 = -20						; size = 4
_t$76926 = -16						; size = 4
_fRecalcFrame$ = -12					; size = 4
_mysi$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_fnBar$ = 12						; size = 4
_lpsi$ = 16						; size = 4
_fRedraw$ = 20						; size = 4
_CoolSB_SetScrollInfo@16 PROC NEAR

; 394  : {

  00690	55		 push	 ebp
  00691	8b ec		 mov	 ebp, esp
  00693	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 395  : 	SCROLLINFO *mysi;
; 396  : 	SCROLLBAR *sbar;
; 397  : 	BOOL       fRecalcFrame = FALSE;

  00696	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 0

; 398  : 
; 399  : 	if(!lpsi)

  0069d	83 7d 10 00	 cmp	 DWORD PTR _lpsi$[ebp], 0
  006a1	75 07		 jne	 SHORT $L76922

; 400  : 		return FALSE;

  006a3	33 c0		 xor	 eax, eax
  006a5	e9 59 02 00 00	 jmp	 $L76918
$L76922:

; 401  : 
; 402  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, fnBar)))

  006aa	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  006ad	50		 push	 eax
  006ae	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  006b1	51		 push	 ecx
  006b2	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  006b7	83 c4 08	 add	 esp, 8
  006ba	89 45 f8	 mov	 DWORD PTR _mysi$[ebp], eax
  006bd	83 7d f8 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  006c1	75 1b		 jne	 SHORT $L76923

; 403  : 		return SetScrollInfo(hwnd, fnBar, lpsi, fRedraw);

  006c3	8b 55 14	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  006c6	52		 push	 edx
  006c7	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  006ca	50		 push	 eax
  006cb	8b 4d 0c	 mov	 ecx, DWORD PTR _fnBar$[ebp]
  006ce	51		 push	 ecx
  006cf	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  006d2	52		 push	 edx
  006d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollInfo@16
  006d9	e9 25 02 00 00	 jmp	 $L76918
$L76923:

; 404  : 
; 405  : 	//if(CoolSB_IsThumbTracking(hwnd))
; 406  : 	//	return mysi->nPos;
; 407  : 
; 408  : 	if(lpsi->fMask & SIF_RANGE)

  006de	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  006e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006e4	83 e1 01	 and	 ecx, 1
  006e7	74 18		 je	 SHORT $L76924

; 409  : 	{
; 410  : 		mysi->nMin = lpsi->nMin;

  006e9	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  006ec	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  006ef	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  006f2	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 411  : 		mysi->nMax = lpsi->nMax;

  006f5	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  006f8	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  006fb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006fe	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L76924:

; 412  : 	}
; 413  : 
; 414  : 	//The nPage member must specify a value from 0 to nMax - nMin +1. 
; 415  : 	if(lpsi->fMask & SIF_PAGE)

  00701	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00704	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00707	83 e0 02	 and	 eax, 2
  0070a	74 67		 je	 SHORT $L76925

; 416  : 	{
; 417  : 		UINT t = (UINT)(mysi->nMax - mysi->nMin + 1);

  0070c	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0070f	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  00712	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00715	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00718	83 c0 01	 add	 eax, 1
  0071b	89 45 f0	 mov	 DWORD PTR _t$76926[ebp], eax

; 418  : 		mysi->nPage = min(max(0, lpsi->nPage), t);

  0071e	8b 4d 10	 mov	 ecx, DWORD PTR _lpsi$[ebp]
  00721	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00725	73 09		 jae	 SHORT $L77293
  00727	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
  0072e	eb 09		 jmp	 SHORT $L77294
$L77293:
  00730	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00733	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00736	89 45 ec	 mov	 DWORD PTR tv92[ebp], eax
$L77294:
  00739	8b 4d ec	 mov	 ecx, DWORD PTR tv92[ebp]
  0073c	3b 4d f0	 cmp	 ecx, DWORD PTR _t$76926[ebp]
  0073f	73 23		 jae	 SHORT $L77297
  00741	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00744	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00748	73 09		 jae	 SHORT $L77295
  0074a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
  00751	eb 09		 jmp	 SHORT $L77296
$L77295:
  00753	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00756	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00759	89 4d e8	 mov	 DWORD PTR tv129[ebp], ecx
$L77296:
  0075c	8b 55 e8	 mov	 edx, DWORD PTR tv129[ebp]
  0075f	89 55 e4	 mov	 DWORD PTR tv130[ebp], edx
  00762	eb 06		 jmp	 SHORT $L77298
$L77297:
  00764	8b 45 f0	 mov	 eax, DWORD PTR _t$76926[ebp]
  00767	89 45 e4	 mov	 DWORD PTR tv130[ebp], eax
$L77298:
  0076a	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0076d	8b 55 e4	 mov	 edx, DWORD PTR tv130[ebp]
  00770	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$L76925:

; 419  : 	}
; 420  : 
; 421  : 	//The nPos member must specify a value between nMin and nMax - max(nPage - 1, 0).
; 422  : 	if(lpsi->fMask & SIF_POS)

  00773	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00776	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00779	83 e1 04	 and	 ecx, 4
  0077c	0f 84 9c 00 00
	00		 je	 $L76928

; 423  : 	{
; 424  : 		mysi->nPos = max(lpsi->nPos, mysi->nMin);

  00782	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00785	8b 45 f8	 mov	 eax, DWORD PTR _mysi$[ebp]
  00788	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0078b	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0078e	7e 0b		 jle	 SHORT $L77299
  00790	8b 55 10	 mov	 edx, DWORD PTR _lpsi$[ebp]
  00793	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00796	89 45 e0	 mov	 DWORD PTR tv140[ebp], eax
  00799	eb 09		 jmp	 SHORT $L77300
$L77299:
  0079b	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0079e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  007a1	89 55 e0	 mov	 DWORD PTR tv140[ebp], edx
$L77300:
  007a4	8b 45 f8	 mov	 eax, DWORD PTR _mysi$[ebp]
  007a7	8b 4d e0	 mov	 ecx, DWORD PTR tv140[ebp]
  007aa	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 425  : 		mysi->nPos = min((UINT)mysi->nPos, mysi->nMax - max(mysi->nPage - 1, 0));

  007ad	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  007b0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  007b3	83 e8 01	 sub	 eax, 1
  007b6	74 0e		 je	 SHORT $L77301
  007b8	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  007bb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  007be	83 ea 01	 sub	 edx, 1
  007c1	89 55 dc	 mov	 DWORD PTR tv149[ebp], edx
  007c4	eb 07		 jmp	 SHORT $L77302
$L77301:
  007c6	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$L77302:
  007cd	8b 45 f8	 mov	 eax, DWORD PTR _mysi$[ebp]
  007d0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007d3	2b 4d dc	 sub	 ecx, DWORD PTR tv149[ebp]
  007d6	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  007d9	39 4a 14	 cmp	 DWORD PTR [edx+20], ecx
  007dc	73 0b		 jae	 SHORT $L77305
  007de	8b 45 f8	 mov	 eax, DWORD PTR _mysi$[ebp]
  007e1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  007e4	89 4d d8	 mov	 DWORD PTR tv161[ebp], ecx
  007e7	eb 2c		 jmp	 SHORT $L77306
$L77305:
  007e9	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  007ec	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  007ef	83 e8 01	 sub	 eax, 1
  007f2	74 0e		 je	 SHORT $L77303
  007f4	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  007f7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  007fa	83 ea 01	 sub	 edx, 1
  007fd	89 55 d4	 mov	 DWORD PTR tv159[ebp], edx
  00800	eb 07		 jmp	 SHORT $L77304
$L77303:
  00802	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L77304:
  00809	8b 45 f8	 mov	 eax, DWORD PTR _mysi$[ebp]
  0080c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0080f	2b 4d d4	 sub	 ecx, DWORD PTR tv159[ebp]
  00812	89 4d d8	 mov	 DWORD PTR tv161[ebp], ecx
$L77306:
  00815	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  00818	8b 45 d8	 mov	 eax, DWORD PTR tv161[ebp]
  0081b	89 42 14	 mov	 DWORD PTR [edx+20], eax
$L76928:

; 426  : 	}
; 427  : 
; 428  : 	sbar = GetScrollBarFromHwnd(hwnd, fnBar);

  0081e	8b 4d 0c	 mov	 ecx, DWORD PTR _fnBar$[ebp]
  00821	51		 push	 ecx
  00822	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00825	52		 push	 edx
  00826	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  0082b	83 c4 08	 add	 esp, 8
  0082e	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax

; 429  : 
; 430  : 	if((lpsi->fMask & SIF_DISABLENOSCROLL) || (sbar->fScrollFlags & CSBS_THUMBALWAYS))

  00831	8b 45 10	 mov	 eax, DWORD PTR _lpsi$[ebp]
  00834	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00837	83 e1 08	 and	 ecx, 8
  0083a	75 0a		 jne	 SHORT $L76932
  0083c	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0083f	8b 02		 mov	 eax, DWORD PTR [edx]
  00841	83 e0 04	 and	 eax, 4
  00844	74 21		 je	 SHORT $L76931
$L76932:

; 431  : 	{
; 432  : 		if(!sbar->fScrollVisible)

  00846	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00849	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0084d	75 16		 jne	 SHORT $L76933

; 433  : 		{
; 434  : 			CoolSB_ShowScrollBar(hwnd, fnBar, TRUE);

  0084f	6a 01		 push	 1
  00851	8b 55 0c	 mov	 edx, DWORD PTR _fnBar$[ebp]
  00854	52		 push	 edx
  00855	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00858	50		 push	 eax
  00859	e8 00 00 00 00	 call	 _CoolSB_ShowScrollBar@12

; 435  : 			fRecalcFrame = TRUE;

  0085e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 1
$L76933:

; 436  : 		}
; 437  : 	}
; 438  : 	else

  00865	eb 73		 jmp	 SHORT $L76934
$L76931:

; 439  : 	{
; 440  : 		if(    mysi->nPage >  (UINT)mysi->nMax 
; 441  : 			|| mysi->nPage == (UINT)mysi->nMax && mysi->nMax == 0
; 442  : 			|| mysi->nMax  <= mysi->nMin)

  00867	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0086a	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  0086d	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00870	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00873	77 25		 ja	 SHORT $L76938
  00875	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00878	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  0087b	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0087e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00881	75 09		 jne	 SHORT $L76939
  00883	8b 4d f8	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00886	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0088a	74 0e		 je	 SHORT $L76938
$L76939:
  0088c	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  0088f	8b 45 f8	 mov	 eax, DWORD PTR _mysi$[ebp]
  00892	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00895	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00898	7f 21		 jg	 SHORT $L76937
$L76938:

; 443  : 		{
; 444  : 			if(sbar->fScrollVisible)

  0089a	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0089d	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  008a1	74 16		 je	 SHORT $L76940

; 445  : 			{
; 446  : 				CoolSB_ShowScrollBar(hwnd, fnBar, FALSE);

  008a3	6a 00		 push	 0
  008a5	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  008a8	50		 push	 eax
  008a9	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  008ac	51		 push	 ecx
  008ad	e8 00 00 00 00	 call	 _CoolSB_ShowScrollBar@12

; 447  : 				fRecalcFrame = TRUE;

  008b2	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 1
$L76940:

; 448  : 			}
; 449  : 		}
; 450  : 		else

  008b9	eb 1f		 jmp	 SHORT $L76934
$L76937:

; 451  : 		{
; 452  : 			if(!sbar->fScrollVisible)

  008bb	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  008be	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  008c2	75 16		 jne	 SHORT $L76934

; 453  : 			{
; 454  : 				CoolSB_ShowScrollBar(hwnd, fnBar, TRUE);

  008c4	6a 01		 push	 1
  008c6	8b 45 0c	 mov	 eax, DWORD PTR _fnBar$[ebp]
  008c9	50		 push	 eax
  008ca	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  008cd	51		 push	 ecx
  008ce	e8 00 00 00 00	 call	 _CoolSB_ShowScrollBar@12

; 455  : 				fRecalcFrame = TRUE;

  008d3	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fRecalcFrame$[ebp], 1
$L76934:

; 456  : 			}
; 457  : 
; 458  : 		}
; 459  : 
; 460  : 	}
; 461  : 
; 462  : 	if(fRedraw && !CoolSB_IsThumbTracking(hwnd))

  008da	83 7d 14 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  008de	74 1d		 je	 SHORT $L76943
  008e0	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  008e3	52		 push	 edx
  008e4	e8 00 00 00 00	 call	 _CoolSB_IsThumbTracking@4
  008e9	85 c0		 test	 eax, eax
  008eb	75 10		 jne	 SHORT $L76943

; 463  : 		RedrawNonClient(hwnd, fRecalcFrame);

  008ed	8b 45 f4	 mov	 eax, DWORD PTR _fRecalcFrame$[ebp]
  008f0	50		 push	 eax
  008f1	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  008f4	51		 push	 ecx
  008f5	e8 00 00 00 00	 call	 _RedrawNonClient
  008fa	83 c4 08	 add	 esp, 8
$L76943:

; 464  : 	
; 465  : 	return mysi->nPos;

  008fd	8b 55 f8	 mov	 edx, DWORD PTR _mysi$[ebp]
  00900	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
$L76918:

; 466  : }

  00903	8b e5		 mov	 esp, ebp
  00905	5d		 pop	 ebp
  00906	c2 10 00	 ret	 16			; 00000010H
_CoolSB_SetScrollInfo@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetScrollPos@16
EXTRN	__imp__SetScrollPos@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv129 = -24						; size = 4
tv131 = -20						; size = 4
tv87 = -16						; size = 4
tv78 = -12						; size = 4
_oldpos$ = -8						; size = 4
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_nPos$ = 16						; size = 4
_fRedraw$ = 20						; size = 4
_CoolSB_SetScrollPos@16 PROC NEAR

; 470  : {

  00910	55		 push	 ebp
  00911	8b ec		 mov	 ebp, esp
  00913	83 ec 18	 sub	 esp, 24			; 00000018H

; 471  : 	SCROLLINFO *mysi;
; 472  : 	int oldpos;
; 473  : 	
; 474  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  00916	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  00919	50		 push	 eax
  0091a	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0091d	51		 push	 ecx
  0091e	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00923	83 c4 08	 add	 esp, 8
  00926	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  00929	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  0092d	75 1b		 jne	 SHORT $L76955

; 475  : 	{
; 476  : 		return SetScrollPos(hwnd, nBar, nPos, fRedraw);

  0092f	8b 55 14	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  00932	52		 push	 edx
  00933	8b 45 10	 mov	 eax, DWORD PTR _nPos$[ebp]
  00936	50		 push	 eax
  00937	8b 4d 0c	 mov	 ecx, DWORD PTR _nBar$[ebp]
  0093a	51		 push	 ecx
  0093b	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0093e	52		 push	 edx
  0093f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16
  00945	e9 c3 00 00 00	 jmp	 $L76952
$L76955:

; 477  : 	}
; 478  : 
; 479  : 	//this is what should happen, but real scrollbars don't work like this..
; 480  : 	//if(CoolSB_IsThumbTracking(hwnd))
; 481  : 	//	return mysi->nPos;
; 482  : 
; 483  : 	//validate and set the scollbar position
; 484  : 	oldpos = mysi->nPos;

  0094a	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  0094d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00950	89 4d f8	 mov	 DWORD PTR _oldpos$[ebp], ecx

; 485  : 	mysi->nPos = max(nPos, mysi->nMin);

  00953	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00956	8b 45 10	 mov	 eax, DWORD PTR _nPos$[ebp]
  00959	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0095c	7e 08		 jle	 SHORT $L77308
  0095e	8b 4d 10	 mov	 ecx, DWORD PTR _nPos$[ebp]
  00961	89 4d f4	 mov	 DWORD PTR tv78[ebp], ecx
  00964	eb 09		 jmp	 SHORT $L77309
$L77308:
  00966	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00969	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0096c	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
$L77309:
  0096f	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  00972	8b 55 f4	 mov	 edx, DWORD PTR tv78[ebp]
  00975	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 486  : 	mysi->nPos = min((UINT)mysi->nPos, mysi->nMax - max(mysi->nPage - 1, 0));

  00978	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  0097b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0097e	83 e9 01	 sub	 ecx, 1
  00981	74 0e		 je	 SHORT $L77310
  00983	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00986	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00989	83 e8 01	 sub	 eax, 1
  0098c	89 45 f0	 mov	 DWORD PTR tv87[ebp], eax
  0098f	eb 07		 jmp	 SHORT $L77311
$L77310:
  00991	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L77311:
  00998	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  0099b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0099e	2b 55 f0	 sub	 edx, DWORD PTR tv87[ebp]
  009a1	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  009a4	39 50 14	 cmp	 DWORD PTR [eax+20], edx
  009a7	73 0b		 jae	 SHORT $L77314
  009a9	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  009ac	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  009af	89 55 ec	 mov	 DWORD PTR tv131[ebp], edx
  009b2	eb 2c		 jmp	 SHORT $L77315
$L77314:
  009b4	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  009b7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  009ba	83 e9 01	 sub	 ecx, 1
  009bd	74 0e		 je	 SHORT $L77312
  009bf	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  009c2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  009c5	83 e8 01	 sub	 eax, 1
  009c8	89 45 e8	 mov	 DWORD PTR tv129[ebp], eax
  009cb	eb 07		 jmp	 SHORT $L77313
$L77312:
  009cd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$L77313:
  009d4	8b 4d fc	 mov	 ecx, DWORD PTR _mysi$[ebp]
  009d7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  009da	2b 55 e8	 sub	 edx, DWORD PTR tv129[ebp]
  009dd	89 55 ec	 mov	 DWORD PTR tv131[ebp], edx
$L77315:
  009e0	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  009e3	8b 4d ec	 mov	 ecx, DWORD PTR tv131[ebp]
  009e6	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 487  : 
; 488  : 	if(fRedraw && !CoolSB_IsThumbTracking(hwnd))

  009e9	83 7d 14 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  009ed	74 1b		 je	 SHORT $L76958
  009ef	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  009f2	52		 push	 edx
  009f3	e8 00 00 00 00	 call	 _CoolSB_IsThumbTracking@4
  009f8	85 c0		 test	 eax, eax
  009fa	75 0e		 jne	 SHORT $L76958

; 489  : 		RedrawNonClient(hwnd, FALSE);

  009fc	6a 00		 push	 0
  009fe	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00a01	50		 push	 eax
  00a02	e8 00 00 00 00	 call	 _RedrawNonClient
  00a07	83 c4 08	 add	 esp, 8
$L76958:

; 490  : 
; 491  : 	return oldpos;

  00a0a	8b 45 f8	 mov	 eax, DWORD PTR _oldpos$[ebp]
$L76952:

; 492  : }

  00a0d	8b e5		 mov	 esp, ebp
  00a0f	5d		 pop	 ebp
  00a10	c2 10 00	 ret	 16			; 00000010H
_CoolSB_SetScrollPos@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetScrollRange@20
EXTRN	__imp__SetScrollRange@20:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_mysi$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_nBar$ = 12						; size = 4
_nMinPos$ = 16						; size = 4
_nMaxPos$ = 20						; size = 4
_fRedraw$ = 24						; size = 4
_CoolSB_SetScrollRange@20 PROC NEAR

; 495  : {

  00a20	55		 push	 ebp
  00a21	8b ec		 mov	 ebp, esp
  00a23	51		 push	 ecx

; 496  : 	SCROLLINFO *mysi;
; 497  : 	
; 498  : 	if(!(mysi = GetScrollInfoFromHwnd(hwnd, nBar)))

  00a24	8b 45 0c	 mov	 eax, DWORD PTR _nBar$[ebp]
  00a27	50		 push	 eax
  00a28	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00a2b	51		 push	 ecx
  00a2c	e8 00 00 00 00	 call	 _GetScrollInfoFromHwnd
  00a31	83 c4 08	 add	 esp, 8
  00a34	89 45 fc	 mov	 DWORD PTR _mysi$[ebp], eax
  00a37	83 7d fc 00	 cmp	 DWORD PTR _mysi$[ebp], 0
  00a3b	75 1c		 jne	 SHORT $L76971

; 499  : 		return SetScrollRange(hwnd, nBar, nMinPos, nMaxPos, fRedraw);

  00a3d	8b 55 18	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  00a40	52		 push	 edx
  00a41	8b 45 14	 mov	 eax, DWORD PTR _nMaxPos$[ebp]
  00a44	50		 push	 eax
  00a45	8b 4d 10	 mov	 ecx, DWORD PTR _nMinPos$[ebp]
  00a48	51		 push	 ecx
  00a49	8b 55 0c	 mov	 edx, DWORD PTR _nBar$[ebp]
  00a4c	52		 push	 edx
  00a4d	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00a50	50		 push	 eax
  00a51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollRange@20
  00a57	eb 40		 jmp	 SHORT $L76969
$L76971:

; 500  : 
; 501  : 	if(CoolSB_IsThumbTracking(hwnd))

  00a59	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00a5c	51		 push	 ecx
  00a5d	e8 00 00 00 00	 call	 _CoolSB_IsThumbTracking@4
  00a62	85 c0		 test	 eax, eax
  00a64	74 08		 je	 SHORT $L76972

; 502  : 		return mysi->nPos;

  00a66	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00a69	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a6c	eb 2b		 jmp	 SHORT $L76969
$L76972:

; 503  : 
; 504  : 	//hide the scrollbar if nMin == nMax
; 505  : 	//nMax-nMin must not be greater than MAXLONG
; 506  : 	mysi->nMin = nMinPos;

  00a6e	8b 45 fc	 mov	 eax, DWORD PTR _mysi$[ebp]
  00a71	8b 4d 10	 mov	 ecx, DWORD PTR _nMinPos$[ebp]
  00a74	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 507  : 	mysi->nMax = nMaxPos;

  00a77	8b 55 fc	 mov	 edx, DWORD PTR _mysi$[ebp]
  00a7a	8b 45 14	 mov	 eax, DWORD PTR _nMaxPos$[ebp]
  00a7d	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 508  : 	
; 509  : 	if(fRedraw)

  00a80	83 7d 18 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  00a84	74 0e		 je	 SHORT $L76973

; 510  : 		RedrawNonClient(hwnd, FALSE);

  00a86	6a 00		 push	 0
  00a88	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00a8b	51		 push	 ecx
  00a8c	e8 00 00 00 00	 call	 _RedrawNonClient
  00a91	83 c4 08	 add	 esp, 8
$L76973:

; 511  : 
; 512  : 	return TRUE;

  00a94	b8 01 00 00 00	 mov	 eax, 1
$L76969:

; 513  : }

  00a99	8b e5		 mov	 esp, ebp
  00a9b	5d		 pop	 ebp
  00a9c	c2 14 00	 ret	 20			; 00000014H
_CoolSB_SetScrollRange@20 ENDP
_TEXT	ENDS
EXTRN	__imp__ShowScrollBar@12:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_dwStyle$ = -12						; size = 4
_bFailed$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_fShow$ = 16						; size = 4
_CoolSB_ShowScrollBar@12 PROC NEAR

; 519  : {

  00aa0	55		 push	 ebp
  00aa1	8b ec		 mov	 ebp, esp
  00aa3	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 520  : 	SCROLLBAR *sbar;
; 521  : 	BOOL bFailed = FALSE;

  00aa6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 0

; 522  : 	DWORD dwStyle = GetWindowLong(hwnd, GWL_STYLE);

  00aad	6a f0		 push	 -16			; fffffff0H
  00aaf	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00ab2	50		 push	 eax
  00ab3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00ab9	89 45 f4	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 523  : 
; 524  : 	if(!CoolSB_IsCoolScrollEnabled(hwnd))

  00abc	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00abf	51		 push	 ecx
  00ac0	e8 00 00 00 00	 call	 _CoolSB_IsCoolScrollEnabled@4
  00ac5	85 c0		 test	 eax, eax
  00ac7	75 17		 jne	 SHORT $L76984

; 525  : 		return ShowScrollBar(hwnd, wBar, fShow);

  00ac9	8b 55 10	 mov	 edx, DWORD PTR _fShow$[ebp]
  00acc	52		 push	 edx
  00acd	8b 45 0c	 mov	 eax, DWORD PTR _wBar$[ebp]
  00ad0	50		 push	 eax
  00ad1	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00ad4	51		 push	 ecx
  00ad5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowScrollBar@12
  00adb	e9 1a 01 00 00	 jmp	 $L76980
$L76984:

; 526  : 
; 527  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 528  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  00ae0	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  00ae4	74 06		 je	 SHORT $L76986
  00ae6	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  00aea	75 6e		 jne	 SHORT $L76985
$L76986:
  00aec	6a 00		 push	 0
  00aee	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00af1	52		 push	 edx
  00af2	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00af7	83 c4 08	 add	 esp, 8
  00afa	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  00afd	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00b01	74 57		 je	 SHORT $L76985

; 529  : 	{
; 530  : 		sbar->fScrollFlags  =  sbar->fScrollFlags & ~CSBS_VISIBLE;

  00b03	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  00b06	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b08	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00b0b	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00b0e	89 0a		 mov	 DWORD PTR [edx], ecx

; 531  : 		sbar->fScrollFlags |= (fShow == TRUE ? CSBS_VISIBLE : 0);

  00b10	33 c0		 xor	 eax, eax
  00b12	83 7d 10 01	 cmp	 DWORD PTR _fShow$[ebp], 1
  00b16	0f 95 c0	 setne	 al
  00b19	48		 dec	 eax
  00b1a	83 e0 08	 and	 eax, 8
  00b1d	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00b20	0b 01		 or	 eax, DWORD PTR [ecx]
  00b22	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00b25	89 02		 mov	 DWORD PTR [edx], eax

; 532  : 		//bFailed = TRUE;
; 533  : 
; 534  : 		if(fShow)	SetWindowLong(hwnd, GWL_STYLE, dwStyle | WS_HSCROLL);

  00b27	83 7d 10 00	 cmp	 DWORD PTR _fShow$[ebp], 0
  00b2b	74 17		 je	 SHORT $L76987
  00b2d	8b 45 f4	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00b30	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  00b35	50		 push	 eax
  00b36	6a f0		 push	 -16			; fffffff0H
  00b38	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00b3b	51		 push	 ecx
  00b3c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 535  : 		else		SetWindowLong(hwnd, GWL_STYLE, dwStyle & ~WS_HSCROLL);

  00b42	eb 16		 jmp	 SHORT $L76985
$L76987:
  00b44	8b 55 f4	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00b47	81 e2 ff ff ef
	ff		 and	 edx, -1048577		; ffefffffH
  00b4d	52		 push	 edx
  00b4e	6a f0		 push	 -16			; fffffff0H
  00b50	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00b53	50		 push	 eax
  00b54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
$L76985:

; 536  : 	}
; 537  : 
; 538  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 539  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  00b5a	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  00b5e	74 06		 je	 SHORT $L76990
  00b60	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  00b64	75 6f		 jne	 SHORT $L76989
$L76990:
  00b66	6a 01		 push	 1
  00b68	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00b6b	51		 push	 ecx
  00b6c	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00b71	83 c4 08	 add	 esp, 8
  00b74	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  00b77	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00b7b	74 58		 je	 SHORT $L76989

; 540  : 	{
; 541  : 		sbar->fScrollFlags  =  sbar->fScrollFlags & ~CSBS_VISIBLE;

  00b7d	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  00b80	8b 02		 mov	 eax, DWORD PTR [edx]
  00b82	83 e0 f7	 and	 eax, -9			; fffffff7H
  00b85	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00b88	89 01		 mov	 DWORD PTR [ecx], eax

; 542  : 		sbar->fScrollFlags |= (fShow == TRUE ? CSBS_VISIBLE : 0);

  00b8a	33 d2		 xor	 edx, edx
  00b8c	83 7d 10 01	 cmp	 DWORD PTR _fShow$[ebp], 1
  00b90	0f 95 c2	 setne	 dl
  00b93	4a		 dec	 edx
  00b94	83 e2 08	 and	 edx, 8
  00b97	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  00b9a	0b 10		 or	 edx, DWORD PTR [eax]
  00b9c	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00b9f	89 11		 mov	 DWORD PTR [ecx], edx

; 543  : 		//bFailed = TRUE;
; 544  : 
; 545  : 		if(fShow)	SetWindowLong(hwnd, GWL_STYLE, dwStyle | WS_VSCROLL);

  00ba1	83 7d 10 00	 cmp	 DWORD PTR _fShow$[ebp], 0
  00ba5	74 18		 je	 SHORT $L76991
  00ba7	8b 55 f4	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00baa	81 ca 00 00 20
	00		 or	 edx, 2097152		; 00200000H
  00bb0	52		 push	 edx
  00bb1	6a f0		 push	 -16			; fffffff0H
  00bb3	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00bb6	50		 push	 eax
  00bb7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 546  : 		else		SetWindowLong(hwnd, GWL_STYLE, dwStyle & ~WS_VSCROLL);

  00bbd	eb 16		 jmp	 SHORT $L76989
$L76991:
  00bbf	8b 4d f4	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  00bc2	81 e1 ff ff df
	ff		 and	 ecx, -2097153		; ffdfffffH
  00bc8	51		 push	 ecx
  00bc9	6a f0		 push	 -16			; fffffff0H
  00bcb	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00bce	52		 push	 edx
  00bcf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
$L76989:

; 547  : 	}
; 548  : 
; 549  : 	if(bFailed)

  00bd5	83 7d f8 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00bd9	74 04		 je	 SHORT $L76993

; 550  : 	{
; 551  : 		return FALSE;

  00bdb	33 c0		 xor	 eax, eax
  00bdd	eb 1b		 jmp	 SHORT $L76980
$L76993:

; 552  : 	}
; 553  : 	else
; 554  : 	{
; 555  : 		//DWORD style = GetWindowLong(hwnd, GWL_STYLE);
; 556  : 		//style |= WS_VSCROLL;
; 557  : 		
; 558  : 		//if(s
; 559  : 		//SetWindowLong(hwnd, GWL_STYLE, style);
; 560  : 
; 561  : 		SetWindowPos(hwnd, 0, 0, 0, 0, 0, 
; 562  : 			SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | 
; 563  : 			SWP_NOACTIVATE | SWP_FRAMECHANGED);

  00bdf	6a 37		 push	 55			; 00000037H
  00be1	6a 00		 push	 0
  00be3	6a 00		 push	 0
  00be5	6a 00		 push	 0
  00be7	6a 00		 push	 0
  00be9	6a 00		 push	 0
  00beb	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00bee	50		 push	 eax
  00bef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 564  : 		
; 565  : 		return TRUE;

  00bf5	b8 01 00 00 00	 mov	 eax, 1
$L76980:

; 566  : 	}
; 567  : }

  00bfa	8b e5		 mov	 esp, ebp
  00bfc	5d		 pop	 ebp
  00bfd	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_ShowScrollBar@12 ENDP
_TEXT	ENDS
PUBLIC	_UninitializeCoolSB@4
EXTRN	__imp__RemovePropA@8:NEAR
EXTRN	__imp__HeapFree@12:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_sw$ = -8						; size = 4
_i$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_UninitializeCoolSB@4 PROC NEAR

; 573  : {

  00c00	55		 push	 ebp
  00c01	8b ec		 mov	 ebp, esp
  00c03	83 ec 08	 sub	 esp, 8

; 574  : 	int i = 0;

  00c06	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 575  : 	SCROLLWND *sw = GetScrollWndFromHwnd(hwnd);

  00c0d	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00c10	50		 push	 eax
  00c11	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  00c16	83 c4 04	 add	 esp, 4
  00c19	89 45 f8	 mov	 DWORD PTR _sw$[ebp], eax

; 576  : 	if(!sw) return E_FAIL;

  00c1c	83 7d f8 00	 cmp	 DWORD PTR _sw$[ebp], 0
  00c20	75 07		 jne	 SHORT $L77000
  00c22	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00c27	eb 45		 jmp	 SHORT $L76997
$L77000:

; 577  : 
; 578  : 	//restore the window procedure with the original one
; 579  : #pragma warning( disable: 4311)	
; 580  : 	SetWindowLong(hwnd, GWL_WNDPROC, (LONG)sw->oldproc);

  00c29	8b 4d f8	 mov	 ecx, DWORD PTR _sw$[ebp]
  00c2c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00c2f	52		 push	 edx
  00c30	6a fc		 push	 -4			; fffffffcH
  00c32	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00c35	50		 push	 eax
  00c36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 581  : #pragma warning( default: 4311)	
; 582  : 	RemoveProp(hwnd, szPropStr);

  00c3c	68 00 00 00 00	 push	 OFFSET FLAT:_szPropStr
  00c41	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00c44	51		 push	 ecx
  00c45	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RemovePropA@8

; 583  : 	//SetWindowLong(hwnd, GWL_USERDATA, 0);
; 584  : 
; 585  : 	//finally, release the memory needed for the cool scrollbars
; 586  : 	HeapFree(GetProcessHeap(), 0, sw);

  00c4b	8b 55 f8	 mov	 edx, DWORD PTR _sw$[ebp]
  00c4e	52		 push	 edx
  00c4f	6a 00		 push	 0
  00c51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00c57	50		 push	 eax
  00c58	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 587  : 
; 588  :     //Force WM_NCCALCSIZE and WM_NCPAINT so the original scrollbars can kick in
; 589  :     RedrawNonClient(hwnd, TRUE);

  00c5e	6a 01		 push	 1
  00c60	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00c63	50		 push	 eax
  00c64	e8 00 00 00 00	 call	 _RedrawNonClient
  00c69	83 c4 08	 add	 esp, 8

; 590  : 
; 591  : 	return S_OK;

  00c6c	33 c0		 xor	 eax, eax
$L76997:

; 592  : }

  00c6e	8b e5		 mov	 esp, ebp
  00c70	5d		 pop	 ebp
  00c71	c2 04 00	 ret	 4
_UninitializeCoolSB@4 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_InsertButton@16
; Function compile flags: /Odt
_TEXT	SEGMENT
_i$ = -12						; size = 4
_sbar$ = -8						; size = 4
_sbut$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_nPos$ = 16						; size = 4
_psb$ = 20						; size = 4
_CoolSB_InsertButton@16 PROC NEAR

; 610  : {

  00c80	55		 push	 ebp
  00c81	8b ec		 mov	 ebp, esp
  00c83	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00c86	56		 push	 esi
  00c87	57		 push	 edi

; 611  : 	SCROLLBAR *sbar;
; 612  : 	SCROLLBUT *sbut;
; 613  : 	UINT i;
; 614  : 
; 615  : 	if(!psb) return FALSE;

  00c88	83 7d 14 00	 cmp	 DWORD PTR _psb$[ebp], 0
  00c8c	75 07		 jne	 SHORT $L77016
  00c8e	33 c0		 xor	 eax, eax
  00c90	e9 5c 02 00 00	 jmp	 $L77012
$L77016:

; 616  : 
; 617  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  00c95	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  00c98	50		 push	 eax
  00c99	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00c9c	51		 push	 ecx
  00c9d	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00ca2	83 c4 08	 add	 esp, 8
  00ca5	89 45 f8	 mov	 DWORD PTR _sbar$[ebp], eax
  00ca8	83 7d f8 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00cac	75 07		 jne	 SHORT $L77017

; 618  : 		return FALSE;

  00cae	33 c0		 xor	 eax, eax
  00cb0	e9 3c 02 00 00	 jmp	 $L77012
$L77017:

; 619  : 	
; 620  : 	//check that we havn't reached the maximum allowed buttons yet
; 621  : 	if(sbar->nButtons == MAX_COOLSB_BUTS)

  00cb5	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00cb8	83 ba 2c 03 00
	00 10		 cmp	 DWORD PTR [edx+812], 16	; 00000010H
  00cbf	75 07		 jne	 SHORT $L77018

; 622  : 		return FALSE;

  00cc1	33 c0		 xor	 eax, eax
  00cc3	e9 29 02 00 00	 jmp	 $L77012
$L77018:

; 623  : 
; 624  : 	//insert at end
; 625  : 	if(nPos == -1)

  00cc8	83 7d 10 ff	 cmp	 DWORD PTR _nPos$[ebp], -1
  00ccc	75 18		 jne	 SHORT $L77019

; 626  : 	{
; 627  : 		sbut = &sbar->sbButtons[sbar->nButtons];

  00cce	8b 45 f8	 mov	 eax, DWORD PTR _sbar$[ebp]
  00cd1	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  00cd7	6b c9 30	 imul	 ecx, 48			; 00000030H
  00cda	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00cdd	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  00ce1	89 45 fc	 mov	 DWORD PTR _sbut$[ebp], eax

; 628  : 	}
; 629  : 	//otherwise, need to make room
; 630  : 	else if((int)nPos < 0 || (int)nPos > (UINT)sbar->nButtons)

  00ce4	eb 70		 jmp	 SHORT $L77020
$L77019:
  00ce6	83 7d 10 00	 cmp	 DWORD PTR _nPos$[ebp], 0
  00cea	7c 0e		 jl	 SHORT $L77025
  00cec	8b 4d f8	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00cef	8b 55 10	 mov	 edx, DWORD PTR _nPos$[ebp]
  00cf2	3b 91 2c 03 00
	00		 cmp	 edx, DWORD PTR [ecx+812]
  00cf8	76 07		 jbe	 SHORT $L77024
$L77025:

; 631  : 	{
; 632  : 		return FALSE;

  00cfa	33 c0		 xor	 eax, eax
  00cfc	e9 f0 01 00 00	 jmp	 $L77012
$L77024:

; 633  : 	}
; 634  : 	else
; 635  : 	{
; 636  : 		//insert space for the button at the specified position
; 637  : 		for(i = sbar->nButtons; i > nPos; i--)

  00d01	8b 45 f8	 mov	 eax, DWORD PTR _sbar$[ebp]
  00d04	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  00d0a	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
  00d0d	eb 09		 jmp	 SHORT $L77027
$L77028:
  00d0f	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00d12	83 ea 01	 sub	 edx, 1
  00d15	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L77027:
  00d18	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00d1b	3b 45 10	 cmp	 eax, DWORD PTR _nPos$[ebp]
  00d1e	76 26		 jbe	 SHORT $L77029

; 638  : 		{
; 639  : 			sbar->sbButtons[i] = sbar->sbButtons[i-1];

  00d20	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00d23	83 e9 01	 sub	 ecx, 1
  00d26	6b c9 30	 imul	 ecx, 48			; 00000030H
  00d29	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00d2c	8d 74 0a 2c	 lea	 esi, DWORD PTR [edx+ecx+44]
  00d30	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00d33	6b c0 30	 imul	 eax, 48			; 00000030H
  00d36	8b 4d f8	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00d39	8d 7c 01 2c	 lea	 edi, DWORD PTR [ecx+eax+44]
  00d3d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00d42	f3 a5		 rep movsd

; 640  : 		}

  00d44	eb c9		 jmp	 SHORT $L77028
$L77029:

; 641  : 
; 642  : 		sbut = &sbar->sbButtons[nPos];

  00d46	8b 55 10	 mov	 edx, DWORD PTR _nPos$[ebp]
  00d49	6b d2 30	 imul	 edx, 48			; 00000030H
  00d4c	8b 45 f8	 mov	 eax, DWORD PTR _sbar$[ebp]
  00d4f	8d 4c 10 2c	 lea	 ecx, DWORD PTR [eax+edx+44]
  00d53	89 4d fc	 mov	 DWORD PTR _sbut$[ebp], ecx
$L77020:

; 643  : 	}
; 644  : 
; 645  : 	//only set the button's properties if they are
; 646  : 	//specified by the SCROLLBUT->fMask. 
; 647  : 	//Otherwise, use a default property value
; 648  : 
; 649  : 	if(psb->fMask & SBBF_TYPE)

  00d56	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00d59	8b 02		 mov	 eax, DWORD PTR [edx]
  00d5b	83 e0 01	 and	 eax, 1
  00d5e	74 0e		 je	 SHORT $L77030

; 650  : 		sbut->uButType   = psb->uButType;

  00d60	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00d63	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00d66	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00d69	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 651  : 	else

  00d6c	eb 0a		 jmp	 SHORT $L77031
$L77030:

; 652  : 		sbut->uButType	 = SBBT_PUSHBUTTON;

  00d6e	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00d71	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1
$L77031:

; 653  : 
; 654  : 	if(psb->fMask & SBBF_STATE)

  00d78	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00d7b	8b 02		 mov	 eax, DWORD PTR [edx]
  00d7d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00d82	74 0e		 je	 SHORT $L77032

; 655  : 		sbut->uState	 = psb->uState;

  00d84	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00d87	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00d8a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00d8d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 656  : 	else

  00d90	eb 0a		 jmp	 SHORT $L77033
$L77032:

; 657  : 		sbut->uState	 = 0;

  00d92	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00d95	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L77033:

; 658  : 
; 659  : 	if(psb->fMask & SBBF_ID)

  00d9c	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00d9f	8b 02		 mov	 eax, DWORD PTR [edx]
  00da1	83 e0 02	 and	 eax, 2
  00da4	74 0e		 je	 SHORT $L77034

; 660  : 		sbut->uCmdId     = psb->uCmdId;

  00da6	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00da9	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00dac	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00daf	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 661  : 	else

  00db2	eb 0a		 jmp	 SHORT $L77035
$L77034:

; 662  : 		sbut->uCmdId	 = 0;

  00db4	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00db7	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L77035:

; 663  : 
; 664  : 	if(psb->fMask & SBBF_SIZE)

  00dbe	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00dc1	8b 02		 mov	 eax, DWORD PTR [edx]
  00dc3	83 e0 08	 and	 eax, 8
  00dc6	74 0e		 je	 SHORT $L77036

; 665  : 		sbut->nSize		 = psb->nSize;

  00dc8	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00dcb	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00dce	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00dd1	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 666  : 	else

  00dd4	eb 0a		 jmp	 SHORT $L77037
$L77036:

; 667  : 		sbut->nSize		 = -1;

  00dd6	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00dd9	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
$L77037:

; 668  : 
; 669  : 	if(psb->fMask & SBBF_PLACEMENT)

  00de0	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00de3	8b 02		 mov	 eax, DWORD PTR [edx]
  00de5	83 e0 04	 and	 eax, 4
  00de8	74 0e		 je	 SHORT $L77038

; 670  : 		sbut->uPlacement = psb->uPlacement;

  00dea	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00ded	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00df0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00df3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 671  : 	else

  00df6	eb 0a		 jmp	 SHORT $L77039
$L77038:

; 672  : 		sbut->uPlacement = SBBP_LEFT;

  00df8	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00dfb	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1
$L77039:

; 673  : 
; 674  : 	if(psb->fMask & SBBF_BITMAP)

  00e02	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00e05	8b 02		 mov	 eax, DWORD PTR [edx]
  00e07	83 e0 10	 and	 eax, 16			; 00000010H
  00e0a	74 0e		 je	 SHORT $L77040

; 675  : 		sbut->hBmp		 = psb->hBmp;

  00e0c	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e0f	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00e12	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00e15	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 676  : 	else

  00e18	eb 0a		 jmp	 SHORT $L77041
$L77040:

; 677  : 		sbut->hBmp		 = 0;

  00e1a	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e1d	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
$L77041:

; 678  : 
; 679  : 	if(psb->fMask & SBBF_ENHMETAFILE)

  00e24	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00e27	8b 02		 mov	 eax, DWORD PTR [edx]
  00e29	83 e0 20	 and	 eax, 32			; 00000020H
  00e2c	74 0e		 je	 SHORT $L77042

; 680  : 		sbut->hEmf		 = psb->hEmf;

  00e2e	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e31	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00e34	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00e37	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 681  : 	else

  00e3a	eb 0a		 jmp	 SHORT $L77043
$L77042:

; 682  : 		sbut->hEmf		 = 0;

  00e3c	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e3f	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$L77043:

; 683  : 
; 684  : 	if(psb->fMask & SBBF_CURSOR)

  00e46	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00e49	8b 02		 mov	 eax, DWORD PTR [edx]
  00e4b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00e50	74 0e		 je	 SHORT $L77044

; 685  : 		sbut->hCurs = psb->hCurs;

  00e52	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e55	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00e58	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00e5b	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 686  : 	else

  00e5e	eb 0a		 jmp	 SHORT $L77045
$L77044:

; 687  : 		sbut->hCurs = 0;

  00e60	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e63	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
$L77045:

; 688  : 
; 689  : 	/*
; 690  : 		We don't use the callback function anymore. The uButType
; 691  : 		member must now specify SBBT_OWNERDRAW, and a WM_NOTIFY will
; 692  : 		be sent when a button must be drawn
; 693  : 	if((psb->fMask & SBBF_OWNERDRAW) && ((psb->uButType & SBBT_MASK) == SBBT_OWNERDRAW))
; 694  : 		pDrawProc	 = psb->pDrawProc;
; 695  : 	else
; 696  : 		pDrawProc	 = 0;*/
; 697  : 
; 698  : 	sbar->nButtons++;

  00e6a	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00e6d	8b 82 2c 03 00
	00		 mov	 eax, DWORD PTR [edx+812]
  00e73	83 c0 01	 add	 eax, 1
  00e76	8b 4d f8	 mov	 ecx, DWORD PTR _sbar$[ebp]
  00e79	89 81 2c 03 00
	00		 mov	 DWORD PTR [ecx+812], eax

; 699  : 	sbut->nSizeReserved = sbut->nSize;

  00e7f	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  00e82	8b 45 fc	 mov	 eax, DWORD PTR _sbut$[ebp]
  00e85	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00e88	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 700  : 
; 701  : 	//MAKE SURE that any resizable buttons are only to the left / above
; 702  : 	//a scrollbar. We don't support resize operations to the right of a scrollbar
; 703  : 	if((sbut->uButType & SBBM_RESIZABLE) &&	sbut->uPlacement == SBBP_RIGHT)

  00e8b	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  00e8e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00e91	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00e96	74 1a		 je	 SHORT $L77046
  00e98	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00e9b	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00e9f	75 11		 jne	 SHORT $L77046

; 704  : 		sbut->uButType &= ~SBBM_RESIZABLE;

  00ea1	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  00ea4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00ea7	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  00eac	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00eaf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L77046:

; 705  : 
; 706  : 	if(psb->fMask & SBBF_BUTMINMAX)

  00eb2	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00eb5	8b 02		 mov	 eax, DWORD PTR [edx]
  00eb7	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00ebc	74 1a		 je	 SHORT $L77047

; 707  : 	{
; 708  : 		sbut->nMinSize = psb->nMinSize;

  00ebe	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00ec1	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00ec4	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00ec7	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 709  : 		sbut->nMaxSize = psb->nMaxSize;

  00eca	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00ecd	8b 55 14	 mov	 edx, DWORD PTR _psb$[ebp]
  00ed0	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00ed3	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 710  : 	}
; 711  : 	else

  00ed6	eb 14		 jmp	 SHORT $L77048
$L77047:

; 712  : 	{
; 713  : 		sbut->nMinSize = 0;

  00ed8	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00edb	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 714  : 		sbut->nMaxSize = -1;

  00ee2	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  00ee5	c7 42 2c ff ff
	ff ff		 mov	 DWORD PTR [edx+44], -1
$L77048:

; 715  : 	}
; 716  : 
; 717  : 	return TRUE;

  00eec	b8 01 00 00 00	 mov	 eax, 1
$L77012:

; 718  : }

  00ef1	5f		 pop	 edi
  00ef2	5e		 pop	 esi
  00ef3	8b e5		 mov	 esp, ebp
  00ef5	5d		 pop	 ebp
  00ef6	c2 10 00	 ret	 16			; 00000010H
_CoolSB_InsertButton@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_ModifyButton@20
; Function compile flags: /Odt
_TEXT	SEGMENT
_sbar$ = -8						; size = 4
_sbut$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_uItem$ = 16						; size = 4
_fByCmd$ = 20						; size = 4
_psb$ = 24						; size = 4
_CoolSB_ModifyButton@20 PROC NEAR

; 740  : {

  00f00	55		 push	 ebp
  00f01	8b ec		 mov	 ebp, esp
  00f03	83 ec 08	 sub	 esp, 8

; 741  : 	SCROLLBAR *sbar;
; 742  : 	SCROLLBUT *sbut;
; 743  : 
; 744  : 	if(!psb) return FALSE;

  00f06	83 7d 18 00	 cmp	 DWORD PTR _psb$[ebp], 0
  00f0a	75 07		 jne	 SHORT $L77073
  00f0c	33 c0		 xor	 eax, eax
  00f0e	e9 57 01 00 00	 jmp	 $L77070
$L77073:

; 745  : 
; 746  : 	//find if this window is CoolScroll enabled
; 747  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  00f13	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  00f16	50		 push	 eax
  00f17	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00f1a	51		 push	 ecx
  00f1b	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  00f20	83 c4 08	 add	 esp, 8
  00f23	89 45 f8	 mov	 DWORD PTR _sbar$[ebp], eax
  00f26	83 7d f8 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  00f2a	75 07		 jne	 SHORT $L77074

; 748  : 		return FALSE;

  00f2c	33 c0		 xor	 eax, eax
  00f2e	e9 37 01 00 00	 jmp	 $L77070
$L77074:

; 749  : 
; 750  : 	//find the button to modify, depending on if we
; 751  : 	//are modifying by position or command id
; 752  : 	if(fByCmd == FALSE)

  00f33	83 7d 14 00	 cmp	 DWORD PTR _fByCmd$[ebp], 0
  00f37	75 2d		 jne	 SHORT $L77075

; 753  : 	{
; 754  : 		//button from position
; 755  : 		if((int)uItem < 0 || (int)uItem >= (UINT)sbar->nButtons)

  00f39	83 7d 10 00	 cmp	 DWORD PTR _uItem$[ebp], 0
  00f3d	7c 0e		 jl	 SHORT $L77080
  00f3f	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00f42	8b 45 10	 mov	 eax, DWORD PTR _uItem$[ebp]
  00f45	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  00f4b	72 07		 jb	 SHORT $L77079
$L77080:

; 756  : 			return FALSE;

  00f4d	33 c0		 xor	 eax, eax
  00f4f	e9 16 01 00 00	 jmp	 $L77070
$L77079:

; 757  : 		else
; 758  : 			sbut = &sbar->sbButtons[uItem];

  00f54	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  00f57	6b c9 30	 imul	 ecx, 48			; 00000030H
  00f5a	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00f5d	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  00f61	89 45 fc	 mov	 DWORD PTR _sbut$[ebp], eax

; 759  : 	}
; 760  : 	else if(fByCmd == TRUE)

  00f64	eb 26		 jmp	 SHORT $L77082
$L77075:
  00f66	83 7d 14 01	 cmp	 DWORD PTR _fByCmd$[ebp], 1
  00f6a	75 20		 jne	 SHORT $L77082

; 761  : 	{
; 762  : 		//button from command identifier
; 763  : 		if(!(sbut = GetButtonFromId(sbar, uItem)))

  00f6c	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  00f6f	51		 push	 ecx
  00f70	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  00f73	52		 push	 edx
  00f74	e8 00 00 00 00	 call	 _GetButtonFromId
  00f79	83 c4 08	 add	 esp, 8
  00f7c	89 45 fc	 mov	 DWORD PTR _sbut$[ebp], eax
  00f7f	83 7d fc 00	 cmp	 DWORD PTR _sbut$[ebp], 0
  00f83	75 07		 jne	 SHORT $L77082

; 764  : 			return FALSE;

  00f85	33 c0		 xor	 eax, eax
  00f87	e9 de 00 00 00	 jmp	 $L77070
$L77082:

; 765  : 	}
; 766  : 
; 767  : 	if(psb->fMask & SBBF_TYPE)			sbut->uButType   = psb->uButType;

  00f8c	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  00f8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f91	83 e1 01	 and	 ecx, 1
  00f94	74 0c		 je	 SHORT $L77085
  00f96	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  00f99	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  00f9c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f9f	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L77085:

; 768  : 	if(psb->fMask & SBBF_STATE)			sbut->uState	 = psb->uState;

  00fa2	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  00fa5	8b 02		 mov	 eax, DWORD PTR [edx]
  00fa7	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00fac	74 0c		 je	 SHORT $L77086
  00fae	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00fb1	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  00fb4	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00fb7	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L77086:

; 769  : 	if(psb->fMask & SBBF_ID)			sbut->uCmdId     = psb->uCmdId;

  00fba	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  00fbd	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fbf	83 e2 02	 and	 edx, 2
  00fc2	74 0c		 je	 SHORT $L77087
  00fc4	8b 45 fc	 mov	 eax, DWORD PTR _sbut$[ebp]
  00fc7	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  00fca	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00fcd	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L77087:

; 770  : 	if(psb->fMask & SBBF_SIZE)			sbut->nSize		 = psb->nSize;

  00fd0	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  00fd3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd5	83 e1 08	 and	 ecx, 8
  00fd8	74 0c		 je	 SHORT $L77088
  00fda	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  00fdd	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  00fe0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00fe3	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$L77088:

; 771  : 	if(psb->fMask & SBBF_PLACEMENT)		sbut->uPlacement = psb->uPlacement;

  00fe6	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  00fe9	8b 02		 mov	 eax, DWORD PTR [edx]
  00feb	83 e0 04	 and	 eax, 4
  00fee	74 0c		 je	 SHORT $L77089
  00ff0	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  00ff3	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  00ff6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00ff9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$L77089:

; 772  : 	if(psb->fMask & SBBF_BITMAP)		sbut->hBmp		 = psb->hBmp;

  00ffc	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  00fff	8b 11		 mov	 edx, DWORD PTR [ecx]
  01001	83 e2 10	 and	 edx, 16			; 00000010H
  01004	74 0c		 je	 SHORT $L77090
  01006	8b 45 fc	 mov	 eax, DWORD PTR _sbut$[ebp]
  01009	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  0100c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0100f	89 50 18	 mov	 DWORD PTR [eax+24], edx
$L77090:

; 773  : 	if(psb->fMask & SBBF_ENHMETAFILE)	sbut->hEmf		 = psb->hEmf;

  01012	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  01015	8b 08		 mov	 ecx, DWORD PTR [eax]
  01017	83 e1 20	 and	 ecx, 32			; 00000020H
  0101a	74 0c		 je	 SHORT $L77091
  0101c	8b 55 fc	 mov	 edx, DWORD PTR _sbut$[ebp]
  0101f	8b 45 18	 mov	 eax, DWORD PTR _psb$[ebp]
  01022	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01025	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$L77091:

; 774  : 	if(psb->fMask & SBBF_CURSOR)		sbut->hCurs		 = psb->hCurs;

  01028	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  0102b	8b 02		 mov	 eax, DWORD PTR [edx]
  0102d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01032	74 0c		 je	 SHORT $L77092
  01034	8b 4d fc	 mov	 ecx, DWORD PTR _sbut$[ebp]
  01037	8b 55 18	 mov	 edx, DWORD PTR _psb$[ebp]
  0103a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0103d	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$L77092:

; 775  : 	
; 776  : 	if(psb->fMask & SBBF_BUTMINMAX)

  01040	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  01043	8b 11		 mov	 edx, DWORD PTR [ecx]
  01045	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  0104b	74 18		 je	 SHORT $L77093

; 777  : 	{
; 778  : 		sbut->nMinSize = psb->nMinSize;

  0104d	8b 45 fc	 mov	 eax, DWORD PTR _sbut$[ebp]
  01050	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  01053	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  01056	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 779  : 		sbut->nMaxSize = psb->nMaxSize;

  01059	8b 45 fc	 mov	 eax, DWORD PTR _sbut$[ebp]
  0105c	8b 4d 18	 mov	 ecx, DWORD PTR _psb$[ebp]
  0105f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  01062	89 50 2c	 mov	 DWORD PTR [eax+44], edx
$L77093:

; 780  : 	}
; 781  : 
; 782  : 	return TRUE;

  01065	b8 01 00 00 00	 mov	 eax, 1
$L77070:

; 783  : }

  0106a	8b e5		 mov	 esp, ebp
  0106c	5d		 pop	 ebp
  0106d	c2 14 00	 ret	 20			; 00000014H
_CoolSB_ModifyButton@20 ENDP
; Function compile flags: /Odt
_i$ = -4						; size = 4
_sbar$ = 8						; size = 4
_uCmdId$ = 12						; size = 4
_GetButtonFromId PROC NEAR

; 721  : {

  01070	55		 push	 ebp
  01071	8b ec		 mov	 ebp, esp
  01073	51		 push	 ecx

; 722  : 	int i;
; 723  : 	for(i = 0; i < sbar->nButtons; i++)

  01074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0107b	eb 09		 jmp	 SHORT $L77056
$L77057:
  0107d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01080	83 c0 01	 add	 eax, 1
  01083	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L77056:
  01086	8b 4d 08	 mov	 ecx, DWORD PTR _sbar$[ebp]
  01089	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0108c	3b 91 2c 03 00
	00		 cmp	 edx, DWORD PTR [ecx+812]
  01092	7d 23		 jge	 SHORT $L77058

; 724  : 	{
; 725  : 		if(sbar->sbButtons[i].uCmdId == uCmdId)

  01094	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01097	6b c0 30	 imul	 eax, 48			; 00000030H
  0109a	8b 4d 08	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0109d	8b 54 01 34	 mov	 edx, DWORD PTR [ecx+eax+52]
  010a1	3b 55 0c	 cmp	 edx, DWORD PTR _uCmdId$[ebp]
  010a4	75 0f		 jne	 SHORT $L77059

; 726  : 			return &sbar->sbButtons[i];

  010a6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  010a9	6b c0 30	 imul	 eax, 48			; 00000030H
  010ac	8b 4d 08	 mov	 ecx, DWORD PTR _sbar$[ebp]
  010af	8d 44 01 2c	 lea	 eax, DWORD PTR [ecx+eax+44]
  010b3	eb 04		 jmp	 SHORT $L77054
$L77059:

; 727  : 	}

  010b5	eb c6		 jmp	 SHORT $L77057
$L77058:

; 728  : 
; 729  : 	return 0;

  010b7	33 c0		 xor	 eax, eax
$L77054:

; 730  : }

  010b9	8b e5		 mov	 esp, ebp
  010bb	5d		 pop	 ebp
  010bc	c3		 ret	 0
_GetButtonFromId ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_RemoveButton@16
; Function compile flags: /Odt
_TEXT	SEGMENT
_i$ = -8						; size = 4
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_uItem$ = 16						; size = 4
_fByCmd$ = 20						; size = 4
_CoolSB_RemoveButton@16 PROC NEAR

; 786  : {

  010c0	55		 push	 ebp
  010c1	8b ec		 mov	 ebp, esp
  010c3	83 ec 08	 sub	 esp, 8
  010c6	56		 push	 esi
  010c7	57		 push	 edi

; 787  : 	int i;
; 788  : 	SCROLLBAR *sbar;
; 789  : 
; 790  : 	//find if this window is CoolScroll enabled
; 791  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  010c8	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  010cb	50		 push	 eax
  010cc	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  010cf	51		 push	 ecx
  010d0	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  010d5	83 c4 08	 add	 esp, 8
  010d8	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  010db	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  010df	75 07		 jne	 SHORT $L77105

; 792  : 		return FALSE;

  010e1	33 c0		 xor	 eax, eax
  010e3	e9 e5 00 00 00	 jmp	 $L77102
$L77105:

; 793  : 
; 794  : 	//find the button to modify, depending on if we
; 795  : 	//are modifying by position or command id
; 796  : 	if(fByCmd == FALSE && ((int)uItem < 0 || (int)uItem >= (UINT)sbar->nButtons))

  010e8	83 7d 14 00	 cmp	 DWORD PTR _fByCmd$[ebp], 0
  010ec	75 1b		 jne	 SHORT $L77109
  010ee	83 7d 10 00	 cmp	 DWORD PTR _uItem$[ebp], 0
  010f2	7c 0e		 jl	 SHORT $L77110
  010f4	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  010f7	8b 45 10	 mov	 eax, DWORD PTR _uItem$[ebp]
  010fa	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  01100	72 07		 jb	 SHORT $L77109
$L77110:

; 797  : 	{
; 798  : 		return FALSE;

  01102	33 c0		 xor	 eax, eax
  01104	e9 c4 00 00 00	 jmp	 $L77102
$L77109:

; 799  : 	}
; 800  : 	else if(fByCmd == TRUE)

  01109	83 7d 14 01	 cmp	 DWORD PTR _fByCmd$[ebp], 1
  0110d	75 4e		 jne	 SHORT $L77111

; 801  : 	{
; 802  : 		//find the button with the specified command id
; 803  : 		for(i = 0; i < sbar->nButtons; i++)

  0110f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01116	eb 09		 jmp	 SHORT $L77113
$L77114:
  01118	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0111b	83 c1 01	 add	 ecx, 1
  0111e	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L77113:
  01121	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01124	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  01127	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  0112d	7d 1c		 jge	 SHORT $L77115

; 804  : 		{
; 805  : 			if(sbar->sbButtons[i].uCmdId == uItem)

  0112f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  01132	6b c9 30	 imul	 ecx, 48			; 00000030H
  01135	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01138	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  0113c	3b 45 10	 cmp	 eax, DWORD PTR _uItem$[ebp]
  0113f	75 08		 jne	 SHORT $L77116

; 806  : 			{
; 807  : 				//change the id to an index
; 808  : 				uItem = i;

  01141	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  01144	89 4d 10	 mov	 DWORD PTR _uItem$[ebp], ecx

; 809  : 				break;

  01147	eb 02		 jmp	 SHORT $L77115
$L77116:

; 810  : 			}
; 811  : 		}

  01149	eb cd		 jmp	 SHORT $L77114
$L77115:

; 812  : 
; 813  : 		//if we failed to find the button...
; 814  : 		if(i == sbar->nButtons) return FALSE;

  0114b	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0114e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  01151	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  01157	75 04		 jne	 SHORT $L77111
  01159	33 c0		 xor	 eax, eax
  0115b	eb 70		 jmp	 SHORT $L77102
$L77111:

; 815  : 	}
; 816  : 
; 817  : 	//remove the button!
; 818  : 	for(i = uItem; i < sbar->nButtons - 1; i++)

  0115d	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  01160	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  01163	eb 09		 jmp	 SHORT $L77118
$L77119:
  01165	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  01168	83 c2 01	 add	 edx, 1
  0116b	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L77118:
  0116e	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  01171	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  01177	83 e9 01	 sub	 ecx, 1
  0117a	39 4d f8	 cmp	 DWORD PTR _i$[ebp], ecx
  0117d	7d 26		 jge	 SHORT $L77120

; 819  : 	{
; 820  : 		sbar->sbButtons[i] = sbar->sbButtons[i+1];

  0117f	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  01182	83 c2 01	 add	 edx, 1
  01185	6b d2 30	 imul	 edx, 48			; 00000030H
  01188	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0118b	8d 74 10 2c	 lea	 esi, DWORD PTR [eax+edx+44]
  0118f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  01192	6b c9 30	 imul	 ecx, 48			; 00000030H
  01195	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01198	8d 7c 0a 2c	 lea	 edi, DWORD PTR [edx+ecx+44]
  0119c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  011a1	f3 a5		 rep movsd

; 821  : 	}

  011a3	eb c0		 jmp	 SHORT $L77119
$L77120:

; 822  : 
; 823  : 	sbar->nButtons--;

  011a5	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  011a8	8b 88 2c 03 00
	00		 mov	 ecx, DWORD PTR [eax+812]
  011ae	83 e9 01	 sub	 ecx, 1
  011b1	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  011b4	89 8a 2c 03 00
	00		 mov	 DWORD PTR [edx+812], ecx

; 824  : 	
; 825  : 	RedrawNonClient(hwnd, TRUE);

  011ba	6a 01		 push	 1
  011bc	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  011bf	50		 push	 eax
  011c0	e8 00 00 00 00	 call	 _RedrawNonClient
  011c5	83 c4 08	 add	 esp, 8

; 826  : 
; 827  : 	return TRUE;

  011c8	b8 01 00 00 00	 mov	 eax, 1
$L77102:

; 828  : }

  011cd	5f		 pop	 edi
  011ce	5e		 pop	 esi
  011cf	8b e5		 mov	 esp, ebp
  011d1	5d		 pop	 ebp
  011d2	c2 10 00	 ret	 16			; 00000010H
_CoolSB_RemoveButton@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_GetButton@20
; Function compile flags: /Odt
_TEXT	SEGMENT
_sbar$ = -8						; size = 4
_sbut$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wSBflags$ = 12						; size = 4
_uItem$ = 16						; size = 4
_fByCmd$ = 20						; size = 4
_psb$ = 24						; size = 4
_CoolSB_GetButton@20 PROC NEAR

; 834  : {

  011e0	55		 push	 ebp
  011e1	8b ec		 mov	 ebp, esp
  011e3	83 ec 08	 sub	 esp, 8
  011e6	56		 push	 esi
  011e7	57		 push	 edi

; 835  : 	SCROLLBAR *sbar;
; 836  : 	SCROLLBUT *sbut;
; 837  : 
; 838  : 	if(!psb) return FALSE;

  011e8	83 7d 18 00	 cmp	 DWORD PTR _psb$[ebp], 0
  011ec	75 04		 jne	 SHORT $L77134
  011ee	33 c0		 xor	 eax, eax
  011f0	eb 7f		 jmp	 SHORT $L77131
$L77134:

; 839  : 
; 840  : 	//find if this window is CoolScroll enabled
; 841  : 	if(!(sbar = GetScrollBarFromHwnd(hwnd, wSBflags)))

  011f2	8b 45 0c	 mov	 eax, DWORD PTR _wSBflags$[ebp]
  011f5	50		 push	 eax
  011f6	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  011f9	51		 push	 ecx
  011fa	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  011ff	83 c4 08	 add	 esp, 8
  01202	89 45 f8	 mov	 DWORD PTR _sbar$[ebp], eax
  01205	83 7d f8 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01209	75 04		 jne	 SHORT $L77135

; 842  : 		return FALSE;

  0120b	33 c0		 xor	 eax, eax
  0120d	eb 62		 jmp	 SHORT $L77131
$L77135:

; 843  : 
; 844  : 	//find the button to modify, depending on if we
; 845  : 	//are modifying by position or command id
; 846  : 	if(fByCmd == FALSE)

  0120f	83 7d 14 00	 cmp	 DWORD PTR _fByCmd$[ebp], 0
  01213	75 2a		 jne	 SHORT $L77136

; 847  : 	{
; 848  : 		//button from position
; 849  : 		if((int)uItem < 0 || (int)uItem >= (UINT)sbar->nButtons)

  01215	83 7d 10 00	 cmp	 DWORD PTR _uItem$[ebp], 0
  01219	7c 0e		 jl	 SHORT $L77141
  0121b	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  0121e	8b 45 10	 mov	 eax, DWORD PTR _uItem$[ebp]
  01221	3b 82 2c 03 00
	00		 cmp	 eax, DWORD PTR [edx+812]
  01227	72 04		 jb	 SHORT $L77140
$L77141:

; 850  : 			return FALSE;

  01229	33 c0		 xor	 eax, eax
  0122b	eb 44		 jmp	 SHORT $L77131
$L77140:

; 851  : 		else
; 852  : 			sbut = &sbar->sbButtons[uItem];

  0122d	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  01230	6b c9 30	 imul	 ecx, 48			; 00000030H
  01233	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  01236	8d 44 0a 2c	 lea	 eax, DWORD PTR [edx+ecx+44]
  0123a	89 45 fc	 mov	 DWORD PTR _sbut$[ebp], eax

; 853  : 	}
; 854  : 	else if(fByCmd == TRUE)

  0123d	eb 23		 jmp	 SHORT $L77143
$L77136:
  0123f	83 7d 14 01	 cmp	 DWORD PTR _fByCmd$[ebp], 1
  01243	75 1d		 jne	 SHORT $L77143

; 855  : 	{
; 856  : 		//button from command identifier
; 857  : 		if(!(sbut = GetButtonFromId(sbar, uItem)))

  01245	8b 4d 10	 mov	 ecx, DWORD PTR _uItem$[ebp]
  01248	51		 push	 ecx
  01249	8b 55 f8	 mov	 edx, DWORD PTR _sbar$[ebp]
  0124c	52		 push	 edx
  0124d	e8 00 00 00 00	 call	 _GetButtonFromId
  01252	83 c4 08	 add	 esp, 8
  01255	89 45 fc	 mov	 DWORD PTR _sbut$[ebp], eax
  01258	83 7d fc 00	 cmp	 DWORD PTR _sbut$[ebp], 0
  0125c	75 04		 jne	 SHORT $L77143

; 858  : 			return FALSE;

  0125e	33 c0		 xor	 eax, eax
  01260	eb 0f		 jmp	 SHORT $L77131
$L77143:

; 859  : 	}
; 860  : 
; 861  : 	//copy them across
; 862  : 	*psb = *sbut;

  01262	8b 75 fc	 mov	 esi, DWORD PTR _sbut$[ebp]
  01265	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0126a	8b 7d 18	 mov	 edi, DWORD PTR _psb$[ebp]
  0126d	f3 a5		 rep movsd

; 863  : 
; 864  : 	return FALSE; 

  0126f	33 c0		 xor	 eax, eax
$L77131:

; 865  : }

  01271	5f		 pop	 edi
  01272	5e		 pop	 esi
  01273	8b e5		 mov	 esp, ebp
  01275	5d		 pop	 ebp
  01276	c2 14 00	 ret	 20			; 00000014H
_CoolSB_GetButton@20 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetSize@16
; Function compile flags: /Odt
_TEXT	SEGMENT
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_nLength$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_CoolSB_SetSize@16 PROC NEAR

; 880  : {

  01280	55		 push	 ebp
  01281	8b ec		 mov	 ebp, esp
  01283	51		 push	 ecx

; 881  : 	SCROLLBAR *sbar;
; 882  : 	
; 883  : 	if(nLength == 0 || nWidth == 0)

  01284	83 7d 10 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  01288	74 06		 je	 SHORT $L77157
  0128a	83 7d 14 00	 cmp	 DWORD PTR _nWidth$[ebp], 0
  0128e	75 07		 jne	 SHORT $L77156
$L77157:

; 884  : 		return FALSE;

  01290	33 c0		 xor	 eax, eax
  01292	e9 bd 00 00 00	 jmp	 $L77154
$L77156:

; 885  : 
; 886  : 	if(nLength < -8 || nWidth < -8)

  01297	83 7d 10 f8	 cmp	 DWORD PTR _nLength$[ebp], -8 ; fffffff8H
  0129b	7c 06		 jl	 SHORT $L77159
  0129d	83 7d 14 f8	 cmp	 DWORD PTR _nWidth$[ebp], -8 ; fffffff8H
  012a1	7d 07		 jge	 SHORT $L77158
$L77159:

; 887  : 		return FALSE;

  012a3	33 c0		 xor	 eax, eax
  012a5	e9 aa 00 00 00	 jmp	 $L77154
$L77158:

; 888  : 
; 889  : 	if(nLength > 256 || nWidth > 256)

  012aa	81 7d 10 00 01
	00 00		 cmp	 DWORD PTR _nLength$[ebp], 256 ; 00000100H
  012b1	7f 09		 jg	 SHORT $L77161
  012b3	81 7d 14 00 01
	00 00		 cmp	 DWORD PTR _nWidth$[ebp], 256 ; 00000100H
  012ba	7e 07		 jle	 SHORT $L77160
$L77161:

; 890  : 		return FALSE;

  012bc	33 c0		 xor	 eax, eax
  012be	e9 91 00 00 00	 jmp	 $L77154
$L77160:

; 891  : 
; 892  : 	if(!GetScrollWndFromHwnd(hwnd))

  012c3	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  012c6	50		 push	 eax
  012c7	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  012cc	83 c4 04	 add	 esp, 4
  012cf	85 c0		 test	 eax, eax
  012d1	75 04		 jne	 SHORT $L77162

; 893  : 		return FALSE;

  012d3	33 c0		 xor	 eax, eax
  012d5	eb 7d		 jmp	 SHORT $L77154
$L77162:

; 894  : 
; 895  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 896  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  012d7	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  012db	74 06		 je	 SHORT $L77164
  012dd	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  012e1	75 29		 jne	 SHORT $L77163
$L77164:
  012e3	6a 00		 push	 0
  012e5	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  012e8	51		 push	 ecx
  012e9	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  012ee	83 c4 08	 add	 esp, 8
  012f1	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  012f4	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  012f8	74 12		 je	 SHORT $L77163

; 897  : 	{
; 898  : 		sbar->nArrowLength = nLength;

  012fa	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  012fd	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  01300	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 899  : 		sbar->nArrowWidth  = nWidth;

  01303	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  01306	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  01309	89 51 28	 mov	 DWORD PTR [ecx+40], edx
$L77163:

; 900  : 	}
; 901  : 
; 902  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 903  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  0130c	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  01310	74 06		 je	 SHORT $L77166
  01312	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01316	75 29		 jne	 SHORT $L77165
$L77166:
  01318	6a 01		 push	 1
  0131a	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0131d	50		 push	 eax
  0131e	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01323	83 c4 08	 add	 esp, 8
  01326	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01329	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  0132d	74 12		 je	 SHORT $L77165

; 904  : 	{
; 905  : 		sbar->nArrowLength = nLength;

  0132f	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  01332	8b 55 10	 mov	 edx, DWORD PTR _nLength$[ebp]
  01335	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 906  : 		sbar->nArrowWidth  = nWidth;

  01338	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0133b	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0133e	89 48 28	 mov	 DWORD PTR [eax+40], ecx
$L77165:

; 907  : 	}
; 908  : 
; 909  : 	RedrawNonClient(hwnd, TRUE);

  01341	6a 01		 push	 1
  01343	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  01346	52		 push	 edx
  01347	e8 00 00 00 00	 call	 _RedrawNonClient
  0134c	83 c4 08	 add	 esp, 8

; 910  : 
; 911  : 	return TRUE;

  0134f	b8 01 00 00 00	 mov	 eax, 1
$L77154:

; 912  : }

  01354	8b e5		 mov	 esp, ebp
  01356	5d		 pop	 ebp
  01357	c2 10 00	 ret	 16			; 00000010H
_CoolSB_SetSize@16 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetStyle@12
; Function compile flags: /Odt
_TEXT	SEGMENT
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_nStyle$ = 16						; size = 4
_CoolSB_SetStyle@12 PROC NEAR

; 921  : {

  01360	55		 push	 ebp
  01361	8b ec		 mov	 ebp, esp
  01363	51		 push	 ecx

; 922  : 	SCROLLBAR *sbar;
; 923  : 
; 924  : 	if(!GetScrollWndFromHwnd(hwnd))

  01364	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  01367	50		 push	 eax
  01368	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  0136d	83 c4 04	 add	 esp, 4
  01370	85 c0		 test	 eax, eax
  01372	75 04		 jne	 SHORT $L77175

; 925  : 		return FALSE;

  01374	33 c0		 xor	 eax, eax
  01376	eb 71		 jmp	 SHORT $L77173
$L77175:

; 926  : 
; 927  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 928  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  01378	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  0137c	74 06		 je	 SHORT $L77177
  0137e	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01382	75 23		 jne	 SHORT $L77176
$L77177:
  01384	6a 00		 push	 0
  01386	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  01389	51		 push	 ecx
  0138a	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  0138f	83 c4 08	 add	 esp, 8
  01392	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01395	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01399	74 0c		 je	 SHORT $L77176

; 929  : 	{
; 930  : 		sbar->fFlatScrollbar = nStyle;

  0139b	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0139e	8b 45 10	 mov	 eax, DWORD PTR _nStyle$[ebp]
  013a1	89 82 44 03 00
	00		 mov	 DWORD PTR [edx+836], eax
$L77176:

; 931  : 	}
; 932  : 
; 933  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 934  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  013a7	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  013ab	74 06		 je	 SHORT $L77179
  013ad	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  013b1	75 23		 jne	 SHORT $L77178
$L77179:
  013b3	6a 01		 push	 1
  013b5	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  013b8	51		 push	 ecx
  013b9	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  013be	83 c4 08	 add	 esp, 8
  013c1	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  013c4	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  013c8	74 0c		 je	 SHORT $L77178

; 935  : 	{
; 936  : 		sbar->fFlatScrollbar = nStyle;

  013ca	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  013cd	8b 45 10	 mov	 eax, DWORD PTR _nStyle$[ebp]
  013d0	89 82 44 03 00
	00		 mov	 DWORD PTR [edx+836], eax
$L77178:

; 937  : 	}
; 938  : 
; 939  : 	RedrawNonClient(hwnd, FALSE);

  013d6	6a 00		 push	 0
  013d8	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  013db	51		 push	 ecx
  013dc	e8 00 00 00 00	 call	 _RedrawNonClient
  013e1	83 c4 08	 add	 esp, 8

; 940  : 
; 941  : 	return TRUE;

  013e4	b8 01 00 00 00	 mov	 eax, 1
$L77173:

; 942  : }

  013e9	8b e5		 mov	 esp, ebp
  013eb	5d		 pop	 ebp
  013ec	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_SetStyle@12 ENDP
_TEXT	ENDS
PUBLIC	_CoolSB_SetThumbAlways@12
; Function compile flags: /Odt
_TEXT	SEGMENT
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_fThumbAlways$ = 16					; size = 4
_CoolSB_SetThumbAlways@12 PROC NEAR

; 950  : {

  013f0	55		 push	 ebp
  013f1	8b ec		 mov	 ebp, esp
  013f3	51		 push	 ecx

; 951  : 	SCROLLBAR *sbar;
; 952  : 
; 953  : 	if(!GetScrollWndFromHwnd(hwnd))

  013f4	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  013f7	50		 push	 eax
  013f8	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  013fd	83 c4 04	 add	 esp, 4
  01400	85 c0		 test	 eax, eax
  01402	75 07		 jne	 SHORT $L77188

; 954  : 		return FALSE;

  01404	33 c0		 xor	 eax, eax
  01406	e9 9d 00 00 00	 jmp	 $L77186
$L77188:

; 955  : 
; 956  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 957  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  0140b	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  0140f	74 06		 je	 SHORT $L77190
  01411	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  01415	75 39		 jne	 SHORT $L77189
$L77190:
  01417	6a 00		 push	 0
  01419	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0141c	51		 push	 ecx
  0141d	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01422	83 c4 08	 add	 esp, 8
  01425	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01428	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  0142c	74 22		 je	 SHORT $L77189

; 958  : 	{
; 959  : 		if(fThumbAlways)

  0142e	83 7d 10 00	 cmp	 DWORD PTR _fThumbAlways$[ebp], 0
  01432	74 0f		 je	 SHORT $L77191

; 960  : 			sbar->fScrollFlags |=  CSBS_THUMBALWAYS;

  01434	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01437	8b 02		 mov	 eax, DWORD PTR [edx]
  01439	83 c8 04	 or	 eax, 4
  0143c	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0143f	89 01		 mov	 DWORD PTR [ecx], eax

; 961  : 		else

  01441	eb 0d		 jmp	 SHORT $L77189
$L77191:

; 962  : 			sbar->fScrollFlags &= ~CSBS_THUMBALWAYS;

  01443	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01446	8b 02		 mov	 eax, DWORD PTR [edx]
  01448	83 e0 fb	 and	 eax, -5			; fffffffbH
  0144b	8b 4d fc	 mov	 ecx, DWORD PTR _sbar$[ebp]
  0144e	89 01		 mov	 DWORD PTR [ecx], eax
$L77189:

; 963  : 	}
; 964  : 
; 965  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 966  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  01450	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  01454	74 06		 je	 SHORT $L77194
  01456	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  0145a	75 39		 jne	 SHORT $L77193
$L77194:
  0145c	6a 01		 push	 1
  0145e	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  01461	52		 push	 edx
  01462	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  01467	83 c4 08	 add	 esp, 8
  0146a	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  0146d	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01471	74 22		 je	 SHORT $L77193

; 967  : 	{
; 968  : 		if(fThumbAlways)

  01473	83 7d 10 00	 cmp	 DWORD PTR _fThumbAlways$[ebp], 0
  01477	74 0f		 je	 SHORT $L77195

; 969  : 			sbar->fScrollFlags |=  CSBS_THUMBALWAYS;

  01479	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0147c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0147e	83 c9 04	 or	 ecx, 4
  01481	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01484	89 0a		 mov	 DWORD PTR [edx], ecx

; 970  : 		else

  01486	eb 0d		 jmp	 SHORT $L77193
$L77195:

; 971  : 			sbar->fScrollFlags &= ~CSBS_THUMBALWAYS;

  01488	8b 45 fc	 mov	 eax, DWORD PTR _sbar$[ebp]
  0148b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0148d	83 e1 fb	 and	 ecx, -5			; fffffffbH
  01490	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  01493	89 0a		 mov	 DWORD PTR [edx], ecx
$L77193:

; 972  : 	}
; 973  : 
; 974  : 	RedrawNonClient(hwnd, FALSE);

  01495	6a 00		 push	 0
  01497	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0149a	50		 push	 eax
  0149b	e8 00 00 00 00	 call	 _RedrawNonClient
  014a0	83 c4 08	 add	 esp, 8

; 975  : 
; 976  : 	return TRUE;

  014a3	b8 01 00 00 00	 mov	 eax, 1
$L77186:

; 977  : }

  014a8	8b e5		 mov	 esp, ebp
  014aa	5d		 pop	 ebp
  014ab	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_SetThumbAlways@12 ENDP
; Function compile flags: /Odt
_sbar$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_wBar$ = 12						; size = 4
_size$ = 16						; size = 4
_CoolSB_SetMinThumbSize@12 PROC NEAR

; 983  : {

  014b0	55		 push	 ebp
  014b1	8b ec		 mov	 ebp, esp
  014b3	51		 push	 ecx

; 984  : 	SCROLLBAR *sbar;
; 985  : 
; 986  : 	if(!GetScrollWndFromHwnd(hwnd))

  014b4	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  014b7	50		 push	 eax
  014b8	e8 00 00 00 00	 call	 _GetScrollWndFromHwnd
  014bd	83 c4 04	 add	 esp, 4
  014c0	85 c0		 test	 eax, eax
  014c2	75 04		 jne	 SHORT $L77205

; 987  : 		return FALSE;

  014c4	33 c0		 xor	 eax, eax
  014c6	eb 71		 jmp	 SHORT $L77203
$L77205:

; 988  : 
; 989  : 	if(size == -1)

  014c8	83 7d 10 ff	 cmp	 DWORD PTR _size$[ebp], -1
  014cc	75 08		 jne	 SHORT $L77206

; 990  : 		size = CoolSB_GetDefaultMinThumbSize();

  014ce	e8 00 00 00 00	 call	 _CoolSB_GetDefaultMinThumbSize@0
  014d3	89 45 10	 mov	 DWORD PTR _size$[ebp], eax
$L77206:

; 991  : 
; 992  : 	if((wBar == SB_HORZ || wBar == SB_BOTH) && 
; 993  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_HORZ)))

  014d6	83 7d 0c 00	 cmp	 DWORD PTR _wBar$[ebp], 0
  014da	74 06		 je	 SHORT $L77208
  014dc	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  014e0	75 23		 jne	 SHORT $L77207
$L77208:
  014e2	6a 00		 push	 0
  014e4	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  014e7	51		 push	 ecx
  014e8	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  014ed	83 c4 08	 add	 esp, 8
  014f0	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  014f3	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  014f7	74 0c		 je	 SHORT $L77207

; 994  : 	{
; 995  : 		sbar->nMinThumbSize = size;

  014f9	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  014fc	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  014ff	89 82 48 03 00
	00		 mov	 DWORD PTR [edx+840], eax
$L77207:

; 996  : 	}
; 997  : 
; 998  : 	if((wBar == SB_VERT || wBar == SB_BOTH) && 
; 999  : 	   (sbar = GetScrollBarFromHwnd(hwnd, SB_VERT)))

  01505	83 7d 0c 01	 cmp	 DWORD PTR _wBar$[ebp], 1
  01509	74 06		 je	 SHORT $L77210
  0150b	83 7d 0c 03	 cmp	 DWORD PTR _wBar$[ebp], 3
  0150f	75 23		 jne	 SHORT $L77209
$L77210:
  01511	6a 01		 push	 1
  01513	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  01516	51		 push	 ecx
  01517	e8 00 00 00 00	 call	 _GetScrollBarFromHwnd
  0151c	83 c4 08	 add	 esp, 8
  0151f	89 45 fc	 mov	 DWORD PTR _sbar$[ebp], eax
  01522	83 7d fc 00	 cmp	 DWORD PTR _sbar$[ebp], 0
  01526	74 0c		 je	 SHORT $L77209

; 1000 : 	{
; 1001 : 		sbar->nMinThumbSize = size;

  01528	8b 55 fc	 mov	 edx, DWORD PTR _sbar$[ebp]
  0152b	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  0152e	89 82 48 03 00
	00		 mov	 DWORD PTR [edx+840], eax
$L77209:

; 1002 : 	}
; 1003 : 
; 1004 : 	return TRUE;

  01534	b8 01 00 00 00	 mov	 eax, 1
$L77203:

; 1005 : }

  01539	8b e5		 mov	 esp, ebp
  0153b	5d		 pop	 ebp
  0153c	c2 0c 00	 ret	 12			; 0000000cH
_CoolSB_SetMinThumbSize@12 ENDP
_TEXT	ENDS
END
