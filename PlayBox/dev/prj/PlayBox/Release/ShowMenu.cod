; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\ShowMenu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?SetMenuDrawMode@BCMenu@@SAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?Escape@CDC@@UAEHHHPBDPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TextOutA@CDC@@UAEHHHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtVisible@CDC@@UBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsStoring@CArchive@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CArray@HAAH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckMenuItem@CMenu@@QAEIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnableMenuItem@CMenu@@QAEIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreatePopupMenu@CMenu@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPrinting@CDC@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG198141 DB	'MenuText', 00H
	ORG $+3
$SG198142 DB	'MenuBk', 00H
	ORG $+1
$SG198143 DB	'MenuLeftBk', 00H
	ORG $+1
$SG198144 DB	'MenuSelBk', 00H
	ORG $+2
$SG198190 DB	'-', 00H
	ORG $+2
$SG198209 DB	'&', 00H
	ORG $+2
$SG198231 DB	'&', 00H
CONST	ENDS
PUBLIC	?SetMenuDrawMode@BCMenu@@SAXI@Z			; BCMenu::SetMenuDrawMode
PUBLIC	??0CShowMenu@@QAE@PAVCWnd@@KK@Z			; CShowMenu::CShowMenu
EXTRN	?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z:NEAR	; BCMenu::GetSubMenu
EXTRN	?SetMenuItemBkColor@BCMenu@@QAEXK@Z:NEAR	; BCMenu::SetMenuItemBkColor
EXTRN	?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z:NEAR	; BCMenu::SetMenuItemBitmapBkColor
EXTRN	?SetTextColor@BCMenu@@QAEXK@Z:NEAR		; BCMenu::SetTextColor
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0BCMenu@@QAE@XZ:NEAR				; BCMenu::BCMenu
EXTRN	??1BCMenu@@UAE@XZ:NEAR				; BCMenu::~BCMenu
EXTRN	?AfxGetUIManager@@YAPAVIUIManager@@XZ:NEAR	; AfxGetUIManager
xdata$x	SEGMENT
$T198936 DD	0ffffffffH
	DD	FLAT:$L198929
$T198933 DD	019930520H
	DD	01H
	DD	FLAT:$T198936
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\showmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv69 = -24						; size = 4
_this$ = -20						; size = 4
_pSkinMgr$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pParent$ = 8						; size = 4
_dwMenuID$ = 12						; size = 4
_dwSubItem$ = 16					; size = 4
??0CShowMenu@@QAE@PAVCWnd@@KK@Z PROC NEAR		; CShowMenu::CShowMenu
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CShowMenu@@QAE@PAVCWnd@@KK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 6    : 
; 7    : 	ISkinMgr* pSkinMgr = AfxGetUIManager()->UIGetSkinMgr();

  0002d	e8 00 00 00 00	 call	 ?AfxGetUIManager@@YAPAVIUIManager@@XZ ; AfxGetUIManager
  00032	89 45 e8	 mov	 DWORD PTR tv69[ebp], eax
  00035	8b 45 e8	 mov	 eax, DWORD PTR tv69[ebp]
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	8b 4d e8	 mov	 ecx, DWORD PTR tv69[ebp]
  0003d	ff 52 28	 call	 DWORD PTR [edx+40]
  00040	89 45 f0	 mov	 DWORD PTR _pSkinMgr$[ebp], eax

; 8    : 	
; 9    : 	m_bcMenu.SetTextColor( pSkinMgr->GetColor( "MenuText") );

  00043	68 00 00 00 00	 push	 OFFSET FLAT:$SG198141
  00048	8b 45 f0	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  00050	ff 52 08	 call	 DWORD PTR [edx+8]
  00053	50		 push	 eax
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?SetTextColor@BCMenu@@QAEXK@Z ; BCMenu::SetTextColor

; 10   : 	m_bcMenu.SetMenuItemBkColor( pSkinMgr->GetColor( "MenuBk") );

  0005c	68 00 00 00 00	 push	 OFFSET FLAT:$SG198142
  00061	8b 45 f0	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  00064	8b 10		 mov	 edx, DWORD PTR [eax]
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  00069	ff 52 08	 call	 DWORD PTR [edx+8]
  0006c	50		 push	 eax
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 11   : 	m_bcMenu.SetMenuItemBitmapBkColor(pSkinMgr->GetColor( "MenuLeftBk"));

  00075	68 00 00 00 00	 push	 OFFSET FLAT:$SG198143
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  0007d	8b 10		 mov	 edx, DWORD PTR [eax]
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  00082	ff 52 08	 call	 DWORD PTR [edx+8]
  00085	50		 push	 eax
  00086	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor

; 12   : 	m_bcMenu.m_menuItemSelectBKColor  = pSkinMgr->GetColor( "MenuSelBk");

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:$SG198144
  00093	8b 45 f0	 mov	 eax, DWORD PTR _pSkinMgr$[ebp]
  00096	8b 10		 mov	 edx, DWORD PTR [eax]
  00098	8b 4d f0	 mov	 ecx, DWORD PTR _pSkinMgr$[ebp]
  0009b	ff 52 08	 call	 DWORD PTR [edx+8]
  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 13   : 	m_pWnd = pParent;

  000a4	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 45 08	 mov	 eax, DWORD PTR _pParent$[ebp]
  000aa	89 42 68	 mov	 DWORD PTR [edx+104], eax

; 14   : 	m_bcMenu.SetMenuDrawMode(1);

  000ad	6a 01		 push	 1
  000af	e8 00 00 00 00	 call	 ?SetMenuDrawMode@BCMenu@@SAXI@Z ; BCMenu::SetMenuDrawMode
  000b4	83 c4 04	 add	 esp, 4

; 15   : 	m_bcMenu.LoadMenu(dwMenuID);

  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMenuID$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	ff 50 1c	 call	 DWORD PTR [eax+28]

; 16   : 	m_pMenu	= (BCMenu*)(m_bcMenu.GetSubMenu(dwSubItem));

  000c6	8b 4d 10	 mov	 ecx, DWORD PTR _dwSubItem$[ebp]
  000c9	51		 push	 ecx
  000ca	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  000d2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	89 42 64	 mov	 DWORD PTR [edx+100], eax

; 17   : }

  000d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000df	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L198929:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1BCMenu@@UAE@XZ	; BCMenu::~BCMenu
__ehhandler$??0CShowMenu@@QAE@PAVCWnd@@KK@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198933
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CShowMenu@@QAE@PAVCWnd@@KK@Z ENDP			; CShowMenu::CShowMenu
EXTRN	?original_drawmode@BCMenu@@1IA:DWORD		; BCMenu::original_drawmode
EXTRN	?xp_drawmode@BCMenu@@1IA:DWORD			; BCMenu::xp_drawmode
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ?SetMenuDrawMode@BCMenu@@SAXI@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?SetMenuDrawMode@BCMenu@@SAXI@Z PROC NEAR		; BCMenu::SetMenuDrawMode, COMDAT

; 197  : 	static void SetMenuDrawMode(UINT mode){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 		BCMenu::original_drawmode=mode;

  00003	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?original_drawmode@BCMenu@@1IA, eax ; BCMenu::original_drawmode

; 199  : 		BCMenu::xp_drawmode=mode;

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0000e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?xp_drawmode@BCMenu@@1IA, ecx ; BCMenu::xp_drawmode

; 200  : 	};

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?SetMenuDrawMode@BCMenu@@SAXI@Z ENDP			; BCMenu::SetMenuDrawMode
_TEXT	ENDS
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	?CreatePopupMenu@CShowMenu@@QAEXXZ		; CShowMenu::CreatePopupMenu
PUBLIC	?CreatePopupMenu@CMenu@@QAEHXZ			; CMenu::CreatePopupMenu
xdata$x	SEGMENT
$T198949 DD	0ffffffffH
	DD	FLAT:$L198945
$T198947 DD	019930520H
	DD	01H
	DD	FLAT:$T198949
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\showmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -28						; size = 4
_this$ = -24						; size = 4
$T198942 = -20						; size = 4
$T198941 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreatePopupMenu@CShowMenu@@QAEXXZ PROC NEAR		; CShowMenu::CreatePopupMenu
; _this$ = ecx

; 20   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	6a ff		 push	 -1
  00105	68 00 00 00 00	 push	 __ehhandler$?CreatePopupMenu@CShowMenu@@QAEXXZ
  0010a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00110	50		 push	 eax
  00111	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00118	83 ec 10	 sub	 esp, 16			; 00000010H
  0011b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	m_pMenu = new BCMenu();

  0011e	6a 64		 push	 100			; 00000064H
  00120	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00125	89 45 ec	 mov	 DWORD PTR $T198942[ebp], eax
  00128	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0012f	83 7d ec 00	 cmp	 DWORD PTR $T198942[ebp], 0
  00133	74 0d		 je	 SHORT $L198943
  00135	8b 4d ec	 mov	 ecx, DWORD PTR $T198942[ebp]
  00138	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  0013d	89 45 e4	 mov	 DWORD PTR tv72[ebp], eax
  00140	eb 07		 jmp	 SHORT $L198944
$L198943:
  00142	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L198944:
  00149	8b 45 e4	 mov	 eax, DWORD PTR tv72[ebp]
  0014c	89 45 f0	 mov	 DWORD PTR $T198941[ebp], eax
  0014f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00156	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	8b 55 f0	 mov	 edx, DWORD PTR $T198941[ebp]
  0015c	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 22   : 	m_pMenu->CreatePopupMenu();

  0015f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00162	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00165	e8 00 00 00 00	 call	 ?CreatePopupMenu@CMenu@@QAEHXZ ; CMenu::CreatePopupMenu

; 23   : }

  0016a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198945:
  00012	8b 45 ec	 mov	 eax, DWORD PTR $T198942[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0001b	c3		 ret	 0
__ehhandler$?CreatePopupMenu@CShowMenu@@QAEXXZ:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198947
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CreatePopupMenu@CShowMenu@@QAEXXZ ENDP			; CShowMenu::CreatePopupMenu
PUBLIC	?DeletePopupItem@CShowMenu@@QAEXH@Z		; CShowMenu::DeletePopupItem
EXTRN	?DeleteMenu@BCMenu@@QAEHII@Z:NEAR		; BCMenu::DeleteMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?DeletePopupItem@CShowMenu@@QAEXH@Z PROC NEAR		; CShowMenu::DeletePopupItem
; _this$ = ecx

; 26   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	51		 push	 ecx
  00184	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	m_pMenu->DeleteMenu(pos,MF_BYPOSITION);

  00187	68 00 04 00 00	 push	 1024			; 00000400H
  0018c	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0018f	50		 push	 eax
  00190	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00193	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00196	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 28   : }

  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c2 04 00	 ret	 4
?DeletePopupItem@CShowMenu@@QAEXH@Z ENDP		; CShowMenu::DeletePopupItem
_TEXT	ENDS
PUBLIC	?DeleteItem@CShowMenu@@QAEXK@Z			; CShowMenu::DeleteItem
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMenuItemID$ = 8					; size = 4
?DeleteItem@CShowMenu@@QAEXK@Z PROC NEAR		; CShowMenu::DeleteItem
; _this$ = ecx

; 30   : {

  001b0	55		 push	 ebp
  001b1	8b ec		 mov	 ebp, esp
  001b3	51		 push	 ecx
  001b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	m_pMenu->DeleteMenu( dwMenuItemID,MF_BYCOMMAND);

  001b7	6a 00		 push	 0
  001b9	8b 45 08	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  001bc	50		 push	 eax
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  001c3	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 32   : }

  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c2 04 00	 ret	 4
?DeleteItem@CShowMenu@@QAEXK@Z ENDP			; CShowMenu::DeleteItem
_TEXT	ENDS
PUBLIC	?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z	; CShowMenu::DeleteItem
EXTRN	?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z:NEAR ; BCMenu::DeleteMenu
EXTRN	?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:NEAR ; BCMenu::GetMenuText
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T198957 DD	0ffffffffH
	DD	FLAT:$L198953
$T198955 DD	019930520H
	DD	01H
	DD	FLAT:$T198957
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -20						; size = 4
_str$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwMenuItemID$ = 8					; size = 4
_sPos$ = 12						; size = 4
?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z PROC NEAR ; CShowMenu::DeleteItem
; _this$ = ecx

; 34   : {

  001d0	55		 push	 ebp
  001d1	8b ec		 mov	 ebp, esp
  001d3	6a ff		 push	 -1
  001d5	68 00 00 00 00	 push	 __ehhandler$?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z
  001da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  001e0	50		 push	 eax
  001e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  001e8	83 ec 08	 sub	 esp, 8
  001eb	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	CString str;

  001ee	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001f7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 36   : 	m_pMenu->GetMenuText(dwMenuItemID, str, MF_BYCOMMAND);

  001fe	6a 00		 push	 0
  00200	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  00203	50		 push	 eax
  00204	8b 4d 08	 mov	 ecx, DWORD PTR _dwMenuItemID$[ebp]
  00207	51		 push	 ecx
  00208	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  0020e	e8 00 00 00 00	 call	 ?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText

; 37   : 	m_pMenu->DeleteMenu((char*)(LPCSTR)str, sPos);

  00213	8b 45 0c	 mov	 eax, DWORD PTR _sPos$[ebp]
  00216	50		 push	 eax
  00217	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00220	50		 push	 eax
  00221	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00224	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00227	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ; BCMenu::DeleteMenu

; 38   : }

  0022c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00233	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00236	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0023c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0023f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L198953:
  00026	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00029	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z:
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198955
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DeleteItem@CShowMenu@@QAEXKW4BC_Seperator@@@Z ENDP	; CShowMenu::DeleteItem
PUBLIC	?DeleteItem@CShowMenu@@QAEXPBD@Z		; CShowMenu::DeleteItem
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pText$ = 8						; size = 4
?DeleteItem@CShowMenu@@QAEXPBD@Z PROC NEAR		; CShowMenu::DeleteItem
; _this$ = ecx

; 40   : {

  00250	55		 push	 ebp
  00251	8b ec		 mov	 ebp, esp
  00253	51		 push	 ecx
  00254	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	m_pMenu->DeleteMenu((char*)pText);

  00257	6a 00		 push	 0
  00259	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0025c	50		 push	 eax
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00260	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00263	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ; BCMenu::DeleteMenu

; 42   : }

  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c2 04 00	 ret	 4
?DeleteItem@CShowMenu@@QAEXPBD@Z ENDP			; CShowMenu::DeleteItem
_TEXT	ENDS
PUBLIC	?DisableItem@CShowMenu@@QAEXK@Z			; CShowMenu::DisableItem
PUBLIC	?EnableMenuItem@CMenu@@QAEIII@Z			; CMenu::EnableMenuItem
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMenuItemID$ = 8					; size = 4
?DisableItem@CShowMenu@@QAEXK@Z PROC NEAR		; CShowMenu::DisableItem
; _this$ = ecx

; 44   : {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	51		 push	 ecx
  00274	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	m_pMenu->EnableMenuItem(dwMenuItemID, MF_GRAYED);

  00277	6a 01		 push	 1
  00279	8b 45 08	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  0027c	50		 push	 eax
  0027d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00280	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00283	e8 00 00 00 00	 call	 ?EnableMenuItem@CMenu@@QAEIII@Z ; CMenu::EnableMenuItem

; 46   : }

  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c2 04 00	 ret	 4
?DisableItem@CShowMenu@@QAEXK@Z ENDP			; CShowMenu::DisableItem
_TEXT	ENDS
PUBLIC	?CheckItem@CShowMenu@@QAEXK@Z			; CShowMenu::CheckItem
PUBLIC	?CheckMenuItem@CMenu@@QAEIII@Z			; CMenu::CheckMenuItem
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMenuItemID$ = 8					; size = 4
?CheckItem@CShowMenu@@QAEXK@Z PROC NEAR			; CShowMenu::CheckItem
; _this$ = ecx

; 49   : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	51		 push	 ecx
  00294	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	m_pMenu->CheckMenuItem( dwMenuItemID,MF_BYCOMMAND|MF_CHECKED);

  00297	6a 08		 push	 8
  00299	8b 45 08	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  0029c	50		 push	 eax
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a0	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  002a3	e8 00 00 00 00	 call	 ?CheckMenuItem@CMenu@@QAEIII@Z ; CMenu::CheckMenuItem

; 51   : }

  002a8	8b e5		 mov	 esp, ebp
  002aa	5d		 pop	 ebp
  002ab	c2 04 00	 ret	 4
?CheckItem@CShowMenu@@QAEXK@Z ENDP			; CShowMenu::CheckItem
_TEXT	ENDS
PUBLIC	?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z		; CShowMenu::ShowMenu
EXTRN	?TrackPopupMenu@CMenu@@QAEHIHHPAVCWnd@@PBUtagRECT@@@Z:NEAR ; CMenu::TrackPopupMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_point$ = 8						; size = 4
?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z PROC NEAR	; CShowMenu::ShowMenu
; _this$ = ecx

; 54   : {

  002b0	55		 push	 ebp
  002b1	8b ec		 mov	 ebp, esp
  002b3	51		 push	 ecx
  002b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	m_pMenu->TrackPopupMenu(TPM_LEFTALIGN|TPM_RIGHTBUTTON,point.x,point.y,m_pWnd);

  002b7	6a 00		 push	 0
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  002bf	51		 push	 ecx
  002c0	8b 55 08	 mov	 edx, DWORD PTR _point$[ebp]
  002c3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002c6	50		 push	 eax
  002c7	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  002ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  002cc	52		 push	 edx
  002cd	6a 02		 push	 2
  002cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d2	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  002d5	e8 00 00 00 00	 call	 ?TrackPopupMenu@CMenu@@QAEHIHHPAVCWnd@@PBUtagRECT@@@Z ; CMenu::TrackPopupMenu

; 56   : }

  002da	8b e5		 mov	 esp, ebp
  002dc	5d		 pop	 ebp
  002dd	c2 04 00	 ret	 4
?ShowMenu@CShowMenu@@QAEXABVCPoint@@@Z ENDP		; CShowMenu::ShowMenu
_TEXT	ENDS
PUBLIC	?InsertSeperator@CShowMenu@@QAEXH@Z		; CShowMenu::InsertSeperator
EXTRN	?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z:NEAR		; BCMenu::InsertMenuA
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?InsertSeperator@CShowMenu@@QAEXH@Z PROC NEAR		; CShowMenu::InsertSeperator
; _this$ = ecx

; 59   : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	51		 push	 ecx
  002e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 60   : 	m_pMenu->InsertMenu( pos,MF_BYPOSITION|MF_SEPARATOR,0,"-");

  002e7	6a ff		 push	 -1
  002e9	68 00 00 00 00	 push	 OFFSET FLAT:$SG198190
  002ee	6a 00		 push	 0
  002f0	68 00 0c 00 00	 push	 3072			; 00000c00H
  002f5	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  002f8	50		 push	 eax
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002fc	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  002ff	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 61   : }

  00304	8b e5		 mov	 esp, ebp
  00306	5d		 pop	 ebp
  00307	c2 04 00	 ret	 4
?InsertSeperator@CShowMenu@@QAEXH@Z ENDP		; CShowMenu::InsertSeperator
_TEXT	ENDS
PUBLIC	?InsertMenuA@CShowMenu@@QAEXHKPBD@Z		; CShowMenu::InsertMenuA
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:NEAR
EXTRN	__imp_?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z:NEAR
EXTRN	__imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB:DWORD
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
xdata$x	SEGMENT
$T198980 DD	0ffffffffH
	DD	FLAT:$L198968
	DD	00H
	DD	FLAT:$L198969
	DD	01H
	DD	FLAT:$L198970
	DD	02H
	DD	FLAT:$L198971
	DD	03H
	DD	FLAT:$L198972
	DD	04H
	DD	FLAT:$L198973
$T198975 DD	019930520H
	DD	06H
	DD	FLAT:$T198980
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv160 = -216						; size = 4
tv65 = -212						; size = 4
tv158 = -208						; size = 4
tv75 = -204						; size = 4
tv156 = -200						; size = 4
tv81 = -196						; size = 4
_this$ = -192						; size = 4
$T198967 = -188						; size = 28
$T198966 = -160						; size = 28
$T198965 = -132						; size = 28
_strLeft$198202 = -104					; size = 28
_strRight$198204 = -76					; size = 28
_strInput$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_iPos$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pos$ = 8						; size = 4
_dwMenuItemID$ = 12					; size = 4
_pszMenuStr$ = 16					; size = 4
?InsertMenuA@CShowMenu@@QAEXHKPBD@Z PROC NEAR		; CShowMenu::InsertMenuA
; _this$ = ecx

; 64   : {

  00310	55		 push	 ebp
  00311	8b ec		 mov	 ebp, esp
  00313	6a ff		 push	 -1
  00315	68 00 00 00 00	 push	 __ehhandler$?InsertMenuA@CShowMenu@@QAEXHKPBD@Z
  0031a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00320	50		 push	 eax
  00321	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00328	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  0032e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00333	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00336	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	string strInput = pszMenuStr;

  0033c	8b 45 10	 mov	 eax, DWORD PTR _pszMenuStr$[ebp]
  0033f	50		 push	 eax
  00340	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00349	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 66   : 	
; 67   : 	int iPos  = -1;

  00350	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iPos$[ebp], -1
$L198200:

; 68   : 	
; 69   : 	while( (iPos = strInput.find('&',iPos+1)) != string::npos )

  00357	8b 4d f0	 mov	 ecx, DWORD PTR _iPos$[ebp]
  0035a	83 c1 01	 add	 ecx, 1
  0035d	51		 push	 ecx
  0035e	6a 26		 push	 38			; 00000026H
  00360	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00363	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
  00369	89 45 f0	 mov	 DWORD PTR _iPos$[ebp], eax
  0036c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00372	8b 45 f0	 mov	 eax, DWORD PTR _iPos$[ebp]
  00375	3b 02		 cmp	 eax, DWORD PTR [edx]
  00377	0f 84 2b 01 00
	00		 je	 $L198201

; 70   : 	{
; 71   : 		string strLeft = strInput.substr(0,iPos);

  0037d	8b 4d f0	 mov	 ecx, DWORD PTR _iPos$[ebp]
  00380	51		 push	 ecx
  00381	6a 00		 push	 0
  00383	8d 55 98	 lea	 edx, DWORD PTR _strLeft$198202[ebp]
  00386	52		 push	 edx
  00387	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0038a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00390	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 72   : 		string strRight = strInput.substr(iPos,strInput.length()-iPos+1);

  00394	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00397	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  0039d	2b 45 f0	 sub	 eax, DWORD PTR _iPos$[ebp]
  003a0	83 c0 01	 add	 eax, 1
  003a3	50		 push	 eax
  003a4	8b 45 f0	 mov	 eax, DWORD PTR _iPos$[ebp]
  003a7	50		 push	 eax
  003a8	8d 4d b4	 lea	 ecx, DWORD PTR _strRight$198204[ebp]
  003ab	51		 push	 ecx
  003ac	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  003af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  003b5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 73   : 		iPos++;

  003b9	8b 55 f0	 mov	 edx, DWORD PTR _iPos$[ebp]
  003bc	83 c2 01	 add	 edx, 1
  003bf	89 55 f0	 mov	 DWORD PTR _iPos$[ebp], edx

; 74   : 
; 75   : 		strInput = strLeft + string("&") + strRight;

  003c2	68 00 00 00 00	 push	 OFFSET FLAT:$SG198209
  003c7	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198965[ebp]
  003cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  003d3	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv81[ebp], eax
  003d9	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  003df	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv156[ebp], eax
  003e5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  003e9	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv156[ebp]
  003ef	51		 push	 ecx
  003f0	8d 55 98	 lea	 edx, DWORD PTR _strLeft$198202[ebp]
  003f3	52		 push	 edx
  003f4	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T198966[ebp]
  003fa	50		 push	 eax
  003fb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00400	83 c4 0c	 add	 esp, 12			; 0000000cH
  00403	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv75[ebp], eax
  00409	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv75[ebp]
  0040f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv158[ebp], ecx
  00415	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00419	8d 55 b4	 lea	 edx, DWORD PTR _strRight$198204[ebp]
  0041c	52		 push	 edx
  0041d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  00423	50		 push	 eax
  00424	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T198967[ebp]
  0042a	51		 push	 ecx
  0042b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00430	83 c4 0c	 add	 esp, 12			; 0000000cH
  00433	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00439	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0043f	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv160[ebp], edx
  00445	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00449	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv160[ebp]
  0044f	50		 push	 eax
  00450	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00453	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  00459	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0045d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T198967[ebp]
  00463	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00469	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0046d	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T198966[ebp]
  00473	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00479	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0047d	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198965[ebp]
  00483	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 76   : 	}

  00489	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0048d	8d 4d b4	 lea	 ecx, DWORD PTR _strRight$198204[ebp]
  00490	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00496	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0049a	8d 4d 98	 lea	 ecx, DWORD PTR _strLeft$198202[ebp]
  0049d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  004a3	e9 af fe ff ff	 jmp	 $L198200
$L198201:

; 77   : 
; 78   : 	m_pMenu->InsertMenu(pos,MF_BYPOSITION|MF_STRING,dwMenuItemID,strInput.c_str());

  004a8	6a ff		 push	 -1
  004aa	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  004ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  004b3	50		 push	 eax
  004b4	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMenuItemID$[ebp]
  004b7	51		 push	 ecx
  004b8	68 00 04 00 00	 push	 1024			; 00000400H
  004bd	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  004c0	52		 push	 edx
  004c1	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  004c7	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  004ca	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 79   : }

  004cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004d6	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  004d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  004df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004e9	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f1	8b e5		 mov	 esp, ebp
  004f3	5d		 pop	 ebp
  004f4	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L198968:
  00039	8d 4d d0	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0003c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198969:
  00042	8d 4d 98	 lea	 ecx, DWORD PTR _strLeft$198202[ebp]
  00045	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198970:
  0004b	8d 4d b4	 lea	 ecx, DWORD PTR _strRight$198204[ebp]
  0004e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198971:
  00054	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T198965[ebp]
  0005a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198972:
  00060	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T198966[ebp]
  00066	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198973:
  0006c	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T198967[ebp]
  00072	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?InsertMenuA@CShowMenu@@QAEXHKPBD@Z:
  00078	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198975
  0007d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertMenuA@CShowMenu@@QAEXHKPBD@Z ENDP		; CShowMenu::InsertMenuA
PUBLIC	?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z		; CShowMenu::InsertMenuA
xdata$x	SEGMENT
$T198996 DD	0ffffffffH
	DD	FLAT:$L198986
	DD	00H
	DD	FLAT:$L198987
	DD	01H
	DD	FLAT:$L198988
	DD	02H
	DD	FLAT:$L198989
	DD	03H
	DD	FLAT:$L198990
	DD	04H
	DD	FLAT:$L198991
$T198993 DD	019930520H
	DD	06H
	DD	FLAT:$T198996
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv163 = -220						; size = 4
tv70 = -216						; size = 4
tv161 = -212						; size = 4
tv80 = -208						; size = 4
tv159 = -204						; size = 4
tv86 = -200						; size = 4
_this$ = -196						; size = 4
$T198985 = -192						; size = 28
$T198984 = -164						; size = 28
$T198983 = -136						; size = 28
_strLeft$198224 = -108					; size = 28
_strRight$198226 = -80					; size = 28
_strInput$ = -52					; size = 28
__$ArrayPad$ = -24					; size = 4
_pSubMenu$ = -20					; size = 4
_iPos$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_subpos$ = 8						; size = 4
_pos$ = 12						; size = 4
_dwMenuItemID$ = 16					; size = 4
_pszMenuStr$ = 20					; size = 4
?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z PROC NEAR		; CShowMenu::InsertMenuA
; _this$ = ecx

; 82   : {

  00500	55		 push	 ebp
  00501	8b ec		 mov	 ebp, esp
  00503	6a ff		 push	 -1
  00505	68 00 00 00 00	 push	 __ehhandler$?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z
  0050a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00510	50		 push	 eax
  00511	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00518	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  0051e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00523	89 45 e8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00526	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	BCMenu* pSubMenu = (BCMenu*)m_pMenu->GetSubMenu(subpos);

  0052c	8b 45 08	 mov	 eax, DWORD PTR _subpos$[ebp]
  0052f	50		 push	 eax
  00530	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00536	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00539	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  0053e	89 45 ec	 mov	 DWORD PTR _pSubMenu$[ebp], eax

; 84   : 
; 85   : 	string strInput = pszMenuStr;

  00541	8b 55 14	 mov	 edx, DWORD PTR _pszMenuStr$[ebp]
  00544	52		 push	 edx
  00545	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00548	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0054e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 86   : 
; 87   : 	int iPos  = -1;

  00555	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _iPos$[ebp], -1
$L198222:

; 88   : 
; 89   : 	while( (iPos = strInput.find('&',iPos+1)) != string::npos )

  0055c	8b 45 f0	 mov	 eax, DWORD PTR _iPos$[ebp]
  0055f	83 c0 01	 add	 eax, 1
  00562	50		 push	 eax
  00563	6a 26		 push	 38			; 00000026H
  00565	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00568	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
  0056e	89 45 f0	 mov	 DWORD PTR _iPos$[ebp], eax
  00571	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
  00577	8b 55 f0	 mov	 edx, DWORD PTR _iPos$[ebp]
  0057a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0057c	0f 84 2b 01 00
	00		 je	 $L198223

; 90   : 	{
; 91   : 		string strLeft = strInput.substr(0,iPos);

  00582	8b 45 f0	 mov	 eax, DWORD PTR _iPos$[ebp]
  00585	50		 push	 eax
  00586	6a 00		 push	 0
  00588	8d 4d 94	 lea	 ecx, DWORD PTR _strLeft$198224[ebp]
  0058b	51		 push	 ecx
  0058c	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0058f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  00595	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 92   : 		string strRight = strInput.substr(iPos,strInput.length()-iPos+1);

  00599	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  0059c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
  005a2	2b 45 f0	 sub	 eax, DWORD PTR _iPos$[ebp]
  005a5	83 c0 01	 add	 eax, 1
  005a8	50		 push	 eax
  005a9	8b 55 f0	 mov	 edx, DWORD PTR _iPos$[ebp]
  005ac	52		 push	 edx
  005ad	8d 45 b0	 lea	 eax, DWORD PTR _strRight$198226[ebp]
  005b0	50		 push	 eax
  005b1	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  005b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  005ba	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 93   : 		iPos++;

  005be	8b 4d f0	 mov	 ecx, DWORD PTR _iPos$[ebp]
  005c1	83 c1 01	 add	 ecx, 1
  005c4	89 4d f0	 mov	 DWORD PTR _iPos$[ebp], ecx

; 94   : 
; 95   : 		strInput = strLeft + string("&") + strRight;

  005c7	68 00 00 00 00	 push	 OFFSET FLAT:$SG198231
  005cc	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T198983[ebp]
  005d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  005d8	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  005de	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  005e4	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv159[ebp], edx
  005ea	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  005ee	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv159[ebp]
  005f4	50		 push	 eax
  005f5	8d 4d 94	 lea	 ecx, DWORD PTR _strLeft$198224[ebp]
  005f8	51		 push	 ecx
  005f9	8d 95 5c ff ff
	ff		 lea	 edx, DWORD PTR $T198984[ebp]
  005ff	52		 push	 edx
  00600	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00605	83 c4 0c	 add	 esp, 12			; 0000000cH
  00608	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  0060e	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv80[ebp]
  00614	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv161[ebp], eax
  0061a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0061e	8d 4d b0	 lea	 ecx, DWORD PTR _strRight$198226[ebp]
  00621	51		 push	 ecx
  00622	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv161[ebp]
  00628	52		 push	 edx
  00629	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T198985[ebp]
  0062f	50		 push	 eax
  00630	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00635	83 c4 0c	 add	 esp, 12			; 0000000cH
  00638	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0063e	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00644	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv163[ebp], ecx
  0064a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0064e	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv163[ebp]
  00654	52		 push	 edx
  00655	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00658	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0065e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00662	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T198985[ebp]
  00668	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0066e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00672	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T198984[ebp]
  00678	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0067e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00682	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T198983[ebp]
  00688	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 96   : 	}

  0068e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00692	8d 4d b0	 lea	 ecx, DWORD PTR _strRight$198226[ebp]
  00695	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0069b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0069f	8d 4d 94	 lea	 ecx, DWORD PTR _strLeft$198224[ebp]
  006a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  006a8	e9 af fe ff ff	 jmp	 $L198222
$L198223:

; 97   : 
; 98   : 	pSubMenu->InsertMenu( pos,MF_BYPOSITION|MF_STRING,dwMenuItemID,strInput.c_str() );

  006ad	6a ff		 push	 -1
  006af	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  006b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  006b8	50		 push	 eax
  006b9	8b 45 10	 mov	 eax, DWORD PTR _dwMenuItemID$[ebp]
  006bc	50		 push	 eax
  006bd	68 00 04 00 00	 push	 1024			; 00000400H
  006c2	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  006c5	51		 push	 ecx
  006c6	8b 4d ec	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  006c9	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 99   : }

  006ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006d5	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  006d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  006de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  006e8	8b 4d e8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006f0	8b e5		 mov	 esp, ebp
  006f2	5d		 pop	 ebp
  006f3	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L198986:
  00082	8d 4d cc	 lea	 ecx, DWORD PTR _strInput$[ebp]
  00085	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198987:
  0008b	8d 4d 94	 lea	 ecx, DWORD PTR _strLeft$198224[ebp]
  0008e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198988:
  00094	8d 4d b0	 lea	 ecx, DWORD PTR _strRight$198226[ebp]
  00097	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198989:
  0009d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T198983[ebp]
  000a3	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198990:
  000a9	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T198984[ebp]
  000af	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198991:
  000b5	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T198985[ebp]
  000bb	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z:
  000c1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198993
  000c6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertMenuA@CShowMenu@@QAEXHHKPBD@Z ENDP		; CShowMenu::InsertMenuA
PUBLIC	?InsertMenuA@CShowMenu@@QAEXHHI@Z		; CShowMenu::InsertMenuA
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pSubMenu$ = -4						; size = 4
_subpos$ = 8						; size = 4
_pos$ = 12						; size = 4
_nFlag$ = 16						; size = 4
?InsertMenuA@CShowMenu@@QAEXHHI@Z PROC NEAR		; CShowMenu::InsertMenuA
; _this$ = ecx

; 102  : {

  00700	55		 push	 ebp
  00701	8b ec		 mov	 ebp, esp
  00703	83 ec 08	 sub	 esp, 8
  00706	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	BCMenu* pSubMenu = (BCMenu*)m_pMenu->GetSubMenu(subpos);

  00709	8b 45 08	 mov	 eax, DWORD PTR _subpos$[ebp]
  0070c	50		 push	 eax
  0070d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00710	8b 49 64	 mov	 ecx, DWORD PTR [ecx+100]
  00713	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  00718	89 45 fc	 mov	 DWORD PTR _pSubMenu$[ebp], eax

; 104  : 	pSubMenu->InsertMenu( pos, nFlag );

  0071b	6a ff		 push	 -1
  0071d	6a 00		 push	 0
  0071f	6a 00		 push	 0
  00721	8b 55 10	 mov	 edx, DWORD PTR _nFlag$[ebp]
  00724	52		 push	 edx
  00725	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00728	50		 push	 eax
  00729	8b 4d fc	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  0072c	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 105  : }

  00731	8b e5		 mov	 esp, ebp
  00733	5d		 pop	 ebp
  00734	c2 0c 00	 ret	 12			; 0000000cH
?InsertMenuA@CShowMenu@@QAEXHHI@Z ENDP			; CShowMenu::InsertMenuA
_TEXT	ENDS
PUBLIC	?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z ; CShowMenu::MeasureItem
EXTRN	?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z:NEAR		; BCMenu::IsMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpMeasureItemStruct$ = 8				; size = 4
?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z PROC NEAR ; CShowMenu::MeasureItem
; _this$ = ecx

; 108  : {

  00740	55		 push	 ebp
  00741	8b ec		 mov	 ebp, esp
  00743	51		 push	 ecx
  00744	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 	if( BCMenu::IsMenu((HMENU)lpMeasureItemStruct->itemID ) )

  00747	8b 45 08	 mov	 eax, DWORD PTR _lpMeasureItemStruct$[ebp]
  0074a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0074d	51		 push	 ecx
  0074e	e8 00 00 00 00	 call	 ?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z ; BCMenu::IsMenu
  00753	83 c4 04	 add	 esp, 4
  00756	85 c0		 test	 eax, eax
  00758	74 1b		 je	 SHORT $L198245

; 110  : 	{
; 111  : 		m_pMenu->MeasureItem( lpMeasureItemStruct );

  0075a	8b 55 08	 mov	 edx, DWORD PTR _lpMeasureItemStruct$[ebp]
  0075d	52		 push	 edx
  0075e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00761	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00764	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00767	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0076a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0076c	8b c8		 mov	 ecx, eax
  0076e	ff 52 18	 call	 DWORD PTR [edx+24]

; 112  : 		return true;

  00771	b0 01		 mov	 al, 1
  00773	eb 02		 jmp	 SHORT $L198243
$L198245:

; 113  : 	}
; 114  : 	return false;

  00775	32 c0		 xor	 al, al
$L198243:

; 115  : }

  00777	8b e5		 mov	 esp, ebp
  00779	5d		 pop	 ebp
  0077a	c2 04 00	 ret	 4
?MeasureItem@CShowMenu@@QAE_NPAUtagMEASUREITEMSTRUCT@@@Z ENDP ; CShowMenu::MeasureItem
_TEXT	ENDS
PUBLIC	?InsertPopupMenu@CShowMenu@@QAEXHIPBD@Z		; CShowMenu::InsertPopupMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_hMenu$ = 12						; size = 4
_pszMenuStr$ = 16					; size = 4
?InsertPopupMenu@CShowMenu@@QAEXHIPBD@Z PROC NEAR	; CShowMenu::InsertPopupMenu
; _this$ = ecx

; 118  : {

  00780	55		 push	 ebp
  00781	8b ec		 mov	 ebp, esp
  00783	51		 push	 ecx
  00784	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	m_pMenu->InsertMenu(pos,MF_POPUP|MF_BYPOSITION|MF_STRING,(UINT)hMenu,pszMenuStr);

  00787	6a ff		 push	 -1
  00789	8b 45 10	 mov	 eax, DWORD PTR _pszMenuStr$[ebp]
  0078c	50		 push	 eax
  0078d	8b 4d 0c	 mov	 ecx, DWORD PTR _hMenu$[ebp]
  00790	51		 push	 ecx
  00791	68 10 04 00 00	 push	 1040			; 00000410H
  00796	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00799	52		 push	 edx
  0079a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0079d	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  007a0	e8 00 00 00 00	 call	 ?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ; BCMenu::InsertMenuA

; 120  : }

  007a5	8b e5		 mov	 esp, ebp
  007a7	5d		 pop	 ebp
  007a8	c2 0c 00	 ret	 12			; 0000000cH
?InsertPopupMenu@CShowMenu@@QAEXHIPBD@Z ENDP		; CShowMenu::InsertPopupMenu
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Odt
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 37   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
_TEXT	ENDS
EXTRN	?Attach@CMenu@@QAEHPAUHMENU__@@@Z:NEAR		; CMenu::Attach
EXTRN	__imp__CreatePopupMenu@0:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?CreatePopupMenu@CMenu@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreatePopupMenu@CMenu@@QAEHXZ PROC NEAR		; CMenu::CreatePopupMenu, COMDAT
; _this$ = ecx

; 833  : 	{ return Attach(::CreatePopupMenu()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Attach@CMenu@@QAEHPAUHMENU__@@@Z ; CMenu::Attach
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?CreatePopupMenu@CMenu@@QAEHXZ ENDP			; CMenu::CreatePopupMenu
_TEXT	ENDS
EXTRN	__imp__CheckMenuItem@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?CheckMenuItem@CMenu@@QAEIII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDCheckItem$ = 8					; size = 4
_nCheck$ = 12						; size = 4
?CheckMenuItem@CMenu@@QAEIII@Z PROC NEAR		; CMenu::CheckMenuItem, COMDAT
; _this$ = ecx

; 853  : 	{ ASSERT(::IsMenu(m_hMenu)); return (UINT)::CheckMenuItem(m_hMenu, nIDCheckItem, nCheck); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _nCheck$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nIDCheckItem$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckMenuItem@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?CheckMenuItem@CMenu@@QAEIII@Z ENDP			; CMenu::CheckMenuItem
_TEXT	ENDS
EXTRN	__imp__EnableMenuItem@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?EnableMenuItem@CMenu@@QAEIII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEnableItem$ = 8					; size = 4
_nEnable$ = 12						; size = 4
?EnableMenuItem@CMenu@@QAEIII@Z PROC NEAR		; CMenu::EnableMenuItem, COMDAT
; _this$ = ecx

; 855  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::EnableMenuItem(m_hMenu, nIDEnableItem, nEnable); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _nEnable$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nIDEnableItem$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableMenuItem@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?EnableMenuItem@CMenu@@QAEIII@Z ENDP			; CMenu::EnableMenuItem
_TEXT	ENDS
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:NEAR
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\string
xdata$x	SEGMENT
$T199019 DD	0ffffffffH
	DD	FLAT:$L199013
	DD	00H
	DD	FLAT:$L199012
$T199017 DD	019930520H
	DD	02H
	DD	FLAT:$T199019
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -52						; size = 4
tv82 = -48						; size = 4
$T199014 = -44						; size = 4
$T199011 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC NEAR ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 21   : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T199014[ebp], 0

; 22   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00025	50		 push	 eax
  00026	8d 4d d8	 lea	 ecx, DWORD PTR $T199011[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0002f	89 45 d0	 mov	 DWORD PTR tv82[ebp], eax
  00032	8b 4d d0	 mov	 ecx, DWORD PTR tv82[ebp]
  00035	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00038	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0003f	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00042	52		 push	 edx
  00043	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00056	8b 45 d4	 mov	 eax, DWORD PTR $T199014[ebp]
  00059	83 c8 01	 or	 eax, 1
  0005c	89 45 d4	 mov	 DWORD PTR $T199014[ebp], eax
  0005f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T199011[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0006c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 	}

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L199012:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T199011[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L199013:
  00009	8b 45 d4	 mov	 eax, DWORD PTR $T199014[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $L199015
  00015	83 65 d4 fe	 and	 DWORD PTR $T199014[ebp], -2 ; fffffffeH
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L199015:
  00022	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199017
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
END
