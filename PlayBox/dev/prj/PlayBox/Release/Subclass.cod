; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\tray\Subclass.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??_GCSubclassWnd@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSubclassWndMap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CSubclassWndMap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWndMap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@8CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@8CMapPtrToPtr@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWndMap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCMapPtrToPtr@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCSubclassWndMap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCSubclassWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4CSubclassWndMap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4CSubclassWnd@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAt@CMapPtrToPtr@@QAEXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??_7CSubclassWndMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSubclassWnd@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B ; CSubclassWnd::classCSubclassWnd
EXTRN	?GetThisClass@CWnd@@SGPAUCRuntimeClass@@XZ:NEAR	; CWnd::GetThisClass
CONST	SEGMENT
$SG197422 DB	'CSubclassWnd', 00H
CONST	ENDS
;	COMDAT ?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B DD FLAT:$SG197422 ; CSubclassWnd::classCSubclassWnd
	DD	010H
	DD	0ffffH
	DD	00H
	DD	FLAT:?GetThisClass@CWnd@@SGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ ; CSubclassWnd::GetThisClass
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\tray\subclass.cpp
_TEXT	SEGMENT
?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ PROC NEAR ; CSubclassWnd::GetThisClass

; 39   : IMPLEMENT_DYNAMIC(CSubclassWnd, CWnd);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B ; CSubclassWnd::classCSubclassWnd
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisClass@CSubclassWnd@@SGPAUCRuntimeClass@@XZ ENDP	; CSubclassWnd::GetThisClass
_TEXT	ENDS
PUBLIC	?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ ; CSubclassWnd::GetRuntimeClass
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ PROC NEAR ; CSubclassWnd::GetRuntimeClass
; _this$ = ecx

; 39   : IMPLEMENT_DYNAMIC(CSubclassWnd, CWnd);

  00010	55		 push	 ebp
  00011	8b ec		 mov	 ebp, esp
  00013	51		 push	 ecx
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classCSubclassWnd@CSubclassWnd@@2UCRuntimeClass@@B ; CSubclassWnd::classCSubclassWnd
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ ENDP ; CSubclassWnd::GetRuntimeClass
_TEXT	ENDS
PUBLIC	??_R4CSubclassWnd@@6B@				; CSubclassWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSubclassWnd@@@8			; CSubclassWnd `RTTI Type Descriptor'
PUBLIC	??_R3CSubclassWnd@@8				; CSubclassWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSubclassWnd@@8				; CSubclassWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CSubclassWnd@@8			; CSubclassWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0CSubclassWnd@@QAE@XZ				; CSubclassWnd::CSubclassWnd
PUBLIC	?WindowProc@CSubclassWnd@@MAEJIIJ@Z		; CSubclassWnd::WindowProc
PUBLIC	??_7CSubclassWnd@@6B@				; CSubclassWnd::`vftable'
PUBLIC	??_GCSubclassWnd@@UAEPAXI@Z			; CSubclassWnd::`scalar deleting destructor'
EXTRN	??_ECSubclassWnd@@UAEPAXI@Z:NEAR		; CSubclassWnd::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7CSubclassWnd@@6B@
CONST	SEGMENT
??_7CSubclassWnd@@6B@ DD FLAT:??_R4CSubclassWnd@@6B@	; CSubclassWnd::`vftable'
	DD	FLAT:?GetRuntimeClass@CSubclassWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECSubclassWnd@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?WindowProc@CSubclassWnd@@MAEJIIJ@Z
CONST	ENDS
;	COMDAT ??_R4CSubclassWnd@@6B@
rdata$r	SEGMENT
??_R4CSubclassWnd@@6B@ DD 00H				; CSubclassWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSubclassWnd@@@8
	DD	FLAT:??_R3CSubclassWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSubclassWnd@@@8
_DATA	SEGMENT
??_R0?AVCSubclassWnd@@@8 DD FLAT:??_7type_info@@6B@	; CSubclassWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSubclassWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CSubclassWnd@@8
rdata$r	SEGMENT
??_R3CSubclassWnd@@8 DD 00H				; CSubclassWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSubclassWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWnd@@8
rdata$r	SEGMENT
??_R2CSubclassWnd@@8 DD FLAT:??_R1A@?0A@A@CSubclassWnd@@8 ; CSubclassWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CSubclassWnd@@8 DD FLAT:??_R0?AVCSubclassWnd@@@8 ; CSubclassWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
	ORG $-22
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSubclassWnd@@QAE@XZ PROC NEAR			; CSubclassWnd::CSubclassWnd
; _this$ = ecx

; 42   : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp
  00023	51		 push	 ecx
  00024	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWnd@@6B@

; 43   : 	m_pNext = NULL;

  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 44   : 	m_pOldWndProc = NULL;	

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 45   : 	m_hWnd  = NULL;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 46   : }

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
??0CSubclassWnd@@QAE@XZ ENDP				; CSubclassWnd::CSubclassWnd
_TEXT	ENDS
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	??1CSubclassWnd@@UAE@XZ				; CSubclassWnd::~CSubclassWnd
; Function compile flags: /Odt
;	COMDAT ??_GCSubclassWnd@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSubclassWnd@@UAEPAXI@Z PROC NEAR			; CSubclassWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSubclassWnd@@UAE@XZ	; CSubclassWnd::~CSubclassWnd
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L197437
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L197437:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCSubclassWnd@@UAEPAXI@Z ENDP			; CSubclassWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z	; CSubclassWnd::HookWindow
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T197985 DD	0ffffffffH
	DD	FLAT:$L197978
$T197982 DD	019930520H
	DD	01H
	DD	FLAT:$T197985
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSubclassWnd@@UAE@XZ PROC NEAR			; CSubclassWnd::~CSubclassWnd
; _this$ = ecx

; 49   : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	6a ff		 push	 -1
  00065	68 00 00 00 00	 push	 __ehhandler$??1CSubclassWnd@@UAE@XZ
  0006a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00070	50		 push	 eax
  00071	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00078	51		 push	 ecx
  00079	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0007c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWnd@@6B@
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 50   : 	if (m_hWnd) 

  0008c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00093	74 0a		 je	 SHORT $L197440

; 51   : 		HookWindow((HWND)NULL);		// unhook window

  00095	6a 00		 push	 0
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ; CSubclassWnd::HookWindow
$L197440:

; 52   : }

  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L197978:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CSubclassWnd@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T197982
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CSubclassWnd@@UAE@XZ ENDP				; CSubclassWnd::~CSubclassWnd
PUBLIC	?GetHookMap@CSubclassWndMap@@SAAAV1@XZ		; CSubclassWndMap::GetHookMap
PUBLIC	?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z ; CSubclassWndMap::Add
PUBLIC	?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z ; CSubclassWndMap::Remove
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z PROC NEAR	; CSubclassWnd::HookWindow
; _this$ = ecx

; 60   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp
  000c3	51		 push	 ecx
  000c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 	ASSERT_VALID(this);
; 62   : 	if (hwnd) {

  000c7	83 7d 08 00	 cmp	 DWORD PTR _hwnd$[ebp], 0
  000cb	74 16		 je	 SHORT $L197448

; 63   : 		// Hook the window
; 64   : 		ASSERT(m_hWnd==NULL);
; 65   : 		ASSERT(::IsWindow(hwnd));
; 66   : 		theHookMap.Add(hwnd, this);			// Add to map of hooks

  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  000da	8b c8		 mov	 ecx, eax
  000dc	e8 00 00 00 00	 call	 ?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z ; CSubclassWndMap::Add

; 67   : 
; 68   : 	} else if (m_hWnd) {

  000e1	eb 23		 jmp	 SHORT $L197451
$L197448:
  000e3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e6	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000ea	74 1a		 je	 SHORT $L197451

; 69   : 		// Unhook the window
; 70   : 		theHookMap.Remove(this);				// Remove from map

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  000f5	8b c8		 mov	 ecx, eax
  000f7	e8 00 00 00 00	 call	 ?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z ; CSubclassWndMap::Remove

; 71   : 		m_pOldWndProc = NULL;

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L197451:

; 72   : 	}
; 73   : 	m_hWnd = hwnd;

  00106	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00109	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0010c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 74   : 	return TRUE;

  0010f	b8 01 00 00 00	 mov	 eax, 1

; 75   : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ENDP	; CSubclassWnd::HookWindow
_TEXT	ENDS
EXTRN	__imp__CallWindowProcA@20:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv85 = -8						; size = 4
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
_wp$ = 12						; size = 4
_lp$ = 16						; size = 4
?WindowProc@CSubclassWnd@@MAEJIIJ@Z PROC NEAR		; CSubclassWnd::WindowProc
; _this$ = ecx

; 86   : {

  00120	55		 push	 ebp
  00121	8b ec		 mov	 ebp, esp
  00123	83 ec 08	 sub	 esp, 8
  00126	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   : //	ASSERT_VALID(this);  // removed for speed
; 88   : 	ASSERT(m_pOldWndProc);
; 89   : 	return m_pNext ? m_pNext->WindowProc(msg, wp, lp) :	
; 90   : 		::CallWindowProc(m_pOldWndProc, m_hWnd, msg, wp, lp);

  00129	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00130	74 22		 je	 SHORT $L197989
  00132	8b 4d 10	 mov	 ecx, DWORD PTR _lp$[ebp]
  00135	51		 push	 ecx
  00136	8b 55 0c	 mov	 edx, DWORD PTR _wp$[ebp]
  00139	52		 push	 edx
  0013a	8b 45 08	 mov	 eax, DWORD PTR _msg$[ebp]
  0013d	50		 push	 eax
  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00144	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00147	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0014a	8b 12		 mov	 edx, DWORD PTR [edx]
  0014c	ff 52 14	 call	 DWORD PTR [edx+20]
  0014f	89 45 f8	 mov	 DWORD PTR tv85[ebp], eax
  00152	eb 23		 jmp	 SHORT $L197990
$L197989:
  00154	8b 45 10	 mov	 eax, DWORD PTR _lp$[ebp]
  00157	50		 push	 eax
  00158	8b 4d 0c	 mov	 ecx, DWORD PTR _wp$[ebp]
  0015b	51		 push	 ecx
  0015c	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  0015f	52		 push	 edx
  00160	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00163	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00166	51		 push	 ecx
  00167	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0016a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0016d	50		 push	 eax
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  00174	89 45 f8	 mov	 DWORD PTR tv85[ebp], eax
$L197990:
  00177	8b 45 f8	 mov	 eax, DWORD PTR tv85[ebp]

; 91   : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 0c 00	 ret	 12			; 0000000cH
?WindowProc@CSubclassWnd@@MAEJIIJ@Z ENDP		; CSubclassWnd::WindowProc
_TEXT	ENDS
PUBLIC	?Default@CSubclassWnd@@IAEJXZ			; CSubclassWnd::Default
EXTRN	?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ:NEAR ; AfxGetThreadState
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_curMsg$ = -4						; size = 4
?Default@CSubclassWnd@@IAEJXZ PROC NEAR			; CSubclassWnd::Default
; _this$ = ecx

; 98   : {

  00180	55		 push	 ebp
  00181	8b ec		 mov	 ebp, esp
  00183	83 ec 08	 sub	 esp, 8
  00186	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	// MFC stores current MSG in thread state
; 100  : 	MSG& curMsg = AfxGetThreadState()->m_lastSentMsg;

  00189	e8 00 00 00 00	 call	 ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ ; AfxGetThreadState
  0018e	83 c0 58	 add	 eax, 88			; 00000058H
  00191	89 45 fc	 mov	 DWORD PTR _curMsg$[ebp], eax

; 101  : 	// Note: must explicitly call CSubclassWnd::WindowProc to avoid infinte
; 102  : 	// recursion on virtual function
; 103  : 	return CSubclassWnd::WindowProc(curMsg.message, curMsg.wParam, curMsg.lParam);

  00194	8b 45 fc	 mov	 eax, DWORD PTR _curMsg$[ebp]
  00197	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0019a	51		 push	 ecx
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _curMsg$[ebp]
  0019e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001a1	50		 push	 eax
  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _curMsg$[ebp]
  001a5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001a8	52		 push	 edx
  001a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	e8 00 00 00 00	 call	 ?WindowProc@CSubclassWnd@@MAEJIIJ@Z ; CSubclassWnd::WindowProc

; 104  : }

  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c3		 ret	 0
?Default@CSubclassWnd@@IAEJXZ ENDP			; CSubclassWnd::Default
_TEXT	ENDS
PUBLIC	?HookWndProc@@YGJPAUHWND__@@IIJ@Z		; HookWndProc
PUBLIC	?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z	; CSubclassWndMap::RemoveAll
PUBLIC	?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
; Function compile flags: /Odt
_TEXT	SEGMENT
_wndproc$197476 = -44					; size = 4
_curMsg$ = -40						; size = 4
_oldMsg$ = -36						; size = 28
_pSubclassWnd$ = -8					; size = 4
_lr$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_msg$ = 12						; size = 4
_wp$ = 16						; size = 4
_lp$ = 20						; size = 4
?HookWndProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR		; HookWndProc

; 134  : {

  001c0	55		 push	 ebp
  001c1	8b ec		 mov	 ebp, esp
  001c3	83 ec 2c	 sub	 esp, 44			; 0000002cH
  001c6	56		 push	 esi
  001c7	57		 push	 edi

; 135  : #ifdef _USRDLL
; 136  : 	// If this is a DLL, need to set up MFC state
; 137  : 	AFX_MANAGE_STATE(AfxGetStaticModuleState());
; 138  : #endif
; 139  : 
; 140  : 	// Set up MFC message state just in case anyone wants it
; 141  : 	// This is just like AfxCallWindowProc, but we can't use that because
; 142  : 	// a CSubclassWnd is not a CWnd.
; 143  : 	//
; 144  : 	MSG& curMsg = AfxGetThreadState()->m_lastSentMsg;

  001c8	e8 00 00 00 00	 call	 ?AfxGetThreadState@@YGPAV_AFX_THREAD_STATE@@XZ ; AfxGetThreadState
  001cd	83 c0 58	 add	 eax, 88			; 00000058H
  001d0	89 45 d8	 mov	 DWORD PTR _curMsg$[ebp], eax

; 145  : 	MSG  oldMsg = curMsg;   // save for nesting

  001d3	8b 75 d8	 mov	 esi, DWORD PTR _curMsg$[ebp]
  001d6	b9 07 00 00 00	 mov	 ecx, 7
  001db	8d 7d dc	 lea	 edi, DWORD PTR _oldMsg$[ebp]
  001de	f3 a5		 rep movsd

; 146  : 	curMsg.hwnd		= hwnd;

  001e0	8b 45 d8	 mov	 eax, DWORD PTR _curMsg$[ebp]
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  001e6	89 08		 mov	 DWORD PTR [eax], ecx

; 147  : 	curMsg.message = msg;

  001e8	8b 55 d8	 mov	 edx, DWORD PTR _curMsg$[ebp]
  001eb	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  001ee	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 148  : 	curMsg.wParam  = wp;

  001f1	8b 4d d8	 mov	 ecx, DWORD PTR _curMsg$[ebp]
  001f4	8b 55 10	 mov	 edx, DWORD PTR _wp$[ebp]
  001f7	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 149  : 	curMsg.lParam  = lp;

  001fa	8b 45 d8	 mov	 eax, DWORD PTR _curMsg$[ebp]
  001fd	8b 4d 14	 mov	 ecx, DWORD PTR _lp$[ebp]
  00200	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 150  : 
; 151  : 	// Get hook object for this window. Get from hook map
; 152  : 	CSubclassWnd* pSubclassWnd = theHookMap.Lookup(hwnd);

  00203	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  0020c	8b c8		 mov	 ecx, eax
  0020e	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  00213	89 45 f8	 mov	 DWORD PTR _pSubclassWnd$[ebp], eax

; 153  : 	ASSERT(pSubclassWnd);
; 154  : 
; 155  : 	LRESULT lr;
; 156  : 	if (msg==WM_NCDESTROY) {

  00216	81 7d 0c 82 00
	00 00		 cmp	 DWORD PTR _msg$[ebp], 130 ; 00000082H
  0021d	75 38		 jne	 SHORT $L197475

; 157  : 		// Window is being destroyed: unhook all hooks (for this window)
; 158  : 		// and pass msg to orginal window proc
; 159  : 		//
; 160  : 		WNDPROC wndproc = pSubclassWnd->m_pOldWndProc;

  0021f	8b 45 f8	 mov	 eax, DWORD PTR _pSubclassWnd$[ebp]
  00222	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00225	89 4d d4	 mov	 DWORD PTR _wndproc$197476[ebp], ecx

; 161  : 		theHookMap.RemoveAll(hwnd);

  00228	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0022b	52		 push	 edx
  0022c	e8 00 00 00 00	 call	 ?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ; CSubclassWndMap::GetHookMap
  00231	8b c8		 mov	 ecx, eax
  00233	e8 00 00 00 00	 call	 ?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z ; CSubclassWndMap::RemoveAll

; 162  : 		lr = ::CallWindowProc(wndproc, hwnd, msg, wp, lp);

  00238	8b 45 14	 mov	 eax, DWORD PTR _lp$[ebp]
  0023b	50		 push	 eax
  0023c	8b 4d 10	 mov	 ecx, DWORD PTR _wp$[ebp]
  0023f	51		 push	 ecx
  00240	8b 55 0c	 mov	 edx, DWORD PTR _msg$[ebp]
  00243	52		 push	 edx
  00244	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00247	50		 push	 eax
  00248	8b 4d d4	 mov	 ecx, DWORD PTR _wndproc$197476[ebp]
  0024b	51		 push	 ecx
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  00252	89 45 fc	 mov	 DWORD PTR _lr$[ebp], eax

; 163  : 
; 164  : 	} else {

  00255	eb 1a		 jmp	 SHORT $L197477
$L197475:

; 165  : 		// pass to msg hook
; 166  : 		lr = pSubclassWnd->WindowProc(msg, wp, lp);

  00257	8b 55 14	 mov	 edx, DWORD PTR _lp$[ebp]
  0025a	52		 push	 edx
  0025b	8b 45 10	 mov	 eax, DWORD PTR _wp$[ebp]
  0025e	50		 push	 eax
  0025f	8b 4d 0c	 mov	 ecx, DWORD PTR _msg$[ebp]
  00262	51		 push	 ecx
  00263	8b 55 f8	 mov	 edx, DWORD PTR _pSubclassWnd$[ebp]
  00266	8b 02		 mov	 eax, DWORD PTR [edx]
  00268	8b 4d f8	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  0026b	ff 50 14	 call	 DWORD PTR [eax+20]
  0026e	89 45 fc	 mov	 DWORD PTR _lr$[ebp], eax
$L197477:

; 167  : 	}
; 168  : 	curMsg = oldMsg;			// pop state

  00271	b9 07 00 00 00	 mov	 ecx, 7
  00276	8d 75 dc	 lea	 esi, DWORD PTR _oldMsg$[ebp]
  00279	8b 7d d8	 mov	 edi, DWORD PTR _curMsg$[ebp]
  0027c	f3 a5		 rep movsd

; 169  : 	return lr;

  0027e	8b 45 fc	 mov	 eax, DWORD PTR _lr$[ebp]

; 170  : }

  00281	5f		 pop	 edi
  00282	5e		 pop	 esi
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c2 10 00	 ret	 16			; 00000010H
?HookWndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; HookWndProc
_TEXT	ENDS
PUBLIC	??_R4CSubclassWndMap@@6B@			; CSubclassWndMap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSubclassWndMap@@@8			; CSubclassWndMap `RTTI Type Descriptor'
PUBLIC	??_R3CSubclassWndMap@@8				; CSubclassWndMap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSubclassWndMap@@8				; CSubclassWndMap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CSubclassWndMap@@8			; CSubclassWndMap::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@8CMapPtrToPtr@@8			; CMapPtrToPtr::`RTTI Base Class Descriptor at (0,-1,0,9)'
PUBLIC	??_R0?AVCMapPtrToPtr@@@8			; CMapPtrToPtr `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@8CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,9)'
PUBLIC	??0CSubclassWndMap@@QAE@XZ			; CSubclassWndMap::CSubclassWndMap
PUBLIC	??_7CSubclassWndMap@@6B@			; CSubclassWndMap::`vftable'
PUBLIC	??_GCSubclassWndMap@@UAEPAXI@Z			; CSubclassWndMap::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CMapPtrToPtr@@UBEPAUCRuntimeClass@@XZ:NEAR ; CMapPtrToPtr::GetRuntimeClass
EXTRN	??0CMapPtrToPtr@@QAE@H@Z:NEAR			; CMapPtrToPtr::CMapPtrToPtr
EXTRN	??_ECSubclassWndMap@@UAEPAXI@Z:NEAR		; CSubclassWndMap::`vector deleting destructor'
;	COMDAT ??_7CSubclassWndMap@@6B@
CONST	SEGMENT
??_7CSubclassWndMap@@6B@ DD FLAT:??_R4CSubclassWndMap@@6B@ ; CSubclassWndMap::`vftable'
	DD	FLAT:?GetRuntimeClass@CMapPtrToPtr@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECSubclassWndMap@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CSubclassWndMap@@6B@
rdata$r	SEGMENT
??_R4CSubclassWndMap@@6B@ DD 00H			; CSubclassWndMap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSubclassWndMap@@@8
	DD	FLAT:??_R3CSubclassWndMap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSubclassWndMap@@@8
_DATA	SEGMENT
??_R0?AVCSubclassWndMap@@@8 DD FLAT:??_7type_info@@6B@	; CSubclassWndMap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSubclassWndMap@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CSubclassWndMap@@8
rdata$r	SEGMENT
??_R3CSubclassWndMap@@8 DD 00H				; CSubclassWndMap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CSubclassWndMap@@8
rdata$r	ENDS
;	COMDAT ??_R2CSubclassWndMap@@8
rdata$r	SEGMENT
??_R2CSubclassWndMap@@8 DD FLAT:??_R1A@?0A@A@CSubclassWndMap@@8 ; CSubclassWndMap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@8CMapPtrToPtr@@8
	DD	FLAT:??_R1A@?0A@8CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CSubclassWndMap@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CSubclassWndMap@@8 DD FLAT:??_R0?AVCSubclassWndMap@@@8 ; CSubclassWndMap::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@8CMapPtrToPtr@@8
rdata$r	SEGMENT
??_R1A@?0A@8CMapPtrToPtr@@8 DD FLAT:??_R0?AVCMapPtrToPtr@@@8 ; CMapPtrToPtr::`RTTI Base Class Descriptor at (0,-1,0,9)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	09H
rdata$r	ENDS
;	COMDAT ??_R0?AVCMapPtrToPtr@@@8
_DATA	SEGMENT
??_R0?AVCMapPtrToPtr@@@8 DD FLAT:??_7type_info@@6B@	; CMapPtrToPtr `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMapPtrToPtr@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@8CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@8CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,9)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	09H
; Function compile flags: /Odt
rdata$r	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSubclassWndMap@@QAE@XZ PROC NEAR			; CSubclassWndMap::CSubclassWndMap
; _this$ = ecx

; 176  : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	51		 push	 ecx
  00294	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00297	6a 0a		 push	 10			; 0000000aH
  00299	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029c	e8 00 00 00 00	 call	 ??0CMapPtrToPtr@@QAE@H@Z ; CMapPtrToPtr::CMapPtrToPtr
  002a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a4	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWndMap@@6B@

; 177  : }

  002aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ad	8b e5		 mov	 esp, ebp
  002af	5d		 pop	 ebp
  002b0	c3		 ret	 0
??0CSubclassWndMap@@QAE@XZ ENDP				; CSubclassWndMap::CSubclassWndMap
_TEXT	ENDS
PUBLIC	??1CSubclassWndMap@@UAE@XZ			; CSubclassWndMap::~CSubclassWndMap
; Function compile flags: /Odt
;	COMDAT ??_GCSubclassWndMap@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSubclassWndMap@@UAEPAXI@Z PROC NEAR		; CSubclassWndMap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSubclassWndMap@@UAE@XZ ; CSubclassWndMap::~CSubclassWndMap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L197484
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L197484:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCSubclassWndMap@@UAEPAXI@Z ENDP			; CSubclassWndMap::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CMapPtrToPtr@@UAE@XZ:NEAR			; CMapPtrToPtr::~CMapPtrToPtr
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSubclassWndMap@@UAE@XZ PROC NEAR			; CSubclassWndMap::~CSubclassWndMap
; _this$ = ecx

; 180  : {

  002c0	55		 push	 ebp
  002c1	8b ec		 mov	 ebp, esp
  002c3	51		 push	 ecx
  002c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  002c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ca	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSubclassWndMap@@6B@

; 181  : // This assert bombs when posting WM_QUIT, so I've deleted it.
; 182  : //	ASSERT(IsEmpty());	// all hooks should be removed!	
; 183  : }

  002d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d3	e8 00 00 00 00	 call	 ??1CMapPtrToPtr@@UAE@XZ	; CMapPtrToPtr::~CMapPtrToPtr
  002d8	8b e5		 mov	 esp, ebp
  002da	5d		 pop	 ebp
  002db	c3		 ret	 0
??1CSubclassWndMap@@UAE@XZ ENDP				; CSubclassWndMap::~CSubclassWndMap
_TEXT	ENDS
EXTRN	_atexit:NEAR
;	COMDAT ?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
_BSS	SEGMENT
?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A DB 01cH DUP (?) ; `CSubclassWndMap::GetHookMap'::`2'::theMap
_BSS	ENDS
;	COMDAT ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
_BSS	SEGMENT
?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA DD 01H DUP (?) ; `CSubclassWndMap::GetHookMap'::`2'::$S5
_BSS	ENDS
xdata$x	SEGMENT
$T198004 DD	0ffffffffH
	DD	FLAT:$L198000
$T198002 DD	019930520H
	DD	01H
	DD	FLAT:$T198004
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?GetHookMap@CSubclassWndMap@@SAAAV1@XZ PROC NEAR	; CSubclassWndMap::GetHookMap

; 189  : {

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	6a ff		 push	 -1
  002e5	68 00 00 00 00	 push	 __ehhandler$?GetHookMap@CSubclassWndMap@@SAAAV1@XZ
  002ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  002f0	50		 push	 eax
  002f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp

; 190  : 	// By creating theMap here, C++ doesn't instantiate it until/unless
; 191  : 	// it's ever used! This is a good trick to use in C++, to
; 192  : 	// instantiate/initialize a static object the first time it's used.
; 193  : 	//
; 194  : 	static CSubclassWndMap theMap;

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
  002fd	83 e0 01	 and	 eax, 1
  00300	75 34		 jne	 SHORT $L197494
  00302	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
  00308	83 c9 01	 or	 ecx, 1
  0030b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA, ecx
  00311	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00318	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
  0031d	e8 00 00 00 00	 call	 ??0CSubclassWndMap@@QAE@XZ ; CSubclassWndMap::CSubclassWndMap
  00322	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00327	e8 00 00 00 00	 call	 _atexit
  0032c	83 c4 04	 add	 esp, 4
  0032f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
$L197494:

; 195  : 	return theMap;

  00336	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A

; 196  : }

  0033b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0033e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00345	8b e5		 mov	 esp, ebp
  00347	5d		 pop	 ebp
  00348	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L198000:
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA
  00017	83 e0 fe	 and	 eax, -2			; fffffffeH
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?$S5@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4IA, eax
  0001f	c3		 ret	 0
__ehhandler$?GetHookMap@CSubclassWndMap@@SAAAV1@XZ:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198002
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetHookMap@CSubclassWndMap@@SAAAV1@XZ ENDP		; CSubclassWndMap::GetHookMap
; Function compile flags: /Odt
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?theMap@?1??GetHookMap@CSubclassWndMap@@SAAAV2@XZ@4V2@A
  00008	e8 00 00 00 00	 call	 ??1CSubclassWndMap@@UAE@XZ ; CSubclassWndMap::~CSubclassWndMap
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E6	ENDP
text$yd	ENDS
PUBLIC	?SetAt@CMapPtrToPtr@@QAEXPAX0@Z			; CMapPtrToPtr::SetAt
EXTRN	__imp__SetWindowLongA@12:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_pSubclassWnd$ = 12					; size = 4
?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z PROC NEAR ; CSubclassWndMap::Add
; _this$ = ecx

; 202  : {

  00350	55		 push	 ebp
  00351	8b ec		 mov	 ebp, esp
  00353	51		 push	 ecx
  00354	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	ASSERT(hwnd && ::IsWindow(hwnd));
; 204  : 
; 205  : 	// Add to front of list
; 206  : 	pSubclassWnd->m_pNext = Lookup(hwnd);

  00357	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035e	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  00363	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00366	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 207  : 	SetAt(hwnd, pSubclassWnd);

  00369	8b 55 0c	 mov	 edx, DWORD PTR _pSubclassWnd$[ebp]
  0036c	52		 push	 edx
  0036d	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00370	50		 push	 eax
  00371	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00374	e8 00 00 00 00	 call	 ?SetAt@CMapPtrToPtr@@QAEXPAX0@Z ; CMapPtrToPtr::SetAt

; 208  : 	
; 209  : 	if (pSubclassWnd->m_pNext==NULL) {

  00379	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  0037c	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00380	75 19		 jne	 SHORT $L197503

; 210  : 		// If this is the first hook added, subclass the window
; 211  : #pragma warning( disable: 4311 4312)	
; 212  : 		pSubclassWnd->m_pOldWndProc = 
; 213  : 			(WNDPROC)SetWindowLong(hwnd, GWL_WNDPROC, (DWORD)HookWndProc);

  00382	68 00 00 00 00	 push	 OFFSET FLAT:?HookWndProc@@YGJPAUHWND__@@IIJ@Z ; HookWndProc
  00387	6a fc		 push	 -4			; fffffffcH
  00389	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0038c	52		 push	 edx
  0038d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00393	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00396	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 214  : #pragma warning( default: 4311 4312)	
; 215  : 	} else {

  00399	eb 0f		 jmp	 SHORT $L197501
$L197503:

; 216  : 		// just copy wndproc from next hook
; 217  : 		pSubclassWnd->m_pOldWndProc = pSubclassWnd->m_pNext->m_pOldWndProc;

  0039b	8b 55 0c	 mov	 edx, DWORD PTR _pSubclassWnd$[ebp]
  0039e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003a1	8b 4d 0c	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  003a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003a7	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$L197501:

; 218  : 	}
; 219  : 	ASSERT(pSubclassWnd->m_pOldWndProc);
; 220  : }

  003aa	8b e5		 mov	 esp, ebp
  003ac	5d		 pop	 ebp
  003ad	c2 08 00	 ret	 8
?Add@CSubclassWndMap@@QAEXPAUHWND__@@PAVCSubclassWnd@@@Z ENDP ; CSubclassWndMap::Add
_TEXT	ENDS
EXTRN	?RemoveKey@CMapPtrToPtr@@QAEHPAX@Z:NEAR		; CMapPtrToPtr::RemoveKey
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -12						; size = 4
_hwnd$ = -8						; size = 4
_pHook$ = -4						; size = 4
_pUnHook$ = 8						; size = 4
?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z PROC NEAR ; CSubclassWndMap::Remove
; _this$ = ecx

; 226  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  003b6	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 227  : 	HWND hwnd = pUnHook->m_hWnd;

  003b9	8b 45 08	 mov	 eax, DWORD PTR _pUnHook$[ebp]
  003bc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003bf	89 4d f8	 mov	 DWORD PTR _hwnd$[ebp], ecx

; 228  : 	ASSERT(hwnd && ::IsWindow(hwnd));
; 229  : 
; 230  : 	CSubclassWnd* pHook = Lookup(hwnd);

  003c2	8b 55 f8	 mov	 edx, DWORD PTR _hwnd$[ebp]
  003c5	52		 push	 edx
  003c6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003c9	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  003ce	89 45 fc	 mov	 DWORD PTR _pHook$[ebp], eax

; 231  : 	ASSERT(pHook);
; 232  : 	if (pHook==pUnHook) {

  003d1	8b 45 fc	 mov	 eax, DWORD PTR _pHook$[ebp]
  003d4	3b 45 08	 cmp	 eax, DWORD PTR _pUnHook$[ebp]
  003d7	75 3f		 jne	 SHORT $L197522

; 233  : 		// hook to remove is the one in the hash table: replace w/next
; 234  : 		if (pHook->m_pNext)

  003d9	8b 4d fc	 mov	 ecx, DWORD PTR _pHook$[ebp]
  003dc	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  003e0	74 15		 je	 SHORT $L197517

; 235  : 			SetAt(hwnd, pHook->m_pNext);

  003e2	8b 55 fc	 mov	 edx, DWORD PTR _pHook$[ebp]
  003e5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003e8	50		 push	 eax
  003e9	8b 4d f8	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  003ec	51		 push	 ecx
  003ed	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003f0	e8 00 00 00 00	 call	 ?SetAt@CMapPtrToPtr@@QAEXPAX0@Z ; CMapPtrToPtr::SetAt

; 236  : 		else {

  003f5	eb 1f		 jmp	 SHORT $L197518
$L197517:

; 237  : 			// This is the last hook for this window: restore wnd proc
; 238  : 			RemoveKey(hwnd);

  003f7	8b 55 f8	 mov	 edx, DWORD PTR _hwnd$[ebp]
  003fa	52		 push	 edx
  003fb	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003fe	e8 00 00 00 00	 call	 ?RemoveKey@CMapPtrToPtr@@QAEHPAX@Z ; CMapPtrToPtr::RemoveKey

; 239  : #pragma warning( disable: 4311)	
; 240  : 			SetWindowLong(hwnd, GWL_WNDPROC, (DWORD)pHook->m_pOldWndProc);

  00403	8b 45 fc	 mov	 eax, DWORD PTR _pHook$[ebp]
  00406	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00409	51		 push	 ecx
  0040a	6a fc		 push	 -4			; fffffffcH
  0040c	8b 55 f8	 mov	 edx, DWORD PTR _hwnd$[ebp]
  0040f	52		 push	 edx
  00410	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
$L197518:

; 241  : #pragma warning( default: 4311)	
; 242  : 		}
; 243  : 	} else {

  00416	eb 22		 jmp	 SHORT $L197511
$L197522:

; 244  : 		// Hook to remove is in the middle: just remove from linked list
; 245  : 		while (pHook->m_pNext!=pUnHook)

  00418	8b 45 fc	 mov	 eax, DWORD PTR _pHook$[ebp]
  0041b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0041e	3b 4d 08	 cmp	 ecx, DWORD PTR _pUnHook$[ebp]
  00421	74 0b		 je	 SHORT $L197523

; 246  : 			pHook = pHook->m_pNext;

  00423	8b 55 fc	 mov	 edx, DWORD PTR _pHook$[ebp]
  00426	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00429	89 45 fc	 mov	 DWORD PTR _pHook$[ebp], eax
  0042c	eb ea		 jmp	 SHORT $L197522
$L197523:

; 247  : 		ASSERT(pHook && pHook->m_pNext==pUnHook);
; 248  : 		pHook->m_pNext = pUnHook->m_pNext;

  0042e	8b 4d fc	 mov	 ecx, DWORD PTR _pHook$[ebp]
  00431	8b 55 08	 mov	 edx, DWORD PTR _pUnHook$[ebp]
  00434	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00437	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L197511:

; 249  : 	}
; 250  : }

  0043a	8b e5		 mov	 esp, ebp
  0043c	5d		 pop	 ebp
  0043d	c2 04 00	 ret	 4
?Remove@CSubclassWndMap@@QAEXPAVCSubclassWnd@@@Z ENDP	; CSubclassWndMap::Remove
; Function compile flags: /Odt
_this$ = -8						; size = 4
_pSubclassWnd$ = -4					; size = 4
_hwnd$ = 8						; size = 4
?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z PROC NEAR	; CSubclassWndMap::RemoveAll
; _this$ = ecx

; 256  : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	83 ec 08	 sub	 esp, 8
  00446	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$L197531:

; 257  : 	CSubclassWnd* pSubclassWnd;
; 258  : 	while ((pSubclassWnd = Lookup(hwnd))!=NULL)

  00449	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0044c	50		 push	 eax
  0044d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00450	e8 00 00 00 00	 call	 ?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ; CSubclassWndMap::Lookup
  00455	89 45 fc	 mov	 DWORD PTR _pSubclassWnd$[ebp], eax
  00458	83 7d fc 00	 cmp	 DWORD PTR _pSubclassWnd$[ebp], 0
  0045c	74 0c		 je	 SHORT $L197528

; 259  : 		pSubclassWnd->HookWindow((HWND)NULL);	// (unhook)

  0045e	6a 00		 push	 0
  00460	8b 4d fc	 mov	 ecx, DWORD PTR _pSubclassWnd$[ebp]
  00463	e8 00 00 00 00	 call	 ?HookWindow@CSubclassWnd@@QAEHPAUHWND__@@@Z ; CSubclassWnd::HookWindow
  00468	eb df		 jmp	 SHORT $L197531
$L197528:

; 260  : }

  0046a	8b e5		 mov	 esp, ebp
  0046c	5d		 pop	 ebp
  0046d	c2 04 00	 ret	 4
?RemoveAll@CSubclassWndMap@@QAEXPAUHWND__@@@Z ENDP	; CSubclassWndMap::RemoveAll
_TEXT	ENDS
EXTRN	?Lookup@CMapPtrToPtr@@QBEHPAXAAPAX@Z:NEAR	; CMapPtrToPtr::Lookup
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pFound$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z PROC NEAR ; CSubclassWndMap::Lookup
; _this$ = ecx

; 266  : {

  00470	55		 push	 ebp
  00471	8b ec		 mov	 ebp, esp
  00473	83 ec 08	 sub	 esp, 8
  00476	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 	CSubclassWnd* pFound = NULL;

  00479	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pFound$[ebp], 0

; 268  : 	if (!CMapPtrToPtr::Lookup(hwnd, (void*&)pFound))

  00480	8d 45 fc	 lea	 eax, DWORD PTR _pFound$[ebp]
  00483	50		 push	 eax
  00484	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00487	51		 push	 ecx
  00488	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0048b	e8 00 00 00 00	 call	 ?Lookup@CMapPtrToPtr@@QBEHPAXAAPAX@Z ; CMapPtrToPtr::Lookup
  00490	85 c0		 test	 eax, eax
  00492	75 04		 jne	 SHORT $L197540

; 269  : 		return NULL;

  00494	33 c0		 xor	 eax, eax
  00496	eb 03		 jmp	 SHORT $L197537
$L197540:

; 270  : 	ASSERT_KINDOF(CSubclassWnd, pFound);
; 271  : 	return pFound;

  00498	8b 45 fc	 mov	 eax, DWORD PTR _pFound$[ebp]
$L197537:

; 272  : }

  0049b	8b e5		 mov	 esp, ebp
  0049d	5d		 pop	 ebp
  0049e	c2 04 00	 ret	 4
?Lookup@CSubclassWndMap@@QAEPAVCSubclassWnd@@PAUHWND__@@@Z ENDP ; CSubclassWndMap::Lookup
_TEXT	ENDS
EXTRN	??ACMapPtrToPtr@@QAEAAPAXPAX@Z:NEAR		; CMapPtrToPtr::operator[]
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcoll.inl
;	COMDAT ?SetAt@CMapPtrToPtr@@QAEXPAX0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_newValue$ = 12						; size = 4
?SetAt@CMapPtrToPtr@@QAEXPAX0@Z PROC NEAR		; CMapPtrToPtr::SetAt, COMDAT
; _this$ = ecx

; 599  : 	{ (*this)[key] = newValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??ACMapPtrToPtr@@QAEAAPAXPAX@Z ; CMapPtrToPtr::operator[]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _newValue$[ebp]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetAt@CMapPtrToPtr@@QAEXPAX0@Z ENDP			; CMapPtrToPtr::SetAt
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObject@@IAE@XZ PROC NEAR				; CObject::CObject, COMDAT
; _this$ = ecx

; 21   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CObject@@UAE@XZ PROC NEAR				; CObject::~CObject, COMDAT
; _this$ = ecx

; 23   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 41   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT
; _this$ = ecx

; 43   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
END
