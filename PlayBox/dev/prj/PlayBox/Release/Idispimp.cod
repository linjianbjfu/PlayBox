; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\WebInteract\Idispimp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0P@CLMBAKJD@JSCall?5Error?3?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??0IDispatch@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIHTMLDocument2@@@ATL@@QBEPAUIHTMLDocument2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocSysString@?$ChTraitsCRT@D@ATL@@SAPA_WPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3IDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CImpIDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2IDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CImpIDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IUnknown@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@IDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CImpIDispatch@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUIDispatch@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCImpIDispatch@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4IDispatch@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4CImpIDispatch@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CImpIDispatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
CONST	SEGMENT
$SG197550 DB	'calllhbox', 00H
$SG197626 DB	00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	??_R4CImpIDispatch@@6B@				; CImpIDispatch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImpIDispatch@@@8			; CImpIDispatch `RTTI Type Descriptor'
PUBLIC	??_R3CImpIDispatch@@8				; CImpIDispatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImpIDispatch@@8				; CImpIDispatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CImpIDispatch@@8			; CImpIDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1A@?0A@A@IDispatch@@8			; IDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AUIDispatch@@@8				; IDispatch `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??0IDispatch@@QAE@XZ				; IDispatch::IDispatch
PUBLIC	??0CImpIDispatch@@QAE@XZ			; CImpIDispatch::CImpIDispatch
PUBLIC	?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z ; CImpIDispatch::QueryInterface
PUBLIC	?AddRef@CImpIDispatch@@UAGKXZ			; CImpIDispatch::AddRef
PUBLIC	?Release@CImpIDispatch@@UAGKXZ			; CImpIDispatch::Release
PUBLIC	?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z	; CImpIDispatch::GetTypeInfoCount
PUBLIC	?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z ; CImpIDispatch::GetTypeInfo
PUBLIC	?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z ; CImpIDispatch::GetIDsOfNames
PUBLIC	?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z ; CImpIDispatch::Invoke
PUBLIC	??_7CImpIDispatch@@6B@				; CImpIDispatch::`vftable'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7CImpIDispatch@@6B@
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\webinteract\idispimp.cpp
CONST	SEGMENT
??_7CImpIDispatch@@6B@ DD FLAT:??_R4CImpIDispatch@@6B@	; CImpIDispatch::`vftable'
	DD	FLAT:?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CImpIDispatch@@UAGKXZ
	DD	FLAT:?Release@CImpIDispatch@@UAGKXZ
	DD	FLAT:?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z
	DD	FLAT:?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z
	DD	FLAT:?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z
	DD	FLAT:?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z
CONST	ENDS
;	COMDAT ??_R4CImpIDispatch@@6B@
rdata$r	SEGMENT
??_R4CImpIDispatch@@6B@ DD 00H				; CImpIDispatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImpIDispatch@@@8
	DD	FLAT:??_R3CImpIDispatch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImpIDispatch@@@8
_DATA	SEGMENT
??_R0?AVCImpIDispatch@@@8 DD FLAT:??_7type_info@@6B@	; CImpIDispatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImpIDispatch@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CImpIDispatch@@8
rdata$r	SEGMENT
??_R3CImpIDispatch@@8 DD 00H				; CImpIDispatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CImpIDispatch@@8
rdata$r	ENDS
;	COMDAT ??_R2CImpIDispatch@@8
rdata$r	SEGMENT
??_R2CImpIDispatch@@8 DD FLAT:??_R1A@?0A@A@CImpIDispatch@@8 ; CImpIDispatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@IDispatch@@8
	DD	FLAT:??_R1A@?0A@A@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CImpIDispatch@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CImpIDispatch@@8 DD FLAT:??_R0?AVCImpIDispatch@@@8 ; CImpIDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@IDispatch@@8
rdata$r	SEGMENT
??_R1A@?0A@A@IDispatch@@8 DD FLAT:??_R0?AUIDispatch@@@8	; IDispatch::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AUIDispatch@@@8
_DATA	SEGMENT
??_R0?AUIDispatch@@@8 DD FLAT:??_7type_info@@6B@	; IDispatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIDispatch@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@A@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CImpIDispatch@@QAE@XZ PROC NEAR			; CImpIDispatch::CImpIDispatch
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDispatch@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CImpIDispatch@@6B@

; 26   :     m_cRef = 0;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 27   : }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CImpIDispatch@@QAE@XZ ENDP				; CImpIDispatch::CImpIDispatch
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IDispatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDispatch@@QAE@XZ PROC NEAR				; IDispatch::IDispatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDispatch@@QAE@XZ ENDP				; IDispatch::IDispatch
_TEXT	ENDS
PUBLIC	??1CImpIDispatch@@QAE@XZ			; CImpIDispatch::~CImpIDispatch
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImpIDispatch@@QAE@XZ PROC NEAR			; CImpIDispatch::~CImpIDispatch
; _this$ = ecx

; 30   : {

  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	51		 push	 ecx
  00034	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CImpIDispatch@@6B@

; 31   : 	ASSERT( m_cRef == 0 );
; 32   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??1CImpIDispatch@@QAE@XZ ENDP				; CImpIDispatch::~CImpIDispatch
_TEXT	ENDS
PUBLIC	_==
EXTRN	_IID_IDispatch:BYTE
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CImpIDispatch::QueryInterface

; 45   : {

  00050	55		 push	 ebp
  00051	8b ec		 mov	 ebp, esp

; 46   :     *ppv = NULL;

  00053	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00056	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 47   : 
; 48   : 
; 49   :     if ( IID_IDispatch == riid )

  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  0005f	51		 push	 ecx
  00060	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDispatch
  00065	e8 00 00 00 00	 call	 _==
  0006a	83 c4 08	 add	 esp, 8
  0006d	85 c0		 test	 eax, eax
  0006f	74 08		 je	 SHORT $L197570

; 50   : 	{
; 51   :         *ppv = this;

  00071	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00074	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00077	89 02		 mov	 DWORD PTR [edx], eax
$L197570:

; 52   : 	}
; 53   : 	
; 54   : 	if ( NULL != *ppv )

  00079	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  0007c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0007f	74 14		 je	 SHORT $L197571

; 55   :     {
; 56   :         ((LPUNKNOWN)*ppv)->AddRef();

  00081	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	8b 00		 mov	 eax, DWORD PTR [eax]
  0008d	52		 push	 edx
  0008e	ff 50 04	 call	 DWORD PTR [eax+4]

; 57   :         return NOERROR;

  00091	33 c0		 xor	 eax, eax
  00093	eb 05		 jmp	 SHORT $L197569
$L197571:

; 58   :     }
; 59   : 
; 60   : 	return E_NOINTERFACE;

  00095	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
$L197569:

; 61   : }

  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CImpIDispatch@@UAGJABU_GUID@@PAPAX@Z ENDP ; CImpIDispatch::QueryInterface
; Function compile flags: /Odt
_this$ = 8						; size = 4
?AddRef@CImpIDispatch@@UAGKXZ PROC NEAR			; CImpIDispatch::AddRef

; 65   : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp

; 66   :     return ++m_cRef;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a9	83 c1 01	 add	 ecx, 1
  000ac	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000af	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000b2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 67   : }

  000b8	5d		 pop	 ebp
  000b9	c2 04 00	 ret	 4
?AddRef@CImpIDispatch@@UAGKXZ ENDP			; CImpIDispatch::AddRef
; Function compile flags: /Odt
_this$ = 8						; size = 4
?Release@CImpIDispatch@@UAGKXZ PROC NEAR		; CImpIDispatch::Release

; 70   : {

  000c0	55		 push	 ebp
  000c1	8b ec		 mov	 ebp, esp

; 71   :     return --m_cRef;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	83 e9 01	 sub	 ecx, 1
  000cc	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000d2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 72   : }

  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
?Release@CImpIDispatch@@UAGKXZ ENDP			; CImpIDispatch::Release
; Function compile flags: /Odt
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z PROC NEAR	; CImpIDispatch::GetTypeInfoCount

; 77   : {

  000e0	55		 push	 ebp
  000e1	8b ec		 mov	 ebp, esp

; 78   : 	return E_NOTIMPL;

  000e3	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 79   : }

  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
?GetTypeInfoCount@CImpIDispatch@@UAGJPAI@Z ENDP		; CImpIDispatch::GetTypeInfoCount
; Function compile flags: /Odt
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z PROC NEAR ; CImpIDispatch::GetTypeInfo

; 85   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp

; 86   : 	return E_NOTIMPL;

  000f3	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 87   : }

  000f8	5d		 pop	 ebp
  000f9	c2 10 00	 ret	 16			; 00000010H
?GetTypeInfo@CImpIDispatch@@UAGJIKPAPAUITypeInfo@@@Z ENDP ; CImpIDispatch::GetTypeInfo
_TEXT	ENDS
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_cszName$197607 = -12					; size = 4
_hr$ = -8						; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_rgszNames$ = 16					; size = 4
_cNames$ = 20						; size = 4
_lcid$ = 24						; size = 4
_rgDispId$ = 28						; size = 4
?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z PROC NEAR ; CImpIDispatch::GetIDsOfNames

; 95   : {

  00100	55		 push	 ebp
  00101	8b ec		 mov	 ebp, esp
  00103	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 96   : 	HRESULT hr;
; 97   : 	UINT	i;
; 98   : 
; 99   : 	// Assume some degree of success
; 100  : 	hr = NOERROR;

  00106	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 101  : 
; 102  : 	for ( i=0; i < cNames; i++) {

  0010d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00114	eb 09		 jmp	 SHORT $L197604
$L197605:
  00116	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00119	83 c0 01	 add	 eax, 1
  0011c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L197604:
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00122	3b 4d 14	 cmp	 ecx, DWORD PTR _cNames$[ebp]
  00125	73 59		 jae	 SHORT $L197606

; 103  : 		CString cszName  = CString(rgszNames[i]);

  00127	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0012a	8b 45 10	 mov	 eax, DWORD PTR _rgszNames$[ebp]
  0012d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00130	51		 push	 ecx
  00131	8d 4d f4	 lea	 ecx, DWORD PTR _cszName$197607[ebp]
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z

; 104  : 
; 105  : 		if(cszName == cszCB_CallLhBox)

  0013a	68 00 00 00 00	 push	 OFFSET FLAT:?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
  0013f	8d 55 f4	 lea	 edx, DWORD PTR _cszName$197607[ebp]
  00142	52		 push	 edx
  00143	e8 00 00 00 00	 call	 ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
  00148	83 c4 08	 add	 esp, 8
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	74 0f		 je	 SHORT $L197609

; 106  : 		{
; 107  : 			rgDispId[i] = DISPID_CB_calllhbox;

  00152	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00155	8b 55 1c	 mov	 edx, DWORD PTR _rgDispId$[ebp]
  00158	c7 04 8a 01 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 1

; 108  : 		}		
; 109  : 		else {

  0015f	eb 14		 jmp	 SHORT $L197610
$L197609:

; 110  : 			// One or more are unknown so set the return code accordingly
; 111  : 			hr = ResultFromScode(DISP_E_UNKNOWNNAME);

  00161	c7 45 f8 06 00
	02 80		 mov	 DWORD PTR _hr$[ebp], -2147352570 ; 80020006H

; 112  : 			rgDispId[i] = DISPID_UNKNOWN;

  00168	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0016b	8b 4d 1c	 mov	 ecx, DWORD PTR _rgDispId$[ebp]
  0016e	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [ecx+eax*4], -1
$L197610:

; 113  : 		}
; 114  : 	}

  00175	8d 4d f4	 lea	 ecx, DWORD PTR _cszName$197607[ebp]
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0017e	eb 96		 jmp	 SHORT $L197605
$L197606:

; 115  : 	return hr;

  00180	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 116  : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 18 00	 ret	 24			; 00000018H
?GetIDsOfNames@CImpIDispatch@@UAGJABU_GUID@@PAPA_WIKPAJ@Z ENDP ; CImpIDispatch::GetIDsOfNames
_TEXT	ENDS
PUBLIC	_IsEqualGUID
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC NEAR					; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID
  00010	83 c4 08	 add	 esp, 8

; 195  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC NEAR					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 162  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
EXTRN	__imp__VariantInit@4:NEAR
EXTRN	__imp_?AllocSysString@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPA_WXZ:NEAR
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
EXTRN	?GetInstance@CWebManager@@SAPAV1@XZ:NEAR	; CWebManager::GetInstance
EXTRN	?CallGBoxFromWeb@CWebManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:NEAR ; CWebManager::CallGBoxFromWeb
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
xdata$x	SEGMENT
$T198189 DD	0ffffffffH
	DD	FLAT:$L198176
	DD	00H
	DD	FLAT:$L198177
	DD	01H
	DD	FLAT:$L198178
	DD	00H
	DD	FLAT:$L198179
$T198183 DD	019930520H
	DD	04H
	DD	FLAT:$T198189
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\webinteract\idispimp.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -100						; size = 4
tv66 = -96						; size = 4
tv138 = -92						; size = 4
tv73 = -88						; size = 4
$T198175 = -84						; size = 4
$T198174 = -80						; size = 4
$T198173 = -76						; size = 28
_cszArg1$197628 = -48					; size = 4
_strRes$197625 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_this$ = 8						; size = 4
_dispIdMember$ = 12					; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
_wFlags$ = 24						; size = 2
_pDispParams$ = 28					; size = 4
_pVarResult$ = 32					; size = 4
___formal$ = 36						; size = 4
_puArgErr$ = 40						; size = 4
?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z PROC NEAR ; CImpIDispatch::Invoke

; 127  : {	

  00190	55		 push	 ebp
  00191	8b ec		 mov	 ebp, esp
  00193	6a ff		 push	 -1
  00195	68 00 00 00 00	 push	 __ehhandler$?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z
  0019a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  001a0	50		 push	 eax
  001a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  001a8	83 ec 58	 sub	 esp, 88			; 00000058H
  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001b0	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 128  : 	
; 129  : 	if(dispIdMember == DISPID_CB_calllhbox) 

  001b3	83 7d 0c 01	 cmp	 DWORD PTR _dispIdMember$[ebp], 1
  001b7	0f 85 0b 01 00
	00		 jne	 $L197624

; 130  : 	{
; 131  : 		string strRes = "";

  001bd	68 00 00 00 00	 push	 OFFSET FLAT:$SG197626
  001c2	8d 4d d4	 lea	 ecx, DWORD PTR _strRes$197625[ebp]
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  001cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 132  : 		if ( wFlags & DISPATCH_METHOD )

  001d2	0f b7 45 18	 movzx	 eax, WORD PTR _wFlags$[ebp]
  001d6	83 e0 01	 and	 eax, 1
  001d9	74 64		 je	 SHORT $L197627

; 133  : 		{	
; 134  : 			CString cszArg1= (CString)pDispParams->rgvarg[0].bstrVal; // in case you want a CString copy			

  001db	8b 4d 1c	 mov	 ecx, DWORD PTR _pDispParams$[ebp]
  001de	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e3	50		 push	 eax
  001e4	8d 4d d0	 lea	 ecx, DWORD PTR _cszArg1$197628[ebp]
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z
  001ed	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 135  : 			CWebManager::GetInstance()->CallGBoxFromWeb(string(cszArg1),strRes);

  001f1	8d 4d d0	 lea	 ecx, DWORD PTR _cszArg1$197628[ebp]
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001fa	50		 push	 eax
  001fb	8d 4d b4	 lea	 ecx, DWORD PTR $T198173[ebp]
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00204	89 45 a8	 mov	 DWORD PTR tv73[ebp], eax
  00207	8b 4d a8	 mov	 ecx, DWORD PTR tv73[ebp]
  0020a	89 4d a4	 mov	 DWORD PTR tv138[ebp], ecx
  0020d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00211	8d 55 d4	 lea	 edx, DWORD PTR _strRes$197625[ebp]
  00214	52		 push	 edx
  00215	8b 45 a4	 mov	 eax, DWORD PTR tv138[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ?GetInstance@CWebManager@@SAPAV1@XZ ; CWebManager::GetInstance
  0021e	8b c8		 mov	 ecx, eax
  00220	e8 00 00 00 00	 call	 ?CallGBoxFromWeb@CWebManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CWebManager::CallGBoxFromWeb
  00225	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00229	8d 4d b4	 lea	 ecx, DWORD PTR $T198173[ebp]
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 136  : 		}

  00232	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00236	8d 4d d0	 lea	 ecx, DWORD PTR _cszArg1$197628[ebp]
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L197627:

; 137  : 
; 138  : 		if(wFlags & DISPATCH_PROPERTYGET)

  0023f	0f b7 4d 18	 movzx	 ecx, WORD PTR _wFlags$[ebp]
  00243	83 e1 02	 and	 ecx, 2
  00246	74 70		 je	 SHORT $L197632

; 139  : 		{
; 140  : 			if(pVarResult != NULL)

  00248	83 7d 20 00	 cmp	 DWORD PTR _pVarResult$[ebp], 0
  0024c	74 4e		 je	 SHORT $L197633

; 141  : 			{
; 142  : 				VariantInit(pVarResult);

  0024e	8b 55 20	 mov	 edx, DWORD PTR _pVarResult$[ebp]
  00251	52		 push	 edx
  00252	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantInit@4

; 143  : 				V_VT(pVarResult)=VT_BSTR;

  00258	8b 45 20	 mov	 eax, DWORD PTR _pVarResult$[ebp]
  0025b	66 c7 00 08 00	 mov	 WORD PTR [eax], 8

; 144  : 				//				V_BOOL(pVarResult) = false;
; 145  : 				pVarResult->bstrVal = CString(strRes.c_str()).AllocSysString();

  00260	8d 4d d4	 lea	 ecx, DWORD PTR _strRes$197625[ebp]
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00269	50		 push	 eax
  0026a	8d 4d b0	 lea	 ecx, DWORD PTR $T198174[ebp]
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00273	89 45 a0	 mov	 DWORD PTR tv66[ebp], eax
  00276	8b 4d a0	 mov	 ecx, DWORD PTR tv66[ebp]
  00279	89 4d 9c	 mov	 DWORD PTR tv140[ebp], ecx
  0027c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00280	8b 4d 9c	 mov	 ecx, DWORD PTR tv140[ebp]
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AllocSysString@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPA_WXZ
  00289	8b 55 20	 mov	 edx, DWORD PTR _pVarResult$[ebp]
  0028c	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0028f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00293	8d 4d b0	 lea	 ecx, DWORD PTR $T198174[ebp]
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L197633:

; 146  : 			}
; 147  : 			return 1;

  0029c	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR $T198175[ebp], 1
  002a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002aa	8d 4d d4	 lea	 ecx, DWORD PTR _strRes$197625[ebp]
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  002b3	8b 45 ac	 mov	 eax, DWORD PTR $T198175[ebp]
  002b6	eb 12		 jmp	 SHORT $L197623
$L197632:

; 148  : 		}	
; 149  : 	}

  002b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002bf	8d 4d d4	 lea	 ecx, DWORD PTR _strRes$197625[ebp]
  002c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L197624:

; 150  :  	return S_OK;

  002c8	33 c0		 xor	 eax, eax
$L197623:

; 151  : }

  002ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002d4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002dc	8b e5		 mov	 esp, ebp
  002de	5d		 pop	 ebp
  002df	c2 24 00	 ret	 36			; 00000024H
_TEXT	ENDS
text$x	SEGMENT
$L198176:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strRes$197625[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198177:
  00009	8d 4d d0	 lea	 ecx, DWORD PTR _cszArg1$197628[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L198178:
  00012	8d 4d b4	 lea	 ecx, DWORD PTR $T198173[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L198179:
  0001b	8d 4d b0	 lea	 ecx, DWORD PTR $T198174[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z:
  00024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T198183
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Invoke@CImpIDispatch@@UAGJJABU_GUID@@KGPAUtagDISPPARAMS@@PAUtagVARIANT@@PAUtagEXCEPINFO@@PAI@Z ENDP ; CImpIDispatch::Invoke
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z PROC NEAR ; ATL::operator==, COMDAT

; 2081 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2082 : 		return( str1.Compare( str2 ) == 0 );

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _str2$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _str1$[ebp]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 2083 : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ENDP ; ATL::operator==
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00011	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0001b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00028	83 bd 70 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0002f	75 15		 jne	 SHORT $L24173
  00031	83 bd 64 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00038	72 0c		 jb	 SHORT $L24173

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  0003a	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00044	eb 0a		 jmp	 SHORT $L24174
$L24173:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00046	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24174:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  00050	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0005c	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 93   : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24161 = -24					; size = 4
_lcidThread$ = -20					; size = 4
_szACP$ = -16						; size = 7
__$ArrayPad$ = -8					; size = 4
_nACP$ = -4						; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0001b	89 45 ec	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  0001e	6a 07		 push	 7
  00020	8d 45 f0	 lea	 eax, DWORD PTR _szACP$[ebp]
  00023	50		 push	 eax
  00024	68 04 10 00 00	 push	 4100			; 00001004H
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  0002c	51		 push	 ecx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00033	85 c0		 test	 eax, eax
  00035	74 34		 je	 SHORT $L24160

; 111  : 	{
; 112  : 		char* pch = szACP;

  00037	8d 55 f0	 lea	 edx, DWORD PTR _szACP$[ebp]
  0003a	89 55 e8	 mov	 DWORD PTR _pch$24161[ebp], edx
$L24163:

; 113  : 		while (*pch != '\0')

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00040	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00043	85 c9		 test	 ecx, ecx
  00045	74 24		 je	 SHORT $L24160

; 114  : 		{
; 115  : 			nACP *= 10;

  00047	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  0004a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0004d	89 55 fc	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00050	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00053	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  00059	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0005d	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
  00060	8b 4d e8	 mov	 ecx, DWORD PTR _pch$24161[ebp]
  00063	83 c1 01	 add	 ecx, 1
  00066	89 4d e8	 mov	 DWORD PTR _pch$24161[ebp], ecx

; 117  : 		}

  00069	eb d2		 jmp	 SHORT $L24163
$L24160:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0006f	75 09		 jne	 SHORT $L24165

; 121  : 		nACP = ::GetACP();

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00077	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
$L24165:

; 122  : 
; 123  : 	return nACP;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S7	DD	FLAT:_$E5
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\webinteract\idispimp.cpp
CRT$XCU	ENDS
;	COMDAT _$E5
text$yc	SEGMENT
_$E5	PROC NEAR					; COMDAT

; 12   : CString cszCB_CallLhBox = "calllhbox";

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET FLAT:$SG197550
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00013	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_$E5	ENDP
; Function compile flags: /Odt
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_$E6	ENDP
text$yd	ENDS
PUBLIC	?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; cszCB_CallLhBox
_BSS	SEGMENT
?cszCB_CallLhBox@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A DD 01H DUP (?) ; cszCB_CallLhBox
_BSS	ENDS
END
