; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\module\HTTPControl\JudgeFirewall.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?s_bTestKwMusic@?1??Test_Ping@@YAXXZ@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_s_iHTTPRes DD	0ffffffffH
_DATA	ENDS
CONST	SEGMENT
$SG197452 DB	'\system32\ping.exe www.baidu.com', 00H
	ORG $+3
$SG197470 DB	'%d,%d', 00H
	ORG $+2
$SG197473 DB	'Firewall', 00H
CONST	ENDS
PUBLIC	?Ping_Thread@@YGKPAX@Z				; Ping_Thread
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp__GetExitCodeProcess@8:NEAR
EXTRN	__imp__GetLastError@0:NEAR
EXTRN	__imp__CreateProcessA@40:NEAR
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	_memset:NEAR
EXTRN	?GetWindowsDir@YL_DirInfo@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:NEAR ; YL_DirInfo::GetWindowsDir
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
xdata$x	SEGMENT
$T197884 DD	0ffffffffH
	DD	FLAT:$L197874
$T197878 DD	019930520H
	DD	01H
	DD	FLAT:$T197884
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\module\httpcontrol\judgefirewall.cpp
xdata$x	ENDS
_TEXT	SEGMENT
$T197873 = -672						; size = 4
$T197872 = -668						; size = 4
_bExit$ = -664						; size = 4
_si$ = -660						; size = 68
_pi$ = -584						; size = 16
_dw$ = -568						; size = 4
_strDir$ = -564						; size = 28
_nRet$ = -536						; size = 4
_cmd$ = -532						; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pArg$ = 8						; size = 4
?Ping_Thread@@YGKPAX@Z PROC NEAR			; Ping_Thread

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Ping_Thread@@YGKPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	81 ec 94 02 00
	00		 sub	 esp, 660		; 00000294H
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 10   : 	STARTUPINFO    		 si;
; 11   : 	PROCESS_INFORMATION  pi;
; 12   : 	char cmd[512];
; 13   : 	int nRet;
; 14   : 
; 15   : 	memset(&si, 0, sizeof (STARTUPINFO)) ;

  00026	6a 44		 push	 68			; 00000044H
  00028	6a 00		 push	 0
  0002a	8d 85 6c fd ff
	ff		 lea	 eax, DWORD PTR _si$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16   : 	si.cb = sizeof (STARTUPINFO) ;

  00039	c7 85 6c fd ff
	ff 44 00 00 00	 mov	 DWORD PTR _si$[ebp], 68	; 00000044H

; 17   : 	si.dwFlags = STARTF_USESHOWWINDOW;

  00043	c7 85 98 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _si$[ebp+44], 1

; 18   : 	si.wShowWindow = SW_HIDE;

  0004d	66 c7 85 9c fd
	ff ff 00 00	 mov	 WORD PTR _si$[ebp+48], 0

; 19   : 	memset(&pi, 0, sizeof (PROCESS_INFORMATION));

  00056	6a 10		 push	 16			; 00000010H
  00058	6a 00		 push	 0
  0005a	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _pi$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _memset
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 20   : 	memset(cmd, 0, 512);

  00069	68 00 02 00 00	 push	 512			; 00000200H
  0006e	6a 00		 push	 0
  00070	8d 95 ec fd ff
	ff		 lea	 edx, DWORD PTR _cmd$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _memset
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : 
; 22   : 	string strDir;

  0007f	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strDir$[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 23   : 	YL_DirInfo::GetWindowsDir(strDir);

  00092	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _strDir$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?GetWindowsDir@YL_DirInfo@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; YL_DirInfo::GetWindowsDir
  0009e	83 c4 04	 add	 esp, 4

; 24   : 	strDir += "\\system32\\ping.exe www.baidu.com";

  000a1	68 00 00 00 00	 push	 OFFSET FLAT:$SG197452
  000a6	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strDir$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 25   : 
; 26   : 	nRet = CreateProcess (NULL,(LPSTR)(strDir.c_str()), NULL, NULL,
; 27   : 		FALSE, (DWORD) NORMAL_PRIORITY_CLASS, NULL,NULL, &si, &pi);

  000b2	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _pi$[ebp]
  000b8	51		 push	 ecx
  000b9	8d 95 6c fd ff
	ff		 lea	 edx, DWORD PTR _si$[ebp]
  000bf	52		 push	 edx
  000c0	6a 00		 push	 0
  000c2	6a 00		 push	 0
  000c4	6a 20		 push	 32			; 00000020H
  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strDir$[ebp]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  000d8	50		 push	 eax
  000d9	6a 00		 push	 0
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateProcessA@40
  000e1	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _nRet$[ebp], eax

; 28   : 
; 29   : 	DWORD dw = GetLastError();

  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000ed	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _dw$[ebp], eax

; 30   : 
; 31   : 	if(nRet==0)

  000f3	83 bd e8 fd ff
	ff 00		 cmp	 DWORD PTR _nRet$[ebp], 0
  000fa	75 25		 jne	 SHORT $L197456

; 32   : 	{
; 33   : 		return 0;

  000fc	c7 85 64 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T197872[ebp], 0
  00106	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010d	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strDir$[ebp]
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00119	8b 85 64 fd ff
	ff		 mov	 eax, DWORD PTR $T197872[ebp]
  0011f	eb 59		 jmp	 SHORT $L197443
$L197456:

; 34   : 	}
; 35   : 
; 36   : 	WaitForSingleObject(pi.hProcess, INFINITE);

  00121	6a ff		 push	 -1
  00123	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _pi$[ebp]
  00129	50		 push	 eax
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 37   : 	BOOL bExit = GetExitCodeProcess( pi.hProcess,&dw );

  00130	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR _dw$[ebp]
  00136	51		 push	 ecx
  00137	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _pi$[ebp]
  0013d	52		 push	 edx
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetExitCodeProcess@8
  00144	89 85 68 fd ff
	ff		 mov	 DWORD PTR _bExit$[ebp], eax

; 38   : 	CloseHandle(pi.hProcess);		

  0014a	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _pi$[ebp]
  00150	50		 push	 eax
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 39   : 	return 0;

  00157	c7 85 60 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T197873[ebp], 0
  00161	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00168	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strDir$[ebp]
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00174	8b 85 60 fd ff
	ff		 mov	 eax, DWORD PTR $T197873[ebp]
$L197443:

; 40   : }

  0017a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00184	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L197874:
  00000	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strDir$[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Ping_Thread@@YGKPAX@Z:
  0000c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T197878
  00011	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Ping_Thread@@YGKPAX@Z ENDP				; Ping_Thread
PUBLIC	?SetHTTPRes@CJudgeFirewall@@SAXW4HTTP_REQUEST_TYPE@@H@Z ; CJudgeFirewall::SetHTTPRes
EXTRN	__imp_?LogRealMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0_NPAPAEPAI@Z:NEAR
EXTRN	__imp__sprintf:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:NEAR
xdata$x	SEGMENT
$T197896 DD	0ffffffffH
	DD	FLAT:$L197890
	DD	00H
	DD	FLAT:$L197891
$T197893 DD	019930520H
	DD	02H
	DD	FLAT:$T197896
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
$T197889 = -588						; size = 28
$T197888 = -560						; size = 28
_szBuf$197469 = -532					; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_hrt$ = 8						; size = 4
_iRes$ = 12						; size = 4
?SetHTTPRes@CJudgeFirewall@@SAXW4HTTP_REQUEST_TYPE@@H@Z PROC NEAR ; CJudgeFirewall::SetHTTPRes

; 50   : {

  001a0	55		 push	 ebp
  001a1	8b ec		 mov	 ebp, esp
  001a3	6a ff		 push	 -1
  001a5	68 00 00 00 00	 push	 __ehhandler$?SetHTTPRes@CJudgeFirewall@@SAXW4HTTP_REQUEST_TYPE@@H@Z
  001aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  001b0	50		 push	 eax
  001b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  001b8	81 ec 40 02 00
	00		 sub	 esp, 576		; 00000240H
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  001c3	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 51   : 	if( hrt == HTTP_SEARCH )

  001c6	83 7d 08 01	 cmp	 DWORD PTR _hrt$[ebp], 1
  001ca	0f 85 a0 00 00
	00		 jne	 $L197468

; 52   : 	{
; 53   : 		char szBuf[512];
; 54   : 		sprintf(szBuf,"%d,%d",hrt,iRes);

  001d0	8b 45 0c	 mov	 eax, DWORD PTR _iRes$[ebp]
  001d3	50		 push	 eax
  001d4	8b 4d 08	 mov	 ecx, DWORD PTR _hrt$[ebp]
  001d7	51		 push	 ecx
  001d8	68 00 00 00 00	 push	 OFFSET FLAT:$SG197470
  001dd	8d 95 ec fd ff
	ff		 lea	 edx, DWORD PTR _szBuf$197469[ebp]
  001e3	52		 push	 edx
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  001ea	83 c4 10	 add	 esp, 16			; 00000010H

; 55   : 
; 56   : 		LogRealMsg("Firewall",szBuf);

  001ed	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$197469[ebp]
  001f3	50		 push	 eax
  001f4	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T197888[ebp]
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00200	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00207	68 00 00 00 00	 push	 OFFSET FLAT:$SG197473
  0020c	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T197889[ebp]
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  00218	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0021c	6a 00		 push	 0
  0021e	6a 00		 push	 0
  00220	6a 00		 push	 0
  00222	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T197888[ebp]
  00228	51		 push	 ecx
  00229	8d 95 b4 fd ff
	ff		 lea	 edx, DWORD PTR $T197889[ebp]
  0022f	52		 push	 edx
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LogRealMsg@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0_NPAPAEPAI@Z
  00236	83 c4 14	 add	 esp, 20			; 00000014H
  00239	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0023d	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T197889[ebp]
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00249	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00250	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T197888[ebp]
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 57   : 		
; 58   : 		if( s_iHTTPRes == 0 && iRes == 0 )

  0025c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _s_iHTTPRes, 0
  00263	75 0b		 jne	 SHORT $L197468
  00265	83 7d 0c 00	 cmp	 DWORD PTR _iRes$[ebp], 0
  00269	75 05		 jne	 SHORT $L197468

; 59   : 		{
; 60   : 			Test_Ping();

  0026b	e8 00 00 00 00	 call	 ?Test_Ping@@YAXXZ	; Test_Ping
$L197468:

; 61   : 		}
; 62   : 	}	
; 63   : 
; 64   : 	if( hrt == HTTP_WEB_COMMAND )

  00270	83 7d 08 00	 cmp	 DWORD PTR _hrt$[ebp], 0
  00274	75 08		 jne	 SHORT $L197467

; 65   : 	{
; 66   : 		s_iHTTPRes = iRes;

  00276	8b 45 0c	 mov	 eax, DWORD PTR _iRes$[ebp]
  00279	a3 00 00 00 00	 mov	 DWORD PTR _s_iHTTPRes, eax
$L197467:

; 67   : 	}
; 68   : }

  0027e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00281	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00288	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00290	8b e5		 mov	 esp, ebp
  00292	5d		 pop	 ebp
  00293	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L197890:
  00016	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T197888[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L197891:
  00022	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T197889[ebp]
  00028	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?SetHTTPRes@CJudgeFirewall@@SAXW4HTTP_REQUEST_TYPE@@H@Z:
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T197893
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetHTTPRes@CJudgeFirewall@@SAXW4HTTP_REQUEST_TYPE@@H@Z ENDP ; CJudgeFirewall::SetHTTPRes
EXTRN	__imp__CreateThread@24:NEAR
;	COMDAT ?s_bTestKwMusic@?1??Test_Ping@@YAXXZ@4HA
_BSS	SEGMENT
?s_bTestKwMusic@?1??Test_Ping@@YAXXZ@4HA DD 01H DUP (?)	; `Test_Ping'::`2'::s_bTestKwMusic
; Function compile flags: /Odt
_BSS	ENDS
_TEXT	SEGMENT
?Test_Ping@@YAXXZ PROC NEAR				; Test_Ping

; 43   : {

  002a0	55		 push	 ebp
  002a1	8b ec		 mov	 ebp, esp

; 44   : 	static BOOL		s_bTestKwMusic	= FALSE;
; 45   : 	CloseHandle( CreateThread(0,0,Ping_Thread,NULL,0,0) );

  002a3	6a 00		 push	 0
  002a5	6a 00		 push	 0
  002a7	6a 00		 push	 0
  002a9	68 00 00 00 00	 push	 OFFSET FLAT:?Ping_Thread@@YGKPAX@Z ; Ping_Thread
  002ae	6a 00		 push	 0
  002b0	6a 00		 push	 0
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  002b8	50		 push	 eax
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 46   : 	s_bTestKwMusic = TRUE;

  002bf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bTestKwMusic@?1??Test_Ping@@YAXXZ@4HA, 1

; 47   : }

  002c9	5d		 pop	 ebp
  002ca	c3		 ret	 0
?Test_Ping@@YAXXZ ENDP					; Test_Ping
_TEXT	ENDS
END
