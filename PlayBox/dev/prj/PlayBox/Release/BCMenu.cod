; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\BCMenu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ??0BCMenuData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWideString@BCMenuData@@QAEPB_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMenuItemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT _$E8
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E9
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT _$E11
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E13
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E14
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GBCMenuData@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindCharRev@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLowercase@?$ChTraitsCRT@D@ATL@@SAPADPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FloodCharacters@?$ChTraitsCRT@D@ATL@@SAXDHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@HAAH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@HAAH@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CArray@HAAH@@QAEHAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CArray@HH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@?$CArray@HH@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CArray@HH@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CArray@HH@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HH@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3BCMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@HH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HH@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CPtrArray@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CArray@HH@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCPtrArray@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R4BCMenu@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R4?$CArray@HH@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?Escape@CDC@@UAEHHHPBDPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TextOutA@CDC@@UAEHHHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtVisible@CDC@@UBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CArray@HH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CArray@PAVBCMenu@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsStoring@CArchive@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CArray@HAAH@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??ACPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CPtrArray@@QAEHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Replace@CImageList@@QAEHHPAUHICON__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Rectangle@CDC@@QAEHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateHatchBrush@CBrush@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9CSize@@QBEHUtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSubMenu@CMenu@@QBEPAV1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteMenu@CMenu@@QAEHII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveMenu@CMenu@@QAEHII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PatBlt@CDC@@QAEHHHHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QBEPBUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadBitmapA@CBitmap@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CImageList@@QAEHPAUHICON__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPixel@CDC@@QBEKHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPixel@CDC@@QAEKHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ellipse@CDC@@QAEHPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CPtrArray@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CreatePopupMenu@CMenu@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateMenu@CMenu@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMenuItemID@CMenu@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R0?AVCMenu@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVBCMenu@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetMenuState@CMenu@@QBEIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCount@CControlBar@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadToolBar@CToolBar@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CImageList@@QAEHPAVCBitmap@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertMenuA@CMenu@@QAEHIIIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMenuItemCount@CMenu@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendMenuA@CMenu@@QAEHIIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDC@CWnd@@QAEPAVCDC@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDesktopWindow@CWnd@@SGPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetMainWnd@@YGPAVCWnd@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCBrush@@QBEPAUHBRUSH__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetImageCount@CImageList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBkMode@CDC@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCBitmap@@QBEPAUHBITMAP__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRect@CRect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreatePen@CPen@@QAEHHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CPen@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCPen@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CPen@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CPen@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPen@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPen@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateSolidBrush@CBrush@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CBrush@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBrush@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBrush@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBrush@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBrush@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBrush@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDeviceCaps@CDC@@QBEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@CPtrArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetUpperBound@CPtrArray@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7BCMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CMenu@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CMenu@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMenu@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?classBCMenu@BCMenu@@2UCRuntimeClass@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPrinting@CDC@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?m_iconX@BCMenu@@1HA				; BCMenu::m_iconX
PUBLIC	?m_iconY@BCMenu@@1HA				; BCMenu::m_iconY
PUBLIC	?original_drawmode@BCMenu@@1IA			; BCMenu::original_drawmode
PUBLIC	?original_select_disabled@BCMenu@@1HA		; BCMenu::original_select_disabled
PUBLIC	?xp_drawmode@BCMenu@@1IA			; BCMenu::xp_drawmode
PUBLIC	?xp_select_disabled@BCMenu@@1HA			; BCMenu::xp_select_disabled
PUBLIC	?xp_draw_3D_bitmaps@BCMenu@@1HA			; BCMenu::xp_draw_3D_bitmaps
PUBLIC	?hicolor_bitmaps@BCMenu@@1HA			; BCMenu::hicolor_bitmaps
PUBLIC	?xp_space_accelerators@BCMenu@@1HA		; BCMenu::xp_space_accelerators
PUBLIC	?original_space_accelerators@BCMenu@@1HA	; BCMenu::original_space_accelerators
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?classBCMenu@BCMenu@@2UCRuntimeClass@@B		; BCMenu::classBCMenu
EXTRN	?GetThisClass@CMenu@@SGPAUCRuntimeClass@@XZ:NEAR ; CMenu::GetThisClass
_BSS	SEGMENT
?original_drawmode@BCMenu@@1IA DD 01H DUP (?)		; BCMenu::original_drawmode
?xp_select_disabled@BCMenu@@1HA DD 01H DUP (?)		; BCMenu::xp_select_disabled
?hicolor_bitmaps@BCMenu@@1HA DD 01H DUP (?)		; BCMenu::hicolor_bitmaps
_BSS	ENDS
_DATA	SEGMENT
?original_select_disabled@BCMenu@@1HA DD 01H		; BCMenu::original_select_disabled
?xp_drawmode@BCMenu@@1IA DD 01H				; BCMenu::xp_drawmode
?xp_draw_3D_bitmaps@BCMenu@@1HA DD 01H			; BCMenu::xp_draw_3D_bitmaps
?xp_space_accelerators@BCMenu@@1HA DD 01H		; BCMenu::xp_space_accelerators
?original_space_accelerators@BCMenu@@1HA DD 01H		; BCMenu::original_space_accelerators
?m_iconX@BCMenu@@1HA DD 010H				; BCMenu::m_iconX
?m_iconY@BCMenu@@1HA DD 0fH				; BCMenu::m_iconY
_DATA	ENDS
CONST	SEGMENT
$SG198185 DB	'BCMenu', 00H
CONST	ENDS
;	COMDAT ?classBCMenu@BCMenu@@2UCRuntimeClass@@B
CONST	SEGMENT
?classBCMenu@BCMenu@@2UCRuntimeClass@@B DD FLAT:$SG198185 ; BCMenu::classBCMenu
	DD	064H
	DD	0ffffH
	DD	00H
	DD	FLAT:?GetThisClass@CMenu@@SGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
CONST	SEGMENT
	ORG $+1
$SG199588 DB	' ', 00H
$SG199761 DB	00H
$SG200250 DB	00H
$SG200669 DB	'Software\Microsoft\Plus!\Themes\Current', 00H
$SG200674 DB	'Windows Classic.theme', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	?IsShellType@@YA?AW4Win32Type@@XZ		; IsShellType
EXTRN	__imp__GetVersion@0:NEAR
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	_memset:NEAR
EXTRN	__imp__free:NEAR
EXTRN	__imp__malloc:NEAR
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_osvi$ = -12						; size = 4
_ShellType$ = -8					; size = 4
_winVer$ = -4						; size = 4
?IsShellType@@YA?AW4Win32Type@@XZ PROC NEAR		; IsShellType

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 86   : 	Win32Type  ShellType;
; 87   : 	DWORD winVer;
; 88   : 	OSVERSIONINFO *osvi;
; 89   : 	
; 90   : 	winVer=GetVersion();

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersion@0
  0000c	89 45 fc	 mov	 DWORD PTR _winVer$[ebp], eax

; 91   : 	if(winVer<0x80000000){/*NT */

  0000f	81 7d fc 00 00
	00 80		 cmp	 DWORD PTR _winVer$[ebp], -2147483648 ; 80000000H
  00016	0f 83 9c 00 00
	00		 jae	 $L198120

; 92   : 		ShellType=WinNT3;

  0001c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 1

; 93   : 		osvi= (OSVERSIONINFO *)malloc(sizeof(OSVERSIONINFO));

  00023	68 94 00 00 00	 push	 148			; 00000094H
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f4	 mov	 DWORD PTR _osvi$[ebp], eax

; 94   : 		if (osvi!=NULL){

  00034	83 7d f4 00	 cmp	 DWORD PTR _osvi$[ebp], 0
  00038	74 79		 je	 SHORT $L198123

; 95   : 			memset(osvi,0,sizeof(OSVERSIONINFO));

  0003a	68 94 00 00 00	 push	 148			; 00000094H
  0003f	6a 00		 push	 0
  00041	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _memset
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 96   : 			osvi->dwOSVersionInfoSize=sizeof(OSVERSIONINFO);

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  00050	c7 01 94 00 00
	00		 mov	 DWORD PTR [ecx], 148	; 00000094H

; 97   : 			GetVersionEx(osvi);

  00056	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  00059	52		 push	 edx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 98   : 			if(osvi->dwMajorVersion==4L)ShellType=WinNT4;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00063	83 78 04 04	 cmp	 DWORD PTR [eax+4], 4
  00067	75 09		 jne	 SHORT $L198126
  00069	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 5

; 99   : 			else if(osvi->dwMajorVersion==5L&&osvi->dwMinorVersion==0L)ShellType=Win2000;

  00070	eb 34		 jmp	 SHORT $L198127
$L198126:
  00072	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  00075	83 79 04 05	 cmp	 DWORD PTR [ecx+4], 5
  00079	75 12		 jne	 SHORT $L198128
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  0007e	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00082	75 09		 jne	 SHORT $L198128
  00084	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 6

; 100  : 			else if(osvi->dwMajorVersion==5L&&osvi->dwMinorVersion==1L)ShellType=WinXP;

  0008b	eb 19		 jmp	 SHORT $L198127
$L198128:
  0008d	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00090	83 78 04 05	 cmp	 DWORD PTR [eax+4], 5
  00094	75 10		 jne	 SHORT $L198127
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  00099	83 79 08 01	 cmp	 DWORD PTR [ecx+8], 1
  0009d	75 07		 jne	 SHORT $L198127
  0009f	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 7
$L198127:

; 101  : 			free(osvi);

  000a6	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  000a9	52		 push	 edx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000b0	83 c4 04	 add	 esp, 4
$L198123:

; 102  : 		}
; 103  : 	}
; 104  : 	else if  (LOBYTE(LOWORD(winVer))<4)

  000b3	e9 aa 00 00 00	 jmp	 $L198131
$L198120:
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _winVer$[ebp]
  000bb	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000c0	0f b7 c8	 movzx	 ecx, ax
  000c3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000c9	0f b6 d1	 movzx	 edx, cl
  000cc	83 fa 04	 cmp	 edx, 4
  000cf	7d 0c		 jge	 SHORT $L198136

; 105  : 		ShellType=Win32s;

  000d1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 0

; 106  : 	else{

  000d8	e9 85 00 00 00	 jmp	 $L198131
$L198136:

; 107  : 		ShellType=Win95;

  000dd	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 2

; 108  : 		osvi= (OSVERSIONINFO *)malloc(sizeof(OSVERSIONINFO));

  000e4	68 94 00 00 00	 push	 148			; 00000094H
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000ef	83 c4 04	 add	 esp, 4
  000f2	89 45 f4	 mov	 DWORD PTR _osvi$[ebp], eax

; 109  : 		if (osvi!=NULL){

  000f5	83 7d f4 00	 cmp	 DWORD PTR _osvi$[ebp], 0
  000f9	74 67		 je	 SHORT $L198131

; 110  : 			memset(osvi,0,sizeof(OSVERSIONINFO));

  000fb	68 94 00 00 00	 push	 148			; 00000094H
  00100	6a 00		 push	 0
  00102	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _memset
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : 			osvi->dwOSVersionInfoSize=sizeof(OSVERSIONINFO);

  0010e	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  00111	c7 01 94 00 00
	00		 mov	 DWORD PTR [ecx], 148	; 00000094H

; 112  : 			GetVersionEx(osvi);

  00117	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  0011a	52		 push	 edx
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 113  : 			if(osvi->dwMajorVersion==4L&&osvi->dwMinorVersion==10L)ShellType=Win98;

  00121	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00124	83 78 04 04	 cmp	 DWORD PTR [eax+4], 4
  00128	75 12		 jne	 SHORT $L198143
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  0012d	83 79 08 0a	 cmp	 DWORD PTR [ecx+8], 10	; 0000000aH
  00131	75 09		 jne	 SHORT $L198143
  00133	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 3

; 114  : 			else if(osvi->dwMajorVersion==4L&&osvi->dwMinorVersion==90L)ShellType=WinME;

  0013a	eb 19		 jmp	 SHORT $L198144
$L198143:
  0013c	8b 55 f4	 mov	 edx, DWORD PTR _osvi$[ebp]
  0013f	83 7a 04 04	 cmp	 DWORD PTR [edx+4], 4
  00143	75 10		 jne	 SHORT $L198144
  00145	8b 45 f4	 mov	 eax, DWORD PTR _osvi$[ebp]
  00148	83 78 08 5a	 cmp	 DWORD PTR [eax+8], 90	; 0000005aH
  0014c	75 07		 jne	 SHORT $L198144
  0014e	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _ShellType$[ebp], 4
$L198144:

; 115  : 			free(osvi);

  00155	8b 4d f4	 mov	 ecx, DWORD PTR _osvi$[ebp]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0015f	83 c4 04	 add	 esp, 4
$L198131:

; 116  : 		}
; 117  : 	}
; 118  : 	return ShellType;

  00162	8b 45 f8	 mov	 eax, DWORD PTR _ShellType$[ebp]

; 119  : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
?IsShellType@@YA?AW4Win32Type@@XZ ENDP			; IsShellType
_TEXT	ENDS
PUBLIC	?SetAnsiString@BCMenuData@@QAEXPBD@Z		; BCMenuData::SetAnsiString
PUBLIC	?SetWideString@BCMenuData@@QAEXPB_W@Z		; BCMenuData::SetWideString
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
EXTRN	__imp__MultiByteToWideChar@24:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T202305 = -16						; size = 4
$T202304 = -12						; size = 4
_wszUtf8$ = -8						; size = 4
_len$ = -4						; size = 4
_szAnsiString$ = 8					; size = 4
?SetAnsiString@BCMenuData@@QAEXPBD@Z PROC NEAR		; BCMenuData::SetAnsiString
; _this$ = ecx

; 124  : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	83 ec 14	 sub	 esp, 20			; 00000014H
  00176	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 	int len=MultiByteToWideChar(CP_ACP, 0,szAnsiString, -1,NULL,0);

  00179	6a 00		 push	 0
  0017b	6a 00		 push	 0
  0017d	6a ff		 push	 -1
  0017f	8b 45 08	 mov	 eax, DWORD PTR _szAnsiString$[ebp]
  00182	50		 push	 eax
  00183	6a 00		 push	 0
  00185	6a 00		 push	 0
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0018d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 126  : 	wchar_t* wszUtf8 = new wchar_t[len];

  00190	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00193	d1 e1		 shl	 ecx, 1
  00195	51		 push	 ecx
  00196	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0019b	83 c4 04	 add	 esp, 4
  0019e	89 45 f4	 mov	 DWORD PTR $T202304[ebp], eax
  001a1	8b 55 f4	 mov	 edx, DWORD PTR $T202304[ebp]
  001a4	89 55 f8	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 127  : 	memset(wszUtf8, 0, len * 2);

  001a7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  001aa	d1 e0		 shl	 eax, 1
  001ac	50		 push	 eax
  001ad	6a 00		 push	 0
  001af	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 _memset
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 	MultiByteToWideChar(CP_ACP, 0, szAnsiString, -1, (LPWSTR)wszUtf8, len);	

  001bb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  001be	52		 push	 edx
  001bf	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  001c2	50		 push	 eax
  001c3	6a ff		 push	 -1
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _szAnsiString$[ebp]
  001c8	51		 push	 ecx
  001c9	6a 00		 push	 0
  001cb	6a 00		 push	 0
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 129  : 
; 130  : 	SetWideString( wszUtf8);  //SK:  see MFC Tech Note 059

  001d3	8b 55 f8	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  001d6	52		 push	 edx
  001d7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001da	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 131  : 	delete[] wszUtf8;

  001df	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  001e2	89 45 f0	 mov	 DWORD PTR $T202305[ebp], eax
  001e5	8b 4d f0	 mov	 ecx, DWORD PTR $T202305[ebp]
  001e8	51		 push	 ecx
  001e9	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001ee	83 c4 04	 add	 esp, 4

; 132  : }

  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c2 04 00	 ret	 4
?SetAnsiString@BCMenuData@@QAEXPBD@Z ENDP		; BCMenuData::SetAnsiString
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
EXTRN	__imp__WideCharToMultiByte@32:NEAR
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T202321 DD	0ffffffffH
	DD	FLAT:$L202308
$T202315 DD	019930520H
	DD	01H
	DD	FLAT:$T202321
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -300						; size = 4
$T202310 = -296						; size = 4
__acp$198168 = -288					; size = 4
_szbuffer$198171 = -284					; size = 256
__$ArrayPad$ = -28					; size = 4
_strText$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC NEAR ; BCMenuData::GetString
; _this$ = ecx

; 136  : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	6a ff		 push	 -1
  00205	68 00 00 00 00	 push	 __ehhandler$?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
  0020a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00210	50		 push	 eax
  00211	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00218	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  0021e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00223	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00226	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  0022c	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T202310[ebp], 0

; 137  : 	CString strText;

  00236	8d 4d f0	 lea	 ecx, DWORD PTR _strText$[ebp]
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0023f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  : 	if (m_szMenuText)

  00246	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0024c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0024f	74 40		 je	 SHORT $L198166

; 139  :     {
; 140  : #ifdef UNICODE
; 141  : 		strText = m_szMenuText;
; 142  : #else
; 143  : 		USES_CONVERSION;

  00251	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  00256	89 85 e0 fe ff
	ff		 mov	 DWORD PTR __acp$198168[ebp], eax

; 144  : 		char szbuffer[256];
; 145  : 
; 146  : 		WideCharToMultiByte( CP_ACP, 0, m_szMenuText, -1,
; 147  : 			szbuffer, 256, NULL, NULL );

  0025c	6a 00		 push	 0
  0025e	6a 00		 push	 0
  00260	68 00 01 00 00	 push	 256			; 00000100H
  00265	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _szbuffer$198171[ebp]
  0026b	51		 push	 ecx
  0026c	6a ff		 push	 -1
  0026e	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00274	8b 02		 mov	 eax, DWORD PTR [edx]
  00276	50		 push	 eax
  00277	6a 00		 push	 0
  00279	6a 00		 push	 0
  0027b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 148  : 
; 149  : //		strText=W2A(m_szMenuText);     //SK:  see MFC Tech Note 059
; 150  : //		WildChar
; 151  : 		strText = szbuffer;

  00281	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _szbuffer$198171[ebp]
  00287	51		 push	 ecx
  00288	8d 4d f0	 lea	 ecx, DWORD PTR _strText$[ebp]
  0028b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
$L198166:

; 152  : #endif    
; 153  :     }
; 154  : 	return strText;

  00291	8d 55 f0	 lea	 edx, DWORD PTR _strText$[ebp]
  00294	52		 push	 edx
  00295	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00298	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0029e	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T202310[ebp]
  002a4	83 c8 01	 or	 eax, 1
  002a7	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T202310[ebp], eax
  002ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b4	8d 4d f0	 lea	 ecx, DWORD PTR _strText$[ebp]
  002b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002bd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 155  : }

  002c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002ca	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202308:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _strText$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202315
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; BCMenuData::GetString
PUBLIC	?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ	; BCMenu::GetThisClass
; Function compile flags: /Odt
_TEXT	SEGMENT
?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ PROC NEAR	; BCMenu::GetThisClass

; 159  : IMPLEMENT_DYNAMIC( BCMenu, CMenu )

  002e0	55		 push	 ebp
  002e1	8b ec		 mov	 ebp, esp
  002e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classBCMenu@BCMenu@@2UCRuntimeClass@@B ; BCMenu::classBCMenu
  002e8	5d		 pop	 ebp
  002e9	c3		 ret	 0
?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ ENDP	; BCMenu::GetThisClass
_TEXT	ENDS
PUBLIC	?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ ; BCMenu::GetRuntimeClass
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ PROC NEAR ; BCMenu::GetRuntimeClass
; _this$ = ecx

; 159  : IMPLEMENT_DYNAMIC( BCMenu, CMenu )

  002f0	55		 push	 ebp
  002f1	8b ec		 mov	 ebp, esp
  002f3	51		 push	 ecx
  002f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  002f7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?classBCMenu@BCMenu@@2UCRuntimeClass@@B ; BCMenu::classBCMenu
  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c3		 ret	 0
?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ ENDP	; BCMenu::GetRuntimeClass
_TEXT	ENDS
PUBLIC	?DestroyMenu@BCMenu@@UAEHXZ			; BCMenu::DestroyMenu
PUBLIC	?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z	; BCMenu::DrawItem
PUBLIC	?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z ; BCMenu::MeasureItem
PUBLIC	?IsWinXPLuna@BCMenu@@KAHXZ			; BCMenu::IsWinXPLuna
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ ; CTypedPtrArray<CPtrArray,BCMenuData *>::CTypedPtrArray<CPtrArray,BCMenuData *>
PUBLIC	??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ ; CTypedPtrArray<CPtrArray,BCMenuData *>::~CTypedPtrArray<CPtrArray,BCMenuData *>
PUBLIC	??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ ; CTypedPtrArray<CPtrArray,HMENU__ *>::CTypedPtrArray<CPtrArray,HMENU__ *>
PUBLIC	??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ ; CTypedPtrArray<CPtrArray,HMENU__ *>::~CTypedPtrArray<CPtrArray,HMENU__ *>
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??_7BCMenu@@6B@					; BCMenu::`vftable'
PUBLIC	??_GBCMenu@@UAEPAXI@Z				; BCMenu::`scalar deleting destructor'
PUBLIC	??_R0?AVCMenu@@@8				; CMenu `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CMenu@@8				; CMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVBCMenu@@@8				; BCMenu `RTTI Type Descriptor'
PUBLIC	??0BCMenu@@QAE@XZ				; BCMenu::BCMenu
PUBLIC	?LoadMenuA@BCMenu@@UAEHPBD@Z			; BCMenu::LoadMenuA
PUBLIC	?LoadMenuA@BCMenu@@UAEHH@Z			; BCMenu::LoadMenuA
PUBLIC	??0CMenu@@QAE@XZ				; CMenu::CMenu
PUBLIC	??_R4BCMenu@@6B@				; BCMenu::`RTTI Complete Object Locator'
PUBLIC	??_R3BCMenu@@8					; BCMenu::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BCMenu@@8					; BCMenu::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@BCMenu@@8				; BCMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??1CMenu@@UAE@XZ				; CMenu::~CMenu
EXTRN	__imp__GetCPInfo@8:NEAR
EXTRN	??_EBCMenu@@UAEPAXI@Z:NEAR			; BCMenu::`vector deleting destructor'
EXTRN	__imp__GetSysColor@4:NEAR
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
_CPInfo	DB	014H DUP (?)
_BSS	ENDS
xdata$x	SEGMENT
$T202332 DD	0ffffffffH
	DD	FLAT:$L202326
	DD	00H
	DD	FLAT:$L202327
	DD	01H
	DD	FLAT:$L202328
$T202330 DD	019930520H
	DD	03H
	DD	FLAT:$T202332
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7BCMenu@@6B@
CONST	SEGMENT
??_7BCMenu@@6B@ DD FLAT:??_R4BCMenu@@6B@		; BCMenu::`vftable'
	DD	FLAT:?GetRuntimeClass@BCMenu@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_EBCMenu@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z
	DD	FLAT:?LoadMenuA@BCMenu@@UAEHH@Z
	DD	FLAT:?LoadMenuA@BCMenu@@UAEHPBD@Z
	DD	FLAT:?DestroyMenu@BCMenu@@UAEHXZ
CONST	ENDS
;	COMDAT ??_R4BCMenu@@6B@
rdata$r	SEGMENT
??_R4BCMenu@@6B@ DD 00H					; BCMenu::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBCMenu@@@8
	DD	FLAT:??_R3BCMenu@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBCMenu@@@8
_DATA	SEGMENT
??_R0?AVBCMenu@@@8 DD FLAT:??_7type_info@@6B@		; BCMenu `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBCMenu@@', 00H
_DATA	ENDS
;	COMDAT ??_R3BCMenu@@8
rdata$r	SEGMENT
??_R3BCMenu@@8 DD 00H					; BCMenu::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BCMenu@@8
rdata$r	ENDS
;	COMDAT ??_R2BCMenu@@8
rdata$r	SEGMENT
??_R2BCMenu@@8 DD FLAT:??_R1A@?0A@A@BCMenu@@8		; BCMenu::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CMenu@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenu@@8
rdata$r	SEGMENT
??_R1A@?0A@A@BCMenu@@8 DD FLAT:??_R0?AVBCMenu@@@8	; BCMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CMenu@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CMenu@@8 DD FLAT:??_R0?AVCMenu@@@8		; CMenu::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCMenu@@@8
_DATA	SEGMENT
??_R0?AVCMenu@@@8 DD FLAT:??_7type_info@@6B@		; CMenu `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMenu@@', 00H
	ORG $-20
	DD	FLAT:??_7type_info@@6B@
	DD	00H
	DB	'.?AVCMenu@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BCMenu@@QAE@XZ PROC NEAR				; BCMenu::BCMenu
; _this$ = ecx

; 173  : {

  00300	55		 push	 ebp
  00301	8b ec		 mov	 ebp, esp
  00303	6a ff		 push	 -1
  00305	68 00 00 00 00	 push	 __ehhandler$??0BCMenu@@QAE@XZ
  0030a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00310	50		 push	 eax
  00311	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00318	51		 push	 ecx
  00319	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0031c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0031f	e8 00 00 00 00	 call	 ??0CMenu@@QAE@XZ	; CMenu::CMenu
  00324	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0032b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0032e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenu@@6B@
  00334	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00337	83 c1 08	 add	 ecx, 8
  0033a	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
  0033f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00343	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00346	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00349	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
  0034e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 174  : 	m_bDynIcons = FALSE;     // O.S. - no dynamic icons by default

  00352	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00355	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 175  : 	disable_old_style=FALSE;

  0035c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0035f	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 176  : 	m_selectcheck = -1;

  00366	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00369	c7 40 44 ff ff
	ff ff		 mov	 DWORD PTR [eax+68], -1

; 177  : 	m_unselectcheck = -1;

  00370	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00373	c7 41 48 ff ff
	ff ff		 mov	 DWORD PTR [ecx+72], -1

; 178  : 	checkmaps=NULL;

  0037a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0037d	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0

; 179  : 	checkmapsshare=FALSE;

  00384	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00387	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 180  : 	// set the color used for the transparent background in all bitmaps
; 181  : 	m_bitmapBackground=RGB(192,192,192); //gray

  0038e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00391	c7 41 30 c0 c0
	c0 00		 mov	 DWORD PTR [ecx+48], 12632256 ; 00c0c0c0H

; 182  : 	m_bitmapBackgroundFlag=FALSE;

  00398	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0039b	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0

; 183  : 	GetCPInfo(CP_ACP,&CPInfo);

  003a2	68 00 00 00 00	 push	 OFFSET FLAT:_CPInfo
  003a7	6a 00		 push	 0
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCPInfo@8

; 184  : 	m_loadmenu=FALSE;

  003af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003b2	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 185  : 
; 186  : //added by vito--
; 187  : 	if(IsWinXPLuna())m_menuItemBitmapBkColor=GetSysColor(COLOR_3DFACE);

  003b9	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  003be	85 c0		 test	 eax, eax
  003c0	74 10		 je	 SHORT $L198203
  003c2	6a 0f		 push	 15			; 0000000fH
  003c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  003ca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003cd	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 188  : 	else m_menuItemBitmapBkColor=GetSysColor(COLOR_MENU);

  003d0	eb 0e		 jmp	 SHORT $L198204
$L198203:
  003d2	6a 04		 push	 4
  003d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  003da	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003dd	89 42 58	 mov	 DWORD PTR [edx+88], eax
$L198204:

; 189  : 
; 190  : 	m_menuItemBkColor=GetSysColor(COLOR_WINDOW);

  003e0	6a 05		 push	 5
  003e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  003e8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003eb	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 191  : 	m_menuItemTextColor= GetSysColor(COLOR_MENUTEXT);

  003ee	6a 07		 push	 7
  003f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  003f6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003f9	89 42 5c	 mov	 DWORD PTR [edx+92], eax

; 192  : 	m_menuItemSelectBKColor = GetSysColor(COLOR_HIGHLIGHT);

  003fc	6a 0d		 push	 13			; 0000000dH
  003fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00404	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00407	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 193  : //==
; 194  : }

  0040a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00411	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00414	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00417	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0041e	8b e5		 mov	 esp, ebp
  00420	5d		 pop	 ebp
  00421	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202326:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
$L202327:
  0001b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 08	 add	 ecx, 8
  00021	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
$L202328:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002c	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
__ehhandler$??0BCMenu@@QAE@XZ:
  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202330
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0BCMenu@@QAE@XZ ENDP					; BCMenu::BCMenu
PUBLIC	??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *>::`vftable'
PUBLIC	??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::`scalar deleting destructor'
PUBLIC	??_R1A@?0A@A@CPtrArray@@8			; CPtrArray::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCPtrArray@@@8				; CPtrArray `RTTI Type Descriptor'
PUBLIC	??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ:NEAR ; CPtrArray::GetRuntimeClass
EXTRN	??0CPtrArray@@QAE@XZ:NEAR			; CPtrArray::CPtrArray
EXTRN	??_E?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z:NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::`vector deleting destructor'
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
CONST	SEGMENT
??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ DD FLAT:??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
rdata$r	SEGMENT
??_R4?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@ DD 00H ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8
	DD	FLAT:??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8
_DATA	SEGMENT
??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8 DD FLAT:??_7type_info@@6B@ ; CTypedPtrArray<CPtrArray,HMENU__ *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT
??_R3?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 DD 00H ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT
??_R2?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 DD FLAT:??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CPtrArray@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@8 DD FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@@8 ; CTypedPtrArray<CPtrArray,HMENU__ *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPtrArray@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CPtrArray@@8 DD FLAT:??_R0?AVCPtrArray@@@8	; CPtrArray::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCPtrArray@@@8
_DATA	SEGMENT
??_R0?AVCPtrArray@@@8 DD FLAT:??_7type_info@@6B@	; CPtrArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPtrArray@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::CTypedPtrArray<CPtrArray,HMENU__ *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CPtrArray@@QAE@XZ	; CPtrArray::CPtrArray
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::CTypedPtrArray<CPtrArray,HMENU__ *>
_TEXT	ENDS
EXTRN	??1CPtrArray@@UAE@XZ:NEAR			; CPtrArray::~CPtrArray
; Function compile flags: /Odt
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::~CTypedPtrArray<CPtrArray,HMENU__ *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPtrArray@@UAE@XZ	; CPtrArray::~CPtrArray
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::~CTypedPtrArray<CPtrArray,HMENU__ *>
_TEXT	ENDS
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
; Function compile flags: /Odt
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L198184
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L198184:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAEPAXI@Z ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1BCMenu@@UAE@XZ				; BCMenu::~BCMenu
; Function compile flags: /Odt
;	COMDAT ??_GBCMenu@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCMenu@@UAEPAXI@Z PROC NEAR				; BCMenu::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1BCMenu@@UAE@XZ	; BCMenu::~BCMenu
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L198208
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L198208:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GBCMenu@@UAEPAXI@Z ENDP				; BCMenu::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *>::`vftable'
PUBLIC	??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::`scalar deleting destructor'
PUBLIC	??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z:NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::`vector deleting destructor'
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
CONST	SEGMENT
??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ DD FLAT:??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
rdata$r	SEGMENT
??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@ DD 00H ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8
	DD	FLAT:??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8
_DATA	SEGMENT
??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CTypedPtrArray<CPtrArray,BCMenuData *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT
??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 DD 00H ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT
??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 DD FLAT:??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CPtrArray@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@8 DD FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenuData *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::CTypedPtrArray<CPtrArray,BCMenuData *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CPtrArray@@QAE@XZ	; CPtrArray::CPtrArray
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::CTypedPtrArray<CPtrArray,BCMenuData *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::~CTypedPtrArray<CPtrArray,BCMenuData *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPtrArray@@UAE@XZ	; CPtrArray::~CPtrArray
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::~CTypedPtrArray<CPtrArray,BCMenuData *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L198216
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L198216:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAEPAXI@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
$T202358 DD	0ffffffffH
	DD	FLAT:$L202352
	DD	00H
	DD	FLAT:$L202353
	DD	01H
	DD	FLAT:$L202354
$T202356 DD	019930520H
	DD	03H
	DD	FLAT:$T202358
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BCMenu@@UAE@XZ PROC NEAR				; BCMenu::~BCMenu
; _this$ = ecx

; 197  : {

  00430	55		 push	 ebp
  00431	8b ec		 mov	 ebp, esp
  00433	6a ff		 push	 -1
  00435	68 00 00 00 00	 push	 __ehhandler$??1BCMenu@@UAE@XZ
  0043a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00440	50		 push	 eax
  00441	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00448	51		 push	 ecx
  00449	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0044c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0044f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenu@@6B@
  00455	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 198  : 	DestroyMenu();

  0045c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0045f	e8 00 00 00 00	 call	 ?DestroyMenu@BCMenu@@UAEHXZ ; BCMenu::DestroyMenu

; 199  : }

  00464	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00468	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0046b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0046e	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
  00473	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00477	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0047a	83 c1 08	 add	 ecx, 8
  0047d	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
  00482	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00489	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0048c	e8 00 00 00 00	 call	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
  00491	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00494	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0049b	8b e5		 mov	 esp, ebp
  0049d	5d		 pop	 ebp
  0049e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202352:
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
$L202353:
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 08	 add	 ecx, 8
  00049	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
$L202354:
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00054	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
__ehhandler$??1BCMenu@@UAE@XZ:
  00059	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202356
  0005e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1BCMenu@@UAE@XZ ENDP					; BCMenu::~BCMenu
PUBLIC	?IsNewShell@BCMenu@@KAHXZ			; BCMenu::IsNewShell
; Function compile flags: /Odt
_TEXT	SEGMENT
?IsNewShell@BCMenu@@KAHXZ PROC NEAR			; BCMenu::IsNewShell

; 202  : {

  004a0	55		 push	 ebp
  004a1	8b ec		 mov	 ebp, esp

; 203  : 	return (g_Shell>=Win95);

  004a3	33 c0		 xor	 eax, eax
  004a5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_Shell, 2
  004ac	0f 9d c0	 setge	 al

; 204  : }

  004af	5d		 pop	 ebp
  004b0	c3		 ret	 0
?IsNewShell@BCMenu@@KAHXZ ENDP				; BCMenu::IsNewShell
_TEXT	ENDS
PUBLIC	?IsWindowsClassicTheme@BCMenu@@KAHXZ		; BCMenu::IsWindowsClassicTheme
; Function compile flags: /Odt
_TEXT	SEGMENT
?IsWinXPLuna@BCMenu@@KAHXZ PROC NEAR			; BCMenu::IsWinXPLuna

; 207  : {

  004c0	55		 push	 ebp
  004c1	8b ec		 mov	 ebp, esp

; 208  : 	if(g_Shell==WinXP){

  004c3	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _g_Shell, 7
  004ca	75 14		 jne	 SHORT $L198224

; 209  : 		if(IsWindowsClassicTheme())return(FALSE);

  004cc	e8 00 00 00 00	 call	 ?IsWindowsClassicTheme@BCMenu@@KAHXZ ; BCMenu::IsWindowsClassicTheme
  004d1	85 c0		 test	 eax, eax
  004d3	74 04		 je	 SHORT $L198225
  004d5	33 c0		 xor	 eax, eax
  004d7	eb 09		 jmp	 SHORT $L198223
$L198225:

; 210  : 		else return(TRUE);

  004d9	b8 01 00 00 00	 mov	 eax, 1
  004de	eb 02		 jmp	 SHORT $L198223
$L198224:

; 211  : 	}
; 212  : 	return(FALSE);

  004e0	33 c0		 xor	 eax, eax
$L198223:

; 213  : }

  004e2	5d		 pop	 ebp
  004e3	c3		 ret	 0
?IsWinXPLuna@BCMenu@@KAHXZ ENDP				; BCMenu::IsWinXPLuna
_TEXT	ENDS
PUBLIC	?IsLunaMenuStyle@BCMenu@@KAHXZ			; BCMenu::IsLunaMenuStyle
; Function compile flags: /Odt
_TEXT	SEGMENT
?IsLunaMenuStyle@BCMenu@@KAHXZ PROC NEAR		; BCMenu::IsLunaMenuStyle

; 216  : {

  004f0	55		 push	 ebp
  004f1	8b ec		 mov	 ebp, esp

; 217  : 	if(IsWinXPLuna()){

  004f3	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  004f8	85 c0		 test	 eax, eax
  004fa	74 12		 je	 SHORT $L198229

; 218  : 		if(xp_drawmode==BCMENU_DRAWMODE_XP)return(TRUE);

  004fc	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?xp_drawmode@BCMenu@@1IA, 1 ; BCMenu::xp_drawmode
  00503	75 07		 jne	 SHORT $L198230
  00505	b8 01 00 00 00	 mov	 eax, 1
  0050a	eb 14		 jmp	 SHORT $L198228
$L198230:

; 219  : 	}
; 220  : 	else{

  0050c	eb 10		 jmp	 SHORT $L198231
$L198229:

; 221  : 		if(original_drawmode==BCMENU_DRAWMODE_XP)return(TRUE);

  0050e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?original_drawmode@BCMenu@@1IA, 1 ; BCMenu::original_drawmode
  00515	75 07		 jne	 SHORT $L198231
  00517	b8 01 00 00 00	 mov	 eax, 1
  0051c	eb 02		 jmp	 SHORT $L198228
$L198231:

; 222  : 	}
; 223  : 	return(FALSE);

  0051e	33 c0		 xor	 eax, eax
$L198228:

; 224  : }

  00520	5d		 pop	 ebp
  00521	c3		 ret	 0
?IsLunaMenuStyle@BCMenu@@KAHXZ ENDP			; BCMenu::IsLunaMenuStyle
_TEXT	ENDS
PUBLIC	??1BCMenuData@@QAE@XZ				; BCMenuData::~BCMenuData
; Function compile flags: /Odt
_TEXT	SEGMENT
tv73 = -20						; size = 4
_this$ = -16						; size = 4
$T202367 = -12						; size = 4
$T202364 = -8						; size = 4
$T202363 = -4						; size = 4
??1BCMenuData@@QAE@XZ PROC NEAR				; BCMenuData::~BCMenuData
; _this$ = ecx

; 227  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	83 ec 14	 sub	 esp, 20			; 00000014H
  00536	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 228  : 	if(bitmap)

  00539	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0053c	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00540	74 2e		 je	 SHORT $L198236

; 229  : 		delete(bitmap);

  00542	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00545	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00548	89 55 f8	 mov	 DWORD PTR $T202364[ebp], edx
  0054b	8b 45 f8	 mov	 eax, DWORD PTR $T202364[ebp]
  0054e	89 45 fc	 mov	 DWORD PTR $T202363[ebp], eax
  00551	83 7d fc 00	 cmp	 DWORD PTR $T202363[ebp], 0
  00555	74 12		 je	 SHORT $L202365
  00557	6a 01		 push	 1
  00559	8b 4d fc	 mov	 ecx, DWORD PTR $T202363[ebp]
  0055c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0055e	8b 4d fc	 mov	 ecx, DWORD PTR $T202363[ebp]
  00561	ff 52 04	 call	 DWORD PTR [edx+4]
  00564	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
  00567	eb 07		 jmp	 SHORT $L198236
$L202365:
  00569	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L198236:

; 230  : 	
; 231  : 	delete[] m_szMenuText; //Need not check for NULL because ANSI X3J16 allows "delete NULL"

  00570	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00573	8b 08		 mov	 ecx, DWORD PTR [eax]
  00575	89 4d f4	 mov	 DWORD PTR $T202367[ebp], ecx
  00578	8b 55 f4	 mov	 edx, DWORD PTR $T202367[ebp]
  0057b	52		 push	 edx
  0057c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00581	83 c4 04	 add	 esp, 4

; 232  : }

  00584	8b e5		 mov	 esp, ebp
  00586	5d		 pop	 ebp
  00587	c3		 ret	 0
??1BCMenuData@@QAE@XZ ENDP				; BCMenuData::~BCMenuData
_TEXT	ENDS
EXTRN	__imp__wcscpy:NEAR
EXTRN	__imp__wcslen:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T202370 = -8						; size = 4
$T202369 = -4						; size = 4
_szWideString$ = 8					; size = 4
?SetWideString@BCMenuData@@QAEXPB_W@Z PROC NEAR		; BCMenuData::SetWideString
; _this$ = ecx

; 236  : {

  00590	55		 push	 ebp
  00591	8b ec		 mov	 ebp, esp
  00593	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00596	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : 	delete[] m_szMenuText;//Need not check for NULL because ANSI X3J16 allows "delete NULL"

  00599	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0059c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059e	89 4d fc	 mov	 DWORD PTR $T202369[ebp], ecx
  005a1	8b 55 fc	 mov	 edx, DWORD PTR $T202369[ebp]
  005a4	52		 push	 edx
  005a5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  005aa	83 c4 04	 add	 esp, 4

; 238  : 	
; 239  : 	if (szWideString)

  005ad	83 7d 08 00	 cmp	 DWORD PTR _szWideString$[ebp], 0
  005b1	74 44		 je	 SHORT $L198245

; 240  :     {
; 241  : 		m_szMenuText = new wchar_t[sizeof(wchar_t)*(wcslen(szWideString)+1)];

  005b3	8b 45 08	 mov	 eax, DWORD PTR _szWideString$[ebp]
  005b6	50		 push	 eax
  005b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  005bd	83 c4 04	 add	 esp, 4
  005c0	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  005c4	d1 e1		 shl	 ecx, 1
  005c6	51		 push	 ecx
  005c7	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  005cc	83 c4 04	 add	 esp, 4
  005cf	89 45 f8	 mov	 DWORD PTR $T202370[ebp], eax
  005d2	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  005d5	8b 45 f8	 mov	 eax, DWORD PTR $T202370[ebp]
  005d8	89 02		 mov	 DWORD PTR [edx], eax

; 242  : 		if (m_szMenuText)

  005da	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  005dd	83 39 00	 cmp	 DWORD PTR [ecx], 0
  005e0	74 13		 je	 SHORT $L198249

; 243  : 			wcscpy(m_szMenuText,szWideString);

  005e2	8b 55 08	 mov	 edx, DWORD PTR _szWideString$[ebp]
  005e5	52		 push	 edx
  005e6	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  005e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  005eb	51		 push	 ecx
  005ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  005f2	83 c4 08	 add	 esp, 8
$L198249:

; 244  :     }
; 245  : 	else

  005f5	eb 09		 jmp	 SHORT $L198243
$L198245:

; 246  : 		m_szMenuText=NULL;//set to NULL so we need not bother about dangling non-NULL Ptrs

  005f7	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  005fa	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L198243:

; 247  : }

  00600	8b e5		 mov	 esp, ebp
  00602	5d		 pop	 ebp
  00603	c2 04 00	 ret	 4
?SetWideString@BCMenuData@@QAEXPB_W@Z ENDP		; BCMenuData::SetWideString
_TEXT	ENDS
PUBLIC	?GetUpperBound@CPtrArray@@QBEHXZ		; CPtrArray::GetUpperBound
PUBLIC	?IsMenu@BCMenu@@SAHPAVCMenu@@@Z			; BCMenu::IsMenu
PUBLIC	??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
; Function compile flags: /Odt
_TEXT	SEGMENT
_m$ = -8						; size = 4
_numSubMenus$ = -4					; size = 4
_submenu$ = 8						; size = 4
?IsMenu@BCMenu@@SAHPAVCMenu@@@Z PROC NEAR		; BCMenu::IsMenu

; 250  : {

  00610	55		 push	 ebp
  00611	8b ec		 mov	 ebp, esp
  00613	83 ec 08	 sub	 esp, 8

; 251  : 	int m;
; 252  : 	int numSubMenus = (int)m_AllSubMenus.GetUpperBound();

  00616	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0061b	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00620	89 45 fc	 mov	 DWORD PTR _numSubMenus$[ebp], eax

; 253  : 	for(m=0;m<=numSubMenus;++m){

  00623	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  0062a	eb 09		 jmp	 SHORT $L198257
$L198258:
  0062c	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  0062f	83 c0 01	 add	 eax, 1
  00632	89 45 f8	 mov	 DWORD PTR _m$[ebp], eax
$L198257:
  00635	8b 4d f8	 mov	 ecx, DWORD PTR _m$[ebp]
  00638	3b 4d fc	 cmp	 ecx, DWORD PTR _numSubMenus$[ebp]
  0063b	7f 21		 jg	 SHORT $L198259

; 254  : 		if(submenu->m_hMenu==m_AllSubMenus[m])return(TRUE);

  0063d	8b 55 f8	 mov	 edx, DWORD PTR _m$[ebp]
  00640	52		 push	 edx
  00641	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00646	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0064b	8b 4d 08	 mov	 ecx, DWORD PTR _submenu$[ebp]
  0064e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00651	3b 10		 cmp	 edx, DWORD PTR [eax]
  00653	75 07		 jne	 SHORT $L198260
  00655	b8 01 00 00 00	 mov	 eax, 1
  0065a	eb 04		 jmp	 SHORT $L198253
$L198260:

; 255  : 	}

  0065c	eb ce		 jmp	 SHORT $L198258
$L198259:

; 256  : 	return(FALSE);

  0065e	33 c0		 xor	 eax, eax
$L198253:

; 257  : }

  00660	8b e5		 mov	 esp, ebp
  00662	5d		 pop	 ebp
  00663	c3		 ret	 0
?IsMenu@BCMenu@@SAHPAVCMenu@@@Z ENDP			; BCMenu::IsMenu
_TEXT	ENDS
PUBLIC	?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z		; BCMenu::IsMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_m$ = -8						; size = 4
_numSubMenus$ = -4					; size = 4
_submenu$ = 8						; size = 4
?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z PROC NEAR		; BCMenu::IsMenu

; 260  : {

  00670	55		 push	 ebp
  00671	8b ec		 mov	 ebp, esp
  00673	83 ec 08	 sub	 esp, 8

; 261  : 	int m;
; 262  : 	int numSubMenus = (int)m_AllSubMenus.GetUpperBound();

  00676	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0067b	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00680	89 45 fc	 mov	 DWORD PTR _numSubMenus$[ebp], eax

; 263  : 	for(m=0;m<=numSubMenus;++m){

  00683	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  0068a	eb 09		 jmp	 SHORT $L198267
$L198268:
  0068c	8b 45 f8	 mov	 eax, DWORD PTR _m$[ebp]
  0068f	83 c0 01	 add	 eax, 1
  00692	89 45 f8	 mov	 DWORD PTR _m$[ebp], eax
$L198267:
  00695	8b 4d f8	 mov	 ecx, DWORD PTR _m$[ebp]
  00698	3b 4d fc	 cmp	 ecx, DWORD PTR _numSubMenus$[ebp]
  0069b	7f 1e		 jg	 SHORT $L198269

; 264  : 		if(submenu==m_AllSubMenus[m])return(TRUE);

  0069d	8b 55 f8	 mov	 edx, DWORD PTR _m$[ebp]
  006a0	52		 push	 edx
  006a1	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  006a6	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  006ab	8b 4d 08	 mov	 ecx, DWORD PTR _submenu$[ebp]
  006ae	3b 08		 cmp	 ecx, DWORD PTR [eax]
  006b0	75 07		 jne	 SHORT $L198270
  006b2	b8 01 00 00 00	 mov	 eax, 1
  006b7	eb 04		 jmp	 SHORT $L198263
$L198270:

; 265  : 	}

  006b9	eb d1		 jmp	 SHORT $L198268
$L198269:

; 266  : 	return(FALSE);

  006bb	33 c0		 xor	 eax, eax
$L198263:

; 267  : }

  006bd	8b e5		 mov	 esp, ebp
  006bf	5d		 pop	 ebp
  006c0	c3		 ret	 0
?IsMenu@BCMenu@@SAHPAUHMENU__@@@Z ENDP			; BCMenu::IsMenu
_TEXT	ENDS
PUBLIC	?RemoveAll@CPtrArray@@QAEXXZ			; CPtrArray::RemoveAll
PUBLIC	??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
PUBLIC	??_GBCMenuData@@QAEPAXI@Z			; BCMenuData::`scalar deleting destructor'
EXTRN	?RemoveAt@CPtrArray@@QAEXHH@Z:NEAR		; CPtrArray::RemoveAt
EXTRN	?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z:NEAR ; CObject::IsKindOf
EXTRN	?DestroyMenu@CMenu@@QAEHXZ:NEAR			; CMenu::DestroyMenu
EXTRN	?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z:NEAR	; CMenu::FromHandle
; Function compile flags: /Odt
_TEXT	SEGMENT
tv180 = -68						; size = 4
tv165 = -64						; size = 4
tv147 = -60						; size = 4
_this$ = -56						; size = 4
$T202383 = -52						; size = 4
$T202382 = -48						; size = 4
$T202379 = -44						; size = 4
$T202378 = -40						; size = 4
$T202375 = -36						; size = 4
$T202374 = -32						; size = 4
_flag$198294 = -28					; size = 4
_ptr$198292 = -24					; size = 4
_m$ = -20						; size = 4
_numAllSubMenus$ = -16					; size = 4
_n$ = -12						; size = 4
_numSubMenus$ = -8					; size = 4
_numItems$ = -4						; size = 4
?DestroyMenu@BCMenu@@UAEHXZ PROC NEAR			; BCMenu::DestroyMenu
; _this$ = ecx

; 270  : {

  006d0	55		 push	 ebp
  006d1	8b ec		 mov	 ebp, esp
  006d3	83 ec 44	 sub	 esp, 68			; 00000044H
  006d6	56		 push	 esi
  006d7	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 271  : 	// Destroy Sub menus:
; 272  : 	int m,n;
; 273  : 	int numAllSubMenus = (int)m_AllSubMenus.GetUpperBound();

  006da	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  006df	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  006e4	89 45 f0	 mov	 DWORD PTR _numAllSubMenus$[ebp], eax

; 274  : 	for(n = numAllSubMenus; n>= 0; n--){

  006e7	8b 45 f0	 mov	 eax, DWORD PTR _numAllSubMenus$[ebp]
  006ea	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
  006ed	eb 09		 jmp	 SHORT $L198278
$L198279:
  006ef	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  006f2	83 e9 01	 sub	 ecx, 1
  006f5	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$L198278:
  006f8	83 7d f4 00	 cmp	 DWORD PTR _n$[ebp], 0
  006fc	7c 2a		 jl	 SHORT $L198280

; 275  : 		if(m_AllSubMenus[n]==this->m_hMenu)m_AllSubMenus.RemoveAt(n);

  006fe	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  00701	52		 push	 edx
  00702	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00707	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0070c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0070f	8b 10		 mov	 edx, DWORD PTR [eax]
  00711	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00714	75 10		 jne	 SHORT $L198281
  00716	6a 01		 push	 1
  00718	8b 45 f4	 mov	 eax, DWORD PTR _n$[ebp]
  0071b	50		 push	 eax
  0071c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00721	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L198281:

; 276  : 	}

  00726	eb c7		 jmp	 SHORT $L198279
$L198280:

; 277  : 	int numSubMenus = (int)m_SubMenus.GetUpperBound();

  00728	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0072b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0072e	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00733	89 45 f8	 mov	 DWORD PTR _numSubMenus$[ebp], eax

; 278  : 	for(m = numSubMenus; m >= 0; m--)

  00736	8b 4d f8	 mov	 ecx, DWORD PTR _numSubMenus$[ebp]
  00739	89 4d ec	 mov	 DWORD PTR _m$[ebp], ecx
  0073c	eb 09		 jmp	 SHORT $L198284
$L198285:
  0073e	8b 55 ec	 mov	 edx, DWORD PTR _m$[ebp]
  00741	83 ea 01	 sub	 edx, 1
  00744	89 55 ec	 mov	 DWORD PTR _m$[ebp], edx
$L198284:
  00747	83 7d ec 00	 cmp	 DWORD PTR _m$[ebp], 0
  0074b	0f 8c c2 00 00
	00		 jl	 $L198286

; 279  : 	{
; 280  : 		numAllSubMenus = (int)m_AllSubMenus.GetUpperBound();

  00751	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00756	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0075b	89 45 f0	 mov	 DWORD PTR _numAllSubMenus$[ebp], eax

; 281  : 		for(n = numAllSubMenus; n>= 0; n--)

  0075e	8b 45 f0	 mov	 eax, DWORD PTR _numAllSubMenus$[ebp]
  00761	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
  00764	eb 09		 jmp	 SHORT $L198288
$L198289:
  00766	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00769	83 e9 01	 sub	 ecx, 1
  0076c	89 4d f4	 mov	 DWORD PTR _n$[ebp], ecx
$L198288:
  0076f	83 7d f4 00	 cmp	 DWORD PTR _n$[ebp], 0
  00773	7c 37		 jl	 SHORT $L198290

; 282  : 		{
; 283  : 			if(m_AllSubMenus[n]==m_SubMenus[m])m_AllSubMenus.RemoveAt(n);

  00775	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  00778	52		 push	 edx
  00779	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  0077e	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  00783	8b f0		 mov	 esi, eax
  00785	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  00788	50		 push	 eax
  00789	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0078c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0078f	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  00794	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00796	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00798	75 10		 jne	 SHORT $L198291
  0079a	6a 01		 push	 1
  0079c	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  0079f	52		 push	 edx
  007a0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  007a5	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L198291:

; 284  : 		}

  007aa	eb ba		 jmp	 SHORT $L198289
$L198290:

; 285  : 		CMenu *ptr=FromHandle(m_SubMenus[m]);

  007ac	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  007af	50		 push	 eax
  007b0	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  007b3	83 c1 1c	 add	 ecx, 28			; 0000001cH
  007b6	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  007bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  007bd	51		 push	 ecx
  007be	e8 00 00 00 00	 call	 ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z ; CMenu::FromHandle
  007c3	89 45 e8	 mov	 DWORD PTR _ptr$198292[ebp], eax

; 286  : 		if(ptr)

  007c6	83 7d e8 00	 cmp	 DWORD PTR _ptr$198292[ebp], 0
  007ca	74 42		 je	 SHORT $L198293

; 287  : 		{
; 288  : 			BOOL flag=ptr->IsKindOf(RUNTIME_CLASS( BCMenu ));

  007cc	e8 00 00 00 00	 call	 ?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ ; BCMenu::GetThisClass
  007d1	50		 push	 eax
  007d2	8b 4d e8	 mov	 ecx, DWORD PTR _ptr$198292[ebp]
  007d5	e8 00 00 00 00	 call	 ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ; CObject::IsKindOf
  007da	89 45 e4	 mov	 DWORD PTR _flag$198294[ebp], eax

; 289  : 			if(flag)

  007dd	83 7d e4 00	 cmp	 DWORD PTR _flag$198294[ebp], 0
  007e1	74 2b		 je	 SHORT $L198293

; 290  : 				delete((BCMenu *)ptr);

  007e3	8b 55 e8	 mov	 edx, DWORD PTR _ptr$198292[ebp]
  007e6	89 55 dc	 mov	 DWORD PTR $T202375[ebp], edx
  007e9	8b 45 dc	 mov	 eax, DWORD PTR $T202375[ebp]
  007ec	89 45 e0	 mov	 DWORD PTR $T202374[ebp], eax
  007ef	83 7d e0 00	 cmp	 DWORD PTR $T202374[ebp], 0
  007f3	74 12		 je	 SHORT $L202376
  007f5	6a 01		 push	 1
  007f7	8b 4d e0	 mov	 ecx, DWORD PTR $T202374[ebp]
  007fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  007fc	8b 4d e0	 mov	 ecx, DWORD PTR $T202374[ebp]
  007ff	ff 52 04	 call	 DWORD PTR [edx+4]
  00802	89 45 c4	 mov	 DWORD PTR tv147[ebp], eax
  00805	eb 07		 jmp	 SHORT $L198293
$L202376:
  00807	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
$L198293:

; 291  : 		}
; 292  : 	}

  0080e	e9 2b ff ff ff	 jmp	 $L198285
$L198286:

; 293  : 	m_SubMenus.RemoveAll();

  00813	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00816	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00819	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 294  : 	// Destroy menu data
; 295  : 	int numItems = (int)m_MenuList.GetUpperBound();

  0081e	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00821	83 c1 08	 add	 ecx, 8
  00824	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  00829	89 45 fc	 mov	 DWORD PTR _numItems$[ebp], eax

; 296  : 	for(m = 0; m <= numItems; m++)delete(m_MenuList[m]);

  0082c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  00833	eb 09		 jmp	 SHORT $L198301
$L198302:
  00835	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  00838	83 c0 01	 add	 eax, 1
  0083b	89 45 ec	 mov	 DWORD PTR _m$[ebp], eax
$L198301:
  0083e	8b 4d ec	 mov	 ecx, DWORD PTR _m$[ebp]
  00841	3b 4d fc	 cmp	 ecx, DWORD PTR _numItems$[ebp]
  00844	7f 38		 jg	 SHORT $L198303
  00846	8b 55 ec	 mov	 edx, DWORD PTR _m$[ebp]
  00849	52		 push	 edx
  0084a	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0084d	83 c1 08	 add	 ecx, 8
  00850	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  00855	8b 00		 mov	 eax, DWORD PTR [eax]
  00857	89 45 d4	 mov	 DWORD PTR $T202379[ebp], eax
  0085a	8b 4d d4	 mov	 ecx, DWORD PTR $T202379[ebp]
  0085d	89 4d d8	 mov	 DWORD PTR $T202378[ebp], ecx
  00860	83 7d d8 00	 cmp	 DWORD PTR $T202378[ebp], 0
  00864	74 0f		 je	 SHORT $L202380
  00866	6a 01		 push	 1
  00868	8b 4d d8	 mov	 ecx, DWORD PTR $T202378[ebp]
  0086b	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  00870	89 45 c0	 mov	 DWORD PTR tv165[ebp], eax
  00873	eb 07		 jmp	 SHORT $L202381
$L202380:
  00875	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$L202381:
  0087c	eb b7		 jmp	 SHORT $L198302
$L198303:

; 297  : 	m_MenuList.RemoveAll();

  0087e	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00881	83 c1 08	 add	 ecx, 8
  00884	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 298  : 	if(checkmaps&&!checkmapsshare){

  00889	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0088c	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  00890	74 41		 je	 SHORT $L198306
  00892	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00895	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00899	75 38		 jne	 SHORT $L198306

; 299  : 		delete checkmaps;

  0089b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0089e	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  008a1	89 55 cc	 mov	 DWORD PTR $T202383[ebp], edx
  008a4	8b 45 cc	 mov	 eax, DWORD PTR $T202383[ebp]
  008a7	89 45 d0	 mov	 DWORD PTR $T202382[ebp], eax
  008aa	83 7d d0 00	 cmp	 DWORD PTR $T202382[ebp], 0
  008ae	74 12		 je	 SHORT $L202384
  008b0	6a 01		 push	 1
  008b2	8b 4d d0	 mov	 ecx, DWORD PTR $T202382[ebp]
  008b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  008b7	8b 4d d0	 mov	 ecx, DWORD PTR $T202382[ebp]
  008ba	ff 52 04	 call	 DWORD PTR [edx+4]
  008bd	89 45 bc	 mov	 DWORD PTR tv180[ebp], eax
  008c0	eb 07		 jmp	 SHORT $L202385
$L202384:
  008c2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$L202385:

; 300  : 		checkmaps=NULL;

  008c9	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  008cc	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$L198306:

; 301  : 	}
; 302  : 	// Call base-class implementation last:
; 303  : 	return(CMenu::DestroyMenu());

  008d3	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  008d6	e8 00 00 00 00	 call	 ?DestroyMenu@CMenu@@QAEHXZ ; CMenu::DestroyMenu

; 304  : };

  008db	5e		 pop	 esi
  008dc	8b e5		 mov	 esp, ebp
  008de	5d		 pop	 ebp
  008df	c3		 ret	 0
?DestroyMenu@BCMenu@@UAEHXZ ENDP			; BCMenu::DestroyMenu
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??_GBCMenuData@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCMenuData@@QAEPAXI@Z PROC NEAR			; BCMenuData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1BCMenuData@@QAE@XZ	; BCMenuData::~BCMenuData
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $L198312
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L198312:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GBCMenuData@@QAEPAXI@Z ENDP				; BCMenuData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetMenuDrawMode@BCMenu@@SAHXZ			; BCMenu::GetMenuDrawMode
; Function compile flags: /Odt
_TEXT	SEGMENT
?GetMenuDrawMode@BCMenu@@SAHXZ PROC NEAR		; BCMenu::GetMenuDrawMode

; 307  : {

  008e0	55		 push	 ebp
  008e1	8b ec		 mov	 ebp, esp

; 308  : 	if(IsWinXPLuna())return(xp_drawmode);

  008e3	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  008e8	85 c0		 test	 eax, eax
  008ea	74 07		 je	 SHORT $L198316
  008ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xp_drawmode@BCMenu@@1IA ; BCMenu::xp_drawmode
  008f1	eb 05		 jmp	 SHORT $L198315
$L198316:

; 309  : 	return(original_drawmode);

  008f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?original_drawmode@BCMenu@@1IA ; BCMenu::original_drawmode
$L198315:

; 310  : }

  008f8	5d		 pop	 ebp
  008f9	c3		 ret	 0
?GetMenuDrawMode@BCMenu@@SAHXZ ENDP			; BCMenu::GetMenuDrawMode
_TEXT	ENDS
PUBLIC	?GetSelectDisableMode@BCMenu@@SAHXZ		; BCMenu::GetSelectDisableMode
; Function compile flags: /Odt
_TEXT	SEGMENT
?GetSelectDisableMode@BCMenu@@SAHXZ PROC NEAR		; BCMenu::GetSelectDisableMode

; 313  : {

  00900	55		 push	 ebp
  00901	8b ec		 mov	 ebp, esp

; 314  : 	if(IsLunaMenuStyle())return(xp_select_disabled);

  00903	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  00908	85 c0		 test	 eax, eax
  0090a	74 07		 je	 SHORT $L198320
  0090c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xp_select_disabled@BCMenu@@1HA ; BCMenu::xp_select_disabled
  00911	eb 05		 jmp	 SHORT $L198319
$L198320:

; 315  : 	return(original_select_disabled);

  00913	a1 00 00 00 00	 mov	 eax, DWORD PTR ?original_select_disabled@BCMenu@@1HA ; BCMenu::original_select_disabled
$L198319:

; 316  : }

  00918	5d		 pop	 ebp
  00919	c3		 ret	 0
?GetSelectDisableMode@BCMenu@@SAHXZ ENDP		; BCMenu::GetSelectDisableMode
_TEXT	ENDS
PUBLIC	?GetDeviceCaps@CDC@@QBEHH@Z			; CDC::GetDeviceCaps
PUBLIC	?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000
PUBLIC	?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_WinXP
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDC$ = -4						; size = 4
_lpDIS$ = 8						; size = 4
?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z PROC NEAR ; BCMenu::DrawItem
; _this$ = ecx

; 331  : {

  00920	55		 push	 ebp
  00921	8b ec		 mov	 ebp, esp
  00923	83 ec 08	 sub	 esp, 8
  00926	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 	ASSERT(lpDIS != NULL);	
; 333  : 	CDC* pDC = CDC::FromHandle(lpDIS->hDC);

  00929	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  0092c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0092f	51		 push	 ecx
  00930	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  00935	89 45 fc	 mov	 DWORD PTR _pDC$[ebp], eax

; 334  : 	if(pDC->GetDeviceCaps(RASTERCAPS) & RC_PALETTE)DrawItem_Win9xNT2000(lpDIS);

  00938	6a 26		 push	 38			; 00000026H
  0093a	8b 4d fc	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0093d	e8 00 00 00 00	 call	 ?GetDeviceCaps@CDC@@QBEHH@Z ; CDC::GetDeviceCaps
  00942	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00947	74 0e		 je	 SHORT $L198327
  00949	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  0094c	52		 push	 edx
  0094d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00950	e8 00 00 00 00	 call	 ?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000

; 335  : 	else{

  00955	eb 51		 jmp	 SHORT $L198324
$L198327:

; 336  : 		if(IsWinXPLuna()){

  00957	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  0095c	85 c0		 test	 eax, eax
  0095e	74 25		 je	 SHORT $L198329

; 337  : 			if(xp_drawmode==BCMENU_DRAWMODE_XP) DrawItem_WinXP(lpDIS);

  00960	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?xp_drawmode@BCMenu@@1IA, 1 ; BCMenu::xp_drawmode
  00967	75 0e		 jne	 SHORT $L198330
  00969	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  0096c	50		 push	 eax
  0096d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00970	e8 00 00 00 00	 call	 ?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_WinXP

; 338  : 			else DrawItem_Win9xNT2000(lpDIS);

  00975	eb 0c		 jmp	 SHORT $L198331
$L198330:
  00977	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  0097a	51		 push	 ecx
  0097b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0097e	e8 00 00 00 00	 call	 ?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000
$L198331:

; 339  : 		}
; 340  : 		else{

  00983	eb 23		 jmp	 SHORT $L198324
$L198329:

; 341  : 			if(original_drawmode==BCMENU_DRAWMODE_XP) DrawItem_WinXP(lpDIS);

  00985	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?original_drawmode@BCMenu@@1IA, 1 ; BCMenu::original_drawmode
  0098c	75 0e		 jne	 SHORT $L198333
  0098e	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00991	52		 push	 edx
  00992	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00995	e8 00 00 00 00	 call	 ?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_WinXP

; 342  : 			else DrawItem_Win9xNT2000(lpDIS);

  0099a	eb 0c		 jmp	 SHORT $L198324
$L198333:
  0099c	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  0099f	50		 push	 eax
  009a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009a3	e8 00 00 00 00	 call	 ?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ; BCMenu::DrawItem_Win9xNT2000
$L198324:

; 343  : 		}	
; 344  : 	}
; 345  : }

  009a8	8b e5		 mov	 esp, ebp
  009aa	5d		 pop	 ebp
  009ab	c2 04 00	 ret	 4
?DrawItem@BCMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP	; BCMenu::DrawItem
_TEXT	ENDS
PUBLIC	??0CPoint@@QAE@HH@Z				; CPoint::CPoint
PUBLIC	?LightenColor@BCMenu@@SAKKN@Z			; BCMenu::LightenColor
PUBLIC	?GetBkMode@CDC@@QBEHXZ				; CDC::GetBkMode
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z ; BCMenu::Draw3DCheckmark
PUBLIC	?SetRect@CRect@@QAEXHHHH@Z			; CRect::SetRect
PUBLIC	?CopyRect@CRect@@QAEXPBUtagRECT@@@Z		; CRect::CopyRect
PUBLIC	?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ; BCMenu::DitherBlt
PUBLIC	?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ; BCMenu::DitherBlt2
PUBLIC	?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z ; BCMenu::DitherBlt3
PUBLIC	?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z	; CImageList::Draw
PUBLIC	?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList
PUBLIC	?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z	; CDC::FillRect
PUBLIC	?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
PUBLIC	?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z		; CDC::DrawEdge
PUBLIC	__real@3fe3333333333333
PUBLIC	??0CPen@@QAE@XZ					; CPen::CPen
PUBLIC	?CreatePen@CPen@@QAEHHHK@Z			; CPen::CreatePen
PUBLIC	??1CPen@@UAE@XZ					; CPen::~CPen
PUBLIC	??0CBrush@@QAE@XZ				; CBrush::CBrush
PUBLIC	?CreateSolidBrush@CBrush@@QAEHK@Z		; CBrush::CreateSolidBrush
PUBLIC	??0CMenuItemInfo@@QAE@XZ			; CMenuItemInfo::CMenuItemInfo
PUBLIC	??1CBrush@@UAE@XZ				; CBrush::~CBrush
PUBLIC	??0CBitmap@@QAE@XZ				; CBitmap::CBitmap
PUBLIC	??BCBitmap@@QBEPAUHBITMAP__@@XZ			; CBitmap::operator HBITMAP__ *
PUBLIC	??1CBitmap@@UAE@XZ				; CBitmap::~CBitmap
EXTRN	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	__imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ:NEAR
EXTRN	?SetBkMode@CDC@@QAEHH@Z:NEAR			; CDC::SetBkMode
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:NEAR
EXTRN	__imp__GetMenuItemInfoA@16:NEAR
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z:NEAR
EXTRN	__imp_?ReverseFind@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHD@Z:NEAR
EXTRN	__imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:NEAR
EXTRN	__imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:NEAR
EXTRN	__fltused:NEAR
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
EXTRN	?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z:NEAR	; CDC::Draw3dRect
xdata$x	SEGMENT
$T202418 DD	0ffffffffH
	DD	FLAT:$L202401
	DD	00H
	DD	FLAT:$L202402
	DD	01H
	DD	FLAT:$L202403
	DD	02H
	DD	FLAT:$L202404
	DD	03H
	DD	FLAT:$L202405
	DD	03H
	DD	FLAT:$L202406
	DD	03H
	DD	FLAT:$L202407
	DD	03H
	DD	FLAT:$L202408
	DD	07H
	DD	FLAT:$L202409
	DD	08H
	DD	FLAT:$L202410
	DD	08H
	DD	FLAT:$L202411
$T202413 DD	019930520H
	DD	0bH
	DD	FLAT:$T202418
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
tv766 = -368						; size = 4
tv597 = -364						; size = 4
tv764 = -360						; size = 4
tv600 = -356						; size = 4
tv579 = -352						; size = 4
tv758 = -348						; size = 4
tv158 = -344						; size = 4
_this$ = -340						; size = 4
$T202400 = -336						; size = 4
$T202399 = -332						; size = 4
$T202396 = -328						; size = 8
$T202395 = -320						; size = 8
$T202394 = -312						; size = 8
$T202393 = -304						; size = 8
$T202392 = -296						; size = 4
_offset$198446 = -292					; size = 16
_leftStr$198432 = -276					; size = 4
_iOldMode$198439 = -272					; size = 4
_rectt$198431 = -268					; size = 16
_rightStr$198433 = -252					; size = 4
_nFormatr$198441 = -248					; size = 4
_nFormat$198440 = -244					; size = 4
_tablocr$198434 = -240					; size = 4
_info$198426 = -236					; size = 48
_brush$198418 = -188					; size = 8
_col$198419 = -180					; size = 4
_ptImage$198422 = -176					; size = 8
_ptImage$198413 = -168					; size = 8
_bitmapstandard$198402 = -160				; size = 8
_ptImage$198394 = -152					; size = 8
_pOldPen$198390 = -144					; size = 4
_pOldPen$198386 = -140					; size = 4
_rect2$198350 = -136					; size = 16
_m_brSelect$198356 = -120				; size = 8
_state$198365 = -112					; size = 4
_crText$198355 = -108					; size = 4
_x0$198358 = -104					; size = 4
_global_offset$198363 = -100				; size = 4
_nIconNormal$198361 = -96				; size = 4
_bitmap$198364 = -92					; size = 4
_selectedflag$198352 = -88				; size = 4
_xoffset$198362 = -84					; size = 4
_strText$198366 = -80					; size = 4
_standardflag$198351 = -76				; size = 4
_m_penBack$198357 = -72					; size = 8
_y0$198359 = -64					; size = 4
_disableflag$198353 = -60				; size = 4
_dy$198360 = -56					; size = 4
_checkflag$198354 = -52					; size = 4
_state$ = -48						; size = 4
_m_brBackground$ = -44					; size = 8
_m_clrBack$ = -36					; size = 4
_pDC$ = -32						; size = 4
_rect$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_lpDIS$ = 8						; size = 4
?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z PROC NEAR ; BCMenu::DrawItem_Win9xNT2000
; _this$ = ecx

; 348  : {

  009b0	55		 push	 ebp
  009b1	8b ec		 mov	 ebp, esp
  009b3	6a ff		 push	 -1
  009b5	68 00 00 00 00	 push	 __ehhandler$?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z
  009ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  009c0	50		 push	 eax
  009c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  009c8	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  009ce	89 8d ac fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 349  : 	ASSERT(lpDIS != NULL);
; 350  : 	CDC* pDC = CDC::FromHandle(lpDIS->hDC);

  009d4	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  009d7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  009da	51		 push	 ecx
  009db	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  009e0	89 45 e0	 mov	 DWORD PTR _pDC$[ebp], eax

; 351  : 	CRect rect;

  009e3	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  009e6	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 352  : 	UINT state = (((BCMenuData*)(lpDIS->itemData))->nFlags);

  009eb	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  009ee	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  009f1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  009f4	89 4d d0	 mov	 DWORD PTR _state$[ebp], ecx

; 353  : 	CBrush m_brBackground;

  009f7	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  009fa	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  009ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 354  : 	COLORREF m_clrBack;
; 355  : //modified by vito--
; 356  : /*	if(IsWinXPLuna())m_clrBack=GetSysColor(COLOR_3DFACE);
; 357  : 	else m_clrBack=GetSysColor(COLOR_MENU);
; 358  : */
; 359  : 	m_clrBack = m_menuItemBkColor;

  00a06	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00a0c	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a0f	89 45 dc	 mov	 DWORD PTR _m_clrBack$[ebp], eax

; 360  : //--
; 361  : 	m_brBackground.CreateSolidBrush(m_clrBack);

  00a12	8b 4d dc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  00a15	51		 push	 ecx
  00a16	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  00a19	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 362  : 
; 363  : 	// remove the selected bit if it's grayed out
; 364  : 	if(lpDIS->itemState & ODS_GRAYED&&!original_select_disabled){

  00a1e	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00a21	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00a24	83 e0 02	 and	 eax, 2
  00a27	74 23		 je	 SHORT $L198346
  00a29	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?original_select_disabled@BCMenu@@1HA, 0 ; BCMenu::original_select_disabled
  00a30	75 1a		 jne	 SHORT $L198346

; 365  : 		if(lpDIS->itemState & ODS_SELECTED)lpDIS->itemState=lpDIS->itemState & ~ODS_SELECTED;

  00a32	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00a35	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00a38	83 e2 01	 and	 edx, 1
  00a3b	74 0f		 je	 SHORT $L198346
  00a3d	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00a40	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00a43	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00a46	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00a49	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$L198346:

; 366  : 	}
; 367  : 	
; 368  : 	if(state & MF_SEPARATOR){

  00a4c	8b 45 d0	 mov	 eax, DWORD PTR _state$[ebp]
  00a4f	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00a54	74 49		 je	 SHORT $L198348

; 369  : 		rect.CopyRect(&lpDIS->rcItem);

  00a56	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00a59	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00a5c	51		 push	 ecx
  00a5d	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00a60	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 370  : 		pDC->FillRect (rect,&m_brBackground);

  00a65	8d 55 d4	 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  00a68	52		 push	 edx
  00a69	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00a6c	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00a71	50		 push	 eax
  00a72	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00a75	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 371  : 		rect.top += (rect.Height()>>1);

  00a7a	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00a7d	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00a82	d1 f8		 sar	 eax, 1
  00a84	03 45 e8	 add	 eax, DWORD PTR _rect$[ebp+4]
  00a87	89 45 e8	 mov	 DWORD PTR _rect$[ebp+4], eax

; 372  : 		pDC->DrawEdge(&rect,EDGE_ETCHED,BF_TOP);

  00a8a	6a 02		 push	 2
  00a8c	6a 06		 push	 6
  00a8e	8d 45 e4	 lea	 eax, DWORD PTR _rect$[ebp]
  00a91	50		 push	 eax
  00a92	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00a95	e8 00 00 00 00	 call	 ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawEdge

; 373  : 	}
; 374  : 	else{

  00a9a	e9 c5 0d 00 00	 jmp	 $L198349
$L198348:

; 375  : 		CRect rect2;

  00a9f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00aa5	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 376  : 		BOOL standardflag=FALSE,selectedflag=FALSE,disableflag=FALSE;

  00aaa	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _standardflag$198351[ebp], 0
  00ab1	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _selectedflag$198352[ebp], 0
  00ab8	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _disableflag$198353[ebp], 0

; 377  : 		BOOL checkflag=FALSE;

  00abf	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _checkflag$198354[ebp], 0

; 378  : 		COLORREF crText = GetSysColor(COLOR_MENUTEXT);

  00ac6	6a 07		 push	 7
  00ac8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00ace	89 45 94	 mov	 DWORD PTR _crText$198355[ebp], eax

; 379  : 		CBrush m_brSelect;

  00ad1	8d 4d 88	 lea	 ecx, DWORD PTR _m_brSelect$198356[ebp]
  00ad4	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  00ad9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 380  : 		CPen m_penBack;

  00add	8d 4d b8	 lea	 ecx, DWORD PTR _m_penBack$198357[ebp]
  00ae0	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  00ae5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 381  : 		int x0,y0,dy;
; 382  : 		int nIconNormal=-1,xoffset=-1,global_offset=-1;

  00ae9	c7 45 a0 ff ff
	ff ff		 mov	 DWORD PTR _nIconNormal$198361[ebp], -1
  00af0	c7 45 ac ff ff
	ff ff		 mov	 DWORD PTR _xoffset$198362[ebp], -1
  00af7	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _global_offset$198363[ebp], -1

; 383  : 		CImageList *bitmap=NULL;

  00afe	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _bitmap$198364[ebp], 0

; 384  : 		
; 385  : 		// set some colors
; 386  : 		m_penBack.CreatePen (PS_SOLID,0,m_clrBack);

  00b05	8b 4d dc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  00b08	51		 push	 ecx
  00b09	6a 00		 push	 0
  00b0b	6a 00		 push	 0
  00b0d	8d 4d b8	 lea	 ecx, DWORD PTR _m_penBack$198357[ebp]
  00b10	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 387  : 		m_brSelect.CreateSolidBrush(GetSysColor(COLOR_HIGHLIGHT));

  00b15	6a 0d		 push	 13			; 0000000dH
  00b17	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00b1d	50		 push	 eax
  00b1e	8d 4d 88	 lea	 ecx, DWORD PTR _m_brSelect$198356[ebp]
  00b21	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 388  : 		
; 389  : 		// draw the colored rectangle portion
; 390  : 		
; 391  : 		rect.CopyRect(&lpDIS->rcItem);

  00b26	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00b29	83 c2 1c	 add	 edx, 28			; 0000001cH
  00b2c	52		 push	 edx
  00b2d	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00b30	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 392  : 		rect2=rect;

  00b35	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  00b38	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rect2$198350[ebp], eax
  00b3e	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  00b41	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _rect2$198350[ebp+4], ecx
  00b47	8b 55 ec	 mov	 edx, DWORD PTR _rect$[ebp+8]
  00b4a	89 55 80	 mov	 DWORD PTR _rect2$198350[ebp+8], edx
  00b4d	8b 45 f0	 mov	 eax, DWORD PTR _rect$[ebp+12]
  00b50	89 45 84	 mov	 DWORD PTR _rect2$198350[ebp+12], eax

; 393  : 		
; 394  : 		// draw the up/down/focused/disabled state
; 395  : 		
; 396  : 		UINT state = lpDIS->itemState;

  00b53	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00b56	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00b59	89 55 90	 mov	 DWORD PTR _state$198365[ebp], edx

; 397  : 		CString strText;

  00b5c	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  00b5f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00b65	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 398  : 		
; 399  : 		if(lpDIS->itemData != NULL){

  00b69	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  00b6c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00b70	0f 84 0f 01 00
	00		 je	 $L198367

; 400  : 			nIconNormal = (((BCMenuData*)(lpDIS->itemData))->menuIconNormal);

  00b76	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00b79	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00b7c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00b7f	89 45 a0	 mov	 DWORD PTR _nIconNormal$198361[ebp], eax

; 401  : 			xoffset = (((BCMenuData*)(lpDIS->itemData))->xoffset);

  00b82	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00b85	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00b88	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00b8b	89 45 ac	 mov	 DWORD PTR _xoffset$198362[ebp], eax

; 402  : 			global_offset = (((BCMenuData*)(lpDIS->itemData))->global_offset);

  00b8e	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00b91	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00b94	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b97	89 45 9c	 mov	 DWORD PTR _global_offset$198363[ebp], eax

; 403  : 			bitmap = (((BCMenuData*)(lpDIS->itemData))->bitmap);

  00b9a	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  00b9d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00ba0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00ba3	89 45 a4	 mov	 DWORD PTR _bitmap$198364[ebp], eax

; 404  : 			strText = ((BCMenuData*) (lpDIS->itemData))->GetString();

  00ba6	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T202392[ebp]
  00bac	51		 push	 ecx
  00bad	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  00bb0	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00bb3	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  00bb8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv158[ebp], eax
  00bbe	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  00bc4	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv758[ebp], eax
  00bca	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00bce	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv758[ebp]
  00bd4	51		 push	 ecx
  00bd5	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  00bd8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00bde	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00be2	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T202392[ebp]
  00be8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 405  : 
; 406  : 			if(nIconNormal<0&&global_offset>=0){

  00bee	83 7d a0 00	 cmp	 DWORD PTR _nIconNormal$198361[ebp], 0
  00bf2	7d 1a		 jge	 SHORT $L198374
  00bf4	83 7d 9c 00	 cmp	 DWORD PTR _global_offset$198363[ebp], 0
  00bf8	7c 14		 jl	 SHORT $L198374

; 407  : 				xoffset=global_offset;

  00bfa	8b 55 9c	 mov	 edx, DWORD PTR _global_offset$198363[ebp]
  00bfd	89 55 ac	 mov	 DWORD PTR _xoffset$198362[ebp], edx

; 408  : 				nIconNormal=0;

  00c00	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _nIconNormal$198361[ebp], 0

; 409  : 				bitmap = &m_AllImages;

  00c07	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _bitmap$198364[ebp], OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A ; BCMenu::m_AllImages
$L198374:

; 410  : 			}
; 411  : 			
; 412  : 			if(state&ODS_CHECKED && nIconNormal<0){

  00c0e	8b 45 90	 mov	 eax, DWORD PTR _state$198365[ebp]
  00c11	83 e0 08	 and	 eax, 8
  00c14	74 38		 je	 SHORT $L198375
  00c16	83 7d a0 00	 cmp	 DWORD PTR _nIconNormal$198361[ebp], 0
  00c1a	7d 32		 jge	 SHORT $L198375

; 413  : 				if(state&ODS_SELECTED && m_selectcheck>0)checkflag=TRUE;

  00c1c	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  00c1f	83 e1 01	 and	 ecx, 1
  00c22	74 15		 je	 SHORT $L198376
  00c24	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00c2a	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00c2e	7e 09		 jle	 SHORT $L198376
  00c30	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _checkflag$198354[ebp], 1

; 414  : 				else if(m_unselectcheck>0) checkflag=TRUE;

  00c37	eb 13		 jmp	 SHORT $L198377
$L198376:
  00c39	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00c3f	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00c43	7e 07		 jle	 SHORT $L198377
  00c45	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _checkflag$198354[ebp], 1
$L198377:

; 415  : 			}
; 416  : 			else if(nIconNormal != -1){

  00c4c	eb 35		 jmp	 SHORT $L198379
$L198375:
  00c4e	83 7d a0 ff	 cmp	 DWORD PTR _nIconNormal$198361[ebp], -1
  00c52	74 2f		 je	 SHORT $L198379

; 417  : 				standardflag=TRUE;

  00c54	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR _standardflag$198351[ebp], 1

; 418  : 				if(state&ODS_SELECTED && !(state&ODS_GRAYED))selectedflag=TRUE;

  00c5b	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  00c5e	83 e1 01	 and	 ecx, 1
  00c61	74 11		 je	 SHORT $L198381
  00c63	8b 55 90	 mov	 edx, DWORD PTR _state$198365[ebp]
  00c66	83 e2 02	 and	 edx, 2
  00c69	75 09		 jne	 SHORT $L198381
  00c6b	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _selectedflag$198352[ebp], 1

; 419  : 				else if(state&ODS_GRAYED) disableflag=TRUE;

  00c72	eb 0f		 jmp	 SHORT $L198379
$L198381:
  00c74	8b 45 90	 mov	 eax, DWORD PTR _state$198365[ebp]
  00c77	83 e0 02	 and	 eax, 2
  00c7a	74 07		 je	 SHORT $L198379
  00c7c	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _disableflag$198353[ebp], 1
$L198379:

; 420  : 			}
; 421  : 		}
; 422  : 		else{

  00c83	eb 09		 jmp	 SHORT $L198384
$L198367:

; 423  : 			strText.Empty();

  00c85	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  00c88	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
$L198384:

; 424  : 		}
; 425  : 		
; 426  : 		if(state&ODS_SELECTED){ // draw the down edges

  00c8e	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  00c91	83 e1 01	 and	 ecx, 1
  00c94	0f 84 8b 00 00
	00		 je	 $L198385

; 427  : 			
; 428  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  00c9a	8d 55 b8	 lea	 edx, DWORD PTR _m_penBack$198357[ebp]
  00c9d	52		 push	 edx
  00c9e	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00ca1	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  00ca6	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pOldPen$198386[ebp], eax

; 429  : 			
; 430  : 			// You need only Text highlight and thats what you get
; 431  : 			
; 432  : 			if(checkflag||standardflag||selectedflag||disableflag||state&ODS_CHECKED)

  00cac	83 7d cc 00	 cmp	 DWORD PTR _checkflag$198354[ebp], 0
  00cb0	75 1a		 jne	 SHORT $L198388
  00cb2	83 7d b4 00	 cmp	 DWORD PTR _standardflag$198351[ebp], 0
  00cb6	75 14		 jne	 SHORT $L198388
  00cb8	83 7d a8 00	 cmp	 DWORD PTR _selectedflag$198352[ebp], 0
  00cbc	75 0e		 jne	 SHORT $L198388
  00cbe	83 7d c4 00	 cmp	 DWORD PTR _disableflag$198353[ebp], 0
  00cc2	75 08		 jne	 SHORT $L198388
  00cc4	8b 45 90	 mov	 eax, DWORD PTR _state$198365[ebp]
  00cc7	83 e0 08	 and	 eax, 8
  00cca	74 25		 je	 SHORT $L198387
$L198388:

; 433  : 				rect2.SetRect(rect.left+m_iconX+4+BCMENU_GAP,rect.top,rect.right,rect.bottom);

  00ccc	8b 4d f0	 mov	 ecx, DWORD PTR _rect$[ebp+12]
  00ccf	51		 push	 ecx
  00cd0	8b 55 ec	 mov	 edx, DWORD PTR _rect$[ebp+8]
  00cd3	52		 push	 edx
  00cd4	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  00cd7	50		 push	 eax
  00cd8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  00cde	8b 55 e4	 mov	 edx, DWORD PTR _rect$[ebp]
  00ce1	8d 44 0a 05	 lea	 eax, DWORD PTR [edx+ecx+5]
  00ce5	50		 push	 eax
  00ce6	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00cec	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect
$L198387:

; 434  : 			pDC->FillRect (rect2,&m_brSelect);

  00cf1	8d 4d 88	 lea	 ecx, DWORD PTR _m_brSelect$198356[ebp]
  00cf4	51		 push	 ecx
  00cf5	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00cfb	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00d00	50		 push	 eax
  00d01	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d04	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 435  : 			
; 436  : 			pDC->SelectObject (pOldPen);

  00d09	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _pOldPen$198386[ebp]
  00d0f	52		 push	 edx
  00d10	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d13	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 437  : 			crText = GetSysColor(COLOR_HIGHLIGHTTEXT);

  00d18	6a 0e		 push	 14			; 0000000eH
  00d1a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00d20	89 45 94	 mov	 DWORD PTR _crText$198355[ebp], eax

; 438  : 		}
; 439  : 		else {

  00d23	eb 4f		 jmp	 SHORT $L198389
$L198385:

; 440  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  00d25	8d 45 b8	 lea	 eax, DWORD PTR _m_penBack$198357[ebp]
  00d28	50		 push	 eax
  00d29	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d2c	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  00d31	89 85 70 ff ff
	ff		 mov	 DWORD PTR _pOldPen$198390[ebp], eax

; 441  : 			pDC->FillRect (rect,&m_brBackground);

  00d37	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  00d3a	51		 push	 ecx
  00d3b	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d3e	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00d43	50		 push	 eax
  00d44	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d47	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 442  : 			pDC->SelectObject (pOldPen);

  00d4c	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _pOldPen$198390[ebp]
  00d52	52		 push	 edx
  00d53	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d56	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 443  : 			
; 444  : 			// draw the up edges	
; 445  : 			pDC->Draw3dRect (rect,m_clrBack,m_clrBack);

  00d5b	8b 45 dc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  00d5e	50		 push	 eax
  00d5f	8b 4d dc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  00d62	51		 push	 ecx
  00d63	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d66	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00d6b	50		 push	 eax
  00d6c	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00d6f	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L198389:

; 446  : 		}
; 447  : 		
; 448  : 		// draw the text if there is any
; 449  : 		//We have to paint the text only if the image is nonexistant
; 450  : 		
; 451  : 		dy = (rect.Height()-4-m_iconY)/2;

  00d74	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00d77	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00d7c	83 e8 04	 sub	 eax, 4
  00d7f	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  00d85	99		 cdq
  00d86	2b c2		 sub	 eax, edx
  00d88	d1 f8		 sar	 eax, 1
  00d8a	89 45 c8	 mov	 DWORD PTR _dy$198360[ebp], eax

; 452  : 		dy = dy<0 ? 0 : dy;

  00d8d	33 d2		 xor	 edx, edx
  00d8f	83 7d c8 00	 cmp	 DWORD PTR _dy$198360[ebp], 0
  00d93	0f 9c c2	 setl	 dl
  00d96	4a		 dec	 edx
  00d97	23 55 c8	 and	 edx, DWORD PTR _dy$198360[ebp]
  00d9a	89 55 c8	 mov	 DWORD PTR _dy$198360[ebp], edx

; 453  : 		
; 454  : 		if(checkflag||standardflag||selectedflag||disableflag){

  00d9d	83 7d cc 00	 cmp	 DWORD PTR _checkflag$198354[ebp], 0
  00da1	75 16		 jne	 SHORT $L198392
  00da3	83 7d b4 00	 cmp	 DWORD PTR _standardflag$198351[ebp], 0
  00da7	75 10		 jne	 SHORT $L198392
  00da9	83 7d a8 00	 cmp	 DWORD PTR _selectedflag$198352[ebp], 0
  00dad	75 0a		 jne	 SHORT $L198392
  00daf	83 7d c4 00	 cmp	 DWORD PTR _disableflag$198353[ebp], 0
  00db3	0f 84 d0 05 00
	00		 je	 $L198391
$L198392:

; 455  : 			rect2.SetRect(rect.left+1,rect.top+1+dy,rect.left+m_iconX+3,
; 456  : 				rect.top+m_iconY+3+dy);

  00db9	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  00dbc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  00dc2	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  00dc5	8d 54 08 03	 lea	 edx, DWORD PTR [eax+ecx+3]
  00dc9	52		 push	 edx
  00dca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  00dcf	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  00dd2	8d 54 01 03	 lea	 edx, DWORD PTR [ecx+eax+3]
  00dd6	52		 push	 edx
  00dd7	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  00dda	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  00ddd	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00de1	52		 push	 edx
  00de2	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  00de5	83 c0 01	 add	 eax, 1
  00de8	50		 push	 eax
  00de9	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00def	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 457  : 			pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  00df4	8b 4d dc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  00df7	51		 push	 ecx
  00df8	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  00dfb	52		 push	 edx
  00dfc	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00e02	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00e07	50		 push	 eax
  00e08	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00e0b	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 458  : 			if(checkflag && checkmaps){

  00e10	83 7d cc 00	 cmp	 DWORD PTR _checkflag$198354[ebp], 0
  00e14	0f 84 1d 01 00
	00		 je	 $L198393
  00e1a	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e20	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00e24	0f 84 0d 01 00
	00		 je	 $L198393

; 459  : 				pDC->FillRect (rect2,&m_brBackground);

  00e2a	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  00e2d	51		 push	 ecx
  00e2e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00e34	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00e39	50		 push	 eax
  00e3a	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00e3d	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 460  : 				rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 461  : 					rect.top+m_iconY+4+dy);

  00e42	8b 55 e8	 mov	 edx, DWORD PTR _rect$[ebp+4]
  00e45	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  00e4b	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  00e4e	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  00e52	51		 push	 ecx
  00e53	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  00e59	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  00e5c	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00e60	51		 push	 ecx
  00e61	8b 55 e8	 mov	 edx, DWORD PTR _rect$[ebp+4]
  00e64	03 55 c8	 add	 edx, DWORD PTR _dy$198360[ebp]
  00e67	52		 push	 edx
  00e68	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  00e6b	50		 push	 eax
  00e6c	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00e72	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 462  : 				
; 463  : 				pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  00e77	8b 4d dc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  00e7a	51		 push	 ecx
  00e7b	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  00e7e	52		 push	 edx
  00e7f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00e85	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00e8a	50		 push	 eax
  00e8b	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00e8e	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 464  : 				CPoint ptImage(rect.left+2,rect.top+2+dy);

  00e93	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  00e96	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  00e99	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  00e9d	52		 push	 edx
  00e9e	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  00ea1	83 c0 02	 add	 eax, 2
  00ea4	50		 push	 eax
  00ea5	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198394[ebp]
  00eab	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 465  : 				
; 466  : 				if(state&ODS_SELECTED)checkmaps->Draw(pDC,1,ptImage,ILD_TRANSPARENT);

  00eb0	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  00eb3	83 e1 01	 and	 ecx, 1
  00eb6	74 3e		 je	 SHORT $L198395
  00eb8	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _ptImage$198394[ebp]
  00ebe	89 95 d0 fe ff
	ff		 mov	 DWORD PTR $T202393[ebp], edx
  00ec4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptImage$198394[ebp+4]
  00eca	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T202393[ebp+4], eax
  00ed0	6a 01		 push	 1
  00ed2	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR $T202393[ebp+4]
  00ed8	51		 push	 ecx
  00ed9	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR $T202393[ebp]
  00edf	52		 push	 edx
  00ee0	6a 01		 push	 1
  00ee2	8b 45 e0	 mov	 eax, DWORD PTR _pDC$[ebp]
  00ee5	50		 push	 eax
  00ee6	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00eec	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  00eef	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 467  : 				else checkmaps->Draw(pDC,0,ptImage,ILD_TRANSPARENT);

  00ef4	eb 3c		 jmp	 SHORT $L198397
$L198395:
  00ef6	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _ptImage$198394[ebp]
  00efc	89 95 c8 fe ff
	ff		 mov	 DWORD PTR $T202394[ebp], edx
  00f02	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptImage$198394[ebp+4]
  00f08	89 85 cc fe ff
	ff		 mov	 DWORD PTR $T202394[ebp+4], eax
  00f0e	6a 01		 push	 1
  00f10	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR $T202394[ebp+4]
  00f16	51		 push	 ecx
  00f17	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR $T202394[ebp]
  00f1d	52		 push	 edx
  00f1e	6a 00		 push	 0
  00f20	8b 45 e0	 mov	 eax, DWORD PTR _pDC$[ebp]
  00f23	50		 push	 eax
  00f24	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f2a	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  00f2d	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198397:

; 468  : 			}
; 469  : 			else if(disableflag){

  00f32	e9 52 04 00 00	 jmp	 $L198391
$L198393:
  00f37	83 7d c4 00	 cmp	 DWORD PTR _disableflag$198353[ebp], 0
  00f3b	0f 84 7f 01 00
	00		 je	 $L198400

; 470  : 				if(!selectedflag){

  00f41	83 7d a8 00	 cmp	 DWORD PTR _selectedflag$198352[ebp], 0
  00f45	0f 85 70 01 00
	00		 jne	 $L198401

; 471  : 					CBitmap bitmapstandard;

  00f4b	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198402[ebp]
  00f51	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00f56	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 472  : 					GetBitmapFromImageList(pDC,bitmap,xoffset,bitmapstandard);

  00f5a	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _bitmapstandard$198402[ebp]
  00f60	52		 push	 edx
  00f61	8b 45 ac	 mov	 eax, DWORD PTR _xoffset$198362[ebp]
  00f64	50		 push	 eax
  00f65	8b 4d a4	 mov	 ecx, DWORD PTR _bitmap$198364[ebp]
  00f68	51		 push	 ecx
  00f69	8b 55 e0	 mov	 edx, DWORD PTR _pDC$[ebp]
  00f6c	52		 push	 edx
  00f6d	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f73	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 473  : 					rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 474  :                         rect.top+m_iconY+4+dy);

  00f78	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  00f7b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  00f81	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  00f84	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  00f88	52		 push	 edx
  00f89	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  00f8e	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  00f91	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  00f95	52		 push	 edx
  00f96	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  00f99	03 45 c8	 add	 eax, DWORD PTR _dy$198360[ebp]
  00f9c	50		 push	 eax
  00f9d	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  00fa0	51		 push	 ecx
  00fa1	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00fa7	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 475  : 					pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  00fac	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  00faf	52		 push	 edx
  00fb0	8b 45 dc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  00fb3	50		 push	 eax
  00fb4	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  00fba	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00fbf	50		 push	 eax
  00fc0	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00fc3	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 476  : 					if(disable_old_style)

  00fc8	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00fce	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00fd2	74 4a		 je	 SHORT $L198403

; 477  : 						DitherBlt(lpDIS->hDC,rect.left+2,rect.top+2+dy,m_iconX,m_iconY,
; 478  : 						(HBITMAP)(bitmapstandard),0,0,m_clrBack);

  00fd4	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  00fd7	52		 push	 edx
  00fd8	6a 00		 push	 0
  00fda	6a 00		 push	 0
  00fdc	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198402[ebp]
  00fe2	e8 00 00 00 00	 call	 ??BCBitmap@@QBEPAUHBITMAP__@@XZ ; CBitmap::operator HBITMAP__ *
  00fe7	50		 push	 eax
  00fe8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  00fed	50		 push	 eax
  00fee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  00ff4	51		 push	 ecx
  00ff5	8b 55 c8	 mov	 edx, DWORD PTR _dy$198360[ebp]
  00ff8	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  00ffb	8d 4c 10 02	 lea	 ecx, DWORD PTR [eax+edx+2]
  00fff	51		 push	 ecx
  01000	8b 55 e4	 mov	 edx, DWORD PTR _rect$[ebp]
  01003	83 c2 02	 add	 edx, 2
  01006	52		 push	 edx
  01007	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  0100a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0100d	51		 push	 ecx
  0100e	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01014	e8 00 00 00 00	 call	 ?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ; BCMenu::DitherBlt

; 479  : 					else{

  01019	e9 83 00 00 00	 jmp	 $L198405
$L198403:

; 480  : 						if(hicolor_bitmaps)

  0101e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hicolor_bitmaps@BCMenu@@1HA, 0 ; BCMenu::hicolor_bitmaps
  01025	74 3c		 je	 SHORT $L198406

; 481  : 							DitherBlt3(pDC,rect.left+2,rect.top+2+dy,m_iconX,m_iconY,
; 482  : 							bitmapstandard,m_clrBack);

  01027	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  0102a	52		 push	 edx
  0102b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _bitmapstandard$198402[ebp]
  01031	50		 push	 eax
  01032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  01038	51		 push	 ecx
  01039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0103f	52		 push	 edx
  01040	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  01043	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01046	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  0104a	52		 push	 edx
  0104b	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  0104e	83 c0 02	 add	 eax, 2
  01051	50		 push	 eax
  01052	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01055	51		 push	 ecx
  01056	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0105c	e8 00 00 00 00	 call	 ?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z ; BCMenu::DitherBlt3

; 483  : 						else

  01061	eb 3e		 jmp	 SHORT $L198405
$L198406:

; 484  : 							DitherBlt2(pDC,rect.left+2,rect.top+2+dy,m_iconX,m_iconY,
; 485  : 							bitmapstandard,0,0,m_clrBack);

  01063	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  01066	52		 push	 edx
  01067	6a 00		 push	 0
  01069	6a 00		 push	 0
  0106b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _bitmapstandard$198402[ebp]
  01071	50		 push	 eax
  01072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  01078	51		 push	 ecx
  01079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0107f	52		 push	 edx
  01080	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  01083	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01086	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  0108a	52		 push	 edx
  0108b	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  0108e	83 c0 02	 add	 eax, 2
  01091	50		 push	 eax
  01092	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01095	51		 push	 ecx
  01096	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0109c	e8 00 00 00 00	 call	 ?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ; BCMenu::DitherBlt2
$L198405:

; 486  : 					}
; 487  : 					bitmapstandard.DeleteObject();

  010a1	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198402[ebp]
  010a7	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 488  : 				}

  010ac	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  010b0	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198402[ebp]
  010b6	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L198401:

; 489  : 			}
; 490  : 			else if(selectedflag){

  010bb	e9 c9 02 00 00	 jmp	 $L198391
$L198400:
  010c0	83 7d a8 00	 cmp	 DWORD PTR _selectedflag$198352[ebp], 0
  010c4	0f 84 0b 01 00
	00		 je	 $L198409

; 491  : 				pDC->FillRect (rect2,&m_brBackground);

  010ca	8d 55 d4	 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  010cd	52		 push	 edx
  010ce	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  010d4	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  010d9	50		 push	 eax
  010da	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  010dd	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 492  : 				rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 493  : 					rect.top+m_iconY+4+dy);

  010e2	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  010e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  010eb	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  010ee	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  010f2	52		 push	 edx
  010f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  010f8	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  010fb	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  010ff	52		 push	 edx
  01100	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  01103	03 45 c8	 add	 eax, DWORD PTR _dy$198360[ebp]
  01106	50		 push	 eax
  01107	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  0110a	51		 push	 ecx
  0110b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  01111	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 494  : 				if (IsNewShell()){

  01116	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  0111b	85 c0		 test	 eax, eax
  0111d	74 56		 je	 SHORT $L198410

; 495  : 					if(state&ODS_CHECKED)

  0111f	8b 55 90	 mov	 edx, DWORD PTR _state$198365[ebp]
  01122	83 e2 08	 and	 edx, 8
  01125	74 28		 je	 SHORT $L198411

; 496  : 						pDC->Draw3dRect(rect2,GetSysColor(COLOR_3DSHADOW),
; 497  : 						GetSysColor(COLOR_3DHILIGHT));

  01127	6a 14		 push	 20			; 00000014H
  01129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0112f	50		 push	 eax
  01130	6a 10		 push	 16			; 00000010H
  01132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01138	50		 push	 eax
  01139	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  0113f	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01144	50		 push	 eax
  01145	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01148	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 498  : 					else

  0114d	eb 26		 jmp	 SHORT $L198410
$L198411:

; 499  : 						pDC->Draw3dRect(rect2,GetSysColor(COLOR_3DHILIGHT),
; 500  : 						GetSysColor(COLOR_3DSHADOW));

  0114f	6a 10		 push	 16			; 00000010H
  01151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01157	50		 push	 eax
  01158	6a 14		 push	 20			; 00000014H
  0115a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01160	50		 push	 eax
  01161	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  01167	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0116c	50		 push	 eax
  0116d	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01170	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L198410:

; 501  : 				}
; 502  : 				CPoint ptImage(rect.left+2,rect.top+2+dy);

  01175	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  01178	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  0117b	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  0117f	52		 push	 edx
  01180	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  01183	83 c0 02	 add	 eax, 2
  01186	50		 push	 eax
  01187	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198413[ebp]
  0118d	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 503  : 				if(bitmap)bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  01192	83 7d a4 00	 cmp	 DWORD PTR _bitmap$198364[ebp], 0
  01196	74 38		 je	 SHORT $L198414
  01198	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198413[ebp]
  0119e	89 8d c0 fe ff
	ff		 mov	 DWORD PTR $T202395[ebp], ecx
  011a4	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _ptImage$198413[ebp+4]
  011aa	89 95 c4 fe ff
	ff		 mov	 DWORD PTR $T202395[ebp+4], edx
  011b0	6a 01		 push	 1
  011b2	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T202395[ebp+4]
  011b8	50		 push	 eax
  011b9	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR $T202395[ebp]
  011bf	51		 push	 ecx
  011c0	8b 55 ac	 mov	 edx, DWORD PTR _xoffset$198362[ebp]
  011c3	52		 push	 edx
  011c4	8b 45 e0	 mov	 eax, DWORD PTR _pDC$[ebp]
  011c7	50		 push	 eax
  011c8	8b 4d a4	 mov	 ecx, DWORD PTR _bitmap$198364[ebp]
  011cb	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198414:

; 504  : 			}
; 505  : 			else{

  011d0	e9 b4 01 00 00	 jmp	 $L198391
$L198409:

; 506  : 				if(state&ODS_CHECKED){

  011d5	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  011d8	83 e1 08	 and	 ecx, 8
  011db	0f 84 e5 00 00
	00		 je	 $L198417

; 507  : 					CBrush brush;

  011e1	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$198418[ebp]
  011e7	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  011ec	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 508  : 					COLORREF col = m_clrBack;

  011f0	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  011f3	89 95 4c ff ff
	ff		 mov	 DWORD PTR _col$198419[ebp], edx

; 509  : 					col = LightenColor(col,0.6);

  011f9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe3333333333333
  011ff	83 ec 08	 sub	 esp, 8
  01202	dd 1c 24	 fstp	 QWORD PTR [esp]
  01205	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _col$198419[ebp]
  0120b	50		 push	 eax
  0120c	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  01211	83 c4 0c	 add	 esp, 12			; 0000000cH
  01214	89 85 4c ff ff
	ff		 mov	 DWORD PTR _col$198419[ebp], eax

; 510  : 					brush.CreateSolidBrush(col);

  0121a	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _col$198419[ebp]
  01220	51		 push	 ecx
  01221	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$198418[ebp]
  01227	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 511  : 					pDC->FillRect(rect2,&brush);

  0122c	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _brush$198418[ebp]
  01232	52		 push	 edx
  01233	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  01239	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0123e	50		 push	 eax
  0123f	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01242	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 512  : 					brush.DeleteObject();

  01247	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$198418[ebp]
  0124d	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 513  : 					rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 514  :                         rect.top+m_iconY+4+dy);

  01252	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  01255	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0125b	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  0125e	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  01262	52		 push	 edx
  01263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  01268	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  0126b	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  0126f	52		 push	 edx
  01270	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  01273	03 45 c8	 add	 eax, DWORD PTR _dy$198360[ebp]
  01276	50		 push	 eax
  01277	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  0127a	51		 push	 ecx
  0127b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  01281	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 515  : 					if (IsNewShell())

  01286	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  0128b	85 c0		 test	 eax, eax
  0128d	74 26		 je	 SHORT $L198420

; 516  : 						pDC->Draw3dRect(rect2,GetSysColor(COLOR_3DSHADOW),
; 517  : 						GetSysColor(COLOR_3DHILIGHT));

  0128f	6a 14		 push	 20			; 00000014H
  01291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01297	50		 push	 eax
  01298	6a 10		 push	 16			; 00000010H
  0129a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  012a0	50		 push	 eax
  012a1	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  012a7	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  012ac	50		 push	 eax
  012ad	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  012b0	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L198420:

; 518  : 				}

  012b5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  012b9	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$198418[ebp]
  012bf	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush

; 519  : 				else{

  012c4	eb 68		 jmp	 SHORT $L198421
$L198417:

; 520  : 					pDC->FillRect (rect2,&m_brBackground);

  012c6	8d 55 d4	 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  012c9	52		 push	 edx
  012ca	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  012d0	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  012d5	50		 push	 eax
  012d6	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  012d9	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 521  : 					rect2.SetRect(rect.left,rect.top+dy,rect.left+m_iconX+4,
; 522  :                         rect.top+m_iconY+4+dy);

  012de	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  012e1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  012e7	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  012ea	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  012ee	52		 push	 edx
  012ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  012f4	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  012f7	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  012fb	52		 push	 edx
  012fc	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  012ff	03 45 c8	 add	 eax, DWORD PTR _dy$198360[ebp]
  01302	50		 push	 eax
  01303	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  01306	51		 push	 ecx
  01307	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  0130d	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 523  : 					pDC->Draw3dRect (rect2,m_clrBack,m_clrBack);

  01312	8b 55 dc	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  01315	52		 push	 edx
  01316	8b 45 dc	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  01319	50		 push	 eax
  0131a	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  01320	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01325	50		 push	 eax
  01326	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01329	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L198421:

; 524  : 				}
; 525  : 				CPoint ptImage(rect.left+2,rect.top+2+dy);

  0132e	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  01331	8b 55 e8	 mov	 edx, DWORD PTR _rect$[ebp+4]
  01334	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  01338	50		 push	 eax
  01339	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  0133c	83 c1 02	 add	 ecx, 2
  0133f	51		 push	 ecx
  01340	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198422[ebp]
  01346	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 526  : 				if(bitmap)bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  0134b	83 7d a4 00	 cmp	 DWORD PTR _bitmap$198364[ebp], 0
  0134f	74 38		 je	 SHORT $L198391
  01351	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _ptImage$198422[ebp]
  01357	89 95 b8 fe ff
	ff		 mov	 DWORD PTR $T202396[ebp], edx
  0135d	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _ptImage$198422[ebp+4]
  01363	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T202396[ebp+4], eax
  01369	6a 01		 push	 1
  0136b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T202396[ebp+4]
  01371	51		 push	 ecx
  01372	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR $T202396[ebp]
  01378	52		 push	 edx
  01379	8b 45 ac	 mov	 eax, DWORD PTR _xoffset$198362[ebp]
  0137c	50		 push	 eax
  0137d	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01380	51		 push	 ecx
  01381	8b 4d a4	 mov	 ecx, DWORD PTR _bitmap$198364[ebp]
  01384	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198391:

; 527  : 			}
; 528  : 		}
; 529  : 		if(nIconNormal<0 && state&ODS_CHECKED && !checkflag){

  01389	83 7d a0 00	 cmp	 DWORD PTR _nIconNormal$198361[ebp], 0
  0138d	0f 8d da 00 00
	00		 jge	 $L198425
  01393	8b 55 90	 mov	 edx, DWORD PTR _state$198365[ebp]
  01396	83 e2 08	 and	 edx, 8
  01399	0f 84 ce 00 00
	00		 je	 $L198425
  0139f	83 7d cc 00	 cmp	 DWORD PTR _checkflag$198354[ebp], 0
  013a3	0f 85 c4 00 00
	00		 jne	 $L198425

; 530  : 			rect2.SetRect(rect.left+1,rect.top+2+dy,rect.left+m_iconX+1,
; 531  : 				rect.top+m_iconY+2+dy);

  013a9	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  013ac	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  013b2	8b 4d c8	 mov	 ecx, DWORD PTR _dy$198360[ebp]
  013b5	8d 54 08 02	 lea	 edx, DWORD PTR [eax+ecx+2]
  013b9	52		 push	 edx
  013ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  013bf	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  013c2	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  013c6	52		 push	 edx
  013c7	8b 45 c8	 mov	 eax, DWORD PTR _dy$198360[ebp]
  013ca	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  013cd	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  013d1	52		 push	 edx
  013d2	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  013d5	83 c0 01	 add	 eax, 1
  013d8	50		 push	 eax
  013d9	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$198350[ebp]
  013df	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 532  : 			CMenuItemInfo info;

  013e4	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _info$198426[ebp]
  013ea	e8 00 00 00 00	 call	 ??0CMenuItemInfo@@QAE@XZ ; CMenuItemInfo::CMenuItemInfo

; 533  : 			info.fMask = MIIM_CHECKMARKS;

  013ef	c7 85 18 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR _info$198426[ebp+4], 8

; 534  : 			::GetMenuItemInfo((HMENU)lpDIS->hwndItem,lpDIS->itemID,
; 535  : 				MF_BYCOMMAND, &info);

  013f9	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _info$198426[ebp]
  013ff	51		 push	 ecx
  01400	6a 00		 push	 0
  01402	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01405	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01408	50		 push	 eax
  01409	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  0140c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0140f	52		 push	 edx
  01410	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuItemInfoA@16

; 536  : 			if(state&ODS_CHECKED || info.hbmpUnchecked) {

  01416	8b 45 90	 mov	 eax, DWORD PTR _state$198365[ebp]
  01419	83 e0 08	 and	 eax, 8
  0141c	75 09		 jne	 SHORT $L198429
  0141e	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _info$198426[ebp+28], 0
  01425	74 46		 je	 SHORT $L198425
$L198429:

; 537  : 				Draw3DCheckmark(pDC, rect2, state&ODS_SELECTED,
; 538  : 					state&ODS_CHECKED ? info.hbmpChecked :
; 539  : 				info.hbmpUnchecked);

  01427	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  0142a	83 e1 08	 and	 ecx, 8
  0142d	74 0e		 je	 SHORT $L202397
  0142f	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _info$198426[ebp+24]
  01435	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv579[ebp], edx
  0143b	eb 0c		 jmp	 SHORT $L202398
$L202397:
  0143d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _info$198426[ebp+28]
  01443	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv579[ebp], eax
$L202398:
  01449	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv579[ebp]
  0144f	51		 push	 ecx
  01450	8b 55 90	 mov	 edx, DWORD PTR _state$198365[ebp]
  01453	83 e2 01	 and	 edx, 1
  01456	52		 push	 edx
  01457	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rect2$198350[ebp]
  0145d	50		 push	 eax
  0145e	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01461	51		 push	 ecx
  01462	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01468	e8 00 00 00 00	 call	 ?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z ; BCMenu::Draw3DCheckmark
$L198425:

; 540  : 			}
; 541  : 		}
; 542  : 		
; 543  : 		//This is needed always so that we can have the space for check marks
; 544  : 		
; 545  : 		x0=rect.left;y0=rect.top;

  0146d	8b 55 e4	 mov	 edx, DWORD PTR _rect$[ebp]
  01470	89 55 98	 mov	 DWORD PTR _x0$198358[ebp], edx
  01473	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  01476	89 45 c0	 mov	 DWORD PTR _y0$198359[ebp], eax

; 546  : 		rect.left = rect.left + m_iconX + 8 + BCMENU_GAP; 

  01479	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0147f	8b 55 e4	 mov	 edx, DWORD PTR _rect$[ebp]
  01482	8d 44 0a 09	 lea	 eax, DWORD PTR [edx+ecx+9]
  01486	89 45 e4	 mov	 DWORD PTR _rect$[ebp], eax

; 547  : 		
; 548  : 		if(!strText.IsEmpty()){

  01489	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  0148c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  01492	0f b6 c8	 movzx	 ecx, al
  01495	85 c9		 test	 ecx, ecx
  01497	0f 85 92 03 00
	00		 jne	 $L198430

; 549  : 			
; 550  : 			CRect rectt(rect.left,rect.top,rect.right,rect.bottom);

  0149d	8b 55 f0	 mov	 edx, DWORD PTR _rect$[ebp+12]
  014a0	52		 push	 edx
  014a1	8b 45 ec	 mov	 eax, DWORD PTR _rect$[ebp+8]
  014a4	50		 push	 eax
  014a5	8b 4d e8	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  014a8	51		 push	 ecx
  014a9	8b 55 e4	 mov	 edx, DWORD PTR _rect$[ebp]
  014ac	52		 push	 edx
  014ad	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  014b3	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 551  : 			
; 552  : 			//   Find tabs
; 553  : 			
; 554  : 			CString leftStr,rightStr;

  014b8	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  014be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  014c4	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  014c8	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198433[ebp]
  014ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  014d4	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 555  : 			leftStr.Empty();rightStr.Empty();

  014d8	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  014de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  014e4	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198433[ebp]
  014ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ

; 556  : 			int tablocr=strText.ReverseFind(_T('\t'));

  014f0	6a 09		 push	 9
  014f2	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  014f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReverseFind@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHD@Z
  014fb	89 85 10 ff ff
	ff		 mov	 DWORD PTR _tablocr$198434[ebp], eax

; 557  : 			if(tablocr!=-1){

  01501	83 bd 10 ff ff
	ff ff		 cmp	 DWORD PTR _tablocr$198434[ebp], -1
  01508	0f 84 be 00 00
	00		 je	 $L198435

; 558  : 				rightStr=strText.Mid(tablocr+1);

  0150e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _tablocr$198434[ebp]
  01514	83 c0 01	 add	 eax, 1
  01517	50		 push	 eax
  01518	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T202399[ebp]
  0151e	51		 push	 ecx
  0151f	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  01522	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  01528	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv600[ebp], eax
  0152e	8b 95 9c fe ff
	ff		 mov	 edx, DWORD PTR tv600[ebp]
  01534	89 95 98 fe ff
	ff		 mov	 DWORD PTR tv764[ebp], edx
  0153a	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0153e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv764[ebp]
  01544	50		 push	 eax
  01545	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198433[ebp]
  0154b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01551	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  01555	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T202399[ebp]
  0155b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 559  : 				leftStr=strText.Left(strText.Find(_T('\t')));

  01561	6a 00		 push	 0
  01563	6a 09		 push	 9
  01565	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  01568	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  0156e	50		 push	 eax
  0156f	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T202400[ebp]
  01575	51		 push	 ecx
  01576	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  01579	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  0157f	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv597[ebp], eax
  01585	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR tv597[ebp]
  0158b	89 95 90 fe ff
	ff		 mov	 DWORD PTR tv766[ebp], edx
  01591	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  01595	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR tv766[ebp]
  0159b	50		 push	 eax
  0159c	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  015a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  015a8	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  015ac	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T202400[ebp]
  015b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 560  : 				rectt.right-=m_iconX;

  015b8	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _rectt$198431[ebp+8]
  015be	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  015c4	89 8d fc fe ff
	ff		 mov	 DWORD PTR _rectt$198431[ebp+8], ecx

; 561  : 			}
; 562  : 			else leftStr=strText;

  015ca	eb 10		 jmp	 SHORT $L198438
$L198435:
  015cc	8d 55 b0	 lea	 edx, DWORD PTR _strText$198366[ebp]
  015cf	52		 push	 edx
  015d0	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  015d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
$L198438:

; 563  : 			
; 564  : 			int iOldMode = pDC->GetBkMode();

  015dc	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  015df	e8 00 00 00 00	 call	 ?GetBkMode@CDC@@QBEHXZ	; CDC::GetBkMode
  015e4	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _iOldMode$198439[ebp], eax

; 565  : 			pDC->SetBkMode( TRANSPARENT);

  015ea	6a 01		 push	 1
  015ec	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  015ef	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 566  : 			
; 567  : 			// Draw the text in the correct colour:
; 568  : 			
; 569  : 			UINT nFormat  = DT_LEFT|DT_SINGLELINE|DT_VCENTER;

  015f4	c7 85 0c ff ff
	ff 24 00 00 00	 mov	 DWORD PTR _nFormat$198440[ebp], 36 ; 00000024H

; 570  : 			UINT nFormatr = DT_RIGHT|DT_SINGLELINE|DT_VCENTER;

  015fe	c7 85 08 ff ff
	ff 26 00 00 00	 mov	 DWORD PTR _nFormatr$198441[ebp], 38 ; 00000026H

; 571  : 			if(!(lpDIS->itemState & ODS_GRAYED)){

  01608	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  0160b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0160e	83 e1 02	 and	 ecx, 2
  01611	75 61		 jne	 SHORT $L198442

; 572  : 				pDC->SetTextColor(crText);

  01613	8b 55 94	 mov	 edx, DWORD PTR _crText$198355[ebp]
  01616	52		 push	 edx
  01617	8b 45 e0	 mov	 eax, DWORD PTR _pDC$[ebp]
  0161a	8b 10		 mov	 edx, DWORD PTR [eax]
  0161c	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0161f	ff 52 38	 call	 DWORD PTR [edx+56]

; 573  : 				pDC->DrawText (leftStr,rectt,nFormat);

  01622	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _nFormat$198440[ebp]
  01628	50		 push	 eax
  01629	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  0162f	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01634	50		 push	 eax
  01635	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  0163b	51		 push	 ecx
  0163c	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0163f	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 574  : 				if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  01644	83 bd 10 ff ff
	ff ff		 cmp	 DWORD PTR _tablocr$198434[ebp], -1
  0164b	74 22		 je	 SHORT $L198443
  0164d	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _nFormatr$198441[ebp]
  01653	52		 push	 edx
  01654	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  0165a	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0165f	50		 push	 eax
  01660	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR _rightStr$198433[ebp]
  01666	50		 push	 eax
  01667	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0166a	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198443:

; 575  : 			}
; 576  : 			else{

  0166f	e9 8c 01 00 00	 jmp	 $L198444
$L198442:

; 577  : 				
; 578  : 				// Draw the disabled text
; 579  : 				if(!(state & ODS_SELECTED)){

  01674	8b 4d 90	 mov	 ecx, DWORD PTR _state$198365[ebp]
  01677	83 e1 01	 and	 ecx, 1
  0167a	0f 85 24 01 00
	00		 jne	 $L198445

; 580  : 					RECT offset = *rectt;

  01680	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  01686	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0168b	8b 10		 mov	 edx, DWORD PTR [eax]
  0168d	89 95 dc fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp], edx
  01693	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01696	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp+4], ecx
  0169c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0169f	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp+8], edx
  016a5	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  016a8	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp+12], eax

; 581  : 					offset.left+=1;

  016ae	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _offset$198446[ebp]
  016b4	83 c1 01	 add	 ecx, 1
  016b7	89 8d dc fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp], ecx

; 582  : 					offset.right+=1;

  016bd	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _offset$198446[ebp+8]
  016c3	83 c2 01	 add	 edx, 1
  016c6	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp+8], edx

; 583  : 					offset.top+=1;

  016cc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _offset$198446[ebp+4]
  016d2	83 c0 01	 add	 eax, 1
  016d5	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp+4], eax

; 584  : 					offset.bottom+=1;

  016db	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _offset$198446[ebp+12]
  016e1	83 c1 01	 add	 ecx, 1
  016e4	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _offset$198446[ebp+12], ecx

; 585  : 					pDC->SetTextColor(GetSysColor(COLOR_BTNHILIGHT));

  016ea	6a 14		 push	 20			; 00000014H
  016ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  016f2	50		 push	 eax
  016f3	8b 55 e0	 mov	 edx, DWORD PTR _pDC$[ebp]
  016f6	8b 02		 mov	 eax, DWORD PTR [edx]
  016f8	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  016fb	ff 50 38	 call	 DWORD PTR [eax+56]

; 586  : 					pDC->DrawText(leftStr,&offset, nFormat);

  016fe	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _nFormat$198440[ebp]
  01704	51		 push	 ecx
  01705	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _offset$198446[ebp]
  0170b	52		 push	 edx
  0170c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _leftStr$198432[ebp]
  01712	50		 push	 eax
  01713	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01716	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 587  : 					if(tablocr!=-1) pDC->DrawText (rightStr,&offset,nFormatr);

  0171b	83 bd 10 ff ff
	ff ff		 cmp	 DWORD PTR _tablocr$198434[ebp], -1
  01722	74 1d		 je	 SHORT $L198447
  01724	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _nFormatr$198441[ebp]
  0172a	51		 push	 ecx
  0172b	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _offset$198446[ebp]
  01731	52		 push	 edx
  01732	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR _rightStr$198433[ebp]
  01738	50		 push	 eax
  01739	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0173c	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198447:

; 588  : 					pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));

  01741	6a 11		 push	 17			; 00000011H
  01743	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  01749	50		 push	 eax
  0174a	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0174d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0174f	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01752	ff 52 38	 call	 DWORD PTR [edx+56]

; 589  : 					pDC->DrawText(leftStr,rectt, nFormat);

  01755	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _nFormat$198440[ebp]
  0175b	50		 push	 eax
  0175c	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  01762	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01767	50		 push	 eax
  01768	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  0176e	51		 push	 ecx
  0176f	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01772	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 590  : 					if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  01777	83 bd 10 ff ff
	ff ff		 cmp	 DWORD PTR _tablocr$198434[ebp], -1
  0177e	74 22		 je	 SHORT $L198448
  01780	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _nFormatr$198441[ebp]
  01786	52		 push	 edx
  01787	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  0178d	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01792	50		 push	 eax
  01793	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR _rightStr$198433[ebp]
  01799	50		 push	 eax
  0179a	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0179d	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198448:

; 591  : 				}
; 592  : 				else{

  017a2	eb 5c		 jmp	 SHORT $L198444
$L198445:

; 593  : 					// And the standard Grey text:
; 594  : 					pDC->SetTextColor(m_clrBack);

  017a4	8b 4d dc	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  017a7	51		 push	 ecx
  017a8	8b 55 e0	 mov	 edx, DWORD PTR _pDC$[ebp]
  017ab	8b 02		 mov	 eax, DWORD PTR [edx]
  017ad	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  017b0	ff 50 38	 call	 DWORD PTR [eax+56]

; 595  : 					pDC->DrawText(leftStr,rectt, nFormat);

  017b3	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _nFormat$198440[ebp]
  017b9	51		 push	 ecx
  017ba	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  017c0	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  017c5	50		 push	 eax
  017c6	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _leftStr$198432[ebp]
  017cc	52		 push	 edx
  017cd	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  017d0	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 596  : 					if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  017d5	83 bd 10 ff ff
	ff ff		 cmp	 DWORD PTR _tablocr$198434[ebp], -1
  017dc	74 22		 je	 SHORT $L198444
  017de	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _nFormatr$198441[ebp]
  017e4	50		 push	 eax
  017e5	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _rectt$198431[ebp]
  017eb	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  017f0	50		 push	 eax
  017f1	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198433[ebp]
  017f7	51		 push	 ecx
  017f8	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  017fb	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198444:

; 597  : 				}
; 598  : 			}
; 599  : 			pDC->SetBkMode( iOldMode );

  01800	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _iOldMode$198439[ebp]
  01806	52		 push	 edx
  01807	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0180a	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 600  : 		}

  0180f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  01813	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198433[ebp]
  01819	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0181f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01823	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  01829	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L198430:

; 601  : 		
; 602  : 		m_penBack.DeleteObject();

  0182f	8d 4d b8	 lea	 ecx, DWORD PTR _m_penBack$198357[ebp]
  01832	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 603  : 		m_brSelect.DeleteObject();

  01837	8d 4d 88	 lea	 ecx, DWORD PTR _m_brSelect$198356[ebp]
  0183a	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 604  : 	}

  0183f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01843	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  01846	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0184c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01850	8d 4d b8	 lea	 ecx, DWORD PTR _m_penBack$198357[ebp]
  01853	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  01858	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0185c	8d 4d 88	 lea	 ecx, DWORD PTR _m_brSelect$198356[ebp]
  0185f	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L198349:

; 605  : 	m_brBackground.DeleteObject();

  01864	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  01867	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 606  : }

  0186c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01873	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  01876	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0187b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0187e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01885	8b e5		 mov	 esp, ebp
  01887	5d		 pop	 ebp
  01888	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202401:
  00063	8d 4d d4	 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202402:
  0006b	8d 4d 88	 lea	 ecx, DWORD PTR _m_brSelect$198356[ebp]
  0006e	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202403:
  00073	8d 4d b8	 lea	 ecx, DWORD PTR _m_penBack$198357[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
$L202404:
  0007b	8d 4d b0	 lea	 ecx, DWORD PTR _strText$198366[ebp]
  0007e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202405:
  00084	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T202392[ebp]
  0008a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202406:
  00090	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198402[ebp]
  00096	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202407:
  0009b	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$198418[ebp]
  000a1	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202408:
  000a6	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198432[ebp]
  000ac	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202409:
  000b2	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198433[ebp]
  000b8	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202410:
  000be	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T202399[ebp]
  000c4	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202411:
  000ca	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T202400[ebp]
  000d0	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z:
  000d6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202413
  000db	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawItem_Win9xNT2000@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP ; BCMenu::DrawItem_Win9xNT2000
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ??0CMenuItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMenuItemInfo@@QAE@XZ PROC NEAR			; CMenuItemInfo::CMenuItemInfo, COMDAT
; _this$ = ecx

; 64   : 	CMenuItemInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	{
; 66   : 		memset(this, 0, sizeof(MENUITEMINFO));

  00007	6a 30		 push	 48			; 00000030H
  00009	6a 00		 push	 0
  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 67   : 		cbSize = sizeof(MENUITEMINFO);

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 01 30 00 00
	00		 mov	 DWORD PTR [ecx], 48	; 00000030H

; 68   : 	}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CMenuItemInfo@@QAE@XZ ENDP				; CMenuItemInfo::CMenuItemInfo
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00011	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0001b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00028	83 bd 70 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0002f	75 15		 jne	 SHORT $L24173
  00031	83 bd 64 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00038	72 0c		 jb	 SHORT $L24173

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  0003a	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00044	eb 0a		 jmp	 SHORT $L24174
$L24173:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00046	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24174:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  00050	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0005c	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 93   : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24161 = -24					; size = 4
_lcidThread$ = -20					; size = 4
_szACP$ = -16						; size = 7
__$ArrayPad$ = -8					; size = 4
_nACP$ = -4						; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0001b	89 45 ec	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  0001e	6a 07		 push	 7
  00020	8d 45 f0	 lea	 eax, DWORD PTR _szACP$[ebp]
  00023	50		 push	 eax
  00024	68 04 10 00 00	 push	 4100			; 00001004H
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  0002c	51		 push	 ecx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00033	85 c0		 test	 eax, eax
  00035	74 34		 je	 SHORT $L24160

; 111  : 	{
; 112  : 		char* pch = szACP;

  00037	8d 55 f0	 lea	 edx, DWORD PTR _szACP$[ebp]
  0003a	89 55 e8	 mov	 DWORD PTR _pch$24161[ebp], edx
$L24163:

; 113  : 		while (*pch != '\0')

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00040	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00043	85 c9		 test	 ecx, ecx
  00045	74 24		 je	 SHORT $L24160

; 114  : 		{
; 115  : 			nACP *= 10;

  00047	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  0004a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0004d	89 55 fc	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00050	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00053	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  00059	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0005d	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
  00060	8b 4d e8	 mov	 ecx, DWORD PTR _pch$24161[ebp]
  00063	83 c1 01	 add	 ecx, 1
  00066	89 4d e8	 mov	 DWORD PTR _pch$24161[ebp], ecx

; 117  : 		}

  00069	eb d2		 jmp	 SHORT $L24163
$L24160:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0006f	75 09		 jne	 SHORT $L24165

; 121  : 		nACP = ::GetACP();

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00077	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
$L24165:

; 122  : 
; 123  : 	return nACP;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 158  : 	return( g_pfnGetThreadACP() );

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 159  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
EXTRN	__ftol2:NEAR
;	COMDAT __real@0000000000000000
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
tv162 = -32						; size = 4
tv161 = -28						; size = 4
tv157 = -24						; size = 4
tv156 = -20						; size = 4
tv152 = -16						; size = 4
tv151 = -12						; size = 4
_green$198457 = -6					; size = 1
_blue$198458 = -5					; size = 1
_red$198456 = -4					; size = 1
_lightred$198459 = -3					; size = 1
_lightblue$198461 = -2					; size = 1
_lightgreen$198460 = -1					; size = 1
_col$ = 8						; size = 4
_factor$ = 12						; size = 8
?LightenColor@BCMenu@@SAKKN@Z PROC NEAR			; BCMenu::LightenColor

; 609  : {

  01890	55		 push	 ebp
  01891	8b ec		 mov	 ebp, esp
  01893	83 ec 20	 sub	 esp, 32			; 00000020H

; 610  : 	if(factor>0.0&&factor<=1.0){

  01896	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  01899	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0189f	df e0		 fnstsw	 ax
  018a1	f6 c4 41	 test	 ah, 65			; 00000041H
  018a4	0f 85 be 00 00
	00		 jne	 $L198455
  018aa	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  018ad	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  018b3	df e0		 fnstsw	 ax
  018b5	f6 c4 41	 test	 ah, 65			; 00000041H
  018b8	0f 8a aa 00 00
	00		 jp	 $L198455

; 611  : 		BYTE red,green,blue,lightred,lightgreen,lightblue;
; 612  : 		red = GetRValue(col);

  018be	8a 45 08	 mov	 al, BYTE PTR _col$[ebp]
  018c1	88 45 fc	 mov	 BYTE PTR _red$198456[ebp], al

; 613  : 		green = GetGValue(col);

  018c4	0f b7 4d 08	 movzx	 ecx, WORD PTR _col$[ebp]
  018c8	c1 f9 08	 sar	 ecx, 8
  018cb	88 4d fa	 mov	 BYTE PTR _green$198457[ebp], cl

; 614  : 		blue = GetBValue(col);

  018ce	8b 55 08	 mov	 edx, DWORD PTR _col$[ebp]
  018d1	c1 ea 10	 shr	 edx, 16			; 00000010H
  018d4	88 55 fb	 mov	 BYTE PTR _blue$198458[ebp], dl

; 615  : 		lightred = (BYTE)((factor*(255-red)) + red);

  018d7	0f b6 45 fc	 movzx	 eax, BYTE PTR _red$198456[ebp]
  018db	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  018e0	2b c8		 sub	 ecx, eax
  018e2	89 4d f4	 mov	 DWORD PTR tv151[ebp], ecx
  018e5	db 45 f4	 fild	 DWORD PTR tv151[ebp]
  018e8	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  018eb	0f b6 55 fc	 movzx	 edx, BYTE PTR _red$198456[ebp]
  018ef	89 55 f0	 mov	 DWORD PTR tv152[ebp], edx
  018f2	db 45 f0	 fild	 DWORD PTR tv152[ebp]
  018f5	de c1		 faddp	 ST(1), ST(0)
  018f7	e8 00 00 00 00	 call	 __ftol2
  018fc	88 45 fd	 mov	 BYTE PTR _lightred$198459[ebp], al

; 616  : 		lightgreen = (BYTE)((factor*(255-green)) + green);

  018ff	0f b6 45 fa	 movzx	 eax, BYTE PTR _green$198457[ebp]
  01903	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  01908	2b c8		 sub	 ecx, eax
  0190a	89 4d ec	 mov	 DWORD PTR tv156[ebp], ecx
  0190d	db 45 ec	 fild	 DWORD PTR tv156[ebp]
  01910	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  01913	0f b6 55 fa	 movzx	 edx, BYTE PTR _green$198457[ebp]
  01917	89 55 e8	 mov	 DWORD PTR tv157[ebp], edx
  0191a	db 45 e8	 fild	 DWORD PTR tv157[ebp]
  0191d	de c1		 faddp	 ST(1), ST(0)
  0191f	e8 00 00 00 00	 call	 __ftol2
  01924	88 45 ff	 mov	 BYTE PTR _lightgreen$198460[ebp], al

; 617  : 		lightblue = (BYTE)((factor*(255-blue)) + blue);

  01927	0f b6 45 fb	 movzx	 eax, BYTE PTR _blue$198458[ebp]
  0192b	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  01930	2b c8		 sub	 ecx, eax
  01932	89 4d e4	 mov	 DWORD PTR tv161[ebp], ecx
  01935	db 45 e4	 fild	 DWORD PTR tv161[ebp]
  01938	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  0193b	0f b6 55 fb	 movzx	 edx, BYTE PTR _blue$198458[ebp]
  0193f	89 55 e0	 mov	 DWORD PTR tv162[ebp], edx
  01942	db 45 e0	 fild	 DWORD PTR tv162[ebp]
  01945	de c1		 faddp	 ST(1), ST(0)
  01947	e8 00 00 00 00	 call	 __ftol2
  0194c	88 45 fe	 mov	 BYTE PTR _lightblue$198461[ebp], al

; 618  : 		col = RGB(lightred,lightgreen,lightblue);

  0194f	0f b6 45 fd	 movzx	 eax, BYTE PTR _lightred$198459[ebp]
  01953	0f b6 4d ff	 movzx	 ecx, BYTE PTR _lightgreen$198460[ebp]
  01957	c1 e1 08	 shl	 ecx, 8
  0195a	0b c1		 or	 eax, ecx
  0195c	0f b6 55 fe	 movzx	 edx, BYTE PTR _lightblue$198461[ebp]
  01960	c1 e2 10	 shl	 edx, 16			; 00000010H
  01963	0b c2		 or	 eax, edx
  01965	89 45 08	 mov	 DWORD PTR _col$[ebp], eax
$L198455:

; 619  : 	}
; 620  : 	return(col);

  01968	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]

; 621  : }

  0196b	8b e5		 mov	 esp, ebp
  0196d	5d		 pop	 ebp
  0196e	c3		 ret	 0
?LightenColor@BCMenu@@SAKKN@Z ENDP			; BCMenu::LightenColor
_TEXT	ENDS
PUBLIC	?DarkenColor@BCMenu@@SAKKN@Z			; BCMenu::DarkenColor
; Function compile flags: /Odt
_TEXT	SEGMENT
tv156 = -32						; size = 4
tv155 = -28						; size = 4
tv152 = -24						; size = 4
tv151 = -20						; size = 4
tv148 = -16						; size = 4
tv147 = -12						; size = 4
_green$198481 = -6					; size = 1
_blue$198482 = -5					; size = 1
_red$198480 = -4					; size = 1
_lightred$198483 = -3					; size = 1
_lightblue$198485 = -2					; size = 1
_lightgreen$198484 = -1					; size = 1
_col$ = 8						; size = 4
_factor$ = 12						; size = 8
?DarkenColor@BCMenu@@SAKKN@Z PROC NEAR			; BCMenu::DarkenColor

; 624  : {

  01970	55		 push	 ebp
  01971	8b ec		 mov	 ebp, esp
  01973	83 ec 20	 sub	 esp, 32			; 00000020H

; 625  : 	if(factor>0.0&&factor<=1.0){

  01976	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  01979	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0197f	df e0		 fnstsw	 ax
  01981	f6 c4 41	 test	 ah, 65			; 00000041H
  01984	0f 85 a9 00 00
	00		 jne	 $L198479
  0198a	dd 45 0c	 fld	 QWORD PTR _factor$[ebp]
  0198d	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  01993	df e0		 fnstsw	 ax
  01995	f6 c4 41	 test	 ah, 65			; 00000041H
  01998	0f 8a 95 00 00
	00		 jp	 $L198479

; 626  : 		BYTE red,green,blue,lightred,lightgreen,lightblue;
; 627  : 		red = GetRValue(col);

  0199e	8a 45 08	 mov	 al, BYTE PTR _col$[ebp]
  019a1	88 45 fc	 mov	 BYTE PTR _red$198480[ebp], al

; 628  : 		green = GetGValue(col);

  019a4	0f b7 4d 08	 movzx	 ecx, WORD PTR _col$[ebp]
  019a8	c1 f9 08	 sar	 ecx, 8
  019ab	88 4d fa	 mov	 BYTE PTR _green$198481[ebp], cl

; 629  : 		blue = GetBValue(col);

  019ae	8b 55 08	 mov	 edx, DWORD PTR _col$[ebp]
  019b1	c1 ea 10	 shr	 edx, 16			; 00000010H
  019b4	88 55 fb	 mov	 BYTE PTR _blue$198482[ebp], dl

; 630  : 		lightred = (BYTE)(red-(factor*red));

  019b7	0f b6 45 fc	 movzx	 eax, BYTE PTR _red$198480[ebp]
  019bb	89 45 f4	 mov	 DWORD PTR tv147[ebp], eax
  019be	db 45 f4	 fild	 DWORD PTR tv147[ebp]
  019c1	0f b6 4d fc	 movzx	 ecx, BYTE PTR _red$198480[ebp]
  019c5	89 4d f0	 mov	 DWORD PTR tv148[ebp], ecx
  019c8	db 45 f0	 fild	 DWORD PTR tv148[ebp]
  019cb	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  019ce	de e9		 fsubp	 ST(1), ST(0)
  019d0	e8 00 00 00 00	 call	 __ftol2
  019d5	88 45 fd	 mov	 BYTE PTR _lightred$198483[ebp], al

; 631  : 		lightgreen = (BYTE)(green-(factor*green));

  019d8	0f b6 55 fa	 movzx	 edx, BYTE PTR _green$198481[ebp]
  019dc	89 55 ec	 mov	 DWORD PTR tv151[ebp], edx
  019df	db 45 ec	 fild	 DWORD PTR tv151[ebp]
  019e2	0f b6 45 fa	 movzx	 eax, BYTE PTR _green$198481[ebp]
  019e6	89 45 e8	 mov	 DWORD PTR tv152[ebp], eax
  019e9	db 45 e8	 fild	 DWORD PTR tv152[ebp]
  019ec	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  019ef	de e9		 fsubp	 ST(1), ST(0)
  019f1	e8 00 00 00 00	 call	 __ftol2
  019f6	88 45 ff	 mov	 BYTE PTR _lightgreen$198484[ebp], al

; 632  : 		lightblue = (BYTE)(blue-(factor*blue));

  019f9	0f b6 4d fb	 movzx	 ecx, BYTE PTR _blue$198482[ebp]
  019fd	89 4d e4	 mov	 DWORD PTR tv155[ebp], ecx
  01a00	db 45 e4	 fild	 DWORD PTR tv155[ebp]
  01a03	0f b6 55 fb	 movzx	 edx, BYTE PTR _blue$198482[ebp]
  01a07	89 55 e0	 mov	 DWORD PTR tv156[ebp], edx
  01a0a	db 45 e0	 fild	 DWORD PTR tv156[ebp]
  01a0d	dc 4d 0c	 fmul	 QWORD PTR _factor$[ebp]
  01a10	de e9		 fsubp	 ST(1), ST(0)
  01a12	e8 00 00 00 00	 call	 __ftol2
  01a17	88 45 fe	 mov	 BYTE PTR _lightblue$198485[ebp], al

; 633  : 		col = RGB(lightred,lightgreen,lightblue);

  01a1a	0f b6 45 fd	 movzx	 eax, BYTE PTR _lightred$198483[ebp]
  01a1e	0f b6 4d ff	 movzx	 ecx, BYTE PTR _lightgreen$198484[ebp]
  01a22	c1 e1 08	 shl	 ecx, 8
  01a25	0b c1		 or	 eax, ecx
  01a27	0f b6 55 fe	 movzx	 edx, BYTE PTR _lightblue$198485[ebp]
  01a2b	c1 e2 10	 shl	 edx, 16			; 00000010H
  01a2e	0b c2		 or	 eax, edx
  01a30	89 45 08	 mov	 DWORD PTR _col$[ebp], eax
$L198479:

; 634  : 	}
; 635  : 	return(col);

  01a33	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]

; 636  : }

  01a36	8b e5		 mov	 esp, ebp
  01a38	5d		 pop	 ebp
  01a39	c3		 ret	 0
?DarkenColor@BCMenu@@SAKKN@Z ENDP			; BCMenu::DarkenColor
_TEXT	ENDS
PUBLIC	?GetImageCount@CImageList@@QBEHXZ		; CImageList::GetImageCount
PUBLIC	?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z ; BCMenu::DrawXPCheckmark
PUBLIC	?CanDraw3DImageList@BCMenu@@IAEHH@Z		; BCMenu::CanDraw3DImageList
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z	; BCMenuMemDC::BCMenuMemDC
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe199999999999a
PUBLIC	__real@3fd999999999999a
PUBLIC	??0CFont@@QAE@XZ				; CFont::CFont
PUBLIC	?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
EXTRN	__imp__SystemParametersInfoA@16:NEAR
xdata$x	SEGMENT
$T202501 DD	0ffffffffH
	DD	FLAT:$L202466
	DD	00H
	DD	FLAT:$L202467
	DD	01H
	DD	FLAT:$L202468
	DD	02H
	DD	FLAT:$L202469
	DD	02H
	DD	FLAT:$L202470
	DD	04H
	DD	FLAT:$L202471
	DD	05H
	DD	FLAT:$L202472
	DD	06H
	DD	FLAT:$L202473
	DD	06H
	DD	FLAT:$L202474
	DD	06H
	DD	FLAT:$L202475
	DD	06H
	DD	FLAT:$L202476
	DD	06H
	DD	FLAT:$L202477
	DD	0bH
	DD	FLAT:$L202478
	DD	0cH
	DD	FLAT:$L202479
	DD	0cH
	DD	FLAT:$L202480
$T202482 DD	019930520H
	DD	0fH
	DD	FLAT:$T202501
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fe199999999999a
CONST	SEGMENT
__real@3fe199999999999a DQ 03fe199999999999ar	; 0.55
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
tv829 = -956						; size = 4
tv847 = -952						; size = 4
tv712 = -948						; size = 4
tv845 = -944						; size = 4
tv715 = -940						; size = 4
tv665 = -936						; size = 4
tv1034 = -932						; size = 4
tv1026 = -928						; size = 4
tv838 = -924						; size = 4
tv257 = -920						; size = 4
tv148 = -916						; size = 4
_this$ = -912						; size = 4
$T202463 = -908						; size = 4
$T202462 = -904						; size = 4
$T202461 = -900						; size = 4
$T202460 = -896						; size = 4
$T202457 = -892						; size = 8
$T202456 = -884						; size = 8
$T202455 = -876						; size = 8
$T202454 = -868						; size = 8
$T202453 = -860						; size = 8
$T202452 = -852						; size = 8
$T202451 = -844						; size = 8
$T202450 = -836						; size = 8
$T202449 = -828						; size = 8
$T202448 = -820						; size = 4
$T202445 = -816						; size = 4
$T202444 = -812						; size = 4
_graycol$198656 = -808					; size = 4
_offset$198654 = -804					; size = 16
_leftStr$198641 = -788					; size = 4
_iOldMode$198648 = -784					; size = 4
_rectt$198640 = -780					; size = 16
_rightStr$198642 = -764					; size = 4
_nFormatr$198650 = -760					; size = 4
_nFormat$198649 = -756					; size = 4
_tablocr$198643 = -752					; size = 4
_info$198635 = -748					; size = 48
_ptImage$198628 = -700					; size = 8
_brushin$198623 = -692					; size = 8
_ptImage$198624 = -684					; size = 8
_ptImage1$198615 = -676					; size = 8
_ptImage2$198616 = -668					; size = 8
_brushin$198611 = -660					; size = 8
_ptImage$198609 = -652					; size = 8
_transparentcol$198601 = -644				; size = 4
_bitmapstandard$198600 = -640				; size = 8
_ptImage$198597 = -632					; size = 8
_ptImage$198588 = -624					; size = 8
_pOldPen$198582 = -616					; size = 4
_pOldPen$198580 = -612					; size = 4
_m_brSelect$198543 = -608				; size = 8
_dx$198547 = -600					; size = 4
_state$198557 = -596					; size = 4
_crText$198538 = -592					; size = 4
_x0$198545 = -588					; size = 4
_global_offset$198551 = -584				; size = 4
_disabled_offset$198554 = -580				; size = 4
_nIconNormal$198549 = -576				; size = 4
_bitmap$198555 = -572					; size = 4
_selectedflag$198535 = -568				; size = 4
_xoffset$198550 = -564					; size = 4
_strText$198558 = -560					; size = 4
_standardflag$198534 = -556				; size = 4
_crSelectFill$198540 = -552				; size = 4
_shadow_offset$198553 = -548				; size = 4
_m_penBack$198544 = -544				; size = 8
_y0$198546 = -536					; size = 4
_disableflag$198536 = -532				; size = 4
_crSelect$198539 = -528					; size = 4
_dy$198548 = -524					; size = 4
_faded_offset$198552 = -520				; size = 4
_checkflag$198537 = -516				; size = 4
_CanDraw3D$198556 = -512				; size = 4
_nm$198529 = -508					; size = 340
_rect2$ = -164						; size = 16
_state$ = -148						; size = 4
_barwidth$ = -144					; size = 4
_m_newbrBackground$ = -140				; size = 8
_m_brBackground$ = -132					; size = 8
_BCMENU_PAD$ = -124					; size = 4
_m_clrBack$ = -120					; size = 4
_pDC$ = -116						; size = 4
_m_newclrBack$ = -112					; size = 4
_m_fontMenu$ = -108					; size = 8
_pFont$ = -100						; size = 4
_rect$ = -96						; size = 16
_m_lf$ = -80						; size = 60
__$ArrayPad$ = -20					; size = 4
_pMemDC$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lpDIS$ = 8						; size = 4
?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z PROC NEAR ; BCMenu::DrawItem_WinXP
; _this$ = ecx

; 639  : {

  01a40	55		 push	 ebp
  01a41	8b ec		 mov	 ebp, esp
  01a43	6a ff		 push	 -1
  01a45	68 00 00 00 00	 push	 __ehhandler$?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z
  01a4a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01a50	50		 push	 eax
  01a51	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01a58	81 ec b0 03 00
	00		 sub	 esp, 944		; 000003b0H
  01a5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  01a63	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  01a66	56		 push	 esi
  01a67	57		 push	 edi
  01a68	89 8d 70 fc ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 640  : 	ASSERT(lpDIS != NULL);
; 641  : 	CDC* pDC = CDC::FromHandle(lpDIS->hDC);

  01a6e	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  01a71	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01a74	51		 push	 ecx
  01a75	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  01a7a	89 45 8c	 mov	 DWORD PTR _pDC$[ebp], eax

; 642  : #ifdef BCMENU_USE_MEMDC
; 643  : 	BCMenuMemDC *pMemDC=NULL;

  01a7d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pMemDC$[ebp], 0

; 644  : #endif
; 645  : 	CRect rect,rect2;

  01a84	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  01a87	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  01a8c	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  01a92	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 646  : 	UINT state = (((BCMenuData*)(lpDIS->itemData))->nFlags);

  01a97	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01a9a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  01a9d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01aa0	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _state$[ebp], ecx

; 647  : //modified by vito--
; 648  : /*	COLORREF m_newclrBack=GetSysColor(COLOR_3DFACE);
; 649  : 	COLORREF m_clrBack=GetSysColor(COLOR_WINDOW);
; 650  : */
; 651  : 	COLORREF m_newclrBack=m_menuItemBitmapBkColor;

  01aa6	8b 95 70 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01aac	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  01aaf	89 45 90	 mov	 DWORD PTR _m_newclrBack$[ebp], eax

; 652  : 	COLORREF m_clrBack=m_menuItemBkColor;

  01ab2	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01ab8	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  01abb	89 55 88	 mov	 DWORD PTR _m_clrBack$[ebp], edx

; 653  : //--
; 654  : 	m_clrBack=DarkenColor(m_clrBack,0.02);

  01abe	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f947ae147ae147b
  01ac4	83 ec 08	 sub	 esp, 8
  01ac7	dd 1c 24	 fstp	 QWORD PTR [esp]
  01aca	8b 45 88	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  01acd	50		 push	 eax
  01ace	e8 00 00 00 00	 call	 ?DarkenColor@BCMenu@@SAKKN@Z ; BCMenu::DarkenColor
  01ad3	83 c4 0c	 add	 esp, 12			; 0000000cH
  01ad6	89 45 88	 mov	 DWORD PTR _m_clrBack$[ebp], eax

; 655  : 	CFont m_fontMenu,*pFont=NULL;

  01ad9	8d 4d 94	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  01adc	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  01ae1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01ae8	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _pFont$[ebp], 0

; 656  : 	LOGFONT m_lf;
; 657  : 	if(!IsWinXPLuna())m_newclrBack=LightenColor(m_newclrBack,0.25);

  01aef	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  01af4	85 c0		 test	 eax, eax
  01af6	75 1b		 jne	 SHORT $L198515
  01af8	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd0000000000000
  01afe	83 ec 08	 sub	 esp, 8
  01b01	dd 1c 24	 fstp	 QWORD PTR [esp]
  01b04	8b 4d 90	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  01b07	51		 push	 ecx
  01b08	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  01b0d	83 c4 0c	 add	 esp, 12			; 0000000cH
  01b10	89 45 90	 mov	 DWORD PTR _m_newclrBack$[ebp], eax
$L198515:

; 658  : 	CBrush m_newbrBackground,m_brBackground;

  01b13	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  01b19	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  01b1e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01b22	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  01b28	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  01b2d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 659  : 	m_brBackground.CreateSolidBrush(m_clrBack);

  01b31	8b 55 88	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  01b34	52		 push	 edx
  01b35	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  01b3b	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 660  : 	m_newbrBackground.CreateSolidBrush(m_newclrBack);

  01b40	8b 45 90	 mov	 eax, DWORD PTR _m_newclrBack$[ebp]
  01b43	50		 push	 eax
  01b44	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  01b4a	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 661  : 	int BCMENU_PAD=4;

  01b4f	c7 45 84 04 00
	00 00		 mov	 DWORD PTR _BCMENU_PAD$[ebp], 4

; 662  : 	if(xp_draw_3D_bitmaps)BCMENU_PAD=7;

  01b56	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  01b5d	74 07		 je	 SHORT $L198519
  01b5f	c7 45 84 07 00
	00 00		 mov	 DWORD PTR _BCMENU_PAD$[ebp], 7
$L198519:

; 663  : 	int barwidth=m_iconX+BCMENU_PAD;

  01b66	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  01b6c	03 4d 84	 add	 ecx, DWORD PTR _BCMENU_PAD$[ebp]
  01b6f	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _barwidth$[ebp], ecx

; 664  : 	
; 665  : 	// remove the selected bit if it's grayed out
; 666  : 	if(lpDIS->itemState & ODS_GRAYED&&!xp_select_disabled){

  01b75	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01b78	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01b7b	83 e0 02	 and	 eax, 2
  01b7e	0f 84 e8 00 00
	00		 je	 $L198521
  01b84	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_select_disabled@BCMenu@@1HA, 0 ; BCMenu::xp_select_disabled
  01b8b	0f 85 db 00 00
	00		 jne	 $L198521

; 667  : 		if(lpDIS->itemState & ODS_SELECTED)lpDIS->itemState=lpDIS->itemState & ~ODS_SELECTED;

  01b91	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01b94	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01b97	83 e2 01	 and	 edx, 1
  01b9a	74 0f		 je	 SHORT $L198522
  01b9c	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  01b9f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01ba2	83 e1 fe	 and	 ecx, -2			; fffffffeH
  01ba5	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01ba8	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$L198522:

; 668  : #ifdef BCMENU_USE_MEMDC
; 669  : 		pMemDC=new BCMenuMemDC(pDC,&lpDIS->rcItem);

  01bab	6a 34		 push	 52			; 00000034H
  01bad	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  01bb2	89 85 d0 fc ff
	ff		 mov	 DWORD PTR $T202445[ebp], eax
  01bb8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01bbc	83 bd d0 fc ff
	ff 00		 cmp	 DWORD PTR $T202445[ebp], 0
  01bc3	74 1e		 je	 SHORT $L202446
  01bc5	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  01bc8	83 c0 1c	 add	 eax, 28			; 0000001cH
  01bcb	50		 push	 eax
  01bcc	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01bcf	51		 push	 ecx
  01bd0	8b 8d d0 fc ff
	ff		 mov	 ecx, DWORD PTR $T202445[ebp]
  01bd6	e8 00 00 00 00	 call	 ??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z ; BCMenuMemDC::BCMenuMemDC
  01bdb	89 85 6c fc ff
	ff		 mov	 DWORD PTR tv148[ebp], eax
  01be1	eb 0a		 jmp	 SHORT $L202447
$L202446:
  01be3	c7 85 6c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$L202447:
  01bed	8b 95 6c fc ff
	ff		 mov	 edx, DWORD PTR tv148[ebp]
  01bf3	89 95 d4 fc ff
	ff		 mov	 DWORD PTR $T202444[ebp], edx
  01bf9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01bfd	8b 85 d4 fc ff
	ff		 mov	 eax, DWORD PTR $T202444[ebp]
  01c03	89 45 f0	 mov	 DWORD PTR _pMemDC$[ebp], eax

; 670  : 		pDC = pMemDC;

  01c06	8b 4d f0	 mov	 ecx, DWORD PTR _pMemDC$[ebp]
  01c09	89 4d 8c	 mov	 DWORD PTR _pDC$[ebp], ecx

; 671  : 		ZeroMemory ((PVOID) &m_lf,sizeof (LOGFONT));

  01c0c	6a 3c		 push	 60			; 0000003cH
  01c0e	6a 00		 push	 0
  01c10	8d 55 b0	 lea	 edx, DWORD PTR _m_lf$[ebp]
  01c13	52		 push	 edx
  01c14	e8 00 00 00 00	 call	 _memset
  01c19	83 c4 0c	 add	 esp, 12			; 0000000cH

; 672  : 		NONCLIENTMETRICS nm;
; 673  : 		nm.cbSize = sizeof (NONCLIENTMETRICS);

  01c1c	c7 85 04 fe ff
	ff 54 01 00 00	 mov	 DWORD PTR _nm$198529[ebp], 340 ; 00000154H

; 674  : 		VERIFY (SystemParametersInfo(SPI_GETNONCLIENTMETRICS,nm.cbSize,&nm,0)); 

  01c26	6a 00		 push	 0
  01c28	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _nm$198529[ebp]
  01c2e	50		 push	 eax
  01c2f	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _nm$198529[ebp]
  01c35	51		 push	 ecx
  01c36	6a 29		 push	 41			; 00000029H
  01c38	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 675  : 		m_lf =  nm.lfMenuFont;

  01c3e	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  01c43	8d b5 a4 fe ff
	ff		 lea	 esi, DWORD PTR _nm$198529[ebp+160]
  01c49	8d 7d b0	 lea	 edi, DWORD PTR _m_lf$[ebp]
  01c4c	f3 a5		 rep movsd

; 676  : 		m_fontMenu.CreateFontIndirect (&m_lf);

  01c4e	8d 55 b0	 lea	 edx, DWORD PTR _m_lf$[ebp]
  01c51	52		 push	 edx
  01c52	8d 4d 94	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  01c55	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA

; 677  : 		pFont = pDC->SelectObject (&m_fontMenu);

  01c5a	8d 45 94	 lea	 eax, DWORD PTR _m_fontMenu$[ebp]
  01c5d	50		 push	 eax
  01c5e	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c61	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c63	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c66	ff 52 30	 call	 DWORD PTR [edx+48]
  01c69	89 45 9c	 mov	 DWORD PTR _pFont$[ebp], eax
$L198521:

; 678  : #endif
; 679  : 
; 680  : 	}
; 681  : 	
; 682  : 	if(state & MF_SEPARATOR){

  01c6c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  01c72	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01c77	0f 84 b0 00 00
	00		 je	 $L198532

; 683  : 		rect.CopyRect(&lpDIS->rcItem);

  01c7d	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01c80	83 c1 1c	 add	 ecx, 28			; 0000001cH
  01c83	51		 push	 ecx
  01c84	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  01c87	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 684  : 		pDC->FillRect (rect,&m_brBackground);

  01c8c	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _m_brBackground$[ebp]
  01c92	52		 push	 edx
  01c93	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  01c96	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01c9b	50		 push	 eax
  01c9c	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01c9f	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 685  : 		rect2.SetRect(rect.left,rect.top,rect.left+barwidth,rect.bottom);

  01ca4	8b 45 ac	 mov	 eax, DWORD PTR _rect$[ebp+12]
  01ca7	50		 push	 eax
  01ca8	8b 4d a0	 mov	 ecx, DWORD PTR _rect$[ebp]
  01cab	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _barwidth$[ebp]
  01cb1	51		 push	 ecx
  01cb2	8b 55 a4	 mov	 edx, DWORD PTR _rect$[ebp+4]
  01cb5	52		 push	 edx
  01cb6	8b 45 a0	 mov	 eax, DWORD PTR _rect$[ebp]
  01cb9	50		 push	 eax
  01cba	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  01cc0	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 686  : 		rect.top+=rect.Height()>>1;

  01cc5	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  01cc8	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  01ccd	d1 f8		 sar	 eax, 1
  01ccf	03 45 a4	 add	 eax, DWORD PTR _rect$[ebp+4]
  01cd2	89 45 a4	 mov	 DWORD PTR _rect$[ebp+4], eax

; 687  : 		rect.left = rect2.right+BCMENU_PAD;

  01cd5	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _rect2$[ebp+8]
  01cdb	03 4d 84	 add	 ecx, DWORD PTR _BCMENU_PAD$[ebp]
  01cde	89 4d a0	 mov	 DWORD PTR _rect$[ebp], ecx

; 688  : 		pDC->DrawEdge(&rect,EDGE_ETCHED,BF_TOP);

  01ce1	6a 02		 push	 2
  01ce3	6a 06		 push	 6
  01ce5	8d 55 a0	 lea	 edx, DWORD PTR _rect$[ebp]
  01ce8	52		 push	 edx
  01ce9	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01cec	e8 00 00 00 00	 call	 ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawEdge

; 689  : 		pDC->FillRect (rect2,&m_newbrBackground);

  01cf1	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _m_newbrBackground$[ebp]
  01cf7	50		 push	 eax
  01cf8	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  01cfe	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01d03	50		 push	 eax
  01d04	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01d07	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 690  : 		pDC->Draw3dRect (rect2,m_newclrBack,m_newclrBack);

  01d0c	8b 4d 90	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  01d0f	51		 push	 ecx
  01d10	8b 55 90	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  01d13	52		 push	 edx
  01d14	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  01d1a	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01d1f	50		 push	 eax
  01d20	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01d23	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 691  : 	}
; 692  : 	else{

  01d28	e9 b3 10 00 00	 jmp	 $L198533
$L198532:

; 693  : 		BOOL standardflag=FALSE,selectedflag=FALSE,disableflag=FALSE;

  01d2d	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _standardflag$198534[ebp], 0
  01d37	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _selectedflag$198535[ebp], 0
  01d41	c7 85 ec fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _disableflag$198536[ebp], 0

; 694  : 		BOOL checkflag=FALSE;

  01d4b	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _checkflag$198537[ebp], 0

; 695  : 		COLORREF crText ;
; 696  : 		crText = m_menuItemTextColor;

  01d55	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01d5b	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  01d5e	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _crText$198538[ebp], ecx

; 697  : 		
; 698  : 		
; 699  : 		COLORREF crSelect = m_menuItemSelectBKColor;

  01d64	8b 95 70 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01d6a	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  01d6d	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _crSelect$198539[ebp], eax

; 700  : 		COLORREF crSelectFill;
; 701  : 		if(!IsWinXPLuna())crSelectFill=LightenColor(crSelect,0.85);

  01d73	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  01d78	85 c0		 test	 eax, eax
  01d7a	75 23		 jne	 SHORT $L198541
  01d7c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feb333333333333
  01d82	83 ec 08	 sub	 esp, 8
  01d85	dd 1c 24	 fstp	 QWORD PTR [esp]
  01d88	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$198539[ebp]
  01d8e	51		 push	 ecx
  01d8f	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  01d94	83 c4 0c	 add	 esp, 12			; 0000000cH
  01d97	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _crSelectFill$198540[ebp], eax

; 702  : 		else crSelectFill=LightenColor(crSelect,0.7);

  01d9d	eb 21		 jmp	 SHORT $L198542
$L198541:
  01d9f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe6666666666666
  01da5	83 ec 08	 sub	 esp, 8
  01da8	dd 1c 24	 fstp	 QWORD PTR [esp]
  01dab	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$198539[ebp]
  01db1	52		 push	 edx
  01db2	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  01db7	83 c4 0c	 add	 esp, 12			; 0000000cH
  01dba	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _crSelectFill$198540[ebp], eax
$L198542:

; 703  : 		CBrush m_brSelect;

  01dc0	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  01dc6	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  01dcb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 704  : 		CPen m_penBack;

  01dcf	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$198544[ebp]
  01dd5	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  01dda	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 705  : 		int x0,y0,dx,dy;
; 706  : 		int nIconNormal=-1,xoffset=-1,global_offset=-1;

  01dde	c7 85 c0 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _nIconNormal$198549[ebp], -1
  01de8	c7 85 cc fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _xoffset$198550[ebp], -1
  01df2	c7 85 b8 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _global_offset$198551[ebp], -1

; 707  : 		int faded_offset=1,shadow_offset=2,disabled_offset=3;

  01dfc	c7 85 f8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _faded_offset$198552[ebp], 1
  01e06	c7 85 dc fd ff
	ff 02 00 00 00	 mov	 DWORD PTR _shadow_offset$198553[ebp], 2
  01e10	c7 85 bc fd ff
	ff 03 00 00 00	 mov	 DWORD PTR _disabled_offset$198554[ebp], 3

; 708  : 		CImageList *bitmap=NULL;

  01e1a	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _bitmap$198555[ebp], 0

; 709  : 		BOOL CanDraw3D=FALSE;

  01e24	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _CanDraw3D$198556[ebp], 0

; 710  : 		
; 711  : 		// set some colors
; 712  : 		m_penBack.CreatePen (PS_SOLID,0,m_clrBack);

  01e2e	8b 45 88	 mov	 eax, DWORD PTR _m_clrBack$[ebp]
  01e31	50		 push	 eax
  01e32	6a 00		 push	 0
  01e34	6a 00		 push	 0
  01e36	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$198544[ebp]
  01e3c	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 713  : 		m_brSelect.CreateSolidBrush(crSelectFill);

  01e41	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelectFill$198540[ebp]
  01e47	51		 push	 ecx
  01e48	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  01e4e	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 714  : 		
; 715  : 		// draw the colored rectangle portion
; 716  : 		
; 717  : 		rect.CopyRect(&lpDIS->rcItem);

  01e53	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01e56	83 c2 1c	 add	 edx, 28			; 0000001cH
  01e59	52		 push	 edx
  01e5a	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  01e5d	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 718  : 		rect2=rect;

  01e62	8b 45 a0	 mov	 eax, DWORD PTR _rect$[ebp]
  01e65	89 85 5c ff ff
	ff		 mov	 DWORD PTR _rect2$[ebp], eax
  01e6b	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  01e6e	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _rect2$[ebp+4], ecx
  01e74	8b 55 a8	 mov	 edx, DWORD PTR _rect$[ebp+8]
  01e77	89 95 64 ff ff
	ff		 mov	 DWORD PTR _rect2$[ebp+8], edx
  01e7d	8b 45 ac	 mov	 eax, DWORD PTR _rect$[ebp+12]
  01e80	89 85 68 ff ff
	ff		 mov	 DWORD PTR _rect2$[ebp+12], eax

; 719  : 		
; 720  : 		// draw the up/down/focused/disabled state
; 721  : 		
; 722  : 		UINT state = lpDIS->itemState;

  01e86	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01e89	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01e8c	89 95 ac fd ff
	ff		 mov	 DWORD PTR _state$198557[ebp], edx

; 723  : 		CString strText;

  01e92	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  01e98	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01e9e	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 724  : 		
; 725  : 		if(lpDIS->itemData != NULL){

  01ea2	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  01ea5	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  01ea9	0f 84 ec 01 00
	00		 je	 $L198559

; 726  : 			nIconNormal = (((BCMenuData*)(lpDIS->itemData))->menuIconNormal);

  01eaf	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01eb2	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  01eb5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01eb8	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _nIconNormal$198549[ebp], eax

; 727  : 			xoffset = (((BCMenuData*)(lpDIS->itemData))->xoffset);

  01ebe	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01ec1	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  01ec4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01ec7	89 85 cc fd ff
	ff		 mov	 DWORD PTR _xoffset$198550[ebp], eax

; 728  : 			bitmap = (((BCMenuData*)(lpDIS->itemData))->bitmap);

  01ecd	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  01ed0	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  01ed3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  01ed6	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _bitmap$198555[ebp], eax

; 729  : 			strText = ((BCMenuData*) (lpDIS->itemData))->GetString();

  01edc	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T202448[ebp]
  01ee2	51		 push	 ecx
  01ee3	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01ee6	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  01ee9	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  01eee	89 85 68 fc ff
	ff		 mov	 DWORD PTR tv257[ebp], eax
  01ef4	8b 85 68 fc ff
	ff		 mov	 eax, DWORD PTR tv257[ebp]
  01efa	89 85 64 fc ff
	ff		 mov	 DWORD PTR tv838[ebp], eax
  01f00	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  01f04	8b 8d 64 fc ff
	ff		 mov	 ecx, DWORD PTR tv838[ebp]
  01f0a	51		 push	 ecx
  01f0b	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  01f11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  01f17	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  01f1b	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T202448[ebp]
  01f21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 730  : 			global_offset = (((BCMenuData*)(lpDIS->itemData))->global_offset);

  01f27	8b 55 08	 mov	 edx, DWORD PTR _lpDIS$[ebp]
  01f2a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  01f2d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01f30	89 8d b8 fd ff
	ff		 mov	 DWORD PTR _global_offset$198551[ebp], ecx

; 731  : 
; 732  : 			if(xoffset==0&&xp_draw_3D_bitmaps&&bitmap&&bitmap->GetImageCount()>2)CanDraw3D=TRUE;

  01f36	83 bd cc fd ff
	ff 00		 cmp	 DWORD PTR _xoffset$198550[ebp], 0
  01f3d	75 2c		 jne	 SHORT $L198566
  01f3f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  01f46	74 23		 je	 SHORT $L198566
  01f48	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$198555[ebp], 0
  01f4f	74 1a		 je	 SHORT $L198566
  01f51	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  01f57	e8 00 00 00 00	 call	 ?GetImageCount@CImageList@@QBEHXZ ; CImageList::GetImageCount
  01f5c	83 f8 02	 cmp	 eax, 2
  01f5f	7e 0a		 jle	 SHORT $L198566
  01f61	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _CanDraw3D$198556[ebp], 1
$L198566:

; 733  : 
; 734  : 			if(nIconNormal<0&&xoffset<0&&global_offset>=0){

  01f6b	83 bd c0 fd ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$198549[ebp], 0
  01f72	0f 8d 88 00 00
	00		 jge	 $L198567
  01f78	83 bd cc fd ff
	ff 00		 cmp	 DWORD PTR _xoffset$198550[ebp], 0
  01f7f	7d 7f		 jge	 SHORT $L198567
  01f81	83 bd b8 fd ff
	ff 00		 cmp	 DWORD PTR _global_offset$198551[ebp], 0
  01f88	7c 76		 jl	 SHORT $L198567

; 735  : 				xoffset=global_offset;

  01f8a	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _global_offset$198551[ebp]
  01f90	89 95 cc fd ff
	ff		 mov	 DWORD PTR _xoffset$198550[ebp], edx

; 736  : 				nIconNormal=0;

  01f96	c7 85 c0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _nIconNormal$198549[ebp], 0

; 737  : 				bitmap = &m_AllImages;

  01fa0	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _bitmap$198555[ebp], OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A ; BCMenu::m_AllImages

; 738  : 				if(xp_draw_3D_bitmaps&&CanDraw3DImageList(global_offset)){

  01faa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  01fb1	74 4d		 je	 SHORT $L198567
  01fb3	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _global_offset$198551[ebp]
  01fb9	50		 push	 eax
  01fba	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01fc0	e8 00 00 00 00	 call	 ?CanDraw3DImageList@BCMenu@@IAEHH@Z ; BCMenu::CanDraw3DImageList
  01fc5	85 c0		 test	 eax, eax
  01fc7	74 37		 je	 SHORT $L198567

; 739  : 					CanDraw3D=TRUE;

  01fc9	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _CanDraw3D$198556[ebp], 1

; 740  : 					faded_offset=global_offset+1;

  01fd3	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _global_offset$198551[ebp]
  01fd9	83 c1 01	 add	 ecx, 1
  01fdc	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _faded_offset$198552[ebp], ecx

; 741  : 					shadow_offset=global_offset+2;

  01fe2	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _global_offset$198551[ebp]
  01fe8	83 c2 02	 add	 edx, 2
  01feb	89 95 dc fd ff
	ff		 mov	 DWORD PTR _shadow_offset$198553[ebp], edx

; 742  : 					disabled_offset=global_offset+3;

  01ff1	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _global_offset$198551[ebp]
  01ff7	83 c0 03	 add	 eax, 3
  01ffa	89 85 bc fd ff
	ff		 mov	 DWORD PTR _disabled_offset$198554[ebp], eax
$L198567:

; 743  : 				}
; 744  : 			}
; 745  : 
; 746  : 			
; 747  : 			if(state&ODS_CHECKED && nIconNormal<0){

  02000	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _state$198557[ebp]
  02006	83 e1 08	 and	 ecx, 8
  02009	74 44		 je	 SHORT $L198569
  0200b	83 bd c0 fd ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$198549[ebp], 0
  02012	7d 3b		 jge	 SHORT $L198569

; 748  : 				if(state&ODS_SELECTED && m_selectcheck>0)checkflag=TRUE;

  02014	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  0201a	83 e2 01	 and	 edx, 1
  0201d	74 18		 je	 SHORT $L198570
  0201f	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02025	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  02029	7e 0c		 jle	 SHORT $L198570
  0202b	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _checkflag$198537[ebp], 1

; 749  : 				else if(m_unselectcheck>0) checkflag=TRUE;

  02035	eb 16		 jmp	 SHORT $L198571
$L198570:
  02037	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0203d	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  02041	7e 0a		 jle	 SHORT $L198571
  02043	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _checkflag$198537[ebp], 1
$L198571:

; 750  : 			}
; 751  : 			else if(nIconNormal != -1){

  0204d	eb 4a		 jmp	 SHORT $L198573
$L198569:
  0204f	83 bd c0 fd ff
	ff ff		 cmp	 DWORD PTR _nIconNormal$198549[ebp], -1
  02056	74 41		 je	 SHORT $L198573

; 752  : 				standardflag=TRUE;

  02058	c7 85 d4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _standardflag$198534[ebp], 1

; 753  : 				if(state&ODS_SELECTED && !(state&ODS_GRAYED))selectedflag=TRUE;

  02062	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  02068	83 e2 01	 and	 edx, 1
  0206b	74 17		 je	 SHORT $L198575
  0206d	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _state$198557[ebp]
  02073	83 e0 02	 and	 eax, 2
  02076	75 0c		 jne	 SHORT $L198575
  02078	c7 85 c8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _selectedflag$198535[ebp], 1

; 754  : 				else if(state&ODS_GRAYED) disableflag=TRUE;

  02082	eb 15		 jmp	 SHORT $L198573
$L198575:
  02084	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _state$198557[ebp]
  0208a	83 e1 02	 and	 ecx, 2
  0208d	74 0a		 je	 SHORT $L198573
  0208f	c7 85 ec fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _disableflag$198536[ebp], 1
$L198573:

; 755  : 			}
; 756  : 		}
; 757  : 		else{

  02099	eb 0c		 jmp	 SHORT $L198578
$L198559:

; 758  : 			strText.Empty();

  0209b	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  020a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
$L198578:

; 759  : 		}
; 760  : 		
; 761  : 		if(state&ODS_SELECTED){ // draw the down edges

  020a7	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  020ad	83 e2 01	 and	 edx, 1
  020b0	74 60		 je	 SHORT $L198579

; 762  : 			
; 763  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  020b2	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _m_penBack$198544[ebp]
  020b8	50		 push	 eax
  020b9	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  020bc	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  020c1	89 85 9c fd ff
	ff		 mov	 DWORD PTR _pOldPen$198580[ebp], eax

; 764  : 			
; 765  : 			pDC->FillRect (rect,&m_brSelect);

  020c7	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  020cd	51		 push	 ecx
  020ce	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  020d1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  020d6	50		 push	 eax
  020d7	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  020da	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 766  : 			pDC->Draw3dRect (rect,crSelect,crSelect);

  020df	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$198539[ebp]
  020e5	52		 push	 edx
  020e6	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _crSelect$198539[ebp]
  020ec	50		 push	 eax
  020ed	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  020f0	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  020f5	50		 push	 eax
  020f6	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  020f9	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 767  : 			
; 768  : 			pDC->SelectObject (pOldPen);

  020fe	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR _pOldPen$198580[ebp]
  02104	51		 push	 ecx
  02105	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02108	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 769  : 		}
; 770  : 		else {

  0210d	e9 ad 00 00 00	 jmp	 $L198581
$L198579:

; 771  : 			rect2.SetRect(rect.left,rect.top,rect.left+barwidth,rect.bottom);

  02112	8b 55 ac	 mov	 edx, DWORD PTR _rect$[ebp+12]
  02115	52		 push	 edx
  02116	8b 45 a0	 mov	 eax, DWORD PTR _rect$[ebp]
  02119	03 85 70 ff ff
	ff		 add	 eax, DWORD PTR _barwidth$[ebp]
  0211f	50		 push	 eax
  02120	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02123	51		 push	 ecx
  02124	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  02127	52		 push	 edx
  02128	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  0212e	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 772  : 			CPen *pOldPen = pDC->SelectObject (&m_penBack);

  02133	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _m_penBack$198544[ebp]
  02139	50		 push	 eax
  0213a	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0213d	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  02142	89 85 98 fd ff
	ff		 mov	 DWORD PTR _pOldPen$198582[ebp], eax

; 773  : 			pDC->FillRect (rect,&m_brBackground);

  02148	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  0214e	51		 push	 ecx
  0214f	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02152	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02157	50		 push	 eax
  02158	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0215b	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 774  : 			pDC->FillRect (rect2,&m_newbrBackground);

  02160	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _m_newbrBackground$[ebp]
  02166	52		 push	 edx
  02167	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  0216d	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02172	50		 push	 eax
  02173	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02176	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 775  : 			pDC->SelectObject (pOldPen);

  0217b	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pOldPen$198582[ebp]
  02181	50		 push	 eax
  02182	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02185	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 776  : 			
; 777  : 			// draw the up edges
; 778  : 			
; 779  : 			pDC->Draw3dRect (rect,m_clrBack,m_clrBack);

  0218a	8b 4d 88	 mov	 ecx, DWORD PTR _m_clrBack$[ebp]
  0218d	51		 push	 ecx
  0218e	8b 55 88	 mov	 edx, DWORD PTR _m_clrBack$[ebp]
  02191	52		 push	 edx
  02192	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02195	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0219a	50		 push	 eax
  0219b	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0219e	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 780  : 			pDC->Draw3dRect (rect2,m_newclrBack,m_newclrBack);

  021a3	8b 45 90	 mov	 eax, DWORD PTR _m_newclrBack$[ebp]
  021a6	50		 push	 eax
  021a7	8b 4d 90	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  021aa	51		 push	 ecx
  021ab	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  021b1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  021b6	50		 push	 eax
  021b7	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  021ba	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L198581:

; 781  : 		}
; 782  : 		
; 783  : 		// draw the text if there is any
; 784  : 		//We have to paint the text only if the image is nonexistant
; 785  : 		
; 786  : 		dy = (int)(0.5+(rect.Height()-m_iconY)/2.0);

  021bf	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  021c2	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  021c7	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  021cd	89 85 60 fc ff
	ff		 mov	 DWORD PTR tv1026[ebp], eax
  021d3	db 85 60 fc ff
	ff		 fild	 DWORD PTR tv1026[ebp]
  021d9	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4000000000000000
  021df	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  021e5	e8 00 00 00 00	 call	 __ftol2
  021ea	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _dy$198548[ebp], eax

; 787  : 		dy = dy<0 ? 0 : dy;

  021f0	33 d2		 xor	 edx, edx
  021f2	83 bd f4 fd ff
	ff 00		 cmp	 DWORD PTR _dy$198548[ebp], 0
  021f9	0f 9c c2	 setl	 dl
  021fc	4a		 dec	 edx
  021fd	23 95 f4 fd ff
	ff		 and	 edx, DWORD PTR _dy$198548[ebp]
  02203	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _dy$198548[ebp], edx

; 788  : 		dx = (int)(0.5+(barwidth-m_iconX)/2.0);

  02209	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _barwidth$[ebp]
  0220f	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  02215	89 85 5c fc ff
	ff		 mov	 DWORD PTR tv1034[ebp], eax
  0221b	db 85 5c fc ff
	ff		 fild	 DWORD PTR tv1034[ebp]
  02221	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4000000000000000
  02227	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0222d	e8 00 00 00 00	 call	 __ftol2
  02232	89 85 a8 fd ff
	ff		 mov	 DWORD PTR _dx$198547[ebp], eax

; 789  : 		dx = dx<0 ? 0 : dx;

  02238	33 c9		 xor	 ecx, ecx
  0223a	83 bd a8 fd ff
	ff 00		 cmp	 DWORD PTR _dx$198547[ebp], 0
  02241	0f 9c c1	 setl	 cl
  02244	49		 dec	 ecx
  02245	23 8d a8 fd ff
	ff		 and	 ecx, DWORD PTR _dx$198547[ebp]
  0224b	89 8d a8 fd ff
	ff		 mov	 DWORD PTR _dx$198547[ebp], ecx

; 790  : 		rect2.SetRect(rect.left+1,rect.top+1,rect.left+barwidth-2,rect.bottom-1);

  02251	8b 55 ac	 mov	 edx, DWORD PTR _rect$[ebp+12]
  02254	83 ea 01	 sub	 edx, 1
  02257	52		 push	 edx
  02258	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _barwidth$[ebp]
  0225e	8b 4d a0	 mov	 ecx, DWORD PTR _rect$[ebp]
  02261	8d 54 01 fe	 lea	 edx, DWORD PTR [ecx+eax-2]
  02265	52		 push	 edx
  02266	8b 45 a4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  02269	83 c0 01	 add	 eax, 1
  0226c	50		 push	 eax
  0226d	8b 4d a0	 mov	 ecx, DWORD PTR _rect$[ebp]
  02270	83 c1 01	 add	 ecx, 1
  02273	51		 push	 ecx
  02274	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  0227a	e8 00 00 00 00	 call	 ?SetRect@CRect@@QAEXHHHH@Z ; CRect::SetRect

; 791  : 		
; 792  : 		if(checkflag||standardflag||selectedflag||disableflag){

  0227f	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _checkflag$198537[ebp], 0
  02286	75 1f		 jne	 SHORT $L198586
  02288	83 bd d4 fd ff
	ff 00		 cmp	 DWORD PTR _standardflag$198534[ebp], 0
  0228f	75 16		 jne	 SHORT $L198586
  02291	83 bd c8 fd ff
	ff 00		 cmp	 DWORD PTR _selectedflag$198535[ebp], 0
  02298	75 0d		 jne	 SHORT $L198586
  0229a	83 bd ec fd ff
	ff 00		 cmp	 DWORD PTR _disableflag$198536[ebp], 0
  022a1	0f 84 c0 06 00
	00		 je	 $L198585
$L198586:

; 793  : 			if(checkflag && checkmaps){

  022a7	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _checkflag$198537[ebp], 0
  022ae	0f 84 d4 00 00
	00		 je	 $L198587
  022b4	8b 95 70 fc ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  022ba	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  022be	0f 84 c4 00 00
	00		 je	 $L198587

; 794  : 				pDC->FillRect (rect2,&m_newbrBackground);

  022c4	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _m_newbrBackground$[ebp]
  022ca	50		 push	 eax
  022cb	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  022d1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  022d6	50		 push	 eax
  022d7	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  022da	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 795  : 				CPoint ptImage(rect.left+dx,rect.top+dy);		

  022df	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  022e2	03 8d f4 fd ff
	ff		 add	 ecx, DWORD PTR _dy$198548[ebp]
  022e8	51		 push	 ecx
  022e9	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  022ec	03 95 a8 fd ff
	ff		 add	 edx, DWORD PTR _dx$198547[ebp]
  022f2	52		 push	 edx
  022f3	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198588[ebp]
  022f9	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 796  : 				if(state&ODS_SELECTED)checkmaps->Draw(pDC,1,ptImage,ILD_TRANSPARENT);

  022fe	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _state$198557[ebp]
  02304	83 e0 01	 and	 eax, 1
  02307	74 3e		 je	 SHORT $L198589
  02309	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198588[ebp]
  0230f	89 8d c4 fc ff
	ff		 mov	 DWORD PTR $T202449[ebp], ecx
  02315	8b 95 94 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198588[ebp+4]
  0231b	89 95 c8 fc ff
	ff		 mov	 DWORD PTR $T202449[ebp+4], edx
  02321	6a 01		 push	 1
  02323	8b 85 c8 fc ff
	ff		 mov	 eax, DWORD PTR $T202449[ebp+4]
  02329	50		 push	 eax
  0232a	8b 8d c4 fc ff
	ff		 mov	 ecx, DWORD PTR $T202449[ebp]
  02330	51		 push	 ecx
  02331	6a 01		 push	 1
  02333	8b 55 8c	 mov	 edx, DWORD PTR _pDC$[ebp]
  02336	52		 push	 edx
  02337	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0233d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  02340	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 797  : 				else checkmaps->Draw(pDC,0,ptImage,ILD_TRANSPARENT);

  02345	eb 3c		 jmp	 SHORT $L198591
$L198589:
  02347	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198588[ebp]
  0234d	89 8d bc fc ff
	ff		 mov	 DWORD PTR $T202450[ebp], ecx
  02353	8b 95 94 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198588[ebp+4]
  02359	89 95 c0 fc ff
	ff		 mov	 DWORD PTR $T202450[ebp+4], edx
  0235f	6a 01		 push	 1
  02361	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR $T202450[ebp+4]
  02367	50		 push	 eax
  02368	8b 8d bc fc ff
	ff		 mov	 ecx, DWORD PTR $T202450[ebp]
  0236e	51		 push	 ecx
  0236f	6a 00		 push	 0
  02371	8b 55 8c	 mov	 edx, DWORD PTR _pDC$[ebp]
  02374	52		 push	 edx
  02375	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0237b	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0237e	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198591:

; 798  : 			}
; 799  : 			else if(disableflag){

  02383	e9 df 05 00 00	 jmp	 $L198585
$L198587:
  02388	83 bd ec fd ff
	ff 00		 cmp	 DWORD PTR _disableflag$198536[ebp], 0
  0238f	0f 84 ae 01 00
	00		 je	 $L198594

; 800  : 				if(!selectedflag){

  02395	83 bd c8 fd ff
	ff 00		 cmp	 DWORD PTR _selectedflag$198535[ebp], 0
  0239c	0f 85 9c 01 00
	00		 jne	 $L198595

; 801  : 					if(CanDraw3D){

  023a2	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _CanDraw3D$198556[ebp], 0
  023a9	74 62		 je	 SHORT $L198596

; 802  : 						CPoint ptImage(rect.left+dx,rect.top+dy);

  023ab	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  023ae	03 8d f4 fd ff
	ff		 add	 ecx, DWORD PTR _dy$198548[ebp]
  023b4	51		 push	 ecx
  023b5	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  023b8	03 95 a8 fd ff
	ff		 add	 edx, DWORD PTR _dx$198547[ebp]
  023be	52		 push	 edx
  023bf	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198597[ebp]
  023c5	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 803  : 						bitmap->Draw(pDC,disabled_offset,ptImage,ILD_TRANSPARENT);

  023ca	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198597[ebp]
  023d0	89 85 b4 fc ff
	ff		 mov	 DWORD PTR $T202451[ebp], eax
  023d6	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198597[ebp+4]
  023dc	89 8d b8 fc ff
	ff		 mov	 DWORD PTR $T202451[ebp+4], ecx
  023e2	6a 01		 push	 1
  023e4	8b 95 b8 fc ff
	ff		 mov	 edx, DWORD PTR $T202451[ebp+4]
  023ea	52		 push	 edx
  023eb	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR $T202451[ebp]
  023f1	50		 push	 eax
  023f2	8b 8d bc fd ff
	ff		 mov	 ecx, DWORD PTR _disabled_offset$198554[ebp]
  023f8	51		 push	 ecx
  023f9	8b 55 8c	 mov	 edx, DWORD PTR _pDC$[ebp]
  023fc	52		 push	 edx
  023fd	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  02403	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 804  : 					}
; 805  : 					else{

  02408	e9 31 01 00 00	 jmp	 $L198595
$L198596:

; 806  : 						CBitmap bitmapstandard;

  0240d	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198600[ebp]
  02413	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  02418	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 807  : 						GetBitmapFromImageList(pDC,bitmap,xoffset,bitmapstandard);

  0241c	8d 85 80 fd ff
	ff		 lea	 eax, DWORD PTR _bitmapstandard$198600[ebp]
  02422	50		 push	 eax
  02423	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _xoffset$198550[ebp]
  02429	51		 push	 ecx
  0242a	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR _bitmap$198555[ebp]
  02430	52		 push	 edx
  02431	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  02434	50		 push	 eax
  02435	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0243b	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 808  : 						COLORREF transparentcol=m_newclrBack;

  02440	8b 4d 90	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  02443	89 8d 7c fd ff
	ff		 mov	 DWORD PTR _transparentcol$198601[ebp], ecx

; 809  : 						if(state&ODS_SELECTED)transparentcol=crSelectFill;

  02449	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  0244f	83 e2 01	 and	 edx, 1
  02452	74 0c		 je	 SHORT $L198602
  02454	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _crSelectFill$198540[ebp]
  0245a	89 85 7c fd ff
	ff		 mov	 DWORD PTR _transparentcol$198601[ebp], eax
$L198602:

; 810  : 						if(disable_old_style)

  02460	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02466	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0246a	74 4c		 je	 SHORT $L198603

; 811  : 							DitherBlt(lpDIS->hDC,rect.left+dx,rect.top+dy,m_iconX,m_iconY,
; 812  : 							(HBITMAP)(bitmapstandard),0,0,transparentcol);

  0246c	8b 95 7c fd ff
	ff		 mov	 edx, DWORD PTR _transparentcol$198601[ebp]
  02472	52		 push	 edx
  02473	6a 00		 push	 0
  02475	6a 00		 push	 0
  02477	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198600[ebp]
  0247d	e8 00 00 00 00	 call	 ??BCBitmap@@QBEPAUHBITMAP__@@XZ ; CBitmap::operator HBITMAP__ *
  02482	50		 push	 eax
  02483	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  02488	50		 push	 eax
  02489	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0248f	51		 push	 ecx
  02490	8b 55 a4	 mov	 edx, DWORD PTR _rect$[ebp+4]
  02493	03 95 f4 fd ff
	ff		 add	 edx, DWORD PTR _dy$198548[ebp]
  02499	52		 push	 edx
  0249a	8b 45 a0	 mov	 eax, DWORD PTR _rect$[ebp]
  0249d	03 85 a8 fd ff
	ff		 add	 eax, DWORD PTR _dx$198547[ebp]
  024a3	50		 push	 eax
  024a4	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  024a7	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  024aa	52		 push	 edx
  024ab	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  024b1	e8 00 00 00 00	 call	 ?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ; BCMenu::DitherBlt

; 813  : 						else

  024b6	eb 42		 jmp	 SHORT $L198605
$L198603:

; 814  : 							DitherBlt2(pDC,rect.left+dx,rect.top+dy,m_iconX,m_iconY,
; 815  : 							bitmapstandard,0,0,transparentcol);

  024b8	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _transparentcol$198601[ebp]
  024be	50		 push	 eax
  024bf	6a 00		 push	 0
  024c1	6a 00		 push	 0
  024c3	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198600[ebp]
  024c9	51		 push	 ecx
  024ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  024d0	52		 push	 edx
  024d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  024d6	50		 push	 eax
  024d7	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  024da	03 8d f4 fd ff
	ff		 add	 ecx, DWORD PTR _dy$198548[ebp]
  024e0	51		 push	 ecx
  024e1	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  024e4	03 95 a8 fd ff
	ff		 add	 edx, DWORD PTR _dx$198547[ebp]
  024ea	52		 push	 edx
  024eb	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  024ee	50		 push	 eax
  024ef	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  024f5	e8 00 00 00 00	 call	 ?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ; BCMenu::DitherBlt2
$L198605:

; 816  : 						if(state&ODS_SELECTED)pDC->Draw3dRect (rect,crSelect,crSelect);

  024fa	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _state$198557[ebp]
  02500	83 e1 01	 and	 ecx, 1
  02503	74 1f		 je	 SHORT $L198606
  02505	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$198539[ebp]
  0250b	52		 push	 edx
  0250c	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _crSelect$198539[ebp]
  02512	50		 push	 eax
  02513	8d 4d a0	 lea	 ecx, DWORD PTR _rect$[ebp]
  02516	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0251b	50		 push	 eax
  0251c	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0251f	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect
$L198606:

; 817  : 						bitmapstandard.DeleteObject();

  02524	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198600[ebp]
  0252a	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 818  : 					}

  0252f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  02533	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198600[ebp]
  02539	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L198595:

; 819  : 				}
; 820  : 			}
; 821  : 			else if(selectedflag){

  0253e	e9 24 04 00 00	 jmp	 $L198585
$L198594:
  02543	83 bd c8 fd ff
	ff 00		 cmp	 DWORD PTR _selectedflag$198535[ebp], 0
  0254a	0f 84 1e 02 00
	00		 je	 $L198608

; 822  : 				CPoint ptImage(rect.left+dx,rect.top+dy);

  02550	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02553	03 8d f4 fd ff
	ff		 add	 ecx, DWORD PTR _dy$198548[ebp]
  02559	51		 push	 ecx
  0255a	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  0255d	03 95 a8 fd ff
	ff		 add	 edx, DWORD PTR _dx$198547[ebp]
  02563	52		 push	 edx
  02564	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198609[ebp]
  0256a	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 823  : 				if(state&ODS_CHECKED){

  0256f	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _state$198557[ebp]
  02575	83 e0 08	 and	 eax, 8
  02578	0f 84 ad 00 00
	00		 je	 $L198610

; 824  : 					CBrush brushin;

  0257e	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198611[ebp]
  02584	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  02589	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9

; 825  : 					brushin.CreateSolidBrush(LightenColor(crSelect,0.55));

  0258d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe199999999999a
  02593	83 ec 08	 sub	 esp, 8
  02596	dd 1c 24	 fstp	 QWORD PTR [esp]
  02599	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$198539[ebp]
  0259f	51		 push	 ecx
  025a0	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  025a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  025a8	50		 push	 eax
  025a9	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198611[ebp]
  025af	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 826  : 					pDC->FillRect(rect2,&brushin);

  025b4	8d 95 6c fd ff
	ff		 lea	 edx, DWORD PTR _brushin$198611[ebp]
  025ba	52		 push	 edx
  025bb	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  025c1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  025c6	50		 push	 eax
  025c7	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  025ca	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 827  : 					brushin.DeleteObject();

  025cf	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198611[ebp]
  025d5	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 828  : 					pDC->Draw3dRect(rect2,crSelect,crSelect);

  025da	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _crSelect$198539[ebp]
  025e0	50		 push	 eax
  025e1	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$198539[ebp]
  025e7	51		 push	 ecx
  025e8	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  025ee	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  025f3	50		 push	 eax
  025f4	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  025f7	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 829  : 					ptImage.x-=1;ptImage.y-=1;

  025fc	8b 95 74 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198609[ebp]
  02602	83 ea 01	 sub	 edx, 1
  02605	89 95 74 fd ff
	ff		 mov	 DWORD PTR _ptImage$198609[ebp], edx
  0260b	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198609[ebp+4]
  02611	83 e8 01	 sub	 eax, 1
  02614	89 85 78 fd ff
	ff		 mov	 DWORD PTR _ptImage$198609[ebp+4], eax

; 830  : 				}

  0261a	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0261e	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198611[ebp]
  02624	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush

; 831  : 				else pDC->FillRect (rect2,&m_brSelect);

  02629	eb 1b		 jmp	 SHORT $L198612
$L198610:
  0262b	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  02631	51		 push	 ecx
  02632	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  02638	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0263d	50		 push	 eax
  0263e	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02641	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect
$L198612:

; 832  : 				if(bitmap){

  02646	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$198555[ebp], 0
  0264d	0f 84 16 01 00
	00		 je	 $L198613

; 833  : 					if(CanDraw3D&&!(state&ODS_CHECKED)){

  02653	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _CanDraw3D$198556[ebp], 0
  0265a	0f 84 cb 00 00
	00		 je	 $L198614
  02660	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  02666	83 e2 08	 and	 edx, 8
  02669	0f 85 bc 00 00
	00		 jne	 $L198614

; 834  : 						CPoint ptImage1(ptImage.x+1,ptImage.y+1);

  0266f	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198609[ebp+4]
  02675	83 c0 01	 add	 eax, 1
  02678	50		 push	 eax
  02679	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198609[ebp]
  0267f	83 c1 01	 add	 ecx, 1
  02682	51		 push	 ecx
  02683	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage1$198615[ebp]
  02689	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 835  : 						CPoint ptImage2(ptImage.x-1,ptImage.y-1);

  0268e	8b 95 78 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198609[ebp+4]
  02694	83 ea 01	 sub	 edx, 1
  02697	52		 push	 edx
  02698	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198609[ebp]
  0269e	83 e8 01	 sub	 eax, 1
  026a1	50		 push	 eax
  026a2	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage2$198616[ebp]
  026a8	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 836  : 						bitmap->Draw(pDC,shadow_offset,ptImage1,ILD_TRANSPARENT);

  026ad	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage1$198615[ebp]
  026b3	89 8d ac fc ff
	ff		 mov	 DWORD PTR $T202452[ebp], ecx
  026b9	8b 95 60 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage1$198615[ebp+4]
  026bf	89 95 b0 fc ff
	ff		 mov	 DWORD PTR $T202452[ebp+4], edx
  026c5	6a 01		 push	 1
  026c7	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR $T202452[ebp+4]
  026cd	50		 push	 eax
  026ce	8b 8d ac fc ff
	ff		 mov	 ecx, DWORD PTR $T202452[ebp]
  026d4	51		 push	 ecx
  026d5	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _shadow_offset$198553[ebp]
  026db	52		 push	 edx
  026dc	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  026df	50		 push	 eax
  026e0	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  026e6	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 837  : 						bitmap->Draw(pDC,xoffset,ptImage2,ILD_TRANSPARENT);

  026eb	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage2$198616[ebp]
  026f1	89 8d a4 fc ff
	ff		 mov	 DWORD PTR $T202453[ebp], ecx
  026f7	8b 95 68 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage2$198616[ebp+4]
  026fd	89 95 a8 fc ff
	ff		 mov	 DWORD PTR $T202453[ebp+4], edx
  02703	6a 01		 push	 1
  02705	8b 85 a8 fc ff
	ff		 mov	 eax, DWORD PTR $T202453[ebp+4]
  0270b	50		 push	 eax
  0270c	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR $T202453[ebp]
  02712	51		 push	 ecx
  02713	8b 95 cc fd ff
	ff		 mov	 edx, DWORD PTR _xoffset$198550[ebp]
  02719	52		 push	 edx
  0271a	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  0271d	50		 push	 eax
  0271e	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  02724	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 838  : 					}
; 839  : 					else bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  02729	eb 3e		 jmp	 SHORT $L198613
$L198614:
  0272b	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198609[ebp]
  02731	89 8d 9c fc ff
	ff		 mov	 DWORD PTR $T202454[ebp], ecx
  02737	8b 95 78 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198609[ebp+4]
  0273d	89 95 a0 fc ff
	ff		 mov	 DWORD PTR $T202454[ebp+4], edx
  02743	6a 01		 push	 1
  02745	8b 85 a0 fc ff
	ff		 mov	 eax, DWORD PTR $T202454[ebp+4]
  0274b	50		 push	 eax
  0274c	8b 8d 9c fc ff
	ff		 mov	 ecx, DWORD PTR $T202454[ebp]
  02752	51		 push	 ecx
  02753	8b 95 cc fd ff
	ff		 mov	 edx, DWORD PTR _xoffset$198550[ebp]
  02759	52		 push	 edx
  0275a	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  0275d	50		 push	 eax
  0275e	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  02764	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198613:

; 840  : 				}
; 841  : 			}
; 842  : 			else{

  02769	e9 f9 01 00 00	 jmp	 $L198585
$L198608:

; 843  : 				if(state&ODS_CHECKED){

  0276e	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _state$198557[ebp]
  02774	83 e1 08	 and	 ecx, 8
  02777	0f 84 00 01 00
	00		 je	 $L198622

; 844  : 					CBrush brushin;

  0277d	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198623[ebp]
  02783	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  02788	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 845  : 					brushin.CreateSolidBrush(LightenColor(crSelect,0.85));

  0278c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feb333333333333
  02792	83 ec 08	 sub	 esp, 8
  02795	dd 1c 24	 fstp	 QWORD PTR [esp]
  02798	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$198539[ebp]
  0279e	52		 push	 edx
  0279f	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  027a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  027a7	50		 push	 eax
  027a8	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198623[ebp]
  027ae	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 846  : 					pDC->FillRect(rect2,&brushin);

  027b3	8d 85 4c fd ff
	ff		 lea	 eax, DWORD PTR _brushin$198623[ebp]
  027b9	50		 push	 eax
  027ba	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  027c0	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  027c5	50		 push	 eax
  027c6	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027c9	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 847  : 					brushin.DeleteObject();

  027ce	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198623[ebp]
  027d4	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 848  : 					pDC->Draw3dRect(rect2,crSelect,crSelect);

  027d9	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _crSelect$198539[ebp]
  027df	51		 push	 ecx
  027e0	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _crSelect$198539[ebp]
  027e6	52		 push	 edx
  027e7	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  027ed	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  027f2	50		 push	 eax
  027f3	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027f6	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 849  : 					CPoint ptImage(rect.left+dx-1,rect.top+dy-1);

  027fb	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _dy$198548[ebp]
  02801	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02804	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  02808	52		 push	 edx
  02809	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _dx$198547[ebp]
  0280f	8b 4d a0	 mov	 ecx, DWORD PTR _rect$[ebp]
  02812	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  02816	52		 push	 edx
  02817	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198624[ebp]
  0281d	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 850  : 					if(bitmap)bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  02822	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$198555[ebp], 0
  02829	74 3e		 je	 SHORT $L198625
  0282b	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198624[ebp]
  02831	89 85 94 fc ff
	ff		 mov	 DWORD PTR $T202455[ebp], eax
  02837	8b 8d 58 fd ff
	ff		 mov	 ecx, DWORD PTR _ptImage$198624[ebp+4]
  0283d	89 8d 98 fc ff
	ff		 mov	 DWORD PTR $T202455[ebp+4], ecx
  02843	6a 01		 push	 1
  02845	8b 95 98 fc ff
	ff		 mov	 edx, DWORD PTR $T202455[ebp+4]
  0284b	52		 push	 edx
  0284c	8b 85 94 fc ff
	ff		 mov	 eax, DWORD PTR $T202455[ebp]
  02852	50		 push	 eax
  02853	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _xoffset$198550[ebp]
  02859	51		 push	 ecx
  0285a	8b 55 8c	 mov	 edx, DWORD PTR _pDC$[ebp]
  0285d	52		 push	 edx
  0285e	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  02864	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198625:

; 851  : 				}

  02869	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0286d	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198623[ebp]
  02873	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush

; 852  : 				else{

  02878	e9 ea 00 00 00	 jmp	 $L198585
$L198622:

; 853  : 					pDC->FillRect (rect2,&m_newbrBackground);

  0287d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _m_newbrBackground$[ebp]
  02883	50		 push	 eax
  02884	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  0288a	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0288f	50		 push	 eax
  02890	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02893	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 854  : 					pDC->Draw3dRect (rect2,m_newclrBack,m_newclrBack);

  02898	8b 4d 90	 mov	 ecx, DWORD PTR _m_newclrBack$[ebp]
  0289b	51		 push	 ecx
  0289c	8b 55 90	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  0289f	52		 push	 edx
  028a0	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _rect2$[ebp]
  028a6	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  028ab	50		 push	 eax
  028ac	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  028af	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 855  : 					CPoint ptImage(rect.left+dx,rect.top+dy);

  028b4	8b 45 a4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  028b7	03 85 f4 fd ff
	ff		 add	 eax, DWORD PTR _dy$198548[ebp]
  028bd	50		 push	 eax
  028be	8b 4d a0	 mov	 ecx, DWORD PTR _rect$[ebp]
  028c1	03 8d a8 fd ff
	ff		 add	 ecx, DWORD PTR _dx$198547[ebp]
  028c7	51		 push	 ecx
  028c8	8d 8d 44 fd ff
	ff		 lea	 ecx, DWORD PTR _ptImage$198628[ebp]
  028ce	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 856  : 					if(bitmap){

  028d3	83 bd c4 fd ff
	ff 00		 cmp	 DWORD PTR _bitmap$198555[ebp], 0
  028da	0f 84 87 00 00
	00		 je	 $L198585

; 857  : 						if(CanDraw3D)

  028e0	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _CanDraw3D$198556[ebp], 0
  028e7	74 40		 je	 SHORT $L198630

; 858  : 							bitmap->Draw(pDC,faded_offset,ptImage,ILD_TRANSPARENT);

  028e9	8b 95 44 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198628[ebp]
  028ef	89 95 8c fc ff
	ff		 mov	 DWORD PTR $T202456[ebp], edx
  028f5	8b 85 48 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198628[ebp+4]
  028fb	89 85 90 fc ff
	ff		 mov	 DWORD PTR $T202456[ebp+4], eax
  02901	6a 01		 push	 1
  02903	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR $T202456[ebp+4]
  02909	51		 push	 ecx
  0290a	8b 95 8c fc ff
	ff		 mov	 edx, DWORD PTR $T202456[ebp]
  02910	52		 push	 edx
  02911	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _faded_offset$198552[ebp]
  02917	50		 push	 eax
  02918	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0291b	51		 push	 ecx
  0291c	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  02922	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw

; 859  : 						else

  02927	eb 3e		 jmp	 SHORT $L198585
$L198630:

; 860  : 							bitmap->Draw(pDC,xoffset,ptImage,ILD_TRANSPARENT);

  02929	8b 95 44 fd ff
	ff		 mov	 edx, DWORD PTR _ptImage$198628[ebp]
  0292f	89 95 84 fc ff
	ff		 mov	 DWORD PTR $T202457[ebp], edx
  02935	8b 85 48 fd ff
	ff		 mov	 eax, DWORD PTR _ptImage$198628[ebp+4]
  0293b	89 85 88 fc ff
	ff		 mov	 DWORD PTR $T202457[ebp+4], eax
  02941	6a 01		 push	 1
  02943	8b 8d 88 fc ff
	ff		 mov	 ecx, DWORD PTR $T202457[ebp+4]
  02949	51		 push	 ecx
  0294a	8b 95 84 fc ff
	ff		 mov	 edx, DWORD PTR $T202457[ebp]
  02950	52		 push	 edx
  02951	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _xoffset$198550[ebp]
  02957	50		 push	 eax
  02958	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0295b	51		 push	 ecx
  0295c	8b 8d c4 fd ff
	ff		 mov	 ecx, DWORD PTR _bitmap$198555[ebp]
  02962	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198585:

; 861  : 					}
; 862  : 				}
; 863  : 			}
; 864  : 		}
; 865  : 		if(nIconNormal<0 && state&ODS_CHECKED && !checkflag){

  02967	83 bd c0 fd ff
	ff 00		 cmp	 DWORD PTR _nIconNormal$198549[ebp], 0
  0296e	0f 8d b5 00 00
	00		 jge	 $L198634
  02974	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  0297a	83 e2 08	 and	 edx, 8
  0297d	0f 84 a6 00 00
	00		 je	 $L198634
  02983	83 bd fc fd ff
	ff 00		 cmp	 DWORD PTR _checkflag$198537[ebp], 0
  0298a	0f 85 99 00 00
	00		 jne	 $L198634

; 866  : 			CMenuItemInfo info;

  02990	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR _info$198635[ebp]
  02996	e8 00 00 00 00	 call	 ??0CMenuItemInfo@@QAE@XZ ; CMenuItemInfo::CMenuItemInfo

; 867  : 			info.fMask = MIIM_CHECKMARKS;

  0299b	c7 85 18 fd ff
	ff 08 00 00 00	 mov	 DWORD PTR _info$198635[ebp+4], 8

; 868  : 			::GetMenuItemInfo((HMENU)lpDIS->hwndItem,lpDIS->itemID,
; 869  : 				MF_BYCOMMAND, &info);

  029a5	8d 85 14 fd ff
	ff		 lea	 eax, DWORD PTR _info$198635[ebp]
  029ab	50		 push	 eax
  029ac	6a 00		 push	 0
  029ae	8b 4d 08	 mov	 ecx, DWORD PTR _lpDIS$[ebp]
  029b1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  029b4	52		 push	 edx
  029b5	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  029b8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  029bb	51		 push	 ecx
  029bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuItemInfoA@16

; 870  : 			if(state&ODS_CHECKED || info.hbmpUnchecked) {

  029c2	8b 95 ac fd ff
	ff		 mov	 edx, DWORD PTR _state$198557[ebp]
  029c8	83 e2 08	 and	 edx, 8
  029cb	75 09		 jne	 SHORT $L198638
  029cd	83 bd 30 fd ff
	ff 00		 cmp	 DWORD PTR _info$198635[ebp+28], 0
  029d4	74 53		 je	 SHORT $L198634
$L198638:

; 871  : 				DrawXPCheckmark(pDC, rect2,state&ODS_CHECKED ? info.hbmpChecked :
; 872  : 				info.hbmpUnchecked,crSelect,state&ODS_SELECTED);

  029d6	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _state$198557[ebp]
  029dc	83 e0 08	 and	 eax, 8
  029df	74 0e		 je	 SHORT $L202458
  029e1	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR _info$198635[ebp+24]
  029e7	89 8d 58 fc ff
	ff		 mov	 DWORD PTR tv665[ebp], ecx
  029ed	eb 0c		 jmp	 SHORT $L202459
$L202458:
  029ef	8b 95 30 fd ff
	ff		 mov	 edx, DWORD PTR _info$198635[ebp+28]
  029f5	89 95 58 fc ff
	ff		 mov	 DWORD PTR tv665[ebp], edx
$L202459:
  029fb	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _state$198557[ebp]
  02a01	83 e0 01	 and	 eax, 1
  02a04	50		 push	 eax
  02a05	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _crSelect$198539[ebp]
  02a0b	51		 push	 ecx
  02a0c	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR tv665[ebp]
  02a12	52		 push	 edx
  02a13	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _rect2$[ebp]
  02a19	50		 push	 eax
  02a1a	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02a1d	51		 push	 ecx
  02a1e	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02a24	e8 00 00 00 00	 call	 ?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z ; BCMenu::DrawXPCheckmark
$L198634:

; 873  : 			}
; 874  : 		}
; 875  : 		
; 876  : 		//This is needed always so that we can have the space for check marks
; 877  : 		
; 878  : 		x0=rect.left;y0=rect.top;

  02a29	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  02a2c	89 95 b4 fd ff
	ff		 mov	 DWORD PTR _x0$198545[ebp], edx
  02a32	8b 45 a4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  02a35	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _y0$198546[ebp], eax

; 879  : 		rect.left = rect.left + barwidth + 8; 

  02a3b	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _barwidth$[ebp]
  02a41	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  02a44	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  02a48	89 45 a0	 mov	 DWORD PTR _rect$[ebp], eax

; 880  : 		
; 881  : 		if(!strText.IsEmpty()){

  02a4b	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  02a51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  02a57	0f b6 c8	 movzx	 ecx, al
  02a5a	85 c9		 test	 ecx, ecx
  02a5c	0f 85 3a 03 00
	00		 jne	 $L198639

; 882  : 			
; 883  : 			CRect rectt(rect.left,rect.top,rect.right,rect.bottom);

  02a62	8b 55 ac	 mov	 edx, DWORD PTR _rect$[ebp+12]
  02a65	52		 push	 edx
  02a66	8b 45 a8	 mov	 eax, DWORD PTR _rect$[ebp+8]
  02a69	50		 push	 eax
  02a6a	8b 4d a4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  02a6d	51		 push	 ecx
  02a6e	8b 55 a0	 mov	 edx, DWORD PTR _rect$[ebp]
  02a71	52		 push	 edx
  02a72	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$198640[ebp]
  02a78	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 884  : 			
; 885  : 			//   Find tabs
; 886  : 			
; 887  : 			CString leftStr,rightStr;

  02a7d	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02a83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02a89	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  02a8d	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198642[ebp]
  02a93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02a99	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 888  : 			leftStr.Empty();rightStr.Empty();

  02a9d	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02aa3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
  02aa9	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198642[ebp]
  02aaf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ

; 889  : 			int tablocr=strText.ReverseFind(_T('\t'));

  02ab5	6a 09		 push	 9
  02ab7	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  02abd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReverseFind@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHD@Z
  02ac3	89 85 10 fd ff
	ff		 mov	 DWORD PTR _tablocr$198643[ebp], eax

; 890  : 			if(tablocr!=-1){

  02ac9	83 bd 10 fd ff
	ff ff		 cmp	 DWORD PTR _tablocr$198643[ebp], -1
  02ad0	0f 84 c7 00 00
	00		 je	 $L198644

; 891  : 				rightStr=strText.Mid(tablocr+1);

  02ad6	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _tablocr$198643[ebp]
  02adc	83 c0 01	 add	 eax, 1
  02adf	50		 push	 eax
  02ae0	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T202460[ebp]
  02ae6	51		 push	 ecx
  02ae7	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  02aed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  02af3	89 85 54 fc ff
	ff		 mov	 DWORD PTR tv715[ebp], eax
  02af9	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR tv715[ebp]
  02aff	89 95 50 fc ff
	ff		 mov	 DWORD PTR tv845[ebp], edx
  02b05	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  02b09	8b 85 50 fc ff
	ff		 mov	 eax, DWORD PTR tv845[ebp]
  02b0f	50		 push	 eax
  02b10	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198642[ebp]
  02b16	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  02b1c	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  02b20	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T202460[ebp]
  02b26	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 892  : 				leftStr=strText.Left(strText.Find(_T('\t')));

  02b2c	6a 00		 push	 0
  02b2e	6a 09		 push	 9
  02b30	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  02b36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  02b3c	50		 push	 eax
  02b3d	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T202461[ebp]
  02b43	51		 push	 ecx
  02b44	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  02b4a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  02b50	89 85 4c fc ff
	ff		 mov	 DWORD PTR tv712[ebp], eax
  02b56	8b 95 4c fc ff
	ff		 mov	 edx, DWORD PTR tv712[ebp]
  02b5c	89 95 48 fc ff
	ff		 mov	 DWORD PTR tv847[ebp], edx
  02b62	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  02b66	8b 85 48 fc ff
	ff		 mov	 eax, DWORD PTR tv847[ebp]
  02b6c	50		 push	 eax
  02b6d	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02b73	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  02b79	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  02b7d	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T202461[ebp]
  02b83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 893  : 				rectt.right-=m_iconX;

  02b89	8b 8d fc fc ff
	ff		 mov	 ecx, DWORD PTR _rectt$198640[ebp+8]
  02b8f	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  02b95	89 8d fc fc ff
	ff		 mov	 DWORD PTR _rectt$198640[ebp+8], ecx

; 894  : 			}
; 895  : 			else leftStr=strText;

  02b9b	eb 13		 jmp	 SHORT $L198647
$L198644:
  02b9d	8d 95 d0 fd ff
	ff		 lea	 edx, DWORD PTR _strText$198558[ebp]
  02ba3	52		 push	 edx
  02ba4	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02baa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
$L198647:

; 896  : 			
; 897  : 			int iOldMode = pDC->GetBkMode();

  02bb0	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02bb3	e8 00 00 00 00	 call	 ?GetBkMode@CDC@@QBEHXZ	; CDC::GetBkMode
  02bb8	89 85 f0 fc ff
	ff		 mov	 DWORD PTR _iOldMode$198648[ebp], eax

; 898  : 			pDC->SetBkMode( TRANSPARENT);

  02bbe	6a 01		 push	 1
  02bc0	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02bc3	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 899  : 			
; 900  : 			// Draw the text in the correct colour:
; 901  : 			
; 902  : 			UINT nFormat  = DT_LEFT|DT_SINGLELINE|DT_VCENTER;

  02bc8	c7 85 0c fd ff
	ff 24 00 00 00	 mov	 DWORD PTR _nFormat$198649[ebp], 36 ; 00000024H

; 903  : 			UINT nFormatr = DT_RIGHT|DT_SINGLELINE|DT_VCENTER;

  02bd2	c7 85 08 fd ff
	ff 26 00 00 00	 mov	 DWORD PTR _nFormatr$198650[ebp], 38 ; 00000026H

; 904  : 			if(!(lpDIS->itemState & ODS_GRAYED)){

  02bdc	8b 45 08	 mov	 eax, DWORD PTR _lpDIS$[ebp]
  02bdf	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02be2	83 e1 02	 and	 ecx, 2
  02be5	75 64		 jne	 SHORT $L198651

; 905  : 				pDC->SetTextColor(crText);

  02be7	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _crText$198538[ebp]
  02bed	52		 push	 edx
  02bee	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  02bf1	8b 10		 mov	 edx, DWORD PTR [eax]
  02bf3	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02bf6	ff 52 38	 call	 DWORD PTR [edx+56]

; 906  : 				pDC->DrawText (leftStr,rectt,nFormat);

  02bf9	8b 85 0c fd ff
	ff		 mov	 eax, DWORD PTR _nFormat$198649[ebp]
  02bff	50		 push	 eax
  02c00	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$198640[ebp]
  02c06	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02c0b	50		 push	 eax
  02c0c	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02c12	51		 push	 ecx
  02c13	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02c16	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 907  : 				if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  02c1b	83 bd 10 fd ff
	ff ff		 cmp	 DWORD PTR _tablocr$198643[ebp], -1
  02c22	74 22		 je	 SHORT $L198652
  02c24	8b 95 08 fd ff
	ff		 mov	 edx, DWORD PTR _nFormatr$198650[ebp]
  02c2a	52		 push	 edx
  02c2b	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$198640[ebp]
  02c31	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02c36	50		 push	 eax
  02c37	8d 85 04 fd ff
	ff		 lea	 eax, DWORD PTR _rightStr$198642[ebp]
  02c3d	50		 push	 eax
  02c3e	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02c41	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198652:

; 908  : 			}
; 909  : 			else{

  02c46	e9 22 01 00 00	 jmp	 $L198653
$L198651:

; 910  : 				RECT offset = *rectt;

  02c4b	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$198640[ebp]
  02c51	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02c56	8b 08		 mov	 ecx, DWORD PTR [eax]
  02c58	89 8d dc fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp], ecx
  02c5e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  02c61	89 95 e0 fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp+4], edx
  02c67	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  02c6a	89 8d e4 fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp+8], ecx
  02c70	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  02c73	89 95 e8 fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp+12], edx

; 911  : 				offset.left+=1;

  02c79	8b 85 dc fc ff
	ff		 mov	 eax, DWORD PTR _offset$198654[ebp]
  02c7f	83 c0 01	 add	 eax, 1
  02c82	89 85 dc fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp], eax

; 912  : 				offset.right+=1;

  02c88	8b 8d e4 fc ff
	ff		 mov	 ecx, DWORD PTR _offset$198654[ebp+8]
  02c8e	83 c1 01	 add	 ecx, 1
  02c91	89 8d e4 fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp+8], ecx

; 913  : 				offset.top+=1;

  02c97	8b 95 e0 fc ff
	ff		 mov	 edx, DWORD PTR _offset$198654[ebp+4]
  02c9d	83 c2 01	 add	 edx, 1
  02ca0	89 95 e0 fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp+4], edx

; 914  : 				offset.bottom+=1;

  02ca6	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _offset$198654[ebp+12]
  02cac	83 c0 01	 add	 eax, 1
  02caf	89 85 e8 fc ff
	ff		 mov	 DWORD PTR _offset$198654[ebp+12], eax

; 915  : 				if(!IsWinXPLuna()){

  02cb5	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  02cba	85 c0		 test	 eax, eax
  02cbc	75 4e		 jne	 SHORT $L198655

; 916  : 					COLORREF graycol=GetSysColor(COLOR_GRAYTEXT);

  02cbe	6a 11		 push	 17			; 00000011H
  02cc0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  02cc6	89 85 d8 fc ff
	ff		 mov	 DWORD PTR _graycol$198656[ebp], eax

; 917  : 					if(!(state&ODS_SELECTED))graycol = LightenColor(graycol,0.4);

  02ccc	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _state$198557[ebp]
  02cd2	83 e1 01	 and	 ecx, 1
  02cd5	75 21		 jne	 SHORT $L198657
  02cd7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd999999999999a
  02cdd	83 ec 08	 sub	 esp, 8
  02ce0	dd 1c 24	 fstp	 QWORD PTR [esp]
  02ce3	8b 95 d8 fc ff
	ff		 mov	 edx, DWORD PTR _graycol$198656[ebp]
  02ce9	52		 push	 edx
  02cea	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  02cef	83 c4 0c	 add	 esp, 12			; 0000000cH
  02cf2	89 85 d8 fc ff
	ff		 mov	 DWORD PTR _graycol$198656[ebp], eax
$L198657:

; 918  : 					pDC->SetTextColor(graycol);

  02cf8	8b 85 d8 fc ff
	ff		 mov	 eax, DWORD PTR _graycol$198656[ebp]
  02cfe	50		 push	 eax
  02cff	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02d02	8b 11		 mov	 edx, DWORD PTR [ecx]
  02d04	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02d07	ff 52 38	 call	 DWORD PTR [edx+56]

; 919  : 				}
; 920  : 				else pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));

  02d0a	eb 14		 jmp	 SHORT $L198658
$L198655:
  02d0c	6a 11		 push	 17			; 00000011H
  02d0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  02d14	50		 push	 eax
  02d15	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  02d18	8b 10		 mov	 edx, DWORD PTR [eax]
  02d1a	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02d1d	ff 52 38	 call	 DWORD PTR [edx+56]
$L198658:

; 921  : 				pDC->DrawText(leftStr,rectt, nFormat);

  02d20	8b 85 0c fd ff
	ff		 mov	 eax, DWORD PTR _nFormat$198649[ebp]
  02d26	50		 push	 eax
  02d27	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$198640[ebp]
  02d2d	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02d32	50		 push	 eax
  02d33	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02d39	51		 push	 ecx
  02d3a	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02d3d	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 922  : 				if(tablocr!=-1) pDC->DrawText (rightStr,rectt,nFormatr);

  02d42	83 bd 10 fd ff
	ff ff		 cmp	 DWORD PTR _tablocr$198643[ebp], -1
  02d49	74 22		 je	 SHORT $L198653
  02d4b	8b 95 08 fd ff
	ff		 mov	 edx, DWORD PTR _nFormatr$198650[ebp]
  02d51	52		 push	 edx
  02d52	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _rectt$198640[ebp]
  02d58	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  02d5d	50		 push	 eax
  02d5e	8d 85 04 fd ff
	ff		 lea	 eax, DWORD PTR _rightStr$198642[ebp]
  02d64	50		 push	 eax
  02d65	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02d68	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198653:

; 923  : 			}
; 924  : 			pDC->SetBkMode( iOldMode );

  02d6d	8b 8d f0 fc ff
	ff		 mov	 ecx, DWORD PTR _iOldMode$198648[ebp]
  02d73	51		 push	 ecx
  02d74	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02d77	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 925  : 		}

  02d7c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  02d80	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198642[ebp]
  02d86	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02d8c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  02d90	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  02d96	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L198639:

; 926  : 		
; 927  : 		m_penBack.DeleteObject();

  02d9c	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$198544[ebp]
  02da2	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 928  : 		m_brSelect.DeleteObject();

  02da7	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  02dad	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 929  : 	}

  02db2	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  02db6	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  02dbc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  02dc2	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  02dc6	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$198544[ebp]
  02dcc	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  02dd1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  02dd5	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  02ddb	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L198533:

; 930  : 	m_brBackground.DeleteObject();

  02de0	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  02de6	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 931  : 	m_newbrBackground.DeleteObject();

  02deb	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  02df1	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 932  : #ifdef BCMENU_USE_MEMDC
; 933  : 	if(pFont)pDC->SelectObject (pFont); //set it to the old font

  02df6	83 7d 9c 00	 cmp	 DWORD PTR _pFont$[ebp], 0
  02dfa	74 0f		 je	 SHORT $L198660
  02dfc	8b 55 9c	 mov	 edx, DWORD PTR _pFont$[ebp]
  02dff	52		 push	 edx
  02e00	8b 45 8c	 mov	 eax, DWORD PTR _pDC$[ebp]
  02e03	8b 10		 mov	 edx, DWORD PTR [eax]
  02e05	8b 4d 8c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02e08	ff 52 30	 call	 DWORD PTR [edx+48]
$L198660:

; 934  : 	m_fontMenu.DeleteObject();

  02e0b	8d 4d 94	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  02e0e	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 935  : 	if(pMemDC)delete pMemDC;

  02e13	83 7d f0 00	 cmp	 DWORD PTR _pMemDC$[ebp], 0
  02e17	74 43		 je	 SHORT $L198661
  02e19	8b 45 f0	 mov	 eax, DWORD PTR _pMemDC$[ebp]
  02e1c	89 85 74 fc ff
	ff		 mov	 DWORD PTR $T202463[ebp], eax
  02e22	8b 8d 74 fc ff
	ff		 mov	 ecx, DWORD PTR $T202463[ebp]
  02e28	89 8d 78 fc ff
	ff		 mov	 DWORD PTR $T202462[ebp], ecx
  02e2e	83 bd 78 fc ff
	ff 00		 cmp	 DWORD PTR $T202462[ebp], 0
  02e35	74 1b		 je	 SHORT $L202464
  02e37	6a 01		 push	 1
  02e39	8b 95 78 fc ff
	ff		 mov	 edx, DWORD PTR $T202462[ebp]
  02e3f	8b 02		 mov	 eax, DWORD PTR [edx]
  02e41	8b 8d 78 fc ff
	ff		 mov	 ecx, DWORD PTR $T202462[ebp]
  02e47	ff 50 04	 call	 DWORD PTR [eax+4]
  02e4a	89 85 44 fc ff
	ff		 mov	 DWORD PTR tv829[ebp], eax
  02e50	eb 0a		 jmp	 SHORT $L198661
$L202464:
  02e52	c7 85 44 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv829[ebp], 0
$L198661:

; 936  : #endif
; 937  : }

  02e5c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  02e60	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  02e66	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  02e6b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02e6f	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  02e75	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  02e7a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02e81	8d 4d 94	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  02e84	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  02e89	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02e8c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02e93	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02e96	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02e9b	5f		 pop	 edi
  02e9c	5e		 pop	 esi
  02e9d	8b e5		 mov	 esp, ebp
  02e9f	5d		 pop	 ebp
  02ea0	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202466:
  000e0	8d 4d 94	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  000e3	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L202467:
  000e8	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _m_newbrBackground$[ebp]
  000ee	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202468:
  000f3	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_brBackground$[ebp]
  000f9	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202469:
  000fe	8b 85 d0 fc ff
	ff		 mov	 eax, DWORD PTR $T202445[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0010a	c3		 ret	 0
$L202470:
  0010b	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_brSelect$198543[ebp]
  00111	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202471:
  00116	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR _m_penBack$198544[ebp]
  0011c	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
$L202472:
  00121	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _strText$198558[ebp]
  00127	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202473:
  0012d	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T202448[ebp]
  00133	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202474:
  00139	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _bitmapstandard$198600[ebp]
  0013f	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202475:
  00144	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198611[ebp]
  0014a	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202476:
  0014f	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _brushin$198623[ebp]
  00155	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202477:
  0015a	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR _leftStr$198641[ebp]
  00160	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202478:
  00166	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _rightStr$198642[ebp]
  0016c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202479:
  00172	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T202460[ebp]
  00178	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202480:
  0017e	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T202461[ebp]
  00184	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z:
  0018a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202482
  0018f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawItem_WinXP@BCMenu@@IAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP ; BCMenu::DrawItem_WinXP
PUBLIC	?IsPrinting@CDC@@QBEHXZ				; CDC::IsPrinting
PUBLIC	?CreateCompatibleDC@CDC@@QAEHPAV1@@Z		; CDC::CreateCompatibleDC
PUBLIC	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z	; CDC::SelectObject
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?PtVisible@CDC@@UBEHHH@Z			; CDC::PtVisible
PUBLIC	?RectVisible@CDC@@UBEHPBUtagRECT@@@Z		; CDC::RectVisible
PUBLIC	??_7BCMenuMemDC@@6B@				; BCMenuMemDC::`vftable'
PUBLIC	??_GBCMenuMemDC@@UAEPAXI@Z			; BCMenuMemDC::`scalar deleting destructor'
PUBLIC	?TextOutA@CDC@@UAEHHHPBDH@Z			; CDC::TextOutA
PUBLIC	?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z	; CDC::ExtTextOutA
PUBLIC	?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z	; CDC::TabbedTextOutA
PUBLIC	?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z		; CDC::DrawTextA
PUBLIC	??_R1A@?0A@A@CDC@@8				; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ; CDC::DrawTextExA
PUBLIC	??_R0?AVCDC@@@8					; CDC `RTTI Type Descriptor'
PUBLIC	?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z ; CDC::GrayStringA
PUBLIC	?Escape@CDC@@UAEHHHPBDPAX@Z			; CDC::Escape
PUBLIC	??_R4BCMenuMemDC@@6B@				; BCMenuMemDC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBCMenuMemDC@@@8				; BCMenuMemDC `RTTI Type Descriptor'
PUBLIC	??_R3BCMenuMemDC@@8				; BCMenuMemDC::`RTTI Class Hierarchy Descriptor'
PUBLIC	?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap
PUBLIC	??_R2BCMenuMemDC@@8				; BCMenuMemDC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@BCMenuMemDC@@8			; BCMenuMemDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetAttribDC
EXTRN	?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z:NEAR		; CDC::SetOutputDC
EXTRN	?ReleaseAttribDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseAttribDC
EXTRN	?ReleaseOutputDC@CDC@@UAEXXZ:NEAR		; CDC::ReleaseOutputDC
EXTRN	??0CDC@@QAE@XZ:NEAR				; CDC::CDC
EXTRN	?SaveDC@CDC@@UAEHXZ:NEAR			; CDC::SaveDC
EXTRN	?RestoreDC@CDC@@UAEHH@Z:NEAR			; CDC::RestoreDC
EXTRN	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z:NEAR ; CDC::SelectStockObject
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:NEAR	; CDC::SelectObject
EXTRN	?SetBkColor@CDC@@UAEKK@Z:NEAR			; CDC::SetBkColor
EXTRN	?SetTextColor@CDC@@UAEKK@Z:NEAR			; CDC::SetTextColor
EXTRN	?SetMapMode@CDC@@UAEHH@Z:NEAR			; CDC::SetMapMode
EXTRN	?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::SetViewportOrg
EXTRN	?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:NEAR	; CDC::OffsetViewportOrg
EXTRN	?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetViewportExt
EXTRN	?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleViewportExt
EXTRN	?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z:NEAR	; CDC::SetWindowOrg
EXTRN	?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z:NEAR	; CDC::SetWindowExt
EXTRN	?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z:NEAR	; CDC::ScaleWindowExt
EXTRN	?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z:NEAR	; CDC::GetClipBox
EXTRN	??_EBCMenuMemDC@@UAEPAXI@Z:NEAR			; BCMenuMemDC::`vector deleting destructor'
EXTRN	??1CDC@@UAE@XZ:NEAR				; CDC::~CDC
EXTRN	?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ:NEAR ; CDC::GetRuntimeClass
;	COMDAT xdata$x
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
xdata$x	SEGMENT
$T202509 DD	0ffffffffH
	DD	FLAT:$L202504
	DD	00H
	DD	FLAT:$L202505
$T202507 DD	019930520H
	DD	02H
	DD	FLAT:$T202509
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7BCMenuMemDC@@6B@
CONST	SEGMENT
??_7BCMenuMemDC@@6B@ DD FLAT:??_R4BCMenuMemDC@@6B@	; BCMenuMemDC::`vftable'
	DD	FLAT:?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_EBCMenuMemDC@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?ReleaseAttribDC@CDC@@UAEXXZ
	DD	FLAT:?ReleaseOutputDC@CDC@@UAEXXZ
	DD	FLAT:?SaveDC@CDC@@UAEHXZ
	DD	FLAT:?RestoreDC@CDC@@UAEHH@Z
	DD	FLAT:?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z
	DD	FLAT:?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z
	DD	FLAT:?SetBkColor@CDC@@UAEKK@Z
	DD	FLAT:?SetTextColor@CDC@@UAEKK@Z
	DD	FLAT:?SetMapMode@CDC@@UAEHH@Z
	DD	FLAT:?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z
	DD	FLAT:?PtVisible@CDC@@UBEHHH@Z
	DD	FLAT:?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
	DD	FLAT:?TextOutA@CDC@@UAEHHHPBDH@Z
	DD	FLAT:?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
	DD	FLAT:?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
	DD	FLAT:?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
	DD	FLAT:?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
	DD	FLAT:?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
	DD	FLAT:?Escape@CDC@@UAEHHHPBDPAX@Z
CONST	ENDS
;	COMDAT ??_R4BCMenuMemDC@@6B@
rdata$r	SEGMENT
??_R4BCMenuMemDC@@6B@ DD 00H				; BCMenuMemDC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBCMenuMemDC@@@8
	DD	FLAT:??_R3BCMenuMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBCMenuMemDC@@@8
_DATA	SEGMENT
??_R0?AVBCMenuMemDC@@@8 DD FLAT:??_7type_info@@6B@	; BCMenuMemDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBCMenuMemDC@@', 00H
_DATA	ENDS
;	COMDAT ??_R3BCMenuMemDC@@8
rdata$r	SEGMENT
??_R3BCMenuMemDC@@8 DD 00H				; BCMenuMemDC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BCMenuMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R2BCMenuMemDC@@8
rdata$r	SEGMENT
??_R2BCMenuMemDC@@8 DD FLAT:??_R1A@?0A@A@BCMenuMemDC@@8	; BCMenuMemDC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CDC@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@BCMenuMemDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@BCMenuMemDC@@8 DD FLAT:??_R0?AVBCMenuMemDC@@@8 ; BCMenuMemDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CDC@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CDC@@8 DD FLAT:??_R0?AVCDC@@@8		; CDC::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
_DATA	SEGMENT
??_R0?AVCDC@@@8 DD FLAT:??_7type_info@@6B@		; CDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDC@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202503 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_lpSrcRect$ = 12					; size = 4
??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z PROC NEAR	; BCMenuMemDC::BCMenuMemDC, COMDAT
; _this$ = ecx

; 346  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenuMemDC@@6B@
  00036	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 10	 add	 ecx, 16			; 00000010H
  0003c	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00041	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00045	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 20	 add	 ecx, 32			; 00000020H
  0004b	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 347  :         ASSERT(pDC != NULL);
; 348  : 
; 349  : 		m_rect.CopyRect(lpSrcRect);

  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _lpSrcRect$[ebp]
  00053	51		 push	 ecx
  00054	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	83 c1 20	 add	 ecx, 32			; 00000020H
  0005a	e8 00 00 00 00	 call	 ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ; CRect::CopyRect

; 350  :         m_pDC = pDC;

  0005f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  00065	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 351  :         m_pOldBitmap = NULL;

  00068	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 352  :         m_bMemDC = !pDC->IsPrinting();

  00072	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00075	e8 00 00 00 00	 call	 ?IsPrinting@CDC@@QBEHXZ	; CDC::IsPrinting
  0007a	f7 d8		 neg	 eax
  0007c	1b c0		 sbb	 eax, eax
  0007e	40		 inc	 eax
  0007f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00082	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 353  :               
; 354  :         if (m_bMemDC)    // Create a Memory DC

  00085	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0008c	74 64		 je	 SHORT $L198062

; 355  :         {
; 356  :             CreateCompatibleDC(pDC);

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00091	51		 push	 ecx
  00092	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 357  :             m_bitmap.CreateCompatibleBitmap(pDC, m_rect.Width(), m_rect.Height());

  0009a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	83 c1 20	 add	 ecx, 32			; 00000020H
  000a0	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  000a5	50		 push	 eax
  000a6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	83 c1 20	 add	 ecx, 32			; 00000020H
  000ac	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  000b1	50		 push	 eax
  000b2	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  000b5	52		 push	 edx
  000b6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	83 c1 10	 add	 ecx, 16			; 00000010H
  000bc	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 358  :             m_pOldBitmap = SelectObject(&m_bitmap);

  000c1	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	83 c0 10	 add	 eax, 16			; 00000010H
  000c7	50		 push	 eax
  000c8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  000d0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 359  :             SetWindowOrg(m_rect.left, m_rect.top);

  000d6	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000dc	50		 push	 eax
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e3	52		 push	 edx
  000e4	8d 45 ec	 lea	 eax, DWORD PTR $T202503[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	e8 00 00 00 00	 call	 ?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z ; CDC::SetWindowOrg

; 360  :         }
; 361  :         else        // Make a copy of the relevent parts of the current DC for printing

  000f0	eb 24		 jmp	 SHORT $L198060
$L198062:

; 362  :         {
; 363  :             m_bPrinting = pDC->m_bPrinting;

  000f2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  000f8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000fb	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 364  :             m_hDC       = pDC->m_hDC;

  000fe	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00104	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00107	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 365  :             m_hAttribDC = pDC->m_hAttribDC;

  0010a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00110	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00113	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L198060:

; 366  :         }
; 367  :     }

  00116	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L202504:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202505:
  00008	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202507
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0BCMenuMemDC@@QAE@PAVCDC@@PBUtagRECT@@@Z ENDP		; BCMenuMemDC::BCMenuMemDC
PUBLIC	??1BCMenuMemDC@@UAE@XZ				; BCMenuMemDC::~BCMenuMemDC
; Function compile flags: /Odt
;	COMDAT ??_GBCMenuMemDC@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBCMenuMemDC@@UAEPAXI@Z PROC NEAR			; BCMenuMemDC::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1BCMenuMemDC@@UAE@XZ	; BCMenuMemDC::~BCMenuMemDC
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L198077
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L198077:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GBCMenuMemDC@@UAEPAXI@Z ENDP				; BCMenuMemDC::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z			; CDC::BitBlt
;	COMDAT xdata$x
xdata$x	SEGMENT
$T202521 DD	0ffffffffH
	DD	FLAT:$L202516
	DD	00H
	DD	FLAT:$L202517
$T202519 DD	019930520H
	DD	02H
	DD	FLAT:$T202521
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??1BCMenuMemDC@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BCMenuMemDC@@UAE@XZ PROC NEAR			; BCMenuMemDC::~BCMenuMemDC, COMDAT
; _this$ = ecx

; 371  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1BCMenuMemDC@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7BCMenuMemDC@@6B@
  00025	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 372  :         if (m_bMemDC) 

  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  00033	74 59		 je	 SHORT $L198067

; 373  :         {    
; 374  :             // Copy the offscreen bitmap onto the screen.
; 375  :             m_pDC->BitBlt(m_rect.left, m_rect.top, m_rect.Width(), m_rect.Height(),
; 376  :                           this, m_rect.left, m_rect.top, SRCCOPY);

  00035	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0003a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00040	50		 push	 eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00047	52		 push	 edx
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 20	 add	 ecx, 32			; 00000020H
  00052	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00057	50		 push	 eax
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	83 c1 20	 add	 ecx, 32			; 00000020H
  0005e	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00063	50		 push	 eax
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006a	52		 push	 edx
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00071	51		 push	 ecx
  00072	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00078	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 377  : 
; 378  :             //Swap back the original bitmap.
; 379  :             SelectObject(m_pOldBitmap);

  0007d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00083	51		 push	 ecx
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 380  :         } else {

  0008c	eb 14		 jmp	 SHORT $L198066
$L198067:

; 381  :             // All we need to do is replace the DC with an illegal value,
; 382  :             // this keeps us from accidently deleting the handles associated with
; 383  :             // the CDC that was passed to the constructor.
; 384  :             m_hDC = m_hAttribDC = NULL;

  0008e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00091	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L198066:

; 385  :         }
; 386  :     }

  000a2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	83 c1 10	 add	 ecx, 16			; 00000010H
  000ac	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  000b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L202516:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202517:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$??1BCMenuMemDC@@UAE@XZ:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202519
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1BCMenuMemDC@@UAE@XZ ENDP				; BCMenuMemDC::~BCMenuMemDC
PUBLIC	?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ		; CDC::GetSafeHdc
PUBLIC	?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z	; CImageList::ExtractIconA
PUBLIC	??BCBrush@@QBEPAUHBRUSH__@@XZ			; CBrush::operator HBRUSH__ *
EXTRN	__imp__DrawIconEx@36:NEAR
EXTRN	?DeleteDC@CDC@@QAEHXZ:NEAR			; CDC::DeleteDC
EXTRN	__imp__DestroyIcon@4:NEAR
xdata$x	SEGMENT
$T202532 DD	0ffffffffH
	DD	FLAT:$L202527
	DD	00H
	DD	FLAT:$L202528
$T202530 DD	019930520H
	DD	02H
	DD	FLAT:$T202532
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T202526 = -52						; size = 4
_brush$ = -48						; size = 8
_m_newclrBack$ = -40					; size = 4
_hIcon$ = -36						; size = 4
_dc$ = -32						; size = 16
_pOldBmp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_imglist$ = 12						; size = 4
_nIndex$ = 16						; size = 4
_bmp$ = 20						; size = 4
?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z PROC NEAR ; BCMenu::GetBitmapFromImageList
; _this$ = ecx

; 940  : {

  02eb0	55		 push	 ebp
  02eb1	8b ec		 mov	 ebp, esp
  02eb3	6a ff		 push	 -1
  02eb5	68 00 00 00 00	 push	 __ehhandler$?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z
  02eba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02ec0	50		 push	 eax
  02ec1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02ec8	83 ec 2c	 sub	 esp, 44			; 0000002cH
  02ecb	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 941  : 	HICON hIcon = imglist->ExtractIcon(nIndex);

  02ece	8b 45 10	 mov	 eax, DWORD PTR _nIndex$[ebp]
  02ed1	50		 push	 eax
  02ed2	8b 4d 0c	 mov	 ecx, DWORD PTR _imglist$[ebp]
  02ed5	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  02eda	89 45 dc	 mov	 DWORD PTR _hIcon$[ebp], eax

; 942  : 	CDC dc;

  02edd	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02ee0	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  02ee5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 943  : 	dc.CreateCompatibleDC(pDC);

  02eec	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02eef	51		 push	 ecx
  02ef0	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02ef3	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 944  : 	bmp.CreateCompatibleBitmap(pDC,m_iconX,m_iconY);

  02ef8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  02efe	52		 push	 edx
  02eff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  02f04	50		 push	 eax
  02f05	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02f08	51		 push	 ecx
  02f09	8b 4d 14	 mov	 ecx, DWORD PTR _bmp$[ebp]
  02f0c	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 945  : 	CBitmap* pOldBmp = dc.SelectObject(&bmp);

  02f11	8b 55 14	 mov	 edx, DWORD PTR _bmp$[ebp]
  02f14	52		 push	 edx
  02f15	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02f18	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  02f1d	89 45 f0	 mov	 DWORD PTR _pOldBmp$[ebp], eax

; 946  : 	CBrush brush ;

  02f20	8d 4d d0	 lea	 ecx, DWORD PTR _brush$[ebp]
  02f23	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  02f28	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 947  : 	COLORREF m_newclrBack;
; 948  : 	m_newclrBack=GetSysColor(COLOR_3DFACE);

  02f2c	6a 0f		 push	 15			; 0000000fH
  02f2e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  02f34	89 45 d8	 mov	 DWORD PTR _m_newclrBack$[ebp], eax

; 949  : 	brush.CreateSolidBrush(m_newclrBack);

  02f37	8b 45 d8	 mov	 eax, DWORD PTR _m_newclrBack$[ebp]
  02f3a	50		 push	 eax
  02f3b	8d 4d d0	 lea	 ecx, DWORD PTR _brush$[ebp]
  02f3e	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 950  : 	::DrawIconEx(
; 951  : 		dc.GetSafeHdc(),
; 952  : 		0,
; 953  : 		0,
; 954  : 		hIcon,
; 955  : 		m_iconX,
; 956  : 		m_iconY,
; 957  : 		0,
; 958  : 		(HBRUSH)brush,
; 959  : 		DI_NORMAL
; 960  : 		);

  02f43	6a 03		 push	 3
  02f45	8d 4d d0	 lea	 ecx, DWORD PTR _brush$[ebp]
  02f48	e8 00 00 00 00	 call	 ??BCBrush@@QBEPAUHBRUSH__@@XZ ; CBrush::operator HBRUSH__ *
  02f4d	50		 push	 eax
  02f4e	6a 00		 push	 0
  02f50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  02f56	51		 push	 ecx
  02f57	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  02f5d	52		 push	 edx
  02f5e	8b 45 dc	 mov	 eax, DWORD PTR _hIcon$[ebp]
  02f61	50		 push	 eax
  02f62	6a 00		 push	 0
  02f64	6a 00		 push	 0
  02f66	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02f69	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  02f6e	50		 push	 eax
  02f6f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawIconEx@36

; 961  : 	dc.SelectObject( pOldBmp );

  02f75	8b 4d f0	 mov	 ecx, DWORD PTR _pOldBmp$[ebp]
  02f78	51		 push	 ecx
  02f79	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02f7c	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 962  : 	dc.DeleteDC();

  02f81	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02f84	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 963  : 	// the icon is not longer needed
; 964  : 	::DestroyIcon(hIcon);

  02f89	8b 55 dc	 mov	 edx, DWORD PTR _hIcon$[ebp]
  02f8c	52		 push	 edx
  02f8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4

; 965  : 	return(TRUE);

  02f93	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR $T202526[ebp], 1
  02f9a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02f9e	8d 4d d0	 lea	 ecx, DWORD PTR _brush$[ebp]
  02fa1	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  02fa6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02fad	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02fb0	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  02fb5	8b 45 cc	 mov	 eax, DWORD PTR $T202526[ebp]

; 966  : }

  02fb8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02fbb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02fc2	8b e5		 mov	 esp, ebp
  02fc4	5d		 pop	 ebp
  02fc5	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L202527:
  00194	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  00197	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202528:
  0019c	8d 4d d0	 lea	 ecx, DWORD PTR _brush$[ebp]
  0019f	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z:
  001a4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202530
  001a9	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ENDP ; BCMenu::GetBitmapFromImageList
PUBLIC	?GetDC@CWnd@@QAEPAVCDC@@XZ			; CWnd::GetDC
PUBLIC	??0CSize@@QAE@UtagSIZE@@@Z			; CSize::CSize
PUBLIC	?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z			; CWnd::ReleaseDC
PUBLIC	?GetDesktopWindow@CWnd@@SGPAV1@XZ		; CWnd::GetDesktopWindow
PUBLIC	?AfxGetMainWnd@@YGPAVCWnd@@XZ			; AfxGetMainWnd
PUBLIC	?GetWideString@BCMenuData@@QAEPB_WXZ		; BCMenuData::GetWideString
EXTRN	__imp__DrawTextA@20:NEAR
EXTRN	__imp__GetTextExtentPoint32W@16:NEAR
EXTRN	__imp__GetSystemMetrics@4:NEAR
xdata$x	SEGMENT
$T202544 DD	0ffffffffH
	DD	FLAT:$L202539
$T202541 DD	019930520H
	DD	01H
	DD	FLAT:$T202544
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv195 = -504						; size = 4
tv84 = -500						; size = 4
_this$ = -496						; size = 4
_rect$198710 = -492					; size = 16
_nm$198695 = -476					; size = 340
_t$198714 = -132					; size = 8
_pWnd$198698 = -124					; size = 4
_lpstrText$198703 = -120				; size = 4
_size$198705 = -116					; size = 8
_pDC$198700 = -108					; size = 4
_temp$198719 = -104					; size = 4
_m_fontMenu$198691 = -100				; size = 8
_pFont$198701 = -92					; size = 4
_m_lf$198692 = -88					; size = 60
__$ArrayPad$ = -28					; size = 4
_temp$198687 = -24					; size = 4
_state$ = -20						; size = 4
_BCMENU_PAD$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lpMIS$ = 8						; size = 4
?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z PROC NEAR ; BCMenu::MeasureItem
; _this$ = ecx

; 981  : {

  02fd0	55		 push	 ebp
  02fd1	8b ec		 mov	 ebp, esp
  02fd3	6a ff		 push	 -1
  02fd5	68 00 00 00 00	 push	 __ehhandler$?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z
  02fda	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02fe0	50		 push	 eax
  02fe1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02fe8	81 ec ec 01 00
	00		 sub	 esp, 492		; 000001ecH
  02fee	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02ff3	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02ff6	56		 push	 esi
  02ff7	57		 push	 edi
  02ff8	89 8d 10 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 982  : 	UINT state = (((BCMenuData*)(lpMIS->itemData))->nFlags);

  02ffe	8b 45 08	 mov	 eax, DWORD PTR _lpMIS$[ebp]
  03001	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  03004	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  03007	89 55 ec	 mov	 DWORD PTR _state$[ebp], edx

; 983  : 	int BCMENU_PAD=4;

  0300a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _BCMENU_PAD$[ebp], 4

; 984  : 	if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps)BCMENU_PAD=7;

  03011	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  03016	85 c0		 test	 eax, eax
  03018	74 10		 je	 SHORT $L198685
  0301a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  03021	74 07		 je	 SHORT $L198685
  03023	c7 45 f0 07 00
	00 00		 mov	 DWORD PTR _BCMENU_PAD$[ebp], 7
$L198685:

; 985  : 	if(state & MF_SEPARATOR){

  0302a	8b 45 ec	 mov	 eax, DWORD PTR _state$[ebp]
  0302d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  03032	74 6d		 je	 SHORT $L198686

; 986  : 		lpMIS->itemWidth = 0;

  03034	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  03037	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 987  : 		int temp = GetSystemMetrics(SM_CYMENU)>>1;

  0303e	6a 0f		 push	 15			; 0000000fH
  03040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  03046	d1 f8		 sar	 eax, 1
  03048	89 45 e8	 mov	 DWORD PTR _temp$198687[ebp], eax

; 988  : 		if(IsLunaMenuStyle())

  0304b	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  03050	85 c0		 test	 eax, eax
  03052	74 0c		 je	 SHORT $L198688

; 989  : 			lpMIS->itemHeight = 3;

  03054	8b 55 08	 mov	 edx, DWORD PTR _lpMIS$[ebp]
  03057	c7 42 10 03 00
	00 00		 mov	 DWORD PTR [edx+16], 3

; 990  : 		else

  0305e	eb 3c		 jmp	 SHORT $L198689
$L198688:

; 991  : 			lpMIS->itemHeight = temp>(m_iconY+BCMENU_PAD)/2 ? temp : (m_iconY+BCMENU_PAD)/2;

  03060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03065	03 45 f0	 add	 eax, DWORD PTR _BCMENU_PAD$[ebp]
  03068	99		 cdq
  03069	2b c2		 sub	 eax, edx
  0306b	d1 f8		 sar	 eax, 1
  0306d	39 45 e8	 cmp	 DWORD PTR _temp$198687[ebp], eax
  03070	7e 0b		 jle	 SHORT $L202535
  03072	8b 45 e8	 mov	 eax, DWORD PTR _temp$198687[ebp]
  03075	89 85 0c fe ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  0307b	eb 13		 jmp	 SHORT $L202536
$L202535:
  0307d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03082	03 45 f0	 add	 eax, DWORD PTR _BCMENU_PAD$[ebp]
  03085	99		 cdq
  03086	2b c2		 sub	 eax, edx
  03088	d1 f8		 sar	 eax, 1
  0308a	89 85 0c fe ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
$L202536:
  03090	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  03093	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR tv84[ebp]
  03099	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$L198689:

; 992  : 	}
; 993  : 	else{

  0309c	e9 28 02 00 00	 jmp	 $L198681
$L198686:

; 994  : 		CFont m_fontMenu;

  030a1	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$198691[ebp]
  030a4	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  030a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 995  : 		LOGFONT m_lf;
; 996  : 		ZeroMemory ((PVOID) &m_lf,sizeof (LOGFONT));

  030b0	6a 3c		 push	 60			; 0000003cH
  030b2	6a 00		 push	 0
  030b4	8d 45 a8	 lea	 eax, DWORD PTR _m_lf$198692[ebp]
  030b7	50		 push	 eax
  030b8	e8 00 00 00 00	 call	 _memset
  030bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 997  : 		NONCLIENTMETRICS nm;
; 998  : 		nm.cbSize = sizeof (NONCLIENTMETRICS);

  030c0	c7 85 24 fe ff
	ff 54 01 00 00	 mov	 DWORD PTR _nm$198695[ebp], 340 ; 00000154H

; 999  : 		VERIFY(SystemParametersInfo(SPI_GETNONCLIENTMETRICS,
; 1000 : 			nm.cbSize,&nm,0)); 

  030ca	6a 00		 push	 0
  030cc	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _nm$198695[ebp]
  030d2	51		 push	 ecx
  030d3	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR _nm$198695[ebp]
  030d9	52		 push	 edx
  030da	6a 29		 push	 41			; 00000029H
  030dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 1001 : 		m_lf =  nm.lfMenuFont;

  030e2	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  030e7	8d b5 c4 fe ff
	ff		 lea	 esi, DWORD PTR _nm$198695[ebp+160]
  030ed	8d 7d a8	 lea	 edi, DWORD PTR _m_lf$198692[ebp]
  030f0	f3 a5		 rep movsd

; 1002 : 		m_fontMenu.CreateFontIndirect (&m_lf);

  030f2	8d 45 a8	 lea	 eax, DWORD PTR _m_lf$198692[ebp]
  030f5	50		 push	 eax
  030f6	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$198691[ebp]
  030f9	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA

; 1003 : 		
; 1004 : 		// Obtain the width of the text:
; 1005 : 		CWnd *pWnd = AfxGetMainWnd();            // Get main window

  030fe	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  03103	89 45 84	 mov	 DWORD PTR _pWnd$198698[ebp], eax

; 1006 : 		if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  03106	83 7d 84 00	 cmp	 DWORD PTR _pWnd$198698[ebp], 0
  0310a	75 08		 jne	 SHORT $L198699
  0310c	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  03111	89 45 84	 mov	 DWORD PTR _pWnd$198698[ebp], eax
$L198699:

; 1007 : 		CDC *pDC = pWnd->GetDC();              // Get device context

  03114	8b 4d 84	 mov	 ecx, DWORD PTR _pWnd$198698[ebp]
  03117	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  0311c	89 45 94	 mov	 DWORD PTR _pDC$198700[ebp], eax

; 1008 : 		CFont* pFont=NULL;    // Select menu font in...

  0311f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _pFont$198701[ebp], 0

; 1009 : 		
; 1010 : 		if (IsNewShell())

  03126	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  0312b	85 c0		 test	 eax, eax
  0312d	74 12		 je	 SHORT $L198702

; 1011 : 			pFont = pDC->SelectObject (&m_fontMenu);// Select menu font in...

  0312f	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$198691[ebp]
  03132	51		 push	 ecx
  03133	8b 55 94	 mov	 edx, DWORD PTR _pDC$198700[ebp]
  03136	8b 02		 mov	 eax, DWORD PTR [edx]
  03138	8b 4d 94	 mov	 ecx, DWORD PTR _pDC$198700[ebp]
  0313b	ff 50 30	 call	 DWORD PTR [eax+48]
  0313e	89 45 a4	 mov	 DWORD PTR _pFont$198701[ebp], eax
$L198702:

; 1012 :         
; 1013 : 		//Get pointer to text SK
; 1014 : 		const wchar_t *lpstrText = ((BCMenuData*)(lpMIS->itemData))->GetWideString();//SK: we use const to prevent misuse

  03141	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  03144	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  03147	e8 00 00 00 00	 call	 ?GetWideString@BCMenuData@@QAEPB_WXZ ; BCMenuData::GetWideString
  0314c	89 45 88	 mov	 DWORD PTR _lpstrText$198703[ebp], eax

; 1015 : 		    
; 1016 : 		SIZE size;
; 1017 : 		size.cx=size.cy=0;

  0314f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _size$198705[ebp+4], 0
  03156	8b 55 90	 mov	 edx, DWORD PTR _size$198705[ebp+4]
  03159	89 55 8c	 mov	 DWORD PTR _size$198705[ebp], edx

; 1018 : 		
; 1019 : 		if (Win32s!=g_Shell)

  0315c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_Shell, 0
  03163	74 25		 je	 SHORT $L198706

; 1020 : 			VERIFY(::GetTextExtentPoint32W(pDC->m_hDC,lpstrText,
; 1021 : 			(int)wcslen(lpstrText),&size)); //SK should also work on 95

  03165	8d 45 8c	 lea	 eax, DWORD PTR _size$198705[ebp]
  03168	50		 push	 eax
  03169	8b 4d 88	 mov	 ecx, DWORD PTR _lpstrText$198703[ebp]
  0316c	51		 push	 ecx
  0316d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  03173	83 c4 04	 add	 esp, 4
  03176	50		 push	 eax
  03177	8b 55 88	 mov	 edx, DWORD PTR _lpstrText$198703[ebp]
  0317a	52		 push	 edx
  0317b	8b 45 94	 mov	 eax, DWORD PTR _pDC$198700[ebp]
  0317e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03181	51		 push	 ecx
  03182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16

; 1022 : #ifndef UNICODE //can't be UNICODE for Win32s
; 1023 : 		else{//it's Win32suckx

  03188	eb 74		 jmp	 SHORT $L198709
$L198706:

; 1024 : 			RECT rect;
; 1025 : 			rect.left=rect.top=0;

  0318a	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rect$198710[ebp+4], 0
  03194	8b 95 18 fe ff
	ff		 mov	 edx, DWORD PTR _rect$198710[ebp+4]
  0319a	89 95 14 fe ff
	ff		 mov	 DWORD PTR _rect$198710[ebp], edx

; 1026 : 			size.cy=DrawText(pDC->m_hDC,(LPCTSTR)lpstrText,
; 1027 : 				(int)wcslen(lpstrText),&rect,
; 1028 : 				DT_SINGLELINE|DT_LEFT|DT_VCENTER|DT_CALCRECT);

  031a0	68 24 04 00 00	 push	 1060			; 00000424H
  031a5	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR _rect$198710[ebp]
  031ab	50		 push	 eax
  031ac	8b 4d 88	 mov	 ecx, DWORD PTR _lpstrText$198703[ebp]
  031af	51		 push	 ecx
  031b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  031b6	83 c4 04	 add	 esp, 4
  031b9	50		 push	 eax
  031ba	8b 55 88	 mov	 edx, DWORD PTR _lpstrText$198703[ebp]
  031bd	52		 push	 edx
  031be	8b 45 94	 mov	 eax, DWORD PTR _pDC$198700[ebp]
  031c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  031c4	51		 push	 ecx
  031c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  031cb	89 45 90	 mov	 DWORD PTR _size$198705[ebp+4], eax

; 1029 : 			//+3 makes at least three pixels space to the menu border
; 1030 : 			size.cx=rect.right-rect.left+3;

  031ce	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR _rect$198710[ebp+8]
  031d4	2b 95 14 fe ff
	ff		 sub	 edx, DWORD PTR _rect$198710[ebp]
  031da	83 c2 03	 add	 edx, 3
  031dd	89 55 8c	 mov	 DWORD PTR _size$198705[ebp], edx

; 1031 : 			size.cx += 3*(size.cx/(int)wcslen(lpstrText));

  031e0	8b 45 88	 mov	 eax, DWORD PTR _lpstrText$198703[ebp]
  031e3	50		 push	 eax
  031e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  031ea	83 c4 04	 add	 esp, 4
  031ed	8b c8		 mov	 ecx, eax
  031ef	8b 45 8c	 mov	 eax, DWORD PTR _size$198705[ebp]
  031f2	99		 cdq
  031f3	f7 f9		 idiv	 ecx
  031f5	6b c0 03	 imul	 eax, 3
  031f8	03 45 8c	 add	 eax, DWORD PTR _size$198705[ebp]
  031fb	89 45 8c	 mov	 DWORD PTR _size$198705[ebp], eax
$L198709:

; 1032 : 		}
; 1033 : #endif    
; 1034 : 		
; 1035 : 		CSize t = CSize(size);

  031fe	8b 55 90	 mov	 edx, DWORD PTR _size$198705[ebp+4]
  03201	52		 push	 edx
  03202	8b 45 8c	 mov	 eax, DWORD PTR _size$198705[ebp]
  03205	50		 push	 eax
  03206	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _t$198714[ebp]
  0320c	e8 00 00 00 00	 call	 ??0CSize@@QAE@UtagSIZE@@@Z ; CSize::CSize

; 1036 : 		if(IsNewShell())

  03211	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  03216	85 c0		 test	 eax, eax
  03218	74 0f		 je	 SHORT $L198716

; 1037 : 			pDC->SelectObject (pFont);  // Select old font in

  0321a	8b 4d a4	 mov	 ecx, DWORD PTR _pFont$198701[ebp]
  0321d	51		 push	 ecx
  0321e	8b 55 94	 mov	 edx, DWORD PTR _pDC$198700[ebp]
  03221	8b 02		 mov	 eax, DWORD PTR [edx]
  03223	8b 4d 94	 mov	 ecx, DWORD PTR _pDC$198700[ebp]
  03226	ff 50 30	 call	 DWORD PTR [eax+48]
$L198716:

; 1038 : 		pWnd->ReleaseDC(pDC);  // Release the DC

  03229	8b 4d 94	 mov	 ecx, DWORD PTR _pDC$198700[ebp]
  0322c	51		 push	 ecx
  0322d	8b 4d 84	 mov	 ecx, DWORD PTR _pWnd$198698[ebp]
  03230	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 1039 : 		
; 1040 : 		// Set width and height:
; 1041 : 		
; 1042 : 		if(IsLunaMenuStyle())lpMIS->itemWidth = m_iconX+BCMENU_PAD+8+t.cx;

  03235	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0323a	85 c0		 test	 eax, eax
  0323c	74 1b		 je	 SHORT $L198717
  0323e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03244	03 55 f0	 add	 edx, DWORD PTR _BCMENU_PAD$[ebp]
  03247	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _t$198714[ebp]
  0324d	8d 4c 02 08	 lea	 ecx, DWORD PTR [edx+eax+8]
  03251	8b 55 08	 mov	 edx, DWORD PTR _lpMIS$[ebp]
  03254	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1043 : 		else lpMIS->itemWidth = m_iconX + t.cx + m_iconX + BCMENU_GAP;

  03257	eb 1b		 jmp	 SHORT $L198718
$L198717:
  03259	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0325e	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _t$198714[ebp]
  03264	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0326a	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  0326e	8b 45 08	 mov	 eax, DWORD PTR _lpMIS$[ebp]
  03271	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L198718:

; 1044 : 		int temp = GetSystemMetrics(SM_CYMENU);

  03274	6a 0f		 push	 15			; 0000000fH
  03276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0327c	89 45 98	 mov	 DWORD PTR _temp$198719[ebp], eax

; 1045 : 		lpMIS->itemHeight = temp>m_iconY+BCMENU_PAD ? temp : m_iconY+BCMENU_PAD;

  0327f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03285	03 4d f0	 add	 ecx, DWORD PTR _BCMENU_PAD$[ebp]
  03288	39 4d 98	 cmp	 DWORD PTR _temp$198719[ebp], ecx
  0328b	7e 0b		 jle	 SHORT $L202537
  0328d	8b 55 98	 mov	 edx, DWORD PTR _temp$198719[ebp]
  03290	89 95 08 fe ff
	ff		 mov	 DWORD PTR tv195[ebp], edx
  03296	eb 0e		 jmp	 SHORT $L202538
$L202537:
  03298	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0329d	03 45 f0	 add	 eax, DWORD PTR _BCMENU_PAD$[ebp]
  032a0	89 85 08 fe ff
	ff		 mov	 DWORD PTR tv195[ebp], eax
$L202538:
  032a6	8b 4d 08	 mov	 ecx, DWORD PTR _lpMIS$[ebp]
  032a9	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR tv195[ebp]
  032af	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1046 : 		m_fontMenu.DeleteObject();

  032b2	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$198691[ebp]
  032b5	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 1047 : 	}

  032ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  032c1	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$198691[ebp]
  032c4	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L198681:

; 1048 : }

  032c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  032cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  032d3	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  032d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  032db	5f		 pop	 edi
  032dc	5e		 pop	 esi
  032dd	8b e5		 mov	 esp, ebp
  032df	5d		 pop	 ebp
  032e0	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202539:
  001ae	8d 4d 9c	 lea	 ecx, DWORD PTR _m_fontMenu$198691[ebp]
  001b1	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
__ehhandler$?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z:
  001b6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202541
  001bb	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MeasureItem@BCMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z ENDP ; BCMenu::MeasureItem
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ?GetWideString@BCMenuData@@QAEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWideString@BCMenuData@@QAEPB_WXZ PROC NEAR		; BCMenuData::GetWideString, COMDAT
; _this$ = ecx

; 45   : 	const wchar_t *GetWideString(void) {return m_szMenuText;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetWideString@BCMenuData@@QAEPB_WXZ ENDP		; BCMenuData::GetWideString
_TEXT	ENDS
PUBLIC	?SetIconSize@BCMenu@@SAXHH@Z			; BCMenu::SetIconSize
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?SetIconSize@BCMenu@@SAXHH@Z PROC NEAR			; BCMenu::SetIconSize

; 1051 : {

  032f0	55		 push	 ebp
  032f1	8b ec		 mov	 ebp, esp

; 1052 : 	m_iconX = width;

  032f3	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  032f6	a3 00 00 00 00	 mov	 DWORD PTR ?m_iconX@BCMenu@@1HA, eax ; BCMenu::m_iconX

; 1053 : 	m_iconY = height;

  032fb	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  032fe	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_iconY@BCMenu@@1HA, ecx ; BCMenu::m_iconY

; 1054 : }

  03304	5d		 pop	 ebp
  03305	c3		 ret	 0
?SetIconSize@BCMenu@@SAXHH@Z ENDP			; BCMenu::SetIconSize
_TEXT	ENDS
PUBLIC	?AppendODMenuA@BCMenu@@QAEHPBDIIH@Z		; BCMenu::AppendODMenuA
PUBLIC	?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z		; BCMenu::AppendODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202550 = -20						; size = 4
$T202549 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_nIconNormal$ = 20					; size = 4
?AppendODMenuA@BCMenu@@QAEHPBDIIH@Z PROC NEAR		; BCMenu::AppendODMenuA
; _this$ = ecx

; 1058 : {

  03310	55		 push	 ebp
  03311	8b ec		 mov	 ebp, esp
  03313	83 ec 18	 sub	 esp, 24			; 00000018H
  03316	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1059 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  03319	6a 00		 push	 0
  0331b	6a 00		 push	 0
  0331d	6a ff		 push	 -1
  0331f	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  03322	50		 push	 eax
  03323	6a 00		 push	 0
  03325	6a 00		 push	 0
  03327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0332d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1060 : 	wchar_t* wszUtf8 = new wchar_t[len];

  03330	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  03333	d1 e1		 shl	 ecx, 1
  03335	51		 push	 ecx
  03336	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0333b	83 c4 04	 add	 esp, 4
  0333e	89 45 f0	 mov	 DWORD PTR $T202549[ebp], eax
  03341	8b 55 f0	 mov	 edx, DWORD PTR $T202549[ebp]
  03344	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1061 : 	memset(wszUtf8, 0, len * 2);

  03347	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0334a	d1 e0		 shl	 eax, 1
  0334c	50		 push	 eax
  0334d	6a 00		 push	 0
  0334f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03352	51		 push	 ecx
  03353	e8 00 00 00 00	 call	 _memset
  03358	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0335b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0335e	52		 push	 edx
  0335f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03362	50		 push	 eax
  03363	6a ff		 push	 -1
  03365	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03368	51		 push	 ecx
  03369	6a 00		 push	 0
  0336b	6a 00		 push	 0
  0336d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1063 : 
; 1064 : 	BOOL bRet = AppendODMenuW( wszUtf8,nFlags,nID,nIconNormal);//SK: See MFC Tech Note 059

  03373	8b 55 14	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  03376	52		 push	 edx
  03377	8b 45 10	 mov	 eax, DWORD PTR _nID$[ebp]
  0337a	50		 push	 eax
  0337b	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  0337e	51		 push	 ecx
  0337f	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  03382	52		 push	 edx
  03383	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  03386	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW
  0338b	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1065 : 
; 1066 : 	delete[] wszUtf8;

  0338e	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03391	89 45 ec	 mov	 DWORD PTR $T202550[ebp], eax
  03394	8b 4d ec	 mov	 ecx, DWORD PTR $T202550[ebp]
  03397	51		 push	 ecx
  03398	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0339d	83 c4 04	 add	 esp, 4

; 1067 : 	return bRet;

  033a0	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1068 : }

  033a3	8b e5		 mov	 esp, ebp
  033a5	5d		 pop	 ebp
  033a6	c2 10 00	 ret	 16			; 00000010H
?AppendODMenuA@BCMenu@@QAEHPBDIIH@Z ENDP		; BCMenu::AppendODMenuA
_TEXT	ENDS
PUBLIC	?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ		; BCMenu::RemoveTopLevelOwnerDraw
PUBLIC	?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
PUBLIC	?GlobalImageListOffset@BCMenu@@IAEHH@Z		; BCMenu::GlobalImageListOffset
PUBLIC	?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
PUBLIC	?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
PUBLIC	??0BCMenuData@@QAE@XZ				; BCMenuData::BCMenuData
PUBLIC	?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z		; BCMenu::LoadFromToolBar
PUBLIC	?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
PUBLIC	?AppendMenuA@CMenu@@QAEHIIPBD@Z			; CMenu::AppendMenuA
EXTRN	??0CImageList@@QAE@XZ:NEAR			; CImageList::CImageList
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	?Create@CImageList@@QAEHHHIHH@Z:NEAR		; CImageList::Create
EXTRN	?DeleteImageList@CImageList@@QAEHXZ:NEAR	; CImageList::DeleteImageList
EXTRN	??1CImageList@@UAE@XZ:NEAR			; CImageList::~CImageList
xdata$x	SEGMENT
$T202561 DD	0ffffffffH
	DD	FLAT:$L202556
	DD	0ffffffffH
	DD	FLAT:$L202557
$T202559 DD	019930520H
	DD	02H
	DD	FLAT:$T202561
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -48						; size = 4
_this$ = -44						; size = 4
$T202553 = -40						; size = 4
$T202552 = -36						; size = 4
_bitmap$198759 = -32					; size = 8
_xoffset$198760 = -24					; size = 4
_mdata$ = -20						; size = 4
_returnflag$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_nIconNormal$ = 20					; size = 4
?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z PROC NEAR		; BCMenu::AppendODMenuW
; _this$ = ecx

; 1073 : {

  033b0	55		 push	 ebp
  033b1	8b ec		 mov	 ebp, esp
  033b3	6a ff		 push	 -1
  033b5	68 00 00 00 00	 push	 __ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z
  033ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  033c0	50		 push	 eax
  033c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  033c8	83 ec 24	 sub	 esp, 36			; 00000024H
  033cb	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 1074 : 	// Add the MF_OWNERDRAW flag if not specified:
; 1075 : 	if(!nID){

  033ce	83 7d 10 00	 cmp	 DWORD PTR _nID$[ebp], 0
  033d2	75 1c		 jne	 SHORT $L198745

; 1076 : 		if(nFlags&MF_BYPOSITION)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  033d4	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  033d7	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  033dc	74 09		 je	 SHORT $L198746
  033de	c7 45 0c 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1077 : 		else nFlags=MF_SEPARATOR|MF_OWNERDRAW;

  033e5	eb 07		 jmp	 SHORT $L198747
$L198746:
  033e7	c7 45 0c 00 09
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 2304 ; 00000900H
$L198747:

; 1078 : 	}
; 1079 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  033ee	eb 17		 jmp	 SHORT $L198748
$L198745:
  033f0	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  033f3	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  033f9	75 0c		 jne	 SHORT $L198748
  033fb	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  033fe	81 ca 00 01 00
	00		 or	 edx, 256		; 00000100H
  03404	89 55 0c	 mov	 DWORD PTR _nFlags$[ebp], edx
$L198748:

; 1080 : 	
; 1081 : 	if(nFlags & MF_POPUP){

  03407	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0340a	83 e0 10	 and	 eax, 16			; 00000010H
  0340d	74 1d		 je	 SHORT $L198750

; 1082 : 		m_AllSubMenus.Add((HMENU)nID);

  0340f	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  03412	51		 push	 ecx
  03413	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  03418	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1083 : 		m_SubMenus.Add((HMENU)nID);

  0341d	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  03420	52		 push	 edx
  03421	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  03424	83 c1 1c	 add	 ecx, 28			; 0000001cH
  03427	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L198750:

; 1084 : 	}
; 1085 : 	
; 1086 : 	BCMenuData *mdata = new BCMenuData;

  0342c	6a 24		 push	 36			; 00000024H
  0342e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  03433	83 c4 04	 add	 esp, 4
  03436	89 45 d8	 mov	 DWORD PTR $T202553[ebp], eax
  03439	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  03440	83 7d d8 00	 cmp	 DWORD PTR $T202553[ebp], 0
  03444	74 0d		 je	 SHORT $L202554
  03446	8b 4d d8	 mov	 ecx, DWORD PTR $T202553[ebp]
  03449	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  0344e	89 45 d0	 mov	 DWORD PTR tv84[ebp], eax
  03451	eb 07		 jmp	 SHORT $L202555
$L202554:
  03453	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L202555:
  0345a	8b 45 d0	 mov	 eax, DWORD PTR tv84[ebp]
  0345d	89 45 dc	 mov	 DWORD PTR $T202552[ebp], eax
  03460	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03467	8b 4d dc	 mov	 ecx, DWORD PTR $T202552[ebp]
  0346a	89 4d ec	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1087 : 	m_MenuList.Add(mdata);

  0346d	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  03470	52		 push	 edx
  03471	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  03474	83 c1 08	 add	 ecx, 8
  03477	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add

; 1088 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  0347c	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0347f	50		 push	 eax
  03480	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03483	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1089 : 	
; 1090 : 	mdata->menuIconNormal = -1;

  03488	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0348b	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1091 : 	mdata->xoffset = -1;

  03492	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  03495	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1092 : 	
; 1093 : 	if(nIconNormal>=0){

  0349c	83 7d 14 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  034a0	0f 8c a5 00 00
	00		 jl	 $L198758

; 1094 : 		CImageList bitmap;

  034a6	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$198759[ebp]
  034a9	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  034ae	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1095 : 		int xoffset=0;

  034b5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _xoffset$198760[ebp], 0

; 1096 : 		LoadFromToolBar(nID,nIconNormal,xoffset);

  034bc	8d 45 e8	 lea	 eax, DWORD PTR _xoffset$198760[ebp]
  034bf	50		 push	 eax
  034c0	8b 4d 14	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  034c3	51		 push	 ecx
  034c4	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  034c7	52		 push	 edx
  034c8	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  034cb	e8 00 00 00 00	 call	 ?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ; BCMenu::LoadFromToolBar

; 1097 : 		if(mdata->bitmap){

  034d0	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  034d3	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  034d7	74 15		 je	 SHORT $L198761

; 1098 : 			mdata->bitmap->DeleteImageList();

  034d9	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  034dc	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  034df	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1099 : 			mdata->bitmap=NULL;

  034e4	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  034e7	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
$L198761:

; 1100 : 		}
; 1101 : 		bitmap.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  034ee	6a 01		 push	 1
  034f0	6a 01		 push	 1
  034f2	68 ff 00 00 00	 push	 255			; 000000ffH
  034f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  034fc	50		 push	 eax
  034fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03503	51		 push	 ecx
  03504	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$198759[ebp]
  03507	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1102 : 		if(AddBitmapToImageList(&bitmap,nIconNormal)){

  0350c	8b 55 14	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  0350f	52		 push	 edx
  03510	8d 45 e0	 lea	 eax, DWORD PTR _bitmap$198759[ebp]
  03513	50		 push	 eax
  03514	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  03517	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  0351c	85 c0		 test	 eax, eax
  0351e	74 1a		 je	 SHORT $L198762

; 1103 : 			mdata->global_offset = AddToGlobalImageList(&bitmap,xoffset,nID);

  03520	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  03523	51		 push	 ecx
  03524	8b 55 e8	 mov	 edx, DWORD PTR _xoffset$198760[ebp]
  03527	52		 push	 edx
  03528	8d 45 e0	 lea	 eax, DWORD PTR _bitmap$198759[ebp]
  0352b	50		 push	 eax
  0352c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0352f	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  03534	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03537	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L198762:

; 1104 : 		}
; 1105 : 	}

  0353a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03541	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$198759[ebp]
  03544	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList

; 1106 : 	else mdata->global_offset = GlobalImageListOffset(nID);

  03549	eb 12		 jmp	 SHORT $L198763
$L198758:
  0354b	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  0354e	52		 push	 edx
  0354f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  03552	e8 00 00 00 00	 call	 ?GlobalImageListOffset@BCMenu@@IAEHH@Z ; BCMenu::GlobalImageListOffset
  03557	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0355a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L198763:

; 1107 : 
; 1108 : 	mdata->nFlags = nFlags;

  0355d	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  03560	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03563	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1109 : 	mdata->nID = nID;

  03566	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03569	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  0356c	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1110 : 	BOOL returnflag=CMenu::AppendMenu(nFlags, nID, (LPCTSTR)mdata);

  0356f	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  03572	50		 push	 eax
  03573	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  03576	51		 push	 ecx
  03577	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0357a	52		 push	 edx
  0357b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0357e	e8 00 00 00 00	 call	 ?AppendMenuA@CMenu@@QAEHIIPBD@Z ; CMenu::AppendMenuA
  03583	89 45 f0	 mov	 DWORD PTR _returnflag$[ebp], eax

; 1111 : 	if(m_loadmenu)RemoveTopLevelOwnerDraw();

  03586	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  03589	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0358d	74 08		 je	 SHORT $L198766
  0358f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  03592	e8 00 00 00 00	 call	 ?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ ; BCMenu::RemoveTopLevelOwnerDraw
$L198766:

; 1112 : 	return(returnflag);

  03597	8b 45 f0	 mov	 eax, DWORD PTR _returnflag$[ebp]

; 1113 : }

  0359a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0359d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  035a4	8b e5		 mov	 esp, ebp
  035a6	5d		 pop	 ebp
  035a7	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L202556:
  001c0	8b 45 d8	 mov	 eax, DWORD PTR $T202553[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c9	59		 pop	 ecx
  001ca	c3		 ret	 0
$L202557:
  001cb	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$198759[ebp]
  001ce	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z:
  001d3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202559
  001d8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ENDP		; BCMenu::AppendODMenuW
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.h
;	COMDAT ??0BCMenuData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BCMenuData@@QAE@XZ PROC NEAR				; BCMenuData::BCMenuData, COMDAT
; _this$ = ecx

; 41   : 	BCMenuData () {menuIconNormal=-1;xoffset=-1;bitmap=NULL;pContext=NULL;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 42   : 	nFlags=0;nID=0;syncflag=0;m_szMenuText=NULL;global_offset=-1;};

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	c7 42 08 ff ff
	ff ff		 mov	 DWORD PTR [edx+8], -1
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??0BCMenuData@@QAE@XZ ENDP				; BCMenuData::BCMenuData
_TEXT	ENDS
PUBLIC	?AppendODMenuA@BCMenu@@QAEHPBDIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuA
PUBLIC	?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202566 = -20						; size = 4
$T202565 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendODMenuA@BCMenu@@QAEHPBDIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendODMenuA
; _this$ = ecx

; 1117 : {

  035b0	55		 push	 ebp
  035b1	8b ec		 mov	 ebp, esp
  035b3	83 ec 18	 sub	 esp, 24			; 00000018H
  035b6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1118 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  035b9	6a 00		 push	 0
  035bb	6a 00		 push	 0
  035bd	6a ff		 push	 -1
  035bf	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  035c2	50		 push	 eax
  035c3	6a 00		 push	 0
  035c5	6a 00		 push	 0
  035c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  035cd	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1119 : 	wchar_t* wszUtf8 = new wchar_t[len];

  035d0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  035d3	d1 e1		 shl	 ecx, 1
  035d5	51		 push	 ecx
  035d6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  035db	83 c4 04	 add	 esp, 4
  035de	89 45 f0	 mov	 DWORD PTR $T202565[ebp], eax
  035e1	8b 55 f0	 mov	 edx, DWORD PTR $T202565[ebp]
  035e4	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1120 : 	memset(wszUtf8, 0, len * 2);

  035e7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  035ea	d1 e0		 shl	 eax, 1
  035ec	50		 push	 eax
  035ed	6a 00		 push	 0
  035ef	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  035f2	51		 push	 ecx
  035f3	e8 00 00 00 00	 call	 _memset
  035f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  035fb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  035fe	52		 push	 edx
  035ff	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03602	50		 push	 eax
  03603	6a ff		 push	 -1
  03605	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03608	51		 push	 ecx
  03609	6a 00		 push	 0
  0360b	6a 00		 push	 0
  0360d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1122 : 
; 1123 : 
; 1124 : 	BOOL bRet = AppendODMenuW( wszUtf8,nFlags,nID,il,xoffset);

  03613	8b 55 18	 mov	 edx, DWORD PTR _xoffset$[ebp]
  03616	52		 push	 edx
  03617	8b 45 14	 mov	 eax, DWORD PTR _il$[ebp]
  0361a	50		 push	 eax
  0361b	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  0361e	51		 push	 ecx
  0361f	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03622	52		 push	 edx
  03623	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03626	50		 push	 eax
  03627	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0362a	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
  0362f	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1125 : 	delete[] wszUtf8;

  03632	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03635	89 4d ec	 mov	 DWORD PTR $T202566[ebp], ecx
  03638	8b 55 ec	 mov	 edx, DWORD PTR $T202566[ebp]
  0363b	52		 push	 edx
  0363c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  03641	83 c4 04	 add	 esp, 4

; 1126 : 
; 1127 : 	return bRet;

  03644	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1128 : }

  03647	8b e5		 mov	 esp, ebp
  03649	5d		 pop	 ebp
  0364a	c2 14 00	 ret	 20			; 00000014H
?AppendODMenuA@BCMenu@@QAEHPBDIIPAVCImageList@@H@Z ENDP	; BCMenu::AppendODMenuA
_TEXT	ENDS
PUBLIC	?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z ; BCMenu::ImageListDuplicate
xdata$x	SEGMENT
$T202581 DD	0ffffffffH
	DD	FLAT:$L202576
	DD	0ffffffffH
	DD	FLAT:$L202577
$T202579 DD	019930520H
	DD	02H
	DD	FLAT:$T202581
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv137 = -44						; size = 4
tv84 = -40						; size = 4
_this$ = -36						; size = 4
$T202573 = -32						; size = 4
$T202572 = -28						; size = 4
$T202569 = -24						; size = 4
$T202568 = -20						; size = 4
_mdata$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendODMenuW
; _this$ = ecx

; 1132 : {

  03650	55		 push	 ebp
  03651	8b ec		 mov	 ebp, esp
  03653	6a ff		 push	 -1
  03655	68 00 00 00 00	 push	 __ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z
  0365a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03660	50		 push	 eax
  03661	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03668	83 ec 20	 sub	 esp, 32			; 00000020H
  0366b	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1133 : 	// Add the MF_OWNERDRAW flag if not specified:
; 1134 : 	if(!nID){

  0366e	83 7d 10 00	 cmp	 DWORD PTR _nID$[ebp], 0
  03672	75 1c		 jne	 SHORT $L198790

; 1135 : 		if(nFlags&MF_BYPOSITION)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  03674	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03677	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0367c	74 09		 je	 SHORT $L198791
  0367e	c7 45 0c 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1136 : 		else nFlags=MF_SEPARATOR|MF_OWNERDRAW;

  03685	eb 07		 jmp	 SHORT $L198792
$L198791:
  03687	c7 45 0c 00 09
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 2304 ; 00000900H
$L198792:

; 1137 : 	}
; 1138 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  0368e	eb 17		 jmp	 SHORT $L198793
$L198790:
  03690	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  03693	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  03699	75 0c		 jne	 SHORT $L198793
  0369b	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  0369e	81 ca 00 01 00
	00		 or	 edx, 256		; 00000100H
  036a4	89 55 0c	 mov	 DWORD PTR _nFlags$[ebp], edx
$L198793:

; 1139 : 	
; 1140 : 	if(nFlags & MF_POPUP){

  036a7	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  036aa	83 e0 10	 and	 eax, 16			; 00000010H
  036ad	74 1d		 je	 SHORT $L198795

; 1141 : 		m_AllSubMenus.Add((HMENU)nID);

  036af	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  036b2	51		 push	 ecx
  036b3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  036b8	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1142 : 		m_SubMenus.Add((HMENU)nID);

  036bd	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  036c0	52		 push	 edx
  036c1	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  036c4	83 c1 1c	 add	 ecx, 28			; 0000001cH
  036c7	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L198795:

; 1143 : 	}
; 1144 : 	
; 1145 : 	BCMenuData *mdata = new BCMenuData;

  036cc	6a 24		 push	 36			; 00000024H
  036ce	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  036d3	83 c4 04	 add	 esp, 4
  036d6	89 45 e8	 mov	 DWORD PTR $T202569[ebp], eax
  036d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  036e0	83 7d e8 00	 cmp	 DWORD PTR $T202569[ebp], 0
  036e4	74 0d		 je	 SHORT $L202570
  036e6	8b 4d e8	 mov	 ecx, DWORD PTR $T202569[ebp]
  036e9	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  036ee	89 45 d8	 mov	 DWORD PTR tv84[ebp], eax
  036f1	eb 07		 jmp	 SHORT $L202571
$L202570:
  036f3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L202571:
  036fa	8b 45 d8	 mov	 eax, DWORD PTR tv84[ebp]
  036fd	89 45 ec	 mov	 DWORD PTR $T202568[ebp], eax
  03700	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03707	8b 4d ec	 mov	 ecx, DWORD PTR $T202568[ebp]
  0370a	89 4d f0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1146 : 	m_MenuList.Add(mdata);

  0370d	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  03710	52		 push	 edx
  03711	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03714	83 c1 08	 add	 ecx, 8
  03717	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add

; 1147 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  0371c	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0371f	50		 push	 eax
  03720	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03723	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1148 : 	
; 1149 : 	if(il){

  03728	83 7d 14 00	 cmp	 DWORD PTR _il$[ebp], 0
  0372c	0f 84 84 00 00
	00		 je	 $L198803

; 1150 : 		mdata->menuIconNormal = 0;

  03732	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03735	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 1151 : 		mdata->xoffset=0;

  0373c	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0373f	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1152 : 		if(mdata->bitmap)mdata->bitmap->DeleteImageList();

  03746	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  03749	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0374d	74 0d		 je	 SHORT $L198804
  0374f	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03752	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  03755	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1153 : 		else mdata->bitmap=new(CImageList);

  0375a	eb 41		 jmp	 SHORT $L198805
$L198804:
  0375c	6a 08		 push	 8
  0375e	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03763	89 45 e0	 mov	 DWORD PTR $T202573[ebp], eax
  03766	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0376d	83 7d e0 00	 cmp	 DWORD PTR $T202573[ebp], 0
  03771	74 0d		 je	 SHORT $L202574
  03773	8b 4d e0	 mov	 ecx, DWORD PTR $T202573[ebp]
  03776	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0377b	89 45 d4	 mov	 DWORD PTR tv137[ebp], eax
  0377e	eb 07		 jmp	 SHORT $L202575
$L202574:
  03780	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$L202575:
  03787	8b 55 d4	 mov	 edx, DWORD PTR tv137[ebp]
  0378a	89 55 e4	 mov	 DWORD PTR $T202572[ebp], edx
  0378d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03794	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  03797	8b 4d e4	 mov	 ecx, DWORD PTR $T202572[ebp]
  0379a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$L198805:

; 1154 : 		ImageListDuplicate(il,xoffset,mdata->bitmap);

  0379d	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  037a0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  037a3	50		 push	 eax
  037a4	8b 4d 18	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  037a7	51		 push	 ecx
  037a8	8b 55 14	 mov	 edx, DWORD PTR _il$[ebp]
  037ab	52		 push	 edx
  037ac	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  037af	e8 00 00 00 00	 call	 ?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z ; BCMenu::ImageListDuplicate

; 1155 : 	}
; 1156 : 	else{

  037b4	eb 14		 jmp	 SHORT $L198810
$L198803:

; 1157 : 		mdata->menuIconNormal = -1;

  037b6	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  037b9	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 1158 : 		mdata->xoffset = -1;

  037c0	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  037c3	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
$L198810:

; 1159 : 	}
; 1160 : 	mdata->nFlags = nFlags;

  037ca	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  037cd	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  037d0	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1161 : 	mdata->nID = nID;

  037d3	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  037d6	8b 55 10	 mov	 edx, DWORD PTR _nID$[ebp]
  037d9	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1162 : 	return(CMenu::AppendMenu(nFlags, nID, (LPCTSTR)mdata));

  037dc	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  037df	50		 push	 eax
  037e0	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  037e3	51		 push	 ecx
  037e4	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  037e7	52		 push	 edx
  037e8	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  037eb	e8 00 00 00 00	 call	 ?AppendMenuA@CMenu@@QAEHIIPBD@Z ; CMenu::AppendMenuA

; 1163 : }

  037f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  037f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  037fa	8b e5		 mov	 esp, ebp
  037fc	5d		 pop	 ebp
  037fd	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L202576:
  001dd	8b 45 e8	 mov	 eax, DWORD PTR $T202569[ebp]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e6	59		 pop	 ecx
  001e7	c3		 ret	 0
$L202577:
  001e8	8b 45 e0	 mov	 eax, DWORD PTR $T202573[ebp]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001f1	c3		 ret	 0
__ehhandler$?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z:
  001f2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202579
  001f7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ENDP ; BCMenu::AppendODMenuW
PUBLIC	?InsertODMenuA@BCMenu@@QAEHIPBDIIH@Z		; BCMenu::InsertODMenuA
PUBLIC	?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z		; BCMenu::InsertODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202584 = -20						; size = 4
$T202583 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_nIconNormal$ = 24					; size = 4
?InsertODMenuA@BCMenu@@QAEHIPBDIIH@Z PROC NEAR		; BCMenu::InsertODMenuA
; _this$ = ecx

; 1167 : {

  03800	55		 push	 ebp
  03801	8b ec		 mov	 ebp, esp
  03803	83 ec 18	 sub	 esp, 24			; 00000018H
  03806	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1168 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  03809	6a 00		 push	 0
  0380b	6a 00		 push	 0
  0380d	6a ff		 push	 -1
  0380f	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  03812	50		 push	 eax
  03813	6a 00		 push	 0
  03815	6a 00		 push	 0
  03817	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0381d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1169 : 	wchar_t* wszUtf8 = new wchar_t[len];

  03820	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  03823	d1 e1		 shl	 ecx, 1
  03825	51		 push	 ecx
  03826	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0382b	83 c4 04	 add	 esp, 4
  0382e	89 45 f0	 mov	 DWORD PTR $T202583[ebp], eax
  03831	8b 55 f0	 mov	 edx, DWORD PTR $T202583[ebp]
  03834	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1170 : 	memset(wszUtf8, 0, len * 2);

  03837	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0383a	d1 e0		 shl	 eax, 1
  0383c	50		 push	 eax
  0383d	6a 00		 push	 0
  0383f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03842	51		 push	 ecx
  03843	e8 00 00 00 00	 call	 _memset
  03848	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1171 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0384b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0384e	52		 push	 edx
  0384f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03852	50		 push	 eax
  03853	6a ff		 push	 -1
  03855	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03858	51		 push	 ecx
  03859	6a 00		 push	 0
  0385b	6a 00		 push	 0
  0385d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1172 : 
; 1173 : 
; 1174 : 	BOOL bRet = InsertODMenuW(nPosition,wszUtf8,nFlags,nID,nIconNormal);

  03863	8b 55 18	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  03866	52		 push	 edx
  03867	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  0386a	50		 push	 eax
  0386b	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  0386e	51		 push	 ecx
  0386f	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  03872	52		 push	 edx
  03873	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  03876	50		 push	 eax
  03877	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0387a	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ; BCMenu::InsertODMenuW
  0387f	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1175 : 	delete[] wszUtf8;

  03882	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03885	89 4d ec	 mov	 DWORD PTR $T202584[ebp], ecx
  03888	8b 55 ec	 mov	 edx, DWORD PTR $T202584[ebp]
  0388b	52		 push	 edx
  0388c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  03891	83 c4 04	 add	 esp, 4

; 1176 : 
; 1177 : 	return bRet;

  03894	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1178 : }

  03897	8b e5		 mov	 esp, ebp
  03899	5d		 pop	 ebp
  0389a	c2 14 00	 ret	 20			; 00000014H
?InsertODMenuA@BCMenu@@QAEHIPBDIIH@Z ENDP		; BCMenu::InsertODMenuA
_TEXT	ENDS
PUBLIC	?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z		; BCMenu::FindMenuOption
PUBLIC	?GetMenuStart@BCMenu@@IAEHXZ			; BCMenu::GetMenuStart
PUBLIC	?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt
PUBLIC	?GetMenuItemCount@CMenu@@QBEIXZ			; CMenu::GetMenuItemCount
PUBLIC	?InsertMenuA@CMenu@@QAEHIIIPBD@Z		; CMenu::InsertMenuA
xdata$x	SEGMENT
$T202595 DD	0ffffffffH
	DD	FLAT:$L202590
	DD	0ffffffffH
	DD	FLAT:$L202591
$T202593 DD	019930520H
	DD	02H
	DD	FLAT:$T202595
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv137 = -60						; size = 4
_this$ = -56						; size = 4
$T202587 = -52						; size = 4
$T202586 = -48						; size = 4
_bitmap$198858 = -44					; size = 8
_xoffset$198859 = -36					; size = 4
_iPosition$198836 = -32					; size = 4
_pMenu$198837 = -28					; size = 4
_menustart$ = -24					; size = 4
_mdata$ = -20						; size = 4
_returnflag$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_nIconNormal$ = 24					; size = 4
?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z PROC NEAR		; BCMenu::InsertODMenuW
; _this$ = ecx

; 1183 : {

  038a0	55		 push	 ebp
  038a1	8b ec		 mov	 ebp, esp
  038a3	6a ff		 push	 -1
  038a5	68 00 00 00 00	 push	 __ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z
  038aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  038b0	50		 push	 eax
  038b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  038b8	83 ec 30	 sub	 esp, 48			; 00000030H
  038bb	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 1184 : 	if(!(nFlags & MF_BYPOSITION)){

  038be	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  038c1	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  038c6	75 4e		 jne	 SHORT $L198835

; 1185 : 		int iPosition =0;

  038c8	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iPosition$198836[ebp], 0

; 1186 : 		BCMenu* pMenu = FindMenuOption(nPosition,iPosition);

  038cf	8d 4d e0	 lea	 ecx, DWORD PTR _iPosition$198836[ebp]
  038d2	51		 push	 ecx
  038d3	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  038d6	52		 push	 edx
  038d7	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  038da	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  038df	89 45 e4	 mov	 DWORD PTR _pMenu$198837[ebp], eax

; 1187 : 		if(pMenu){

  038e2	83 7d e4 00	 cmp	 DWORD PTR _pMenu$198837[ebp], 0
  038e6	74 27		 je	 SHORT $L198838

; 1188 : 			return(pMenu->InsertODMenuW(iPosition,lpstrText,nFlags|MF_BYPOSITION,nID,nIconNormal));

  038e8	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  038eb	50		 push	 eax
  038ec	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  038ef	51		 push	 ecx
  038f0	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  038f3	81 ca 00 04 00
	00		 or	 edx, 1024		; 00000400H
  038f9	52		 push	 edx
  038fa	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  038fd	50		 push	 eax
  038fe	8b 4d e0	 mov	 ecx, DWORD PTR _iPosition$198836[ebp]
  03901	51		 push	 ecx
  03902	8b 4d e4	 mov	 ecx, DWORD PTR _pMenu$198837[ebp]
  03905	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ; BCMenu::InsertODMenuW
  0390a	e9 06 02 00 00	 jmp	 $L198834
$L198838:

; 1189 : 		}
; 1190 : 		else return(FALSE);

  0390f	33 c0		 xor	 eax, eax
  03911	e9 ff 01 00 00	 jmp	 $L198834
$L198835:

; 1191 : 	}
; 1192 : 	
; 1193 : 	if(!nID)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  03916	83 7d 14 00	 cmp	 DWORD PTR _nID$[ebp], 0
  0391a	75 09		 jne	 SHORT $L198840
  0391c	c7 45 10 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1194 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  03923	eb 16		 jmp	 SHORT $L198841
$L198840:
  03925	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03928	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  0392e	75 0b		 jne	 SHORT $L198841
  03930	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03933	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  03938	89 45 10	 mov	 DWORD PTR _nFlags$[ebp], eax
$L198841:

; 1195 : 
; 1196 : 	int menustart=0;

  0393b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _menustart$[ebp], 0

; 1197 : 
; 1198 : 	if(nFlags & MF_POPUP){

  03942	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  03945	83 e1 10	 and	 ecx, 16			; 00000010H
  03948	74 40		 je	 SHORT $L198844

; 1199 : 		if(m_loadmenu){

  0394a	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0394d	83 7a 50 00	 cmp	 DWORD PTR [edx+80], 0
  03951	74 1a		 je	 SHORT $L198845

; 1200 : 			menustart=GetMenuStart();

  03953	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03956	e8 00 00 00 00	 call	 ?GetMenuStart@BCMenu@@IAEHXZ ; BCMenu::GetMenuStart
  0395b	89 45 e8	 mov	 DWORD PTR _menustart$[ebp], eax

; 1201 : 			if(nPosition<(UINT)menustart)menustart=0;

  0395e	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  03961	3b 45 e8	 cmp	 eax, DWORD PTR _menustart$[ebp]
  03964	73 07		 jae	 SHORT $L198845
  03966	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _menustart$[ebp], 0
$L198845:

; 1202 : 		}
; 1203 : 		m_AllSubMenus.Add((HMENU)nID);

  0396d	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  03970	51		 push	 ecx
  03971	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  03976	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1204 : 		m_SubMenus.Add((HMENU)nID);

  0397b	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  0397e	52		 push	 edx
  0397f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03982	83 c1 1c	 add	 ecx, 28			; 0000001cH
  03985	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L198844:

; 1205 : 	}
; 1206 : 
; 1207 : 	//Stephane Clog suggested adding this, believe it or not it's in the help 
; 1208 : 	if(nPosition==(UINT)-1)nPosition=GetMenuItemCount();

  0398a	83 7d 08 ff	 cmp	 DWORD PTR _nPosition$[ebp], -1
  0398e	75 0b		 jne	 SHORT $L198851
  03990	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03993	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  03998	89 45 08	 mov	 DWORD PTR _nPosition$[ebp], eax
$L198851:

; 1209 : 	
; 1210 : 	BCMenuData *mdata = new BCMenuData;

  0399b	6a 24		 push	 36			; 00000024H
  0399d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  039a2	83 c4 04	 add	 esp, 4
  039a5	89 45 cc	 mov	 DWORD PTR $T202587[ebp], eax
  039a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  039af	83 7d cc 00	 cmp	 DWORD PTR $T202587[ebp], 0
  039b3	74 0d		 je	 SHORT $L202588
  039b5	8b 4d cc	 mov	 ecx, DWORD PTR $T202587[ebp]
  039b8	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  039bd	89 45 c4	 mov	 DWORD PTR tv137[ebp], eax
  039c0	eb 07		 jmp	 SHORT $L202589
$L202588:
  039c2	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$L202589:
  039c9	8b 45 c4	 mov	 eax, DWORD PTR tv137[ebp]
  039cc	89 45 d0	 mov	 DWORD PTR $T202586[ebp], eax
  039cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  039d6	8b 4d d0	 mov	 ecx, DWORD PTR $T202586[ebp]
  039d9	89 4d ec	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1211 : 	m_MenuList.InsertAt(nPosition-menustart,mdata);

  039dc	6a 01		 push	 1
  039de	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  039e1	52		 push	 edx
  039e2	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  039e5	2b 45 e8	 sub	 eax, DWORD PTR _menustart$[ebp]
  039e8	50		 push	 eax
  039e9	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  039ec	83 c1 08	 add	 ecx, 8
  039ef	e8 00 00 00 00	 call	 ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt

; 1212 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  039f4	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  039f7	51		 push	 ecx
  039f8	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  039fb	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1213 : 	
; 1214 : 	mdata->menuIconNormal = nIconNormal;

  03a00	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  03a03	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  03a06	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 1215 : 	mdata->xoffset=-1;

  03a09	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03a0c	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 1216 : 	if(nIconNormal>=0){

  03a13	83 7d 18 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  03a17	0f 8c a5 00 00
	00		 jl	 $L198857

; 1217 : 		CImageList bitmap;

  03a1d	8d 4d d4	 lea	 ecx, DWORD PTR _bitmap$198858[ebp]
  03a20	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  03a25	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1218 : 		int xoffset=0;

  03a2c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _xoffset$198859[ebp], 0

; 1219 : 		LoadFromToolBar(nID,nIconNormal,xoffset);

  03a33	8d 55 dc	 lea	 edx, DWORD PTR _xoffset$198859[ebp]
  03a36	52		 push	 edx
  03a37	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  03a3a	50		 push	 eax
  03a3b	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  03a3e	51		 push	 ecx
  03a3f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03a42	e8 00 00 00 00	 call	 ?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ; BCMenu::LoadFromToolBar

; 1220 : 		if(mdata->bitmap){

  03a47	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  03a4a	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  03a4e	74 15		 je	 SHORT $L198860

; 1221 : 			mdata->bitmap->DeleteImageList();

  03a50	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  03a53	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  03a56	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1222 : 			mdata->bitmap=NULL;

  03a5b	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03a5e	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$L198860:

; 1223 : 		}
; 1224 : 		bitmap.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  03a65	6a 01		 push	 1
  03a67	6a 01		 push	 1
  03a69	68 ff 00 00 00	 push	 255			; 000000ffH
  03a6e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03a74	52		 push	 edx
  03a75	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03a7a	50		 push	 eax
  03a7b	8d 4d d4	 lea	 ecx, DWORD PTR _bitmap$198858[ebp]
  03a7e	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1225 : 		if(AddBitmapToImageList(&bitmap,nIconNormal)){

  03a83	8b 4d 18	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  03a86	51		 push	 ecx
  03a87	8d 55 d4	 lea	 edx, DWORD PTR _bitmap$198858[ebp]
  03a8a	52		 push	 edx
  03a8b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03a8e	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  03a93	85 c0		 test	 eax, eax
  03a95	74 1a		 je	 SHORT $L198861

; 1226 : 			mdata->global_offset = AddToGlobalImageList(&bitmap,xoffset,nID);

  03a97	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  03a9a	50		 push	 eax
  03a9b	8b 4d dc	 mov	 ecx, DWORD PTR _xoffset$198859[ebp]
  03a9e	51		 push	 ecx
  03a9f	8d 55 d4	 lea	 edx, DWORD PTR _bitmap$198858[ebp]
  03aa2	52		 push	 edx
  03aa3	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03aa6	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  03aab	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03aae	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L198861:

; 1227 : 		}
; 1228 : 	}

  03ab1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03ab8	8d 4d d4	 lea	 ecx, DWORD PTR _bitmap$198858[ebp]
  03abb	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList

; 1229 : 	else mdata->global_offset = GlobalImageListOffset(nID);

  03ac0	eb 12		 jmp	 SHORT $L198862
$L198857:
  03ac2	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  03ac5	52		 push	 edx
  03ac6	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03ac9	e8 00 00 00 00	 call	 ?GlobalImageListOffset@BCMenu@@IAEHH@Z ; BCMenu::GlobalImageListOffset
  03ace	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03ad1	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L198862:

; 1230 : 	mdata->nFlags = nFlags;

  03ad4	8b 55 ec	 mov	 edx, DWORD PTR _mdata$[ebp]
  03ad7	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03ada	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1231 : 	mdata->nID = nID;

  03add	8b 4d ec	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03ae0	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  03ae3	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1232 : 	BOOL returnflag=CMenu::InsertMenu(nPosition,nFlags,nID,(LPCTSTR)mdata);

  03ae6	8b 45 ec	 mov	 eax, DWORD PTR _mdata$[ebp]
  03ae9	50		 push	 eax
  03aea	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  03aed	51		 push	 ecx
  03aee	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03af1	52		 push	 edx
  03af2	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  03af5	50		 push	 eax
  03af6	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03af9	e8 00 00 00 00	 call	 ?InsertMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::InsertMenuA
  03afe	89 45 f0	 mov	 DWORD PTR _returnflag$[ebp], eax

; 1233 : 	if(m_loadmenu)RemoveTopLevelOwnerDraw();

  03b01	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03b04	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  03b08	74 08		 je	 SHORT $L198865
  03b0a	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  03b0d	e8 00 00 00 00	 call	 ?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ ; BCMenu::RemoveTopLevelOwnerDraw
$L198865:

; 1234 : 	return(returnflag);

  03b12	8b 45 f0	 mov	 eax, DWORD PTR _returnflag$[ebp]
$L198834:

; 1235 : }

  03b15	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03b18	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03b1f	8b e5		 mov	 esp, ebp
  03b21	5d		 pop	 ebp
  03b22	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L202590:
  001fc	8b 45 cc	 mov	 eax, DWORD PTR $T202587[ebp]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00205	59		 pop	 ecx
  00206	c3		 ret	 0
$L202591:
  00207	8d 4d d4	 lea	 ecx, DWORD PTR _bitmap$198858[ebp]
  0020a	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z:
  0020f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202593
  00214	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ENDP		; BCMenu::InsertODMenuW
PUBLIC	?InsertODMenuA@BCMenu@@QAEHIPBDIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuA
PUBLIC	?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202598 = -20						; size = 4
$T202597 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertODMenuA@BCMenu@@QAEHIPBDIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertODMenuA
; _this$ = ecx

; 1239 : {

  03b30	55		 push	 ebp
  03b31	8b ec		 mov	 ebp, esp
  03b33	83 ec 18	 sub	 esp, 24			; 00000018H
  03b36	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1240 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  03b39	6a 00		 push	 0
  03b3b	6a 00		 push	 0
  03b3d	6a ff		 push	 -1
  03b3f	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  03b42	50		 push	 eax
  03b43	6a 00		 push	 0
  03b45	6a 00		 push	 0
  03b47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  03b4d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1241 : 	wchar_t* wszUtf8 = new wchar_t[len];

  03b50	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  03b53	d1 e1		 shl	 ecx, 1
  03b55	51		 push	 ecx
  03b56	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  03b5b	83 c4 04	 add	 esp, 4
  03b5e	89 45 f0	 mov	 DWORD PTR $T202597[ebp], eax
  03b61	8b 55 f0	 mov	 edx, DWORD PTR $T202597[ebp]
  03b64	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1242 : 	memset(wszUtf8, 0, len * 2);

  03b67	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  03b6a	d1 e0		 shl	 eax, 1
  03b6c	50		 push	 eax
  03b6d	6a 00		 push	 0
  03b6f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03b72	51		 push	 ecx
  03b73	e8 00 00 00 00	 call	 _memset
  03b78	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1243 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  03b7b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  03b7e	52		 push	 edx
  03b7f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03b82	50		 push	 eax
  03b83	6a ff		 push	 -1
  03b85	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03b88	51		 push	 ecx
  03b89	6a 00		 push	 0
  03b8b	6a 00		 push	 0
  03b8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1244 : 
; 1245 : 	BOOL bRet = InsertODMenuW(nPosition,wszUtf8,nFlags,nID,il,xoffset);

  03b93	8b 55 1c	 mov	 edx, DWORD PTR _xoffset$[ebp]
  03b96	52		 push	 edx
  03b97	8b 45 18	 mov	 eax, DWORD PTR _il$[ebp]
  03b9a	50		 push	 eax
  03b9b	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  03b9e	51		 push	 ecx
  03b9f	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03ba2	52		 push	 edx
  03ba3	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03ba6	50		 push	 eax
  03ba7	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  03baa	51		 push	 ecx
  03bab	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  03bae	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
  03bb3	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1246 : 	delete[] wszUtf8;

  03bb6	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  03bb9	89 55 ec	 mov	 DWORD PTR $T202598[ebp], edx
  03bbc	8b 45 ec	 mov	 eax, DWORD PTR $T202598[ebp]
  03bbf	50		 push	 eax
  03bc0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  03bc5	83 c4 04	 add	 esp, 4

; 1247 : 
; 1248 : 	return bRet;

  03bc8	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1249 : }

  03bcb	8b e5		 mov	 esp, ebp
  03bcd	5d		 pop	 ebp
  03bce	c2 18 00	 ret	 24			; 00000018H
?InsertODMenuA@BCMenu@@QAEHIPBDIIPAVCImageList@@H@Z ENDP ; BCMenu::InsertODMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T202608 DD	0ffffffffH
	DD	FLAT:$L202604
$T202606 DD	019930520H
	DD	01H
	DD	FLAT:$T202608
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv133 = -40						; size = 4
_this$ = -36						; size = 4
$T202601 = -32						; size = 4
$T202600 = -28						; size = 4
_iPosition$198892 = -24					; size = 4
_pMenu$198893 = -20					; size = 4
_mdata$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nPosition$ = 8						; size = 4
_lpstrText$ = 12					; size = 4
_nFlags$ = 16						; size = 4
_nID$ = 20						; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertODMenuW
; _this$ = ecx

; 1253 : {

  03be0	55		 push	 ebp
  03be1	8b ec		 mov	 ebp, esp
  03be3	6a ff		 push	 -1
  03be5	68 00 00 00 00	 push	 __ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z
  03bea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03bf0	50		 push	 eax
  03bf1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03bf8	83 ec 1c	 sub	 esp, 28			; 0000001cH
  03bfb	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1254 : 	if(!(nFlags & MF_BYPOSITION)){

  03bfe	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03c01	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  03c06	75 51		 jne	 SHORT $L198891

; 1255 : 		int iPosition =0;

  03c08	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iPosition$198892[ebp], 0

; 1256 : 		BCMenu* pMenu = FindMenuOption(nPosition,iPosition);

  03c0f	8d 4d e8	 lea	 ecx, DWORD PTR _iPosition$198892[ebp]
  03c12	51		 push	 ecx
  03c13	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  03c16	52		 push	 edx
  03c17	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c1a	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  03c1f	89 45 ec	 mov	 DWORD PTR _pMenu$198893[ebp], eax

; 1257 : 		if(pMenu){

  03c22	83 7d ec 00	 cmp	 DWORD PTR _pMenu$198893[ebp], 0
  03c26	74 2a		 je	 SHORT $L198894

; 1258 : 			return(pMenu->InsertODMenuW(iPosition,lpstrText,nFlags|MF_BYPOSITION,nID,il,xoffset));

  03c28	8b 45 1c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  03c2b	50		 push	 eax
  03c2c	8b 4d 18	 mov	 ecx, DWORD PTR _il$[ebp]
  03c2f	51		 push	 ecx
  03c30	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  03c33	52		 push	 edx
  03c34	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03c37	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  03c3c	50		 push	 eax
  03c3d	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03c40	51		 push	 ecx
  03c41	8b 55 e8	 mov	 edx, DWORD PTR _iPosition$198892[ebp]
  03c44	52		 push	 edx
  03c45	8b 4d ec	 mov	 ecx, DWORD PTR _pMenu$198893[ebp]
  03c48	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
  03c4d	e9 40 01 00 00	 jmp	 $L198890
$L198894:

; 1259 : 		}
; 1260 : 		else return(FALSE);

  03c52	33 c0		 xor	 eax, eax
  03c54	e9 39 01 00 00	 jmp	 $L198890
$L198891:

; 1261 : 	}
; 1262 : 	
; 1263 : 	if(!nID)nFlags=MF_SEPARATOR|MF_OWNERDRAW|MF_BYPOSITION;

  03c59	83 7d 14 00	 cmp	 DWORD PTR _nID$[ebp], 0
  03c5d	75 09		 jne	 SHORT $L198896
  03c5f	c7 45 10 00 0d
	00 00		 mov	 DWORD PTR _nFlags$[ebp], 3328 ; 00000d00H

; 1264 : 	else if(!(nFlags & MF_OWNERDRAW))nFlags |= MF_OWNERDRAW;

  03c66	eb 16		 jmp	 SHORT $L198897
$L198896:
  03c68	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03c6b	25 00 01 00 00	 and	 eax, 256		; 00000100H
  03c70	75 0c		 jne	 SHORT $L198897
  03c72	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  03c75	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  03c7b	89 4d 10	 mov	 DWORD PTR _nFlags$[ebp], ecx
$L198897:

; 1265 : 	
; 1266 : 	if(nFlags & MF_POPUP){

  03c7e	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03c81	83 e2 10	 and	 edx, 16			; 00000010H
  03c84	74 1d		 je	 SHORT $L198899

; 1267 : 		m_AllSubMenus.Add((HMENU)nID);

  03c86	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  03c89	50		 push	 eax
  03c8a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  03c8f	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add

; 1268 : 		m_SubMenus.Add((HMENU)nID);

  03c94	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  03c97	51		 push	 ecx
  03c98	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03c9b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  03c9e	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
$L198899:

; 1269 : 	}
; 1270 : 	
; 1271 : 	//Stephane Clog suggested adding this, believe it or not it's in the help 
; 1272 : 	if(nPosition==(UINT)-1)nPosition=GetMenuItemCount();

  03ca3	83 7d 08 ff	 cmp	 DWORD PTR _nPosition$[ebp], -1
  03ca7	75 0b		 jne	 SHORT $L198903
  03ca9	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03cac	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  03cb1	89 45 08	 mov	 DWORD PTR _nPosition$[ebp], eax
$L198903:

; 1273 : 	
; 1274 : 	BCMenuData *mdata = new BCMenuData;

  03cb4	6a 24		 push	 36			; 00000024H
  03cb6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  03cbb	83 c4 04	 add	 esp, 4
  03cbe	89 45 e0	 mov	 DWORD PTR $T202601[ebp], eax
  03cc1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  03cc8	83 7d e0 00	 cmp	 DWORD PTR $T202601[ebp], 0
  03ccc	74 0d		 je	 SHORT $L202602
  03cce	8b 4d e0	 mov	 ecx, DWORD PTR $T202601[ebp]
  03cd1	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  03cd6	89 45 d8	 mov	 DWORD PTR tv133[ebp], eax
  03cd9	eb 07		 jmp	 SHORT $L202603
$L202602:
  03cdb	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L202603:
  03ce2	8b 55 d8	 mov	 edx, DWORD PTR tv133[ebp]
  03ce5	89 55 e4	 mov	 DWORD PTR $T202600[ebp], edx
  03ce8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03cef	8b 45 e4	 mov	 eax, DWORD PTR $T202600[ebp]
  03cf2	89 45 f0	 mov	 DWORD PTR _mdata$[ebp], eax

; 1275 : 	m_MenuList.InsertAt(nPosition,mdata);

  03cf5	6a 01		 push	 1
  03cf7	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03cfa	51		 push	 ecx
  03cfb	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  03cfe	52		 push	 edx
  03cff	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d02	83 c1 08	 add	 ecx, 8
  03d05	e8 00 00 00 00	 call	 ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt

; 1276 : 	mdata->SetWideString(lpstrText);    //SK: modified for dynamic allocation

  03d0a	8b 45 0c	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  03d0d	50		 push	 eax
  03d0e	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03d11	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString

; 1277 : 	
; 1278 : 	mdata->menuIconNormal = -1;

  03d16	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03d19	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 1279 : 	mdata->xoffset = -1;

  03d20	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  03d23	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1280 : 
; 1281 : 	if(il){

  03d2a	83 7d 18 00	 cmp	 DWORD PTR _il$[ebp], 0
  03d2e	74 38		 je	 SHORT $L198909

; 1282 : 		if(mdata->bitmap){

  03d30	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  03d33	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  03d37	74 15		 je	 SHORT $L198910

; 1283 : 			mdata->bitmap->DeleteImageList();

  03d39	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03d3c	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  03d3f	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1284 : 			mdata->bitmap=NULL;

  03d44	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  03d47	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0
$L198910:

; 1285 : 		}
; 1286 : 		mdata->global_offset = AddToGlobalImageList(il,xoffset,nID);

  03d4e	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  03d51	50		 push	 eax
  03d52	8b 4d 1c	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  03d55	51		 push	 ecx
  03d56	8b 55 18	 mov	 edx, DWORD PTR _il$[ebp]
  03d59	52		 push	 edx
  03d5a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d5d	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  03d62	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03d65	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L198909:

; 1287 : 	}
; 1288 : 	mdata->nFlags = nFlags;

  03d68	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  03d6b	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  03d6e	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1289 : 	mdata->nID = nID;

  03d71	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03d74	8b 55 14	 mov	 edx, DWORD PTR _nID$[ebp]
  03d77	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1290 : 	return(CMenu::InsertMenu(nPosition,nFlags,nID,(LPCTSTR)mdata));

  03d7a	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  03d7d	50		 push	 eax
  03d7e	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  03d81	51		 push	 ecx
  03d82	8b 55 10	 mov	 edx, DWORD PTR _nFlags$[ebp]
  03d85	52		 push	 edx
  03d86	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  03d89	50		 push	 eax
  03d8a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03d8d	e8 00 00 00 00	 call	 ?InsertMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::InsertMenuA
$L198890:

; 1291 : }

  03d92	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03d95	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03d9c	8b e5		 mov	 esp, ebp
  03d9e	5d		 pop	 ebp
  03d9f	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
text$x	SEGMENT
$L202604:
  00219	8b 45 e0	 mov	 eax, DWORD PTR $T202601[ebp]
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00222	59		 pop	 ecx
  00223	c3		 ret	 0
__ehhandler$?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z:
  00224	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202606
  00229	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ENDP ; BCMenu::InsertODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIH@Z		; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z		; BCMenu::ModifyODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202611 = -20						; size = 4
$T202610 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIH@Z PROC NEAR		; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1294 : {

  03db0	55		 push	 ebp
  03db1	8b ec		 mov	 ebp, esp
  03db3	83 ec 18	 sub	 esp, 24			; 00000018H
  03db6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1295 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  03db9	6a 00		 push	 0
  03dbb	6a 00		 push	 0
  03dbd	6a ff		 push	 -1
  03dbf	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  03dc2	50		 push	 eax
  03dc3	6a 00		 push	 0
  03dc5	6a 00		 push	 0
  03dc7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  03dcd	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1296 : 	wchar_t* wszUtf8 = new wchar_t[len];

  03dd0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  03dd3	d1 e1		 shl	 ecx, 1
  03dd5	51		 push	 ecx
  03dd6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  03ddb	83 c4 04	 add	 esp, 4
  03dde	89 45 f0	 mov	 DWORD PTR $T202610[ebp], eax
  03de1	8b 55 f0	 mov	 edx, DWORD PTR $T202610[ebp]
  03de4	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1297 : 	memset(wszUtf8, 0, len * 2);

  03de7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  03dea	d1 e0		 shl	 eax, 1
  03dec	50		 push	 eax
  03ded	6a 00		 push	 0
  03def	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03df2	51		 push	 ecx
  03df3	e8 00 00 00 00	 call	 _memset
  03df8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1298 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  03dfb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  03dfe	52		 push	 edx
  03dff	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  03e02	50		 push	 eax
  03e03	6a ff		 push	 -1
  03e05	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  03e08	51		 push	 ecx
  03e09	6a 00		 push	 0
  03e0b	6a 00		 push	 0
  03e0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1299 : 
; 1300 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,nIconNormal);//SK: see MFC Tech Note 059

  03e13	8b 55 10	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  03e16	52		 push	 edx
  03e17	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  03e1a	50		 push	 eax
  03e1b	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  03e1e	51		 push	 ecx
  03e1f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  03e22	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z ; BCMenu::ModifyODMenuW
  03e27	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1301 : 	delete[] wszUtf8;

  03e2a	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  03e2d	89 55 ec	 mov	 DWORD PTR $T202611[ebp], edx
  03e30	8b 45 ec	 mov	 eax, DWORD PTR $T202611[ebp]
  03e33	50		 push	 eax
  03e34	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  03e39	83 c4 04	 add	 esp, 4

; 1302 : 	return bRet;

  03e3c	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1303 : }

  03e3f	8b e5		 mov	 esp, ebp
  03e41	5d		 pop	 ebp
  03e42	c2 0c 00	 ret	 12			; 0000000cH
?ModifyODMenuA@BCMenu@@QAEHPBDIH@Z ENDP			; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	?SetMenuItemBkColor@BCMenu@@QAEXK@Z		; BCMenu::SetMenuItemBkColor
PUBLIC	?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z	; BCMenu::SetMenuItemBitmapBkColor
PUBLIC	?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
PUBLIC	??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ		; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
PUBLIC	??0?$CArray@HAAH@@QAE@XZ			; CArray<int,int &>::CArray<int,int &>
PUBLIC	?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::Add
PUBLIC	??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ		; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
PUBLIC	?Add@?$CArray@HAAH@@QAEHAAH@Z			; CArray<int,int &>::Add
PUBLIC	??1?$CArray@HAAH@@UAE@XZ			; CArray<int,int &>::~CArray<int,int &>
PUBLIC	?ModifyMenuA@CMenu@@QAEHIIIPBD@Z		; CMenu::ModifyMenuA
xdata$x	SEGMENT
$T202625 DD	0ffffffffH
	DD	FLAT:$L202618
	DD	00H
	DD	FLAT:$L202619
	DD	01H
	DD	FLAT:$L202620
	DD	01H
	DD	FLAT:$L202621
$T202623 DD	019930520H
	DD	04H
	DD	FLAT:$T202625
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv93 = -96						; size = 4
_this$ = -92						; size = 4
$T202617 = -88						; size = 4
$T202614 = -84						; size = 4
$T202613 = -80						; size = 4
_bitmap$199010 = -76					; size = 8
_xoffset$199011 = -68					; size = 4
_psubmenu$ = -64					; size = 4
_bcsubs$ = -60						; size = 20
_bclocs$ = -40						; size = 20
_nLoc$ = -20						; size = 4
_mdata$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z PROC NEAR		; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1306 : {

  03e50	55		 push	 ebp
  03e51	8b ec		 mov	 ebp, esp
  03e53	6a ff		 push	 -1
  03e55	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z
  03e5a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03e60	50		 push	 eax
  03e61	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03e68	83 ec 54	 sub	 esp, 84			; 00000054H
  03e6b	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx

; 1307 : 	int nLoc;
; 1308 : 	BCMenuData *mdata;
; 1309 : 	CArray<BCMenu*,BCMenu*>bcsubs;

  03e6e	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  03e71	e8 00 00 00 00	 call	 ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ ; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
  03e76	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1310 : 	CArray<int,int&>bclocs;

  03e7d	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  03e80	e8 00 00 00 00	 call	 ??0?$CArray@HAAH@@QAE@XZ ; CArray<int,int &>::CArray<int,int &>
  03e85	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1311 : 	
; 1312 : 	// Find the old BCMenuData structure:
; 1313 : 	BCMenu *psubmenu = FindMenuOption(nID,nLoc);

  03e89	8d 45 ec	 lea	 eax, DWORD PTR _nLoc$[ebp]
  03e8c	50		 push	 eax
  03e8d	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  03e90	51		 push	 ecx
  03e91	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03e94	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  03e99	89 45 c0	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1314 : 
; 1315 : //added by vito--
; 1316 : 	psubmenu->SetMenuItemBkColor( m_menuItemBkColor );

  03e9c	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  03e9f	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  03ea2	50		 push	 eax
  03ea3	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  03ea6	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 1317 : 	psubmenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  03eab	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03eae	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  03eb1	52		 push	 edx
  03eb2	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  03eb5	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor
$L198998:

; 1318 : //--
; 1319 : 
; 1320 : 	do{
; 1321 : 		if(psubmenu && nLoc>=0)mdata = psubmenu->m_MenuList[nLoc];

  03eba	83 7d c0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  03ebe	74 1c		 je	 SHORT $L199001
  03ec0	83 7d ec 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  03ec4	7c 16		 jl	 SHORT $L199001
  03ec6	8b 45 ec	 mov	 eax, DWORD PTR _nLoc$[ebp]
  03ec9	50		 push	 eax
  03eca	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  03ecd	83 c1 08	 add	 ecx, 8
  03ed0	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  03ed5	8b 08		 mov	 ecx, DWORD PTR [eax]
  03ed7	89 4d f0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1322 : 		else{

  03eda	eb 4a		 jmp	 SHORT $L199002
$L199001:

; 1323 : 			// Create a new BCMenuData structure:
; 1324 : 			mdata = new BCMenuData;

  03edc	6a 24		 push	 36			; 00000024H
  03ede	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  03ee3	83 c4 04	 add	 esp, 4
  03ee6	89 45 ac	 mov	 DWORD PTR $T202614[ebp], eax
  03ee9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  03eed	83 7d ac 00	 cmp	 DWORD PTR $T202614[ebp], 0
  03ef1	74 0d		 je	 SHORT $L202615
  03ef3	8b 4d ac	 mov	 ecx, DWORD PTR $T202614[ebp]
  03ef6	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  03efb	89 45 a0	 mov	 DWORD PTR tv93[ebp], eax
  03efe	eb 07		 jmp	 SHORT $L202616
$L202615:
  03f00	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$L202616:
  03f07	8b 55 a0	 mov	 edx, DWORD PTR tv93[ebp]
  03f0a	89 55 b0	 mov	 DWORD PTR $T202613[ebp], edx
  03f0d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  03f11	8b 45 b0	 mov	 eax, DWORD PTR $T202613[ebp]
  03f14	89 45 f0	 mov	 DWORD PTR _mdata$[ebp], eax

; 1325 : 			m_MenuList.Add(mdata);

  03f17	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03f1a	51		 push	 ecx
  03f1b	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03f1e	83 c1 08	 add	 ecx, 8
  03f21	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L199002:

; 1326 : 		}
; 1327 : 		
; 1328 : 		ASSERT(mdata);
; 1329 : 		if(lpstrText)

  03f26	83 7d 08 00	 cmp	 DWORD PTR _lpstrText$[ebp], 0
  03f2a	74 0c		 je	 SHORT $L199008

; 1330 : 			mdata->SetWideString(lpstrText);  //SK: modified for dynamic allocation

  03f2c	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  03f2f	52		 push	 edx
  03f30	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03f33	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString
$L199008:

; 1331 : 		mdata->menuIconNormal = -1;

  03f38	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  03f3b	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 1332 : 		mdata->xoffset = -1;

  03f42	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03f45	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 1333 : 		if(nIconNormal>=0){

  03f4c	83 7d 10 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  03f50	0f 8c 9f 00 00
	00		 jl	 $L199009

; 1334 : 			CImageList bitmap;

  03f56	8d 4d b4	 lea	 ecx, DWORD PTR _bitmap$199010[ebp]
  03f59	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  03f5e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1335 : 			int xoffset=0;

  03f62	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _xoffset$199011[ebp], 0

; 1336 : 			LoadFromToolBar(nID,nIconNormal,xoffset);

  03f69	8d 55 bc	 lea	 edx, DWORD PTR _xoffset$199011[ebp]
  03f6c	52		 push	 edx
  03f6d	8b 45 10	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  03f70	50		 push	 eax
  03f71	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  03f74	51		 push	 ecx
  03f75	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03f78	e8 00 00 00 00	 call	 ?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ; BCMenu::LoadFromToolBar

; 1337 : 			if(mdata->bitmap){

  03f7d	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  03f80	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  03f84	74 15		 je	 SHORT $L199012

; 1338 : 				mdata->bitmap->DeleteImageList();

  03f86	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  03f89	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  03f8c	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1339 : 				mdata->bitmap=NULL;

  03f91	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03f94	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$L199012:

; 1340 : 			}
; 1341 : 			bitmap.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  03f9b	6a 01		 push	 1
  03f9d	6a 01		 push	 1
  03f9f	68 ff 00 00 00	 push	 255			; 000000ffH
  03fa4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  03faa	52		 push	 edx
  03fab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  03fb0	50		 push	 eax
  03fb1	8d 4d b4	 lea	 ecx, DWORD PTR _bitmap$199010[ebp]
  03fb4	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1342 : 			if(AddBitmapToImageList(&bitmap,nIconNormal)){

  03fb9	8b 4d 10	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  03fbc	51		 push	 ecx
  03fbd	8d 55 b4	 lea	 edx, DWORD PTR _bitmap$199010[ebp]
  03fc0	52		 push	 edx
  03fc1	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03fc4	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  03fc9	85 c0		 test	 eax, eax
  03fcb	74 1a		 je	 SHORT $L199013

; 1343 : 				mdata->global_offset = AddToGlobalImageList(&bitmap,xoffset,nID);

  03fcd	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  03fd0	50		 push	 eax
  03fd1	8b 4d bc	 mov	 ecx, DWORD PTR _xoffset$199011[ebp]
  03fd4	51		 push	 ecx
  03fd5	8d 55 b4	 lea	 edx, DWORD PTR _bitmap$199010[ebp]
  03fd8	52		 push	 edx
  03fd9	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03fdc	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  03fe1	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  03fe4	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L199013:

; 1344 : 			}
; 1345 : 		}

  03fe7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  03feb	8d 4d b4	 lea	 ecx, DWORD PTR _bitmap$199010[ebp]
  03fee	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList

; 1346 : 		else mdata->global_offset = GlobalImageListOffset(nID);

  03ff3	eb 12		 jmp	 SHORT $L199014
$L199009:
  03ff5	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  03ff8	52		 push	 edx
  03ff9	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  03ffc	e8 00 00 00 00	 call	 ?GlobalImageListOffset@BCMenu@@IAEHH@Z ; BCMenu::GlobalImageListOffset
  04001	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04004	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L199014:

; 1347 : 		mdata->nFlags &= ~(MF_BYPOSITION);

  04007	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0400a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0400d	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  04012	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04015	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1348 : 		mdata->nFlags |= MF_OWNERDRAW;

  04018	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0401b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0401e	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  04023	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04026	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1349 : 		mdata->nID = nID;

  04029	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0402c	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  0402f	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1350 : 		bcsubs.Add(psubmenu);

  04032	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  04035	51		 push	 ecx
  04036	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  04039	e8 00 00 00 00	 call	 ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::Add

; 1351 : 		bclocs.Add(nLoc);

  0403e	8d 55 ec	 lea	 edx, DWORD PTR _nLoc$[ebp]
  04041	52		 push	 edx
  04042	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  04045	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 1352 : 		if(psubmenu && nLoc>=0)psubmenu = FindAnotherMenuOption(nID,nLoc,bcsubs,bclocs);

  0404a	83 7d c0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  0404e	74 23		 je	 SHORT $L199015
  04050	83 7d ec 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  04054	7c 1d		 jl	 SHORT $L199015
  04056	8d 45 d8	 lea	 eax, DWORD PTR _bclocs$[ebp]
  04059	50		 push	 eax
  0405a	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  0405d	51		 push	 ecx
  0405e	8d 55 ec	 lea	 edx, DWORD PTR _nLoc$[ebp]
  04061	52		 push	 edx
  04062	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  04065	50		 push	 eax
  04066	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  04069	e8 00 00 00 00	 call	 ?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
  0406e	89 45 c0	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1353 : 		else psubmenu=NULL;

  04071	eb 07		 jmp	 SHORT $L198999
$L199015:
  04073	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _psubmenu$[ebp], 0
$L198999:

; 1354 : 	}while(psubmenu);

  0407a	83 7d c0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  0407e	0f 85 36 fe ff
	ff		 jne	 $L198998

; 1355 : 	return (CMenu::ModifyMenu(nID,mdata->nFlags,nID,(LPCTSTR)mdata));

  04084	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04087	51		 push	 ecx
  04088	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  0408b	52		 push	 edx
  0408c	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  0408f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  04092	51		 push	 ecx
  04093	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  04096	52		 push	 edx
  04097	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0409a	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
  0409f	89 45 a8	 mov	 DWORD PTR $T202617[ebp], eax
  040a2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  040a6	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  040a9	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  040ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  040b5	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  040b8	e8 00 00 00 00	 call	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
  040bd	8b 45 a8	 mov	 eax, DWORD PTR $T202617[ebp]

; 1356 : }

  040c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  040c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  040ca	8b e5		 mov	 esp, ebp
  040cc	5d		 pop	 ebp
  040cd	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L202618:
  0022e	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  00231	e9 00 00 00 00	 jmp	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
$L202619:
  00236	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  00239	e9 00 00 00 00	 jmp	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
$L202620:
  0023e	8b 45 ac	 mov	 eax, DWORD PTR $T202614[ebp]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00247	59		 pop	 ecx
  00248	c3		 ret	 0
$L202621:
  00249	8d 4d b4	 lea	 ecx, DWORD PTR _bitmap$199010[ebp]
  0024c	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z:
  00251	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202623
  00256	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIH@Z ENDP		; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202628 = -20						; size = 4
$T202627 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_il$ = 16						; size = 4
_xoffset$ = 20						; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z PROC NEAR ; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1359 : {

  040d0	55		 push	 ebp
  040d1	8b ec		 mov	 ebp, esp
  040d3	83 ec 18	 sub	 esp, 24			; 00000018H
  040d6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1360 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  040d9	6a 00		 push	 0
  040db	6a 00		 push	 0
  040dd	6a ff		 push	 -1
  040df	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  040e2	50		 push	 eax
  040e3	6a 00		 push	 0
  040e5	6a 00		 push	 0
  040e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  040ed	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1361 : 	wchar_t* wszUtf8 = new wchar_t[len];

  040f0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  040f3	d1 e1		 shl	 ecx, 1
  040f5	51		 push	 ecx
  040f6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  040fb	83 c4 04	 add	 esp, 4
  040fe	89 45 f0	 mov	 DWORD PTR $T202627[ebp], eax
  04101	8b 55 f0	 mov	 edx, DWORD PTR $T202627[ebp]
  04104	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1362 : 	memset(wszUtf8, 0, len * 2);

  04107	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0410a	d1 e0		 shl	 eax, 1
  0410c	50		 push	 eax
  0410d	6a 00		 push	 0
  0410f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  04112	51		 push	 ecx
  04113	e8 00 00 00 00	 call	 _memset
  04118	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1363 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0411b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0411e	52		 push	 edx
  0411f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  04122	50		 push	 eax
  04123	6a ff		 push	 -1
  04125	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04128	51		 push	 ecx
  04129	6a 00		 push	 0
  0412b	6a 00		 push	 0
  0412d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1364 : 
; 1365 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,il,xoffset);

  04133	8b 55 14	 mov	 edx, DWORD PTR _xoffset$[ebp]
  04136	52		 push	 edx
  04137	8b 45 10	 mov	 eax, DWORD PTR _il$[ebp]
  0413a	50		 push	 eax
  0413b	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  0413e	51		 push	 ecx
  0413f	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  04142	52		 push	 edx
  04143	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  04146	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
  0414b	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1366 : 
; 1367 : 	delete[] wszUtf8;

  0414e	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  04151	89 45 ec	 mov	 DWORD PTR $T202628[ebp], eax
  04154	8b 4d ec	 mov	 ecx, DWORD PTR $T202628[ebp]
  04157	51		 push	 ecx
  04158	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0415d	83 c4 04	 add	 esp, 4

; 1368 : 	return bRet;

  04160	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1369 : }

  04163	8b e5		 mov	 esp, ebp
  04165	5d		 pop	 ebp
  04166	c2 10 00	 ret	 16			; 00000010H
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z ENDP	; BCMenu::ModifyODMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T202641 DD	0ffffffffH
	DD	FLAT:$L202635
	DD	00H
	DD	FLAT:$L202636
	DD	01H
	DD	FLAT:$L202637
$T202639 DD	019930520H
	DD	03H
	DD	FLAT:$T202641
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv93 = -84						; size = 4
_this$ = -80						; size = 4
$T202634 = -76						; size = 4
$T202631 = -72						; size = 4
$T202630 = -68						; size = 4
_psubmenu$ = -64					; size = 4
_bcsubs$ = -60						; size = 20
_bclocs$ = -40						; size = 20
_nLoc$ = -20						; size = 4
_mdata$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_il$ = 16						; size = 4
_xoffset$ = 20						; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z PROC NEAR ; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1372 : {

  04170	55		 push	 ebp
  04171	8b ec		 mov	 ebp, esp
  04173	6a ff		 push	 -1
  04175	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z
  0417a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  04180	50		 push	 eax
  04181	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  04188	83 ec 48	 sub	 esp, 72			; 00000048H
  0418b	89 4d b0	 mov	 DWORD PTR _this$[ebp], ecx

; 1373 : 	int nLoc;
; 1374 : 	BCMenuData *mdata;
; 1375 : 	CArray<BCMenu*,BCMenu*>bcsubs;

  0418e	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  04191	e8 00 00 00 00	 call	 ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ ; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
  04196	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1376 : 	CArray<int,int&>bclocs;

  0419d	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  041a0	e8 00 00 00 00	 call	 ??0?$CArray@HAAH@@QAE@XZ ; CArray<int,int &>::CArray<int,int &>
  041a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1377 : 	
; 1378 : 	// Find the old BCMenuData structure:
; 1379 : 	BCMenu *psubmenu = FindMenuOption(nID,nLoc);

  041a9	8d 45 ec	 lea	 eax, DWORD PTR _nLoc$[ebp]
  041ac	50		 push	 eax
  041ad	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  041b0	51		 push	 ecx
  041b1	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  041b4	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  041b9	89 45 c0	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1380 : //added by vito--
; 1381 : 	psubmenu->SetMenuItemBkColor( m_menuItemBkColor );

  041bc	8b 55 b0	 mov	 edx, DWORD PTR _this$[ebp]
  041bf	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  041c2	50		 push	 eax
  041c3	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  041c6	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 1382 : 	psubmenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  041cb	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  041ce	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  041d1	52		 push	 edx
  041d2	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  041d5	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor
$L199045:

; 1383 : //--
; 1384 : 	do{
; 1385 : 		if(psubmenu && nLoc>=0)mdata = psubmenu->m_MenuList[nLoc];

  041da	83 7d c0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  041de	74 1c		 je	 SHORT $L199048
  041e0	83 7d ec 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  041e4	7c 16		 jl	 SHORT $L199048
  041e6	8b 45 ec	 mov	 eax, DWORD PTR _nLoc$[ebp]
  041e9	50		 push	 eax
  041ea	8b 4d c0	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  041ed	83 c1 08	 add	 ecx, 8
  041f0	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  041f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  041f7	89 4d f0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1386 : 		else{

  041fa	eb 4a		 jmp	 SHORT $L199049
$L199048:

; 1387 : 			// Create a new BCMenuData structure:
; 1388 : 			mdata = new BCMenuData;

  041fc	6a 24		 push	 36			; 00000024H
  041fe	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  04203	83 c4 04	 add	 esp, 4
  04206	89 45 b8	 mov	 DWORD PTR $T202631[ebp], eax
  04209	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0420d	83 7d b8 00	 cmp	 DWORD PTR $T202631[ebp], 0
  04211	74 0d		 je	 SHORT $L202632
  04213	8b 4d b8	 mov	 ecx, DWORD PTR $T202631[ebp]
  04216	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  0421b	89 45 ac	 mov	 DWORD PTR tv93[ebp], eax
  0421e	eb 07		 jmp	 SHORT $L202633
$L202632:
  04220	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$L202633:
  04227	8b 55 ac	 mov	 edx, DWORD PTR tv93[ebp]
  0422a	89 55 bc	 mov	 DWORD PTR $T202630[ebp], edx
  0422d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04231	8b 45 bc	 mov	 eax, DWORD PTR $T202630[ebp]
  04234	89 45 f0	 mov	 DWORD PTR _mdata$[ebp], eax

; 1389 : 			m_MenuList.Add(mdata);

  04237	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0423a	51		 push	 ecx
  0423b	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  0423e	83 c1 08	 add	 ecx, 8
  04241	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L199049:

; 1390 : 		}
; 1391 : 		
; 1392 : 		ASSERT(mdata);
; 1393 : 		if(lpstrText)

  04246	83 7d 08 00	 cmp	 DWORD PTR _lpstrText$[ebp], 0
  0424a	74 0c		 je	 SHORT $L199055

; 1394 : 			mdata->SetWideString(lpstrText);  //SK: modified for dynamic allocation

  0424c	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  0424f	52		 push	 edx
  04250	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04253	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString
$L199055:

; 1395 : 		mdata->menuIconNormal = -1;

  04258	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  0425b	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 1396 : 		mdata->xoffset = -1;

  04262	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04265	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 1397 : 		if(il){

  0426c	83 7d 10 00	 cmp	 DWORD PTR _il$[ebp], 0
  04270	74 38		 je	 SHORT $L199056

; 1398 : 			if(mdata->bitmap){

  04272	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04275	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  04279	74 15		 je	 SHORT $L199057

; 1399 : 				mdata->bitmap->DeleteImageList();

  0427b	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  0427e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  04281	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1400 : 				mdata->bitmap=NULL;

  04286	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04289	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$L199057:

; 1401 : 			}
; 1402 : 			mdata->global_offset = AddToGlobalImageList(il,xoffset,nID);

  04290	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  04293	52		 push	 edx
  04294	8b 45 14	 mov	 eax, DWORD PTR _xoffset$[ebp]
  04297	50		 push	 eax
  04298	8b 4d 10	 mov	 ecx, DWORD PTR _il$[ebp]
  0429b	51		 push	 ecx
  0429c	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  0429f	e8 00 00 00 00	 call	 ?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ; BCMenu::AddToGlobalImageList
  042a4	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  042a7	89 42 08	 mov	 DWORD PTR [edx+8], eax
$L199056:

; 1403 : 		}
; 1404 : 		mdata->nFlags &= ~(MF_BYPOSITION);

  042aa	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  042ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  042b0	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  042b6	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  042b9	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 1405 : 		mdata->nFlags |= MF_OWNERDRAW;

  042bc	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  042bf	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  042c2	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  042c8	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  042cb	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 1406 : 		mdata->nID = nID;

  042ce	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  042d1	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  042d4	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1407 : 		bcsubs.Add(psubmenu);

  042d7	8b 55 c0	 mov	 edx, DWORD PTR _psubmenu$[ebp]
  042da	52		 push	 edx
  042db	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  042de	e8 00 00 00 00	 call	 ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::Add

; 1408 : 		bclocs.Add(nLoc);

  042e3	8d 45 ec	 lea	 eax, DWORD PTR _nLoc$[ebp]
  042e6	50		 push	 eax
  042e7	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  042ea	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 1409 : 		if(psubmenu && nLoc>=0)psubmenu = FindAnotherMenuOption(nID,nLoc,bcsubs,bclocs);

  042ef	83 7d c0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  042f3	74 23		 je	 SHORT $L199058
  042f5	83 7d ec 00	 cmp	 DWORD PTR _nLoc$[ebp], 0
  042f9	7c 1d		 jl	 SHORT $L199058
  042fb	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  042fe	51		 push	 ecx
  042ff	8d 55 c4	 lea	 edx, DWORD PTR _bcsubs$[ebp]
  04302	52		 push	 edx
  04303	8d 45 ec	 lea	 eax, DWORD PTR _nLoc$[ebp]
  04306	50		 push	 eax
  04307	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  0430a	51		 push	 ecx
  0430b	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  0430e	e8 00 00 00 00	 call	 ?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
  04313	89 45 c0	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1410 : 		else psubmenu=NULL;

  04316	eb 07		 jmp	 SHORT $L199046
$L199058:
  04318	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _psubmenu$[ebp], 0
$L199046:

; 1411 : 	}while(psubmenu);

  0431f	83 7d c0 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  04323	0f 85 b1 fe ff
	ff		 jne	 $L199045

; 1412 : 	return (CMenu::ModifyMenu(nID,mdata->nFlags,nID,(LPCTSTR)mdata));

  04329	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0432c	52		 push	 edx
  0432d	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  04330	50		 push	 eax
  04331	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04334	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  04337	52		 push	 edx
  04338	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  0433b	50		 push	 eax
  0433c	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  0433f	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
  04344	89 45 b4	 mov	 DWORD PTR $T202634[ebp], eax
  04347	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0434b	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  0434e	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  04353	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0435a	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  0435d	e8 00 00 00 00	 call	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
  04362	8b 45 b4	 mov	 eax, DWORD PTR $T202634[ebp]

; 1413 : }

  04365	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04368	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0436f	8b e5		 mov	 esp, ebp
  04371	5d		 pop	 ebp
  04372	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L202635:
  0025b	8d 4d c4	 lea	 ecx, DWORD PTR _bcsubs$[ebp]
  0025e	e9 00 00 00 00	 jmp	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
$L202636:
  00263	8d 4d d8	 lea	 ecx, DWORD PTR _bclocs$[ebp]
  00266	e9 00 00 00 00	 jmp	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
$L202637:
  0026b	8b 45 b8	 mov	 eax, DWORD PTR $T202631[ebp]
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00274	59		 pop	 ecx
  00275	c3		 ret	 0
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z:
  00276	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202639
  0027b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ENDP	; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z	; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z	; BCMenu::ModifyODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202644 = -20						; size = 4
$T202643 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_bmp$ = 16						; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z PROC NEAR	; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1416 : {	

  04380	55		 push	 ebp
  04381	8b ec		 mov	 ebp, esp
  04383	83 ec 18	 sub	 esp, 24			; 00000018H
  04386	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1417 : 		
; 1418 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  04389	6a 00		 push	 0
  0438b	6a 00		 push	 0
  0438d	6a ff		 push	 -1
  0438f	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  04392	50		 push	 eax
  04393	6a 00		 push	 0
  04395	6a 00		 push	 0
  04397	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0439d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1419 : 	wchar_t* wszUtf8 = new wchar_t[len];

  043a0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  043a3	d1 e1		 shl	 ecx, 1
  043a5	51		 push	 ecx
  043a6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  043ab	83 c4 04	 add	 esp, 4
  043ae	89 45 f0	 mov	 DWORD PTR $T202643[ebp], eax
  043b1	8b 55 f0	 mov	 edx, DWORD PTR $T202643[ebp]
  043b4	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1420 : 	memset(wszUtf8, 0, len * 2);

  043b7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  043ba	d1 e0		 shl	 eax, 1
  043bc	50		 push	 eax
  043bd	6a 00		 push	 0
  043bf	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  043c2	51		 push	 ecx
  043c3	e8 00 00 00 00	 call	 _memset
  043c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1421 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  043cb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  043ce	52		 push	 edx
  043cf	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  043d2	50		 push	 eax
  043d3	6a ff		 push	 -1
  043d5	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  043d8	51		 push	 ecx
  043d9	6a 00		 push	 0
  043db	6a 00		 push	 0
  043dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1422 : 
; 1423 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,bmp);

  043e3	8b 55 10	 mov	 edx, DWORD PTR _bmp$[ebp]
  043e6	52		 push	 edx
  043e7	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  043ea	50		 push	 eax
  043eb	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  043ee	51		 push	 ecx
  043ef	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  043f2	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuW
  043f7	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1424 : 
; 1425 : 	delete[] wszUtf8;

  043fa	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  043fd	89 55 ec	 mov	 DWORD PTR $T202644[ebp], edx
  04400	8b 45 ec	 mov	 eax, DWORD PTR $T202644[ebp]
  04403	50		 push	 eax
  04404	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  04409	83 c4 04	 add	 esp, 4

; 1426 : 	return bRet;

  0440c	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1427 : }

  0440f	8b e5		 mov	 esp, ebp
  04411	5d		 pop	 ebp
  04412	c2 0c 00	 ret	 12			; 0000000cH
?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z ENDP	; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	?Add@CImageList@@QAEHPAVCBitmap@@K@Z		; CImageList::Add
xdata$x	SEGMENT
$T202651 DD	0ffffffffH
	DD	FLAT:$L202647
$T202649 DD	019930520H
	DD	01H
	DD	FLAT:$T202651
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T202646 = -24						; size = 4
_temp$199082 = -20					; size = 8
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_bmp$ = 16						; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z PROC NEAR ; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1430 : {

  04420	55		 push	 ebp
  04421	8b ec		 mov	 ebp, esp
  04423	6a ff		 push	 -1
  04425	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z
  0442a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  04430	50		 push	 eax
  04431	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  04438	83 ec 10	 sub	 esp, 16			; 00000010H
  0443b	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1431 : 	if(bmp){

  0443e	83 7d 10 00	 cmp	 DWORD PTR _bmp$[ebp], 0
  04442	0f 84 8d 00 00
	00		 je	 $L199081

; 1432 : 		CImageList temp;

  04448	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  0444b	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  04450	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1433 : 		temp.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  04457	6a 01		 push	 1
  04459	6a 01		 push	 1
  0445b	68 ff 00 00 00	 push	 255			; 000000ffH
  04460	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  04465	50		 push	 eax
  04466	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0446c	51		 push	 ecx
  0446d	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  04470	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1434 : 		if(m_bitmapBackgroundFlag)temp.Add(bmp,m_bitmapBackground);

  04475	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  04478	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  0447c	74 15		 je	 SHORT $L199083
  0447e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  04481	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  04484	51		 push	 ecx
  04485	8b 55 10	 mov	 edx, DWORD PTR _bmp$[ebp]
  04488	52		 push	 edx
  04489	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  0448c	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 1435 : 		else temp.Add(bmp,GetSysColor(COLOR_3DFACE));

  04491	eb 15		 jmp	 SHORT $L199084
$L199083:
  04493	6a 0f		 push	 15			; 0000000fH
  04495	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0449b	50		 push	 eax
  0449c	8b 45 10	 mov	 eax, DWORD PTR _bmp$[ebp]
  0449f	50		 push	 eax
  044a0	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  044a3	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L199084:

; 1436 : 		return ModifyODMenuW(lpstrText,nID,&temp,0);

  044a8	6a 00		 push	 0
  044aa	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  044ad	51		 push	 ecx
  044ae	8b 55 0c	 mov	 edx, DWORD PTR _nID$[ebp]
  044b1	52		 push	 edx
  044b2	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  044b5	50		 push	 eax
  044b6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  044b9	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
  044be	89 45 e8	 mov	 DWORD PTR $T202646[ebp], eax
  044c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  044c8	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  044cb	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  044d0	8b 45 e8	 mov	 eax, DWORD PTR $T202646[ebp]
  044d3	eb 14		 jmp	 SHORT $L199080
$L199081:

; 1437 : 	}
; 1438 : 	return ModifyODMenuW(lpstrText,nID,NULL,0);

  044d5	6a 00		 push	 0
  044d7	6a 00		 push	 0
  044d9	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  044dc	51		 push	 ecx
  044dd	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  044e0	52		 push	 edx
  044e1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  044e4	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuW
$L199080:

; 1439 : }

  044e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  044ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  044f3	8b e5		 mov	 esp, ebp
  044f5	5d		 pop	 ebp
  044f6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L202647:
  00280	8d 4d ec	 lea	 ecx, DWORD PTR _temp$199082[ebp]
  00283	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z:
  00288	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202649
  0028d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z ENDP	; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBDIKKHPAVCSize@@@Z	; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z	; BCMenu::ModifyODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T202654 = -20						; size = 4
$T202653 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_fill$ = 16						; size = 4
_border$ = 20						; size = 4
_hatchstyle$ = 24					; size = 4
_pSize$ = 28						; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBDIKKHPAVCSize@@@Z PROC NEAR ; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1443 : {

  04500	55		 push	 ebp
  04501	8b ec		 mov	 ebp, esp
  04503	83 ec 18	 sub	 esp, 24			; 00000018H
  04506	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  04509	6a 00		 push	 0
  0450b	6a 00		 push	 0
  0450d	6a ff		 push	 -1
  0450f	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  04512	50		 push	 eax
  04513	6a 00		 push	 0
  04515	6a 00		 push	 0
  04517	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0451d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 1445 : 	wchar_t* wszUtf8 = new wchar_t[len];

  04520	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  04523	d1 e1		 shl	 ecx, 1
  04525	51		 push	 ecx
  04526	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0452b	83 c4 04	 add	 esp, 4
  0452e	89 45 f0	 mov	 DWORD PTR $T202653[ebp], eax
  04531	8b 55 f0	 mov	 edx, DWORD PTR $T202653[ebp]
  04534	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1446 : 	memset(wszUtf8, 0, len * 2);

  04537	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0453a	d1 e0		 shl	 eax, 1
  0453c	50		 push	 eax
  0453d	6a 00		 push	 0
  0453f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  04542	51		 push	 ecx
  04543	e8 00 00 00 00	 call	 _memset
  04548	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1447 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0454b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0454e	52		 push	 edx
  0454f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  04552	50		 push	 eax
  04553	6a ff		 push	 -1
  04555	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04558	51		 push	 ecx
  04559	6a 00		 push	 0
  0455b	6a 00		 push	 0
  0455d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1448 : 
; 1449 : 	BOOL bRet = ModifyODMenuW( wszUtf8,nID,fill,border,hatchstyle,pSize);

  04563	8b 55 1c	 mov	 edx, DWORD PTR _pSize$[ebp]
  04566	52		 push	 edx
  04567	8b 45 18	 mov	 eax, DWORD PTR _hatchstyle$[ebp]
  0456a	50		 push	 eax
  0456b	8b 4d 14	 mov	 ecx, DWORD PTR _border$[ebp]
  0456e	51		 push	 ecx
  0456f	8b 55 10	 mov	 edx, DWORD PTR _fill$[ebp]
  04572	52		 push	 edx
  04573	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  04576	50		 push	 eax
  04577	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  0457a	51		 push	 ecx
  0457b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0457e	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z ; BCMenu::ModifyODMenuW
  04583	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 1450 : 	delete[] wszUtf8;

  04586	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  04589	89 55 ec	 mov	 DWORD PTR $T202654[ebp], edx
  0458c	8b 45 ec	 mov	 eax, DWORD PTR $T202654[ebp]
  0458f	50		 push	 eax
  04590	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  04595	83 c4 04	 add	 esp, 4

; 1451 : 
; 1452 : 	return bRet;

  04598	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1453 : }

  0459b	8b e5		 mov	 esp, ebp
  0459d	5d		 pop	 ebp
  0459e	c2 18 00	 ret	 24			; 00000018H
?ModifyODMenuA@BCMenu@@QAEHPBDIKKHPAVCSize@@@Z ENDP	; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	??0CSize@@QAE@HH@Z				; CSize::CSize
PUBLIC	?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z ; BCMenu::ColorBitmap
xdata$x	SEGMENT
$T202661 DD	0ffffffffH
	DD	FLAT:$L202657
$T202659 DD	019930520H
	DD	01H
	DD	FLAT:$T202661
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T202656 = -56						; size = 4
_sz$ = -52						; size = 8
_pWnd$ = -44						; size = 4
_bitmap_size$ = -40					; size = 8
_pDC$ = -32						; size = 4
_bmp$ = -28						; size = 8
_icon_size$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_nID$ = 12						; size = 4
_fill$ = 16						; size = 4
_border$ = 20						; size = 4
_hatchstyle$ = 24					; size = 4
_pSize$ = 28						; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z PROC NEAR ; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1456 : {

  045b0	55		 push	 ebp
  045b1	8b ec		 mov	 ebp, esp
  045b3	6a ff		 push	 -1
  045b5	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z
  045ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  045c0	50		 push	 eax
  045c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  045c8	83 ec 30	 sub	 esp, 48			; 00000030H
  045cb	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 1457 : 	CWnd *pWnd = AfxGetMainWnd();            // Get main window

  045ce	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  045d3	89 45 d4	 mov	 DWORD PTR _pWnd$[ebp], eax

; 1458 : 	CDC *pDC = pWnd->GetDC();              // Get device context

  045d6	8b 4d d4	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  045d9	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  045de	89 45 e0	 mov	 DWORD PTR _pDC$[ebp], eax

; 1459 : 	SIZE sz;
; 1460 : 	if(!pSize){

  045e1	83 7d 1c 00	 cmp	 DWORD PTR _pSize$[ebp], 0
  045e5	75 13		 jne	 SHORT $L199114

; 1461 : 		sz.cx = m_iconX;

  045e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  045ec	89 45 cc	 mov	 DWORD PTR _sz$[ebp], eax

; 1462 : 		sz.cy = m_iconY;

  045ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  045f5	89 4d d0	 mov	 DWORD PTR _sz$[ebp+4], ecx

; 1463 : 	}
; 1464 : 	else{

  045f8	eb 11		 jmp	 SHORT $L199115
$L199114:

; 1465 : 		sz.cx = pSize->cx;

  045fa	8b 55 1c	 mov	 edx, DWORD PTR _pSize$[ebp]
  045fd	8b 02		 mov	 eax, DWORD PTR [edx]
  045ff	89 45 cc	 mov	 DWORD PTR _sz$[ebp], eax

; 1466 : 		sz.cy = pSize->cy;

  04602	8b 4d 1c	 mov	 ecx, DWORD PTR _pSize$[ebp]
  04605	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  04608	89 55 d0	 mov	 DWORD PTR _sz$[ebp+4], edx
$L199115:

; 1467 : 	}
; 1468 : 	CSize bitmap_size(sz);

  0460b	8b 45 d0	 mov	 eax, DWORD PTR _sz$[ebp+4]
  0460e	50		 push	 eax
  0460f	8b 4d cc	 mov	 ecx, DWORD PTR _sz$[ebp]
  04612	51		 push	 ecx
  04613	8d 4d d8	 lea	 ecx, DWORD PTR _bitmap_size$[ebp]
  04616	e8 00 00 00 00	 call	 ??0CSize@@QAE@UtagSIZE@@@Z ; CSize::CSize

; 1469 : 	CSize icon_size(m_iconX,m_iconY);

  0461b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  04621	52		 push	 edx
  04622	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  04627	50		 push	 eax
  04628	8d 4d ec	 lea	 ecx, DWORD PTR _icon_size$[ebp]
  0462b	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize

; 1470 : 	CBitmap bmp;

  04630	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  04633	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  04638	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1471 : 	ColorBitmap(pDC,bmp,bitmap_size,icon_size,fill,border,hatchstyle);		

  0463f	8b 4d 18	 mov	 ecx, DWORD PTR _hatchstyle$[ebp]
  04642	51		 push	 ecx
  04643	8b 55 14	 mov	 edx, DWORD PTR _border$[ebp]
  04646	52		 push	 edx
  04647	8b 45 10	 mov	 eax, DWORD PTR _fill$[ebp]
  0464a	50		 push	 eax
  0464b	8b 4d f0	 mov	 ecx, DWORD PTR _icon_size$[ebp+4]
  0464e	51		 push	 ecx
  0464f	8b 55 ec	 mov	 edx, DWORD PTR _icon_size$[ebp]
  04652	52		 push	 edx
  04653	8b 45 dc	 mov	 eax, DWORD PTR _bitmap_size$[ebp+4]
  04656	50		 push	 eax
  04657	8b 4d d8	 mov	 ecx, DWORD PTR _bitmap_size$[ebp]
  0465a	51		 push	 ecx
  0465b	8d 55 e4	 lea	 edx, DWORD PTR _bmp$[ebp]
  0465e	52		 push	 edx
  0465f	8b 45 e0	 mov	 eax, DWORD PTR _pDC$[ebp]
  04662	50		 push	 eax
  04663	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  04666	e8 00 00 00 00	 call	 ?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z ; BCMenu::ColorBitmap

; 1472 : 	pWnd->ReleaseDC(pDC);

  0466b	8b 4d e0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0466e	51		 push	 ecx
  0466f	8b 4d d4	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  04672	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 1473 : 	return ModifyODMenuW(lpstrText,nID,&bmp);

  04677	8d 55 e4	 lea	 edx, DWORD PTR _bmp$[ebp]
  0467a	52		 push	 edx
  0467b	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  0467e	50		 push	 eax
  0467f	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04682	51		 push	 ecx
  04683	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  04686	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_WIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuW
  0468b	89 45 c8	 mov	 DWORD PTR $T202656[ebp], eax
  0468e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04695	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  04698	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0469d	8b 45 c8	 mov	 eax, DWORD PTR $T202656[ebp]

; 1474 : }

  046a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  046a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  046aa	8b e5		 mov	 esp, ebp
  046ac	5d		 pop	 ebp
  046ad	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
text$x	SEGMENT
$L202657:
  00292	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  00295	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z:
  0029a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202659
  0029f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_WIKKHPAVCSize@@@Z ENDP	; BCMenu::ModifyODMenuW
PUBLIC	?ModifyODMenuA@BCMenu@@QAEHPBD0H@Z		; BCMenu::ModifyODMenuA
PUBLIC	?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z		; BCMenu::ModifyODMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T202665 = -28						; size = 4
$T202664 = -24						; size = 4
$T202663 = -20						; size = 4
_wszUtf8$ = -16						; size = 4
_bRet$ = -12						; size = 4
_len$ = -8						; size = 4
_wszUtf82$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
_OptionText$ = 12					; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuA@BCMenu@@QAEHPBD0H@Z PROC NEAR		; BCMenu::ModifyODMenuA
; _this$ = ecx

; 1479 : {

  046b0	55		 push	 ebp
  046b1	8b ec		 mov	 ebp, esp
  046b3	83 ec 20	 sub	 esp, 32			; 00000020H
  046b6	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1480 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  046b9	6a 00		 push	 0
  046bb	6a 00		 push	 0
  046bd	6a ff		 push	 -1
  046bf	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  046c2	50		 push	 eax
  046c3	6a 00		 push	 0
  046c5	6a 00		 push	 0
  046c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  046cd	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1481 : 	wchar_t* wszUtf8 = new wchar_t[len];

  046d0	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  046d3	d1 e1		 shl	 ecx, 1
  046d5	51		 push	 ecx
  046d6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  046db	83 c4 04	 add	 esp, 4
  046de	89 45 ec	 mov	 DWORD PTR $T202663[ebp], eax
  046e1	8b 55 ec	 mov	 edx, DWORD PTR $T202663[ebp]
  046e4	89 55 f0	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 1482 : 	memset(wszUtf8, 0, len * 2);

  046e7	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  046ea	d1 e0		 shl	 eax, 1
  046ec	50		 push	 eax
  046ed	6a 00		 push	 0
  046ef	8b 4d f0	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  046f2	51		 push	 ecx
  046f3	e8 00 00 00 00	 call	 _memset
  046f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1483 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  046fb	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  046fe	52		 push	 edx
  046ff	8b 45 f0	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  04702	50		 push	 eax
  04703	6a ff		 push	 -1
  04705	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  04708	51		 push	 ecx
  04709	6a 00		 push	 0
  0470b	6a 00		 push	 0
  0470d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1484 : 
; 1485 : 
; 1486 : 	len=MultiByteToWideChar(CP_ACP, 0,OptionText, -1, NULL,0);

  04713	6a 00		 push	 0
  04715	6a 00		 push	 0
  04717	6a ff		 push	 -1
  04719	8b 55 0c	 mov	 edx, DWORD PTR _OptionText$[ebp]
  0471c	52		 push	 edx
  0471d	6a 00		 push	 0
  0471f	6a 00		 push	 0
  04721	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  04727	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 1487 : 	wchar_t* wszUtf82 = new wchar_t[len];

  0472a	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0472d	d1 e0		 shl	 eax, 1
  0472f	50		 push	 eax
  04730	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  04735	83 c4 04	 add	 esp, 4
  04738	89 45 e8	 mov	 DWORD PTR $T202664[ebp], eax
  0473b	8b 4d e8	 mov	 ecx, DWORD PTR $T202664[ebp]
  0473e	89 4d fc	 mov	 DWORD PTR _wszUtf82$[ebp], ecx

; 1488 : 	memset(wszUtf82, 0, len * 2);

  04741	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  04744	d1 e2		 shl	 edx, 1
  04746	52		 push	 edx
  04747	6a 00		 push	 0
  04749	8b 45 fc	 mov	 eax, DWORD PTR _wszUtf82$[ebp]
  0474c	50		 push	 eax
  0474d	e8 00 00 00 00	 call	 _memset
  04752	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1489 : 	MultiByteToWideChar(CP_ACP, 0, OptionText, -1, (LPWSTR)wszUtf82, len);	

  04755	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  04758	51		 push	 ecx
  04759	8b 55 fc	 mov	 edx, DWORD PTR _wszUtf82$[ebp]
  0475c	52		 push	 edx
  0475d	6a ff		 push	 -1
  0475f	8b 45 0c	 mov	 eax, DWORD PTR _OptionText$[ebp]
  04762	50		 push	 eax
  04763	6a 00		 push	 0
  04765	6a 00		 push	 0
  04767	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1490 : 
; 1491 : 	BOOL bRet = ModifyODMenuW( wszUtf8,wszUtf82,nIconNormal);//SK: see MFC  Tech Note 059

  0476d	8b 4d 10	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  04770	51		 push	 ecx
  04771	8b 55 fc	 mov	 edx, DWORD PTR _wszUtf82$[ebp]
  04774	52		 push	 edx
  04775	8b 45 f0	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  04778	50		 push	 eax
  04779	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0477c	e8 00 00 00 00	 call	 ?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z ; BCMenu::ModifyODMenuW
  04781	89 45 f4	 mov	 DWORD PTR _bRet$[ebp], eax

; 1492 : 	delete[] wszUtf8;

  04784	8b 4d f0	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  04787	89 4d e4	 mov	 DWORD PTR $T202665[ebp], ecx
  0478a	8b 55 e4	 mov	 edx, DWORD PTR $T202665[ebp]
  0478d	52		 push	 edx
  0478e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  04793	83 c4 04	 add	 esp, 4

; 1493 : 
; 1494 : 	return bRet;

  04796	8b 45 f4	 mov	 eax, DWORD PTR _bRet$[ebp]

; 1495 : }

  04799	8b e5		 mov	 esp, ebp
  0479b	5d		 pop	 ebp
  0479c	c2 0c 00	 ret	 12			; 0000000cH
?ModifyODMenuA@BCMenu@@QAEHPBD0H@Z ENDP			; BCMenu::ModifyODMenuA
_TEXT	ENDS
PUBLIC	?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z:NEAR
xdata$x	SEGMENT
$T202682 DD	0ffffffffH
	DD	FLAT:$L202677
	DD	00H
	DD	FLAT:$L202678
$T202680 DD	019930520H
	DD	02H
	DD	FLAT:$T202682
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv148 = -56						; size = 4
tv92 = -52						; size = 4
_this$ = -48						; size = 4
$T202676 = -44						; size = 4
$T202675 = -40						; size = 4
$T202672 = -36						; size = 4
$T202671 = -32						; size = 4
$T202668 = -28						; size = 4
$T202667 = -24						; size = 4
_junk$ = -20						; size = 4
_mdata$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
_OptionText$ = 12					; size = 4
_nIconNormal$ = 16					; size = 4
?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z PROC NEAR		; BCMenu::ModifyODMenuW
; _this$ = ecx

; 1499 : {

  047a0	55		 push	 ebp
  047a1	8b ec		 mov	 ebp, esp
  047a3	6a ff		 push	 -1
  047a5	68 00 00 00 00	 push	 __ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z
  047aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  047b0	50		 push	 eax
  047b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  047b8	83 ec 2c	 sub	 esp, 44			; 0000002cH
  047bb	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 1500 : 	BCMenuData *mdata;
; 1501 : 	
; 1502 : 	// Find the old BCMenuData structure:
; 1503 : 	CString junk = CString(OptionText);

  047be	8b 45 0c	 mov	 eax, DWORD PTR _OptionText$[ebp]
  047c1	50		 push	 eax
  047c2	8d 4d ec	 lea	 ecx, DWORD PTR _junk$[ebp]
  047c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PB_W@Z
  047cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1504 : 	mdata=FindMenuOption(OptionText);

  047d2	8b 4d 0c	 mov	 ecx, DWORD PTR _OptionText$[ebp]
  047d5	51		 push	 ecx
  047d6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  047d9	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
  047de	89 45 f0	 mov	 DWORD PTR _mdata$[ebp], eax

; 1505 : 	if(mdata){

  047e1	83 7d f0 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  047e5	0f 84 3b 01 00
	00		 je	 $L199146

; 1506 : 		if(lpstrText)

  047eb	83 7d 08 00	 cmp	 DWORD PTR _lpstrText$[ebp], 0
  047ef	74 0c		 je	 SHORT $L199147

; 1507 : 			mdata->SetWideString(lpstrText);//SK: modified for dynamic allocation

  047f1	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  047f4	52		 push	 edx
  047f5	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  047f8	e8 00 00 00 00	 call	 ?SetWideString@BCMenuData@@QAEXPB_W@Z ; BCMenuData::SetWideString
$L199147:

; 1508 : 		mdata->menuIconNormal = nIconNormal;

  047fd	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  04800	8b 4d 10	 mov	 ecx, DWORD PTR _nIconNormal$[ebp]
  04803	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1509 : 		mdata->xoffset=-1;

  04806	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04809	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1510 : 		if(nIconNormal>=0){

  04810	83 7d 10 00	 cmp	 DWORD PTR _nIconNormal$[ebp], 0
  04814	0f 8c f0 00 00
	00		 jl	 $L199148

; 1511 : 			mdata->xoffset=0;

  0481a	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  0481d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1512 : 			if(mdata->bitmap)mdata->bitmap->DeleteImageList();

  04824	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04827	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  0482b	74 0d		 je	 SHORT $L199149
  0482d	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  04830	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  04833	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1513 : 			else mdata->bitmap=new(CImageList);

  04838	eb 3b		 jmp	 SHORT $L199150
$L199149:
  0483a	6a 08		 push	 8
  0483c	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04841	89 45 e4	 mov	 DWORD PTR $T202668[ebp], eax
  04844	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04848	83 7d e4 00	 cmp	 DWORD PTR $T202668[ebp], 0
  0484c	74 0d		 je	 SHORT $L202669
  0484e	8b 4d e4	 mov	 ecx, DWORD PTR $T202668[ebp]
  04851	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  04856	89 45 cc	 mov	 DWORD PTR tv92[ebp], eax
  04859	eb 07		 jmp	 SHORT $L202670
$L202669:
  0485b	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L202670:
  04862	8b 45 cc	 mov	 eax, DWORD PTR tv92[ebp]
  04865	89 45 e8	 mov	 DWORD PTR $T202667[ebp], eax
  04868	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0486c	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0486f	8b 55 e8	 mov	 edx, DWORD PTR $T202667[ebp]
  04872	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
$L199150:

; 1514 : 			mdata->bitmap->Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  04875	6a 01		 push	 1
  04877	6a 01		 push	 1
  04879	68 ff 00 00 00	 push	 255			; 000000ffH
  0487e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  04883	50		 push	 eax
  04884	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0488a	51		 push	 ecx
  0488b	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  0488e	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  04891	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1515 : 			if(!AddBitmapToImageList(mdata->bitmap,nIconNormal)){

  04896	8b 45 10	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  04899	50		 push	 eax
  0489a	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  0489d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  048a0	52		 push	 edx
  048a1	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  048a4	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  048a9	85 c0		 test	 eax, eax
  048ab	75 5d		 jne	 SHORT $L199148

; 1516 : 				mdata->bitmap->DeleteImageList();

  048ad	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  048b0	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  048b3	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1517 : 				delete mdata->bitmap;

  048b8	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  048bb	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  048be	89 55 dc	 mov	 DWORD PTR $T202672[ebp], edx
  048c1	8b 45 dc	 mov	 eax, DWORD PTR $T202672[ebp]
  048c4	89 45 e0	 mov	 DWORD PTR $T202671[ebp], eax
  048c7	83 7d e0 00	 cmp	 DWORD PTR $T202671[ebp], 0
  048cb	74 12		 je	 SHORT $L202673
  048cd	6a 01		 push	 1
  048cf	8b 4d e0	 mov	 ecx, DWORD PTR $T202671[ebp]
  048d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  048d4	8b 4d e0	 mov	 ecx, DWORD PTR $T202671[ebp]
  048d7	ff 52 04	 call	 DWORD PTR [edx+4]
  048da	89 45 c8	 mov	 DWORD PTR tv148[ebp], eax
  048dd	eb 07		 jmp	 SHORT $L202674
$L202673:
  048df	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$L202674:

; 1518 : 				mdata->bitmap=NULL;

  048e6	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  048e9	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1519 : 				mdata->menuIconNormal = nIconNormal = -1;

  048f0	c7 45 10 ff ff
	ff ff		 mov	 DWORD PTR _nIconNormal$[ebp], -1
  048f7	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  048fa	8b 55 10	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  048fd	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1520 : 				mdata->xoffset = -1;

  04900	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  04903	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
$L199148:

; 1521 : 			}
; 1522 : 		}
; 1523 : 		return(TRUE);

  0490a	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR $T202675[ebp], 1
  04911	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04918	8d 4d ec	 lea	 ecx, DWORD PTR _junk$[ebp]
  0491b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  04921	8b 45 d8	 mov	 eax, DWORD PTR $T202675[ebp]
  04924	eb 1a		 jmp	 SHORT $L199142
$L199146:

; 1524 : 	}
; 1525 : 	return(FALSE);

  04926	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T202676[ebp], 0
  0492d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04934	8d 4d ec	 lea	 ecx, DWORD PTR _junk$[ebp]
  04937	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0493d	8b 45 d4	 mov	 eax, DWORD PTR $T202676[ebp]
$L199142:

; 1526 : }

  04940	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04943	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0494a	8b e5		 mov	 esp, ebp
  0494c	5d		 pop	 ebp
  0494d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L202677:
  002a4	8d 4d ec	 lea	 ecx, DWORD PTR _junk$[ebp]
  002a7	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202678:
  002ad	8b 45 e4	 mov	 eax, DWORD PTR $T202668[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002b6	c3		 ret	 0
__ehhandler$?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z:
  002b7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202680
  002bc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ModifyODMenuW@BCMenu@@QAEHPA_W0H@Z ENDP		; BCMenu::ModifyODMenuW
PUBLIC	?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
xdata$x	SEGMENT
$T202696 DD	0ffffffffH
	DD	FLAT:$L202690
	DD	00H
	DD	FLAT:$L202691
	DD	00H
	DD	FLAT:$L202692
$T202694 DD	019930520H
	DD	03H
	DD	FLAT:$T202696
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -48						; size = 4
tv143 = -44						; size = 4
tv72 = -40						; size = 4
_this$ = -36						; size = 4
$T202689 = -32						; size = 4
$T202688 = -28						; size = 4
$T202685 = -24						; size = 4
$T202684 = -20						; size = 4
_mdata$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pos$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nID$ = 16						; size = 4
_string$ = 20						; size = 4
?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; BCMenu::NewODMenu
; _this$ = ecx

; 1529 : {

  04950	55		 push	 ebp
  04951	8b ec		 mov	 ebp, esp
  04953	6a ff		 push	 -1
  04955	68 00 00 00 00	 push	 __ehhandler$?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0495a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  04960	50		 push	 eax
  04961	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  04968	83 ec 24	 sub	 esp, 36			; 00000024H
  0496b	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  0496e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1530 : 	BCMenuData *mdata;
; 1531 : 	
; 1532 : 	mdata = new BCMenuData;

  04975	6a 24		 push	 36			; 00000024H
  04977	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0497c	83 c4 04	 add	 esp, 4
  0497f	89 45 e8	 mov	 DWORD PTR $T202685[ebp], eax
  04982	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04986	83 7d e8 00	 cmp	 DWORD PTR $T202685[ebp], 0
  0498a	74 0d		 je	 SHORT $L202686
  0498c	8b 4d e8	 mov	 ecx, DWORD PTR $T202685[ebp]
  0498f	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  04994	89 45 d8	 mov	 DWORD PTR tv72[ebp], eax
  04997	eb 07		 jmp	 SHORT $L202687
$L202686:
  04999	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L202687:
  049a0	8b 45 d8	 mov	 eax, DWORD PTR tv72[ebp]
  049a3	89 45 ec	 mov	 DWORD PTR $T202684[ebp], eax
  049a6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  049aa	8b 4d ec	 mov	 ecx, DWORD PTR $T202684[ebp]
  049ad	89 4d f0	 mov	 DWORD PTR _mdata$[ebp], ecx

; 1533 : 	mdata->menuIconNormal = -1;

  049b0	8b 55 f0	 mov	 edx, DWORD PTR _mdata$[ebp]
  049b3	c7 42 0c ff ff
	ff ff		 mov	 DWORD PTR [edx+12], -1

; 1534 : 	mdata->xoffset=-1;

  049ba	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  049bd	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 1535 : #ifdef UNICODE
; 1536 : 	mdata->SetWideString((LPCTSTR)string);//SK: modified for dynamic allocation
; 1537 : #else
; 1538 : 	mdata->SetAnsiString(string);

  049c4	8d 4d 14	 lea	 ecx, DWORD PTR _string$[ebp]
  049c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  049cd	50		 push	 eax
  049ce	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  049d1	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString

; 1539 : #endif
; 1540 : 	mdata->nFlags = nFlags;

  049d6	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  049d9	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  049dc	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1541 : 	mdata->nID = nID;

  049df	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  049e2	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  049e5	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1542 : 	
; 1543 : //	if(nFlags & MF_POPUP)m_AllSubMenus.Add((HMENU)nID);
; 1544 : 		
; 1545 : 	if (nFlags&MF_OWNERDRAW){

  049e8	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  049eb	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  049f1	74 1a		 je	 SHORT $L199172

; 1546 : 		ASSERT(!(nFlags&MF_STRING));
; 1547 : 		ModifyMenu(pos,nFlags,nID,(LPCTSTR)mdata);

  049f3	8b 45 f0	 mov	 eax, DWORD PTR _mdata$[ebp]
  049f6	50		 push	 eax
  049f7	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  049fa	51		 push	 ecx
  049fb	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  049fe	52		 push	 edx
  049ff	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  04a02	50		 push	 eax
  04a03	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  04a06	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA

; 1548 : 	}
; 1549 : 	else if (nFlags&MF_STRING){

  04a0b	eb 60		 jmp	 SHORT $L199175
$L199172:
  04a0d	33 c9		 xor	 ecx, ecx
  04a0f	74 46		 je	 SHORT $L199176

; 1550 : 		ASSERT(!(nFlags&MF_OWNERDRAW));
; 1551 : 		ModifyMenu(pos,nFlags,nID,mdata->GetString());

  04a11	8d 55 e4	 lea	 edx, DWORD PTR $T202688[ebp]
  04a14	52		 push	 edx
  04a15	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04a18	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  04a1d	89 45 d4	 mov	 DWORD PTR tv143[ebp], eax
  04a20	8b 45 d4	 mov	 eax, DWORD PTR tv143[ebp]
  04a23	89 45 d0	 mov	 DWORD PTR tv140[ebp], eax
  04a26	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  04a2a	8b 4d d0	 mov	 ecx, DWORD PTR tv140[ebp]
  04a2d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  04a33	50		 push	 eax
  04a34	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  04a37	51		 push	 ecx
  04a38	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04a3b	52		 push	 edx
  04a3c	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  04a3f	50		 push	 eax
  04a40	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  04a43	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
  04a48	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04a4c	8d 4d e4	 lea	 ecx, DWORD PTR $T202688[ebp]
  04a4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1552 : 	}
; 1553 : 	else{

  04a55	eb 16		 jmp	 SHORT $L199175
$L199176:

; 1554 : 		ASSERT(nFlags&MF_SEPARATOR);
; 1555 : 		ModifyMenu(pos,nFlags,nID);

  04a57	6a 00		 push	 0
  04a59	8b 4d 10	 mov	 ecx, DWORD PTR _nID$[ebp]
  04a5c	51		 push	 ecx
  04a5d	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  04a60	52		 push	 edx
  04a61	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  04a64	50		 push	 eax
  04a65	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  04a68	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L199175:

; 1556 : 	}
; 1557 : 	
; 1558 : 	return(mdata);

  04a6d	8b 4d f0	 mov	 ecx, DWORD PTR _mdata$[ebp]
  04a70	89 4d e0	 mov	 DWORD PTR $T202689[ebp], ecx
  04a73	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04a7a	8d 4d 14	 lea	 ecx, DWORD PTR _string$[ebp]
  04a7d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  04a83	8b 45 e0	 mov	 eax, DWORD PTR $T202689[ebp]

; 1559 : };

  04a86	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04a89	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  04a90	8b e5		 mov	 esp, ebp
  04a92	5d		 pop	 ebp
  04a93	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L202690:
  002c1	8d 4d 14	 lea	 ecx, DWORD PTR _string$[ebp]
  002c4	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202691:
  002ca	8b 45 e8	 mov	 eax, DWORD PTR $T202685[ebp]
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d3	59		 pop	 ecx
  002d4	c3		 ret	 0
$L202692:
  002d5	8d 4d e4	 lea	 ecx, DWORD PTR $T202688[ebp]
  002d8	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  002de	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202694
  002e3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; BCMenu::NewODMenu
PUBLIC	?LoadToolbar@BCMenu@@QAEHI@Z			; BCMenu::LoadToolbar
PUBLIC	?LoadToolbars@BCMenu@@QAEHPBIH@Z		; BCMenu::LoadToolbars
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$199189 = -8						; size = 4
_returnflag$ = -4					; size = 4
_arID$ = 8						; size = 4
_n$ = 12						; size = 4
?LoadToolbars@BCMenu@@QAEHPBIH@Z PROC NEAR		; BCMenu::LoadToolbars
; _this$ = ecx

; 1562 : {

  04aa0	55		 push	 ebp
  04aa1	8b ec		 mov	 ebp, esp
  04aa3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  04aa6	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1563 : 	ASSERT(arID);
; 1564 : 	BOOL returnflag=TRUE;

  04aa9	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1

; 1565 : 	for(int i=0;i<n;++i){

  04ab0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$199189[ebp], 0
  04ab7	eb 09		 jmp	 SHORT $L199190
$L199191:
  04ab9	8b 45 f8	 mov	 eax, DWORD PTR _i$199189[ebp]
  04abc	83 c0 01	 add	 eax, 1
  04abf	89 45 f8	 mov	 DWORD PTR _i$199189[ebp], eax
$L199190:
  04ac2	8b 4d f8	 mov	 ecx, DWORD PTR _i$199189[ebp]
  04ac5	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  04ac8	7d 1f		 jge	 SHORT $L199192

; 1566 : 		if(!LoadToolbar(arID[i]))returnflag=FALSE;

  04aca	8b 55 f8	 mov	 edx, DWORD PTR _i$199189[ebp]
  04acd	8b 45 08	 mov	 eax, DWORD PTR _arID$[ebp]
  04ad0	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  04ad3	51		 push	 ecx
  04ad4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  04ad7	e8 00 00 00 00	 call	 ?LoadToolbar@BCMenu@@QAEHI@Z ; BCMenu::LoadToolbar
  04adc	85 c0		 test	 eax, eax
  04ade	75 07		 jne	 SHORT $L199193
  04ae0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0
$L199193:

; 1567 : 	}

  04ae7	eb d0		 jmp	 SHORT $L199191
$L199192:

; 1568 : 	return(returnflag);

  04ae9	8b 45 fc	 mov	 eax, DWORD PTR _returnflag$[ebp]

; 1569 : }

  04aec	8b e5		 mov	 esp, ebp
  04aee	5d		 pop	 ebp
  04aef	c2 08 00	 ret	 8
?LoadToolbars@BCMenu@@QAEHPBIH@Z ENDP			; BCMenu::LoadToolbars
_TEXT	ENDS
PUBLIC	?GetCount@CControlBar@@QBEHXZ			; CControlBar::GetCount
PUBLIC	?LoadToolBar@CToolBar@@QAEHI@Z			; CToolBar::LoadToolBar
PUBLIC	?GetMenuState@CMenu@@QBEIII@Z			; CMenu::GetMenuState
EXTRN	??0CToolBar@@QAE@XZ:NEAR			; CToolBar::CToolBar
EXTRN	?Create@CToolBar@@UAEHPAVCWnd@@KI@Z:NEAR	; CToolBar::Create
EXTRN	?CommandToIndex@CToolBar@@QBEHI@Z:NEAR		; CToolBar::CommandToIndex
EXTRN	?GetItemID@CToolBar@@QBEIH@Z:NEAR		; CToolBar::GetItemID
EXTRN	?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z:NEAR	; CToolBar::GetButtonInfo
EXTRN	??1CToolBar@@UAE@XZ:NEAR			; CToolBar::~CToolBar
xdata$x	SEGMENT
$T202705 DD	0ffffffffH
	DD	FLAT:$L202700
	DD	00H
	DD	FLAT:$L202701
$T202703 DD	019930520H
	DD	02H
	DD	FLAT:$T202705
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -244						; size = 4
$T202699 = -240						; size = 4
_i$199209 = -236					; size = 4
_imglist$199207 = -232					; size = 8
_pWnd$ = -224						; size = 4
_bar$ = -220						; size = 184
_xoffset$ = -32						; size = 4
_nID$ = -28						; size = 4
_nStyle$ = -24						; size = 4
_returnflag$ = -20					; size = 4
_xset$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nToolBar$ = 8						; size = 4
?LoadToolbar@BCMenu@@QAEHI@Z PROC NEAR			; BCMenu::LoadToolbar
; _this$ = ecx

; 1572 : {

  04b00	55		 push	 ebp
  04b01	8b ec		 mov	 ebp, esp
  04b03	6a ff		 push	 -1
  04b05	68 00 00 00 00	 push	 __ehhandler$?LoadToolbar@BCMenu@@QAEHI@Z
  04b0a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  04b10	50		 push	 eax
  04b11	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  04b18	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  04b1e	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1573 : 	UINT nID,nStyle;
; 1574 : 	BOOL returnflag=FALSE;

  04b24	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 1575 : 	CToolBar bar;

  04b2b	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04b31	e8 00 00 00 00	 call	 ??0CToolBar@@QAE@XZ	; CToolBar::CToolBar
  04b36	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1576 : 	int xoffset=-1,xset;

  04b3d	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _xoffset$[ebp], -1

; 1577 : 	
; 1578 : 	CWnd* pWnd = AfxGetMainWnd();

  04b44	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  04b49	89 85 20 ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 1579 : 	if (pWnd == NULL)pWnd = CWnd::GetDesktopWindow();

  04b4f	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _pWnd$[ebp], 0
  04b56	75 0b		 jne	 SHORT $L199205
  04b58	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  04b5d	89 85 20 ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax
$L199205:

; 1580 : 	bar.Create(pWnd);

  04b63	68 00 e8 00 00	 push	 59392			; 0000e800H
  04b68	68 00 28 00 50	 push	 1342187520		; 50002800H
  04b6d	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _pWnd$[ebp]
  04b73	50		 push	 eax
  04b74	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04b7a	e8 00 00 00 00	 call	 ?Create@CToolBar@@UAEHPAVCWnd@@KI@Z ; CToolBar::Create

; 1581 : 	if(bar.LoadToolBar(nToolBar)){

  04b7f	8b 4d 08	 mov	 ecx, DWORD PTR _nToolBar$[ebp]
  04b82	51		 push	 ecx
  04b83	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04b89	e8 00 00 00 00	 call	 ?LoadToolBar@CToolBar@@QAEHI@Z ; CToolBar::LoadToolBar
  04b8e	85 c0		 test	 eax, eax
  04b90	0f 84 27 01 00
	00		 je	 $L199206

; 1582 : 		CImageList imglist;

  04b96	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _imglist$199207[ebp]
  04b9c	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  04ba1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1583 : 		imglist.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  04ba5	6a 01		 push	 1
  04ba7	6a 01		 push	 1
  04ba9	68 ff 00 00 00	 push	 255			; 000000ffH
  04bae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  04bb4	52		 push	 edx
  04bb5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  04bba	50		 push	 eax
  04bbb	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _imglist$199207[ebp]
  04bc1	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1584 : 		if(AddBitmapToImageList(&imglist,nToolBar)){

  04bc6	8b 4d 08	 mov	 ecx, DWORD PTR _nToolBar$[ebp]
  04bc9	51		 push	 ecx
  04bca	8d 95 18 ff ff
	ff		 lea	 edx, DWORD PTR _imglist$199207[ebp]
  04bd0	52		 push	 edx
  04bd1	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  04bd7	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  04bdc	85 c0		 test	 eax, eax
  04bde	0f 84 ca 00 00
	00		 je	 $L199208

; 1585 : 			returnflag=TRUE;

  04be4	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1

; 1586 : 			for(int i=0;i<bar.GetCount();++i){

  04beb	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$199209[ebp], 0
  04bf5	eb 0f		 jmp	 SHORT $L199210
$L199211:
  04bf7	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _i$199209[ebp]
  04bfd	83 c0 01	 add	 eax, 1
  04c00	89 85 14 ff ff
	ff		 mov	 DWORD PTR _i$199209[ebp], eax
$L199210:
  04c06	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04c0c	e8 00 00 00 00	 call	 ?GetCount@CControlBar@@QBEHXZ ; CControlBar::GetCount
  04c11	39 85 14 ff ff
	ff		 cmp	 DWORD PTR _i$199209[ebp], eax
  04c17	0f 8d 91 00 00
	00		 jge	 $L199208

; 1587 : 				nID = bar.GetItemID(i); 

  04c1d	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _i$199209[ebp]
  04c23	51		 push	 ecx
  04c24	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04c2a	e8 00 00 00 00	 call	 ?GetItemID@CToolBar@@QBEIH@Z ; CToolBar::GetItemID
  04c2f	89 45 e4	 mov	 DWORD PTR _nID$[ebp], eax

; 1588 : 				if(nID && GetMenuState(nID, MF_BYCOMMAND)
; 1589 : 					!=0xFFFFFFFF){

  04c32	83 7d e4 00	 cmp	 DWORD PTR _nID$[ebp], 0
  04c36	74 71		 je	 SHORT $L199213
  04c38	6a 00		 push	 0
  04c3a	8b 55 e4	 mov	 edx, DWORD PTR _nID$[ebp]
  04c3d	52		 push	 edx
  04c3e	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  04c44	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  04c49	83 f8 ff	 cmp	 eax, -1
  04c4c	74 5b		 je	 SHORT $L199213

; 1590 : 					xoffset=bar.CommandToIndex(nID);

  04c4e	8b 45 e4	 mov	 eax, DWORD PTR _nID$[ebp]
  04c51	50		 push	 eax
  04c52	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04c58	e8 00 00 00 00	 call	 ?CommandToIndex@CToolBar@@QBEHI@Z ; CToolBar::CommandToIndex
  04c5d	89 45 e0	 mov	 DWORD PTR _xoffset$[ebp], eax

; 1591 : 					if(xoffset>=0){

  04c60	83 7d e0 00	 cmp	 DWORD PTR _xoffset$[ebp], 0
  04c64	7c 27		 jl	 SHORT $L199214

; 1592 : 						bar.GetButtonInfo(xoffset,nID,nStyle,xset);

  04c66	8d 4d f0	 lea	 ecx, DWORD PTR _xset$[ebp]
  04c69	51		 push	 ecx
  04c6a	8d 55 e8	 lea	 edx, DWORD PTR _nStyle$[ebp]
  04c6d	52		 push	 edx
  04c6e	8d 45 e4	 lea	 eax, DWORD PTR _nID$[ebp]
  04c71	50		 push	 eax
  04c72	8b 4d e0	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  04c75	51		 push	 ecx
  04c76	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04c7c	e8 00 00 00 00	 call	 ?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z ; CToolBar::GetButtonInfo

; 1593 : 						if(xset>0)xoffset=xset;

  04c81	83 7d f0 00	 cmp	 DWORD PTR _xset$[ebp], 0
  04c85	7e 06		 jle	 SHORT $L199214
  04c87	8b 55 f0	 mov	 edx, DWORD PTR _xset$[ebp]
  04c8a	89 55 e0	 mov	 DWORD PTR _xoffset$[ebp], edx
$L199214:

; 1594 : 					}
; 1595 : 					ModifyODMenu(NULL,nID,&imglist,xoffset);

  04c8d	8b 45 e0	 mov	 eax, DWORD PTR _xoffset$[ebp]
  04c90	50		 push	 eax
  04c91	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _imglist$199207[ebp]
  04c97	51		 push	 ecx
  04c98	8b 55 e4	 mov	 edx, DWORD PTR _nID$[ebp]
  04c9b	52		 push	 edx
  04c9c	6a 00		 push	 0
  04c9e	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  04ca4	e8 00 00 00 00	 call	 ?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCImageList@@H@Z ; BCMenu::ModifyODMenuA
$L199213:

; 1596 : 				}
; 1597 : 			}

  04ca9	e9 49 ff ff ff	 jmp	 $L199211
$L199208:

; 1598 : 		}
; 1599 : 	}

  04cae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04cb2	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _imglist$199207[ebp]
  04cb8	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L199206:

; 1600 : 	return(returnflag);

  04cbd	8b 45 ec	 mov	 eax, DWORD PTR _returnflag$[ebp]
  04cc0	89 85 10 ff ff
	ff		 mov	 DWORD PTR $T202699[ebp], eax
  04cc6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04ccd	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04cd3	e8 00 00 00 00	 call	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
  04cd8	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR $T202699[ebp]

; 1601 : }

  04cde	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04ce1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  04ce8	8b e5		 mov	 esp, ebp
  04cea	5d		 pop	 ebp
  04ceb	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202700:
  002e8	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  002ee	e9 00 00 00 00	 jmp	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
$L202701:
  002f3	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _imglist$199207[ebp]
  002f9	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?LoadToolbar@BCMenu@@QAEHI@Z:
  002fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202703
  00303	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadToolbar@BCMenu@@QAEHI@Z ENDP			; BCMenu::LoadToolbar
xdata$x	SEGMENT
$T202712 DD	0ffffffffH
	DD	FLAT:$L202708
$T202710 DD	019930520H
	DD	01H
	DD	FLAT:$T202712
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -224						; size = 4
$T202707 = -220						; size = 4
_pWnd$ = -216						; size = 4
_bar$ = -212						; size = 184
_offset$ = -28						; size = 4
_nStyle$ = -24						; size = 4
_returnflag$ = -20					; size = 4
_xset$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_nToolBar$ = 12						; size = 4
_xoffset$ = 16						; size = 4
?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z PROC NEAR		; BCMenu::LoadFromToolBar
; _this$ = ecx

; 1604 : {

  04cf0	55		 push	 ebp
  04cf1	8b ec		 mov	 ebp, esp
  04cf3	6a ff		 push	 -1
  04cf5	68 00 00 00 00	 push	 __ehhandler$?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z
  04cfa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  04d00	50		 push	 eax
  04d01	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  04d08	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  04d0e	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1605 : 	int xset,offset;
; 1606 : 	UINT nStyle;
; 1607 : 	BOOL returnflag=FALSE;

  04d14	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 1608 : 	CToolBar bar;

  04d1b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04d21	e8 00 00 00 00	 call	 ??0CToolBar@@QAE@XZ	; CToolBar::CToolBar
  04d26	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1609 : 	
; 1610 : 	CWnd* pWnd = AfxGetMainWnd();

  04d2d	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  04d32	89 85 28 ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax

; 1611 : 	if (pWnd == NULL)pWnd = CWnd::GetDesktopWindow();

  04d38	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _pWnd$[ebp], 0
  04d3f	75 0b		 jne	 SHORT $L199229
  04d41	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  04d46	89 85 28 ff ff
	ff		 mov	 DWORD PTR _pWnd$[ebp], eax
$L199229:

; 1612 : 	bar.Create(pWnd);

  04d4c	68 00 e8 00 00	 push	 59392			; 0000e800H
  04d51	68 00 28 00 50	 push	 1342187520		; 50002800H
  04d56	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _pWnd$[ebp]
  04d5c	50		 push	 eax
  04d5d	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04d63	e8 00 00 00 00	 call	 ?Create@CToolBar@@UAEHPAVCWnd@@KI@Z ; CToolBar::Create

; 1613 : 	if(bar.LoadToolBar(nToolBar)){

  04d68	8b 4d 0c	 mov	 ecx, DWORD PTR _nToolBar$[ebp]
  04d6b	51		 push	 ecx
  04d6c	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04d72	e8 00 00 00 00	 call	 ?LoadToolBar@CToolBar@@QAEHI@Z ; CToolBar::LoadToolBar
  04d77	85 c0		 test	 eax, eax
  04d79	74 48		 je	 SHORT $L199230

; 1614 : 		offset=bar.CommandToIndex(nID);

  04d7b	8b 55 08	 mov	 edx, DWORD PTR _nID$[ebp]
  04d7e	52		 push	 edx
  04d7f	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04d85	e8 00 00 00 00	 call	 ?CommandToIndex@CToolBar@@QBEHI@Z ; CToolBar::CommandToIndex
  04d8a	89 45 e4	 mov	 DWORD PTR _offset$[ebp], eax

; 1615 : 		if(offset>=0){

  04d8d	83 7d e4 00	 cmp	 DWORD PTR _offset$[ebp], 0
  04d91	7c 30		 jl	 SHORT $L199230

; 1616 : 			bar.GetButtonInfo(offset,nID,nStyle,xset);

  04d93	8d 45 f0	 lea	 eax, DWORD PTR _xset$[ebp]
  04d96	50		 push	 eax
  04d97	8d 4d e8	 lea	 ecx, DWORD PTR _nStyle$[ebp]
  04d9a	51		 push	 ecx
  04d9b	8d 55 08	 lea	 edx, DWORD PTR _nID$[ebp]
  04d9e	52		 push	 edx
  04d9f	8b 45 e4	 mov	 eax, DWORD PTR _offset$[ebp]
  04da2	50		 push	 eax
  04da3	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04da9	e8 00 00 00 00	 call	 ?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z ; CToolBar::GetButtonInfo

; 1617 : 			if(xset>0)xoffset=xset;

  04dae	83 7d f0 00	 cmp	 DWORD PTR _xset$[ebp], 0
  04db2	7e 08		 jle	 SHORT $L199232
  04db4	8b 4d 10	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  04db7	8b 55 f0	 mov	 edx, DWORD PTR _xset$[ebp]
  04dba	89 11		 mov	 DWORD PTR [ecx], edx
$L199232:

; 1618 : 			returnflag=TRUE;

  04dbc	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1
$L199230:

; 1619 : 		}
; 1620 : 	}
; 1621 : 	return(returnflag);

  04dc3	8b 45 ec	 mov	 eax, DWORD PTR _returnflag$[ebp]
  04dc6	89 85 24 ff ff
	ff		 mov	 DWORD PTR $T202707[ebp], eax
  04dcc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04dd3	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  04dd9	e8 00 00 00 00	 call	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
  04dde	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR $T202707[ebp]

; 1622 : }

  04de4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04de7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  04dee	8b e5		 mov	 esp, ebp
  04df0	5d		 pop	 ebp
  04df1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L202708:
  00308	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bar$[ebp]
  0030e	e9 00 00 00 00	 jmp	 ??1CToolBar@@UAE@XZ	; CToolBar::~CToolBar
__ehhandler$?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z:
  00313	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202710
  00318	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadFromToolBar@BCMenu@@QAEHIIAAH@Z ENDP		; BCMenu::LoadFromToolBar
PUBLIC	?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z	; BCMenu::FindMenuItem
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -20						; size = 4
_loc$199245 = -16					; size = 4
_pMenu$199246 = -12					; size = 4
_i$ = -8						; size = 4
_pData$ = -4						; size = 4
_nID$ = 8						; size = 4
?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z PROC NEAR	; BCMenu::FindMenuItem
; _this$ = ecx

; 1626 : {

  04e00	55		 push	 ebp
  04e01	8b ec		 mov	 ebp, esp
  04e03	83 ec 14	 sub	 esp, 20			; 00000014H
  04e06	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1627 : 	BCMenuData *pData = NULL;

  04e09	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pData$[ebp], 0

; 1628 : 	int i;
; 1629 : 	
; 1630 : 	for(i = 0; i <= m_MenuList.GetUpperBound(); i++){

  04e10	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  04e17	eb 09		 jmp	 SHORT $L199240
$L199241:
  04e19	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  04e1c	83 c0 01	 add	 eax, 1
  04e1f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L199240:
  04e22	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  04e25	83 c1 08	 add	 ecx, 8
  04e28	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  04e2d	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  04e30	7f 31		 jg	 SHORT $L199242

; 1631 : 		if (m_MenuList[i]->nID == nID){

  04e32	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  04e35	51		 push	 ecx
  04e36	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  04e39	83 c1 08	 add	 ecx, 8
  04e3c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  04e41	8b 10		 mov	 edx, DWORD PTR [eax]
  04e43	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  04e46	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  04e49	75 16		 jne	 SHORT $L199243

; 1632 : 			pData = m_MenuList[i];

  04e4b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  04e4e	51		 push	 ecx
  04e4f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  04e52	83 c1 08	 add	 ecx, 8
  04e55	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  04e5a	8b 10		 mov	 edx, DWORD PTR [eax]
  04e5c	89 55 fc	 mov	 DWORD PTR _pData$[ebp], edx

; 1633 : 			break;

  04e5f	eb 02		 jmp	 SHORT $L199242
$L199243:

; 1634 : 		}
; 1635 : 	}

  04e61	eb b6		 jmp	 SHORT $L199241
$L199242:

; 1636 : 	if (!pData){

  04e63	83 7d fc 00	 cmp	 DWORD PTR _pData$[ebp], 0
  04e67	75 27		 jne	 SHORT $L199244

; 1637 : 		int loc;
; 1638 : 		BCMenu *pMenu = FindMenuOption(nID, loc);

  04e69	8d 45 f0	 lea	 eax, DWORD PTR _loc$199245[ebp]
  04e6c	50		 push	 eax
  04e6d	8b 4d 08	 mov	 ecx, DWORD PTR _nID$[ebp]
  04e70	51		 push	 ecx
  04e71	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  04e74	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  04e79	89 45 f4	 mov	 DWORD PTR _pMenu$199246[ebp], eax

; 1639 : 		ASSERT(pMenu != this);
; 1640 : 		if (loc >= 0){

  04e7c	83 7d f0 00	 cmp	 DWORD PTR _loc$199245[ebp], 0
  04e80	7c 0e		 jl	 SHORT $L199244

; 1641 : 			return pMenu->FindMenuItem(nID);

  04e82	8b 55 08	 mov	 edx, DWORD PTR _nID$[ebp]
  04e85	52		 push	 edx
  04e86	8b 4d f4	 mov	 ecx, DWORD PTR _pMenu$199246[ebp]
  04e89	e8 00 00 00 00	 call	 ?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuItem
  04e8e	eb 03		 jmp	 SHORT $L199237
$L199244:

; 1642 : 		}
; 1643 : 	}
; 1644 : 	return pData;

  04e90	8b 45 fc	 mov	 eax, DWORD PTR _pData$[ebp]
$L199237:

; 1645 : }

  04e93	8b e5		 mov	 esp, ebp
  04e95	5d		 pop	 ebp
  04e96	c2 04 00	 ret	 4
?FindMenuItem@BCMenu@@IAEPAVBCMenuData@@I@Z ENDP	; BCMenu::FindMenuItem
_TEXT	ENDS
PUBLIC	?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z		; BCMenu::GetSubMenu
PUBLIC	?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ	; CArray<BCMenu *,BCMenu *>::GetSize
PUBLIC	??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::operator[]
PUBLIC	??A?$CArray@HAAH@@QAEAAHH@Z			; CArray<int,int &>::operator[]
PUBLIC	?GetMenuItemID@CMenu@@QBEIH@Z			; CMenu::GetMenuItemID
EXTRN	___RTDynamicCast:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -28						; size = 4
_j$ = -24						; size = 4
_psubmenu$ = -20					; size = 4
_foundflag$ = -16					; size = 4
_pgoodmenu$ = -12					; size = 4
_i$ = -8						; size = 4
_numsubs$ = -4						; size = 4
_nId$ = 8						; size = 4
_nLoc$ = 12						; size = 4
_bcsubs$ = 16						; size = 4
_bclocs$ = 20						; size = 4
?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z PROC NEAR ; BCMenu::FindAnotherMenuOption
; _this$ = ecx

; 1650 : {

  04ea0	55		 push	 ebp
  04ea1	8b ec		 mov	 ebp, esp
  04ea3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  04ea6	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1651 : 	int i,numsubs,j;
; 1652 : 	BCMenu *psubmenu,*pgoodmenu;
; 1653 : 	BOOL foundflag;
; 1654 : 	
; 1655 : 	for(i=0;i<(int)(GetMenuItemCount());++i){

  04ea9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  04eb0	eb 09		 jmp	 SHORT $L199263
$L199264:
  04eb2	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  04eb5	83 c0 01	 add	 eax, 1
  04eb8	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L199263:
  04ebb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  04ebe	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  04ec3	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  04ec6	0f 8d e0 00 00
	00		 jge	 $L199265

; 1656 : #ifdef _CPPRTTI 
; 1657 : 		psubmenu=dynamic_cast<BCMenu *>(GetSubMenu(i));

  04ecc	6a 00		 push	 0
  04ece	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  04ed3	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  04ed8	6a 00		 push	 0
  04eda	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  04edd	51		 push	 ecx
  04ede	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  04ee1	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  04ee6	50		 push	 eax
  04ee7	e8 00 00 00 00	 call	 ___RTDynamicCast
  04eec	83 c4 14	 add	 esp, 20			; 00000014H
  04eef	89 45 ec	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1658 : #else
; 1659 : 		psubmenu=(BCMenu *)GetSubMenu(i);
; 1660 : #endif
; 1661 : 		if(psubmenu){

  04ef2	83 7d ec 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  04ef6	74 2e		 je	 SHORT $L199268

; 1662 : 			pgoodmenu=psubmenu->FindAnotherMenuOption(nId,nLoc,bcsubs,bclocs);

  04ef8	8b 55 14	 mov	 edx, DWORD PTR _bclocs$[ebp]
  04efb	52		 push	 edx
  04efc	8b 45 10	 mov	 eax, DWORD PTR _bcsubs$[ebp]
  04eff	50		 push	 eax
  04f00	8b 4d 0c	 mov	 ecx, DWORD PTR _nLoc$[ebp]
  04f03	51		 push	 ecx
  04f04	8b 55 08	 mov	 edx, DWORD PTR _nId$[ebp]
  04f07	52		 push	 edx
  04f08	8b 4d ec	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  04f0b	e8 00 00 00 00	 call	 ?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ; BCMenu::FindAnotherMenuOption
  04f10	89 45 f4	 mov	 DWORD PTR _pgoodmenu$[ebp], eax

; 1663 : 			if(pgoodmenu)return(pgoodmenu);

  04f13	83 7d f4 00	 cmp	 DWORD PTR _pgoodmenu$[ebp], 0
  04f17	74 08		 je	 SHORT $L199269
  04f19	8b 45 f4	 mov	 eax, DWORD PTR _pgoodmenu$[ebp]
  04f1c	e9 96 00 00 00	 jmp	 $L199255
$L199269:

; 1664 : 		}
; 1665 : 		else if(nId==(int)GetMenuItemID(i)){

  04f21	e9 81 00 00 00	 jmp	 $L199270
$L199268:
  04f26	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  04f29	50		 push	 eax
  04f2a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  04f2d	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  04f32	39 45 08	 cmp	 DWORD PTR _nId$[ebp], eax
  04f35	75 70		 jne	 SHORT $L199270

; 1666 : 			numsubs=bcsubs.GetSize();

  04f37	8b 4d 10	 mov	 ecx, DWORD PTR _bcsubs$[ebp]
  04f3a	e8 00 00 00 00	 call	 ?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ ; CArray<BCMenu *,BCMenu *>::GetSize
  04f3f	89 45 fc	 mov	 DWORD PTR _numsubs$[ebp], eax

; 1667 : 			foundflag=TRUE;

  04f42	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _foundflag$[ebp], 1

; 1668 : 			for(j=0;j<numsubs;++j){

  04f49	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  04f50	eb 09		 jmp	 SHORT $L199273
$L199274:
  04f52	8b 4d e8	 mov	 ecx, DWORD PTR _j$[ebp]
  04f55	83 c1 01	 add	 ecx, 1
  04f58	89 4d e8	 mov	 DWORD PTR _j$[ebp], ecx
$L199273:
  04f5b	8b 55 e8	 mov	 edx, DWORD PTR _j$[ebp]
  04f5e	3b 55 fc	 cmp	 edx, DWORD PTR _numsubs$[ebp]
  04f61	7d 31		 jge	 SHORT $L199275

; 1669 : 				if(bcsubs[j]==this&&bclocs[j]==i){

  04f63	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  04f66	50		 push	 eax
  04f67	8b 4d 10	 mov	 ecx, DWORD PTR _bcsubs$[ebp]
  04f6a	e8 00 00 00 00	 call	 ??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::operator[]
  04f6f	8b 08		 mov	 ecx, DWORD PTR [eax]
  04f71	3b 4d e4	 cmp	 ecx, DWORD PTR _this$[ebp]
  04f74	75 1c		 jne	 SHORT $L199276
  04f76	8b 55 e8	 mov	 edx, DWORD PTR _j$[ebp]
  04f79	52		 push	 edx
  04f7a	8b 4d 14	 mov	 ecx, DWORD PTR _bclocs$[ebp]
  04f7d	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  04f82	8b 00		 mov	 eax, DWORD PTR [eax]
  04f84	3b 45 f8	 cmp	 eax, DWORD PTR _i$[ebp]
  04f87	75 09		 jne	 SHORT $L199276

; 1670 : 					foundflag=FALSE;

  04f89	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _foundflag$[ebp], 0

; 1671 : 					break;

  04f90	eb 02		 jmp	 SHORT $L199275
$L199276:

; 1672 : 				}
; 1673 : 			}

  04f92	eb be		 jmp	 SHORT $L199274
$L199275:

; 1674 : 			if(foundflag){

  04f94	83 7d f0 00	 cmp	 DWORD PTR _foundflag$[ebp], 0
  04f98	74 0d		 je	 SHORT $L199270

; 1675 : 				nLoc=i;

  04f9a	8b 4d 0c	 mov	 ecx, DWORD PTR _nLoc$[ebp]
  04f9d	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  04fa0	89 11		 mov	 DWORD PTR [ecx], edx

; 1676 : 				return(this);

  04fa2	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  04fa5	eb 10		 jmp	 SHORT $L199255
$L199270:

; 1677 : 			}
; 1678 : 		}
; 1679 : 	}

  04fa7	e9 06 ff ff ff	 jmp	 $L199264
$L199265:

; 1680 : 	nLoc = -1;

  04fac	8b 45 0c	 mov	 eax, DWORD PTR _nLoc$[ebp]
  04faf	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 1681 : 	return(NULL);

  04fb5	33 c0		 xor	 eax, eax
$L199255:

; 1682 : }

  04fb7	8b e5		 mov	 esp, ebp
  04fb9	5d		 pop	 ebp
  04fba	c2 10 00	 ret	 16			; 00000010H
?FindAnotherMenuOption@BCMenu@@IAEPAV1@HAAHAAV?$CArray@PAVBCMenu@@PAV1@@@AAV?$CArray@HAAH@@@Z ENDP ; BCMenu::FindAnotherMenuOption
; Function compile flags: /Odt
_this$ = -16						; size = 4
_psubmenu$ = -12					; size = 4
_pgoodmenu$ = -8					; size = 4
_i$ = -4						; size = 4
_nId$ = 8						; size = 4
_nLoc$ = 12						; size = 4
?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z PROC NEAR	; BCMenu::FindMenuOption
; _this$ = ecx

; 1685 : {

  04fc0	55		 push	 ebp
  04fc1	8b ec		 mov	 ebp, esp
  04fc3	83 ec 10	 sub	 esp, 16			; 00000010H
  04fc6	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1686 : 	int i;
; 1687 : 	BCMenu *psubmenu,*pgoodmenu;
; 1688 : 	
; 1689 : 	for(i=0;i<(int)(GetMenuItemCount());++i){

  04fc9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  04fd0	eb 09		 jmp	 SHORT $L199287
$L199288:
  04fd2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  04fd5	83 c0 01	 add	 eax, 1
  04fd8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L199287:
  04fdb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04fde	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  04fe3	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  04fe6	7d 6f		 jge	 SHORT $L199289

; 1690 : #ifdef _CPPRTTI 
; 1691 : 		psubmenu=dynamic_cast<BCMenu *>(GetSubMenu(i));

  04fe8	6a 00		 push	 0
  04fea	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  04fef	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  04ff4	6a 00		 push	 0
  04ff6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  04ff9	51		 push	 ecx
  04ffa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  04ffd	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  05002	50		 push	 eax
  05003	e8 00 00 00 00	 call	 ___RTDynamicCast
  05008	83 c4 14	 add	 esp, 20			; 00000014H
  0500b	89 45 f4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1692 : #else
; 1693 : 		psubmenu=(BCMenu *)GetSubMenu(i);
; 1694 : #endif
; 1695 : 		if(psubmenu){

  0500e	83 7d f4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  05012	74 20		 je	 SHORT $L199291

; 1696 : 			pgoodmenu=psubmenu->FindMenuOption(nId,nLoc);

  05014	8b 55 0c	 mov	 edx, DWORD PTR _nLoc$[ebp]
  05017	52		 push	 edx
  05018	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  0501b	50		 push	 eax
  0501c	8b 4d f4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  0501f	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  05024	89 45 f8	 mov	 DWORD PTR _pgoodmenu$[ebp], eax

; 1697 : 			if(pgoodmenu)return(pgoodmenu);

  05027	83 7d f8 00	 cmp	 DWORD PTR _pgoodmenu$[ebp], 0
  0502b	74 05		 je	 SHORT $L199292
  0502d	8b 45 f8	 mov	 eax, DWORD PTR _pgoodmenu$[ebp]
  05030	eb 30		 jmp	 SHORT $L199282
$L199292:

; 1698 : 		}
; 1699 : 		else if(nId==(int)GetMenuItemID(i)){

  05032	eb 1e		 jmp	 SHORT $L199293
$L199291:
  05034	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  05037	51		 push	 ecx
  05038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0503b	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  05040	39 45 08	 cmp	 DWORD PTR _nId$[ebp], eax
  05043	75 0d		 jne	 SHORT $L199293

; 1700 : 			nLoc=i;

  05045	8b 55 0c	 mov	 edx, DWORD PTR _nLoc$[ebp]
  05048	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0504b	89 02		 mov	 DWORD PTR [edx], eax

; 1701 : 			return(this);

  0504d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  05050	eb 10		 jmp	 SHORT $L199282
$L199293:

; 1702 : 		}
; 1703 : 	}

  05052	e9 7b ff ff ff	 jmp	 $L199288
$L199289:

; 1704 : 	nLoc = -1;

  05057	8b 4d 0c	 mov	 ecx, DWORD PTR _nLoc$[ebp]
  0505a	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 1705 : 	return(NULL);

  05060	33 c0		 xor	 eax, eax
$L199282:

; 1706 : }

  05062	8b e5		 mov	 esp, ebp
  05064	5d		 pop	 ebp
  05065	c2 08 00	 ret	 8
?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ENDP		; BCMenu::FindMenuOption
_TEXT	ENDS
EXTRN	__imp__wcscmp:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
_szWide$199312 = -20					; size = 4
_j$ = -16						; size = 4
_psubmenu$ = -12					; size = 4
_pmenulist$ = -8					; size = 4
_i$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z PROC NEAR ; BCMenu::FindMenuOption
; _this$ = ecx

; 1709 : {

  05070	55		 push	 ebp
  05071	8b ec		 mov	 ebp, esp
  05073	83 ec 18	 sub	 esp, 24			; 00000018H
  05076	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1710 : 	int i,j;
; 1711 : 	BCMenu *psubmenu;
; 1712 : 	BCMenuData *pmenulist;
; 1713 : 	
; 1714 : 	for(i=0;i<(int)(GetMenuItemCount());++i){

  05079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  05080	eb 09		 jmp	 SHORT $L199305
$L199306:
  05082	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  05085	83 c0 01	 add	 eax, 1
  05088	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L199305:
  0508b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0508e	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  05093	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  05096	0f 8d b8 00 00
	00		 jge	 $L199307

; 1715 : #ifdef _CPPRTTI 
; 1716 : 		psubmenu=dynamic_cast<BCMenu *>(GetSubMenu(i));

  0509c	6a 00		 push	 0
  0509e	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  050a3	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  050a8	6a 00		 push	 0
  050aa	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  050ad	51		 push	 ecx
  050ae	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  050b1	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  050b6	50		 push	 eax
  050b7	e8 00 00 00 00	 call	 ___RTDynamicCast
  050bc	83 c4 14	 add	 esp, 20			; 00000014H
  050bf	89 45 f4	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 1717 : #else
; 1718 : 		psubmenu=(BCMenu *)GetSubMenu(i);
; 1719 : #endif
; 1720 : 		if(psubmenu){

  050c2	83 7d f4 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  050c6	74 1c		 je	 SHORT $L199309

; 1721 : 			pmenulist=psubmenu->FindMenuOption(lpstrText);

  050c8	8b 55 08	 mov	 edx, DWORD PTR _lpstrText$[ebp]
  050cb	52		 push	 edx
  050cc	8b 4d f4	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  050cf	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
  050d4	89 45 f8	 mov	 DWORD PTR _pmenulist$[ebp], eax

; 1722 : 			if(pmenulist)return(pmenulist);

  050d7	83 7d f8 00	 cmp	 DWORD PTR _pmenulist$[ebp], 0
  050db	74 05		 je	 SHORT $L199310
  050dd	8b 45 f8	 mov	 eax, DWORD PTR _pmenulist$[ebp]
  050e0	eb 74		 jmp	 SHORT $L199299
$L199310:

; 1723 : 		}
; 1724 : 		else{

  050e2	eb 6b		 jmp	 SHORT $L199311
$L199309:

; 1725 : 			const wchar_t *szWide;//SK: we use const to prevent misuse of this Ptr
; 1726 : 			for(j=0;j<=m_MenuList.GetUpperBound();++j){     

  050e4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  050eb	eb 09		 jmp	 SHORT $L199313
$L199314:
  050ed	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  050f0	83 c0 01	 add	 eax, 1
  050f3	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$L199313:
  050f6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  050f9	83 c1 08	 add	 ecx, 8
  050fc	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  05101	39 45 f0	 cmp	 DWORD PTR _j$[ebp], eax
  05104	7f 49		 jg	 SHORT $L199311

; 1727 : 				szWide = m_MenuList[j]->GetWideString ();

  05106	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  05109	51		 push	 ecx
  0510a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0510d	83 c1 08	 add	 ecx, 8
  05110	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05115	8b 08		 mov	 ecx, DWORD PTR [eax]
  05117	e8 00 00 00 00	 call	 ?GetWideString@BCMenuData@@QAEPB_WXZ ; BCMenuData::GetWideString
  0511c	89 45 ec	 mov	 DWORD PTR _szWide$199312[ebp], eax

; 1728 : 				if(szWide && !wcscmp(lpstrText,szWide))//SK: modified for dynamic allocation

  0511f	83 7d ec 00	 cmp	 DWORD PTR _szWide$199312[ebp], 0
  05123	74 28		 je	 SHORT $L199316
  05125	8b 55 ec	 mov	 edx, DWORD PTR _szWide$199312[ebp]
  05128	52		 push	 edx
  05129	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0512c	50		 push	 eax
  0512d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscmp
  05133	83 c4 08	 add	 esp, 8
  05136	85 c0		 test	 eax, eax
  05138	75 13		 jne	 SHORT $L199316

; 1729 : 					return(m_MenuList[j]);

  0513a	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  0513d	51		 push	 ecx
  0513e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  05141	83 c1 08	 add	 ecx, 8
  05144	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05149	8b 00		 mov	 eax, DWORD PTR [eax]
  0514b	eb 09		 jmp	 SHORT $L199299
$L199316:

; 1730 : 			}

  0514d	eb 9e		 jmp	 SHORT $L199314
$L199311:

; 1731 : 		}
; 1732 : 	}

  0514f	e9 2e ff ff ff	 jmp	 $L199306
$L199307:

; 1733 : 	return(NULL);

  05154	33 c0		 xor	 eax, eax
$L199299:

; 1734 : }

  05156	8b e5		 mov	 esp, ebp
  05158	5d		 pop	 ebp
  05159	c2 04 00	 ret	 4
?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ENDP	; BCMenu::FindMenuOption
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nResource$ = 8						; size = 4
?LoadMenuA@BCMenu@@UAEHH@Z PROC NEAR			; BCMenu::LoadMenuA
; _this$ = ecx

; 1738 : {

  05160	55		 push	 ebp
  05161	8b ec		 mov	 ebp, esp
  05163	51		 push	 ecx
  05164	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1739 : 	return(BCMenu::LoadMenu(MAKEINTRESOURCE(nResource)));

  05167	0f b7 45 08	 movzx	 eax, WORD PTR _nResource$[ebp]
  0516b	50		 push	 eax
  0516c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0516f	e8 00 00 00 00	 call	 ?LoadMenuA@BCMenu@@UAEHPBD@Z ; BCMenu::LoadMenuA

; 1740 : };

  05174	8b e5		 mov	 esp, ebp
  05176	5d		 pop	 ebp
  05177	c2 04 00	 ret	 4
?LoadMenuA@BCMenu@@UAEHH@Z ENDP				; BCMenu::LoadMenuA
_TEXT	ENDS
PUBLIC	?InsertSpaces@BCMenu@@IAEXXZ			; BCMenu::InsertSpaces
PUBLIC	?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::Add
PUBLIC	??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
PUBLIC	??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ ; CTypedPtrArray<CPtrArray,BCMenu *>::CTypedPtrArray<CPtrArray,BCMenu *>
PUBLIC	??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ ; CTypedPtrArray<CPtrArray,BCMenu *>::~CTypedPtrArray<CPtrArray,BCMenu *>
PUBLIC	??0?$CArray@HH@@QAE@XZ				; CArray<int,int>::CArray<int,int>
PUBLIC	?GetAt@?$CArray@HH@@QAEAAHH@Z			; CArray<int,int>::GetAt
PUBLIC	?SetAt@?$CArray@HH@@QAEXHH@Z			; CArray<int,int>::SetAt
PUBLIC	?Add@?$CArray@HH@@QAEHH@Z			; CArray<int,int>::Add
PUBLIC	?RemoveAt@?$CArray@HH@@QAEXHH@Z			; CArray<int,int>::RemoveAt
PUBLIC	??1?$CArray@HH@@UAE@XZ				; CArray<int,int>::~CArray<int,int>
PUBLIC	?CreateMenu@CMenu@@QAEHXZ			; CMenu::CreateMenu
PUBLIC	?CreatePopupMenu@CMenu@@QAEHXZ			; CMenu::CreatePopupMenu
EXTRN	__imp__LockResource@4:NEAR
EXTRN	__imp__FindResourceA@12:NEAR
EXTRN	__imp__LoadResource@8:NEAR
EXTRN	_memcpy:NEAR
EXTRN	?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z:NEAR ; AfxFindResourceHandle
xdata$x	SEGMENT
$T202733 DD	0ffffffffH
	DD	FLAT:$L202726
	DD	00H
	DD	FLAT:$L202727
	DD	01H
	DD	FLAT:$L202728
	DD	01H
	DD	FLAT:$L202729
$T202731 DD	019930520H
	DD	04H
	DD	FLAT:$T202733
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv181 = -136						; size = 4
_this$ = -132						; size = 4
$T202725 = -128						; size = 4
$T202724 = -124						; size = 4
$T202721 = -120						; size = 4
$T202720 = -116						; size = 4
$T202719 = -112						; size = 4
_str$199497 = -108					; size = 4
_i$199492 = -104					; size = 4
_pSubMenu$199480 = -100					; size = 4
_pTp$ = -96						; size = 4
_j$ = -92						; size = 4
_uFlags$ = -88						; size = 4
_hRsrc$ = -84						; size = 4
_dwFlags$ = -80						; size = 2
_m_StackEnd$ = -76					; size = 20
_hGlobal$ = -56						; size = 4
_m_Stack$ = -52						; size = 20
_szCaption$ = -32					; size = 4
_hInst$ = -28						; size = 4
_nLen$ = -24						; size = 4
_pTpHdr$ = -20						; size = 4
_dwID$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_lpszResourceName$ = 8					; size = 4
?LoadMenuA@BCMenu@@UAEHPBD@Z PROC NEAR			; BCMenu::LoadMenuA
; _this$ = ecx

; 1743 : {

  05180	55		 push	 ebp
  05181	8b ec		 mov	 ebp, esp
  05183	6a ff		 push	 -1
  05185	68 00 00 00 00	 push	 __ehhandler$?LoadMenuA@BCMenu@@UAEHPBD@Z
  0518a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05190	50		 push	 eax
  05191	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05198	83 ec 7c	 sub	 esp, 124		; 0000007cH
  0519b	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);
; 1745 : 	ASSERT(lpszResourceName != NULL);
; 1746 : 	
; 1747 : 	// Find the Menu Resource:
; 1748 : 	HINSTANCE hInst = AfxFindResourceHandle(lpszResourceName,RT_MENU);

  051a1	6a 04		 push	 4
  051a3	8b 45 08	 mov	 eax, DWORD PTR _lpszResourceName$[ebp]
  051a6	50		 push	 eax
  051a7	e8 00 00 00 00	 call	 ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z ; AfxFindResourceHandle
  051ac	89 45 e4	 mov	 DWORD PTR _hInst$[ebp], eax

; 1749 : 	HRSRC hRsrc = ::FindResource(hInst,lpszResourceName,RT_MENU);

  051af	6a 04		 push	 4
  051b1	8b 4d 08	 mov	 ecx, DWORD PTR _lpszResourceName$[ebp]
  051b4	51		 push	 ecx
  051b5	8b 55 e4	 mov	 edx, DWORD PTR _hInst$[ebp]
  051b8	52		 push	 edx
  051b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  051bf	89 45 ac	 mov	 DWORD PTR _hRsrc$[ebp], eax

; 1750 : 	if (hRsrc == NULL){

  051c2	83 7d ac 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  051c6	75 1a		 jne	 SHORT $L199338

; 1751 : 		hInst = NULL;

  051c8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hInst$[ebp], 0

; 1752 : 		hRsrc = ::FindResource(hInst,lpszResourceName,RT_MENU);

  051cf	6a 04		 push	 4
  051d1	8b 45 08	 mov	 eax, DWORD PTR _lpszResourceName$[ebp]
  051d4	50		 push	 eax
  051d5	8b 4d e4	 mov	 ecx, DWORD PTR _hInst$[ebp]
  051d8	51		 push	 ecx
  051d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  051df	89 45 ac	 mov	 DWORD PTR _hRsrc$[ebp], eax
$L199338:

; 1753 : 	}
; 1754 : 	if(hRsrc == NULL)return FALSE;

  051e2	83 7d ac 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  051e6	75 07		 jne	 SHORT $L199342
  051e8	33 c0		 xor	 eax, eax
  051ea	e9 89 04 00 00	 jmp	 $L199327
$L199342:

; 1755 : 	
; 1756 : 	// Load the Menu Resource:
; 1757 : 	
; 1758 : 	HGLOBAL hGlobal = LoadResource(hInst, hRsrc);

  051ef	8b 55 ac	 mov	 edx, DWORD PTR _hRsrc$[ebp]
  051f2	52		 push	 edx
  051f3	8b 45 e4	 mov	 eax, DWORD PTR _hInst$[ebp]
  051f6	50		 push	 eax
  051f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  051fd	89 45 c8	 mov	 DWORD PTR _hGlobal$[ebp], eax

; 1759 : 	if(hGlobal == NULL)return FALSE;

  05200	83 7d c8 00	 cmp	 DWORD PTR _hGlobal$[ebp], 0
  05204	75 07		 jne	 SHORT $L199344
  05206	33 c0		 xor	 eax, eax
  05208	e9 6b 04 00 00	 jmp	 $L199327
$L199344:

; 1760 : 
; 1761 : 	// first destroy the menu if we're trying to loadmenu again
; 1762 : 	DestroyMenu();

  0520d	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05213	8b 11		 mov	 edx, DWORD PTR [ecx]
  05215	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0521b	ff 52 24	 call	 DWORD PTR [edx+36]

; 1763 : 
; 1764 : 	// Attempt to create us as a menu...
; 1765 : 	if(!CMenu::CreateMenu())return FALSE;

  0521e	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05224	e8 00 00 00 00	 call	 ?CreateMenu@CMenu@@QAEHXZ ; CMenu::CreateMenu
  05229	85 c0		 test	 eax, eax
  0522b	75 07		 jne	 SHORT $L199345
  0522d	33 c0		 xor	 eax, eax
  0522f	e9 44 04 00 00	 jmp	 $L199327
$L199345:

; 1766 : 	
; 1767 : 	// Get Item template Header, and calculate offset of MENUITEMTEMPLATES
; 1768 : 	
; 1769 : 	MENUITEMTEMPLATEHEADER *pTpHdr=
; 1770 : 		(MENUITEMTEMPLATEHEADER*)LockResource(hGlobal);

  05234	8b 45 c8	 mov	 eax, DWORD PTR _hGlobal$[ebp]
  05237	50		 push	 eax
  05238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  0523e	89 45 ec	 mov	 DWORD PTR _pTpHdr$[ebp], eax

; 1771 : 	BYTE* pTp=(BYTE*)pTpHdr + 
; 1772 : 		(sizeof(MENUITEMTEMPLATEHEADER) + pTpHdr->offset);

  05241	8b 4d ec	 mov	 ecx, DWORD PTR _pTpHdr$[ebp]
  05244	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  05248	8b 45 ec	 mov	 eax, DWORD PTR _pTpHdr$[ebp]
  0524b	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0524f	89 4d a0	 mov	 DWORD PTR _pTp$[ebp], ecx

; 1773 : 	
; 1774 : 	
; 1775 : 	// Variables needed during processing of Menu Item Templates:
; 1776 : 	
; 1777 : 	int j=0;

  05252	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 1778 : 	WORD    dwFlags = 0;              // Flags of the Menu Item

  05259	66 c7 45 b0 00
	00		 mov	 WORD PTR _dwFlags$[ebp], 0

; 1779 : 	WORD    dwID  = 0;              // ID of the Menu Item

  0525f	66 c7 45 f0 00
	00		 mov	 WORD PTR _dwID$[ebp], 0

; 1780 : 	UINT    uFlags;                  // Actual Flags.
; 1781 : 	wchar_t *szCaption=NULL;

  05265	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _szCaption$[ebp], 0

; 1782 : 	int      nLen   = 0;                // Length of caption

  0526c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 1783 : 	CTypedPtrArray<CPtrArray, BCMenu*>  m_Stack;    // Popup menu stack

  05273	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  05276	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ
  0527b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1784 : 	CArray<BOOL,BOOL>  m_StackEnd;    // Popup menu stack

  05282	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  05285	e8 00 00 00 00	 call	 ??0?$CArray@HH@@QAE@XZ	; CArray<int,int>::CArray<int,int>
  0528a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1785 : 	m_Stack.Add(this);                  // Add it to this...

  0528e	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  05294	52		 push	 edx
  05295	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  05298	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::Add

; 1786 : 	m_StackEnd.Add(FALSE);

  0529d	6a 00		 push	 0
  0529f	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  052a2	e8 00 00 00 00	 call	 ?Add@?$CArray@HH@@QAEHH@Z ; CArray<int,int>::Add
$L199461:

; 1787 : 	
; 1788 : 	do{
; 1789 : 		// Obtain Flags and (if necessary), the ID...
; 1790 : 		memcpy(&dwFlags, pTp, sizeof(WORD));pTp+=sizeof(WORD);// Obtain Flags

  052a7	6a 02		 push	 2
  052a9	8b 45 a0	 mov	 eax, DWORD PTR _pTp$[ebp]
  052ac	50		 push	 eax
  052ad	8d 4d b0	 lea	 ecx, DWORD PTR _dwFlags$[ebp]
  052b0	51		 push	 ecx
  052b1	e8 00 00 00 00	 call	 _memcpy
  052b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  052b9	8b 55 a0	 mov	 edx, DWORD PTR _pTp$[ebp]
  052bc	83 c2 02	 add	 edx, 2
  052bf	89 55 a0	 mov	 DWORD PTR _pTp$[ebp], edx

; 1791 : 		if(!(dwFlags & MF_POPUP)){

  052c2	0f b7 45 b0	 movzx	 eax, WORD PTR _dwFlags$[ebp]
  052c6	83 e0 10	 and	 eax, 16			; 00000010H
  052c9	75 1d		 jne	 SHORT $L199466

; 1792 : 			memcpy(&dwID, pTp, sizeof(WORD)); // Obtain ID

  052cb	6a 02		 push	 2
  052cd	8b 4d a0	 mov	 ecx, DWORD PTR _pTp$[ebp]
  052d0	51		 push	 ecx
  052d1	8d 55 f0	 lea	 edx, DWORD PTR _dwID$[ebp]
  052d4	52		 push	 edx
  052d5	e8 00 00 00 00	 call	 _memcpy
  052da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1793 : 			pTp+=sizeof(WORD);

  052dd	8b 45 a0	 mov	 eax, DWORD PTR _pTp$[ebp]
  052e0	83 c0 02	 add	 eax, 2
  052e3	89 45 a0	 mov	 DWORD PTR _pTp$[ebp], eax

; 1794 : 		}
; 1795 : 		else dwID = 0;

  052e6	eb 06		 jmp	 SHORT $L199469
$L199466:
  052e8	66 c7 45 f0 00
	00		 mov	 WORD PTR _dwID$[ebp], 0
$L199469:

; 1796 : 		
; 1797 : 		uFlags = (UINT)dwFlags; // Remove MF_END from the flags that will

  052ee	0f b7 4d b0	 movzx	 ecx, WORD PTR _dwFlags$[ebp]
  052f2	89 4d a8	 mov	 DWORD PTR _uFlags$[ebp], ecx

; 1798 : 		if(uFlags & MF_END) // be passed to the Append(OD)Menu functions.

  052f5	8b 55 a8	 mov	 edx, DWORD PTR _uFlags$[ebp]
  052f8	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  052fe	74 0b		 je	 SHORT $L199471

; 1799 : 			uFlags -= MF_END;

  05300	8b 45 a8	 mov	 eax, DWORD PTR _uFlags$[ebp]
  05303	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  05308	89 45 a8	 mov	 DWORD PTR _uFlags$[ebp], eax
$L199471:

; 1800 : 		
; 1801 : 		// Obtain Caption (and length)
; 1802 : 		
; 1803 : 		nLen = 0;

  0530b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 1804 : 		szCaption=new wchar_t[wcslen((wchar_t *)pTp)+1];

  05312	8b 4d a0	 mov	 ecx, DWORD PTR _pTp$[ebp]
  05315	51		 push	 ecx
  05316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0531c	83 c4 04	 add	 esp, 4
  0531f	8d 54 00 02	 lea	 edx, DWORD PTR [eax+eax+2]
  05323	52		 push	 edx
  05324	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  05329	83 c4 04	 add	 esp, 4
  0532c	89 45 90	 mov	 DWORD PTR $T202719[ebp], eax
  0532f	8b 45 90	 mov	 eax, DWORD PTR $T202719[ebp]
  05332	89 45 e0	 mov	 DWORD PTR _szCaption$[ebp], eax

; 1805 : 		wcscpy(szCaption,(wchar_t *)pTp);

  05335	8b 4d a0	 mov	 ecx, DWORD PTR _pTp$[ebp]
  05338	51		 push	 ecx
  05339	8b 55 e0	 mov	 edx, DWORD PTR _szCaption$[ebp]
  0533c	52		 push	 edx
  0533d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy
  05343	83 c4 08	 add	 esp, 8

; 1806 : 		pTp=&pTp[(wcslen((wchar_t *)pTp)+1)*sizeof(wchar_t)];//modified SK

  05346	8b 45 a0	 mov	 eax, DWORD PTR _pTp$[ebp]
  05349	50		 push	 eax
  0534a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  05350	83 c4 04	 add	 esp, 4
  05353	8b 4d a0	 mov	 ecx, DWORD PTR _pTp$[ebp]
  05356	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  0535a	89 55 a0	 mov	 DWORD PTR _pTp$[ebp], edx

; 1807 : 		
; 1808 : 		// Handle popup menus first....
; 1809 : 		
; 1810 : 		//WideCharToMultiByte
; 1811 : 		if(dwFlags & MF_POPUP){

  0535d	0f b7 45 b0	 movzx	 eax, WORD PTR _dwFlags$[ebp]
  05361	83 e0 10	 and	 eax, 16			; 00000010H
  05364	0f 84 07 01 00
	00		 je	 $L199478

; 1812 : 			if(dwFlags & MF_END)m_StackEnd.SetAt(m_Stack.GetUpperBound(),TRUE);

  0536a	0f b7 4d b0	 movzx	 ecx, WORD PTR _dwFlags$[ebp]
  0536e	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  05374	74 13		 je	 SHORT $L199479
  05376	6a 01		 push	 1
  05378	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0537b	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  05380	50		 push	 eax
  05381	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  05384	e8 00 00 00 00	 call	 ?SetAt@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetAt
$L199479:

; 1813 : 			BCMenu* pSubMenu = new BCMenu;

  05389	6a 64		 push	 100			; 00000064H
  0538b	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05390	89 45 88	 mov	 DWORD PTR $T202721[ebp], eax
  05393	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05397	83 7d 88 00	 cmp	 DWORD PTR $T202721[ebp], 0
  0539b	74 10		 je	 SHORT $L202722
  0539d	8b 4d 88	 mov	 ecx, DWORD PTR $T202721[ebp]
  053a0	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  053a5	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
  053ab	eb 0a		 jmp	 SHORT $L202723
$L202722:
  053ad	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv181[ebp], 0
$L202723:
  053b7	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv181[ebp]
  053bd	89 55 8c	 mov	 DWORD PTR $T202720[ebp], edx
  053c0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  053c4	8b 45 8c	 mov	 eax, DWORD PTR $T202720[ebp]
  053c7	89 45 9c	 mov	 DWORD PTR _pSubMenu$199480[ebp], eax

; 1814 : //added by vito--
; 1815 : 			pSubMenu->SetMenuItemBkColor( m_menuItemBkColor );

  053ca	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  053d0	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  053d3	52		 push	 edx
  053d4	8b 4d 9c	 mov	 ecx, DWORD PTR _pSubMenu$199480[ebp]
  053d7	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 1816 : 			pSubMenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  053dc	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  053e2	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  053e5	51		 push	 ecx
  053e6	8b 4d 9c	 mov	 ecx, DWORD PTR _pSubMenu$199480[ebp]
  053e9	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor

; 1817 : //--			
; 1818 : 			pSubMenu->m_unselectcheck=m_unselectcheck;

  053ee	8b 55 9c	 mov	 edx, DWORD PTR _pSubMenu$199480[ebp]
  053f1	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  053f7	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  053fa	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1819 : 			pSubMenu->m_selectcheck=m_selectcheck;

  053fd	8b 55 9c	 mov	 edx, DWORD PTR _pSubMenu$199480[ebp]
  05400	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  05406	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  05409	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 1820 : 			pSubMenu->checkmaps=checkmaps;

  0540c	8b 55 9c	 mov	 edx, DWORD PTR _pSubMenu$199480[ebp]
  0540f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  05415	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  05418	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1821 : 			pSubMenu->checkmapsshare=TRUE;

  0541b	8b 55 9c	 mov	 edx, DWORD PTR _pSubMenu$199480[ebp]
  0541e	c7 42 40 01 00
	00 00		 mov	 DWORD PTR [edx+64], 1

; 1822 : 			pSubMenu->CreatePopupMenu();

  05425	8b 4d 9c	 mov	 ecx, DWORD PTR _pSubMenu$199480[ebp]
  05428	e8 00 00 00 00	 call	 ?CreatePopupMenu@CMenu@@QAEHXZ ; CMenu::CreatePopupMenu

; 1823 : 			
; 1824 : 			// Append it to the top of the stack:
; 1825 : 			
; 1826 : 			m_Stack[m_Stack.GetUpperBound()]->AppendODMenuW(szCaption,uFlags,
; 1827 : 				(UINT)pSubMenu->m_hMenu, -1);

  0542d	6a ff		 push	 -1
  0542f	8b 45 9c	 mov	 eax, DWORD PTR _pSubMenu$199480[ebp]
  05432	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  05435	51		 push	 ecx
  05436	8b 55 a8	 mov	 edx, DWORD PTR _uFlags$[ebp]
  05439	52		 push	 edx
  0543a	8b 45 e0	 mov	 eax, DWORD PTR _szCaption$[ebp]
  0543d	50		 push	 eax
  0543e	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  05441	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  05446	50		 push	 eax
  05447	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0544a	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
  0544f	8b 08		 mov	 ecx, DWORD PTR [eax]
  05451	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 1828 : 
; 1829 : 			m_Stack.Add(pSubMenu);

  05456	8b 4d 9c	 mov	 ecx, DWORD PTR _pSubMenu$199480[ebp]
  05459	51		 push	 ecx
  0545a	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0545d	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::Add

; 1830 : 			m_StackEnd.Add(FALSE);

  05462	6a 00		 push	 0
  05464	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  05467	e8 00 00 00 00	 call	 ?Add@?$CArray@HH@@QAEHH@Z ; CArray<int,int>::Add

; 1831 : 		}
; 1832 : 		else {

  0546c	e9 a7 00 00 00	 jmp	 $L199486
$L199478:

; 1833 : 			m_Stack[m_Stack.GetUpperBound()]->AppendODMenuW(szCaption, uFlags,
; 1834 : 				dwID, -1);

  05471	6a ff		 push	 -1
  05473	0f b7 55 f0	 movzx	 edx, WORD PTR _dwID$[ebp]
  05477	52		 push	 edx
  05478	8b 45 a8	 mov	 eax, DWORD PTR _uFlags$[ebp]
  0547b	50		 push	 eax
  0547c	8b 4d e0	 mov	 ecx, DWORD PTR _szCaption$[ebp]
  0547f	51		 push	 ecx
  05480	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  05483	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  05488	50		 push	 eax
  05489	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0548c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
  05491	8b 08		 mov	 ecx, DWORD PTR [eax]
  05493	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 1835 : 			if(dwFlags & MF_END)m_StackEnd.SetAt(m_Stack.GetUpperBound(),TRUE);

  05498	0f b7 55 b0	 movzx	 edx, WORD PTR _dwFlags$[ebp]
  0549c	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  054a2	74 13		 je	 SHORT $L199487
  054a4	6a 01		 push	 1
  054a6	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  054a9	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  054ae	50		 push	 eax
  054af	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  054b2	e8 00 00 00 00	 call	 ?SetAt@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetAt
$L199487:

; 1836 : 			j = m_Stack.GetUpperBound();

  054b7	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  054ba	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  054bf	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax
$L199489:

; 1837 : 			while(j>=0 && m_StackEnd.GetAt(j)){

  054c2	83 7d a4 00	 cmp	 DWORD PTR _j$[ebp], 0
  054c6	7c 50		 jl	 SHORT $L199486
  054c8	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  054cb	50		 push	 eax
  054cc	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  054cf	e8 00 00 00 00	 call	 ?GetAt@?$CArray@HH@@QAEAAHH@Z ; CArray<int,int>::GetAt
  054d4	83 38 00	 cmp	 DWORD PTR [eax], 0
  054d7	74 3f		 je	 SHORT $L199486

; 1838 : 				m_Stack[m_Stack.GetUpperBound()]->InsertSpaces();

  054d9	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  054dc	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  054e1	50		 push	 eax
  054e2	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  054e5	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
  054ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  054ec	e8 00 00 00 00	 call	 ?InsertSpaces@BCMenu@@IAEXXZ ; BCMenu::InsertSpaces

; 1839 : 				m_Stack.RemoveAt(j);

  054f1	6a 01		 push	 1
  054f3	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  054f6	51		 push	 ecx
  054f7	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  054fa	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 1840 : 				m_StackEnd.RemoveAt(j);

  054ff	6a 01		 push	 1
  05501	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  05504	52		 push	 edx
  05505	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  05508	e8 00 00 00 00	 call	 ?RemoveAt@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::RemoveAt

; 1841 : 				--j;

  0550d	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  05510	83 e8 01	 sub	 eax, 1
  05513	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax

; 1842 : 			}

  05516	eb aa		 jmp	 SHORT $L199489
$L199486:

; 1843 : 		}
; 1844 : 		
; 1845 : 		delete[] szCaption;

  05518	8b 4d e0	 mov	 ecx, DWORD PTR _szCaption$[ebp]
  0551b	89 4d 84	 mov	 DWORD PTR $T202724[ebp], ecx
  0551e	8b 55 84	 mov	 edx, DWORD PTR $T202724[ebp]
  05521	52		 push	 edx
  05522	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  05527	83 c4 04	 add	 esp, 4

; 1846 : 	}while(m_Stack.GetUpperBound() != -1);

  0552a	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  0552d	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  05532	83 f8 ff	 cmp	 eax, -1
  05535	0f 85 6c fd ff
	ff		 jne	 $L199461

; 1847 : 	
; 1848 : 	for(int i=0;i<(int)GetMenuItemCount();++i){

  0553b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _i$199492[ebp], 0
  05542	eb 09		 jmp	 SHORT $L199494
$L199495:
  05544	8b 45 98	 mov	 eax, DWORD PTR _i$199492[ebp]
  05547	83 c0 01	 add	 eax, 1
  0554a	89 45 98	 mov	 DWORD PTR _i$199492[ebp], eax
$L199494:
  0554d	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05553	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  05558	39 45 98	 cmp	 DWORD PTR _i$199492[ebp], eax
  0555b	0f 8d e5 00 00
	00		 jge	 $L199496

; 1849 : 		CString str=m_MenuList[i]->GetString();

  05561	8d 4d 94	 lea	 ecx, DWORD PTR _str$199497[ebp]
  05564	51		 push	 ecx
  05565	8b 55 98	 mov	 edx, DWORD PTR _i$199492[ebp]
  05568	52		 push	 edx
  05569	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0556f	83 c1 08	 add	 ecx, 8
  05572	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05577	8b 08		 mov	 ecx, DWORD PTR [eax]
  05579	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  0557e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1850 : 		if(GetSubMenu(i)){

  05582	8b 45 98	 mov	 eax, DWORD PTR _i$199492[ebp]
  05585	50		 push	 eax
  05586	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0558c	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  05591	85 c0		 test	 eax, eax
  05593	74 4e		 je	 SHORT $L199499

; 1851 : 			m_MenuList[i]->nFlags=MF_POPUP|MF_BYPOSITION;

  05595	8b 4d 98	 mov	 ecx, DWORD PTR _i$199492[ebp]
  05598	51		 push	 ecx
  05599	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0559f	83 c1 08	 add	 ecx, 8
  055a2	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  055a7	8b 10		 mov	 edx, DWORD PTR [eax]
  055a9	c7 42 10 10 04
	00 00		 mov	 DWORD PTR [edx+16], 1040 ; 00000410H

; 1852 : 			ModifyMenu(i,MF_POPUP|MF_BYPOSITION,
; 1853 : 				(UINT)GetSubMenu(i)->m_hMenu,str);

  055b0	8d 4d 94	 lea	 ecx, DWORD PTR _str$199497[ebp]
  055b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  055b9	50		 push	 eax
  055ba	8b 45 98	 mov	 eax, DWORD PTR _i$199492[ebp]
  055bd	50		 push	 eax
  055be	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  055c4	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  055c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  055cc	51		 push	 ecx
  055cd	68 10 04 00 00	 push	 1040			; 00000410H
  055d2	8b 55 98	 mov	 edx, DWORD PTR _i$199492[ebp]
  055d5	52		 push	 edx
  055d6	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  055dc	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA

; 1854 : 		}
; 1855 : 		else{

  055e1	eb 51		 jmp	 SHORT $L199501
$L199499:

; 1856 : 			m_MenuList[i]->nFlags=MF_STRING|MF_BYPOSITION;

  055e3	8b 45 98	 mov	 eax, DWORD PTR _i$199492[ebp]
  055e6	50		 push	 eax
  055e7	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  055ed	83 c1 08	 add	 ecx, 8
  055f0	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  055f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  055f7	c7 41 10 00 04
	00 00		 mov	 DWORD PTR [ecx+16], 1024 ; 00000400H

; 1857 : 			ModifyMenu(i,MF_STRING|MF_BYPOSITION,m_MenuList[i]->nID,str);

  055fe	8d 4d 94	 lea	 ecx, DWORD PTR _str$199497[ebp]
  05601	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05607	50		 push	 eax
  05608	8b 55 98	 mov	 edx, DWORD PTR _i$199492[ebp]
  0560b	52		 push	 edx
  0560c	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05612	83 c1 08	 add	 ecx, 8
  05615	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0561a	8b 00		 mov	 eax, DWORD PTR [eax]
  0561c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0561f	51		 push	 ecx
  05620	68 00 04 00 00	 push	 1024			; 00000400H
  05625	8b 55 98	 mov	 edx, DWORD PTR _i$199492[ebp]
  05628	52		 push	 edx
  05629	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0562f	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L199501:

; 1858 : 		}
; 1859 : 	}

  05634	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05638	8d 4d 94	 lea	 ecx, DWORD PTR _str$199497[ebp]
  0563b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05641	e9 fe fe ff ff	 jmp	 $L199495
$L199496:

; 1860 : 
; 1861 : 	m_loadmenu=TRUE;

  05646	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0564c	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [eax+80], 1

; 1862 : 	
; 1863 : 	return(TRUE);

  05653	c7 45 80 01 00
	00 00		 mov	 DWORD PTR $T202725[ebp], 1
  0565a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0565e	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  05661	e8 00 00 00 00	 call	 ??1?$CArray@HH@@UAE@XZ	; CArray<int,int>::~CArray<int,int>
  05666	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0566d	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  05670	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
  05675	8b 45 80	 mov	 eax, DWORD PTR $T202725[ebp]
$L199327:

; 1864 : }

  05678	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0567b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05682	8b e5		 mov	 esp, ebp
  05684	5d		 pop	 ebp
  05685	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202726:
  0031d	8d 4d cc	 lea	 ecx, DWORD PTR _m_Stack$[ebp]
  00320	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
$L202727:
  00325	8d 4d b4	 lea	 ecx, DWORD PTR _m_StackEnd$[ebp]
  00328	e9 00 00 00 00	 jmp	 ??1?$CArray@HH@@UAE@XZ	; CArray<int,int>::~CArray<int,int>
$L202728:
  0032d	8b 45 88	 mov	 eax, DWORD PTR $T202721[ebp]
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00336	c3		 ret	 0
$L202729:
  00337	8d 4d 94	 lea	 ecx, DWORD PTR _str$199497[ebp]
  0033a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?LoadMenuA@BCMenu@@UAEHPBD@Z:
  00340	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202731
  00345	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadMenuA@BCMenu@@UAEHPBD@Z ENDP			; BCMenu::LoadMenuA
PUBLIC	??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *>::`vftable'
PUBLIC	??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z ; CTypedPtrArray<CPtrArray,BCMenu *>::`scalar deleting destructor'
PUBLIC	??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z:NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::`vector deleting destructor'
;	COMDAT ??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
CONST	SEGMENT
??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ DD FLAT:??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CPtrArray@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
rdata$r	SEGMENT
??_R4?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@ DD 00H ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8
	DD	FLAT:??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8
_DATA	SEGMENT
??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8 DD FLAT:??_7type_info@@6B@ ; CTypedPtrArray<CPtrArray,BCMenu *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT
??_R3?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 DD 00H	; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT
??_R2?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 DD FLAT:??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CPtrArray@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@8 DD FLAT:??_R0?AV?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@@8 ; CTypedPtrArray<CPtrArray,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::CTypedPtrArray<CPtrArray,BCMenu *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CPtrArray@@QAE@XZ	; CPtrArray::CPtrArray
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::CTypedPtrArray<CPtrArray,BCMenu *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::~CTypedPtrArray<CPtrArray,BCMenu *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPtrArray@@UAE@XZ	; CPtrArray::~CPtrArray
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::~CTypedPtrArray<CPtrArray,BCMenu *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L199510
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L199510:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@UAEPAXI@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetSize@CPtrArray@@QBEHXZ			; CPtrArray::GetSize
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:NEAR
EXTRN	?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:NEAR ; CMenu::GetMenuStringA
xdata$x	SEGMENT
$T202751 DD	0ffffffffH
	DD	FLAT:$L202745
	DD	00H
	DD	FLAT:$L202746
	DD	01H
	DD	FLAT:$L202747
$T202749 DD	019930520H
	DD	03H
	DD	FLAT:$T202751
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv146 = -68						; size = 4
tv70 = -64						; size = 4
_this$ = -60						; size = 4
$T202744 = -56						; size = 4
$T202743 = -52						; size = 4
_str$ = -48						; size = 4
_j$ = -44						; size = 4
_nummenu$ = -40						; size = 4
_menuloc$ = -36						; size = 4
_menustart$ = -32					; size = 4
_listloc$ = -28						; size = 4
_name$ = -24						; size = 4
_i$ = -20						; size = 4
_nummenulist$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?GetMenuStart@BCMenu@@IAEHXZ PROC NEAR			; BCMenu::GetMenuStart
; _this$ = ecx

; 1867 : {

  05690	55		 push	 ebp
  05691	8b ec		 mov	 ebp, esp
  05693	6a ff		 push	 -1
  05695	68 00 00 00 00	 push	 __ehhandler$?GetMenuStart@BCMenu@@IAEHXZ
  0569a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  056a0	50		 push	 eax
  056a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  056a8	83 ec 38	 sub	 esp, 56			; 00000038H
  056ab	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 1868 : 	if(!m_loadmenu)return(0);

  056ae	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  056b1	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  056b5	75 07		 jne	 SHORT $L199515
  056b7	33 c0		 xor	 eax, eax
  056b9	e9 68 01 00 00	 jmp	 $L199514
$L199515:

; 1869 : 
; 1870 : 	CString name,str;

  056be	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  056c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  056c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  056ce	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  056d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  056d7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1871 : 	int menuloc=-1,listloc=-1,menustart=0,i=0,j=0;

  056db	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _menuloc$[ebp], -1
  056e2	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _listloc$[ebp], -1
  056e9	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _menustart$[ebp], 0
  056f0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  056f7	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 1872 : 	int nummenulist=m_MenuList.GetSize();

  056fe	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  05701	83 c1 08	 add	 ecx, 8
  05704	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  05709	89 45 f0	 mov	 DWORD PTR _nummenulist$[ebp], eax

; 1873 : 	int nummenu=(int)GetMenuItemCount();

  0570c	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0570f	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  05714	89 45 d8	 mov	 DWORD PTR _nummenu$[ebp], eax
$L199527:

; 1874 : 
; 1875 : 	while(i<nummenu&&menuloc==-1){

  05717	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  0571a	3b 4d d8	 cmp	 ecx, DWORD PTR _nummenu$[ebp]
  0571d	0f 8d c0 00 00
	00		 jge	 $L199528
  05723	83 7d dc ff	 cmp	 DWORD PTR _menuloc$[ebp], -1
  05727	0f 85 b6 00 00
	00		 jne	 $L199528

; 1876 : 		GetMenuString (i, name, MF_BYPOSITION);

  0572d	68 00 04 00 00	 push	 1024			; 00000400H
  05732	8d 55 e8	 lea	 edx, DWORD PTR _name$[ebp]
  05735	52		 push	 edx
  05736	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  05739	50		 push	 eax
  0573a	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0573d	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 1877 : 		if(name.GetLength()>0){

  05742	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  05745	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0574b	85 c0		 test	 eax, eax
  0574d	0f 8e 82 00 00
	00		 jle	 $L199529

; 1878 : 			for(j=0;j<nummenulist;++j){

  05753	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0575a	eb 09		 jmp	 SHORT $L199530
$L199531:
  0575c	8b 4d d4	 mov	 ecx, DWORD PTR _j$[ebp]
  0575f	83 c1 01	 add	 ecx, 1
  05762	89 4d d4	 mov	 DWORD PTR _j$[ebp], ecx
$L199530:
  05765	8b 55 d4	 mov	 edx, DWORD PTR _j$[ebp]
  05768	3b 55 f0	 cmp	 edx, DWORD PTR _nummenulist$[ebp]
  0576b	7d 68		 jge	 SHORT $L199529

; 1879 : 				str=m_MenuList[j]->GetString();

  0576d	8d 45 cc	 lea	 eax, DWORD PTR $T202743[ebp]
  05770	50		 push	 eax
  05771	8b 4d d4	 mov	 ecx, DWORD PTR _j$[ebp]
  05774	51		 push	 ecx
  05775	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  05778	83 c1 08	 add	 ecx, 8
  0577b	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05780	8b 08		 mov	 ecx, DWORD PTR [eax]
  05782	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  05787	89 45 c0	 mov	 DWORD PTR tv70[ebp], eax
  0578a	8b 55 c0	 mov	 edx, DWORD PTR tv70[ebp]
  0578d	89 55 bc	 mov	 DWORD PTR tv146[ebp], edx
  05790	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05794	8b 45 bc	 mov	 eax, DWORD PTR tv146[ebp]
  05797	50		 push	 eax
  05798	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0579b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  057a1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  057a5	8d 4d cc	 lea	 ecx, DWORD PTR $T202743[ebp]
  057a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1880 : 				if(name==str){

  057ae	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  057b1	51		 push	 ecx
  057b2	8d 55 e8	 lea	 edx, DWORD PTR _name$[ebp]
  057b5	52		 push	 edx
  057b6	e8 00 00 00 00	 call	 ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ; ATL::operator==
  057bb	83 c4 08	 add	 esp, 8
  057be	0f b6 c0	 movzx	 eax, al
  057c1	85 c0		 test	 eax, eax
  057c3	74 0e		 je	 SHORT $L199534

; 1881 : 					menuloc=i;

  057c5	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  057c8	89 4d dc	 mov	 DWORD PTR _menuloc$[ebp], ecx

; 1882 : 					listloc=j;

  057cb	8b 55 d4	 mov	 edx, DWORD PTR _j$[ebp]
  057ce	89 55 e4	 mov	 DWORD PTR _listloc$[ebp], edx

; 1883 : 					break;

  057d1	eb 02		 jmp	 SHORT $L199529
$L199534:

; 1884 : 				}
; 1885 : 			}

  057d3	eb 87		 jmp	 SHORT $L199531
$L199529:

; 1886 : 		}
; 1887 : 		++i;

  057d5	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  057d8	83 c0 01	 add	 eax, 1
  057db	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax

; 1888 : 	}

  057de	e9 34 ff ff ff	 jmp	 $L199527
$L199528:

; 1889 : 	if(menuloc>=0&&listloc>=0&&menuloc>=listloc)menustart=menuloc-listloc;

  057e3	83 7d dc 00	 cmp	 DWORD PTR _menuloc$[ebp], 0
  057e7	7c 17		 jl	 SHORT $L199535
  057e9	83 7d e4 00	 cmp	 DWORD PTR _listloc$[ebp], 0
  057ed	7c 11		 jl	 SHORT $L199535
  057ef	8b 4d dc	 mov	 ecx, DWORD PTR _menuloc$[ebp]
  057f2	3b 4d e4	 cmp	 ecx, DWORD PTR _listloc$[ebp]
  057f5	7c 09		 jl	 SHORT $L199535
  057f7	8b 55 dc	 mov	 edx, DWORD PTR _menuloc$[ebp]
  057fa	2b 55 e4	 sub	 edx, DWORD PTR _listloc$[ebp]
  057fd	89 55 e0	 mov	 DWORD PTR _menustart$[ebp], edx
$L199535:

; 1890 : 	return(menustart);

  05800	8b 45 e0	 mov	 eax, DWORD PTR _menustart$[ebp]
  05803	89 45 c8	 mov	 DWORD PTR $T202744[ebp], eax
  05806	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0580a	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0580d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05813	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0581a	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  0581d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05823	8b 45 c8	 mov	 eax, DWORD PTR $T202744[ebp]
$L199514:

; 1891 : }

  05826	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05829	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05830	8b e5		 mov	 esp, ebp
  05832	5d		 pop	 ebp
  05833	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202745:
  0034a	8d 4d e8	 lea	 ecx, DWORD PTR _name$[ebp]
  0034d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202746:
  00353	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00356	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202747:
  0035c	8d 4d cc	 lea	 ecx, DWORD PTR $T202743[ebp]
  0035f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?GetMenuStart@BCMenu@@IAEHXZ:
  00365	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202749
  0036a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetMenuStart@BCMenu@@IAEHXZ ENDP			; BCMenu::GetMenuStart
xdata$x	SEGMENT
$T202759 DD	0ffffffffH
	DD	FLAT:$L202754
	DD	00H
	DD	FLAT:$L202755
$T202757 DD	019930520H
	DD	02H
	DD	FLAT:$T202759
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv145 = -48						; size = 4
tv65 = -44						; size = 4
_this$ = -40						; size = 4
$T202753 = -36						; size = 4
_str$ = -32						; size = 4
_j$ = -28						; size = 4
_menustart$ = -24					; size = 4
_i$ = -20						; size = 4
_nummenulist$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ PROC NEAR	; BCMenu::RemoveTopLevelOwnerDraw
; _this$ = ecx

; 1894 : {

  05840	55		 push	 ebp
  05841	8b ec		 mov	 ebp, esp
  05843	6a ff		 push	 -1
  05845	68 00 00 00 00	 push	 __ehhandler$?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ
  0584a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05850	50		 push	 eax
  05851	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05858	83 ec 24	 sub	 esp, 36			; 00000024H
  0585b	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1895 : 	CString str;

  0585e	8d 4d e0	 lea	 ecx, DWORD PTR _str$[ebp]
  05861	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05867	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1896 : 	int i=0,j=0;

  0586e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  05875	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 1897 : 	int nummenulist=m_MenuList.GetSize(),menustart;

  0587c	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0587f	83 c1 08	 add	 ecx, 8
  05882	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  05887	89 45 f0	 mov	 DWORD PTR _nummenulist$[ebp], eax

; 1898 : 
; 1899 : 	menustart=GetMenuStart();

  0588a	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0588d	e8 00 00 00 00	 call	 ?GetMenuStart@BCMenu@@IAEHXZ ; BCMenu::GetMenuStart
  05892	89 45 e8	 mov	 DWORD PTR _menustart$[ebp], eax

; 1900 : 	for(i=menustart,j=0;i<(int)GetMenuItemCount();++i,++j){

  05895	8b 45 e8	 mov	 eax, DWORD PTR _menustart$[ebp]
  05898	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
  0589b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  058a2	eb 12		 jmp	 SHORT $L199547
$L199548:
  058a4	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  058a7	83 c1 01	 add	 ecx, 1
  058aa	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
  058ad	8b 55 e4	 mov	 edx, DWORD PTR _j$[ebp]
  058b0	83 c2 01	 add	 edx, 1
  058b3	89 55 e4	 mov	 DWORD PTR _j$[ebp], edx
$L199547:
  058b6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  058b9	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  058be	39 45 ec	 cmp	 DWORD PTR _i$[ebp], eax
  058c1	0f 8d a5 00 00
	00		 jge	 $L199549

; 1901 : 		if(j<nummenulist){

  058c7	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  058ca	3b 45 f0	 cmp	 eax, DWORD PTR _nummenulist$[ebp]
  058cd	0f 8d 94 00 00
	00		 jge	 $L199550

; 1902 : 			str=m_MenuList[j]->GetString();

  058d3	8d 4d dc	 lea	 ecx, DWORD PTR $T202753[ebp]
  058d6	51		 push	 ecx
  058d7	8b 55 e4	 mov	 edx, DWORD PTR _j$[ebp]
  058da	52		 push	 edx
  058db	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  058de	83 c1 08	 add	 ecx, 8
  058e1	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  058e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  058e8	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  058ed	89 45 d4	 mov	 DWORD PTR tv65[ebp], eax
  058f0	8b 45 d4	 mov	 eax, DWORD PTR tv65[ebp]
  058f3	89 45 d0	 mov	 DWORD PTR tv145[ebp], eax
  058f6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  058fa	8b 4d d0	 mov	 ecx, DWORD PTR tv145[ebp]
  058fd	51		 push	 ecx
  058fe	8d 4d e0	 lea	 ecx, DWORD PTR _str$[ebp]
  05901	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  05907	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0590b	8d 4d dc	 lea	 ecx, DWORD PTR $T202753[ebp]
  0590e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1903 : 			if(GetSubMenu(i)){

  05914	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  05917	52		 push	 edx
  05918	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0591b	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  05920	85 c0		 test	 eax, eax
  05922	74 43		 je	 SHORT $L199550

; 1904 : 				m_MenuList[j]->nFlags=MF_POPUP|MF_BYPOSITION;

  05924	8b 45 e4	 mov	 eax, DWORD PTR _j$[ebp]
  05927	50		 push	 eax
  05928	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0592b	83 c1 08	 add	 ecx, 8
  0592e	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05933	8b 08		 mov	 ecx, DWORD PTR [eax]
  05935	c7 41 10 10 04
	00 00		 mov	 DWORD PTR [ecx+16], 1040 ; 00000410H

; 1905 : 				ModifyMenu(i,MF_POPUP|MF_BYPOSITION,
; 1906 : 					(UINT)GetSubMenu(i)->m_hMenu,str);

  0593c	8d 4d e0	 lea	 ecx, DWORD PTR _str$[ebp]
  0593f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05945	50		 push	 eax
  05946	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  05949	52		 push	 edx
  0594a	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0594d	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  05952	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  05955	50		 push	 eax
  05956	68 10 04 00 00	 push	 1040			; 00000410H
  0595b	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  0595e	51		 push	 ecx
  0595f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05962	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L199550:

; 1907 : 			}
; 1908 : 		}
; 1909 : 	}

  05967	e9 38 ff ff ff	 jmp	 $L199548
$L199549:

; 1910 : 
; 1911 : }

  0596c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05973	8d 4d e0	 lea	 ecx, DWORD PTR _str$[ebp]
  05976	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0597c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0597f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05986	8b e5		 mov	 esp, ebp
  05988	5d		 pop	 ebp
  05989	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202754:
  0036f	8d 4d e0	 lea	 ecx, DWORD PTR _str$[ebp]
  00372	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202755:
  00378	8d 4d dc	 lea	 ecx, DWORD PTR $T202753[ebp]
  0037b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ:
  00381	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202757
  00386	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?RemoveTopLevelOwnerDraw@BCMenu@@IAEXXZ ENDP		; BCMenu::RemoveTopLevelOwnerDraw
PUBLIC	??0CSize@@QAE@XZ				; CSize::CSize
PUBLIC	?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z		; CDC::GetTextExtent
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:NEAR
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z:NEAR
EXTRN	_strlen:NEAR
xdata$x	SEGMENT
$T202782 DD	0ffffffffH
	DD	FLAT:$L202770
	DD	00H
	DD	FLAT:$L202771
	DD	01H
	DD	FLAT:$L202772
	DD	02H
	DD	FLAT:$L202773
	DD	02H
	DD	FLAT:$L202774
	DD	02H
	DD	FLAT:$L202775
	DD	02H
	DD	FLAT:$L202776
	DD	02H
	DD	FLAT:$L202777
$T202779 DD	019930520H
	DD	08H
	DD	FLAT:$T202782
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv261 = -576						; size = 4
tv263 = -572						; size = 4
tv259 = -568						; size = 4
tv262 = -564						; size = 4
tv257 = -560						; size = 4
tv69 = -556						; size = 4
tv255 = -552						; size = 4
tv72 = -548						; size = 4
tv253 = -544						; size = 4
tv76 = -540						; size = 4
_this$ = -536						; size = 4
$T202769 = -532						; size = 4
$T202768 = -528						; size = 8
$T202767 = -520						; size = 8
$T202766 = -512						; size = 4
$T202765 = -508						; size = 4
$T202764 = -504						; size = 8
$T202763 = -496						; size = 4
$T202762 = -492						; size = 4
_lpstrText$199608 = -488				; size = 4
_lpstrText$199601 = -484				; size = 4
_lpstrText$199589 = -480				; size = 4
_j$ = -476						; size = 4
_numitems$ = -472					; size = 4
_t$ = -468						; size = 8
_nm$ = -460						; size = 340
_string$ = -112						; size = 4
_pWnd$ = -108						; size = 4
_maxlength$ = -104					; size = 4
_newstring$ = -100					; size = 4
_pDC$ = -96						; size = 4
_m_fontMenu$ = -92					; size = 8
_pFont$ = -84						; size = 4
_i$ = -80						; size = 4
_m_lf$ = -76						; size = 60
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
?InsertSpaces@BCMenu@@IAEXXZ PROC NEAR			; BCMenu::InsertSpaces
; _this$ = ecx

; 1914 : {

  05990	55		 push	 ebp
  05991	8b ec		 mov	 ebp, esp
  05993	6a ff		 push	 -1
  05995	68 00 00 00 00	 push	 __ehhandler$?InsertSpaces@BCMenu@@IAEXXZ
  0599a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  059a0	50		 push	 eax
  059a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  059a8	81 ec 34 02 00
	00		 sub	 esp, 564		; 00000234H
  059ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  059b3	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  059b6	56		 push	 esi
  059b7	57		 push	 edi
  059b8	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1915 : 	if(IsLunaMenuStyle())

  059be	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  059c3	85 c0		 test	 eax, eax
  059c5	74 1c		 je	 SHORT $L199558

; 1916 : 		if(!xp_space_accelerators)return;

  059c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_space_accelerators@BCMenu@@1HA, 0 ; BCMenu::xp_space_accelerators
  059ce	75 05		 jne	 SHORT $L199559
  059d0	e9 92 04 00 00	 jmp	 $L199557
$L199559:

; 1917 : 	else
; 1918 : 		if(!original_space_accelerators)return;

  059d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?original_space_accelerators@BCMenu@@1HA, 0 ; BCMenu::original_space_accelerators
  059dc	75 05		 jne	 SHORT $L199558
  059de	e9 84 04 00 00	 jmp	 $L199557
$L199558:

; 1919 : 	
; 1920 : 	int i,j,numitems,maxlength;
; 1921 : 	CString string,newstring;

  059e3	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  059e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  059ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  059f3	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  059f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  059fc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1922 : 	CSize t;

  05a00	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR _t$[ebp]
  05a06	e8 00 00 00 00	 call	 ??0CSize@@QAE@XZ	; CSize::CSize

; 1923 : 	CFont m_fontMenu;

  05a0b	8d 4d a4	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  05a0e	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  05a13	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1924 : 	LOGFONT m_lf;
; 1925 : 	
; 1926 : 	ZeroMemory ((PVOID) &m_lf,sizeof (LOGFONT));

  05a17	6a 3c		 push	 60			; 0000003cH
  05a19	6a 00		 push	 0
  05a1b	8d 45 b4	 lea	 eax, DWORD PTR _m_lf$[ebp]
  05a1e	50		 push	 eax
  05a1f	e8 00 00 00 00	 call	 _memset
  05a24	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1927 : 	NONCLIENTMETRICS nm;
; 1928 : 	nm.cbSize = sizeof (NONCLIENTMETRICS);

  05a27	c7 85 34 fe ff
	ff 54 01 00 00	 mov	 DWORD PTR _nm$[ebp], 340 ; 00000154H

; 1929 : 	VERIFY (SystemParametersInfo (SPI_GETNONCLIENTMETRICS,nm.cbSize,&nm,0)); 

  05a31	6a 00		 push	 0
  05a33	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR _nm$[ebp]
  05a39	51		 push	 ecx
  05a3a	8b 95 34 fe ff
	ff		 mov	 edx, DWORD PTR _nm$[ebp]
  05a40	52		 push	 edx
  05a41	6a 29		 push	 41			; 00000029H
  05a43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 1930 : 	m_lf =  nm.lfMenuFont;

  05a49	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  05a4e	8d b5 d4 fe ff
	ff		 lea	 esi, DWORD PTR _nm$[ebp+160]
  05a54	8d 7d b4	 lea	 edi, DWORD PTR _m_lf$[ebp]
  05a57	f3 a5		 rep movsd

; 1931 : 	m_fontMenu.CreateFontIndirect (&m_lf);

  05a59	8d 45 b4	 lea	 eax, DWORD PTR _m_lf$[ebp]
  05a5c	50		 push	 eax
  05a5d	8d 4d a4	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  05a60	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA

; 1932 : 	
; 1933 : 	CWnd *pWnd = AfxGetMainWnd();  

  05a65	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  05a6a	89 45 94	 mov	 DWORD PTR _pWnd$[ebp], eax

; 1934 : 	if (pWnd == NULL)pWnd = CWnd::GetDesktopWindow();

  05a6d	83 7d 94 00	 cmp	 DWORD PTR _pWnd$[ebp], 0
  05a71	75 08		 jne	 SHORT $L199577
  05a73	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  05a78	89 45 94	 mov	 DWORD PTR _pWnd$[ebp], eax
$L199577:

; 1935 : 	CDC *pDC = pWnd->GetDC();

  05a7b	8b 4d 94	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  05a7e	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  05a83	89 45 a0	 mov	 DWORD PTR _pDC$[ebp], eax

; 1936 : 	CFont* pFont = pDC->SelectObject (&m_fontMenu);

  05a86	8d 4d a4	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  05a89	51		 push	 ecx
  05a8a	8b 55 a0	 mov	 edx, DWORD PTR _pDC$[ebp]
  05a8d	8b 02		 mov	 eax, DWORD PTR [edx]
  05a8f	8b 4d a0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  05a92	ff 50 30	 call	 DWORD PTR [eax+48]
  05a95	89 45 ac	 mov	 DWORD PTR _pFont$[ebp], eax

; 1937 : 	
; 1938 : 	numitems=GetMenuItemCount();

  05a98	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05a9e	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  05aa3	89 85 28 fe ff
	ff		 mov	 DWORD PTR _numitems$[ebp], eax

; 1939 : 	maxlength = -1;

  05aa9	c7 45 98 ff ff
	ff ff		 mov	 DWORD PTR _maxlength$[ebp], -1

; 1940 : 	for(i=0;i<numitems;++i){

  05ab0	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  05ab7	eb 09		 jmp	 SHORT $L199580
$L199581:
  05ab9	8b 4d b0	 mov	 ecx, DWORD PTR _i$[ebp]
  05abc	83 c1 01	 add	 ecx, 1
  05abf	89 4d b0	 mov	 DWORD PTR _i$[ebp], ecx
$L199580:
  05ac2	8b 55 b0	 mov	 edx, DWORD PTR _i$[ebp]
  05ac5	3b 95 28 fe ff
	ff		 cmp	 edx, DWORD PTR _numitems$[ebp]
  05acb	0f 8d 44 01 00
	00		 jge	 $L199582

; 1941 : 		string=m_MenuList[i]->GetString();

  05ad1	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR $T202762[ebp]
  05ad7	50		 push	 eax
  05ad8	8b 4d b0	 mov	 ecx, DWORD PTR _i$[ebp]
  05adb	51		 push	 ecx
  05adc	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05ae2	83 c1 08	 add	 ecx, 8
  05ae5	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05aea	8b 08		 mov	 ecx, DWORD PTR [eax]
  05aec	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  05af1	89 85 e4 fd ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  05af7	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR tv76[ebp]
  05afd	89 95 e0 fd ff
	ff		 mov	 DWORD PTR tv253[ebp], edx
  05b03	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  05b07	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR tv253[ebp]
  05b0d	50		 push	 eax
  05b0e	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05b11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  05b17	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05b1b	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T202762[ebp]
  05b21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1942 : 		j=string.Find((char)9);

  05b27	6a 00		 push	 0
  05b29	6a 09		 push	 9
  05b2b	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05b2e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  05b34	89 85 24 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax

; 1943 : 		newstring.Empty();

  05b3a	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05b3d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ

; 1944 : 		if(j!=-1)newstring=string.Left(j);

  05b43	83 bd 24 fe ff
	ff ff		 cmp	 DWORD PTR _j$[ebp], -1
  05b4a	74 4f		 je	 SHORT $L199585
  05b4c	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  05b52	51		 push	 ecx
  05b53	8d 95 10 fe ff
	ff		 lea	 edx, DWORD PTR $T202763[ebp]
  05b59	52		 push	 edx
  05b5a	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05b5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  05b63	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
  05b69	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  05b6f	89 85 d8 fd ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  05b75	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  05b79	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  05b7f	51		 push	 ecx
  05b80	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05b83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  05b89	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05b8d	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T202763[ebp]
  05b93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1945 : 		else newstring=string;

  05b99	eb 0d		 jmp	 SHORT $L199587
$L199585:
  05b9b	8d 55 90	 lea	 edx, DWORD PTR _string$[ebp]
  05b9e	52		 push	 edx
  05b9f	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05ba2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
$L199587:

; 1946 : 		newstring+=_T(" ");//SK: modified for Unicode correctness. 

  05ba8	68 00 00 00 00	 push	 OFFSET FLAT:$SG199588
  05bad	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05bb0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 1947 : 		LPCTSTR lpstrText = (LPCTSTR)newstring;

  05bb6	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05bb9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05bbf	89 85 20 fe ff
	ff		 mov	 DWORD PTR _lpstrText$199589[ebp], eax

; 1948 : 		t=pDC->GetTextExtent(lpstrText,(int)_tcslen(lpstrText));

  05bc5	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR _lpstrText$199589[ebp]
  05bcb	50		 push	 eax
  05bcc	e8 00 00 00 00	 call	 _strlen
  05bd1	83 c4 04	 add	 esp, 4
  05bd4	50		 push	 eax
  05bd5	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$199589[ebp]
  05bdb	51		 push	 ecx
  05bdc	8d 95 08 fe ff
	ff		 lea	 edx, DWORD PTR $T202764[ebp]
  05be2	52		 push	 edx
  05be3	8b 4d a0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  05be6	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ; CDC::GetTextExtent
  05beb	8b 08		 mov	 ecx, DWORD PTR [eax]
  05bed	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05bf0	89 8d 2c fe ff
	ff		 mov	 DWORD PTR _t$[ebp], ecx
  05bf6	89 95 30 fe ff
	ff		 mov	 DWORD PTR _t$[ebp+4], edx

; 1949 : 		if(t.cx>maxlength)maxlength = t.cx;

  05bfc	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _t$[ebp]
  05c02	3b 45 98	 cmp	 eax, DWORD PTR _maxlength$[ebp]
  05c05	7e 09		 jle	 SHORT $L199593
  05c07	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _t$[ebp]
  05c0d	89 4d 98	 mov	 DWORD PTR _maxlength$[ebp], ecx
$L199593:

; 1950 : 	}

  05c10	e9 a4 fe ff ff	 jmp	 $L199581
$L199582:

; 1951 : 	for(i=0;i<numitems;++i){

  05c15	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  05c1c	eb 09		 jmp	 SHORT $L199594
$L199595:
  05c1e	8b 55 b0	 mov	 edx, DWORD PTR _i$[ebp]
  05c21	83 c2 01	 add	 edx, 1
  05c24	89 55 b0	 mov	 DWORD PTR _i$[ebp], edx
$L199594:
  05c27	8b 45 b0	 mov	 eax, DWORD PTR _i$[ebp]
  05c2a	3b 85 28 fe ff
	ff		 cmp	 eax, DWORD PTR _numitems$[ebp]
  05c30	0f 8d e5 01 00
	00		 jge	 $L199596

; 1952 : 		string=m_MenuList[i]->GetString();

  05c36	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T202765[ebp]
  05c3c	51		 push	 ecx
  05c3d	8b 55 b0	 mov	 edx, DWORD PTR _i$[ebp]
  05c40	52		 push	 edx
  05c41	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05c47	83 c1 08	 add	 ecx, 8
  05c4a	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05c4f	8b 08		 mov	 ecx, DWORD PTR [eax]
  05c51	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  05c56	89 85 d4 fd ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  05c5c	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]
  05c62	89 85 d0 fd ff
	ff		 mov	 DWORD PTR tv257[ebp], eax
  05c68	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  05c6c	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR tv257[ebp]
  05c72	51		 push	 ecx
  05c73	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05c76	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  05c7c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05c80	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T202765[ebp]
  05c86	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1953 : 		j=string.Find((char)9);

  05c8c	6a 00		 push	 0
  05c8e	6a 09		 push	 9
  05c90	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05c93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  05c99	89 85 24 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax

; 1954 : 		if(j!=-1){

  05c9f	83 bd 24 fe ff
	ff ff		 cmp	 DWORD PTR _j$[ebp], -1
  05ca6	0f 84 6a 01 00
	00		 je	 $L199599

; 1955 : 			newstring.Empty();

  05cac	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05caf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ

; 1956 : 			newstring=string.Left(j);

  05cb5	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  05cbb	52		 push	 edx
  05cbc	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR $T202766[ebp]
  05cc2	50		 push	 eax
  05cc3	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05cc6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  05ccc	89 85 cc fd ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
  05cd2	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR tv262[ebp]
  05cd8	89 8d c8 fd ff
	ff		 mov	 DWORD PTR tv259[ebp], ecx
  05cde	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  05ce2	8b 95 c8 fd ff
	ff		 mov	 edx, DWORD PTR tv259[ebp]
  05ce8	52		 push	 edx
  05ce9	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05cec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  05cf2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05cf6	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T202766[ebp]
  05cfc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1957 : 			LPCTSTR lpstrText = (LPCTSTR)(newstring);

  05d02	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05d05	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05d0b	89 85 1c fe ff
	ff		 mov	 DWORD PTR _lpstrText$199601[ebp], eax

; 1958 : 			t=pDC->GetTextExtent(lpstrText,(int)_tcslen(lpstrText));

  05d11	8b 85 1c fe ff
	ff		 mov	 eax, DWORD PTR _lpstrText$199601[ebp]
  05d17	50		 push	 eax
  05d18	e8 00 00 00 00	 call	 _strlen
  05d1d	83 c4 04	 add	 esp, 4
  05d20	50		 push	 eax
  05d21	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$199601[ebp]
  05d27	51		 push	 ecx
  05d28	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR $T202767[ebp]
  05d2e	52		 push	 edx
  05d2f	8b 4d a0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  05d32	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ; CDC::GetTextExtent
  05d37	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d39	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05d3c	89 8d 2c fe ff
	ff		 mov	 DWORD PTR _t$[ebp], ecx
  05d42	89 95 30 fe ff
	ff		 mov	 DWORD PTR _t$[ebp+4], edx
$L199606:

; 1959 : 			while(t.cx<maxlength){

  05d48	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _t$[ebp]
  05d4e	3b 45 98	 cmp	 eax, DWORD PTR _maxlength$[ebp]
  05d51	7d 53		 jge	 SHORT $L199607

; 1960 : 				newstring+=_T(' ');//SK: modified for Unicode correctness

  05d53	6a 20		 push	 32			; 00000020H
  05d55	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05d58	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z

; 1961 : 				LPCTSTR lpstrText = (LPCTSTR)(newstring);

  05d5e	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05d61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05d67	89 85 18 fe ff
	ff		 mov	 DWORD PTR _lpstrText$199608[ebp], eax

; 1962 : 				t=pDC->GetTextExtent(lpstrText,(int)_tcslen(lpstrText));

  05d6d	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _lpstrText$199608[ebp]
  05d73	51		 push	 ecx
  05d74	e8 00 00 00 00	 call	 _strlen
  05d79	83 c4 04	 add	 esp, 4
  05d7c	50		 push	 eax
  05d7d	8b 95 18 fe ff
	ff		 mov	 edx, DWORD PTR _lpstrText$199608[ebp]
  05d83	52		 push	 edx
  05d84	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR $T202768[ebp]
  05d8a	50		 push	 eax
  05d8b	8b 4d a0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  05d8e	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ; CDC::GetTextExtent
  05d93	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d95	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05d98	89 8d 2c fe ff
	ff		 mov	 DWORD PTR _t$[ebp], ecx
  05d9e	89 95 30 fe ff
	ff		 mov	 DWORD PTR _t$[ebp+4], edx

; 1963 : 			}

  05da4	eb a2		 jmp	 SHORT $L199606
$L199607:

; 1964 : 			newstring+=string.Mid(j);

  05da6	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  05dac	50		 push	 eax
  05dad	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T202769[ebp]
  05db3	51		 push	 ecx
  05db4	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05db7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  05dbd	89 85 c4 fd ff
	ff		 mov	 DWORD PTR tv263[ebp], eax
  05dc3	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR tv263[ebp]
  05dc9	89 95 c0 fd ff
	ff		 mov	 DWORD PTR tv261[ebp], edx
  05dcf	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  05dd3	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR tv261[ebp]
  05dd9	50		 push	 eax
  05dda	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05ddd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  05de3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05de7	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T202769[ebp]
  05ded	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1965 : #ifdef UNICODE      
; 1966 : 			m_MenuList[i]->SetWideString(newstring);//SK: modified for dynamic allocation
; 1967 : #else
; 1968 : 			m_MenuList[i]->SetAnsiString(newstring);

  05df3	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05df6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  05dfc	50		 push	 eax
  05dfd	8b 4d b0	 mov	 ecx, DWORD PTR _i$[ebp]
  05e00	51		 push	 ecx
  05e01	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05e07	83 c1 08	 add	 ecx, 8
  05e0a	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  05e0f	8b 08		 mov	 ecx, DWORD PTR [eax]
  05e11	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString
$L199599:

; 1969 : #endif
; 1970 : 		}
; 1971 : 	}

  05e16	e9 03 fe ff ff	 jmp	 $L199595
$L199596:

; 1972 : 	pDC->SelectObject (pFont);              // Select old font in

  05e1b	8b 55 ac	 mov	 edx, DWORD PTR _pFont$[ebp]
  05e1e	52		 push	 edx
  05e1f	8b 45 a0	 mov	 eax, DWORD PTR _pDC$[ebp]
  05e22	8b 10		 mov	 edx, DWORD PTR [eax]
  05e24	8b 4d a0	 mov	 ecx, DWORD PTR _pDC$[ebp]
  05e27	ff 52 30	 call	 DWORD PTR [edx+48]

; 1973 : 	pWnd->ReleaseDC(pDC);       // Release the DC

  05e2a	8b 45 a0	 mov	 eax, DWORD PTR _pDC$[ebp]
  05e2d	50		 push	 eax
  05e2e	8b 4d 94	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  05e31	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 1974 : 	m_fontMenu.DeleteObject();

  05e36	8d 4d a4	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  05e39	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 1975 : }

  05e3e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05e42	8d 4d a4	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  05e45	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  05e4a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05e4e	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  05e51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  05e57	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05e5e	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  05e61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199557:
  05e67	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05e6a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05e71	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  05e74	e8 00 00 00 00	 call	 @__security_check_cookie@4
  05e79	5f		 pop	 edi
  05e7a	5e		 pop	 esi
  05e7b	8b e5		 mov	 esp, ebp
  05e7d	5d		 pop	 ebp
  05e7e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202770:
  0038b	8d 4d 90	 lea	 ecx, DWORD PTR _string$[ebp]
  0038e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202771:
  00394	8d 4d 9c	 lea	 ecx, DWORD PTR _newstring$[ebp]
  00397	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202772:
  0039d	8d 4d a4	 lea	 ecx, DWORD PTR _m_fontMenu$[ebp]
  003a0	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
$L202773:
  003a5	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T202762[ebp]
  003ab	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202774:
  003b1	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T202763[ebp]
  003b7	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202775:
  003bd	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T202765[ebp]
  003c3	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202776:
  003c9	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T202766[ebp]
  003cf	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202777:
  003d5	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T202769[ebp]
  003db	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?InsertSpaces@BCMenu@@IAEXXZ:
  003e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202779
  003e6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertSpaces@BCMenu@@IAEXXZ ENDP			; BCMenu::InsertSpaces
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSize@@QAE@XZ PROC NEAR				; CSize::CSize, COMDAT
; _this$ = ecx

; 22   : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CSize@@QAE@XZ ENDP					; CSize::CSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initCX$ = 8						; size = 4
_initCY$ = 12						; size = 4
??0CSize@@QAE@HH@Z PROC NEAR				; CSize::CSize, COMDAT
; _this$ = ecx

; 24   : 	{ cx = initCX; cy = initCY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initCX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initCY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CSize@@QAE@HH@Z ENDP					; CSize::CSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initSize$ = 8						; size = 8
??0CSize@@QAE@UtagSIZE@@@Z PROC NEAR			; CSize::CSize, COMDAT
; _this$ = ecx

; 26   : 	{ *(SIZE*)this = initSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initSize$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _initSize$[ebp+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??0CSize@@QAE@UtagSIZE@@@Z ENDP				; CSize::CSize
_TEXT	ENDS
PUBLIC	?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z		; BCMenu::LoadCheckmarkBitmap
xdata$x	SEGMENT
$T202802 DD	0ffffffffH
	DD	FLAT:$L202798
$T202800 DD	019930520H
	DD	01H
	DD	FLAT:$T202802
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv143 = -48						; size = 4
tv81 = -44						; size = 4
_this$ = -40						; size = 4
$T202795 = -36						; size = 4
$T202794 = -32						; size = 4
$T202791 = -28						; size = 4
$T202790 = -24						; size = 4
_flag2$199629 = -20					; size = 4
_flag1$199628 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_unselect$ = 8						; size = 4
_select$ = 12						; size = 4
?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z PROC NEAR		; BCMenu::LoadCheckmarkBitmap
; _this$ = ecx

; 1978 : {

  05e80	55		 push	 ebp
  05e81	8b ec		 mov	 ebp, esp
  05e83	6a ff		 push	 -1
  05e85	68 00 00 00 00	 push	 __ehhandler$?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z
  05e8a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05e90	50		 push	 eax
  05e91	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05e98	83 ec 24	 sub	 esp, 36			; 00000024H
  05e9b	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1979 : 	if(unselect>0 && select>0){

  05e9e	83 7d 08 00	 cmp	 DWORD PTR _unselect$[ebp], 0
  05ea2	0f 8e 0c 01 00
	00		 jle	 $L199620
  05ea8	83 7d 0c 00	 cmp	 DWORD PTR _select$[ebp], 0
  05eac	0f 8e 02 01 00
	00		 jle	 $L199620

; 1980 : 		m_selectcheck=select;

  05eb2	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  05eb5	8b 4d 0c	 mov	 ecx, DWORD PTR _select$[ebp]
  05eb8	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 1981 : 		m_unselectcheck=unselect;

  05ebb	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  05ebe	8b 45 08	 mov	 eax, DWORD PTR _unselect$[ebp]
  05ec1	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1982 : 		if(checkmaps)checkmaps->DeleteImageList();

  05ec4	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05ec7	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  05ecb	74 0d		 je	 SHORT $L199622
  05ecd	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  05ed0	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  05ed3	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1983 : 		else checkmaps=new(CImageList);

  05ed8	eb 41		 jmp	 SHORT $L199623
$L199622:
  05eda	6a 08		 push	 8
  05edc	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05ee1	89 45 e4	 mov	 DWORD PTR $T202791[ebp], eax
  05ee4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  05eeb	83 7d e4 00	 cmp	 DWORD PTR $T202791[ebp], 0
  05eef	74 0d		 je	 SHORT $L202792
  05ef1	8b 4d e4	 mov	 ecx, DWORD PTR $T202791[ebp]
  05ef4	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  05ef9	89 45 d4	 mov	 DWORD PTR tv81[ebp], eax
  05efc	eb 07		 jmp	 SHORT $L202793
$L202792:
  05efe	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L202793:
  05f05	8b 45 d4	 mov	 eax, DWORD PTR tv81[ebp]
  05f08	89 45 e8	 mov	 DWORD PTR $T202790[ebp], eax
  05f0b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05f12	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05f15	8b 55 e8	 mov	 edx, DWORD PTR $T202790[ebp]
  05f18	89 51 3c	 mov	 DWORD PTR [ecx+60], edx
$L199623:

; 1984 : 		checkmaps->Create(m_iconX,m_iconY,ILC_MASK,2,1);

  05f1b	6a 01		 push	 1
  05f1d	6a 02		 push	 2
  05f1f	6a 01		 push	 1
  05f21	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  05f26	50		 push	 eax
  05f27	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  05f2d	51		 push	 ecx
  05f2e	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  05f31	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  05f34	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 1985 : 		BOOL flag1=AddBitmapToImageList(checkmaps,unselect);

  05f39	8b 45 08	 mov	 eax, DWORD PTR _unselect$[ebp]
  05f3c	50		 push	 eax
  05f3d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05f40	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  05f43	52		 push	 edx
  05f44	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05f47	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  05f4c	89 45 f0	 mov	 DWORD PTR _flag1$199628[ebp], eax

; 1986 : 		BOOL flag2=AddBitmapToImageList(checkmaps,select);

  05f4f	8b 45 0c	 mov	 eax, DWORD PTR _select$[ebp]
  05f52	50		 push	 eax
  05f53	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05f56	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  05f59	52		 push	 edx
  05f5a	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05f5d	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  05f62	89 45 ec	 mov	 DWORD PTR _flag2$199629[ebp], eax

; 1987 : 		if(!flag1||!flag2){

  05f65	83 7d f0 00	 cmp	 DWORD PTR _flag1$199628[ebp], 0
  05f69	74 06		 je	 SHORT $L199631
  05f6b	83 7d ec 00	 cmp	 DWORD PTR _flag2$199629[ebp], 0
  05f6f	75 43		 jne	 SHORT $L199620
$L199631:

; 1988 : 			checkmaps->DeleteImageList();

  05f71	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  05f74	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  05f77	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 1989 : 			delete checkmaps;

  05f7c	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  05f7f	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  05f82	89 55 dc	 mov	 DWORD PTR $T202795[ebp], edx
  05f85	8b 45 dc	 mov	 eax, DWORD PTR $T202795[ebp]
  05f88	89 45 e0	 mov	 DWORD PTR $T202794[ebp], eax
  05f8b	83 7d e0 00	 cmp	 DWORD PTR $T202794[ebp], 0
  05f8f	74 12		 je	 SHORT $L202796
  05f91	6a 01		 push	 1
  05f93	8b 4d e0	 mov	 ecx, DWORD PTR $T202794[ebp]
  05f96	8b 11		 mov	 edx, DWORD PTR [ecx]
  05f98	8b 4d e0	 mov	 ecx, DWORD PTR $T202794[ebp]
  05f9b	ff 52 04	 call	 DWORD PTR [edx+4]
  05f9e	89 45 d0	 mov	 DWORD PTR tv143[ebp], eax
  05fa1	eb 07		 jmp	 SHORT $L202797
$L202796:
  05fa3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$L202797:

; 1990 : 			checkmaps=NULL;

  05faa	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  05fad	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$L199620:

; 1991 : 		}
; 1992 : 	}
; 1993 : }

  05fb4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05fb7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05fbe	8b e5		 mov	 esp, ebp
  05fc0	5d		 pop	 ebp
  05fc1	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L202798:
  003eb	8b 45 e4	 mov	 eax, DWORD PTR $T202791[ebp]
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  003f4	c3		 ret	 0
__ehhandler$?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z:
  003f5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202800
  003fa	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LoadCheckmarkBitmap@BCMenu@@QAEXHH@Z ENDP		; BCMenu::LoadCheckmarkBitmap
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initX$ = 8						; size = 4
_initY$ = 12						; size = 4
??0CPoint@@QAE@HH@Z PROC NEAR				; CPoint::CPoint, COMDAT
; _this$ = ecx

; 63   : 	{ x = initX; y = initY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CPoint@@QAE@HH@Z ENDP				; CPoint::CPoint
_TEXT	ENDS
PUBLIC	?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText
xdata$x	SEGMENT
$T202811 DD	0ffffffffH
	DD	FLAT:$L202807
$T202809 DD	019930520H
	DD	01H
	DD	FLAT:$T202811
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv94 = -44						; size = 4
tv95 = -40						; size = 4
_this$ = -36						; size = 4
$T202806 = -32						; size = 4
_uiLoc$199646 = -28					; size = 4
_pMenu$199647 = -24					; size = 4
_numMenuItems$199642 = -20				; size = 4
_returnflag$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_string$ = 12						; size = 4
_nFlags$ = 16						; size = 4
?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z PROC NEAR ; BCMenu::GetMenuText
; _this$ = ecx

; 1998 : {

  05fd0	55		 push	 ebp
  05fd1	8b ec		 mov	 ebp, esp
  05fd3	6a ff		 push	 -1
  05fd5	68 00 00 00 00	 push	 __ehhandler$?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z
  05fda	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05fe0	50		 push	 eax
  05fe1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05fe8	83 ec 20	 sub	 esp, 32			; 00000020H
  05feb	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1999 : 	BOOL returnflag=FALSE;

  05fee	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 2000 : 	
; 2001 : 	if(MF_BYPOSITION&nFlags){

  05ff5	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  05ff8	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  05ffd	74 66		 je	 SHORT $L199641

; 2002 : 		UINT numMenuItems = m_MenuList.GetUpperBound();

  05fff	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  06002	83 c1 08	 add	 ecx, 8
  06005	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0600a	89 45 ec	 mov	 DWORD PTR _numMenuItems$199642[ebp], eax

; 2003 : 		if(id<=numMenuItems){

  0600d	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  06010	3b 4d ec	 cmp	 ecx, DWORD PTR _numMenuItems$199642[ebp]
  06013	77 4e		 ja	 SHORT $L199643

; 2004 : 			string=m_MenuList[id]->GetString();

  06015	8d 55 e0	 lea	 edx, DWORD PTR $T202806[ebp]
  06018	52		 push	 edx
  06019	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0601c	50		 push	 eax
  0601d	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  06020	83 c1 08	 add	 ecx, 8
  06023	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0602a	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  0602f	89 45 d8	 mov	 DWORD PTR tv95[ebp], eax
  06032	8b 4d d8	 mov	 ecx, DWORD PTR tv95[ebp]
  06035	89 4d d4	 mov	 DWORD PTR tv94[ebp], ecx
  06038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0603f	8b 55 d4	 mov	 edx, DWORD PTR tv94[ebp]
  06042	52		 push	 edx
  06043	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  06046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0604c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06053	8d 4d e0	 lea	 ecx, DWORD PTR $T202806[ebp]
  06056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 2005 : 			returnflag=TRUE;

  0605c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1
$L199643:

; 2006 : 		}
; 2007 : 	}
; 2008 : 	else{

  06063	eb 31		 jmp	 SHORT $L199645
$L199641:

; 2009 : 		int uiLoc;
; 2010 : 		BCMenu* pMenu = FindMenuOption(id,uiLoc);

  06065	8d 45 e4	 lea	 eax, DWORD PTR _uiLoc$199646[ebp]
  06068	50		 push	 eax
  06069	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0606c	51		 push	 ecx
  0606d	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  06070	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  06075	89 45 e8	 mov	 DWORD PTR _pMenu$199647[ebp], eax

; 2011 : 		if(NULL!=pMenu) returnflag = pMenu->GetMenuText(uiLoc,string);

  06078	83 7d e8 00	 cmp	 DWORD PTR _pMenu$199647[ebp], 0
  0607c	74 18		 je	 SHORT $L199645
  0607e	68 00 04 00 00	 push	 1024			; 00000400H
  06083	8b 55 0c	 mov	 edx, DWORD PTR _string$[ebp]
  06086	52		 push	 edx
  06087	8b 45 e4	 mov	 eax, DWORD PTR _uiLoc$199646[ebp]
  0608a	50		 push	 eax
  0608b	8b 4d e8	 mov	 ecx, DWORD PTR _pMenu$199647[ebp]
  0608e	e8 00 00 00 00	 call	 ?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText
  06093	89 45 f0	 mov	 DWORD PTR _returnflag$[ebp], eax
$L199645:

; 2012 : 	}
; 2013 : 	return(returnflag);

  06096	8b 45 f0	 mov	 eax, DWORD PTR _returnflag$[ebp]

; 2014 : }

  06099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0609c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  060a3	8b e5		 mov	 esp, ebp
  060a5	5d		 pop	 ebp
  060a6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L202807:
  003ff	8d 4d e0	 lea	 ecx, DWORD PTR $T202806[ebp]
  00402	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:
  00408	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202809
  0040d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ENDP ; BCMenu::GetMenuText
PUBLIC	?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z		; BCMenu::DrawRadioDot
PUBLIC	?Ellipse@CDC@@QAEHPBUtagRECT@@@Z		; CDC::Ellipse
EXTRN	?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z:NEAR	; CDC::SelectObject
xdata$x	SEGMENT
$T202818 DD	0ffffffffH
	DD	FLAT:$L202813
	DD	00H
	DD	FLAT:$L202814
$T202816 DD	019930520H
	DD	02H
	DD	FLAT:$T202818
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -56						; size = 4
_pen$ = -52						; size = 8
_pOldPen$ = -44						; size = 4
_pOldBrush$ = -40					; size = 4
_brush$ = -36						; size = 8
_rcDot$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_color$ = 20						; size = 4
?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z PROC NEAR	; BCMenu::DrawRadioDot
; _this$ = ecx

; 2018 : {

  060b0	55		 push	 ebp
  060b1	8b ec		 mov	 ebp, esp
  060b3	6a ff		 push	 -1
  060b5	68 00 00 00 00	 push	 __ehhandler$?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z
  060ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  060c0	50		 push	 eax
  060c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  060c8	83 ec 2c	 sub	 esp, 44			; 0000002cH
  060cb	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 2019 : 	CRect rcDot(x,y,x+6,y+6);

  060ce	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  060d1	83 c0 06	 add	 eax, 6
  060d4	50		 push	 eax
  060d5	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  060d8	83 c1 06	 add	 ecx, 6
  060db	51		 push	 ecx
  060dc	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  060df	52		 push	 edx
  060e0	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  060e3	50		 push	 eax
  060e4	8d 4d e4	 lea	 ecx, DWORD PTR _rcDot$[ebp]
  060e7	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2020 : 	CBrush brush;

  060ec	8d 4d dc	 lea	 ecx, DWORD PTR _brush$[ebp]
  060ef	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  060f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2021 : 	CPen pen;

  060fb	8d 4d cc	 lea	 ecx, DWORD PTR _pen$[ebp]
  060fe	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  06103	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2022 : 	brush.CreateSolidBrush(color);

  06107	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  0610a	51		 push	 ecx
  0610b	8d 4d dc	 lea	 ecx, DWORD PTR _brush$[ebp]
  0610e	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2023 : 	pen.CreatePen(PS_SOLID,0,color);

  06113	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  06116	52		 push	 edx
  06117	6a 00		 push	 0
  06119	6a 00		 push	 0
  0611b	8d 4d cc	 lea	 ecx, DWORD PTR _pen$[ebp]
  0611e	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 2024 : 	CBrush *pOldBrush=pDC->SelectObject(&brush);

  06123	8d 45 dc	 lea	 eax, DWORD PTR _brush$[ebp]
  06126	50		 push	 eax
  06127	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0612a	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
  0612f	89 45 d8	 mov	 DWORD PTR _pOldBrush$[ebp], eax

; 2025 : 	CPen *pOldPen=pDC->SelectObject(&pen);

  06132	8d 4d cc	 lea	 ecx, DWORD PTR _pen$[ebp]
  06135	51		 push	 ecx
  06136	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06139	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  0613e	89 45 d4	 mov	 DWORD PTR _pOldPen$[ebp], eax

; 2026 : 	pDC->Ellipse(&rcDot);

  06141	8d 55 e4	 lea	 edx, DWORD PTR _rcDot$[ebp]
  06144	52		 push	 edx
  06145	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06148	e8 00 00 00 00	 call	 ?Ellipse@CDC@@QAEHPBUtagRECT@@@Z ; CDC::Ellipse

; 2027 : 	pDC->SelectObject(pOldBrush);

  0614d	8b 45 d8	 mov	 eax, DWORD PTR _pOldBrush$[ebp]
  06150	50		 push	 eax
  06151	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06154	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject

; 2028 : 	pDC->SelectObject(pOldPen);

  06159	8b 4d d4	 mov	 ecx, DWORD PTR _pOldPen$[ebp]
  0615c	51		 push	 ecx
  0615d	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06160	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 2029 : 	pen.DeleteObject();

  06165	8d 4d cc	 lea	 ecx, DWORD PTR _pen$[ebp]
  06168	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2030 : 	brush.DeleteObject();

  0616d	8d 4d dc	 lea	 ecx, DWORD PTR _brush$[ebp]
  06170	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2031 : }

  06175	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06179	8d 4d cc	 lea	 ecx, DWORD PTR _pen$[ebp]
  0617c	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  06181	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06188	8d 4d dc	 lea	 ecx, DWORD PTR _brush$[ebp]
  0618b	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  06190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0619a	8b e5		 mov	 esp, ebp
  0619c	5d		 pop	 ebp
  0619d	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L202813:
  00412	8d 4d dc	 lea	 ecx, DWORD PTR _brush$[ebp]
  00415	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202814:
  0041a	8d 4d cc	 lea	 ecx, DWORD PTR _pen$[ebp]
  0041d	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__ehhandler$?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z:
  00422	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202816
  00427	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z ENDP		; BCMenu::DrawRadioDot
PUBLIC	?SetPixel@CDC@@QAEKHHK@Z			; CDC::SetPixel
PUBLIC	?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z		; LineTo
; Function compile flags: /Odt
_TEXT	SEGMENT
tv152 = -36						; size = 4
tv149 = -32						; size = 4
tv145 = -28						; size = 4
tv139 = -24						; size = 4
_deltaX$199676 = -20					; size = 4
_deltaY$199677 = -16					; size = 4
_i$199672 = -12						; size = 4
_p1$ = -8						; size = 4
_p2$ = -4						; size = 4
_pDC$ = 8						; size = 4
_pFrom$ = 12						; size = 8
_pTo$ = 20						; size = 8
_clr$ = 28						; size = 4
?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z PROC NEAR		; LineTo

; 2034 : {

  061a0	55		 push	 ebp
  061a1	8b ec		 mov	 ebp, esp
  061a3	83 ec 24	 sub	 esp, 36			; 00000024H

; 2035 : 	CPoint * p1;
; 2036 : 	CPoint * p2;
; 2037 : 
; 2038 : 	if(pFrom.x > pTo.x)

  061a6	8b 45 0c	 mov	 eax, DWORD PTR _pFrom$[ebp]
  061a9	3b 45 14	 cmp	 eax, DWORD PTR _pTo$[ebp]
  061ac	7e 0e		 jle	 SHORT $L199670

; 2039 : 	{
; 2040 : 		p1 = &pTo; p2 = &pFrom;

  061ae	8d 4d 14	 lea	 ecx, DWORD PTR _pTo$[ebp]
  061b1	89 4d f8	 mov	 DWORD PTR _p1$[ebp], ecx
  061b4	8d 55 0c	 lea	 edx, DWORD PTR _pFrom$[ebp]
  061b7	89 55 fc	 mov	 DWORD PTR _p2$[ebp], edx

; 2041 : 	}
; 2042 : 	else

  061ba	eb 0c		 jmp	 SHORT $L199671
$L199670:

; 2043 : 	{
; 2044 : 		p1 = &pFrom; p2 = &pTo;

  061bc	8d 45 0c	 lea	 eax, DWORD PTR _pFrom$[ebp]
  061bf	89 45 f8	 mov	 DWORD PTR _p1$[ebp], eax
  061c2	8d 4d 14	 lea	 ecx, DWORD PTR _pTo$[ebp]
  061c5	89 4d fc	 mov	 DWORD PTR _p2$[ebp], ecx
$L199671:

; 2045 : 	}
; 2046 : 
; 2047 : 	for(int i = p1->x; i<=p2->x; i++)

  061c8	8b 55 f8	 mov	 edx, DWORD PTR _p1$[ebp]
  061cb	8b 02		 mov	 eax, DWORD PTR [edx]
  061cd	89 45 f4	 mov	 DWORD PTR _i$199672[ebp], eax
  061d0	eb 09		 jmp	 SHORT $L199673
$L199674:
  061d2	8b 4d f4	 mov	 ecx, DWORD PTR _i$199672[ebp]
  061d5	83 c1 01	 add	 ecx, 1
  061d8	89 4d f4	 mov	 DWORD PTR _i$199672[ebp], ecx
$L199673:
  061db	8b 55 fc	 mov	 edx, DWORD PTR _p2$[ebp]
  061de	8b 45 f4	 mov	 eax, DWORD PTR _i$199672[ebp]
  061e1	3b 02		 cmp	 eax, DWORD PTR [edx]
  061e3	0f 8f 96 00 00
	00		 jg	 $L199667

; 2048 : 	{
; 2049 : 		float deltaX = i-p1->x;

  061e9	8b 4d f8	 mov	 ecx, DWORD PTR _p1$[ebp]
  061ec	8b 55 f4	 mov	 edx, DWORD PTR _i$199672[ebp]
  061ef	2b 11		 sub	 edx, DWORD PTR [ecx]
  061f1	89 55 e8	 mov	 DWORD PTR tv139[ebp], edx
  061f4	db 45 e8	 fild	 DWORD PTR tv139[ebp]
  061f7	d9 5d ec	 fstp	 DWORD PTR _deltaX$199676[ebp]

; 2050 : 		float deltaY = 0;

  061fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _deltaY$199677[ebp], 0

; 2051 : 		
; 2052 : 		if(p2->x - i != 0)

  06201	8b 45 fc	 mov	 eax, DWORD PTR _p2$[ebp]
  06204	8b 08		 mov	 ecx, DWORD PTR [eax]
  06206	2b 4d f4	 sub	 ecx, DWORD PTR _i$199672[ebp]
  06209	74 37		 je	 SHORT $L199678

; 2053 : 			deltaY = ((float)(p2->y - p1->y ))  * ((float)(p2->x - p1->x))
; 2054 : 			/(float)(p2->x - i);

  0620b	8b 55 fc	 mov	 edx, DWORD PTR _p2$[ebp]
  0620e	8b 45 f8	 mov	 eax, DWORD PTR _p1$[ebp]
  06211	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  06214	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  06217	89 4d e4	 mov	 DWORD PTR tv145[ebp], ecx
  0621a	db 45 e4	 fild	 DWORD PTR tv145[ebp]
  0621d	8b 55 fc	 mov	 edx, DWORD PTR _p2$[ebp]
  06220	8b 45 f8	 mov	 eax, DWORD PTR _p1$[ebp]
  06223	8b 0a		 mov	 ecx, DWORD PTR [edx]
  06225	2b 08		 sub	 ecx, DWORD PTR [eax]
  06227	89 4d e0	 mov	 DWORD PTR tv149[ebp], ecx
  0622a	db 45 e0	 fild	 DWORD PTR tv149[ebp]
  0622d	de c9		 fmulp	 ST(1), ST(0)
  0622f	8b 55 fc	 mov	 edx, DWORD PTR _p2$[ebp]
  06232	8b 02		 mov	 eax, DWORD PTR [edx]
  06234	2b 45 f4	 sub	 eax, DWORD PTR _i$199672[ebp]
  06237	89 45 dc	 mov	 DWORD PTR tv152[ebp], eax
  0623a	da 75 dc	 fidiv	 DWORD PTR tv152[ebp]
  0623d	d9 5d f0	 fstp	 DWORD PTR _deltaY$199677[ebp]

; 2055 : 		else

  06240	eb 07		 jmp	 SHORT $L199682
$L199678:

; 2056 : 			deltaY = 0;

  06242	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _deltaY$199677[ebp], 0
$L199682:

; 2057 : 		
; 2058 : 		pDC->SetPixel(i, p1->y, clr);

  06249	8b 4d 1c	 mov	 ecx, DWORD PTR _clr$[ebp]
  0624c	51		 push	 ecx
  0624d	8b 55 f8	 mov	 edx, DWORD PTR _p1$[ebp]
  06250	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  06253	50		 push	 eax
  06254	8b 4d f4	 mov	 ecx, DWORD PTR _i$199672[ebp]
  06257	51		 push	 ecx
  06258	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0625b	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel

; 2059 : 		pDC->SetPixel(i, p1->y + 1, clr);

  06260	8b 55 1c	 mov	 edx, DWORD PTR _clr$[ebp]
  06263	52		 push	 edx
  06264	8b 45 f8	 mov	 eax, DWORD PTR _p1$[ebp]
  06267	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0626a	83 c1 01	 add	 ecx, 1
  0626d	51		 push	 ecx
  0626e	8b 55 f4	 mov	 edx, DWORD PTR _i$199672[ebp]
  06271	52		 push	 edx
  06272	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06275	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel

; 2060 : 	}

  0627a	e9 53 ff ff ff	 jmp	 $L199674
$L199667:

; 2061 : }

  0627f	8b e5		 mov	 esp, ebp
  06281	5d		 pop	 ebp
  06282	c3		 ret	 0
?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ENDP			; LineTo
_TEXT	ENDS
PUBLIC	?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z	; BCMenu::DrawCheckMark
xdata$x	SEGMENT
$T202839 DD	0ffffffffH
	DD	FLAT:$L202835
$T202837 DD	019930520H
	DD	01H
	DD	FLAT:$T202839
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -144						; size = 4
$T202834 = -140						; size = 8
$T202833 = -132						; size = 8
$T202832 = -124						; size = 8
$T202831 = -116						; size = 8
$T202830 = -108						; size = 8
$T202829 = -100						; size = 8
$T202828 = -92						; size = 8
$T202827 = -84						; size = 8
$T202826 = -76						; size = 8
$T202825 = -68						; size = 8
$T202824 = -60						; size = 8
$T202823 = -52						; size = 8
$T202822 = -44						; size = 8
$T202821 = -36						; size = 8
_pOldPen$ = -28						; size = 4
_dp$ = -24						; size = 4
_m_penBack$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_color$ = 20						; size = 4
_narrowflag$ = 24					; size = 4
?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z PROC NEAR	; BCMenu::DrawCheckMark
; _this$ = ecx

; 2064 : {

  06290	55		 push	 ebp
  06291	8b ec		 mov	 ebp, esp
  06293	6a ff		 push	 -1
  06295	68 00 00 00 00	 push	 __ehhandler$?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z
  0629a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  062a0	50		 push	 eax
  062a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  062a8	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  062ae	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2065 : 	int dp=0;

  062b4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dp$[ebp], 0

; 2066 : 	CPen m_penBack;

  062bb	8d 4d ec	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  062be	e8 00 00 00 00	 call	 ??0CPen@@QAE@XZ		; CPen::CPen
  062c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2067 : 
; 2068 : 	m_penBack.CreatePen(PS_SOLID,1,color);

  062ca	8b 45 14	 mov	 eax, DWORD PTR _color$[ebp]
  062cd	50		 push	 eax
  062ce	6a 01		 push	 1
  062d0	6a 00		 push	 0
  062d2	8d 4d ec	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  062d5	e8 00 00 00 00	 call	 ?CreatePen@CPen@@QAEHHHK@Z ; CPen::CreatePen

; 2069 : 	CPen *pOldPen = pDC->SelectObject (&m_penBack);

  062da	8d 4d ec	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  062dd	51		 push	 ecx
  062de	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  062e1	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  062e6	89 45 e4	 mov	 DWORD PTR _pOldPen$[ebp], eax

; 2070 : 	if(narrowflag)dp=1;

  062e9	83 7d 18 00	 cmp	 DWORD PTR _narrowflag$[ebp], 0
  062ed	74 07		 je	 SHORT $L199694
  062ef	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _dp$[ebp], 1
$L199694:

; 2071 : 
; 2072 : 	LineTo(pDC, CPoint(x,y+2), CPoint(x,y+5-dp), color);

  062f6	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  062f9	52		 push	 edx
  062fa	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  062fd	83 c0 05	 add	 eax, 5
  06300	2b 45 e8	 sub	 eax, DWORD PTR _dp$[ebp]
  06303	50		 push	 eax
  06304	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  06307	51		 push	 ecx
  06308	8d 4d dc	 lea	 ecx, DWORD PTR $T202821[ebp]
  0630b	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  06310	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  06313	52		 push	 edx
  06314	8b 00		 mov	 eax, DWORD PTR [eax]
  06316	50		 push	 eax
  06317	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0631a	83 c1 02	 add	 ecx, 2
  0631d	51		 push	 ecx
  0631e	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  06321	52		 push	 edx
  06322	8d 4d d4	 lea	 ecx, DWORD PTR $T202822[ebp]
  06325	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  0632a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0632d	51		 push	 ecx
  0632e	8b 10		 mov	 edx, DWORD PTR [eax]
  06330	52		 push	 edx
  06331	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  06334	50		 push	 eax
  06335	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  0633a	83 c4 18	 add	 esp, 24			; 00000018H

; 2073 : 	LineTo(pDC, CPoint(x+1,y+3), CPoint(x+1,y+6-dp), color);

  0633d	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  06340	51		 push	 ecx
  06341	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  06344	83 c2 06	 add	 edx, 6
  06347	2b 55 e8	 sub	 edx, DWORD PTR _dp$[ebp]
  0634a	52		 push	 edx
  0634b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0634e	83 c0 01	 add	 eax, 1
  06351	50		 push	 eax
  06352	8d 4d cc	 lea	 ecx, DWORD PTR $T202823[ebp]
  06355	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  0635a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0635d	51		 push	 ecx
  0635e	8b 10		 mov	 edx, DWORD PTR [eax]
  06360	52		 push	 edx
  06361	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  06364	83 c0 03	 add	 eax, 3
  06367	50		 push	 eax
  06368	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0636b	83 c1 01	 add	 ecx, 1
  0636e	51		 push	 ecx
  0636f	8d 4d c4	 lea	 ecx, DWORD PTR $T202824[ebp]
  06372	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  06377	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0637a	52		 push	 edx
  0637b	8b 00		 mov	 eax, DWORD PTR [eax]
  0637d	50		 push	 eax
  0637e	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06381	51		 push	 ecx
  06382	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  06387	83 c4 18	 add	 esp, 24			; 00000018H

; 2074 : 	LineTo(pDC, CPoint(x+2,y+4), CPoint(x+2,y+7-dp), color);

  0638a	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  0638d	52		 push	 edx
  0638e	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  06391	83 c0 07	 add	 eax, 7
  06394	2b 45 e8	 sub	 eax, DWORD PTR _dp$[ebp]
  06397	50		 push	 eax
  06398	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0639b	83 c1 02	 add	 ecx, 2
  0639e	51		 push	 ecx
  0639f	8d 4d bc	 lea	 ecx, DWORD PTR $T202825[ebp]
  063a2	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  063a7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  063aa	52		 push	 edx
  063ab	8b 00		 mov	 eax, DWORD PTR [eax]
  063ad	50		 push	 eax
  063ae	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  063b1	83 c1 04	 add	 ecx, 4
  063b4	51		 push	 ecx
  063b5	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  063b8	83 c2 02	 add	 edx, 2
  063bb	52		 push	 edx
  063bc	8d 4d b4	 lea	 ecx, DWORD PTR $T202826[ebp]
  063bf	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  063c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  063c7	51		 push	 ecx
  063c8	8b 10		 mov	 edx, DWORD PTR [eax]
  063ca	52		 push	 edx
  063cb	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  063ce	50		 push	 eax
  063cf	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  063d4	83 c4 18	 add	 esp, 24			; 00000018H

; 2075 : 	LineTo(pDC, CPoint(x+3,y+3), CPoint(x+3,y+6-dp), color);

  063d7	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  063da	51		 push	 ecx
  063db	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  063de	83 c2 06	 add	 edx, 6
  063e1	2b 55 e8	 sub	 edx, DWORD PTR _dp$[ebp]
  063e4	52		 push	 edx
  063e5	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  063e8	83 c0 03	 add	 eax, 3
  063eb	50		 push	 eax
  063ec	8d 4d ac	 lea	 ecx, DWORD PTR $T202827[ebp]
  063ef	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  063f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  063f7	51		 push	 ecx
  063f8	8b 10		 mov	 edx, DWORD PTR [eax]
  063fa	52		 push	 edx
  063fb	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  063fe	83 c0 03	 add	 eax, 3
  06401	50		 push	 eax
  06402	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  06405	83 c1 03	 add	 ecx, 3
  06408	51		 push	 ecx
  06409	8d 4d a4	 lea	 ecx, DWORD PTR $T202828[ebp]
  0640c	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  06411	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  06414	52		 push	 edx
  06415	8b 00		 mov	 eax, DWORD PTR [eax]
  06417	50		 push	 eax
  06418	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0641b	51		 push	 ecx
  0641c	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  06421	83 c4 18	 add	 esp, 24			; 00000018H

; 2076 : 	LineTo(pDC, CPoint(x+4,y+2), CPoint(x+4,y+5-dp), color);

  06424	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  06427	52		 push	 edx
  06428	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0642b	83 c0 05	 add	 eax, 5
  0642e	2b 45 e8	 sub	 eax, DWORD PTR _dp$[ebp]
  06431	50		 push	 eax
  06432	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  06435	83 c1 04	 add	 ecx, 4
  06438	51		 push	 ecx
  06439	8d 4d 9c	 lea	 ecx, DWORD PTR $T202829[ebp]
  0643c	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  06441	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  06444	52		 push	 edx
  06445	8b 00		 mov	 eax, DWORD PTR [eax]
  06447	50		 push	 eax
  06448	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0644b	83 c1 02	 add	 ecx, 2
  0644e	51		 push	 ecx
  0644f	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  06452	83 c2 04	 add	 edx, 4
  06455	52		 push	 edx
  06456	8d 4d 94	 lea	 ecx, DWORD PTR $T202830[ebp]
  06459	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  0645e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  06461	51		 push	 ecx
  06462	8b 10		 mov	 edx, DWORD PTR [eax]
  06464	52		 push	 edx
  06465	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  06468	50		 push	 eax
  06469	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  0646e	83 c4 18	 add	 esp, 24			; 00000018H

; 2077 : 	LineTo(pDC, CPoint(x+5,y+1), CPoint(x+5,y+4-dp), color);

  06471	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  06474	51		 push	 ecx
  06475	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  06478	83 c2 04	 add	 edx, 4
  0647b	2b 55 e8	 sub	 edx, DWORD PTR _dp$[ebp]
  0647e	52		 push	 edx
  0647f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  06482	83 c0 05	 add	 eax, 5
  06485	50		 push	 eax
  06486	8d 4d 8c	 lea	 ecx, DWORD PTR $T202831[ebp]
  06489	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  0648e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  06491	51		 push	 ecx
  06492	8b 10		 mov	 edx, DWORD PTR [eax]
  06494	52		 push	 edx
  06495	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  06498	83 c0 01	 add	 eax, 1
  0649b	50		 push	 eax
  0649c	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0649f	83 c1 05	 add	 ecx, 5
  064a2	51		 push	 ecx
  064a3	8d 4d 84	 lea	 ecx, DWORD PTR $T202832[ebp]
  064a6	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  064ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  064ae	52		 push	 edx
  064af	8b 00		 mov	 eax, DWORD PTR [eax]
  064b1	50		 push	 eax
  064b2	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  064b5	51		 push	 ecx
  064b6	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  064bb	83 c4 18	 add	 esp, 24			; 00000018H

; 2078 : 	LineTo(pDC, CPoint(x+6,y), CPoint(x+6,y+3-dp), color);

  064be	8b 55 14	 mov	 edx, DWORD PTR _color$[ebp]
  064c1	52		 push	 edx
  064c2	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  064c5	83 c0 03	 add	 eax, 3
  064c8	2b 45 e8	 sub	 eax, DWORD PTR _dp$[ebp]
  064cb	50		 push	 eax
  064cc	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  064cf	83 c1 06	 add	 ecx, 6
  064d2	51		 push	 ecx
  064d3	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T202833[ebp]
  064d9	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  064de	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  064e1	52		 push	 edx
  064e2	8b 00		 mov	 eax, DWORD PTR [eax]
  064e4	50		 push	 eax
  064e5	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  064e8	51		 push	 ecx
  064e9	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  064ec	83 c2 06	 add	 edx, 6
  064ef	52		 push	 edx
  064f0	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T202834[ebp]
  064f6	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  064fb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  064fe	51		 push	 ecx
  064ff	8b 10		 mov	 edx, DWORD PTR [eax]
  06501	52		 push	 edx
  06502	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  06505	50		 push	 eax
  06506	e8 00 00 00 00	 call	 ?LineTo@@YAXPAVCDC@@VCPoint@@1K@Z ; LineTo
  0650b	83 c4 18	 add	 esp, 24			; 00000018H

; 2079 : 
; 2080 : 	//pDC->MoveTo(x,y+2);
; 2081 : 	//pDC->LineTo(x,y+5-dp);
; 2082 : 	//	
; 2083 : 	//pDC->MoveTo(x+1,y+3);
; 2084 : 	//pDC->LineTo(x+1,y+6-dp);
; 2085 : 	//
; 2086 : 	//pDC->MoveTo(x+2,y+4);
; 2087 : 	//pDC->LineTo(x+2,y+7-dp);
; 2088 : 	//
; 2089 : 	//pDC->MoveTo(x+3,y+3);
; 2090 : 	//pDC->LineTo(x+3,y+6-dp);
; 2091 : 	//
; 2092 : 	//pDC->MoveTo(x+4,y+2);
; 2093 : 	//pDC->LineTo(x+4,y+5-dp);
; 2094 : 	//
; 2095 : 	//pDC->MoveTo(x+5,y+1);
; 2096 : 	//pDC->LineTo(x+5,y+4-dp);
; 2097 : 	//
; 2098 : 	//pDC->MoveTo(x+6,y);
; 2099 : 	//pDC->LineTo(x+6,y+3-dp);
; 2100 : 	
; 2101 : 	pDC->SelectObject (pOldPen);

  0650e	8b 4d e4	 mov	 ecx, DWORD PTR _pOldPen$[ebp]
  06511	51		 push	 ecx
  06512	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  06515	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 2102 : 	m_penBack.DeleteObject();

  0651a	8d 4d ec	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  0651d	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2103 : }

  06522	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06529	8d 4d ec	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  0652c	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  06531	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06534	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0653b	8b e5		 mov	 esp, ebp
  0653d	5d		 pop	 ebp
  0653e	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L202835:
  0042c	8d 4d ec	 lea	 ecx, DWORD PTR _m_penBack$[ebp]
  0042f	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__ehhandler$?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z:
  00434	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202837
  00439	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z ENDP		; BCMenu::DrawCheckMark
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 110  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l$ = 8							; size = 4
_t$ = 12						; size = 4
_r$ = 16						; size = 4
_b$ = 20						; size = 4
??0CRect@@QAE@HHHH@Z PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 112  : 	{ left = l; top = t; right = r; bottom = b; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _r$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
_TEXT	ENDS
PUBLIC	?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z	; BCMenu::FindMenuList
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$199713 = -4						; size = 4
_nID$ = 8						; size = 4
?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z PROC NEAR	; BCMenu::FindMenuList
; _this$ = ecx

; 2106 : {

  06550	55		 push	 ebp
  06551	8b ec		 mov	 ebp, esp
  06553	83 ec 08	 sub	 esp, 8
  06556	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2107 : 	for(int i=0;i<=m_MenuList.GetUpperBound();++i){

  06559	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$199713[ebp], 0
  06560	eb 09		 jmp	 SHORT $L199714
$L199715:
  06562	8b 45 fc	 mov	 eax, DWORD PTR _i$199713[ebp]
  06565	83 c0 01	 add	 eax, 1
  06568	89 45 fc	 mov	 DWORD PTR _i$199713[ebp], eax
$L199714:
  0656b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0656e	83 c1 08	 add	 ecx, 8
  06571	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06576	39 45 fc	 cmp	 DWORD PTR _i$199713[ebp], eax
  06579	7f 5d		 jg	 SHORT $L199716

; 2108 : 		if(m_MenuList[i]->nID==nID && !m_MenuList[i]->syncflag){

  0657b	8b 4d fc	 mov	 ecx, DWORD PTR _i$199713[ebp]
  0657e	51		 push	 ecx
  0657f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06582	83 c1 08	 add	 ecx, 8
  06585	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0658a	8b 10		 mov	 edx, DWORD PTR [eax]
  0658c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0658f	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  06592	75 42		 jne	 SHORT $L199717
  06594	8b 4d fc	 mov	 ecx, DWORD PTR _i$199713[ebp]
  06597	51		 push	 ecx
  06598	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0659b	83 c1 08	 add	 ecx, 8
  0659e	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  065a3	8b 10		 mov	 edx, DWORD PTR [eax]
  065a5	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  065a9	75 2b		 jne	 SHORT $L199717

; 2109 : 			m_MenuList[i]->syncflag=1;

  065ab	8b 45 fc	 mov	 eax, DWORD PTR _i$199713[ebp]
  065ae	50		 push	 eax
  065af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  065b2	83 c1 08	 add	 ecx, 8
  065b5	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  065ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  065bc	c7 41 18 01 00
	00 00		 mov	 DWORD PTR [ecx+24], 1

; 2110 : 			return(m_MenuList[i]);

  065c3	8b 55 fc	 mov	 edx, DWORD PTR _i$199713[ebp]
  065c6	52		 push	 edx
  065c7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  065ca	83 c1 08	 add	 ecx, 8
  065cd	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  065d2	8b 00		 mov	 eax, DWORD PTR [eax]
  065d4	eb 04		 jmp	 SHORT $L199712
$L199717:

; 2111 : 		}
; 2112 : 	}

  065d6	eb 8a		 jmp	 SHORT $L199715
$L199716:

; 2113 : 	return(NULL);

  065d8	33 c0		 xor	 eax, eax
$L199712:

; 2114 : }

  065da	8b e5		 mov	 esp, ebp
  065dc	5d		 pop	 ebp
  065dd	c2 04 00	 ret	 4
?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ENDP	; BCMenu::FindMenuList
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT
; _this$ = ecx

; 123  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT
; _this$ = ecx

; 125  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
_TEXT	ENDS
PUBLIC	?InitializeMenuList@BCMenu@@IAEXH@Z		; BCMenu::InitializeMenuList
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$199722 = -4						; size = 4
_value$ = 8						; size = 4
?InitializeMenuList@BCMenu@@IAEXH@Z PROC NEAR		; BCMenu::InitializeMenuList
; _this$ = ecx

; 2117 : {

  065e0	55		 push	 ebp
  065e1	8b ec		 mov	 ebp, esp
  065e3	83 ec 08	 sub	 esp, 8
  065e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2118 : 	for(int i=0;i<=m_MenuList.GetUpperBound();++i)

  065e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$199722[ebp], 0
  065f0	eb 09		 jmp	 SHORT $L199723
$L199724:
  065f2	8b 45 fc	 mov	 eax, DWORD PTR _i$199722[ebp]
  065f5	83 c0 01	 add	 eax, 1
  065f8	89 45 fc	 mov	 DWORD PTR _i$199722[ebp], eax
$L199723:
  065fb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  065fe	83 c1 08	 add	 ecx, 8
  06601	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06606	39 45 fc	 cmp	 DWORD PTR _i$199722[ebp], eax
  06609	7f 19		 jg	 SHORT $L199721

; 2119 : 		m_MenuList[i]->syncflag=value;

  0660b	8b 4d fc	 mov	 ecx, DWORD PTR _i$199722[ebp]
  0660e	51		 push	 ecx
  0660f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  06612	83 c1 08	 add	 ecx, 8
  06615	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0661a	8b 10		 mov	 edx, DWORD PTR [eax]
  0661c	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0661f	89 42 18	 mov	 DWORD PTR [edx+24], eax
  06622	eb ce		 jmp	 SHORT $L199724
$L199721:

; 2120 : }

  06624	8b e5		 mov	 esp, ebp
  06626	5d		 pop	 ebp
  06627	c2 04 00	 ret	 4
?InitializeMenuList@BCMenu@@IAEXH@Z ENDP		; BCMenu::InitializeMenuList
_TEXT	ENDS
PUBLIC	?DeleteMenuList@BCMenu@@IAEXXZ			; BCMenu::DeleteMenuList
; Function compile flags: /Odt
_TEXT	SEGMENT
tv84 = -20						; size = 4
_this$ = -16						; size = 4
$T202852 = -12						; size = 4
$T202851 = -8						; size = 4
_i$199730 = -4						; size = 4
?DeleteMenuList@BCMenu@@IAEXXZ PROC NEAR		; BCMenu::DeleteMenuList
; _this$ = ecx

; 2123 : {

  06630	55		 push	 ebp
  06631	8b ec		 mov	 ebp, esp
  06633	83 ec 14	 sub	 esp, 20			; 00000014H
  06636	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2124 : 	for(int i=0;i<=m_MenuList.GetUpperBound();++i){

  06639	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$199730[ebp], 0
  06640	eb 09		 jmp	 SHORT $L199731
$L199732:
  06642	8b 45 fc	 mov	 eax, DWORD PTR _i$199730[ebp]
  06645	83 c0 01	 add	 eax, 1
  06648	89 45 fc	 mov	 DWORD PTR _i$199730[ebp], eax
$L199731:
  0664b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0664e	83 c1 08	 add	 ecx, 8
  06651	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06656	39 45 fc	 cmp	 DWORD PTR _i$199730[ebp], eax
  06659	7f 4f		 jg	 SHORT $L199729

; 2125 : 		if(!m_MenuList[i]->syncflag){

  0665b	8b 4d fc	 mov	 ecx, DWORD PTR _i$199730[ebp]
  0665e	51		 push	 ecx
  0665f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06662	83 c1 08	 add	 ecx, 8
  06665	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0666a	8b 10		 mov	 edx, DWORD PTR [eax]
  0666c	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  06670	75 36		 jne	 SHORT $L199734

; 2126 : 			delete m_MenuList[i];

  06672	8b 45 fc	 mov	 eax, DWORD PTR _i$199730[ebp]
  06675	50		 push	 eax
  06676	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  06679	83 c1 08	 add	 ecx, 8
  0667c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  06681	8b 08		 mov	 ecx, DWORD PTR [eax]
  06683	89 4d f4	 mov	 DWORD PTR $T202852[ebp], ecx
  06686	8b 55 f4	 mov	 edx, DWORD PTR $T202852[ebp]
  06689	89 55 f8	 mov	 DWORD PTR $T202851[ebp], edx
  0668c	83 7d f8 00	 cmp	 DWORD PTR $T202851[ebp], 0
  06690	74 0f		 je	 SHORT $L202853
  06692	6a 01		 push	 1
  06694	8b 4d f8	 mov	 ecx, DWORD PTR $T202851[ebp]
  06697	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  0669c	89 45 ec	 mov	 DWORD PTR tv84[ebp], eax
  0669f	eb 07		 jmp	 SHORT $L199734
$L202853:
  066a1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L199734:

; 2127 : 		}
; 2128 : 	}

  066a8	eb 98		 jmp	 SHORT $L199732
$L199729:

; 2129 : }

  066aa	8b e5		 mov	 esp, ebp
  066ac	5d		 pop	 ebp
  066ad	c3		 ret	 0
?DeleteMenuList@BCMenu@@IAEXXZ ENDP			; BCMenu::DeleteMenuList
_TEXT	ENDS
PUBLIC	?SynchronizeMenu@BCMenu@@IAEXXZ			; BCMenu::SynchronizeMenu
PUBLIC	?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
xdata$x	SEGMENT
$T202867 DD	0ffffffffH
	DD	FLAT:$L202859
	DD	00H
	DD	FLAT:$L202860
$T202865 DD	019930520H
	DD	02H
	DD	FLAT:$T202867
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv259 = -96						; size = 4
tv258 = -92						; size = 4
tv256 = -88						; size = 4
tv255 = -84						; size = 4
tv253 = -80						; size = 4
tv252 = -76						; size = 4
_this$ = -72						; size = 4
$T202858 = -68						; size = 4
$T202857 = -64						; size = 4
$T202856 = -60						; size = 4
_state$ = -56						; size = 4
_j$ = -52						; size = 4
_string$ = -48						; size = 4
_mdata$ = -44						; size = 4
_temp$ = -40						; size = 20
_nID$ = -20						; size = 4
_submenu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SynchronizeMenu@BCMenu@@IAEXXZ PROC NEAR		; BCMenu::SynchronizeMenu
; _this$ = ecx

; 2132 : {

  066b0	55		 push	 ebp
  066b1	8b ec		 mov	 ebp, esp
  066b3	6a ff		 push	 -1
  066b5	68 00 00 00 00	 push	 __ehhandler$?SynchronizeMenu@BCMenu@@IAEXXZ
  066ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  066c0	50		 push	 eax
  066c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  066c8	83 ec 54	 sub	 esp, 84			; 00000054H
  066cb	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 2133 : 	CTypedPtrArray<CPtrArray, BCMenuData*> temp;

  066ce	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  066d1	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAE@XZ
  066d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2134 : 	BCMenuData *mdata;
; 2135 : 	CString string;

  066dd	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  066e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  066e6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2136 : 	UINT submenu,nID=0,state,j;

  066ea	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$[ebp], 0

; 2137 : 	
; 2138 : 	InitializeMenuList(0);

  066f1	6a 00		 push	 0
  066f3	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  066f6	e8 00 00 00 00	 call	 ?InitializeMenuList@BCMenu@@IAEXH@Z ; BCMenu::InitializeMenuList

; 2139 : 	for(j=0;j<GetMenuItemCount();++j){

  066fb	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  06702	eb 09		 jmp	 SHORT $L199748
$L199749:
  06704	8b 45 cc	 mov	 eax, DWORD PTR _j$[ebp]
  06707	83 c0 01	 add	 eax, 1
  0670a	89 45 cc	 mov	 DWORD PTR _j$[ebp], eax
$L199748:
  0670d	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06710	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  06715	39 45 cc	 cmp	 DWORD PTR _j$[ebp], eax
  06718	0f 83 2c 02 00
	00		 jae	 $L199750

; 2140 : 		mdata=NULL;

  0671e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _mdata$[ebp], 0

; 2141 : 		state=GetMenuState(j,MF_BYPOSITION);

  06725	68 00 04 00 00	 push	 1024			; 00000400H
  0672a	8b 4d cc	 mov	 ecx, DWORD PTR _j$[ebp]
  0672d	51		 push	 ecx
  0672e	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06731	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  06736	89 45 c8	 mov	 DWORD PTR _state$[ebp], eax

; 2142 : 		if(state&MF_POPUP){

  06739	8b 55 c8	 mov	 edx, DWORD PTR _state$[ebp]
  0673c	83 e2 10	 and	 edx, 16			; 00000010H
  0673f	0f 84 a7 00 00
	00		 je	 $L199751

; 2143 : 			submenu=(UINT)GetSubMenu(j)->m_hMenu;

  06745	8b 45 cc	 mov	 eax, DWORD PTR _j$[ebp]
  06748	50		 push	 eax
  06749	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0674c	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  06751	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  06754	89 4d f0	 mov	 DWORD PTR _submenu$[ebp], ecx

; 2144 : 			mdata=FindMenuList(submenu);

  06757	8b 55 f0	 mov	 edx, DWORD PTR _submenu$[ebp]
  0675a	52		 push	 edx
  0675b	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0675e	e8 00 00 00 00	 call	 ?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuList
  06763	89 45 d4	 mov	 DWORD PTR _mdata$[ebp], eax

; 2145 : 			GetMenuString(j,string,MF_BYPOSITION);

  06766	68 00 04 00 00	 push	 1024			; 00000400H
  0676b	8d 45 d0	 lea	 eax, DWORD PTR _string$[ebp]
  0676e	50		 push	 eax
  0676f	8b 4d cc	 mov	 ecx, DWORD PTR _j$[ebp]
  06772	51		 push	 ecx
  06773	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06776	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 2146 : 			if(!mdata)mdata=NewODMenu(j,

  0677b	83 7d d4 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  0677f	75 47		 jne	 SHORT $L199753

; 2147 : 				(state&0xFF)|MF_BYPOSITION|MF_POPUP|MF_OWNERDRAW,submenu,string);

  06781	51		 push	 ecx
  06782	8b cc		 mov	 ecx, esp
  06784	89 65 c4	 mov	 DWORD PTR $T202856[ebp], esp
  06787	8d 55 d0	 lea	 edx, DWORD PTR _string$[ebp]
  0678a	52		 push	 edx
  0678b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  06791	89 45 b4	 mov	 DWORD PTR tv252[ebp], eax
  06794	8b 45 f0	 mov	 eax, DWORD PTR _submenu$[ebp]
  06797	50		 push	 eax
  06798	8b 4d c8	 mov	 ecx, DWORD PTR _state$[ebp]
  0679b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  067a1	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  067a7	83 c9 10	 or	 ecx, 16			; 00000010H
  067aa	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  067b0	51		 push	 ecx
  067b1	8b 55 cc	 mov	 edx, DWORD PTR _j$[ebp]
  067b4	52		 push	 edx
  067b5	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  067b8	e8 00 00 00 00	 call	 ?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
  067bd	89 45 b0	 mov	 DWORD PTR tv253[ebp], eax
  067c0	8b 45 b0	 mov	 eax, DWORD PTR tv253[ebp]
  067c3	89 45 d4	 mov	 DWORD PTR _mdata$[ebp], eax

; 2148 : 			else if(string.GetLength()>0)

  067c6	eb 1f		 jmp	 SHORT $L199755
$L199753:
  067c8	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  067cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  067d1	85 c0		 test	 eax, eax
  067d3	7e 12		 jle	 SHORT $L199755

; 2149 : #ifdef UNICODE
; 2150 : 				mdata->SetWideString(string);  //SK: modified for dynamic allocation
; 2151 : #else
; 2152 : 			mdata->SetAnsiString(string);

  067d5	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  067d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  067de	50		 push	 eax
  067df	8b 4d d4	 mov	 ecx, DWORD PTR _mdata$[ebp]
  067e2	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString
$L199755:

; 2153 : #endif
; 2154 : 		}
; 2155 : 		else if(state&MF_SEPARATOR){

  067e7	e9 47 01 00 00	 jmp	 $L199757
$L199751:
  067ec	8b 4d c8	 mov	 ecx, DWORD PTR _state$[ebp]
  067ef	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  067f5	74 76		 je	 SHORT $L199758

; 2156 : 			mdata=FindMenuList(0);

  067f7	6a 00		 push	 0
  067f9	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  067fc	e8 00 00 00 00	 call	 ?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuList
  06801	89 45 d4	 mov	 DWORD PTR _mdata$[ebp], eax

; 2157 : 			if(!mdata)mdata=NewODMenu(j,

  06804	83 7d d4 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  06808	75 43		 jne	 SHORT $L199759

; 2158 : 				state|MF_BYPOSITION|MF_SEPARATOR|MF_OWNERDRAW,0,_T(""));//SK: modified for Unicode correctness

  0680a	51		 push	 ecx
  0680b	8b cc		 mov	 ecx, esp
  0680d	89 65 c0	 mov	 DWORD PTR $T202857[ebp], esp
  06810	68 00 00 00 00	 push	 OFFSET FLAT:$SG199761
  06815	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0681b	89 45 ac	 mov	 DWORD PTR tv255[ebp], eax
  0681e	6a 00		 push	 0
  06820	8b 55 c8	 mov	 edx, DWORD PTR _state$[ebp]
  06823	81 ca 00 04 00
	00		 or	 edx, 1024		; 00000400H
  06829	81 ca 00 08 00
	00		 or	 edx, 2048		; 00000800H
  0682f	81 ca 00 01 00
	00		 or	 edx, 256		; 00000100H
  06835	52		 push	 edx
  06836	8b 45 cc	 mov	 eax, DWORD PTR _j$[ebp]
  06839	50		 push	 eax
  0683a	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0683d	e8 00 00 00 00	 call	 ?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
  06842	89 45 a8	 mov	 DWORD PTR tv256[ebp], eax
  06845	8b 4d a8	 mov	 ecx, DWORD PTR tv256[ebp]
  06848	89 4d d4	 mov	 DWORD PTR _mdata$[ebp], ecx

; 2159 : 			else ModifyMenu(j,mdata->nFlags,nID,(LPCTSTR)mdata);

  0684b	eb 1b		 jmp	 SHORT $L199762
$L199759:
  0684d	8b 55 d4	 mov	 edx, DWORD PTR _mdata$[ebp]
  06850	52		 push	 edx
  06851	8b 45 ec	 mov	 eax, DWORD PTR _nID$[ebp]
  06854	50		 push	 eax
  06855	8b 4d d4	 mov	 ecx, DWORD PTR _mdata$[ebp]
  06858	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0685b	52		 push	 edx
  0685c	8b 45 cc	 mov	 eax, DWORD PTR _j$[ebp]
  0685f	50		 push	 eax
  06860	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06863	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L199762:

; 2160 : 		}
; 2161 : 		else{

  06868	e9 c6 00 00 00	 jmp	 $L199757
$L199758:

; 2162 : 			nID=GetMenuItemID(j);

  0686d	8b 4d cc	 mov	 ecx, DWORD PTR _j$[ebp]
  06870	51		 push	 ecx
  06871	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06874	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  06879	89 45 ec	 mov	 DWORD PTR _nID$[ebp], eax

; 2163 : 			mdata=FindMenuList(nID);

  0687c	8b 55 ec	 mov	 edx, DWORD PTR _nID$[ebp]
  0687f	52		 push	 edx
  06880	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06883	e8 00 00 00 00	 call	 ?FindMenuList@BCMenu@@IAEPAVBCMenuData@@I@Z ; BCMenu::FindMenuList
  06888	89 45 d4	 mov	 DWORD PTR _mdata$[ebp], eax

; 2164 : 			GetMenuString(j,string,MF_BYPOSITION);

  0688b	68 00 04 00 00	 push	 1024			; 00000400H
  06890	8d 45 d0	 lea	 eax, DWORD PTR _string$[ebp]
  06893	50		 push	 eax
  06894	8b 4d cc	 mov	 ecx, DWORD PTR _j$[ebp]
  06897	51		 push	 ecx
  06898	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0689b	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 2165 : 			if(!mdata)mdata=NewODMenu(j,state|MF_BYPOSITION|MF_OWNERDRAW,

  068a0	83 7d d4 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  068a4	75 3e		 jne	 SHORT $L199765

; 2166 : 				nID,string);

  068a6	51		 push	 ecx
  068a7	8b cc		 mov	 ecx, esp
  068a9	89 65 bc	 mov	 DWORD PTR $T202858[ebp], esp
  068ac	8d 55 d0	 lea	 edx, DWORD PTR _string$[ebp]
  068af	52		 push	 edx
  068b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  068b6	89 45 a4	 mov	 DWORD PTR tv258[ebp], eax
  068b9	8b 45 ec	 mov	 eax, DWORD PTR _nID$[ebp]
  068bc	50		 push	 eax
  068bd	8b 4d c8	 mov	 ecx, DWORD PTR _state$[ebp]
  068c0	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  068c6	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  068cc	51		 push	 ecx
  068cd	8b 55 cc	 mov	 edx, DWORD PTR _j$[ebp]
  068d0	52		 push	 edx
  068d1	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  068d4	e8 00 00 00 00	 call	 ?NewODMenu@BCMenu@@IAEPAVBCMenuData@@IIIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; BCMenu::NewODMenu
  068d9	89 45 a0	 mov	 DWORD PTR tv259[ebp], eax
  068dc	8b 45 a0	 mov	 eax, DWORD PTR tv259[ebp]
  068df	89 45 d4	 mov	 DWORD PTR _mdata$[ebp], eax

; 2167 : 			else{

  068e2	eb 4f		 jmp	 SHORT $L199757
$L199765:

; 2168 : 				mdata->nFlags=state|MF_BYPOSITION|MF_OWNERDRAW;

  068e4	8b 4d c8	 mov	 ecx, DWORD PTR _state$[ebp]
  068e7	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  068ed	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  068f3	8b 55 d4	 mov	 edx, DWORD PTR _mdata$[ebp]
  068f6	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 2169 : 				if(string.GetLength()>0)

  068f9	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  068fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  06902	85 c0		 test	 eax, eax
  06904	7e 12		 jle	 SHORT $L199768

; 2170 : #ifdef UNICODE
; 2171 : 					mdata->SetWideString(string);//SK: modified for dynamic allocation
; 2172 : #else
; 2173 : 				mdata->SetAnsiString(string);

  06906	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  06909	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0690f	50		 push	 eax
  06910	8b 4d d4	 mov	 ecx, DWORD PTR _mdata$[ebp]
  06913	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString
$L199768:

; 2174 : #endif
; 2175 : 				
; 2176 : 				ModifyMenu(j,mdata->nFlags,nID,(LPCTSTR)mdata);

  06918	8b 45 d4	 mov	 eax, DWORD PTR _mdata$[ebp]
  0691b	50		 push	 eax
  0691c	8b 4d ec	 mov	 ecx, DWORD PTR _nID$[ebp]
  0691f	51		 push	 ecx
  06920	8b 55 d4	 mov	 edx, DWORD PTR _mdata$[ebp]
  06923	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  06926	50		 push	 eax
  06927	8b 4d cc	 mov	 ecx, DWORD PTR _j$[ebp]
  0692a	51		 push	 ecx
  0692b	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0692e	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA
$L199757:

; 2177 : 			}
; 2178 : 		}
; 2179 : 		if(mdata)temp.Add(mdata);

  06933	83 7d d4 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  06937	74 0c		 je	 SHORT $L199770
  06939	8b 55 d4	 mov	 edx, DWORD PTR _mdata$[ebp]
  0693c	52		 push	 edx
  0693d	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  06940	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L199770:

; 2180 : 	}

  06945	e9 ba fd ff ff	 jmp	 $L199749
$L199750:

; 2181 : 	DeleteMenuList();

  0694a	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0694d	e8 00 00 00 00	 call	 ?DeleteMenuList@BCMenu@@IAEXXZ ; BCMenu::DeleteMenuList

; 2182 : 	m_MenuList.RemoveAll();

  06952	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06955	83 c1 08	 add	 ecx, 8
  06958	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 2183 : 	m_MenuList.Append(temp);

  0695d	8d 45 d8	 lea	 eax, DWORD PTR _temp$[ebp]
  06960	50		 push	 eax
  06961	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  06964	83 c1 08	 add	 ecx, 8
  06967	e8 00 00 00 00	 call	 ?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append

; 2184 : 	temp.RemoveAll(); 

  0696c	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  0696f	e8 00 00 00 00	 call	 ?RemoveAll@CPtrArray@@QAEXXZ ; CPtrArray::RemoveAll

; 2185 : }

  06974	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06978	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  0697b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06981	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06988	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  0698b	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
  06990	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06993	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0699a	8b e5		 mov	 esp, ebp
  0699c	5d		 pop	 ebp
  0699d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202859:
  0043e	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  00441	e9 00 00 00 00	 jmp	 ??1?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@UAE@XZ
$L202860:
  00446	8d 4d d0	 lea	 ecx, DWORD PTR _string$[ebp]
  00449	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SynchronizeMenu@BCMenu@@IAEXXZ:
  0044f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202865
  00454	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SynchronizeMenu@BCMenu@@IAEXXZ ENDP			; BCMenu::SynchronizeMenu
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT
; _this$ = ecx

; 143  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
EXTRN	__imp__SetRect@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetRect@CRect@@QAEXHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?SetRect@CRect@@QAEXHHHH@Z PROC NEAR			; CRect::SetRect, COMDAT
; _this$ = ecx

; 153  : 	{ ::SetRect(this, x1, y1, x2, y2); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?SetRect@CRect@@QAEXHHHH@Z ENDP				; CRect::SetRect
_TEXT	ENDS
EXTRN	__imp__CopyRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?CopyRect@CRect@@QAEXPBUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSrcRect$ = 8						; size = 4
?CopyRect@CRect@@QAEXPBUtagRECT@@@Z PROC NEAR		; CRect::CopyRect, COMDAT
; _this$ = ecx

; 159  : 	{ ::CopyRect(this, lpSrcRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpSrcRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyRect@8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?CopyRect@CRect@@QAEXPBUtagRECT@@@Z ENDP		; CRect::CopyRect
_TEXT	ENDS
PUBLIC	?UpdateMenu@BCMenu@@SAXPAVCMenu@@@Z		; BCMenu::UpdateMenu
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_psubmenu$ = -4						; size = 4
_pmenu$ = 8						; size = 4
?UpdateMenu@BCMenu@@SAXPAVCMenu@@@Z PROC NEAR		; BCMenu::UpdateMenu

; 2188 : {

  069a0	55		 push	 ebp
  069a1	8b ec		 mov	 ebp, esp
  069a3	51		 push	 ecx

; 2189 : #ifdef _CPPRTTI 
; 2190 : 	BCMenu *psubmenu = dynamic_cast<BCMenu *>(pmenu);

  069a4	6a 00		 push	 0
  069a6	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  069ab	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  069b0	6a 00		 push	 0
  069b2	8b 45 08	 mov	 eax, DWORD PTR _pmenu$[ebp]
  069b5	50		 push	 eax
  069b6	e8 00 00 00 00	 call	 ___RTDynamicCast
  069bb	83 c4 14	 add	 esp, 20			; 00000014H
  069be	89 45 fc	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 2191 : #else
; 2192 : 	BCMenu *psubmenu = (BCMenu *)pmenu;
; 2193 : #endif
; 2194 : 	if(psubmenu)psubmenu->SynchronizeMenu();

  069c1	83 7d fc 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  069c5	74 08		 je	 SHORT $L199773
  069c7	8b 4d fc	 mov	 ecx, DWORD PTR _psubmenu$[ebp]
  069ca	e8 00 00 00 00	 call	 ?SynchronizeMenu@BCMenu@@IAEXXZ ; BCMenu::SynchronizeMenu
$L199773:

; 2195 : }

  069cf	8b e5		 mov	 esp, ebp
  069d1	5d		 pop	 ebp
  069d2	c3		 ret	 0
?UpdateMenu@BCMenu@@SAXPAVCMenu@@@Z ENDP		; BCMenu::UpdateMenu
_TEXT	ENDS
PUBLIC	?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z	; BCMenu::FindKeyboardShortcut
EXTRN	__imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z:NEAR
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z:NEAR
EXTRN	__imp_?MakeLower@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ:NEAR
xdata$x	SEGMENT
$T202882 DD	0ffffffffH
	DD	FLAT:$L202877
	DD	00H
	DD	FLAT:$L202878
$T202880 DD	019930520H
	DD	02H
	DD	FLAT:$T202882
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
$T202876 = -36						; size = 4
_i$199791 = -32						; size = 4
_menusize$199788 = -28					; size = 4
_key$199785 = -24					; size = 4
_menutext$199787 = -20					; size = 4
_pBCMenu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nChar$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_pMenu$ = 16						; size = 4
?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z PROC NEAR ; BCMenu::FindKeyboardShortcut

; 2199 : {

  069e0	55		 push	 ebp
  069e1	8b ec		 mov	 ebp, esp
  069e3	6a ff		 push	 -1
  069e5	68 00 00 00 00	 push	 __ehhandler$?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z
  069ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  069f0	50		 push	 eax
  069f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  069f8	83 ec 18	 sub	 esp, 24			; 00000018H

; 2200 : #ifdef _CPPRTTI 
; 2201 : 	BCMenu *pBCMenu = dynamic_cast<BCMenu *>(pMenu);

  069fb	6a 00		 push	 0
  069fd	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVBCMenu@@@8
  06a02	68 00 00 00 00	 push	 OFFSET FLAT:??_R0?AVCMenu@@@8
  06a07	6a 00		 push	 0
  06a09	8b 45 10	 mov	 eax, DWORD PTR _pMenu$[ebp]
  06a0c	50		 push	 eax
  06a0d	e8 00 00 00 00	 call	 ___RTDynamicCast
  06a12	83 c4 14	 add	 esp, 20			; 00000014H
  06a15	89 45 f0	 mov	 DWORD PTR _pBCMenu$[ebp], eax

; 2202 : #else
; 2203 : 	BCMenu *pBCMenu = (BCMenu *)pMenu;
; 2204 : #endif
; 2205 : 	if(pBCMenu && nFlags&MF_POPUP){

  06a18	83 7d f0 00	 cmp	 DWORD PTR _pBCMenu$[ebp], 0
  06a1c	0f 84 19 01 00
	00		 je	 $L199784
  06a22	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  06a25	83 e1 10	 and	 ecx, 16			; 00000010H
  06a28	0f 84 0d 01 00
	00		 je	 $L199784

; 2206 : 		CString key(_T('&'),2);//SK: modified for Unicode correctness

  06a2e	6a 02		 push	 2
  06a30	6a 26		 push	 38			; 00000026H
  06a32	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  06a35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z
  06a3b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2207 : 		key.SetAt(1,(TCHAR)nChar);

  06a42	8a 55 08	 mov	 dl, BYTE PTR _nChar$[ebp]
  06a45	52		 push	 edx
  06a46	6a 01		 push	 1
  06a48	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  06a4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2208 : 		key.MakeLower();

  06a51	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  06a54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?MakeLower@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 2209 : 		CString menutext;

  06a5a	8d 4d ec	 lea	 ecx, DWORD PTR _menutext$199787[ebp]
  06a5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06a63	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2210 : 		int menusize = (int)pBCMenu->GetMenuItemCount();

  06a67	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  06a6a	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  06a6f	89 45 e4	 mov	 DWORD PTR _menusize$199788[ebp], eax

; 2211 : 		if(menusize!=(pBCMenu->m_MenuList.GetUpperBound()+1))

  06a72	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  06a75	83 c1 08	 add	 ecx, 8
  06a78	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  06a7d	83 c0 01	 add	 eax, 1
  06a80	39 45 e4	 cmp	 DWORD PTR _menusize$199788[ebp], eax
  06a83	74 08		 je	 SHORT $L199790

; 2212 : 			pBCMenu->SynchronizeMenu();

  06a85	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  06a88	e8 00 00 00 00	 call	 ?SynchronizeMenu@BCMenu@@IAEXXZ ; BCMenu::SynchronizeMenu
$L199790:

; 2213 : 		for(int i=0;i<menusize;++i){

  06a8d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$199791[ebp], 0
  06a94	eb 09		 jmp	 SHORT $L199792
$L199793:
  06a96	8b 45 e0	 mov	 eax, DWORD PTR _i$199791[ebp]
  06a99	83 c0 01	 add	 eax, 1
  06a9c	89 45 e0	 mov	 DWORD PTR _i$199791[ebp], eax
$L199792:
  06a9f	8b 4d e0	 mov	 ecx, DWORD PTR _i$199791[ebp]
  06aa2	3b 4d e4	 cmp	 ecx, DWORD PTR _menusize$199788[ebp]
  06aa5	7d 77		 jge	 SHORT $L199794

; 2214 : 			if(pBCMenu->GetMenuText(i,menutext)){

  06aa7	68 00 04 00 00	 push	 1024			; 00000400H
  06aac	8d 55 ec	 lea	 edx, DWORD PTR _menutext$199787[ebp]
  06aaf	52		 push	 edx
  06ab0	8b 45 e0	 mov	 eax, DWORD PTR _i$199791[ebp]
  06ab3	50		 push	 eax
  06ab4	8b 4d f0	 mov	 ecx, DWORD PTR _pBCMenu$[ebp]
  06ab7	e8 00 00 00 00	 call	 ?GetMenuText@BCMenu@@QAEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::GetMenuText
  06abc	85 c0		 test	 eax, eax
  06abe	74 59		 je	 SHORT $L199795

; 2215 : 				menutext.MakeLower();

  06ac0	8d 4d ec	 lea	 ecx, DWORD PTR _menutext$199787[ebp]
  06ac3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?MakeLower@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 2216 : 				if(menutext.Find(key)>=0)return(MAKELRESULT(i,2));

  06ac9	6a 00		 push	 0
  06acb	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  06ace	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  06ad4	50		 push	 eax
  06ad5	8d 4d ec	 lea	 ecx, DWORD PTR _menutext$199787[ebp]
  06ad8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  06ade	85 c0		 test	 eax, eax
  06ae0	7c 37		 jl	 SHORT $L199795
  06ae2	8b 4d e0	 mov	 ecx, DWORD PTR _i$199791[ebp]
  06ae5	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  06aeb	0f b7 d1	 movzx	 edx, cx
  06aee	81 ca 00 00 02
	00		 or	 edx, 131072		; 00020000H
  06af4	89 55 dc	 mov	 DWORD PTR $T202876[ebp], edx
  06af7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06afb	8d 4d ec	 lea	 ecx, DWORD PTR _menutext$199787[ebp]
  06afe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06b04	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06b0b	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  06b0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06b14	8b 45 dc	 mov	 eax, DWORD PTR $T202876[ebp]
  06b17	eb 24		 jmp	 SHORT $L199781
$L199795:

; 2217 : 			}
; 2218 : 		}

  06b19	e9 78 ff ff ff	 jmp	 $L199793
$L199794:

; 2219 : 	}

  06b1e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06b22	8d 4d ec	 lea	 ecx, DWORD PTR _menutext$199787[ebp]
  06b25	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  06b2b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06b32	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  06b35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199784:

; 2220 : 	return(0);

  06b3b	33 c0		 xor	 eax, eax
$L199781:

; 2221 : }

  06b3d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06b40	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06b47	8b e5		 mov	 esp, ebp
  06b49	5d		 pop	 ebp
  06b4a	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L202877:
  00459	8d 4d e8	 lea	 ecx, DWORD PTR _key$199785[ebp]
  0045c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L202878:
  00462	8d 4d ec	 lea	 ecx, DWORD PTR _menutext$199787[ebp]
  00465	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z:
  0046b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202880
  00470	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?FindKeyboardShortcut@BCMenu@@SAJIIPAVCMenu@@@Z ENDP	; BCMenu::FindKeyboardShortcut
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__BitBlt@36:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	__imp__CreateSolidBrush@4:NEAR
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	__imp__CreateDIBSection@24:NEAR
EXTRN	__imp__GetSysColorBrush@4:NEAR
EXTRN	__imp__FillRect@12:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -100						; size = 4
$T202884 = -96						; size = 16
_olddib$199842 = -80					; size = 4
_hb$199848 = -76					; size = 4
_hdcolddib$199844 = -72					; size = 4
_oldBrush$199849 = -68					; size = 4
_RGBBWBITMAPINFO$199835 = -64				; size = 48
_hbmBW$199838 = -16					; size = 4
_pbitsBW$199837 = -12					; size = 4
_bwDC$199823 = -8					; size = 4
_hDC$ = -4						; size = 4
_hdcDest$ = 8						; size = 4
_nXDest$ = 12						; size = 4
_nYDest$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_hbm$ = 28						; size = 4
_nXSrc$ = 32						; size = 4
_nYSrc$ = 36						; size = 4
_bgcolor$ = 40						; size = 4
?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z PROC NEAR ; BCMenu::DitherBlt
; _this$ = ecx

; 2226 : {

  06b50	55		 push	 ebp
  06b51	8b ec		 mov	 ebp, esp
  06b53	83 ec 64	 sub	 esp, 100		; 00000064H
  06b56	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 : 	ASSERT(hdcDest && hbm);
; 2228 : 	ASSERT(nWidth > 0 && nHeight > 0);
; 2229 : 	
; 2230 : 	// Create a generic DC for all BitBlts
; 2231 : 	HDC hDC = CreateCompatibleDC(hdcDest);

  06b59	8b 45 08	 mov	 eax, DWORD PTR _hdcDest$[ebp]
  06b5c	50		 push	 eax
  06b5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  06b63	89 45 fc	 mov	 DWORD PTR _hDC$[ebp], eax

; 2232 : 	ASSERT(hDC);
; 2233 : 	
; 2234 : 	if (hDC)

  06b66	83 7d fc 00	 cmp	 DWORD PTR _hDC$[ebp], 0
  06b6a	0f 84 13 02 00
	00		 je	 $L199817

; 2235 : 	{
; 2236 : 		// Create a DC for the monochrome DIB section
; 2237 : 		HDC bwDC = CreateCompatibleDC(hDC);

  06b70	8b 4d fc	 mov	 ecx, DWORD PTR _hDC$[ebp]
  06b73	51		 push	 ecx
  06b74	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  06b7a	89 45 f8	 mov	 DWORD PTR _bwDC$199823[ebp], eax

; 2238 : 		ASSERT(bwDC);
; 2239 : 		
; 2240 : 		if (bwDC)

  06b7d	83 7d f8 00	 cmp	 DWORD PTR _bwDC$199823[ebp], 0
  06b81	0f 84 f2 01 00
	00		 je	 $L199825

; 2241 : 		{
; 2242 : 			// Create the monochrome DIB section with a black and white palette
; 2243 : 			struct {
; 2244 : 				BITMAPINFOHEADER bmiHeader; 
; 2245 : 				RGBQUAD      bmiColors[2]; 
; 2246 : 			} RGBBWBITMAPINFO = {
; 2247 : 				
; 2248 : 				{    // a BITMAPINFOHEADER
; 2249 : 					sizeof(BITMAPINFOHEADER),  // biSize 

  06b87	c7 45 c0 28 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp], 40 ; 00000028H

; 2250 : 						nWidth,         // biWidth; 

  06b8e	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  06b91	89 55 c4	 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+4], edx

; 2251 : 						nHeight,        // biHeight; 

  06b94	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  06b97	89 45 c8	 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+8], eax

; 2252 : 						1,            // biPlanes; 

  06b9a	66 c7 45 cc 01
	00		 mov	 WORD PTR _RGBBWBITMAPINFO$199835[ebp+12], 1

; 2253 : 						1,            // biBitCount 

  06ba0	66 c7 45 ce 01
	00		 mov	 WORD PTR _RGBBWBITMAPINFO$199835[ebp+14], 1

; 2254 : 						BI_RGB,         // biCompression; 

  06ba6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+16], 0

; 2255 : 						0,            // biSizeImage; 

  06bad	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+20], 0

; 2256 : 						0,            // biXPelsPerMeter; 

  06bb4	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+24], 0

; 2257 : 						0,            // biYPelsPerMeter; 

  06bbb	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+28], 0

; 2258 : 						0,            // biClrUsed; 

  06bc2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+32], 0

; 2259 : 						0            // biClrImportant; 
; 2260 : 				},    

  06bc9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _RGBBWBITMAPINFO$199835[ebp+36], 0

; 2261 : 				{
; 2262 : 					{ 0x00, 0x00, 0x00, 0x00 }, { 0xFF, 0xFF, 0xFF, 0x00 }

  06bd0	c6 45 e8 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+40], 0
  06bd4	c6 45 e9 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+41], 0
  06bd8	c6 45 ea 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+42], 0
  06bdc	c6 45 eb 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+43], 0
  06be0	c6 45 ec ff	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+44], 255 ; 000000ffH
  06be4	c6 45 ed ff	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+45], 255 ; 000000ffH
  06be8	c6 45 ee ff	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+46], 255 ; 000000ffH
  06bec	c6 45 ef 00	 mov	 BYTE PTR _RGBBWBITMAPINFO$199835[ebp+47], 0

; 2263 : 					} 
; 2264 : 			};
; 2265 : 			VOID *pbitsBW;
; 2266 : 			HBITMAP hbmBW = CreateDIBSection(bwDC,
; 2267 : 				(LPBITMAPINFO)&RGBBWBITMAPINFO, DIB_RGB_COLORS, &pbitsBW, NULL, 0);

  06bf0	6a 00		 push	 0
  06bf2	6a 00		 push	 0
  06bf4	8d 4d f4	 lea	 ecx, DWORD PTR _pbitsBW$199837[ebp]
  06bf7	51		 push	 ecx
  06bf8	6a 00		 push	 0
  06bfa	8d 55 c0	 lea	 edx, DWORD PTR _RGBBWBITMAPINFO$199835[ebp]
  06bfd	52		 push	 edx
  06bfe	8b 45 f8	 mov	 eax, DWORD PTR _bwDC$199823[ebp]
  06c01	50		 push	 eax
  06c02	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDIBSection@24
  06c08	89 45 f0	 mov	 DWORD PTR _hbmBW$199838[ebp], eax

; 2268 : 			ASSERT(hbmBW);
; 2269 : 			
; 2270 : 			if (hbmBW)

  06c0b	83 7d f0 00	 cmp	 DWORD PTR _hbmBW$199838[ebp], 0
  06c0f	0f 84 5a 01 00
	00		 je	 $L199841

; 2271 : 			{
; 2272 : 				// Attach the monochrome DIB section and the bitmap to the DCs
; 2273 : 				HBITMAP olddib = (HBITMAP)SelectObject(bwDC, hbmBW);

  06c15	8b 4d f0	 mov	 ecx, DWORD PTR _hbmBW$199838[ebp]
  06c18	51		 push	 ecx
  06c19	8b 55 f8	 mov	 edx, DWORD PTR _bwDC$199823[ebp]
  06c1c	52		 push	 edx
  06c1d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  06c23	89 45 b0	 mov	 DWORD PTR _olddib$199842[ebp], eax

; 2274 : 				HBITMAP hdcolddib = (HBITMAP)SelectObject(hDC, hbm);

  06c26	8b 45 1c	 mov	 eax, DWORD PTR _hbm$[ebp]
  06c29	50		 push	 eax
  06c2a	8b 4d fc	 mov	 ecx, DWORD PTR _hDC$[ebp]
  06c2d	51		 push	 ecx
  06c2e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  06c34	89 45 b8	 mov	 DWORD PTR _hdcolddib$199844[ebp], eax

; 2275 : 				
; 2276 : 				// BitBlt the bitmap into the monochrome DIB section
; 2277 : 				BitBlt(bwDC, 0, 0, nWidth, nHeight, hDC, nXSrc, nYSrc, SRCCOPY);

  06c37	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  06c3c	8b 55 24	 mov	 edx, DWORD PTR _nYSrc$[ebp]
  06c3f	52		 push	 edx
  06c40	8b 45 20	 mov	 eax, DWORD PTR _nXSrc$[ebp]
  06c43	50		 push	 eax
  06c44	8b 4d fc	 mov	 ecx, DWORD PTR _hDC$[ebp]
  06c47	51		 push	 ecx
  06c48	8b 55 18	 mov	 edx, DWORD PTR _nHeight$[ebp]
  06c4b	52		 push	 edx
  06c4c	8b 45 14	 mov	 eax, DWORD PTR _nWidth$[ebp]
  06c4f	50		 push	 eax
  06c50	6a 00		 push	 0
  06c52	6a 00		 push	 0
  06c54	8b 4d f8	 mov	 ecx, DWORD PTR _bwDC$199823[ebp]
  06c57	51		 push	 ecx
  06c58	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 2278 : 				
; 2279 : 				// Paint the destination rectangle in gray
; 2280 : 				FillRect(hdcDest, CRect(nXDest, nYDest, nXDest + nWidth, nYDest +
; 2281 : 					nHeight), GetSysColorBrush(bgcolor));

  06c5e	8b 55 28	 mov	 edx, DWORD PTR _bgcolor$[ebp]
  06c61	52		 push	 edx
  06c62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColorBrush@4
  06c68	50		 push	 eax
  06c69	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  06c6c	03 45 18	 add	 eax, DWORD PTR _nHeight$[ebp]
  06c6f	50		 push	 eax
  06c70	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  06c73	03 4d 14	 add	 ecx, DWORD PTR _nWidth$[ebp]
  06c76	51		 push	 ecx
  06c77	8b 55 10	 mov	 edx, DWORD PTR _nYDest$[ebp]
  06c7a	52		 push	 edx
  06c7b	8b 45 0c	 mov	 eax, DWORD PTR _nXDest$[ebp]
  06c7e	50		 push	 eax
  06c7f	8d 4d a0	 lea	 ecx, DWORD PTR $T202884[ebp]
  06c82	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  06c87	8b c8		 mov	 ecx, eax
  06c89	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  06c8e	50		 push	 eax
  06c8f	8b 4d 08	 mov	 ecx, DWORD PTR _hdcDest$[ebp]
  06c92	51		 push	 ecx
  06c93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 2282 : 				//SK: looks better on the old shell
; 2283 : 				// BitBlt the black bits in the monochrome bitmap into COLOR_3DHILIGHT
; 2284 : 				// bits in the destination DC
; 2285 : 				// The magic ROP comes from the Charles Petzold's book
; 2286 : 				HBRUSH hb = CreateSolidBrush(GetSysColor(COLOR_3DHILIGHT));

  06c99	6a 14		 push	 20			; 00000014H
  06c9b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  06ca1	50		 push	 eax
  06ca2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  06ca8	89 45 b4	 mov	 DWORD PTR _hb$199848[ebp], eax

; 2287 : 				HBRUSH oldBrush = (HBRUSH)SelectObject(hdcDest, hb);

  06cab	8b 55 b4	 mov	 edx, DWORD PTR _hb$199848[ebp]
  06cae	52		 push	 edx
  06caf	8b 45 08	 mov	 eax, DWORD PTR _hdcDest$[ebp]
  06cb2	50		 push	 eax
  06cb3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  06cb9	89 45 bc	 mov	 DWORD PTR _oldBrush$199849[ebp], eax

; 2288 : 				BitBlt(hdcDest,nXDest+1,nYDest+1,nWidth,nHeight,bwDC,0,0,0xB8074A);

  06cbc	68 4a 07 b8 00	 push	 12060490		; 00b8074aH
  06cc1	6a 00		 push	 0
  06cc3	6a 00		 push	 0
  06cc5	8b 4d f8	 mov	 ecx, DWORD PTR _bwDC$199823[ebp]
  06cc8	51		 push	 ecx
  06cc9	8b 55 18	 mov	 edx, DWORD PTR _nHeight$[ebp]
  06ccc	52		 push	 edx
  06ccd	8b 45 14	 mov	 eax, DWORD PTR _nWidth$[ebp]
  06cd0	50		 push	 eax
  06cd1	8b 4d 10	 mov	 ecx, DWORD PTR _nYDest$[ebp]
  06cd4	83 c1 01	 add	 ecx, 1
  06cd7	51		 push	 ecx
  06cd8	8b 55 0c	 mov	 edx, DWORD PTR _nXDest$[ebp]
  06cdb	83 c2 01	 add	 edx, 1
  06cde	52		 push	 edx
  06cdf	8b 45 08	 mov	 eax, DWORD PTR _hdcDest$[ebp]
  06ce2	50		 push	 eax
  06ce3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 2289 : 				
; 2290 : 				// BitBlt the black bits in the monochrome bitmap into COLOR_3DSHADOW
; 2291 : 				// bits in the destination DC
; 2292 : 				hb = CreateSolidBrush(GetSysColor(COLOR_3DSHADOW));

  06ce9	6a 10		 push	 16			; 00000010H
  06ceb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  06cf1	50		 push	 eax
  06cf2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  06cf8	89 45 b4	 mov	 DWORD PTR _hb$199848[ebp], eax

; 2293 : 				DeleteObject(SelectObject(hdcDest, hb));

  06cfb	8b 4d b4	 mov	 ecx, DWORD PTR _hb$199848[ebp]
  06cfe	51		 push	 ecx
  06cff	8b 55 08	 mov	 edx, DWORD PTR _hdcDest$[ebp]
  06d02	52		 push	 edx
  06d03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  06d09	50		 push	 eax
  06d0a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 2294 : 				BitBlt(hdcDest, nXDest, nYDest, nWidth, nHeight,bwDC,0,0,0xB8074A);

  06d10	68 4a 07 b8 00	 push	 12060490		; 00b8074aH
  06d15	6a 00		 push	 0
  06d17	6a 00		 push	 0
  06d19	8b 45 f8	 mov	 eax, DWORD PTR _bwDC$199823[ebp]
  06d1c	50		 push	 eax
  06d1d	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  06d20	51		 push	 ecx
  06d21	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  06d24	52		 push	 edx
  06d25	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  06d28	50		 push	 eax
  06d29	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  06d2c	51		 push	 ecx
  06d2d	8b 55 08	 mov	 edx, DWORD PTR _hdcDest$[ebp]
  06d30	52		 push	 edx
  06d31	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 2295 : 				DeleteObject(SelectObject(hdcDest, oldBrush));

  06d37	8b 45 bc	 mov	 eax, DWORD PTR _oldBrush$199849[ebp]
  06d3a	50		 push	 eax
  06d3b	8b 4d 08	 mov	 ecx, DWORD PTR _hdcDest$[ebp]
  06d3e	51		 push	 ecx
  06d3f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  06d45	50		 push	 eax
  06d46	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 2296 : 				VERIFY(DeleteObject(SelectObject(bwDC, olddib)));

  06d4c	8b 55 b0	 mov	 edx, DWORD PTR _olddib$199842[ebp]
  06d4f	52		 push	 edx
  06d50	8b 45 f8	 mov	 eax, DWORD PTR _bwDC$199823[ebp]
  06d53	50		 push	 eax
  06d54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  06d5a	50		 push	 eax
  06d5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 2297 : 				SelectObject(hDC, hdcolddib);

  06d61	8b 4d b8	 mov	 ecx, DWORD PTR _hdcolddib$199844[ebp]
  06d64	51		 push	 ecx
  06d65	8b 55 fc	 mov	 edx, DWORD PTR _hDC$[ebp]
  06d68	52		 push	 edx
  06d69	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
$L199841:

; 2298 : 			}
; 2299 : 			
; 2300 : 			VERIFY(DeleteDC(bwDC));

  06d6f	8b 45 f8	 mov	 eax, DWORD PTR _bwDC$199823[ebp]
  06d72	50		 push	 eax
  06d73	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
$L199825:

; 2301 : 		}
; 2302 : 		
; 2303 : 		VERIFY(DeleteDC(hDC));

  06d79	8b 4d fc	 mov	 ecx, DWORD PTR _hDC$[ebp]
  06d7c	51		 push	 ecx
  06d7d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
$L199817:

; 2304 : 	}
; 2305 : }

  06d83	8b e5		 mov	 esp, ebp
  06d85	5d		 pop	 ebp
  06d86	c2 24 00	 ret	 36			; 00000024H
?DitherBlt@BCMenu@@IAEXPAUHDC__@@HHHHPAUHBITMAP__@@HHK@Z ENDP ; BCMenu::DitherBlt
_TEXT	ENDS
PUBLIC	__real@3fd3333333333333
PUBLIC	?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z	; BCMenu::GetFadedBitmap
PUBLIC	?GetPixel@CDC@@QBEKHH@Z				; CDC::GetPixel
PUBLIC	?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z	; CBitmap::GetBitmap
xdata$x	SEGMENT
$T202895 DD	0ffffffffH
	DD	FLAT:$L202886
	DD	00H
	DD	FLAT:$L202887
	DD	01H
	DD	FLAT:$L202888
	DD	02H
	DD	FLAT:$L202889
$T202891 DD	019930520H
	DD	04H
	DD	FLAT:$T202895
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
_this$ = -128						; size = 4
_j$199872 = -124					; size = 4
_i$199868 = -120					; size = 4
_BitMap$ = -116						; size = 24
_pddcOldBmp$ = -92					; size = 4
_brush$ = -88						; size = 8
_ddc$ = -80						; size = 16
_ddc2$ = -64						; size = 16
_bmp2$ = -48						; size = 8
_bgcol$ = -40						; size = 4
_rect$ = -36						; size = 16
_pddcOldBmp2$ = -20					; size = 4
_col$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z PROC NEAR	; BCMenu::GetFadedBitmap
; _this$ = ecx

; 2308 : {

  06d90	55		 push	 ebp
  06d91	8b ec		 mov	 ebp, esp
  06d93	6a ff		 push	 -1
  06d95	68 00 00 00 00	 push	 __ehhandler$?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z
  06d9a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06da0	50		 push	 eax
  06da1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06da8	83 ec 74	 sub	 esp, 116		; 00000074H
  06dab	89 4d 80	 mov	 DWORD PTR _this$[ebp], ecx

; 2309 : 	CDC ddc;

  06dae	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06db1	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  06db6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2310 : 	COLORREF bgcol,col;
; 2311 : 	BITMAP BitMap;
; 2312 : 
; 2313 : 	bmp.GetBitmap(&BitMap);

  06dbd	8d 45 8c	 lea	 eax, DWORD PTR _BitMap$[ebp]
  06dc0	50		 push	 eax
  06dc1	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  06dc4	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2314 : 	ddc.CreateCompatibleDC(NULL);

  06dc9	6a 00		 push	 0
  06dcb	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06dce	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2315 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  06dd3	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  06dd6	51		 push	 ecx
  06dd7	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06dda	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  06ddf	89 45 a4	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2316 : 
; 2317 : 	// use this to get the background color, takes into account color shifting
; 2318 : 	CDC ddc2;

  06de2	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06de5	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  06dea	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2319 : 	CBrush brush;

  06dee	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  06df1	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  06df6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2320 : 	CBitmap bmp2;

  06dfa	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  06dfd	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  06e02	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2321 : 	ddc2.CreateCompatibleDC(NULL);

  06e06	6a 00		 push	 0
  06e08	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06e0b	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2322 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  06e10	8b 55 94	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  06e13	52		 push	 edx
  06e14	8b 45 90	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  06e17	50		 push	 eax
  06e18	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06e1b	51		 push	 ecx
  06e1c	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  06e1f	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2323 : 	col=GetSysColor(COLOR_3DFACE);

  06e24	6a 0f		 push	 15			; 0000000fH
  06e26	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  06e2c	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2324 : 	brush.CreateSolidBrush(col);

  06e2f	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  06e32	52		 push	 edx
  06e33	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  06e36	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2325 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  06e3b	8d 45 d0	 lea	 eax, DWORD PTR _bmp2$[ebp]
  06e3e	50		 push	 eax
  06e3f	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06e42	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  06e47	89 45 ec	 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2326 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  06e4a	8b 4d 94	 mov	 ecx, DWORD PTR _BitMap$[ebp+8]
  06e4d	51		 push	 ecx
  06e4e	8b 55 90	 mov	 edx, DWORD PTR _BitMap$[ebp+4]
  06e51	52		 push	 edx
  06e52	6a 00		 push	 0
  06e54	6a 00		 push	 0
  06e56	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  06e59	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2327 : 	ddc2.FillRect(rect,&brush);

  06e5e	8d 45 a8	 lea	 eax, DWORD PTR _brush$[ebp]
  06e61	50		 push	 eax
  06e62	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  06e65	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  06e6a	50		 push	 eax
  06e6b	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06e6e	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2328 : 	bgcol=ddc2.GetPixel(1,1);

  06e73	6a 01		 push	 1
  06e75	6a 01		 push	 1
  06e77	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06e7a	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  06e7f	89 45 d8	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2329 : 	brush.DeleteObject();

  06e82	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  06e85	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2330 : 	ddc2.SelectObject(pddcOldBmp2);

  06e8a	8b 4d ec	 mov	 ecx, DWORD PTR _pddcOldBmp2$[ebp]
  06e8d	51		 push	 ecx
  06e8e	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06e91	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2331 : 
; 2332 : 	for(int i=0;i<BitMap.bmWidth;++i){

  06e96	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _i$199868[ebp], 0
  06e9d	eb 09		 jmp	 SHORT $L199869
$L199870:
  06e9f	8b 55 88	 mov	 edx, DWORD PTR _i$199868[ebp]
  06ea2	83 c2 01	 add	 edx, 1
  06ea5	89 55 88	 mov	 DWORD PTR _i$199868[ebp], edx
$L199869:
  06ea8	8b 45 88	 mov	 eax, DWORD PTR _i$199868[ebp]
  06eab	3b 45 90	 cmp	 eax, DWORD PTR _BitMap$[ebp+4]
  06eae	7d 62		 jge	 SHORT $L199871

; 2333 : 		for(int j=0;j<BitMap.bmHeight;++j){

  06eb0	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _j$199872[ebp], 0
  06eb7	eb 09		 jmp	 SHORT $L199873
$L199874:
  06eb9	8b 4d 84	 mov	 ecx, DWORD PTR _j$199872[ebp]
  06ebc	83 c1 01	 add	 ecx, 1
  06ebf	89 4d 84	 mov	 DWORD PTR _j$199872[ebp], ecx
$L199873:
  06ec2	8b 55 84	 mov	 edx, DWORD PTR _j$199872[ebp]
  06ec5	3b 55 94	 cmp	 edx, DWORD PTR _BitMap$[ebp+8]
  06ec8	7d 46		 jge	 SHORT $L199875

; 2334 : 			col=ddc.GetPixel(i,j);

  06eca	8b 45 84	 mov	 eax, DWORD PTR _j$199872[ebp]
  06ecd	50		 push	 eax
  06ece	8b 4d 88	 mov	 ecx, DWORD PTR _i$199868[ebp]
  06ed1	51		 push	 ecx
  06ed2	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06ed5	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  06eda	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2335 : 			if(col!=bgcol)ddc.SetPixel(i,j,LightenColor(col,0.3));

  06edd	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  06ee0	3b 55 d8	 cmp	 edx, DWORD PTR _bgcol$[ebp]
  06ee3	74 29		 je	 SHORT $L199876
  06ee5	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd3333333333333
  06eeb	83 ec 08	 sub	 esp, 8
  06eee	dd 1c 24	 fstp	 QWORD PTR [esp]
  06ef1	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  06ef4	50		 push	 eax
  06ef5	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  06efa	83 c4 0c	 add	 esp, 12			; 0000000cH
  06efd	50		 push	 eax
  06efe	8b 4d 84	 mov	 ecx, DWORD PTR _j$199872[ebp]
  06f01	51		 push	 ecx
  06f02	8b 55 88	 mov	 edx, DWORD PTR _i$199868[ebp]
  06f05	52		 push	 edx
  06f06	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06f09	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L199876:

; 2336 : 		}

  06f0e	eb a9		 jmp	 SHORT $L199874
$L199875:

; 2337 : 	}

  06f10	eb 8d		 jmp	 SHORT $L199870
$L199871:

; 2338 : 	ddc.SelectObject(pddcOldBmp);

  06f12	8b 45 a4	 mov	 eax, DWORD PTR _pddcOldBmp$[ebp]
  06f15	50		 push	 eax
  06f16	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06f19	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2339 : }

  06f1e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  06f22	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  06f25	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  06f2a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  06f2e	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  06f31	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  06f36	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06f3a	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06f3d	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  06f42	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06f49	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06f4c	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  06f51	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06f54	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06f5b	8b e5		 mov	 esp, ebp
  06f5d	5d		 pop	 ebp
  06f5e	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202886:
  00475	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  00478	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202887:
  0047d	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  00480	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202888:
  00485	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  00488	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202889:
  0048d	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  00490	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z:
  00495	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202891
  0049a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ENDP		; BCMenu::GetFadedBitmap
PUBLIC	?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetTransparentBitmap
xdata$x	SEGMENT
$T202904 DD	0ffffffffH
	DD	FLAT:$L202897
	DD	00H
	DD	FLAT:$L202898
	DD	01H
	DD	FLAT:$L202899
	DD	02H
	DD	FLAT:$L202900
$T202902 DD	019930520H
	DD	04H
	DD	FLAT:$T202904
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -132						; size = 4
_j$199902 = -128					; size = 4
_i$199898 = -124					; size = 4
_BitMap$ = -120						; size = 24
_pddcOldBmp$ = -96					; size = 4
_brush$ = -92						; size = 8
_ddc$ = -84						; size = 16
_ddc2$ = -68						; size = 16
_bmp2$ = -52						; size = 8
_bgcol$ = -44						; size = 4
_rect$ = -40						; size = 16
_newcol$ = -24						; size = 4
_pddcOldBmp2$ = -20					; size = 4
_col$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z PROC NEAR ; BCMenu::GetTransparentBitmap
; _this$ = ecx

; 2342 : {

  06f70	55		 push	 ebp
  06f71	8b ec		 mov	 ebp, esp
  06f73	6a ff		 push	 -1
  06f75	68 00 00 00 00	 push	 __ehhandler$?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z
  06f7a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06f80	50		 push	 eax
  06f81	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06f88	83 ec 78	 sub	 esp, 120		; 00000078H
  06f8b	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2343 : 	CDC ddc;

  06f91	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06f94	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  06f99	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2344 : 	COLORREF bgcol,col,newcol;
; 2345 : 	BITMAP BitMap;
; 2346 : 
; 2347 : 	bmp.GetBitmap(&BitMap);

  06fa0	8d 45 88	 lea	 eax, DWORD PTR _BitMap$[ebp]
  06fa3	50		 push	 eax
  06fa4	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  06fa7	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2348 : 	ddc.CreateCompatibleDC(NULL);

  06fac	6a 00		 push	 0
  06fae	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06fb1	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2349 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  06fb6	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  06fb9	51		 push	 ecx
  06fba	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06fbd	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  06fc2	89 45 a0	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2350 : 
; 2351 : 	// use this to get the background color, takes into account color shifting
; 2352 : 	CDC ddc2;

  06fc5	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06fc8	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  06fcd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2353 : 	CBrush brush;

  06fd1	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  06fd4	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  06fd9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2354 : 	CBitmap bmp2;

  06fdd	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  06fe0	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  06fe5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2355 : 	ddc2.CreateCompatibleDC(NULL);

  06fe9	6a 00		 push	 0
  06feb	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  06fee	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2356 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  06ff3	8b 55 90	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  06ff6	52		 push	 edx
  06ff7	8b 45 8c	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  06ffa	50		 push	 eax
  06ffb	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  06ffe	51		 push	 ecx
  06fff	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  07002	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2357 : 	col=RGB(192,192,192);

  07007	c7 45 f0 c0 c0
	c0 00		 mov	 DWORD PTR _col$[ebp], 12632256 ; 00c0c0c0H

; 2358 : 	brush.CreateSolidBrush(col);

  0700e	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  07011	52		 push	 edx
  07012	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07015	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2359 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  0701a	8d 45 cc	 lea	 eax, DWORD PTR _bmp2$[ebp]
  0701d	50		 push	 eax
  0701e	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07021	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  07026	89 45 ec	 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2360 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  07029	8b 4d 90	 mov	 ecx, DWORD PTR _BitMap$[ebp+8]
  0702c	51		 push	 ecx
  0702d	8b 55 8c	 mov	 edx, DWORD PTR _BitMap$[ebp+4]
  07030	52		 push	 edx
  07031	6a 00		 push	 0
  07033	6a 00		 push	 0
  07035	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  07038	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2361 : 	ddc2.FillRect(rect,&brush);

  0703d	8d 45 a4	 lea	 eax, DWORD PTR _brush$[ebp]
  07040	50		 push	 eax
  07041	8d 4d d8	 lea	 ecx, DWORD PTR _rect$[ebp]
  07044	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  07049	50		 push	 eax
  0704a	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0704d	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2362 : 	bgcol=ddc2.GetPixel(1,1);

  07052	6a 01		 push	 1
  07054	6a 01		 push	 1
  07056	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07059	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  0705e	89 45 d4	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2363 : 	brush.DeleteObject();

  07061	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07064	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2364 : 	ddc2.SelectObject(pddcOldBmp2);

  07069	8b 4d ec	 mov	 ecx, DWORD PTR _pddcOldBmp2$[ebp]
  0706c	51		 push	 ecx
  0706d	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07070	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2365 : 	newcol=GetSysColor(COLOR_3DFACE);

  07075	6a 0f		 push	 15			; 0000000fH
  07077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0707d	89 45 e8	 mov	 DWORD PTR _newcol$[ebp], eax

; 2366 : 
; 2367 : 	for(int i=0;i<BitMap.bmWidth;++i){

  07080	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _i$199898[ebp], 0
  07087	eb 09		 jmp	 SHORT $L199899
$L199900:
  07089	8b 55 84	 mov	 edx, DWORD PTR _i$199898[ebp]
  0708c	83 c2 01	 add	 edx, 1
  0708f	89 55 84	 mov	 DWORD PTR _i$199898[ebp], edx
$L199899:
  07092	8b 45 84	 mov	 eax, DWORD PTR _i$199898[ebp]
  07095	3b 45 8c	 cmp	 eax, DWORD PTR _BitMap$[ebp+4]
  07098	7d 4d		 jge	 SHORT $L199901

; 2368 : 		for(int j=0;j<BitMap.bmHeight;++j){

  0709a	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _j$199902[ebp], 0
  070a1	eb 09		 jmp	 SHORT $L199903
$L199904:
  070a3	8b 4d 80	 mov	 ecx, DWORD PTR _j$199902[ebp]
  070a6	83 c1 01	 add	 ecx, 1
  070a9	89 4d 80	 mov	 DWORD PTR _j$199902[ebp], ecx
$L199903:
  070ac	8b 55 80	 mov	 edx, DWORD PTR _j$199902[ebp]
  070af	3b 55 90	 cmp	 edx, DWORD PTR _BitMap$[ebp+8]
  070b2	7d 31		 jge	 SHORT $L199905

; 2369 : 			col=ddc.GetPixel(i,j);

  070b4	8b 45 80	 mov	 eax, DWORD PTR _j$199902[ebp]
  070b7	50		 push	 eax
  070b8	8b 4d 84	 mov	 ecx, DWORD PTR _i$199898[ebp]
  070bb	51		 push	 ecx
  070bc	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  070bf	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  070c4	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2370 : 			if(col==bgcol)ddc.SetPixel(i,j,newcol);

  070c7	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  070ca	3b 55 d4	 cmp	 edx, DWORD PTR _bgcol$[ebp]
  070cd	75 14		 jne	 SHORT $L199906
  070cf	8b 45 e8	 mov	 eax, DWORD PTR _newcol$[ebp]
  070d2	50		 push	 eax
  070d3	8b 4d 80	 mov	 ecx, DWORD PTR _j$199902[ebp]
  070d6	51		 push	 ecx
  070d7	8b 55 84	 mov	 edx, DWORD PTR _i$199898[ebp]
  070da	52		 push	 edx
  070db	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  070de	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L199906:

; 2371 : 		}

  070e3	eb be		 jmp	 SHORT $L199904
$L199905:

; 2372 : 	}

  070e5	eb a2		 jmp	 SHORT $L199900
$L199901:

; 2373 : 	ddc.SelectObject(pddcOldBmp);

  070e7	8b 45 a0	 mov	 eax, DWORD PTR _pddcOldBmp$[ebp]
  070ea	50		 push	 eax
  070eb	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  070ee	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2374 : }

  070f3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  070f7	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  070fa	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  070ff	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  07103	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07106	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0710b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0710f	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07112	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  07117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0711e	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07121	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  07126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07130	8b e5		 mov	 esp, ebp
  07132	5d		 pop	 ebp
  07133	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202897:
  0049f	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  004a2	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202898:
  004a7	8d 4d bc	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  004aa	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202899:
  004af	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  004b2	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202900:
  004b7	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  004ba	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z:
  004bf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202902
  004c4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ENDP	; BCMenu::GetTransparentBitmap
PUBLIC	__real@406fe00000000000
PUBLIC	?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z	; BCMenu::GetDisabledBitmap
xdata$x	SEGMENT
$T202915 DD	0ffffffffH
	DD	FLAT:$L202906
	DD	00H
	DD	FLAT:$L202907
	DD	01H
	DD	FLAT:$L202908
	DD	02H
	DD	FLAT:$L202909
$T202911 DD	019930520H
	DD	04H
	DD	FLAT:$T202915
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
_this$ = -156						; size = 4
_r$199932 = -149					; size = 1
_avgcol$199939 = -148					; size = 4
_g$199934 = -142					; size = 1
_b$199937 = -141					; size = 1
_factor$199940 = -140					; size = 8
_j$199927 = -128					; size = 4
_i$199923 = -124					; size = 4
_discol$ = -120						; size = 4
_BitMap$ = -116						; size = 24
_pddcOldBmp$ = -92					; size = 4
_brush$ = -88						; size = 8
_ddc$ = -80						; size = 16
_ddc2$ = -64						; size = 16
_bmp2$ = -48						; size = 8
_bgcol$ = -40						; size = 4
_rect$ = -36						; size = 16
_pddcOldBmp2$ = -20					; size = 4
_col$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
_background$ = 12					; size = 4
?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z PROC NEAR ; BCMenu::GetDisabledBitmap
; _this$ = ecx

; 2377 : {

  07140	55		 push	 ebp
  07141	8b ec		 mov	 ebp, esp
  07143	6a ff		 push	 -1
  07145	68 00 00 00 00	 push	 __ehhandler$?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z
  0714a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07150	50		 push	 eax
  07151	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07158	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0715e	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2378 : 	CDC ddc;

  07164	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07167	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0716c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2379 : 	COLORREF bgcol,col,discol;
; 2380 : 	BITMAP BitMap;
; 2381 : 
; 2382 : 	bmp.GetBitmap(&BitMap);

  07173	8d 45 8c	 lea	 eax, DWORD PTR _BitMap$[ebp]
  07176	50		 push	 eax
  07177	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0717a	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2383 : 	ddc.CreateCompatibleDC(NULL);

  0717f	6a 00		 push	 0
  07181	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07184	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2384 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  07189	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  0718c	51		 push	 ecx
  0718d	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07190	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  07195	89 45 a4	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2385 : 
; 2386 : 	// use this to get the background color, takes into account color shifting
; 2387 : 	CDC ddc2;

  07198	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0719b	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  071a0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2388 : 	CBrush brush;

  071a4	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  071a7	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  071ac	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2389 : 	CBitmap bmp2;

  071b0	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  071b3	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  071b8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2390 : 	ddc2.CreateCompatibleDC(NULL);

  071bc	6a 00		 push	 0
  071be	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  071c1	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2391 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  071c6	8b 55 94	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  071c9	52		 push	 edx
  071ca	8b 45 90	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  071cd	50		 push	 eax
  071ce	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  071d1	51		 push	 ecx
  071d2	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  071d5	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2392 : 	col=GetSysColor(COLOR_3DFACE);

  071da	6a 0f		 push	 15			; 0000000fH
  071dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  071e2	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2393 : 	brush.CreateSolidBrush(col);

  071e5	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  071e8	52		 push	 edx
  071e9	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  071ec	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2394 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  071f1	8d 45 d0	 lea	 eax, DWORD PTR _bmp2$[ebp]
  071f4	50		 push	 eax
  071f5	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  071f8	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  071fd	89 45 ec	 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2395 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  07200	8b 4d 94	 mov	 ecx, DWORD PTR _BitMap$[ebp+8]
  07203	51		 push	 ecx
  07204	8b 55 90	 mov	 edx, DWORD PTR _BitMap$[ebp+4]
  07207	52		 push	 edx
  07208	6a 00		 push	 0
  0720a	6a 00		 push	 0
  0720c	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  0720f	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2396 : 	ddc2.FillRect(rect,&brush);

  07214	8d 45 a8	 lea	 eax, DWORD PTR _brush$[ebp]
  07217	50		 push	 eax
  07218	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  0721b	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  07220	50		 push	 eax
  07221	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07224	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2397 : 	bgcol=ddc2.GetPixel(1,1);

  07229	6a 01		 push	 1
  0722b	6a 01		 push	 1
  0722d	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07230	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  07235	89 45 d8	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2398 : 	brush.DeleteObject();

  07238	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  0723b	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2399 : 	ddc2.SelectObject(pddcOldBmp2);

  07240	8b 4d ec	 mov	 ecx, DWORD PTR _pddcOldBmp2$[ebp]
  07243	51		 push	 ecx
  07244	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07247	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2400 : 	discol=GetSysColor(COLOR_BTNSHADOW);

  0724c	6a 10		 push	 16			; 00000010H
  0724e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07254	89 45 88	 mov	 DWORD PTR _discol$[ebp], eax

; 2401 : 
; 2402 : 	for(int i=0;i<BitMap.bmWidth;++i){

  07257	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _i$199923[ebp], 0
  0725e	eb 09		 jmp	 SHORT $L199924
$L199925:
  07260	8b 55 84	 mov	 edx, DWORD PTR _i$199923[ebp]
  07263	83 c2 01	 add	 edx, 1
  07266	89 55 84	 mov	 DWORD PTR _i$199923[ebp], edx
$L199924:
  07269	8b 45 84	 mov	 eax, DWORD PTR _i$199923[ebp]
  0726c	3b 45 90	 cmp	 eax, DWORD PTR _BitMap$[ebp+4]
  0726f	0f 8d e1 00 00
	00		 jge	 $L199926

; 2403 : 		for(int j=0;j<BitMap.bmHeight;++j){

  07275	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _j$199927[ebp], 0
  0727c	eb 09		 jmp	 SHORT $L199928
$L199929:
  0727e	8b 4d 80	 mov	 ecx, DWORD PTR _j$199927[ebp]
  07281	83 c1 01	 add	 ecx, 1
  07284	89 4d 80	 mov	 DWORD PTR _j$199927[ebp], ecx
$L199928:
  07287	8b 55 80	 mov	 edx, DWORD PTR _j$199927[ebp]
  0728a	3b 55 94	 cmp	 edx, DWORD PTR _BitMap$[ebp+8]
  0728d	0f 8d be 00 00
	00		 jge	 $L199930

; 2404 : 			col=ddc.GetPixel(i,j);

  07293	8b 45 80	 mov	 eax, DWORD PTR _j$199927[ebp]
  07296	50		 push	 eax
  07297	8b 4d 84	 mov	 ecx, DWORD PTR _i$199923[ebp]
  0729a	51		 push	 ecx
  0729b	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0729e	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  072a3	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2405 : 			if(col!=bgcol){

  072a6	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  072a9	3b 55 d8	 cmp	 edx, DWORD PTR _bgcol$[ebp]
  072ac	0f 84 80 00 00
	00		 je	 $L199931

; 2406 : 				BYTE r = GetRValue(col);

  072b2	8a 45 f0	 mov	 al, BYTE PTR _col$[ebp]
  072b5	88 85 6b ff ff
	ff		 mov	 BYTE PTR _r$199932[ebp], al

; 2407 : 				BYTE g = GetGValue(col);

  072bb	0f b7 4d f0	 movzx	 ecx, WORD PTR _col$[ebp]
  072bf	c1 f9 08	 sar	 ecx, 8
  072c2	88 8d 72 ff ff
	ff		 mov	 BYTE PTR _g$199934[ebp], cl

; 2408 : 				BYTE b = GetBValue(col);

  072c8	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  072cb	c1 ea 10	 shr	 edx, 16			; 00000010H
  072ce	88 95 73 ff ff
	ff		 mov	 BYTE PTR _b$199937[ebp], dl

; 2409 : 				int avgcol = (r+g+b)/3;

  072d4	0f b6 85 6b ff
	ff ff		 movzx	 eax, BYTE PTR _r$199932[ebp]
  072db	0f b6 8d 72 ff
	ff ff		 movzx	 ecx, BYTE PTR _g$199934[ebp]
  072e2	03 c1		 add	 eax, ecx
  072e4	0f b6 95 73 ff
	ff ff		 movzx	 edx, BYTE PTR _b$199937[ebp]
  072eb	03 c2		 add	 eax, edx
  072ed	99		 cdq
  072ee	b9 03 00 00 00	 mov	 ecx, 3
  072f3	f7 f9		 idiv	 ecx
  072f5	89 85 6c ff ff
	ff		 mov	 DWORD PTR _avgcol$199939[ebp], eax

; 2410 : 				double factor = avgcol/255.0;

  072fb	db 85 6c ff ff
	ff		 fild	 DWORD PTR _avgcol$199939[ebp]
  07301	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@406fe00000000000
  07307	dd 95 74 ff ff
	ff		 fst	 QWORD PTR _factor$199940[ebp]

; 2411 : 				ddc.SetPixel(i,j,LightenColor(discol,factor));

  0730d	83 ec 08	 sub	 esp, 8
  07310	dd 1c 24	 fstp	 QWORD PTR [esp]
  07313	8b 55 88	 mov	 edx, DWORD PTR _discol$[ebp]
  07316	52		 push	 edx
  07317	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  0731c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0731f	50		 push	 eax
  07320	8b 45 80	 mov	 eax, DWORD PTR _j$199927[ebp]
  07323	50		 push	 eax
  07324	8b 4d 84	 mov	 ecx, DWORD PTR _i$199923[ebp]
  07327	51		 push	 ecx
  07328	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0732b	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel

; 2412 : 			}
; 2413 : 			else{

  07330	eb 1a		 jmp	 SHORT $L199941
$L199931:

; 2414 : 				if(background)ddc.SetPixel(i,j,background);

  07332	83 7d 0c 00	 cmp	 DWORD PTR _background$[ebp], 0
  07336	74 14		 je	 SHORT $L199941
  07338	8b 55 0c	 mov	 edx, DWORD PTR _background$[ebp]
  0733b	52		 push	 edx
  0733c	8b 45 80	 mov	 eax, DWORD PTR _j$199927[ebp]
  0733f	50		 push	 eax
  07340	8b 4d 84	 mov	 ecx, DWORD PTR _i$199923[ebp]
  07343	51		 push	 ecx
  07344	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07347	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L199941:

; 2415 : 			}
; 2416 : 		}

  0734c	e9 2d ff ff ff	 jmp	 $L199929
$L199930:

; 2417 : 	}

  07351	e9 0a ff ff ff	 jmp	 $L199925
$L199926:

; 2418 : 	ddc.SelectObject(pddcOldBmp);

  07356	8b 55 a4	 mov	 edx, DWORD PTR _pddcOldBmp$[ebp]
  07359	52		 push	 edx
  0735a	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0735d	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2419 : }

  07362	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  07366	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  07369	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0736e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  07372	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  07375	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0737a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0737e	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07381	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  07386	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0738d	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07390	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  07395	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07398	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0739f	8b e5		 mov	 esp, ebp
  073a1	5d		 pop	 ebp
  073a2	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L202906:
  004c9	8d 4d b0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  004cc	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202907:
  004d1	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  004d4	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202908:
  004d9	8d 4d a8	 lea	 ecx, DWORD PTR _brush$[ebp]
  004dc	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202909:
  004e1	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  004e4	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z:
  004e9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202911
  004ee	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ENDP	; BCMenu::GetDisabledBitmap
PUBLIC	__real@3fdf5c28f5c28f5c
PUBLIC	?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z	; BCMenu::GetShadowBitmap
xdata$x	SEGMENT
$T202926 DD	0ffffffffH
	DD	FLAT:$L202917
	DD	00H
	DD	FLAT:$L202918
	DD	01H
	DD	FLAT:$L202919
	DD	02H
	DD	FLAT:$L202920
$T202922 DD	019930520H
	DD	04H
	DD	FLAT:$T202926
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@3fdf5c28f5c28f5c
CONST	SEGMENT
__real@3fdf5c28f5c28f5c DQ 03fdf5c28f5c28f5cr	; 0.49
; Function compile flags: /Odt
CONST	ENDS
_TEXT	SEGMENT
_this$ = -132						; size = 4
_j$199963 = -128					; size = 4
_i$199959 = -124					; size = 4
_BitMap$ = -120						; size = 24
_pddcOldBmp$ = -96					; size = 4
_brush$ = -92						; size = 8
_ddc$ = -84						; size = 16
_shadowcol$ = -68					; size = 4
_ddc2$ = -64						; size = 16
_bmp2$ = -48						; size = 8
_bgcol$ = -40						; size = 4
_rect$ = -36						; size = 16
_pddcOldBmp2$ = -20					; size = 4
_col$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmp$ = 8						; size = 4
?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z PROC NEAR	; BCMenu::GetShadowBitmap
; _this$ = ecx

; 2422 : {

  073b0	55		 push	 ebp
  073b1	8b ec		 mov	 ebp, esp
  073b3	6a ff		 push	 -1
  073b5	68 00 00 00 00	 push	 __ehhandler$?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z
  073ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  073c0	50		 push	 eax
  073c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  073c8	83 ec 78	 sub	 esp, 120		; 00000078H
  073cb	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2423 : 	CDC ddc;

  073d1	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  073d4	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  073d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2424 : 	COLORREF bgcol,col,shadowcol=GetSysColor(COLOR_BTNSHADOW);

  073e0	6a 10		 push	 16			; 00000010H
  073e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  073e8	89 45 bc	 mov	 DWORD PTR _shadowcol$[ebp], eax

; 2425 : 	BITMAP BitMap;
; 2426 : 
; 2427 : 	if(!IsWinXPLuna())shadowcol=LightenColor(shadowcol,0.49);

  073eb	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  073f0	85 c0		 test	 eax, eax
  073f2	75 1b		 jne	 SHORT $L199952
  073f4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fdf5c28f5c28f5c
  073fa	83 ec 08	 sub	 esp, 8
  073fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  07400	8b 45 bc	 mov	 eax, DWORD PTR _shadowcol$[ebp]
  07403	50		 push	 eax
  07404	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  07409	83 c4 0c	 add	 esp, 12			; 0000000cH
  0740c	89 45 bc	 mov	 DWORD PTR _shadowcol$[ebp], eax
$L199952:

; 2428 : 	bmp.GetBitmap(&BitMap);

  0740f	8d 4d 88	 lea	 ecx, DWORD PTR _BitMap$[ebp]
  07412	51		 push	 ecx
  07413	8b 4d 08	 mov	 ecx, DWORD PTR _bmp$[ebp]
  07416	e8 00 00 00 00	 call	 ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ; CBitmap::GetBitmap

; 2429 : 	ddc.CreateCompatibleDC(NULL);

  0741b	6a 00		 push	 0
  0741d	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07420	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2430 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bmp);

  07425	8b 55 08	 mov	 edx, DWORD PTR _bmp$[ebp]
  07428	52		 push	 edx
  07429	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0742c	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  07431	89 45 a0	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2431 : 
; 2432 : 	// use this to get the background color, takes into account color shifting
; 2433 : 	CDC ddc2;

  07434	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07437	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  0743c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2434 : 	CBrush brush;

  07440	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07443	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  07448	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2435 : 	CBitmap bmp2;

  0744c	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  0744f	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  07454	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2436 : 	ddc2.CreateCompatibleDC(NULL);

  07458	6a 00		 push	 0
  0745a	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0745d	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2437 : 	bmp2.CreateCompatibleBitmap(&ddc,BitMap.bmWidth,BitMap.bmHeight);

  07462	8b 45 90	 mov	 eax, DWORD PTR _BitMap$[ebp+8]
  07465	50		 push	 eax
  07466	8b 4d 8c	 mov	 ecx, DWORD PTR _BitMap$[ebp+4]
  07469	51		 push	 ecx
  0746a	8d 55 ac	 lea	 edx, DWORD PTR _ddc$[ebp]
  0746d	52		 push	 edx
  0746e	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  07471	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2438 : 	col=GetSysColor(COLOR_3DFACE);

  07476	6a 0f		 push	 15			; 0000000fH
  07478	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0747e	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2439 : 	brush.CreateSolidBrush(col);

  07481	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  07484	50		 push	 eax
  07485	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07488	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2440 : 	CBitmap * pddcOldBmp2 = ddc2.SelectObject(&bmp2);

  0748d	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  07490	51		 push	 ecx
  07491	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  07494	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  07499	89 45 ec	 mov	 DWORD PTR _pddcOldBmp2$[ebp], eax

; 2441 : 	CRect rect(0,0,BitMap.bmWidth,BitMap.bmHeight);

  0749c	8b 55 90	 mov	 edx, DWORD PTR _BitMap$[ebp+8]
  0749f	52		 push	 edx
  074a0	8b 45 8c	 mov	 eax, DWORD PTR _BitMap$[ebp+4]
  074a3	50		 push	 eax
  074a4	6a 00		 push	 0
  074a6	6a 00		 push	 0
  074a8	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  074ab	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 2442 : 	ddc2.FillRect(rect,&brush);

  074b0	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  074b3	51		 push	 ecx
  074b4	8d 4d dc	 lea	 ecx, DWORD PTR _rect$[ebp]
  074b7	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  074bc	50		 push	 eax
  074bd	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  074c0	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2443 : 	bgcol=ddc2.GetPixel(1,1);

  074c5	6a 01		 push	 1
  074c7	6a 01		 push	 1
  074c9	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  074cc	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  074d1	89 45 d8	 mov	 DWORD PTR _bgcol$[ebp], eax

; 2444 : 	brush.DeleteObject();

  074d4	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  074d7	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2445 : 	ddc2.SelectObject(pddcOldBmp2);

  074dc	8b 55 ec	 mov	 edx, DWORD PTR _pddcOldBmp2$[ebp]
  074df	52		 push	 edx
  074e0	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  074e3	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2446 : 
; 2447 : 	for(int i=0;i<BitMap.bmWidth;++i){

  074e8	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _i$199959[ebp], 0
  074ef	eb 09		 jmp	 SHORT $L199960
$L199961:
  074f1	8b 45 84	 mov	 eax, DWORD PTR _i$199959[ebp]
  074f4	83 c0 01	 add	 eax, 1
  074f7	89 45 84	 mov	 DWORD PTR _i$199959[ebp], eax
$L199960:
  074fa	8b 4d 84	 mov	 ecx, DWORD PTR _i$199959[ebp]
  074fd	3b 4d 8c	 cmp	 ecx, DWORD PTR _BitMap$[ebp+4]
  07500	7d 4d		 jge	 SHORT $L199962

; 2448 : 		for(int j=0;j<BitMap.bmHeight;++j){

  07502	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _j$199963[ebp], 0
  07509	eb 09		 jmp	 SHORT $L199964
$L199965:
  0750b	8b 55 80	 mov	 edx, DWORD PTR _j$199963[ebp]
  0750e	83 c2 01	 add	 edx, 1
  07511	89 55 80	 mov	 DWORD PTR _j$199963[ebp], edx
$L199964:
  07514	8b 45 80	 mov	 eax, DWORD PTR _j$199963[ebp]
  07517	3b 45 90	 cmp	 eax, DWORD PTR _BitMap$[ebp+8]
  0751a	7d 31		 jge	 SHORT $L199966

; 2449 : 			col=ddc.GetPixel(i,j);

  0751c	8b 4d 80	 mov	 ecx, DWORD PTR _j$199963[ebp]
  0751f	51		 push	 ecx
  07520	8b 55 84	 mov	 edx, DWORD PTR _i$199959[ebp]
  07523	52		 push	 edx
  07524	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07527	e8 00 00 00 00	 call	 ?GetPixel@CDC@@QBEKHH@Z	; CDC::GetPixel
  0752c	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2450 : 			if(col!=bgcol)ddc.SetPixel(i,j,shadowcol);

  0752f	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  07532	3b 45 d8	 cmp	 eax, DWORD PTR _bgcol$[ebp]
  07535	74 14		 je	 SHORT $L199967
  07537	8b 4d bc	 mov	 ecx, DWORD PTR _shadowcol$[ebp]
  0753a	51		 push	 ecx
  0753b	8b 55 80	 mov	 edx, DWORD PTR _j$199963[ebp]
  0753e	52		 push	 edx
  0753f	8b 45 84	 mov	 eax, DWORD PTR _i$199959[ebp]
  07542	50		 push	 eax
  07543	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07546	e8 00 00 00 00	 call	 ?SetPixel@CDC@@QAEKHHK@Z ; CDC::SetPixel
$L199967:

; 2451 : 		}

  0754b	eb be		 jmp	 SHORT $L199965
$L199966:

; 2452 : 	}

  0754d	eb a2		 jmp	 SHORT $L199961
$L199962:

; 2453 : 	ddc.SelectObject(pddcOldBmp);

  0754f	8b 4d a0	 mov	 ecx, DWORD PTR _pddcOldBmp$[ebp]
  07552	51		 push	 ecx
  07553	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07556	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2454 : }

  0755b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0755f	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  07562	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  07567	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0756b	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  0756e	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  07573	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  07577	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  0757a	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0757f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07586	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07589	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0758e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07591	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07598	8b e5		 mov	 esp, ebp
  0759a	5d		 pop	 ebp
  0759b	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L202917:
  004f3	8d 4d ac	 lea	 ecx, DWORD PTR _ddc$[ebp]
  004f6	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202918:
  004fb	8d 4d c0	 lea	 ecx, DWORD PTR _ddc2$[ebp]
  004fe	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202919:
  00503	8d 4d a4	 lea	 ecx, DWORD PTR _brush$[ebp]
  00506	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202920:
  0050b	8d 4d d0	 lea	 ecx, DWORD PTR _bmp2$[ebp]
  0050e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z:
  00513	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202922
  00518	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ENDP	; BCMenu::GetShadowBitmap
PUBLIC	?Add@CImageList@@QAEHPAUHICON__@@@Z		; CImageList::Add
PUBLIC	?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z	; BCMenu::LoadSysColorBitmap
PUBLIC	?LoadBitmapA@CBitmap@@QAEHI@Z			; CBitmap::LoadBitmapA
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:NEAR		; CGdiObject::Attach
EXTRN	?Detach@CGdiObject@@QAEPAXXZ:NEAR		; CGdiObject::Detach
xdata$x	SEGMENT
$T202936 DD	0ffffffffH
	DD	FLAT:$L202928
	DD	0ffffffffH
	DD	FLAT:$L202929
	DD	0ffffffffH
	DD	FLAT:$L202930
	DD	02H
	DD	FLAT:$L202931
	DD	03H
	DD	FLAT:$L202932
$T202934 DD	019930520H
	DD	05H
	DD	FLAT:$T202936
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -72						; size = 4
_pWnd$199992 = -68					; size = 4
_bmp2$199996 = -64					; size = 8
_pDC$199994 = -56					; size = 4
_bmp$199995 = -52					; size = 8
_bmp3$199997 = -44					; size = 8
_mybmp$199985 = -36					; size = 8
_bmp$199979 = -28					; size = 8
_hbmp$199977 = -20					; size = 4
_bReturn$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bmplist$ = 8						; size = 4
_nResourceID$ = 12					; size = 4
?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z PROC NEAR ; BCMenu::AddBitmapToImageList
; _this$ = ecx

; 2458 : {

  075a0	55		 push	 ebp
  075a1	8b ec		 mov	 ebp, esp
  075a3	6a ff		 push	 -1
  075a5	68 00 00 00 00	 push	 __ehhandler$?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z
  075aa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  075b0	50		 push	 eax
  075b1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  075b8	83 ec 3c	 sub	 esp, 60			; 0000003cH
  075bb	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 2459 : 	BOOL bReturn=FALSE;

  075be	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 0

; 2460 : 
; 2461 : 	// O.S.
; 2462 : 	if (m_bDynIcons){

  075c5	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  075c8	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  075cc	74 18		 je	 SHORT $L199974

; 2463 : 		bmplist->Add((HICON)nResourceID);

  075ce	8b 4d 0c	 mov	 ecx, DWORD PTR _nResourceID$[ebp]
  075d1	51		 push	 ecx
  075d2	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  075d5	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAUHICON__@@@Z ; CImageList::Add

; 2464 : 		bReturn=TRUE;

  075da	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1

; 2465 : 	}
; 2466 : 	else{

  075e1	e9 30 01 00 00	 jmp	 $L199976
$L199974:

; 2467 : 		HBITMAP hbmp=LoadSysColorBitmap(nResourceID);

  075e6	8b 55 0c	 mov	 edx, DWORD PTR _nResourceID$[ebp]
  075e9	52		 push	 edx
  075ea	e8 00 00 00 00	 call	 ?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z ; BCMenu::LoadSysColorBitmap
  075ef	83 c4 04	 add	 esp, 4
  075f2	89 45 ec	 mov	 DWORD PTR _hbmp$199977[ebp], eax

; 2468 : 		if(hbmp){

  075f5	83 7d ec 00	 cmp	 DWORD PTR _hbmp$199977[ebp], 0
  075f9	0f 84 8a 00 00
	00		 je	 $L199978

; 2469 : 			CBitmap bmp;

  075ff	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$199979[ebp]
  07602	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  07607	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2470 : 			bmp.Attach(hbmp);

  0760e	8b 45 ec	 mov	 eax, DWORD PTR _hbmp$199977[ebp]
  07611	50		 push	 eax
  07612	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$199979[ebp]
  07615	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 2471 : 			if(m_bitmapBackgroundFlag){

  0761a	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0761d	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  07621	74 20		 je	 SHORT $L199980

; 2472 : 				if(bmplist->Add(&bmp,m_bitmapBackground)>=0)bReturn=TRUE;

  07623	8b 55 b8	 mov	 edx, DWORD PTR _this$[ebp]
  07626	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  07629	50		 push	 eax
  0762a	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$199979[ebp]
  0762d	51		 push	 ecx
  0762e	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  07631	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  07636	85 c0		 test	 eax, eax
  07638	7c 07		 jl	 SHORT $L199981
  0763a	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L199981:

; 2473 : 			}
; 2474 : 			else{

  07641	eb 20		 jmp	 SHORT $L199982
$L199980:

; 2475 : 				if(bmplist->Add(&bmp,GetSysColor(COLOR_3DFACE))>=0)bReturn=TRUE;

  07643	6a 0f		 push	 15			; 0000000fH
  07645	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0764b	50		 push	 eax
  0764c	8d 55 e4	 lea	 edx, DWORD PTR _bmp$199979[ebp]
  0764f	52		 push	 edx
  07650	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  07653	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  07658	85 c0		 test	 eax, eax
  0765a	7c 07		 jl	 SHORT $L199982
  0765c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L199982:

; 2476 : 			}
; 2477 : 			bmp.Detach();

  07663	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$199979[ebp]
  07666	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach

; 2478 : 			DeleteObject(hbmp);

  0766b	8b 45 ec	 mov	 eax, DWORD PTR _hbmp$199977[ebp]
  0766e	50		 push	 eax
  0766f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 2479 : 		}

  07675	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0767c	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$199979[ebp]
  0767f	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap

; 2480 : 		else{ // a hicolor bitmap

  07684	e9 8d 00 00 00	 jmp	 $L199976
$L199978:

; 2481 : 			CBitmap mybmp;

  07689	8d 4d dc	 lea	 ecx, DWORD PTR _mybmp$199985[ebp]
  0768c	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  07691	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2482 : 			if(mybmp.LoadBitmap(nResourceID)){

  07698	8b 4d 0c	 mov	 ecx, DWORD PTR _nResourceID$[ebp]
  0769b	51		 push	 ecx
  0769c	8d 4d dc	 lea	 ecx, DWORD PTR _mybmp$199985[ebp]
  0769f	e8 00 00 00 00	 call	 ?LoadBitmapA@CBitmap@@QAEHI@Z ; CBitmap::LoadBitmapA
  076a4	85 c0		 test	 eax, eax
  076a6	74 5f		 je	 SHORT $L199986

; 2483 : 				hicolor_bitmaps=TRUE;

  076a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hicolor_bitmaps@BCMenu@@1HA, 1 ; BCMenu::hicolor_bitmaps

; 2484 : 				GetTransparentBitmap(mybmp);

  076b2	8d 55 dc	 lea	 edx, DWORD PTR _mybmp$199985[ebp]
  076b5	52		 push	 edx
  076b6	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  076b9	e8 00 00 00 00	 call	 ?GetTransparentBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetTransparentBitmap

; 2485 : 				if(m_bitmapBackgroundFlag){

  076be	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  076c1	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  076c5	74 20		 je	 SHORT $L199987

; 2486 : 					if(bmplist->Add(&mybmp,m_bitmapBackground)>=0)bReturn=TRUE;

  076c7	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  076ca	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  076cd	52		 push	 edx
  076ce	8d 45 dc	 lea	 eax, DWORD PTR _mybmp$199985[ebp]
  076d1	50		 push	 eax
  076d2	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  076d5	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  076da	85 c0		 test	 eax, eax
  076dc	7c 07		 jl	 SHORT $L199988
  076de	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L199988:

; 2487 : 				}
; 2488 : 				else{

  076e5	eb 20		 jmp	 SHORT $L199986
$L199987:

; 2489 : 					if(bmplist->Add(&mybmp,GetSysColor(COLOR_3DFACE))>=0)bReturn=TRUE;

  076e7	6a 0f		 push	 15			; 0000000fH
  076e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  076ef	50		 push	 eax
  076f0	8d 4d dc	 lea	 ecx, DWORD PTR _mybmp$199985[ebp]
  076f3	51		 push	 ecx
  076f4	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  076f7	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
  076fc	85 c0		 test	 eax, eax
  076fe	7c 07		 jl	 SHORT $L199986
  07700	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bReturn$[ebp], 1
$L199986:

; 2490 : 				}
; 2491 : 			}
; 2492 : 		}

  07707	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0770e	8d 4d dc	 lea	 ecx, DWORD PTR _mybmp$199985[ebp]
  07711	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L199976:

; 2493 : 	}
; 2494 : 	if(bReturn&&IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  07716	83 7d f0 00	 cmp	 DWORD PTR _bReturn$[ebp], 0
  0771a	0f 84 3c 01 00
	00		 je	 $L199991
  07720	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  07725	85 c0		 test	 eax, eax
  07727	0f 84 2f 01 00
	00		 je	 $L199991
  0772d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  07734	0f 84 22 01 00
	00		 je	 $L199991

; 2495 : 		CWnd *pWnd = AfxGetMainWnd();            // Get main window

  0773a	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  0773f	89 45 bc	 mov	 DWORD PTR _pWnd$199992[ebp], eax

; 2496 : 		if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  07742	83 7d bc 00	 cmp	 DWORD PTR _pWnd$199992[ebp], 0
  07746	75 08		 jne	 SHORT $L199993
  07748	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  0774d	89 45 bc	 mov	 DWORD PTR _pWnd$199992[ebp], eax
$L199993:

; 2497 : 		CDC *pDC = pWnd->GetDC();              // Get device context

  07750	8b 4d bc	 mov	 ecx, DWORD PTR _pWnd$199992[ebp]
  07753	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  07758	89 45 c8	 mov	 DWORD PTR _pDC$199994[ebp], eax

; 2498 : 		CBitmap bmp,bmp2,bmp3;

  0775b	8d 4d cc	 lea	 ecx, DWORD PTR _bmp$199995[ebp]
  0775e	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  07763	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0776a	8d 4d c0	 lea	 ecx, DWORD PTR _bmp2$199996[ebp]
  0776d	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  07772	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  07776	8d 4d d4	 lea	 ecx, DWORD PTR _bmp3$199997[ebp]
  07779	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0777e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 2499 : 		GetBitmapFromImageList(pDC,bmplist,0,bmp);

  07782	8d 55 cc	 lea	 edx, DWORD PTR _bmp$199995[ebp]
  07785	52		 push	 edx
  07786	6a 00		 push	 0
  07788	8b 45 08	 mov	 eax, DWORD PTR _bmplist$[ebp]
  0778b	50		 push	 eax
  0778c	8b 4d c8	 mov	 ecx, DWORD PTR _pDC$199994[ebp]
  0778f	51		 push	 ecx
  07790	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  07793	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 2500 : 		GetFadedBitmap(bmp);

  07798	8d 55 cc	 lea	 edx, DWORD PTR _bmp$199995[ebp]
  0779b	52		 push	 edx
  0779c	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0779f	e8 00 00 00 00	 call	 ?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetFadedBitmap

; 2501 : 		bmplist->Add(&bmp,GetSysColor(COLOR_3DFACE));

  077a4	6a 0f		 push	 15			; 0000000fH
  077a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  077ac	50		 push	 eax
  077ad	8d 45 cc	 lea	 eax, DWORD PTR _bmp$199995[ebp]
  077b0	50		 push	 eax
  077b1	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  077b4	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2502 : 		GetBitmapFromImageList(pDC,bmplist,0,bmp2);

  077b9	8d 4d c0	 lea	 ecx, DWORD PTR _bmp2$199996[ebp]
  077bc	51		 push	 ecx
  077bd	6a 00		 push	 0
  077bf	8b 55 08	 mov	 edx, DWORD PTR _bmplist$[ebp]
  077c2	52		 push	 edx
  077c3	8b 45 c8	 mov	 eax, DWORD PTR _pDC$199994[ebp]
  077c6	50		 push	 eax
  077c7	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  077ca	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 2503 : 		GetShadowBitmap(bmp2);

  077cf	8d 4d c0	 lea	 ecx, DWORD PTR _bmp2$199996[ebp]
  077d2	51		 push	 ecx
  077d3	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  077d6	e8 00 00 00 00	 call	 ?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetShadowBitmap

; 2504 : 		bmplist->Add(&bmp2,GetSysColor(COLOR_3DFACE));

  077db	6a 0f		 push	 15			; 0000000fH
  077dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  077e3	50		 push	 eax
  077e4	8d 55 c0	 lea	 edx, DWORD PTR _bmp2$199996[ebp]
  077e7	52		 push	 edx
  077e8	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  077eb	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2505 : 		GetBitmapFromImageList(pDC,bmplist,0,bmp3);

  077f0	8d 45 d4	 lea	 eax, DWORD PTR _bmp3$199997[ebp]
  077f3	50		 push	 eax
  077f4	6a 00		 push	 0
  077f6	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  077f9	51		 push	 ecx
  077fa	8b 55 c8	 mov	 edx, DWORD PTR _pDC$199994[ebp]
  077fd	52		 push	 edx
  077fe	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  07801	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 2506 : 		GetDisabledBitmap(bmp3);

  07806	6a 00		 push	 0
  07808	8d 45 d4	 lea	 eax, DWORD PTR _bmp3$199997[ebp]
  0780b	50		 push	 eax
  0780c	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0780f	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 2507 : 		bmplist->Add(&bmp3,GetSysColor(COLOR_3DFACE));

  07814	6a 0f		 push	 15			; 0000000fH
  07816	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0781c	50		 push	 eax
  0781d	8d 4d d4	 lea	 ecx, DWORD PTR _bmp3$199997[ebp]
  07820	51		 push	 ecx
  07821	8b 4d 08	 mov	 ecx, DWORD PTR _bmplist$[ebp]
  07824	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2508 : 		pWnd->ReleaseDC(pDC);  // Release the DC

  07829	8b 55 c8	 mov	 edx, DWORD PTR _pDC$199994[ebp]
  0782c	52		 push	 edx
  0782d	8b 4d bc	 mov	 ecx, DWORD PTR _pWnd$199992[ebp]
  07830	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 2509 : 	}

  07835	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  07839	8d 4d d4	 lea	 ecx, DWORD PTR _bmp3$199997[ebp]
  0783c	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  07841	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  07845	8d 4d c0	 lea	 ecx, DWORD PTR _bmp2$199996[ebp]
  07848	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0784d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07854	8d 4d cc	 lea	 ecx, DWORD PTR _bmp$199995[ebp]
  07857	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L199991:

; 2510 : 	return(bReturn);

  0785c	8b 45 f0	 mov	 eax, DWORD PTR _bReturn$[ebp]

; 2511 : }

  0785f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07862	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07869	8b e5		 mov	 esp, ebp
  0786b	5d		 pop	 ebp
  0786c	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L202928:
  0051d	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$199979[ebp]
  00520	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202929:
  00525	8d 4d dc	 lea	 ecx, DWORD PTR _mybmp$199985[ebp]
  00528	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202930:
  0052d	8d 4d cc	 lea	 ecx, DWORD PTR _bmp$199995[ebp]
  00530	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202931:
  00535	8d 4d c0	 lea	 ecx, DWORD PTR _bmp2$199996[ebp]
  00538	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202932:
  0053d	8d 4d d4	 lea	 ecx, DWORD PTR _bmp3$199997[ebp]
  00540	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z:
  00545	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202934
  0054a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ENDP ; BCMenu::AddBitmapToImageList
PUBLIC	?SetBitmapBackground@BCMenu@@QAEXK@Z		; BCMenu::SetBitmapBackground
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetBitmapBackground@BCMenu@@QAEXK@Z PROC NEAR		; BCMenu::SetBitmapBackground
; _this$ = ecx

; 2514 : {

  07870	55		 push	 ebp
  07871	8b ec		 mov	 ebp, esp
  07873	51		 push	 ecx
  07874	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2515 : 	m_bitmapBackground=color;

  07877	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0787a	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  0787d	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 2516 : 	m_bitmapBackgroundFlag=TRUE;

  07880	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  07883	c7 42 34 01 00
	00 00		 mov	 DWORD PTR [edx+52], 1

; 2517 : }

  0788a	8b e5		 mov	 esp, ebp
  0788c	5d		 pop	 ebp
  0788d	c2 04 00	 ret	 4
?SetBitmapBackground@BCMenu@@QAEXK@Z ENDP		; BCMenu::SetBitmapBackground
_TEXT	ENDS
PUBLIC	?UnSetBitmapBackground@BCMenu@@QAEXXZ		; BCMenu::UnSetBitmapBackground
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnSetBitmapBackground@BCMenu@@QAEXXZ PROC NEAR		; BCMenu::UnSetBitmapBackground
; _this$ = ecx

; 2520 : {

  07890	55		 push	 ebp
  07891	8b ec		 mov	 ebp, esp
  07893	51		 push	 ecx
  07894	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2521 : 	m_bitmapBackgroundFlag=FALSE;

  07897	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0789a	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 2522 : }

  078a1	8b e5		 mov	 esp, ebp
  078a3	5d		 pop	 ebp
  078a4	c3		 ret	 0
?UnSetBitmapBackground@BCMenu@@QAEXXZ ENDP		; BCMenu::UnSetBitmapBackground
_TEXT	ENDS
PUBLIC	?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z	; BCMenu::AddFromToolBar
xdata$x	SEGMENT
$T202957 DD	0ffffffffH
	DD	FLAT:$L202952
	DD	0ffffffffH
	DD	FLAT:$L202953
$T202955 DD	019930520H
	DD	02H
	DD	FLAT:$T202957
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv175 = -80						; size = 4
tv151 = -76						; size = 4
tv131 = -72						; size = 4
_this$ = -68						; size = 4
$T202949 = -64						; size = 4
$T202948 = -60						; size = 4
$T202945 = -56						; size = 4
$T202944 = -52						; size = 4
$T202941 = -48						; size = 4
$T202940 = -44						; size = 4
_nImage$200019 = -40					; size = 4
_pSubMenu$200022 = -36					; size = 4
_nLoc$200020 = -32					; size = 4
_nID$200015 = -28					; size = 4
_nStyle$200018 = -24					; size = 4
_pData$200021 = -20					; size = 4
_i$200011 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pToolBar$ = 8						; size = 4
_nResourceID$ = 12					; size = 4
?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z PROC NEAR	; BCMenu::AddFromToolBar
; _this$ = ecx

; 2528 : {

  078b0	55		 push	 ebp
  078b1	8b ec		 mov	 ebp, esp
  078b3	6a ff		 push	 -1
  078b5	68 00 00 00 00	 push	 __ehhandler$?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z
  078ba	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  078c0	50		 push	 eax
  078c1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  078c8	83 ec 44	 sub	 esp, 68			; 00000044H
  078cb	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 2529 : 	for (int i = 0; i < pToolBar->GetCount(); i++) {

  078ce	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$200011[ebp], 0
  078d5	eb 09		 jmp	 SHORT $L200012
$L200013:
  078d7	8b 45 f0	 mov	 eax, DWORD PTR _i$200011[ebp]
  078da	83 c0 01	 add	 eax, 1
  078dd	89 45 f0	 mov	 DWORD PTR _i$200011[ebp], eax
$L200012:
  078e0	8b 4d 08	 mov	 ecx, DWORD PTR _pToolBar$[ebp]
  078e3	e8 00 00 00 00	 call	 ?GetCount@CControlBar@@QBEHXZ ; CControlBar::GetCount
  078e8	39 45 f0	 cmp	 DWORD PTR _i$200011[ebp], eax
  078eb	0f 8d f2 01 00
	00		 jge	 $L200010

; 2530 : 		UINT nID = pToolBar->GetItemID(i);

  078f1	8b 4d f0	 mov	 ecx, DWORD PTR _i$200011[ebp]
  078f4	51		 push	 ecx
  078f5	8b 4d 08	 mov	 ecx, DWORD PTR _pToolBar$[ebp]
  078f8	e8 00 00 00 00	 call	 ?GetItemID@CToolBar@@QBEIH@Z ; CToolBar::GetItemID
  078fd	89 45 e4	 mov	 DWORD PTR _nID$200015[ebp], eax

; 2531 : 		// See if this toolbar option
; 2532 : 		// appears as a command on this
; 2533 : 		// menu or is a separator
; 2534 : 		if (nID == 0 || GetMenuState(nID, MF_BYCOMMAND) == 0xFFFFFFFF)

  07900	83 7d e4 00	 cmp	 DWORD PTR _nID$200015[ebp], 0
  07904	74 13		 je	 SHORT $L200017
  07906	6a 00		 push	 0
  07908	8b 55 e4	 mov	 edx, DWORD PTR _nID$200015[ebp]
  0790b	52		 push	 edx
  0790c	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0790f	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  07914	83 f8 ff	 cmp	 eax, -1
  07917	75 02		 jne	 SHORT $L200016
$L200017:

; 2535 : 			continue; // Item doesn't exist

  07919	eb bc		 jmp	 SHORT $L200013
$L200016:

; 2536 : 		UINT nStyle;
; 2537 : 		int nImage;
; 2538 : 		// Get the toolbar button info
; 2539 : 		pToolBar->GetButtonInfo(i, nID, nStyle, nImage);

  0791b	8d 45 d8	 lea	 eax, DWORD PTR _nImage$200019[ebp]
  0791e	50		 push	 eax
  0791f	8d 4d e8	 lea	 ecx, DWORD PTR _nStyle$200018[ebp]
  07922	51		 push	 ecx
  07923	8d 55 e4	 lea	 edx, DWORD PTR _nID$200015[ebp]
  07926	52		 push	 edx
  07927	8b 45 f0	 mov	 eax, DWORD PTR _i$200011[ebp]
  0792a	50		 push	 eax
  0792b	8b 4d 08	 mov	 ecx, DWORD PTR _pToolBar$[ebp]
  0792e	e8 00 00 00 00	 call	 ?GetButtonInfo@CToolBar@@QBEXHAAI0AAH@Z ; CToolBar::GetButtonInfo

; 2540 : 		// OK, we have the command ID of the toolbar
; 2541 : 		// option, and the tollbar bitmap offset
; 2542 : 		int nLoc;
; 2543 : 		BCMenuData* pData;
; 2544 : 		BCMenu *pSubMenu = FindMenuOption(nID, nLoc);

  07933	8d 4d e0	 lea	 ecx, DWORD PTR _nLoc$200020[ebp]
  07936	51		 push	 ecx
  07937	8b 55 e4	 mov	 edx, DWORD PTR _nID$200015[ebp]
  0793a	52		 push	 edx
  0793b	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0793e	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  07943	89 45 dc	 mov	 DWORD PTR _pSubMenu$200022[ebp], eax

; 2545 : 		if (pSubMenu && nLoc >= 0)pData = pSubMenu->m_MenuList[nLoc];

  07946	83 7d dc 00	 cmp	 DWORD PTR _pSubMenu$200022[ebp], 0
  0794a	74 1c		 je	 SHORT $L200023
  0794c	83 7d e0 00	 cmp	 DWORD PTR _nLoc$200020[ebp], 0
  07950	7c 16		 jl	 SHORT $L200023
  07952	8b 45 e0	 mov	 eax, DWORD PTR _nLoc$200020[ebp]
  07955	50		 push	 eax
  07956	8b 4d dc	 mov	 ecx, DWORD PTR _pSubMenu$200022[ebp]
  07959	83 c1 08	 add	 ecx, 8
  0795c	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  07961	8b 08		 mov	 ecx, DWORD PTR [eax]
  07963	89 4d ec	 mov	 DWORD PTR _pData$200021[ebp], ecx

; 2546 : 		else {

  07966	eb 50		 jmp	 SHORT $L200024
$L200023:

; 2547 : 			// Create a new BCMenuData structure
; 2548 : 			pData = new BCMenuData;

  07968	6a 24		 push	 36			; 00000024H
  0796a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0796f	83 c4 04	 add	 esp, 4
  07972	89 45 d0	 mov	 DWORD PTR $T202941[ebp], eax
  07975	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0797c	83 7d d0 00	 cmp	 DWORD PTR $T202941[ebp], 0
  07980	74 0d		 je	 SHORT $L202942
  07982	8b 4d d0	 mov	 ecx, DWORD PTR $T202941[ebp]
  07985	e8 00 00 00 00	 call	 ??0BCMenuData@@QAE@XZ	; BCMenuData::BCMenuData
  0798a	89 45 b8	 mov	 DWORD PTR tv131[ebp], eax
  0798d	eb 07		 jmp	 SHORT $L202943
$L202942:
  0798f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$L202943:
  07996	8b 55 b8	 mov	 edx, DWORD PTR tv131[ebp]
  07999	89 55 d4	 mov	 DWORD PTR $T202940[ebp], edx
  0799c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  079a3	8b 45 d4	 mov	 eax, DWORD PTR $T202940[ebp]
  079a6	89 45 ec	 mov	 DWORD PTR _pData$200021[ebp], eax

; 2549 : 			m_MenuList.Add(pData);

  079a9	8b 4d ec	 mov	 ecx, DWORD PTR _pData$200021[ebp]
  079ac	51		 push	 ecx
  079ad	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  079b0	83 c1 08	 add	 ecx, 8
  079b3	e8 00 00 00 00	 call	 ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
$L200024:

; 2550 : 		}
; 2551 : 		// Set some default structure members
; 2552 : 		pData->menuIconNormal = nResourceID;

  079b8	8b 55 ec	 mov	 edx, DWORD PTR _pData$200021[ebp]
  079bb	8b 45 0c	 mov	 eax, DWORD PTR _nResourceID$[ebp]
  079be	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 2553 : 		pData->nID = nID;

  079c1	8b 4d ec	 mov	 ecx, DWORD PTR _pData$200021[ebp]
  079c4	8b 55 e4	 mov	 edx, DWORD PTR _nID$200015[ebp]
  079c7	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 2554 : 		pData->nFlags =  MF_BYCOMMAND | MF_OWNERDRAW;

  079ca	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  079cd	c7 40 10 00 01
	00 00		 mov	 DWORD PTR [eax+16], 256	; 00000100H

; 2555 : 		pData->xoffset = nImage;

  079d4	8b 4d ec	 mov	 ecx, DWORD PTR _pData$200021[ebp]
  079d7	8b 55 d8	 mov	 edx, DWORD PTR _nImage$200019[ebp]
  079da	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 2556 : 		if (pData->bitmap)pData->bitmap->DeleteImageList();

  079dd	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  079e0	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  079e4	74 0d		 je	 SHORT $L200029
  079e6	8b 4d ec	 mov	 ecx, DWORD PTR _pData$200021[ebp]
  079e9	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  079ec	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 2557 : 		else pData->bitmap = new CImageList;

  079f1	eb 41		 jmp	 SHORT $L200030
$L200029:
  079f3	6a 08		 push	 8
  079f5	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  079fa	89 45 c8	 mov	 DWORD PTR $T202945[ebp], eax
  079fd	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  07a04	83 7d c8 00	 cmp	 DWORD PTR $T202945[ebp], 0
  07a08	74 0d		 je	 SHORT $L202946
  07a0a	8b 4d c8	 mov	 ecx, DWORD PTR $T202945[ebp]
  07a0d	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  07a12	89 45 b4	 mov	 DWORD PTR tv151[ebp], eax
  07a15	eb 07		 jmp	 SHORT $L202947
$L202946:
  07a17	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$L202947:
  07a1e	8b 55 b4	 mov	 edx, DWORD PTR tv151[ebp]
  07a21	89 55 cc	 mov	 DWORD PTR $T202944[ebp], edx
  07a24	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07a2b	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  07a2e	8b 4d cc	 mov	 ecx, DWORD PTR $T202944[ebp]
  07a31	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$L200030:

; 2558 : 		pData->bitmap->Create(m_iconX, m_iconY,ILC_COLORDDB|ILC_MASK, 1, 1);

  07a34	6a 01		 push	 1
  07a36	6a 01		 push	 1
  07a38	68 ff 00 00 00	 push	 255			; 000000ffH
  07a3d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  07a43	52		 push	 edx
  07a44	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  07a49	50		 push	 eax
  07a4a	8b 4d ec	 mov	 ecx, DWORD PTR _pData$200021[ebp]
  07a4d	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  07a50	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 2559 : 		
; 2560 : 		if(!AddBitmapToImageList(pData->bitmap, nResourceID)){

  07a55	8b 55 0c	 mov	 edx, DWORD PTR _nResourceID$[ebp]
  07a58	52		 push	 edx
  07a59	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  07a5c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  07a5f	51		 push	 ecx
  07a60	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  07a63	e8 00 00 00 00	 call	 ?AddBitmapToImageList@BCMenu@@QAEHPAVCImageList@@I@Z ; BCMenu::AddBitmapToImageList
  07a68	85 c0		 test	 eax, eax
  07a6a	75 57		 jne	 SHORT $L200035

; 2561 : 			pData->bitmap->DeleteImageList();

  07a6c	8b 55 ec	 mov	 edx, DWORD PTR _pData$200021[ebp]
  07a6f	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  07a72	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList

; 2562 : 			delete pData->bitmap;

  07a77	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  07a7a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  07a7d	89 4d c0	 mov	 DWORD PTR $T202949[ebp], ecx
  07a80	8b 55 c0	 mov	 edx, DWORD PTR $T202949[ebp]
  07a83	89 55 c4	 mov	 DWORD PTR $T202948[ebp], edx
  07a86	83 7d c4 00	 cmp	 DWORD PTR $T202948[ebp], 0
  07a8a	74 12		 je	 SHORT $L202950
  07a8c	6a 01		 push	 1
  07a8e	8b 45 c4	 mov	 eax, DWORD PTR $T202948[ebp]
  07a91	8b 10		 mov	 edx, DWORD PTR [eax]
  07a93	8b 4d c4	 mov	 ecx, DWORD PTR $T202948[ebp]
  07a96	ff 52 04	 call	 DWORD PTR [edx+4]
  07a99	89 45 b0	 mov	 DWORD PTR tv175[ebp], eax
  07a9c	eb 07		 jmp	 SHORT $L202951
$L202950:
  07a9e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv175[ebp], 0
$L202951:

; 2563 : 			pData->bitmap=NULL;

  07aa5	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  07aa8	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2564 : 			pData->menuIconNormal = -1;

  07aaf	8b 4d ec	 mov	 ecx, DWORD PTR _pData$200021[ebp]
  07ab2	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 2565 : 			pData->xoffset = -1;

  07ab9	8b 55 ec	 mov	 edx, DWORD PTR _pData$200021[ebp]
  07abc	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1
$L200035:

; 2566 : 		}
; 2567 : 		
; 2568 : 		// Modify our menu
; 2569 : 		ModifyMenu(nID,pData->nFlags,nID,(LPCTSTR)pData);

  07ac3	8b 45 ec	 mov	 eax, DWORD PTR _pData$200021[ebp]
  07ac6	50		 push	 eax
  07ac7	8b 4d e4	 mov	 ecx, DWORD PTR _nID$200015[ebp]
  07aca	51		 push	 ecx
  07acb	8b 55 ec	 mov	 edx, DWORD PTR _pData$200021[ebp]
  07ace	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  07ad1	50		 push	 eax
  07ad2	8b 4d e4	 mov	 ecx, DWORD PTR _nID$200015[ebp]
  07ad5	51		 push	 ecx
  07ad6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  07ad9	e8 00 00 00 00	 call	 ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ; CMenu::ModifyMenuA

; 2570 : 	}

  07ade	e9 f4 fd ff ff	 jmp	 $L200013
$L200010:

; 2571 : }

  07ae3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07ae6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07aed	8b e5		 mov	 esp, ebp
  07aef	5d		 pop	 ebp
  07af0	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L202952:
  0054f	8b 45 d0	 mov	 eax, DWORD PTR $T202941[ebp]
  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00558	59		 pop	 ecx
  00559	c3		 ret	 0
$L202953:
  0055a	8b 45 c8	 mov	 eax, DWORD PTR $T202945[ebp]
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00563	c3		 ret	 0
__ehhandler$?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z:
  00564	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202955
  00569	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddFromToolBar@BCMenu@@QAEXPAVCToolBar@@H@Z ENDP	; BCMenu::AddFromToolBar
EXTRN	??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z:NEAR	; CBufferDC::CBufferDC
EXTRN	??1CBufferDC@@UAE@XZ:NEAR			; CBufferDC::~CBufferDC
xdata$x	SEGMENT
$T202965 DD	0ffffffffH
	DD	FLAT:$L202960
	DD	00H
	DD	FLAT:$L202961
$T202963 DD	019930520H
	DD	02H
	DD	FLAT:$T202965
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -100						; size = 4
$T202959 = -96						; size = 4
_memdc$ = -92						; size = 48
_brush$ = -44						; size = 8
_rcDest$ = -36						; size = 16
_dc$ = -20						; size = 4
_col$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dc1$ = 8						; size = 4
_rc$ = 12						; size = 4
_bSelected$ = 16					; size = 4
_hbmCheck$ = 20						; size = 4
?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z PROC NEAR ; BCMenu::Draw3DCheckmark
; _this$ = ecx

; 2575 : {

  07b00	55		 push	 ebp
  07b01	8b ec		 mov	 ebp, esp
  07b03	6a ff		 push	 -1
  07b05	68 00 00 00 00	 push	 __ehhandler$?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z
  07b0a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07b10	50		 push	 eax
  07b11	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07b18	83 ec 58	 sub	 esp, 88			; 00000058H
  07b1b	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 2576 : 	CRect rcDest = rc;

  07b1e	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  07b21	8b 08		 mov	 ecx, DWORD PTR [eax]
  07b23	89 4d dc	 mov	 DWORD PTR _rcDest$[ebp], ecx
  07b26	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  07b29	89 55 e0	 mov	 DWORD PTR _rcDest$[ebp+4], edx
  07b2c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  07b2f	89 4d e4	 mov	 DWORD PTR _rcDest$[ebp+8], ecx
  07b32	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  07b35	89 55 e8	 mov	 DWORD PTR _rcDest$[ebp+12], edx

; 2577 : 	CBrush brush;

  07b38	8d 4d d4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07b3b	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  07b40	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2578 : 	COLORREF col;
; 2579 : 
; 2580 : 	CBufferDC memdc(dc1->m_hDC, rc);

  07b47	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  07b4a	50		 push	 eax
  07b4b	8b 4d 08	 mov	 ecx, DWORD PTR _dc1$[ebp]
  07b4e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  07b51	52		 push	 edx
  07b52	8d 4d a4	 lea	 ecx, DWORD PTR _memdc$[ebp]
  07b55	e8 00 00 00 00	 call	 ??0CBufferDC@@QAE@PAUHDC__@@ABVCRect@@@Z ; CBufferDC::CBufferDC
  07b5a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2581 : 	CDC *dc = &memdc;

  07b5e	8d 45 a4	 lea	 eax, DWORD PTR _memdc$[ebp]
  07b61	89 45 ec	 mov	 DWORD PTR _dc$[ebp], eax

; 2582 : 
; 2583 : 	if(IsWinXPLuna())col=GetSysColor(COLOR_3DFACE);

  07b64	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  07b69	85 c0		 test	 eax, eax
  07b6b	74 0d		 je	 SHORT $L200051
  07b6d	6a 0f		 push	 15			; 0000000fH
  07b6f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07b75	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2584 : 	else col=GetSysColor(COLOR_MENU);

  07b78	eb 0b		 jmp	 SHORT $L200052
$L200051:
  07b7a	6a 04		 push	 4
  07b7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07b82	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax
$L200052:

; 2585 : 	if(!bSelected)col = LightenColor(col,0.6);

  07b85	83 7d 10 00	 cmp	 DWORD PTR _bSelected$[ebp], 0
  07b89	75 1b		 jne	 SHORT $L200053
  07b8b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe3333333333333
  07b91	83 ec 08	 sub	 esp, 8
  07b94	dd 1c 24	 fstp	 QWORD PTR [esp]
  07b97	8b 4d f0	 mov	 ecx, DWORD PTR _col$[ebp]
  07b9a	51		 push	 ecx
  07b9b	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  07ba0	83 c4 0c	 add	 esp, 12			; 0000000cH
  07ba3	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax
$L200053:

; 2586 : 	brush.CreateSolidBrush(col);

  07ba6	8b 55 f0	 mov	 edx, DWORD PTR _col$[ebp]
  07ba9	52		 push	 edx
  07baa	8d 4d d4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07bad	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2587 : 	dc->FillRect(rcDest,&brush);

  07bb2	8d 45 d4	 lea	 eax, DWORD PTR _brush$[ebp]
  07bb5	50		 push	 eax
  07bb6	8d 4d dc	 lea	 ecx, DWORD PTR _rcDest$[ebp]
  07bb9	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  07bbe	50		 push	 eax
  07bbf	8b 4d ec	 mov	 ecx, DWORD PTR _dc$[ebp]
  07bc2	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2588 : 	brush.DeleteObject();

  07bc7	8d 4d d4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07bca	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2589 : 	if (IsNewShell()) //SK: looks better on the old shell

  07bcf	e8 00 00 00 00	 call	 ?IsNewShell@BCMenu@@KAHXZ ; BCMenu::IsNewShell
  07bd4	85 c0		 test	 eax, eax
  07bd6	74 10		 je	 SHORT $L200054

; 2590 : 		dc->DrawEdge(&rcDest, BDR_SUNKENOUTER, BF_RECT);

  07bd8	6a 0f		 push	 15			; 0000000fH
  07bda	6a 02		 push	 2
  07bdc	8d 4d dc	 lea	 ecx, DWORD PTR _rcDest$[ebp]
  07bdf	51		 push	 ecx
  07be0	8b 4d ec	 mov	 ecx, DWORD PTR _dc$[ebp]
  07be3	e8 00 00 00 00	 call	 ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawEdge
$L200054:

; 2591 : 	if (!hbmCheck)DrawCheckMark(dc,rc.left+4,rc.top+4,GetSysColor(COLOR_MENUTEXT));

  07be8	83 7d 14 00	 cmp	 DWORD PTR _hbmCheck$[ebp], 0
  07bec	75 2c		 jne	 SHORT $L200055
  07bee	6a 00		 push	 0
  07bf0	6a 07		 push	 7
  07bf2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07bf8	50		 push	 eax
  07bf9	8b 55 0c	 mov	 edx, DWORD PTR _rc$[ebp]
  07bfc	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  07bff	83 c0 04	 add	 eax, 4
  07c02	50		 push	 eax
  07c03	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07c06	8b 11		 mov	 edx, DWORD PTR [ecx]
  07c08	83 c2 04	 add	 edx, 4
  07c0b	52		 push	 edx
  07c0c	8b 45 ec	 mov	 eax, DWORD PTR _dc$[ebp]
  07c0f	50		 push	 eax
  07c10	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  07c13	e8 00 00 00 00	 call	 ?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z ; BCMenu::DrawCheckMark

; 2592 : 	else DrawRadioDot(dc,rc.left+5,rc.top+4,GetSysColor(COLOR_MENUTEXT));

  07c18	eb 28		 jmp	 SHORT $L200056
$L200055:
  07c1a	6a 07		 push	 7
  07c1c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07c22	50		 push	 eax
  07c23	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07c26	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  07c29	83 c2 04	 add	 edx, 4
  07c2c	52		 push	 edx
  07c2d	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  07c30	8b 08		 mov	 ecx, DWORD PTR [eax]
  07c32	83 c1 05	 add	 ecx, 5
  07c35	51		 push	 ecx
  07c36	8b 55 ec	 mov	 edx, DWORD PTR _dc$[ebp]
  07c39	52		 push	 edx
  07c3a	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  07c3d	e8 00 00 00 00	 call	 ?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z ; BCMenu::DrawRadioDot
$L200056:

; 2593 : 	return TRUE;

  07c42	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR $T202959[ebp], 1
  07c49	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  07c4d	8d 4d a4	 lea	 ecx, DWORD PTR _memdc$[ebp]
  07c50	e8 00 00 00 00	 call	 ??1CBufferDC@@UAE@XZ	; CBufferDC::~CBufferDC
  07c55	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07c5c	8d 4d d4	 lea	 ecx, DWORD PTR _brush$[ebp]
  07c5f	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  07c64	8b 45 a0	 mov	 eax, DWORD PTR $T202959[ebp]

; 2594 : }

  07c67	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07c6a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07c71	8b e5		 mov	 esp, ebp
  07c73	5d		 pop	 ebp
  07c74	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L202960:
  0056e	8d 4d d4	 lea	 ecx, DWORD PTR _brush$[ebp]
  00571	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202961:
  00576	8d 4d a4	 lea	 ecx, DWORD PTR _memdc$[ebp]
  00579	e9 00 00 00 00	 jmp	 ??1CBufferDC@@UAE@XZ	; CBufferDC::~CBufferDC
__ehhandler$?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z:
  0057e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202963
  00583	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Draw3DCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@HPAUHBITMAP__@@@Z ENDP ; BCMenu::Draw3DCheckmark
PUBLIC	??BCRect@@QBEPBUtagRECT@@XZ			; CRect::operator tagRECT const *
xdata$x	SEGMENT
$T202972 DD	0ffffffffH
	DD	FLAT:$L202968
$T202970 DD	019930520H
	DD	01H
	DD	FLAT:$T202972
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T202967 = -36						; size = 4
_dx$ = -32						; size = 4
_brushin$ = -28						; size = 8
_dy$ = -20						; size = 4
_col$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dc$ = 8						; size = 4
_rc$ = 12						; size = 4
_hbmCheck$ = 16						; size = 4
_colorout$ = 20						; size = 4
_selected$ = 24						; size = 4
?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z PROC NEAR ; BCMenu::DrawXPCheckmark
; _this$ = ecx

; 2597 : {

  07c80	55		 push	 ebp
  07c81	8b ec		 mov	 ebp, esp
  07c83	6a ff		 push	 -1
  07c85	68 00 00 00 00	 push	 __ehhandler$?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z
  07c8a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07c90	50		 push	 eax
  07c91	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07c98	83 ec 1c	 sub	 esp, 28			; 0000001cH
  07c9b	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 2598 : 	CBrush brushin;

  07c9e	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  07ca1	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  07ca6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2599 : 	COLORREF col;
; 2600 : 	int dx,dy;
; 2601 : 	dy = (rc.Height()>>1)-3;

  07cad	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07cb0	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  07cb5	d1 f8		 sar	 eax, 1
  07cb7	83 e8 03	 sub	 eax, 3
  07cba	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 2602 : 	dy = dy<0 ? 0 : dy;

  07cbd	33 c0		 xor	 eax, eax
  07cbf	83 7d ec 00	 cmp	 DWORD PTR _dy$[ebp], 0
  07cc3	0f 9c c0	 setl	 al
  07cc6	48		 dec	 eax
  07cc7	23 45 ec	 and	 eax, DWORD PTR _dy$[ebp]
  07cca	89 45 ec	 mov	 DWORD PTR _dy$[ebp], eax

; 2603 : 	dx = (rc.Width()>>1)-3;

  07ccd	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07cd0	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  07cd5	d1 f8		 sar	 eax, 1
  07cd7	83 e8 03	 sub	 eax, 3
  07cda	89 45 e0	 mov	 DWORD PTR _dx$[ebp], eax

; 2604 : 	dx = dx<0 ? 0 : dx;

  07cdd	33 c9		 xor	 ecx, ecx
  07cdf	83 7d e0 00	 cmp	 DWORD PTR _dx$[ebp], 0
  07ce3	0f 9c c1	 setl	 cl
  07ce6	49		 dec	 ecx
  07ce7	23 4d e0	 and	 ecx, DWORD PTR _dx$[ebp]
  07cea	89 4d e0	 mov	 DWORD PTR _dx$[ebp], ecx

; 2605 : 
; 2606 : 	if(selected) col = LightenColor(colorout,0.55);

  07ced	83 7d 18 00	 cmp	 DWORD PTR _selected$[ebp], 0
  07cf1	74 1f		 je	 SHORT $L200070
  07cf3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe199999999999a
  07cf9	83 ec 08	 sub	 esp, 8
  07cfc	dd 1c 24	 fstp	 QWORD PTR [esp]
  07cff	8b 55 14	 mov	 edx, DWORD PTR _colorout$[ebp]
  07d02	8b 02		 mov	 eax, DWORD PTR [edx]
  07d04	50		 push	 eax
  07d05	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  07d0a	83 c4 0c	 add	 esp, 12			; 0000000cH
  07d0d	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax

; 2607 : 	else col = LightenColor(colorout,0.85);

  07d10	eb 1d		 jmp	 SHORT $L200071
$L200070:
  07d12	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feb333333333333
  07d18	83 ec 08	 sub	 esp, 8
  07d1b	dd 1c 24	 fstp	 QWORD PTR [esp]
  07d1e	8b 4d 14	 mov	 ecx, DWORD PTR _colorout$[ebp]
  07d21	8b 11		 mov	 edx, DWORD PTR [ecx]
  07d23	52		 push	 edx
  07d24	e8 00 00 00 00	 call	 ?LightenColor@BCMenu@@SAKKN@Z ; BCMenu::LightenColor
  07d29	83 c4 0c	 add	 esp, 12			; 0000000cH
  07d2c	89 45 f0	 mov	 DWORD PTR _col$[ebp], eax
$L200071:

; 2608 : 	brushin.CreateSolidBrush(col);

  07d2f	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  07d32	50		 push	 eax
  07d33	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  07d36	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2609 : 	dc->FillRect(rc,&brushin);

  07d3b	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  07d3e	51		 push	 ecx
  07d3f	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07d42	e8 00 00 00 00	 call	 ??BCRect@@QBEPBUtagRECT@@XZ ; CRect::operator tagRECT const *
  07d47	50		 push	 eax
  07d48	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  07d4b	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 2610 : 	brushin.DeleteObject();

  07d50	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  07d53	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2611 : 	dc->Draw3dRect (rc,colorout,colorout);

  07d58	8b 55 14	 mov	 edx, DWORD PTR _colorout$[ebp]
  07d5b	8b 02		 mov	 eax, DWORD PTR [edx]
  07d5d	50		 push	 eax
  07d5e	8b 4d 14	 mov	 ecx, DWORD PTR _colorout$[ebp]
  07d61	8b 11		 mov	 edx, DWORD PTR [ecx]
  07d63	52		 push	 edx
  07d64	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07d67	e8 00 00 00 00	 call	 ??BCRect@@QBEPBUtagRECT@@XZ ; CRect::operator tagRECT const *
  07d6c	50		 push	 eax
  07d6d	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  07d70	e8 00 00 00 00	 call	 ?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z ; CDC::Draw3dRect

; 2612 : 
; 2613 : 	if (!hbmCheck)DrawCheckMark(dc,rc.left+dx,rc.top+dy,GetSysColor(COLOR_MENUTEXT),TRUE);

  07d75	83 7d 10 00	 cmp	 DWORD PTR _hbmCheck$[ebp], 0
  07d79	75 2c		 jne	 SHORT $L200072
  07d7b	6a 01		 push	 1
  07d7d	6a 07		 push	 7
  07d7f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07d85	50		 push	 eax
  07d86	8b 45 0c	 mov	 eax, DWORD PTR _rc$[ebp]
  07d89	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  07d8c	03 4d ec	 add	 ecx, DWORD PTR _dy$[ebp]
  07d8f	51		 push	 ecx
  07d90	8b 55 0c	 mov	 edx, DWORD PTR _rc$[ebp]
  07d93	8b 02		 mov	 eax, DWORD PTR [edx]
  07d95	03 45 e0	 add	 eax, DWORD PTR _dx$[ebp]
  07d98	50		 push	 eax
  07d99	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  07d9c	51		 push	 ecx
  07d9d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  07da0	e8 00 00 00 00	 call	 ?DrawCheckMark@BCMenu@@IAEXPAVCDC@@HHKH@Z ; BCMenu::DrawCheckMark

; 2614 : 	else DrawRadioDot(dc,rc.left+dx,rc.top+dy,GetSysColor(COLOR_MENUTEXT));

  07da5	eb 28		 jmp	 SHORT $L200073
$L200072:
  07da7	6a 07		 push	 7
  07da9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07daf	50		 push	 eax
  07db0	8b 55 0c	 mov	 edx, DWORD PTR _rc$[ebp]
  07db3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  07db6	03 45 ec	 add	 eax, DWORD PTR _dy$[ebp]
  07db9	50		 push	 eax
  07dba	8b 4d 0c	 mov	 ecx, DWORD PTR _rc$[ebp]
  07dbd	8b 11		 mov	 edx, DWORD PTR [ecx]
  07dbf	03 55 e0	 add	 edx, DWORD PTR _dx$[ebp]
  07dc2	52		 push	 edx
  07dc3	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  07dc6	50		 push	 eax
  07dc7	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  07dca	e8 00 00 00 00	 call	 ?DrawRadioDot@BCMenu@@IAEXPAVCDC@@HHK@Z ; BCMenu::DrawRadioDot
$L200073:

; 2615 : 	return TRUE;

  07dcf	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR $T202967[ebp], 1
  07dd6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07ddd	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  07de0	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  07de5	8b 45 dc	 mov	 eax, DWORD PTR $T202967[ebp]

; 2616 : }

  07de8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07deb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  07df2	8b e5		 mov	 esp, ebp
  07df4	5d		 pop	 ebp
  07df5	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L202968:
  00588	8d 4d e4	 lea	 ecx, DWORD PTR _brushin$[ebp]
  0058b	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z:
  00590	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202970
  00595	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawXPCheckmark@BCMenu@@IAEHPAVCDC@@ABVCRect@@PAUHBITMAP__@@AAKH@Z ENDP ; BCMenu::DrawXPCheckmark
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??BCRect@@QBEPBUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRect@@QBEPBUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT const *, COMDAT
; _this$ = ecx

; 145  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QBEPBUtagRECT@@XZ ENDP			; CRect::operator tagRECT const *
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcoll.inl
_TEXT	ENDS
;	COMDAT ?GetSize@CPtrArray@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CPtrArray@@QBEHXZ PROC NEAR			; CPtrArray::GetSize, COMDAT
; _this$ = ecx

; 194  : 	{ return m_nSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetSize@CPtrArray@@QBEHXZ ENDP				; CPtrArray::GetSize
_TEXT	ENDS
PUBLIC	?PatBlt@CDC@@QAEHHHHHK@Z			; CDC::PatBlt
EXTRN	?FillSolidRect@CDC@@QAEXHHHHK@Z:NEAR		; CDC::FillSolidRect
xdata$x	SEGMENT
$T202986 DD	0ffffffffH
	DD	FLAT:$L202978
	DD	00H
	DD	FLAT:$L202979
	DD	01H
	DD	FLAT:$L202980
	DD	02H
	DD	FLAT:$L202981
	DD	03H
	DD	FLAT:$L202982
$T202984 DD	019930520H
	DD	05H
	DD	FLAT:$T202986
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -84						; size = 4
_brShadow$ = -80					; size = 8
_pOldBrush$ = -72					; size = 4
_pddcOldBmp$ = -68					; size = 4
_ddc$ = -64						; size = 16
_bwbmp$ = -48						; size = 8
_brHilight$ = -40					; size = 8
_pdcOldBmp$ = -32					; size = 4
_dc$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_drawdc$ = 8						; size = 4
_nXDest$ = 12						; size = 4
_nYDest$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_bmp$ = 28						; size = 4
_nXSrc$ = 32						; size = 4
_nYSrc$ = 36						; size = 4
_bgcolor$ = 40						; size = 4
?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z PROC NEAR ; BCMenu::DitherBlt2
; _this$ = ecx

; 2621 : {

  07e00	55		 push	 ebp
  07e01	8b ec		 mov	 ebp, esp
  07e03	6a ff		 push	 -1
  07e05	68 00 00 00 00	 push	 __ehhandler$?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z
  07e0a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07e10	50		 push	 eax
  07e11	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  07e18	83 ec 48	 sub	 esp, 72			; 00000048H
  07e1b	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx

; 2622 : 	// create a monochrome memory DC
; 2623 : 	CDC ddc;

  07e1e	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07e21	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  07e26	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2624 : 	ddc.CreateCompatibleDC(0);

  07e2d	6a 00		 push	 0
  07e2f	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07e32	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2625 : 	CBitmap bwbmp;

  07e37	8d 4d d0	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  07e3a	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  07e3f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2626 : 	bwbmp.CreateCompatibleBitmap(&ddc, nWidth, nHeight);

  07e43	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  07e46	50		 push	 eax
  07e47	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  07e4a	51		 push	 ecx
  07e4b	8d 55 c0	 lea	 edx, DWORD PTR _ddc$[ebp]
  07e4e	52		 push	 edx
  07e4f	8d 4d d0	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  07e52	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 2627 : 	CBitmap * pddcOldBmp = ddc.SelectObject(&bwbmp);

  07e57	8d 45 d0	 lea	 eax, DWORD PTR _bwbmp$[ebp]
  07e5a	50		 push	 eax
  07e5b	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07e5e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  07e63	89 45 bc	 mov	 DWORD PTR _pddcOldBmp$[ebp], eax

; 2628 : 	
; 2629 : 	CDC dc;

  07e66	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07e69	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  07e6e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2630 : 	dc.CreateCompatibleDC(0);

  07e72	6a 00		 push	 0
  07e74	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07e77	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2631 : 	CBitmap * pdcOldBmp = dc.SelectObject(&bmp);

  07e7c	8b 4d 1c	 mov	 ecx, DWORD PTR _bmp$[ebp]
  07e7f	51		 push	 ecx
  07e80	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07e83	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  07e88	89 45 e0	 mov	 DWORD PTR _pdcOldBmp$[ebp], eax

; 2632 : 	
; 2633 : 	// build a mask
; 2634 : 	ddc.PatBlt(0, 0, nWidth, nHeight, WHITENESS);

  07e8b	68 62 00 ff 00	 push	 16711778		; 00ff0062H
  07e90	8b 55 18	 mov	 edx, DWORD PTR _nHeight$[ebp]
  07e93	52		 push	 edx
  07e94	8b 45 14	 mov	 eax, DWORD PTR _nWidth$[ebp]
  07e97	50		 push	 eax
  07e98	6a 00		 push	 0
  07e9a	6a 00		 push	 0
  07e9c	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07e9f	e8 00 00 00 00	 call	 ?PatBlt@CDC@@QAEHHHHHK@Z ; CDC::PatBlt

; 2635 : 	dc.SetBkColor(GetSysColor(COLOR_BTNFACE));

  07ea4	6a 0f		 push	 15			; 0000000fH
  07ea6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07eac	50		 push	 eax
  07ead	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07eb0	e8 00 00 00 00	 call	 ?SetBkColor@CDC@@UAEKK@Z ; CDC::SetBkColor

; 2636 : 	ddc.BitBlt(0, 0, nWidth, nHeight, &dc, nXSrc,nYSrc, SRCCOPY);

  07eb5	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  07eba	8b 4d 24	 mov	 ecx, DWORD PTR _nYSrc$[ebp]
  07ebd	51		 push	 ecx
  07ebe	8b 55 20	 mov	 edx, DWORD PTR _nXSrc$[ebp]
  07ec1	52		 push	 edx
  07ec2	8d 45 e4	 lea	 eax, DWORD PTR _dc$[ebp]
  07ec5	50		 push	 eax
  07ec6	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  07ec9	51		 push	 ecx
  07eca	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  07ecd	52		 push	 edx
  07ece	6a 00		 push	 0
  07ed0	6a 00		 push	 0
  07ed2	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07ed5	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2637 : 	dc.SetBkColor(GetSysColor(COLOR_BTNHILIGHT));

  07eda	6a 14		 push	 20			; 00000014H
  07edc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07ee2	50		 push	 eax
  07ee3	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07ee6	e8 00 00 00 00	 call	 ?SetBkColor@CDC@@UAEKK@Z ; CDC::SetBkColor

; 2638 : 	ddc.BitBlt(0, 0, nWidth, nHeight, &dc, nXSrc,nYSrc, SRCPAINT);

  07eeb	68 86 00 ee 00	 push	 15597702		; 00ee0086H
  07ef0	8b 45 24	 mov	 eax, DWORD PTR _nYSrc$[ebp]
  07ef3	50		 push	 eax
  07ef4	8b 4d 20	 mov	 ecx, DWORD PTR _nXSrc$[ebp]
  07ef7	51		 push	 ecx
  07ef8	8d 55 e4	 lea	 edx, DWORD PTR _dc$[ebp]
  07efb	52		 push	 edx
  07efc	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  07eff	50		 push	 eax
  07f00	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  07f03	51		 push	 ecx
  07f04	6a 00		 push	 0
  07f06	6a 00		 push	 0
  07f08	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  07f0b	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2639 : 	
; 2640 : 	// Copy the image from the toolbar into the memory DC
; 2641 : 	// and draw it (grayed) back into the toolbar.
; 2642 : 	dc.FillSolidRect(0,0, nWidth, nHeight, bgcolor);

  07f10	8b 55 28	 mov	 edx, DWORD PTR _bgcolor$[ebp]
  07f13	52		 push	 edx
  07f14	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  07f17	50		 push	 eax
  07f18	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  07f1b	51		 push	 ecx
  07f1c	6a 00		 push	 0
  07f1e	6a 00		 push	 0
  07f20	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07f23	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXHHHHK@Z ; CDC::FillSolidRect

; 2643 : 	//SK: Looks better on the old shell
; 2644 : 	dc.SetBkColor(RGB(0, 0, 0));

  07f28	6a 00		 push	 0
  07f2a	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07f2d	e8 00 00 00 00	 call	 ?SetBkColor@CDC@@UAEKK@Z ; CDC::SetBkColor

; 2645 : 	dc.SetTextColor(RGB(255, 255, 255));

  07f32	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  07f37	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07f3a	e8 00 00 00 00	 call	 ?SetTextColor@CDC@@UAEKK@Z ; CDC::SetTextColor

; 2646 : 	CBrush brShadow, brHilight;

  07f3f	8d 4d b0	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  07f42	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  07f47	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  07f4b	8d 4d d8	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  07f4e	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  07f53	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 2647 : 	brHilight.CreateSolidBrush(GetSysColor(COLOR_BTNHILIGHT));

  07f57	6a 14		 push	 20			; 00000014H
  07f59	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07f5f	50		 push	 eax
  07f60	8d 4d d8	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  07f63	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2648 : 	brShadow.CreateSolidBrush(GetSysColor(COLOR_BTNSHADOW));

  07f68	6a 10		 push	 16			; 00000010H
  07f6a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  07f70	50		 push	 eax
  07f71	8d 4d b0	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  07f74	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 2649 : 	CBrush * pOldBrush = dc.SelectObject(&brHilight);

  07f79	8d 55 d8	 lea	 edx, DWORD PTR _brHilight$[ebp]
  07f7c	52		 push	 edx
  07f7d	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07f80	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
  07f85	89 45 b8	 mov	 DWORD PTR _pOldBrush$[ebp], eax

; 2650 : 	dc.BitBlt(0,0, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);

  07f88	68 46 07 e2 00	 push	 14812998		; 00e20746H
  07f8d	6a 00		 push	 0
  07f8f	6a 00		 push	 0
  07f91	8d 45 c0	 lea	 eax, DWORD PTR _ddc$[ebp]
  07f94	50		 push	 eax
  07f95	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  07f98	51		 push	 ecx
  07f99	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  07f9c	52		 push	 edx
  07f9d	6a 00		 push	 0
  07f9f	6a 00		 push	 0
  07fa1	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07fa4	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2651 : 	drawdc->BitBlt(nXDest+1,nYDest+1,nWidth, nHeight, &dc,0,0,SRCCOPY);

  07fa9	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  07fae	6a 00		 push	 0
  07fb0	6a 00		 push	 0
  07fb2	8d 45 e4	 lea	 eax, DWORD PTR _dc$[ebp]
  07fb5	50		 push	 eax
  07fb6	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  07fb9	51		 push	 ecx
  07fba	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  07fbd	52		 push	 edx
  07fbe	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  07fc1	83 c0 01	 add	 eax, 1
  07fc4	50		 push	 eax
  07fc5	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  07fc8	83 c1 01	 add	 ecx, 1
  07fcb	51		 push	 ecx
  07fcc	8b 4d 08	 mov	 ecx, DWORD PTR _drawdc$[ebp]
  07fcf	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2652 : 	dc.BitBlt(1,1, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);

  07fd4	68 46 07 e2 00	 push	 14812998		; 00e20746H
  07fd9	6a 00		 push	 0
  07fdb	6a 00		 push	 0
  07fdd	8d 55 c0	 lea	 edx, DWORD PTR _ddc$[ebp]
  07fe0	52		 push	 edx
  07fe1	8b 45 18	 mov	 eax, DWORD PTR _nHeight$[ebp]
  07fe4	50		 push	 eax
  07fe5	8b 4d 14	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  07fe8	51		 push	 ecx
  07fe9	6a 01		 push	 1
  07feb	6a 01		 push	 1
  07fed	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07ff0	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2653 : 	dc.SelectObject(&brShadow);

  07ff5	8d 55 b0	 lea	 edx, DWORD PTR _brShadow$[ebp]
  07ff8	52		 push	 edx
  07ff9	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  07ffc	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject

; 2654 : 	dc.BitBlt(0,0, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);

  08001	68 46 07 e2 00	 push	 14812998		; 00e20746H
  08006	6a 00		 push	 0
  08008	6a 00		 push	 0
  0800a	8d 45 c0	 lea	 eax, DWORD PTR _ddc$[ebp]
  0800d	50		 push	 eax
  0800e	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  08011	51		 push	 ecx
  08012	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  08015	52		 push	 edx
  08016	6a 00		 push	 0
  08018	6a 00		 push	 0
  0801a	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  0801d	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2655 : 	drawdc->BitBlt(nXDest,nYDest,nWidth, nHeight, &dc,0,0,SRCCOPY);

  08022	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  08027	6a 00		 push	 0
  08029	6a 00		 push	 0
  0802b	8d 45 e4	 lea	 eax, DWORD PTR _dc$[ebp]
  0802e	50		 push	 eax
  0802f	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  08032	51		 push	 ecx
  08033	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  08036	52		 push	 edx
  08037	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  0803a	50		 push	 eax
  0803b	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  0803e	51		 push	 ecx
  0803f	8b 4d 08	 mov	 ecx, DWORD PTR _drawdc$[ebp]
  08042	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2656 : 	// reset DCs
; 2657 : 	ddc.SelectObject(pddcOldBmp);

  08047	8b 55 bc	 mov	 edx, DWORD PTR _pddcOldBmp$[ebp]
  0804a	52		 push	 edx
  0804b	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0804e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2658 : 	ddc.DeleteDC();

  08053	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  08056	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 2659 : 	dc.SelectObject(pOldBrush);

  0805b	8b 45 b8	 mov	 eax, DWORD PTR _pOldBrush$[ebp]
  0805e	50		 push	 eax
  0805f	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  08062	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject

; 2660 : 	dc.SelectObject(pdcOldBmp);

  08067	8b 4d e0	 mov	 ecx, DWORD PTR _pdcOldBmp$[ebp]
  0806a	51		 push	 ecx
  0806b	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  0806e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2661 : 	dc.DeleteDC();

  08073	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  08076	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 2662 : 	
; 2663 : 	brShadow.DeleteObject();

  0807b	8d 4d b0	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  0807e	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2664 : 	brHilight.DeleteObject();

  08083	8d 4d d8	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  08086	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2665 : 	bwbmp.DeleteObject();

  0808b	8d 4d d0	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  0808e	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 2666 : }

  08093	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  08097	8d 4d d8	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  0809a	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0809f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  080a3	8d 4d b0	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  080a6	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  080ab	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  080af	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  080b2	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  080b7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  080bb	8d 4d d0	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  080be	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  080c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  080ca	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  080cd	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  080d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  080d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  080dc	8b e5		 mov	 esp, ebp
  080de	5d		 pop	 ebp
  080df	c2 24 00	 ret	 36			; 00000024H
_TEXT	ENDS
text$x	SEGMENT
$L202978:
  0059a	8d 4d c0	 lea	 ecx, DWORD PTR _ddc$[ebp]
  0059d	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202979:
  005a2	8d 4d d0	 lea	 ecx, DWORD PTR _bwbmp$[ebp]
  005a5	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L202980:
  005aa	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  005ad	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L202981:
  005b2	8d 4d b0	 lea	 ecx, DWORD PTR _brShadow$[ebp]
  005b5	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L202982:
  005ba	8d 4d d8	 lea	 ecx, DWORD PTR _brHilight$[ebp]
  005bd	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z:
  005c2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202984
  005c7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DitherBlt2@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@HHK@Z ENDP ; BCMenu::DitherBlt2
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcoll.inl
;	COMDAT ?GetUpperBound@CPtrArray@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUpperBound@CPtrArray@@QBEHXZ PROC NEAR		; CPtrArray::GetUpperBound, COMDAT
; _this$ = ecx

; 200  : 	{ return m_nSize-1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	83 e8 01	 sub	 eax, 1
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?GetUpperBound@CPtrArray@@QBEHXZ ENDP			; CPtrArray::GetUpperBound
_TEXT	ENDS
EXTRN	?SetSize@CPtrArray@@QAEXHH@Z:NEAR		; CPtrArray::SetSize
; Function compile flags: /Odt
;	COMDAT ?RemoveAll@CPtrArray@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveAll@CPtrArray@@QAEXXZ PROC NEAR			; CPtrArray::RemoveAll, COMDAT
; _this$ = ecx

; 202  : 	{ SetSize(0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a ff		 push	 -1
  00009	6a 00		 push	 0
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetSize@CPtrArray@@QAEXHH@Z ; CPtrArray::SetSize
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?RemoveAll@CPtrArray@@QAEXXZ ENDP			; CPtrArray::RemoveAll
_TEXT	ENDS
xdata$x	SEGMENT
$T202996 DD	0ffffffffH
	DD	FLAT:$L202992
$T202994 DD	019930520H
	DD	01H
	DD	FLAT:$T202996
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -36						; size = 4
_pdcOldBmp$ = -32					; size = 4
_dc$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_drawdc$ = 8						; size = 4
_nXDest$ = 12						; size = 4
_nYDest$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
_bmp$ = 28						; size = 4
_bgcolor$ = 32						; size = 4
?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z PROC NEAR ; BCMenu::DitherBlt3
; _this$ = ecx

; 2670 : {

  080f0	55		 push	 ebp
  080f1	8b ec		 mov	 ebp, esp
  080f3	6a ff		 push	 -1
  080f5	68 00 00 00 00	 push	 __ehhandler$?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z
  080fa	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08100	50		 push	 eax
  08101	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08108	83 ec 18	 sub	 esp, 24			; 00000018H
  0810b	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 2671 : 	GetDisabledBitmap(bmp,bgcolor);

  0810e	8b 45 20	 mov	 eax, DWORD PTR _bgcolor$[ebp]
  08111	50		 push	 eax
  08112	8b 4d 1c	 mov	 ecx, DWORD PTR _bmp$[ebp]
  08115	51		 push	 ecx
  08116	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  08119	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 2672 : 	CDC dc;

  0811e	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  08121	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  08126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2673 : 	dc.CreateCompatibleDC(NULL);

  0812d	6a 00		 push	 0
  0812f	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  08132	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 2674 : 	CBitmap * pdcOldBmp = dc.SelectObject(&bmp);

  08137	8b 55 1c	 mov	 edx, DWORD PTR _bmp$[ebp]
  0813a	52		 push	 edx
  0813b	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  0813e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  08143	89 45 e0	 mov	 DWORD PTR _pdcOldBmp$[ebp], eax

; 2675 : 	drawdc->BitBlt(nXDest,nYDest,nWidth, nHeight, &dc,0,0,SRCCOPY);

  08146	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0814b	6a 00		 push	 0
  0814d	6a 00		 push	 0
  0814f	8d 45 e4	 lea	 eax, DWORD PTR _dc$[ebp]
  08152	50		 push	 eax
  08153	8b 4d 18	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  08156	51		 push	 ecx
  08157	8b 55 14	 mov	 edx, DWORD PTR _nWidth$[ebp]
  0815a	52		 push	 edx
  0815b	8b 45 10	 mov	 eax, DWORD PTR _nYDest$[ebp]
  0815e	50		 push	 eax
  0815f	8b 4d 0c	 mov	 ecx, DWORD PTR _nXDest$[ebp]
  08162	51		 push	 ecx
  08163	8b 4d 08	 mov	 ecx, DWORD PTR _drawdc$[ebp]
  08166	e8 00 00 00 00	 call	 ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ; CDC::BitBlt

; 2676 : 	// reset DCs
; 2677 : 	dc.SelectObject(pdcOldBmp);

  0816b	8b 55 e0	 mov	 edx, DWORD PTR _pdcOldBmp$[ebp]
  0816e	52		 push	 edx
  0816f	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  08172	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 2678 : 	dc.DeleteDC();

  08177	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  0817a	e8 00 00 00 00	 call	 ?DeleteDC@CDC@@QAEHXZ	; CDC::DeleteDC

; 2679 : }

  0817f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  08186	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  08189	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  0818e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  08191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  08198	8b e5		 mov	 esp, ebp
  0819a	5d		 pop	 ebp
  0819b	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
text$x	SEGMENT
$L202992:
  005cc	8d 4d e4	 lea	 ecx, DWORD PTR _dc$[ebp]
  005cf	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
__ehhandler$?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z:
  005d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T202994
  005d9	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DitherBlt3@BCMenu@@IAEXPAVCDC@@HHHHAAVCBitmap@@K@Z ENDP ; BCMenu::DitherBlt3
PUBLIC	?SetDisableOldStyle@BCMenu@@QAEXXZ		; BCMenu::SetDisableOldStyle
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDisableOldStyle@BCMenu@@QAEXXZ PROC NEAR		; BCMenu::SetDisableOldStyle
; _this$ = ecx

; 2682 : {

  081a0	55		 push	 ebp
  081a1	8b ec		 mov	 ebp, esp
  081a3	51		 push	 ecx
  081a4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2683 : 	disable_old_style=TRUE;

  081a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  081aa	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 2684 : }

  081b1	8b e5		 mov	 esp, ebp
  081b3	5d		 pop	 ebp
  081b4	c3		 ret	 0
?SetDisableOldStyle@BCMenu@@QAEXXZ ENDP			; BCMenu::SetDisableOldStyle
_TEXT	ENDS
PUBLIC	?UnSetDisableOldStyle@BCMenu@@QAEXXZ		; BCMenu::UnSetDisableOldStyle
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnSetDisableOldStyle@BCMenu@@QAEXXZ PROC NEAR		; BCMenu::UnSetDisableOldStyle
; _this$ = ecx

; 2687 : {

  081c0	55		 push	 ebp
  081c1	8b ec		 mov	 ebp, esp
  081c3	51		 push	 ecx
  081c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2688 : 	disable_old_style=FALSE;

  081c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  081ca	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 2689 : }

  081d1	8b e5		 mov	 esp, ebp
  081d3	5d		 pop	 ebp
  081d4	c3		 ret	 0
?UnSetDisableOldStyle@BCMenu@@QAEXXZ ENDP		; BCMenu::UnSetDisableOldStyle
_TEXT	ENDS
PUBLIC	?GetDisableOldStyle@BCMenu@@QAEHXZ		; BCMenu::GetDisableOldStyle
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisableOldStyle@BCMenu@@QAEHXZ PROC NEAR		; BCMenu::GetDisableOldStyle
; _this$ = ecx

; 2692 : {

  081e0	55		 push	 ebp
  081e1	8b ec		 mov	 ebp, esp
  081e3	51		 push	 ecx
  081e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2693 : 	return(disable_old_style);

  081e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  081ea	8b 40 38	 mov	 eax, DWORD PTR [eax+56]

; 2694 : }

  081ed	8b e5		 mov	 esp, ebp
  081ef	5d		 pop	 ebp
  081f0	c3		 ret	 0
?GetDisableOldStyle@BCMenu@@QAEHXZ ENDP			; BCMenu::GetDisableOldStyle
_TEXT	ENDS
PUBLIC	?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z ; BCMenu::NumBitmapColors
; Function compile flags: /Odt
_TEXT	SEGMENT
tv69 = -4						; size = 4
_lpBitmap$ = 8						; size = 4
?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z PROC NEAR ; BCMenu::NumBitmapColors

; 2698 : {

  08200	55		 push	 ebp
  08201	8b ec		 mov	 ebp, esp
  08203	51		 push	 ecx

; 2699 : 	if ( lpBitmap->biClrUsed != 0)

  08204	8b 45 08	 mov	 eax, DWORD PTR _lpBitmap$[ebp]
  08207	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0820b	74 09		 je	 SHORT $L200140

; 2700 : 		return (WORD)lpBitmap->biClrUsed;

  0820d	8b 4d 08	 mov	 ecx, DWORD PTR _lpBitmap$[ebp]
  08210	66 8b 41 20	 mov	 ax, WORD PTR [ecx+32]
  08214	eb 33		 jmp	 SHORT $L200139
$L200140:

; 2701 : 	
; 2702 : 	switch (lpBitmap->biBitCount){

  08216	8b 55 08	 mov	 edx, DWORD PTR _lpBitmap$[ebp]
  08219	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  0821d	89 45 fc	 mov	 DWORD PTR tv69[ebp], eax
  08220	83 7d fc 01	 cmp	 DWORD PTR tv69[ebp], 1
  08224	74 0e		 je	 SHORT $L200146
  08226	83 7d fc 04	 cmp	 DWORD PTR tv69[ebp], 4
  0822a	74 0e		 je	 SHORT $L200147
  0822c	83 7d fc 08	 cmp	 DWORD PTR tv69[ebp], 8
  08230	74 0e		 je	 SHORT $L200148
  08232	eb 12		 jmp	 SHORT $L200149
$L200146:

; 2703 : 		case 1:
; 2704 : 			return 2;

  08234	66 b8 02 00	 mov	 ax, 2
  08238	eb 0f		 jmp	 SHORT $L200139
$L200147:

; 2705 : 		case 4:
; 2706 : 			return 16;

  0823a	66 b8 10 00	 mov	 ax, 16			; 00000010H
  0823e	eb 09		 jmp	 SHORT $L200139
$L200148:

; 2707 : 		case 8:
; 2708 : 			return 256;

  08240	66 b8 00 01	 mov	 ax, 256			; 00000100H
  08244	eb 03		 jmp	 SHORT $L200139
$L200149:

; 2709 : 		default:
; 2710 : 			return 0;

  08246	66 33 c0	 xor	 ax, ax
$L200139:

; 2711 : 	}
; 2712 : 	return 0;
; 2713 : }

  08249	8b e5		 mov	 esp, ebp
  0824b	5d		 pop	 ebp
  0824c	c3		 ret	 0
?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z ENDP ; BCMenu::NumBitmapColors
_TEXT	ENDS
EXTRN	__imp__FreeResource@4:NEAR
EXTRN	?AfxLoadSysColorBitmap@@YGPAUHBITMAP__@@PAUHINSTANCE__@@PAUHRSRC__@@H@Z:NEAR ; AfxLoadSysColorBitmap
; Function compile flags: /Odt
_TEXT	SEGMENT
_hRsrc$ = -20						; size = 4
_hglb$ = -16						; size = 4
_lpBitmap$ = -12					; size = 4
_hInst$ = -8						; size = 4
_numcol$ = -4						; size = 2
_nResourceId$ = 8					; size = 4
?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z PROC NEAR ; BCMenu::LoadSysColorBitmap

; 2716 : {

  08250	55		 push	 ebp
  08251	8b ec		 mov	 ebp, esp
  08253	83 ec 14	 sub	 esp, 20			; 00000014H

; 2717 : 	HINSTANCE hInst = 
; 2718 : 		AfxFindResourceHandle(MAKEINTRESOURCE(nResourceId),RT_BITMAP);

  08256	6a 02		 push	 2
  08258	0f b7 45 08	 movzx	 eax, WORD PTR _nResourceId$[ebp]
  0825c	50		 push	 eax
  0825d	e8 00 00 00 00	 call	 ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z ; AfxFindResourceHandle
  08262	89 45 f8	 mov	 DWORD PTR _hInst$[ebp], eax

; 2719 : 	HRSRC hRsrc = 
; 2720 : 		::FindResource(hInst,MAKEINTRESOURCE(nResourceId),RT_BITMAP);

  08265	6a 02		 push	 2
  08267	0f b7 4d 08	 movzx	 ecx, WORD PTR _nResourceId$[ebp]
  0826b	51		 push	 ecx
  0826c	8b 55 f8	 mov	 edx, DWORD PTR _hInst$[ebp]
  0826f	52		 push	 edx
  08270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  08276	89 45 ec	 mov	 DWORD PTR _hRsrc$[ebp], eax

; 2721 : 	if (hRsrc == NULL){

  08279	83 7d ec 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  0827d	75 1b		 jne	 SHORT $L200167

; 2722 : 		hInst = NULL;

  0827f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hInst$[ebp], 0

; 2723 : 		hRsrc = ::FindResource(hInst,MAKEINTRESOURCE(nResourceId),RT_BITMAP);

  08286	6a 02		 push	 2
  08288	0f b7 45 08	 movzx	 eax, WORD PTR _nResourceId$[ebp]
  0828c	50		 push	 eax
  0828d	8b 4d f8	 mov	 ecx, DWORD PTR _hInst$[ebp]
  08290	51		 push	 ecx
  08291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  08297	89 45 ec	 mov	 DWORD PTR _hRsrc$[ebp], eax
$L200167:

; 2724 : 	}
; 2725 : 	if (hRsrc == NULL)return NULL;

  0829a	83 7d ec 00	 cmp	 DWORD PTR _hRsrc$[ebp], 0
  0829e	75 04		 jne	 SHORT $L200174
  082a0	33 c0		 xor	 eax, eax
  082a2	eb 68		 jmp	 SHORT $L200152
$L200174:

; 2726 : 
; 2727 : 	// determine how many colors in the bitmap
; 2728 : 	HGLOBAL hglb;
; 2729 : 	if ((hglb = LoadResource(hInst, hRsrc)) == NULL)

  082a4	8b 55 ec	 mov	 edx, DWORD PTR _hRsrc$[ebp]
  082a7	52		 push	 edx
  082a8	8b 45 f8	 mov	 eax, DWORD PTR _hInst$[ebp]
  082ab	50		 push	 eax
  082ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  082b2	89 45 f0	 mov	 DWORD PTR _hglb$[ebp], eax
  082b5	83 7d f0 00	 cmp	 DWORD PTR _hglb$[ebp], 0
  082b9	75 04		 jne	 SHORT $L200176

; 2730 : 		return NULL;

  082bb	33 c0		 xor	 eax, eax
  082bd	eb 4d		 jmp	 SHORT $L200152
$L200176:

; 2731 : 	LPBITMAPINFOHEADER lpBitmap = (LPBITMAPINFOHEADER)LockResource(hglb);

  082bf	8b 4d f0	 mov	 ecx, DWORD PTR _hglb$[ebp]
  082c2	51		 push	 ecx
  082c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  082c9	89 45 f4	 mov	 DWORD PTR _lpBitmap$[ebp], eax

; 2732 : 	if (lpBitmap == NULL)return NULL;

  082cc	83 7d f4 00	 cmp	 DWORD PTR _lpBitmap$[ebp], 0
  082d0	75 04		 jne	 SHORT $L200179
  082d2	33 c0		 xor	 eax, eax
  082d4	eb 36		 jmp	 SHORT $L200152
$L200179:

; 2733 : 	WORD numcol = NumBitmapColors(lpBitmap);

  082d6	8b 55 f4	 mov	 edx, DWORD PTR _lpBitmap$[ebp]
  082d9	52		 push	 edx
  082da	e8 00 00 00 00	 call	 ?NumBitmapColors@BCMenu@@KAGPAUtagBITMAPINFOHEADER@@@Z ; BCMenu::NumBitmapColors
  082df	83 c4 04	 add	 esp, 4
  082e2	66 89 45 fc	 mov	 WORD PTR _numcol$[ebp], ax

; 2734 : 	::FreeResource(hglb);

  082e6	8b 45 f0	 mov	 eax, DWORD PTR _hglb$[ebp]
  082e9	50		 push	 eax
  082ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4

; 2735 : 
; 2736 : 	if(numcol!=16)return(NULL);

  082f0	0f b7 4d fc	 movzx	 ecx, WORD PTR _numcol$[ebp]
  082f4	83 f9 10	 cmp	 ecx, 16			; 00000010H
  082f7	74 04		 je	 SHORT $L200181
  082f9	33 c0		 xor	 eax, eax
  082fb	eb 0f		 jmp	 SHORT $L200152
$L200181:

; 2737 : 
; 2738 : 	return AfxLoadSysColorBitmap(hInst, hRsrc, FALSE);

  082fd	6a 00		 push	 0
  082ff	8b 55 ec	 mov	 edx, DWORD PTR _hRsrc$[ebp]
  08302	52		 push	 edx
  08303	8b 45 f8	 mov	 eax, DWORD PTR _hInst$[ebp]
  08306	50		 push	 eax
  08307	e8 00 00 00 00	 call	 ?AfxLoadSysColorBitmap@@YGPAUHBITMAP__@@PAUHINSTANCE__@@PAUHRSRC__@@H@Z ; AfxLoadSysColorBitmap
$L200152:

; 2739 : }

  0830c	8b e5		 mov	 esp, ebp
  0830e	5d		 pop	 ebp
  0830f	c3		 ret	 0
?LoadSysColorBitmap@BCMenu@@SAPAUHBITMAP__@@H@Z ENDP	; BCMenu::LoadSysColorBitmap
_TEXT	ENDS
PUBLIC	?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
PUBLIC	?RemoveMenu@CMenu@@QAEHII@Z			; CMenu::RemoveMenu
PUBLIC	?RemoveMenu@BCMenu@@QAEHII@Z			; BCMenu::RemoveMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
tv226 = -104						; size = 4
tv214 = -100						; size = 4
tv147 = -96						; size = 4
tv82 = -92						; size = 4
_this$ = -88						; size = 4
$T203016 = -84						; size = 4
$T203015 = -80						; size = 4
$T203012 = -76						; size = 4
$T203011 = -72						; size = 4
$T203008 = -68						; size = 4
$T203007 = -64						; size = 4
$T203004 = -60						; size = 4
$T203003 = -56						; size = 4
_iPosition$200233 = -52					; size = 4
_pMenu$200234 = -48					; size = 4
_i$200222 = -44						; size = 4
_i$200218 = -40						; size = 4
_n$200212 = -36						; size = 4
_numAllSubMenus$200211 = -32				; size = 4
_m$200206 = -28						; size = 4
_num$200217 = -24					; size = 4
_numSubMenus$200205 = -20				; size = 4
_i$200197 = -16						; size = 4
_uiCommandId$200196 = -12				; size = 4
_pSubMenu$200193 = -8					; size = 4
_uint$200188 = -4					; size = 4
_uiId$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?RemoveMenu@BCMenu@@QAEHII@Z PROC NEAR			; BCMenu::RemoveMenu
; _this$ = ecx

; 2742 : {

  08310	55		 push	 ebp
  08311	8b ec		 mov	 ebp, esp
  08313	83 ec 68	 sub	 esp, 104		; 00000068H
  08316	56		 push	 esi
  08317	89 4d a8	 mov	 DWORD PTR _this$[ebp], ecx

; 2743 : 	if(MF_BYPOSITION&nFlags){

  0831a	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0831d	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  08322	0f 84 be 02 00
	00		 je	 $L200187

; 2744 : 		UINT uint = GetMenuState(uiId,MF_BYPOSITION);

  08328	68 00 04 00 00	 push	 1024			; 00000400H
  0832d	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  08330	51		 push	 ecx
  08331	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08334	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  08339	89 45 fc	 mov	 DWORD PTR _uint$200188[ebp], eax

; 2745 : 		if(uint&MF_SEPARATOR && !(uint&MF_POPUP)){

  0833c	8b 55 fc	 mov	 edx, DWORD PTR _uint$200188[ebp]
  0833f	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  08345	74 52		 je	 SHORT $L200189
  08347	8b 45 fc	 mov	 eax, DWORD PTR _uint$200188[ebp]
  0834a	83 e0 10	 and	 eax, 16			; 00000010H
  0834d	75 4a		 jne	 SHORT $L200189

; 2746 : 			delete m_MenuList.GetAt(uiId);

  0834f	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  08352	51		 push	 ecx
  08353	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08356	83 c1 08	 add	 ecx, 8
  08359	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0835e	89 45 c4	 mov	 DWORD PTR $T203004[ebp], eax
  08361	8b 55 c4	 mov	 edx, DWORD PTR $T203004[ebp]
  08364	89 55 c8	 mov	 DWORD PTR $T203003[ebp], edx
  08367	83 7d c8 00	 cmp	 DWORD PTR $T203003[ebp], 0
  0836b	74 0f		 je	 SHORT $L203005
  0836d	6a 01		 push	 1
  0836f	8b 4d c8	 mov	 ecx, DWORD PTR $T203003[ebp]
  08372	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  08377	89 45 a4	 mov	 DWORD PTR tv82[ebp], eax
  0837a	eb 07		 jmp	 SHORT $L203006
$L203005:
  0837c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L203006:

; 2747 : 			m_MenuList.RemoveAt(uiId);

  08383	6a 01		 push	 1
  08385	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  08388	50		 push	 eax
  08389	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  0838c	83 c1 08	 add	 ecx, 8
  0838f	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2748 : 		}
; 2749 : 		else{

  08394	e9 4b 02 00 00	 jmp	 $L200192
$L200189:

; 2750 : 			BCMenu* pSubMenu = (BCMenu*) GetSubMenu(uiId);

  08399	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0839c	51		 push	 ecx
  0839d	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  083a0	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  083a5	89 45 f8	 mov	 DWORD PTR _pSubMenu$200193[ebp], eax

; 2751 : 			if(NULL==pSubMenu){

  083a8	83 7d f8 00	 cmp	 DWORD PTR _pSubMenu$200193[ebp], 0
  083ac	0f 85 98 00 00
	00		 jne	 $L200195

; 2752 : 				UINT uiCommandId = GetMenuItemID(uiId);

  083b2	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  083b5	52		 push	 edx
  083b6	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  083b9	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  083be	89 45 f4	 mov	 DWORD PTR _uiCommandId$200196[ebp], eax

; 2753 : 				for(int i=0;i<m_MenuList.GetSize(); i++){

  083c1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$200197[ebp], 0
  083c8	eb 09		 jmp	 SHORT $L200198
$L200199:
  083ca	8b 45 f0	 mov	 eax, DWORD PTR _i$200197[ebp]
  083cd	83 c0 01	 add	 eax, 1
  083d0	89 45 f0	 mov	 DWORD PTR _i$200197[ebp], eax
$L200198:
  083d3	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  083d6	83 c1 08	 add	 ecx, 8
  083d9	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  083de	39 45 f0	 cmp	 DWORD PTR _i$200197[ebp], eax
  083e1	7d 62		 jge	 SHORT $L200200

; 2754 : 					if(m_MenuList[i]->nID==uiCommandId){

  083e3	8b 4d f0	 mov	 ecx, DWORD PTR _i$200197[ebp]
  083e6	51		 push	 ecx
  083e7	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  083ea	83 c1 08	 add	 ecx, 8
  083ed	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  083f2	8b 10		 mov	 edx, DWORD PTR [eax]
  083f4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  083f7	3b 45 f4	 cmp	 eax, DWORD PTR _uiCommandId$200196[ebp]
  083fa	75 47		 jne	 SHORT $L200201

; 2755 : 						delete m_MenuList.GetAt(i);

  083fc	8b 4d f0	 mov	 ecx, DWORD PTR _i$200197[ebp]
  083ff	51		 push	 ecx
  08400	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08403	83 c1 08	 add	 ecx, 8
  08406	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0840b	89 45 bc	 mov	 DWORD PTR $T203008[ebp], eax
  0840e	8b 55 bc	 mov	 edx, DWORD PTR $T203008[ebp]
  08411	89 55 c0	 mov	 DWORD PTR $T203007[ebp], edx
  08414	83 7d c0 00	 cmp	 DWORD PTR $T203007[ebp], 0
  08418	74 0f		 je	 SHORT $L203009
  0841a	6a 01		 push	 1
  0841c	8b 4d c0	 mov	 ecx, DWORD PTR $T203007[ebp]
  0841f	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  08424	89 45 a0	 mov	 DWORD PTR tv147[ebp], eax
  08427	eb 07		 jmp	 SHORT $L203010
$L203009:
  08429	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], 0
$L203010:

; 2756 : 						m_MenuList.RemoveAt(i);

  08430	6a 01		 push	 1
  08432	8b 45 f0	 mov	 eax, DWORD PTR _i$200197[ebp]
  08435	50		 push	 eax
  08436	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08439	83 c1 08	 add	 ecx, 8
  0843c	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2757 : 						break;

  08441	eb 02		 jmp	 SHORT $L200200
$L200201:

; 2758 : 					}
; 2759 : 				}

  08443	eb 85		 jmp	 SHORT $L200199
$L200200:

; 2760 : 			}
; 2761 : 			else{

  08445	e9 9a 01 00 00	 jmp	 $L200192
$L200195:

; 2762 : 				int numSubMenus = m_SubMenus.GetUpperBound();

  0844a	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  0844d	83 c1 1c	 add	 ecx, 28			; 0000001cH
  08450	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  08455	89 45 ec	 mov	 DWORD PTR _numSubMenus$200205[ebp], eax

; 2763 : 				for(int m = numSubMenus; m >= 0; m--){

  08458	8b 4d ec	 mov	 ecx, DWORD PTR _numSubMenus$200205[ebp]
  0845b	89 4d e4	 mov	 DWORD PTR _m$200206[ebp], ecx
  0845e	eb 09		 jmp	 SHORT $L200207
$L200208:
  08460	8b 55 e4	 mov	 edx, DWORD PTR _m$200206[ebp]
  08463	83 ea 01	 sub	 edx, 1
  08466	89 55 e4	 mov	 DWORD PTR _m$200206[ebp], edx
$L200207:
  08469	83 7d e4 00	 cmp	 DWORD PTR _m$200206[ebp], 0
  0846d	0f 8c 8a 00 00
	00		 jl	 $L200209

; 2764 : 					if(m_SubMenus[m]==pSubMenu->m_hMenu){

  08473	8b 45 e4	 mov	 eax, DWORD PTR _m$200206[ebp]
  08476	50		 push	 eax
  08477	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  0847a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0847d	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  08482	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMenu$200193[ebp]
  08485	8b 10		 mov	 edx, DWORD PTR [eax]
  08487	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0848a	75 6c		 jne	 SHORT $L200210

; 2765 : 						int numAllSubMenus = m_AllSubMenus.GetUpperBound();

  0848c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  08491	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  08496	89 45 e0	 mov	 DWORD PTR _numAllSubMenus$200211[ebp], eax

; 2766 : 						for(int n = numAllSubMenus; n>= 0; n--){

  08499	8b 45 e0	 mov	 eax, DWORD PTR _numAllSubMenus$200211[ebp]
  0849c	89 45 dc	 mov	 DWORD PTR _n$200212[ebp], eax
  0849f	eb 09		 jmp	 SHORT $L200213
$L200214:
  084a1	8b 4d dc	 mov	 ecx, DWORD PTR _n$200212[ebp]
  084a4	83 e9 01	 sub	 ecx, 1
  084a7	89 4d dc	 mov	 DWORD PTR _n$200212[ebp], ecx
$L200213:
  084aa	83 7d dc 00	 cmp	 DWORD PTR _n$200212[ebp], 0
  084ae	7c 37		 jl	 SHORT $L200215

; 2767 : 							if(m_AllSubMenus[n]==m_SubMenus[m])m_AllSubMenus.RemoveAt(n);

  084b0	8b 55 dc	 mov	 edx, DWORD PTR _n$200212[ebp]
  084b3	52		 push	 edx
  084b4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  084b9	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  084be	8b f0		 mov	 esi, eax
  084c0	8b 45 e4	 mov	 eax, DWORD PTR _m$200206[ebp]
  084c3	50		 push	 eax
  084c4	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  084c7	83 c1 1c	 add	 ecx, 28			; 0000001cH
  084ca	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  084cf	8b 0e		 mov	 ecx, DWORD PTR [esi]
  084d1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  084d3	75 10		 jne	 SHORT $L200216
  084d5	6a 01		 push	 1
  084d7	8b 55 dc	 mov	 edx, DWORD PTR _n$200212[ebp]
  084da	52		 push	 edx
  084db	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  084e0	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L200216:

; 2768 : 						}

  084e5	eb ba		 jmp	 SHORT $L200214
$L200215:

; 2769 : 						m_SubMenus.RemoveAt(m);

  084e7	6a 01		 push	 1
  084e9	8b 45 e4	 mov	 eax, DWORD PTR _m$200206[ebp]
  084ec	50		 push	 eax
  084ed	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  084f0	83 c1 1c	 add	 ecx, 28			; 0000001cH
  084f3	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L200210:

; 2770 : 					}
; 2771 : 				}

  084f8	e9 63 ff ff ff	 jmp	 $L200208
$L200209:

; 2772 : 				int num = pSubMenu->GetMenuItemCount();

  084fd	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMenu$200193[ebp]
  08500	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  08505	89 45 e8	 mov	 DWORD PTR _num$200217[ebp], eax

; 2773 : 				for(int i = num-1;i >= 0; --i)

  08508	8b 4d e8	 mov	 ecx, DWORD PTR _num$200217[ebp]
  0850b	83 e9 01	 sub	 ecx, 1
  0850e	89 4d d8	 mov	 DWORD PTR _i$200218[ebp], ecx
  08511	eb 09		 jmp	 SHORT $L200219
$L200220:
  08513	8b 55 d8	 mov	 edx, DWORD PTR _i$200218[ebp]
  08516	83 ea 01	 sub	 edx, 1
  08519	89 55 d8	 mov	 DWORD PTR _i$200218[ebp], edx
$L200219:
  0851c	83 7d d8 00	 cmp	 DWORD PTR _i$200218[ebp], 0
  08520	7c 13		 jl	 SHORT $L200221

; 2774 : 					pSubMenu->RemoveMenu(i,MF_BYPOSITION);

  08522	68 00 04 00 00	 push	 1024			; 00000400H
  08527	8b 45 d8	 mov	 eax, DWORD PTR _i$200218[ebp]
  0852a	50		 push	 eax
  0852b	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMenu$200193[ebp]
  0852e	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
  08533	eb de		 jmp	 SHORT $L200220
$L200221:

; 2775 : 				for(int i = m_MenuList.GetUpperBound();i >= 0;i--){

  08535	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08538	83 c1 08	 add	 ecx, 8
  0853b	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  08540	89 45 d4	 mov	 DWORD PTR _i$200222[ebp], eax
  08543	eb 09		 jmp	 SHORT $L200223
$L200224:
  08545	8b 4d d4	 mov	 ecx, DWORD PTR _i$200222[ebp]
  08548	83 e9 01	 sub	 ecx, 1
  0854b	89 4d d4	 mov	 DWORD PTR _i$200222[ebp], ecx
$L200223:
  0854e	83 7d d4 00	 cmp	 DWORD PTR _i$200222[ebp], 0
  08552	7c 65		 jl	 SHORT $L200225

; 2776 : 					if(m_MenuList[i]->nID==(UINT)pSubMenu->m_hMenu){

  08554	8b 55 d4	 mov	 edx, DWORD PTR _i$200222[ebp]
  08557	52		 push	 edx
  08558	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  0855b	83 c1 08	 add	 ecx, 8
  0855e	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  08563	8b 00		 mov	 eax, DWORD PTR [eax]
  08565	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMenu$200193[ebp]
  08568	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0856b	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0856e	75 47		 jne	 SHORT $L200227

; 2777 : 						delete m_MenuList.GetAt(i);

  08570	8b 45 d4	 mov	 eax, DWORD PTR _i$200222[ebp]
  08573	50		 push	 eax
  08574	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08577	83 c1 08	 add	 ecx, 8
  0857a	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0857f	89 45 b4	 mov	 DWORD PTR $T203012[ebp], eax
  08582	8b 4d b4	 mov	 ecx, DWORD PTR $T203012[ebp]
  08585	89 4d b8	 mov	 DWORD PTR $T203011[ebp], ecx
  08588	83 7d b8 00	 cmp	 DWORD PTR $T203011[ebp], 0
  0858c	74 0f		 je	 SHORT $L203013
  0858e	6a 01		 push	 1
  08590	8b 4d b8	 mov	 ecx, DWORD PTR $T203011[ebp]
  08593	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  08598	89 45 9c	 mov	 DWORD PTR tv214[ebp], eax
  0859b	eb 07		 jmp	 SHORT $L203014
$L203013:
  0859d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$L203014:

; 2778 : 						m_MenuList.RemoveAt(i);

  085a4	6a 01		 push	 1
  085a6	8b 55 d4	 mov	 edx, DWORD PTR _i$200222[ebp]
  085a9	52		 push	 edx
  085aa	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  085ad	83 c1 08	 add	 ecx, 8
  085b0	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2779 : 						break;

  085b5	eb 02		 jmp	 SHORT $L200225
$L200227:

; 2780 : 					}
; 2781 : 				}

  085b7	eb 8c		 jmp	 SHORT $L200224
$L200225:

; 2782 : 				delete pSubMenu; 

  085b9	8b 45 f8	 mov	 eax, DWORD PTR _pSubMenu$200193[ebp]
  085bc	89 45 ac	 mov	 DWORD PTR $T203016[ebp], eax
  085bf	8b 4d ac	 mov	 ecx, DWORD PTR $T203016[ebp]
  085c2	89 4d b0	 mov	 DWORD PTR $T203015[ebp], ecx
  085c5	83 7d b0 00	 cmp	 DWORD PTR $T203015[ebp], 0
  085c9	74 12		 je	 SHORT $L203017
  085cb	6a 01		 push	 1
  085cd	8b 55 b0	 mov	 edx, DWORD PTR $T203015[ebp]
  085d0	8b 02		 mov	 eax, DWORD PTR [edx]
  085d2	8b 4d b0	 mov	 ecx, DWORD PTR $T203015[ebp]
  085d5	ff 50 04	 call	 DWORD PTR [eax+4]
  085d8	89 45 98	 mov	 DWORD PTR tv226[ebp], eax
  085db	eb 07		 jmp	 SHORT $L200192
$L203017:
  085dd	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$L200192:

; 2783 : 			}
; 2784 : 		}
; 2785 : 	}
; 2786 : 	else{

  085e4	eb 33		 jmp	 SHORT $L200232
$L200187:

; 2787 : 		int iPosition =0;

  085e6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _iPosition$200233[ebp], 0

; 2788 : 		BCMenu* pMenu = FindMenuOption(uiId,iPosition);

  085ed	8d 4d cc	 lea	 ecx, DWORD PTR _iPosition$200233[ebp]
  085f0	51		 push	 ecx
  085f1	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  085f4	52		 push	 edx
  085f5	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  085f8	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  085fd	89 45 d0	 mov	 DWORD PTR _pMenu$200234[ebp], eax

; 2789 : 		// bug fix RIA 14th September 2000 
; 2790 : 		// failed to return correct value on call to remove menu as the item was 
; 2791 : 		// removed twice. The second time its not found 
; 2792 : 		// so a value of 0 was being returned 
; 2793 : 		if(pMenu) return pMenu->RemoveMenu(iPosition,MF_BYPOSITION); // added return 

  08600	83 7d d0 00	 cmp	 DWORD PTR _pMenu$200234[ebp], 0
  08604	74 13		 je	 SHORT $L200232
  08606	68 00 04 00 00	 push	 1024			; 00000400H
  0860b	8b 45 cc	 mov	 eax, DWORD PTR _iPosition$200233[ebp]
  0860e	50		 push	 eax
  0860f	8b 4d d0	 mov	 ecx, DWORD PTR _pMenu$200234[ebp]
  08612	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
  08617	eb 10		 jmp	 SHORT $L200186
$L200232:

; 2794 : 	}
; 2795 : 	return CMenu::RemoveMenu(uiId,nFlags);

  08619	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  0861c	51		 push	 ecx
  0861d	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  08620	52		 push	 edx
  08621	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  08624	e8 00 00 00 00	 call	 ?RemoveMenu@CMenu@@QAEHII@Z ; CMenu::RemoveMenu
$L200186:

; 2796 : }

  08629	5e		 pop	 esi
  0862a	8b e5		 mov	 esp, ebp
  0862c	5d		 pop	 ebp
  0862d	c2 08 00	 ret	 8
?RemoveMenu@BCMenu@@QAEHII@Z ENDP			; BCMenu::RemoveMenu
_TEXT	ENDS
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ; ATL::operator==
PUBLIC	?DeleteMenu@CMenu@@QAEHII@Z			; CMenu::DeleteMenu
PUBLIC	?DeleteMenu@BCMenu@@QAEHII@Z			; BCMenu::DeleteMenu
xdata$x	SEGMENT
$T203040 DD	0ffffffffH
	DD	FLAT:$L203036
$T203038 DD	019930520H
	DD	01H
	DD	FLAT:$T203040
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv245 = -124						; size = 4
tv233 = -120						; size = 4
tv166 = -116						; size = 4
tv133 = -112						; size = 4
_this$ = -108						; size = 4
$T203033 = -104						; size = 4
$T203032 = -100						; size = 4
$T203029 = -96						; size = 4
$T203028 = -92						; size = 4
$T203025 = -88						; size = 4
$T203024 = -84						; size = 4
$T203021 = -80						; size = 4
$T203020 = -76						; size = 4
_iPosition$200294 = -72					; size = 4
_pMenu$200295 = -68					; size = 4
_i$200283 = -64						; size = 4
_i$200279 = -60						; size = 4
_n$200273 = -56						; size = 4
_numAllSubMenus$200272 = -52				; size = 4
_m$200267 = -48						; size = 4
_num$200278 = -44					; size = 4
_numSubMenus$200266 = -40				; size = 4
_i$200258 = -36						; size = 4
_uiCommandId$200257 = -32				; size = 4
_pSubMenu$200254 = -28					; size = 4
_str$200247 = -24					; size = 4
_menulistsize$200244 = -20				; size = 4
_uint$200242 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_uiId$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?DeleteMenu@BCMenu@@QAEHII@Z PROC NEAR			; BCMenu::DeleteMenu
; _this$ = ecx

; 2799 : {

  08630	55		 push	 ebp
  08631	8b ec		 mov	 ebp, esp
  08633	6a ff		 push	 -1
  08635	68 00 00 00 00	 push	 __ehhandler$?DeleteMenu@BCMenu@@QAEHII@Z
  0863a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08640	50		 push	 eax
  08641	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08648	83 ec 70	 sub	 esp, 112		; 00000070H
  0864b	56		 push	 esi
  0864c	89 4d 94	 mov	 DWORD PTR _this$[ebp], ecx

; 2800 : 	if(MF_BYPOSITION&nFlags){

  0864f	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08652	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  08657	0f 84 29 03 00
	00		 je	 $L200241

; 2801 : 		UINT uint = GetMenuState(uiId,MF_BYPOSITION);

  0865d	68 00 04 00 00	 push	 1024			; 00000400H
  08662	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  08665	51		 push	 ecx
  08666	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08669	e8 00 00 00 00	 call	 ?GetMenuState@CMenu@@QBEIII@Z ; CMenu::GetMenuState
  0866e	89 45 f0	 mov	 DWORD PTR _uint$200242[ebp], eax

; 2802 : 		if(uint&MF_SEPARATOR && !(uint&MF_POPUP)){

  08671	8b 55 f0	 mov	 edx, DWORD PTR _uint$200242[ebp]
  08674	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  0867a	0f 84 b9 00 00
	00		 je	 $L200243
  08680	8b 45 f0	 mov	 eax, DWORD PTR _uint$200242[ebp]
  08683	83 e0 10	 and	 eax, 16			; 00000010H
  08686	0f 85 ad 00 00
	00		 jne	 $L200243

; 2803 : 			// make sure it's a separator
; 2804 : 			int menulistsize=m_MenuList.GetSize();	

  0868c	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0868f	83 c1 08	 add	 ecx, 8
  08692	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  08697	89 45 ec	 mov	 DWORD PTR _menulistsize$200244[ebp], eax

; 2805 : 			if(uiId<(UINT)menulistsize){

  0869a	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  0869d	3b 4d ec	 cmp	 ecx, DWORD PTR _menulistsize$200244[ebp]
  086a0	0f 83 8e 00 00
	00		 jae	 $L200246

; 2806 : 				CString str=m_MenuList[uiId]->GetString();

  086a6	8d 55 e8	 lea	 edx, DWORD PTR _str$200247[ebp]
  086a9	52		 push	 edx
  086aa	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  086ad	50		 push	 eax
  086ae	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  086b1	83 c1 08	 add	 ecx, 8
  086b4	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  086b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  086bb	e8 00 00 00 00	 call	 ?GetString@BCMenuData@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; BCMenuData::GetString
  086c0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2807 : 				if(str==""){

  086c7	68 00 00 00 00	 push	 OFFSET FLAT:$SG200250
  086cc	8d 4d e8	 lea	 ecx, DWORD PTR _str$200247[ebp]
  086cf	51		 push	 ecx
  086d0	e8 00 00 00 00	 call	 ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ; ATL::operator==
  086d5	83 c4 08	 add	 esp, 8
  086d8	0f b6 d0	 movzx	 edx, al
  086db	85 d2		 test	 edx, edx
  086dd	74 45		 je	 SHORT $L200249

; 2808 : 					delete m_MenuList.GetAt(uiId);

  086df	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  086e2	50		 push	 eax
  086e3	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  086e6	83 c1 08	 add	 ecx, 8
  086e9	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  086ee	89 45 b0	 mov	 DWORD PTR $T203021[ebp], eax
  086f1	8b 4d b0	 mov	 ecx, DWORD PTR $T203021[ebp]
  086f4	89 4d b4	 mov	 DWORD PTR $T203020[ebp], ecx
  086f7	83 7d b4 00	 cmp	 DWORD PTR $T203020[ebp], 0
  086fb	74 0f		 je	 SHORT $L203022
  086fd	6a 01		 push	 1
  086ff	8b 4d b4	 mov	 ecx, DWORD PTR $T203020[ebp]
  08702	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  08707	89 45 90	 mov	 DWORD PTR tv133[ebp], eax
  0870a	eb 07		 jmp	 SHORT $L203023
$L203022:
  0870c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L203023:

; 2809 : 					m_MenuList.RemoveAt(uiId);

  08713	6a 01		 push	 1
  08715	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  08718	52		 push	 edx
  08719	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0871c	83 c1 08	 add	 ecx, 8
  0871f	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L200249:

; 2810 : 				}
; 2811 : 			}

  08724	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0872b	8d 4d e8	 lea	 ecx, DWORD PTR _str$200247[ebp]
  0872e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L200246:

; 2812 : 		}
; 2813 : 		else{

  08734	e9 4b 02 00 00	 jmp	 $L200253
$L200243:

; 2814 : 			BCMenu* pSubMenu = (BCMenu*) GetSubMenu(uiId);

  08739	8b 45 08	 mov	 eax, DWORD PTR _uiId$[ebp]
  0873c	50		 push	 eax
  0873d	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08740	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  08745	89 45 e4	 mov	 DWORD PTR _pSubMenu$200254[ebp], eax

; 2815 : 			if(NULL==pSubMenu){

  08748	83 7d e4 00	 cmp	 DWORD PTR _pSubMenu$200254[ebp], 0
  0874c	0f 85 98 00 00
	00		 jne	 $L200256

; 2816 : 				UINT uiCommandId = GetMenuItemID(uiId);

  08752	8b 4d 08	 mov	 ecx, DWORD PTR _uiId$[ebp]
  08755	51		 push	 ecx
  08756	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08759	e8 00 00 00 00	 call	 ?GetMenuItemID@CMenu@@QBEIH@Z ; CMenu::GetMenuItemID
  0875e	89 45 e0	 mov	 DWORD PTR _uiCommandId$200257[ebp], eax

; 2817 : 				for(int i=0;i<m_MenuList.GetSize(); i++){

  08761	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$200258[ebp], 0
  08768	eb 09		 jmp	 SHORT $L200259
$L200260:
  0876a	8b 55 dc	 mov	 edx, DWORD PTR _i$200258[ebp]
  0876d	83 c2 01	 add	 edx, 1
  08770	89 55 dc	 mov	 DWORD PTR _i$200258[ebp], edx
$L200259:
  08773	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08776	83 c1 08	 add	 ecx, 8
  08779	e8 00 00 00 00	 call	 ?GetSize@CPtrArray@@QBEHXZ ; CPtrArray::GetSize
  0877e	39 45 dc	 cmp	 DWORD PTR _i$200258[ebp], eax
  08781	7d 62		 jge	 SHORT $L200261

; 2818 : 					if(m_MenuList[i]->nID==uiCommandId){

  08783	8b 45 dc	 mov	 eax, DWORD PTR _i$200258[ebp]
  08786	50		 push	 eax
  08787	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0878a	83 c1 08	 add	 ecx, 8
  0878d	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  08792	8b 08		 mov	 ecx, DWORD PTR [eax]
  08794	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  08797	3b 55 e0	 cmp	 edx, DWORD PTR _uiCommandId$200257[ebp]
  0879a	75 47		 jne	 SHORT $L200262

; 2819 : 						delete m_MenuList.GetAt(i);

  0879c	8b 45 dc	 mov	 eax, DWORD PTR _i$200258[ebp]
  0879f	50		 push	 eax
  087a0	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  087a3	83 c1 08	 add	 ecx, 8
  087a6	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  087ab	89 45 a8	 mov	 DWORD PTR $T203025[ebp], eax
  087ae	8b 4d a8	 mov	 ecx, DWORD PTR $T203025[ebp]
  087b1	89 4d ac	 mov	 DWORD PTR $T203024[ebp], ecx
  087b4	83 7d ac 00	 cmp	 DWORD PTR $T203024[ebp], 0
  087b8	74 0f		 je	 SHORT $L203026
  087ba	6a 01		 push	 1
  087bc	8b 4d ac	 mov	 ecx, DWORD PTR $T203024[ebp]
  087bf	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  087c4	89 45 8c	 mov	 DWORD PTR tv166[ebp], eax
  087c7	eb 07		 jmp	 SHORT $L203027
$L203026:
  087c9	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$L203027:

; 2820 : 						m_MenuList.RemoveAt(i);

  087d0	6a 01		 push	 1
  087d2	8b 55 dc	 mov	 edx, DWORD PTR _i$200258[ebp]
  087d5	52		 push	 edx
  087d6	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  087d9	83 c1 08	 add	 ecx, 8
  087dc	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2821 : 						break;

  087e1	eb 02		 jmp	 SHORT $L200261
$L200262:

; 2822 : 					}
; 2823 : 				}

  087e3	eb 85		 jmp	 SHORT $L200260
$L200261:

; 2824 : 			}
; 2825 : 			else{

  087e5	e9 9a 01 00 00	 jmp	 $L200253
$L200256:

; 2826 : 				int numSubMenus = m_SubMenus.GetUpperBound();

  087ea	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  087ed	83 c1 1c	 add	 ecx, 28			; 0000001cH
  087f0	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  087f5	89 45 d8	 mov	 DWORD PTR _numSubMenus$200266[ebp], eax

; 2827 : 				for(int m = numSubMenus; m >= 0; m--){

  087f8	8b 45 d8	 mov	 eax, DWORD PTR _numSubMenus$200266[ebp]
  087fb	89 45 d0	 mov	 DWORD PTR _m$200267[ebp], eax
  087fe	eb 09		 jmp	 SHORT $L200268
$L200269:
  08800	8b 4d d0	 mov	 ecx, DWORD PTR _m$200267[ebp]
  08803	83 e9 01	 sub	 ecx, 1
  08806	89 4d d0	 mov	 DWORD PTR _m$200267[ebp], ecx
$L200268:
  08809	83 7d d0 00	 cmp	 DWORD PTR _m$200267[ebp], 0
  0880d	0f 8c 8a 00 00
	00		 jl	 $L200270

; 2828 : 					if(m_SubMenus[m]==pSubMenu->m_hMenu){

  08813	8b 55 d0	 mov	 edx, DWORD PTR _m$200267[ebp]
  08816	52		 push	 edx
  08817	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0881a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0881d	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  08822	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMenu$200254[ebp]
  08825	8b 10		 mov	 edx, DWORD PTR [eax]
  08827	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0882a	75 6c		 jne	 SHORT $L200271

; 2829 : 						int numAllSubMenus = m_AllSubMenus.GetUpperBound();

  0882c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  08831	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  08836	89 45 cc	 mov	 DWORD PTR _numAllSubMenus$200272[ebp], eax

; 2830 : 						for(int n = numAllSubMenus; n>= 0; n--){

  08839	8b 45 cc	 mov	 eax, DWORD PTR _numAllSubMenus$200272[ebp]
  0883c	89 45 c8	 mov	 DWORD PTR _n$200273[ebp], eax
  0883f	eb 09		 jmp	 SHORT $L200274
$L200275:
  08841	8b 4d c8	 mov	 ecx, DWORD PTR _n$200273[ebp]
  08844	83 e9 01	 sub	 ecx, 1
  08847	89 4d c8	 mov	 DWORD PTR _n$200273[ebp], ecx
$L200274:
  0884a	83 7d c8 00	 cmp	 DWORD PTR _n$200273[ebp], 0
  0884e	7c 37		 jl	 SHORT $L200276

; 2831 : 							if(m_AllSubMenus[n]==m_SubMenus[m])m_AllSubMenus.RemoveAt(n);

  08850	8b 55 c8	 mov	 edx, DWORD PTR _n$200273[ebp]
  08853	52		 push	 edx
  08854	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  08859	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0885e	8b f0		 mov	 esi, eax
  08860	8b 45 d0	 mov	 eax, DWORD PTR _m$200267[ebp]
  08863	50		 push	 eax
  08864	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08867	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0886a	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
  0886f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  08871	3b 08		 cmp	 ecx, DWORD PTR [eax]
  08873	75 10		 jne	 SHORT $L200277
  08875	6a 01		 push	 1
  08877	8b 55 c8	 mov	 edx, DWORD PTR _n$200273[ebp]
  0887a	52		 push	 edx
  0887b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  08880	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L200277:

; 2832 : 						}

  08885	eb ba		 jmp	 SHORT $L200275
$L200276:

; 2833 : 						m_SubMenus.RemoveAt(m);

  08887	6a 01		 push	 1
  08889	8b 45 d0	 mov	 eax, DWORD PTR _m$200267[ebp]
  0888c	50		 push	 eax
  0888d	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08890	83 c1 1c	 add	 ecx, 28			; 0000001cH
  08893	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt
$L200271:

; 2834 : 					}
; 2835 : 				}

  08898	e9 63 ff ff ff	 jmp	 $L200269
$L200270:

; 2836 : 				int num = pSubMenu->GetMenuItemCount();

  0889d	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMenu$200254[ebp]
  088a0	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  088a5	89 45 d4	 mov	 DWORD PTR _num$200278[ebp], eax

; 2837 : 				for(int i=num-1;i>=0;--i)

  088a8	8b 4d d4	 mov	 ecx, DWORD PTR _num$200278[ebp]
  088ab	83 e9 01	 sub	 ecx, 1
  088ae	89 4d c4	 mov	 DWORD PTR _i$200279[ebp], ecx
  088b1	eb 09		 jmp	 SHORT $L200280
$L200281:
  088b3	8b 55 c4	 mov	 edx, DWORD PTR _i$200279[ebp]
  088b6	83 ea 01	 sub	 edx, 1
  088b9	89 55 c4	 mov	 DWORD PTR _i$200279[ebp], edx
$L200280:
  088bc	83 7d c4 00	 cmp	 DWORD PTR _i$200279[ebp], 0
  088c0	7c 13		 jl	 SHORT $L200282

; 2838 : 					pSubMenu->DeleteMenu(i,MF_BYPOSITION);

  088c2	68 00 04 00 00	 push	 1024			; 00000400H
  088c7	8b 45 c4	 mov	 eax, DWORD PTR _i$200279[ebp]
  088ca	50		 push	 eax
  088cb	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMenu$200254[ebp]
  088ce	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
  088d3	eb de		 jmp	 SHORT $L200281
$L200282:

; 2839 : 				for(int i = m_MenuList.GetUpperBound();i>=0;i--){

  088d5	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  088d8	83 c1 08	 add	 ecx, 8
  088db	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  088e0	89 45 c0	 mov	 DWORD PTR _i$200283[ebp], eax
  088e3	eb 09		 jmp	 SHORT $L200284
$L200285:
  088e5	8b 4d c0	 mov	 ecx, DWORD PTR _i$200283[ebp]
  088e8	83 e9 01	 sub	 ecx, 1
  088eb	89 4d c0	 mov	 DWORD PTR _i$200283[ebp], ecx
$L200284:
  088ee	83 7d c0 00	 cmp	 DWORD PTR _i$200283[ebp], 0
  088f2	7c 65		 jl	 SHORT $L200286

; 2840 : 					if(m_MenuList[i]->nID==(UINT)pSubMenu->m_hMenu){

  088f4	8b 55 c0	 mov	 edx, DWORD PTR _i$200283[ebp]
  088f7	52		 push	 edx
  088f8	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  088fb	83 c1 08	 add	 ecx, 8
  088fe	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  08903	8b 00		 mov	 eax, DWORD PTR [eax]
  08905	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMenu$200254[ebp]
  08908	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0890b	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0890e	75 47		 jne	 SHORT $L200288

; 2841 : 						delete m_MenuList.GetAt(i);

  08910	8b 45 c0	 mov	 eax, DWORD PTR _i$200283[ebp]
  08913	50		 push	 eax
  08914	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08917	83 c1 08	 add	 ecx, 8
  0891a	e8 00 00 00 00	 call	 ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
  0891f	89 45 a0	 mov	 DWORD PTR $T203029[ebp], eax
  08922	8b 4d a0	 mov	 ecx, DWORD PTR $T203029[ebp]
  08925	89 4d a4	 mov	 DWORD PTR $T203028[ebp], ecx
  08928	83 7d a4 00	 cmp	 DWORD PTR $T203028[ebp], 0
  0892c	74 0f		 je	 SHORT $L203030
  0892e	6a 01		 push	 1
  08930	8b 4d a4	 mov	 ecx, DWORD PTR $T203028[ebp]
  08933	e8 00 00 00 00	 call	 ??_GBCMenuData@@QAEPAXI@Z
  08938	89 45 88	 mov	 DWORD PTR tv233[ebp], eax
  0893b	eb 07		 jmp	 SHORT $L203031
$L203030:
  0893d	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], 0
$L203031:

; 2842 : 						m_MenuList.RemoveAt(i);

  08944	6a 01		 push	 1
  08946	8b 55 c0	 mov	 edx, DWORD PTR _i$200283[ebp]
  08949	52		 push	 edx
  0894a	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0894d	83 c1 08	 add	 ecx, 8
  08950	e8 00 00 00 00	 call	 ?RemoveAt@CPtrArray@@QAEXHH@Z ; CPtrArray::RemoveAt

; 2843 : 						break;

  08955	eb 02		 jmp	 SHORT $L200286
$L200288:

; 2844 : 					}
; 2845 : 				}

  08957	eb 8c		 jmp	 SHORT $L200285
$L200286:

; 2846 : 				delete pSubMenu;

  08959	8b 45 e4	 mov	 eax, DWORD PTR _pSubMenu$200254[ebp]
  0895c	89 45 98	 mov	 DWORD PTR $T203033[ebp], eax
  0895f	8b 4d 98	 mov	 ecx, DWORD PTR $T203033[ebp]
  08962	89 4d 9c	 mov	 DWORD PTR $T203032[ebp], ecx
  08965	83 7d 9c 00	 cmp	 DWORD PTR $T203032[ebp], 0
  08969	74 12		 je	 SHORT $L203034
  0896b	6a 01		 push	 1
  0896d	8b 55 9c	 mov	 edx, DWORD PTR $T203032[ebp]
  08970	8b 02		 mov	 eax, DWORD PTR [edx]
  08972	8b 4d 9c	 mov	 ecx, DWORD PTR $T203032[ebp]
  08975	ff 50 04	 call	 DWORD PTR [eax+4]
  08978	89 45 84	 mov	 DWORD PTR tv245[ebp], eax
  0897b	eb 07		 jmp	 SHORT $L200253
$L203034:
  0897d	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$L200253:

; 2847 : 			}
; 2848 : 		}
; 2849 : 	}
; 2850 : 	else{

  08984	eb 33		 jmp	 SHORT $L200293
$L200241:

; 2851 : 		int iPosition =0;

  08986	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iPosition$200294[ebp], 0

; 2852 : 		BCMenu* pMenu = FindMenuOption(uiId,iPosition);

  0898d	8d 4d b8	 lea	 ecx, DWORD PTR _iPosition$200294[ebp]
  08990	51		 push	 ecx
  08991	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  08994	52		 push	 edx
  08995	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  08998	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  0899d	89 45 bc	 mov	 DWORD PTR _pMenu$200295[ebp], eax

; 2853 : 		if(pMenu)return pMenu->DeleteMenu(iPosition,MF_BYPOSITION);

  089a0	83 7d bc 00	 cmp	 DWORD PTR _pMenu$200295[ebp], 0
  089a4	74 13		 je	 SHORT $L200293
  089a6	68 00 04 00 00	 push	 1024			; 00000400H
  089ab	8b 45 b8	 mov	 eax, DWORD PTR _iPosition$200294[ebp]
  089ae	50		 push	 eax
  089af	8b 4d bc	 mov	 ecx, DWORD PTR _pMenu$200295[ebp]
  089b2	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
  089b7	eb 10		 jmp	 SHORT $L200240
$L200293:

; 2854 : 	}
; 2855 : 
; 2856 : 	return(CMenu::DeleteMenu(uiId,nFlags));

  089b9	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  089bc	51		 push	 ecx
  089bd	8b 55 08	 mov	 edx, DWORD PTR _uiId$[ebp]
  089c0	52		 push	 edx
  089c1	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  089c4	e8 00 00 00 00	 call	 ?DeleteMenu@CMenu@@QAEHII@Z ; CMenu::DeleteMenu
$L200240:

; 2857 : }

  089c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  089cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  089d3	5e		 pop	 esi
  089d4	8b e5		 mov	 esp, ebp
  089d6	5d		 pop	 ebp
  089d7	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L203036:
  005de	8d 4d e8	 lea	 ecx, DWORD PTR _str$200247[ebp]
  005e1	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?DeleteMenu@BCMenu@@QAEHII@Z:
  005e7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203038
  005ec	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DeleteMenu@BCMenu@@QAEHII@Z ENDP			; BCMenu::DeleteMenu
PUBLIC	?AppendMenuA@BCMenu@@QAEHIIPBDH@Z		; BCMenu::AppendMenuA
PUBLIC	?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z		; BCMenu::AppendMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203043 = -20						; size = 4
$T203042 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_nIconNormal$ = 20					; size = 4
?AppendMenuA@BCMenu@@QAEHIIPBDH@Z PROC NEAR		; BCMenu::AppendMenuA
; _this$ = ecx

; 2861 : {

  089e0	55		 push	 ebp
  089e1	8b ec		 mov	 ebp, esp
  089e3	83 ec 18	 sub	 esp, 24			; 00000018H
  089e6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2862 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  089e9	6a 00		 push	 0
  089eb	6a 00		 push	 0
  089ed	6a ff		 push	 -1
  089ef	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  089f2	50		 push	 eax
  089f3	6a 00		 push	 0
  089f5	6a 00		 push	 0
  089f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  089fd	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 2863 : 	wchar_t* wszUtf8 = new wchar_t[len];

  08a00	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  08a03	d1 e1		 shl	 ecx, 1
  08a05	51		 push	 ecx
  08a06	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  08a0b	83 c4 04	 add	 esp, 4
  08a0e	89 45 f0	 mov	 DWORD PTR $T203042[ebp], eax
  08a11	8b 55 f0	 mov	 edx, DWORD PTR $T203042[ebp]
  08a14	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2864 : 	memset(wszUtf8, 0, len * 2);

  08a17	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  08a1a	d1 e0		 shl	 eax, 1
  08a1c	50		 push	 eax
  08a1d	6a 00		 push	 0
  08a1f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08a22	51		 push	 ecx
  08a23	e8 00 00 00 00	 call	 _memset
  08a28	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2865 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  08a2b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  08a2e	52		 push	 edx
  08a2f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08a32	50		 push	 eax
  08a33	6a ff		 push	 -1
  08a35	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08a38	51		 push	 ecx
  08a39	6a 00		 push	 0
  08a3b	6a 00		 push	 0
  08a3d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 2866 : 
; 2867 : 	BOOL bRet = AppendMenuW(nFlags,nIDNewItem,wszUtf8,nIconNormal);

  08a43	8b 55 14	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  08a46	52		 push	 edx
  08a47	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08a4a	50		 push	 eax
  08a4b	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  08a4e	51		 push	 ecx
  08a4f	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  08a52	52		 push	 edx
  08a53	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  08a56	e8 00 00 00 00	 call	 ?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z ; BCMenu::AppendMenuW
  08a5b	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 2868 : 	delete[] wszUtf8;

  08a5e	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08a61	89 45 ec	 mov	 DWORD PTR $T203043[ebp], eax
  08a64	8b 4d ec	 mov	 ecx, DWORD PTR $T203043[ebp]
  08a67	51		 push	 ecx
  08a68	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  08a6d	83 c4 04	 add	 esp, 4

; 2869 : 
; 2870 : 	return bRet;

  08a70	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2871 : }

  08a73	8b e5		 mov	 esp, ebp
  08a75	5d		 pop	 ebp
  08a76	c2 10 00	 ret	 16			; 00000010H
?AppendMenuA@BCMenu@@QAEHIIPBDH@Z ENDP			; BCMenu::AppendMenuA
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_nIconNormal$ = 20					; size = 4
?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z PROC NEAR		; BCMenu::AppendMenuW
; _this$ = ecx

; 2874 : {

  08a80	55		 push	 ebp
  08a81	8b ec		 mov	 ebp, esp
  08a83	51		 push	 ecx
  08a84	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2875 : 	return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,nIconNormal);

  08a87	8b 45 14	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  08a8a	50		 push	 eax
  08a8b	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  08a8e	51		 push	 ecx
  08a8f	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  08a92	52		 push	 edx
  08a93	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08a96	50		 push	 eax
  08a97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08a9a	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 2876 : }

  08a9f	8b e5		 mov	 esp, ebp
  08aa1	5d		 pop	 ebp
  08aa2	c2 10 00	 ret	 16			; 00000010H
?AppendMenuW@BCMenu@@QAEHIIPA_WH@Z ENDP			; BCMenu::AppendMenuW
_TEXT	ENDS
PUBLIC	?AppendMenuA@BCMenu@@QAEHIIPBDPAVCImageList@@H@Z ; BCMenu::AppendMenuA
PUBLIC	?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z ; BCMenu::AppendMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203047 = -20						; size = 4
$T203046 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendMenuA
; _this$ = ecx

; 2879 : {

  08ab0	55		 push	 ebp
  08ab1	8b ec		 mov	 ebp, esp
  08ab3	83 ec 18	 sub	 esp, 24			; 00000018H
  08ab6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2880 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  08ab9	6a 00		 push	 0
  08abb	6a 00		 push	 0
  08abd	6a ff		 push	 -1
  08abf	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08ac2	50		 push	 eax
  08ac3	6a 00		 push	 0
  08ac5	6a 00		 push	 0
  08ac7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  08acd	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 2881 : 	wchar_t* wszUtf8 = new wchar_t[len];

  08ad0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  08ad3	d1 e1		 shl	 ecx, 1
  08ad5	51		 push	 ecx
  08ad6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  08adb	83 c4 04	 add	 esp, 4
  08ade	89 45 f0	 mov	 DWORD PTR $T203046[ebp], eax
  08ae1	8b 55 f0	 mov	 edx, DWORD PTR $T203046[ebp]
  08ae4	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2882 : 	memset(wszUtf8, 0, len * 2);

  08ae7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  08aea	d1 e0		 shl	 eax, 1
  08aec	50		 push	 eax
  08aed	6a 00		 push	 0
  08aef	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08af2	51		 push	 ecx
  08af3	e8 00 00 00 00	 call	 _memset
  08af8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2883 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  08afb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  08afe	52		 push	 edx
  08aff	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08b02	50		 push	 eax
  08b03	6a ff		 push	 -1
  08b05	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08b08	51		 push	 ecx
  08b09	6a 00		 push	 0
  08b0b	6a 00		 push	 0
  08b0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 2884 : 
; 2885 : 	BOOL bRet = AppendMenuW(nFlags,nIDNewItem,wszUtf8,il,xoffset);

  08b13	8b 55 18	 mov	 edx, DWORD PTR _xoffset$[ebp]
  08b16	52		 push	 edx
  08b17	8b 45 14	 mov	 eax, DWORD PTR _il$[ebp]
  08b1a	50		 push	 eax
  08b1b	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08b1e	51		 push	 ecx
  08b1f	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  08b22	52		 push	 edx
  08b23	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08b26	50		 push	 eax
  08b27	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  08b2a	e8 00 00 00 00	 call	 ?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z ; BCMenu::AppendMenuW
  08b2f	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 2886 : 	delete[] wszUtf8;

  08b32	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08b35	89 4d ec	 mov	 DWORD PTR $T203047[ebp], ecx
  08b38	8b 55 ec	 mov	 edx, DWORD PTR $T203047[ebp]
  08b3b	52		 push	 edx
  08b3c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  08b41	83 c4 04	 add	 esp, 4

; 2887 : 
; 2888 : 	return bRet;

  08b44	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2889 : }

  08b47	8b e5		 mov	 esp, ebp
  08b49	5d		 pop	 ebp
  08b4a	c2 14 00	 ret	 20			; 00000014H
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCImageList@@H@Z ENDP	; BCMenu::AppendMenuA
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_il$ = 20						; size = 4
_xoffset$ = 24						; size = 4
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z PROC NEAR ; BCMenu::AppendMenuW
; _this$ = ecx

; 2892 : {

  08b50	55		 push	 ebp
  08b51	8b ec		 mov	 ebp, esp
  08b53	51		 push	 ecx
  08b54	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2893 : 	return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,il,xoffset);

  08b57	8b 45 18	 mov	 eax, DWORD PTR _xoffset$[ebp]
  08b5a	50		 push	 eax
  08b5b	8b 4d 14	 mov	 ecx, DWORD PTR _il$[ebp]
  08b5e	51		 push	 ecx
  08b5f	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  08b62	52		 push	 edx
  08b63	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08b66	50		 push	 eax
  08b67	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08b6a	51		 push	 ecx
  08b6b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08b6e	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW

; 2894 : }

  08b73	8b e5		 mov	 esp, ebp
  08b75	5d		 pop	 ebp
  08b76	c2 14 00	 ret	 20			; 00000014H
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCImageList@@H@Z ENDP	; BCMenu::AppendMenuW
_TEXT	ENDS
PUBLIC	?AppendMenuA@BCMenu@@QAEHIIPBDPAVCBitmap@@@Z	; BCMenu::AppendMenuA
PUBLIC	?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z	; BCMenu::AppendMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203051 = -20						; size = 4
$T203050 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_bmp$ = 20						; size = 4
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCBitmap@@@Z PROC NEAR	; BCMenu::AppendMenuA
; _this$ = ecx

; 2897 : {

  08b80	55		 push	 ebp
  08b81	8b ec		 mov	 ebp, esp
  08b83	83 ec 18	 sub	 esp, 24			; 00000018H
  08b86	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2898 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  08b89	6a 00		 push	 0
  08b8b	6a 00		 push	 0
  08b8d	6a ff		 push	 -1
  08b8f	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08b92	50		 push	 eax
  08b93	6a 00		 push	 0
  08b95	6a 00		 push	 0
  08b97	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  08b9d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 2899 : 	wchar_t* wszUtf8 = new wchar_t[len];

  08ba0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  08ba3	d1 e1		 shl	 ecx, 1
  08ba5	51		 push	 ecx
  08ba6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  08bab	83 c4 04	 add	 esp, 4
  08bae	89 45 f0	 mov	 DWORD PTR $T203050[ebp], eax
  08bb1	8b 55 f0	 mov	 edx, DWORD PTR $T203050[ebp]
  08bb4	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2900 : 	memset(wszUtf8, 0, len * 2);

  08bb7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  08bba	d1 e0		 shl	 eax, 1
  08bbc	50		 push	 eax
  08bbd	6a 00		 push	 0
  08bbf	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08bc2	51		 push	 ecx
  08bc3	e8 00 00 00 00	 call	 _memset
  08bc8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2901 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  08bcb	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  08bce	52		 push	 edx
  08bcf	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08bd2	50		 push	 eax
  08bd3	6a ff		 push	 -1
  08bd5	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08bd8	51		 push	 ecx
  08bd9	6a 00		 push	 0
  08bdb	6a 00		 push	 0
  08bdd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 2902 : 
; 2903 : 	BOOL bRet = AppendMenuW(nFlags,nIDNewItem,wszUtf8,bmp);

  08be3	8b 55 14	 mov	 edx, DWORD PTR _bmp$[ebp]
  08be6	52		 push	 edx
  08be7	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08bea	50		 push	 eax
  08beb	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  08bee	51		 push	 ecx
  08bef	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  08bf2	52		 push	 edx
  08bf3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  08bf6	e8 00 00 00 00	 call	 ?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z ; BCMenu::AppendMenuW
  08bfb	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 2904 : 	delete[] wszUtf8;

  08bfe	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08c01	89 45 ec	 mov	 DWORD PTR $T203051[ebp], eax
  08c04	8b 4d ec	 mov	 ecx, DWORD PTR $T203051[ebp]
  08c07	51		 push	 ecx
  08c08	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  08c0d	83 c4 04	 add	 esp, 4

; 2905 : 	return bRet;

  08c10	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2906 : }

  08c13	8b e5		 mov	 esp, ebp
  08c15	5d		 pop	 ebp
  08c16	c2 10 00	 ret	 16			; 00000010H
?AppendMenuA@BCMenu@@QAEHIIPBDPAVCBitmap@@@Z ENDP	; BCMenu::AppendMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T203058 DD	0ffffffffH
	DD	FLAT:$L203054
$T203056 DD	019930520H
	DD	01H
	DD	FLAT:$T203058
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T203053 = -24						; size = 4
_temp$200363 = -20					; size = 8
__$EHRec$ = -12						; size = 12
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
_bmp$ = 20						; size = 4
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z PROC NEAR	; BCMenu::AppendMenuW
; _this$ = ecx

; 2909 : {

  08c20	55		 push	 ebp
  08c21	8b ec		 mov	 ebp, esp
  08c23	6a ff		 push	 -1
  08c25	68 00 00 00 00	 push	 __ehhandler$?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z
  08c2a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08c30	50		 push	 eax
  08c31	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08c38	83 ec 10	 sub	 esp, 16			; 00000010H
  08c3b	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 2910 : 	if(bmp){

  08c3e	83 7d 14 00	 cmp	 DWORD PTR _bmp$[ebp], 0
  08c42	0f 84 91 00 00
	00		 je	 $L200362

; 2911 : 		CImageList temp;

  08c48	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  08c4b	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  08c50	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2912 : 		temp.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  08c57	6a 01		 push	 1
  08c59	6a 01		 push	 1
  08c5b	68 ff 00 00 00	 push	 255			; 000000ffH
  08c60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  08c65	50		 push	 eax
  08c66	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  08c6c	51		 push	 ecx
  08c6d	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  08c70	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 2913 : 		if(m_bitmapBackgroundFlag)temp.Add(bmp,m_bitmapBackground);

  08c75	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  08c78	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  08c7c	74 15		 je	 SHORT $L200364
  08c7e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  08c81	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  08c84	51		 push	 ecx
  08c85	8b 55 14	 mov	 edx, DWORD PTR _bmp$[ebp]
  08c88	52		 push	 edx
  08c89	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  08c8c	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2914 : 
; 2915 : 		else temp.Add(bmp,GetSysColor(COLOR_3DFACE));

  08c91	eb 15		 jmp	 SHORT $L200365
$L200364:
  08c93	6a 0f		 push	 15			; 0000000fH
  08c95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  08c9b	50		 push	 eax
  08c9c	8b 45 14	 mov	 eax, DWORD PTR _bmp$[ebp]
  08c9f	50		 push	 eax
  08ca0	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  08ca3	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L200365:

; 2916 : 
; 2917 : 		return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,&temp,0);

  08ca8	6a 00		 push	 0
  08caa	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  08cad	51		 push	 ecx
  08cae	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  08cb1	52		 push	 edx
  08cb2	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08cb5	50		 push	 eax
  08cb6	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08cb9	51		 push	 ecx
  08cba	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  08cbd	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
  08cc2	89 45 e8	 mov	 DWORD PTR $T203053[ebp], eax
  08cc5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  08ccc	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  08ccf	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  08cd4	8b 45 e8	 mov	 eax, DWORD PTR $T203053[ebp]
  08cd7	eb 18		 jmp	 SHORT $L200361
$L200362:

; 2918 : 	}
; 2919 : 	return AppendODMenuW(lpszNewItem,nFlags,nIDNewItem,NULL,0);

  08cd9	6a 00		 push	 0
  08cdb	6a 00		 push	 0
  08cdd	8b 55 0c	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  08ce0	52		 push	 edx
  08ce1	8b 45 08	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08ce4	50		 push	 eax
  08ce5	8b 4d 10	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08ce8	51		 push	 ecx
  08ce9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  08cec	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIPAVCImageList@@H@Z ; BCMenu::AppendODMenuW
$L200361:

; 2920 : }

  08cf1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  08cf4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  08cfb	8b e5		 mov	 esp, ebp
  08cfd	5d		 pop	 ebp
  08cfe	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L203054:
  005f1	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200363[ebp]
  005f4	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z:
  005f9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203056
  005fe	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendMenuW@BCMenu@@QAEHIIPA_WPAVCBitmap@@@Z ENDP	; BCMenu::AppendMenuW
PUBLIC	?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z		; BCMenu::InsertMenuA
PUBLIC	?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z		; BCMenu::InsertMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203061 = -20						; size = 4
$T203060 = -16						; size = 4
_len$200377 = -12					; size = 4
_wszUtf8$ = -8						; size = 4
_bRet$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_nIconNormal$ = 24					; size = 4
?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z PROC NEAR		; BCMenu::InsertMenuA
; _this$ = ecx

; 2923 : {

  08d10	55		 push	 ebp
  08d11	8b ec		 mov	 ebp, esp
  08d13	83 ec 18	 sub	 esp, 24			; 00000018H
  08d16	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2924 : 	wchar_t* wszUtf8 = NULL;

  08d19	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _wszUtf8$[ebp], 0

; 2925 : 	if(lpszNewItem != NULL)

  08d20	83 7d 14 00	 cmp	 DWORD PTR _lpszNewItem$[ebp], 0
  08d24	74 5a		 je	 SHORT $L200376

; 2926 : 	{
; 2927 : 		int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  08d26	6a 00		 push	 0
  08d28	6a 00		 push	 0
  08d2a	6a ff		 push	 -1
  08d2c	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08d2f	50		 push	 eax
  08d30	6a 00		 push	 0
  08d32	6a 00		 push	 0
  08d34	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  08d3a	89 45 f4	 mov	 DWORD PTR _len$200377[ebp], eax

; 2928 : 		wszUtf8 = new wchar_t[len];

  08d3d	8b 4d f4	 mov	 ecx, DWORD PTR _len$200377[ebp]
  08d40	d1 e1		 shl	 ecx, 1
  08d42	51		 push	 ecx
  08d43	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  08d48	83 c4 04	 add	 esp, 4
  08d4b	89 45 f0	 mov	 DWORD PTR $T203060[ebp], eax
  08d4e	8b 55 f0	 mov	 edx, DWORD PTR $T203060[ebp]
  08d51	89 55 f8	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2929 : 		memset(wszUtf8, 0, len * 2);

  08d54	8b 45 f4	 mov	 eax, DWORD PTR _len$200377[ebp]
  08d57	d1 e0		 shl	 eax, 1
  08d59	50		 push	 eax
  08d5a	6a 00		 push	 0
  08d5c	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08d5f	51		 push	 ecx
  08d60	e8 00 00 00 00	 call	 _memset
  08d65	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2930 : 		MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  08d68	8b 55 f4	 mov	 edx, DWORD PTR _len$200377[ebp]
  08d6b	52		 push	 edx
  08d6c	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08d6f	50		 push	 eax
  08d70	6a ff		 push	 -1
  08d72	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08d75	51		 push	 ecx
  08d76	6a 00		 push	 0
  08d78	6a 00		 push	 0
  08d7a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
$L200376:

; 2931 : 	}
; 2932 : 
; 2933 : 	BOOL bRet = InsertMenuW(nPosition,nFlags,nIDNewItem,wszUtf8,nIconNormal);

  08d80	8b 55 18	 mov	 edx, DWORD PTR _nIconNormal$[ebp]
  08d83	52		 push	 edx
  08d84	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08d87	50		 push	 eax
  08d88	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  08d8b	51		 push	 ecx
  08d8c	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  08d8f	52		 push	 edx
  08d90	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  08d93	50		 push	 eax
  08d94	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  08d97	e8 00 00 00 00	 call	 ?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z ; BCMenu::InsertMenuW
  08d9c	89 45 fc	 mov	 DWORD PTR _bRet$[ebp], eax

; 2934 : 	delete[] wszUtf8;

  08d9f	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08da2	89 4d ec	 mov	 DWORD PTR $T203061[ebp], ecx
  08da5	8b 55 ec	 mov	 edx, DWORD PTR $T203061[ebp]
  08da8	52		 push	 edx
  08da9	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  08dae	83 c4 04	 add	 esp, 4

; 2935 : 
; 2936 : 	return bRet;

  08db1	8b 45 fc	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2937 : }

  08db4	8b e5		 mov	 esp, ebp
  08db6	5d		 pop	 ebp
  08db7	c2 14 00	 ret	 20			; 00000014H
?InsertMenuA@BCMenu@@QAEHIIIPBDH@Z ENDP			; BCMenu::InsertMenuA
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_nIconNormal$ = 24					; size = 4
?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z PROC NEAR		; BCMenu::InsertMenuW
; _this$ = ecx

; 2940 : {

  08dc0	55		 push	 ebp
  08dc1	8b ec		 mov	 ebp, esp
  08dc3	51		 push	 ecx
  08dc4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2941 : 	return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,nIconNormal);

  08dc7	8b 45 18	 mov	 eax, DWORD PTR _nIconNormal$[ebp]
  08dca	50		 push	 eax
  08dcb	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  08dce	51		 push	 ecx
  08dcf	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  08dd2	52		 push	 edx
  08dd3	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08dd6	50		 push	 eax
  08dd7	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  08dda	51		 push	 ecx
  08ddb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08dde	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIH@Z ; BCMenu::InsertODMenuW

; 2942 : }

  08de3	8b e5		 mov	 esp, ebp
  08de5	5d		 pop	 ebp
  08de6	c2 14 00	 ret	 20			; 00000014H
?InsertMenuW@BCMenu@@QAEHIIIPA_WH@Z ENDP		; BCMenu::InsertMenuW
_TEXT	ENDS
PUBLIC	?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCImageList@@H@Z ; BCMenu::InsertMenuA
PUBLIC	?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z ; BCMenu::InsertMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203065 = -20						; size = 4
$T203064 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertMenuA
; _this$ = ecx

; 2945 : {	

  08df0	55		 push	 ebp
  08df1	8b ec		 mov	 ebp, esp
  08df3	83 ec 18	 sub	 esp, 24			; 00000018H
  08df6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2946 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  08df9	6a 00		 push	 0
  08dfb	6a 00		 push	 0
  08dfd	6a ff		 push	 -1
  08dff	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08e02	50		 push	 eax
  08e03	6a 00		 push	 0
  08e05	6a 00		 push	 0
  08e07	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  08e0d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 2947 : 	wchar_t* wszUtf8 = new wchar_t[len];

  08e10	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  08e13	d1 e1		 shl	 ecx, 1
  08e15	51		 push	 ecx
  08e16	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  08e1b	83 c4 04	 add	 esp, 4
  08e1e	89 45 f0	 mov	 DWORD PTR $T203064[ebp], eax
  08e21	8b 55 f0	 mov	 edx, DWORD PTR $T203064[ebp]
  08e24	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2948 : 	memset(wszUtf8, 0, len * 2);

  08e27	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  08e2a	d1 e0		 shl	 eax, 1
  08e2c	50		 push	 eax
  08e2d	6a 00		 push	 0
  08e2f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08e32	51		 push	 ecx
  08e33	e8 00 00 00 00	 call	 _memset
  08e38	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2949 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  08e3b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  08e3e	52		 push	 edx
  08e3f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08e42	50		 push	 eax
  08e43	6a ff		 push	 -1
  08e45	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08e48	51		 push	 ecx
  08e49	6a 00		 push	 0
  08e4b	6a 00		 push	 0
  08e4d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 2950 : 
; 2951 : 	BOOL bRet = InsertMenuW(nPosition,nFlags,nIDNewItem,wszUtf8,il,xoffset);

  08e53	8b 55 1c	 mov	 edx, DWORD PTR _xoffset$[ebp]
  08e56	52		 push	 edx
  08e57	8b 45 18	 mov	 eax, DWORD PTR _il$[ebp]
  08e5a	50		 push	 eax
  08e5b	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08e5e	51		 push	 ecx
  08e5f	8b 55 10	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  08e62	52		 push	 edx
  08e63	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08e66	50		 push	 eax
  08e67	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  08e6a	51		 push	 ecx
  08e6b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  08e6e	e8 00 00 00 00	 call	 ?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z ; BCMenu::InsertMenuW
  08e73	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 2952 : 	delete[] wszUtf8;

  08e76	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  08e79	89 55 ec	 mov	 DWORD PTR $T203065[ebp], edx
  08e7c	8b 45 ec	 mov	 eax, DWORD PTR $T203065[ebp]
  08e7f	50		 push	 eax
  08e80	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  08e85	83 c4 04	 add	 esp, 4

; 2953 : 
; 2954 : 	return bRet;

  08e88	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2955 : }

  08e8b	8b e5		 mov	 esp, ebp
  08e8d	5d		 pop	 ebp
  08e8e	c2 18 00	 ret	 24			; 00000018H
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCImageList@@H@Z ENDP	; BCMenu::InsertMenuA
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_il$ = 24						; size = 4
_xoffset$ = 28						; size = 4
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z PROC NEAR ; BCMenu::InsertMenuW
; _this$ = ecx

; 2958 : {

  08ea0	55		 push	 ebp
  08ea1	8b ec		 mov	 ebp, esp
  08ea3	51		 push	 ecx
  08ea4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2959 : 	return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,il,xoffset);

  08ea7	8b 45 1c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  08eaa	50		 push	 eax
  08eab	8b 4d 18	 mov	 ecx, DWORD PTR _il$[ebp]
  08eae	51		 push	 ecx
  08eaf	8b 55 10	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  08eb2	52		 push	 edx
  08eb3	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  08eb6	50		 push	 eax
  08eb7	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08eba	51		 push	 ecx
  08ebb	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  08ebe	52		 push	 edx
  08ebf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  08ec2	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW

; 2960 : }

  08ec7	8b e5		 mov	 esp, ebp
  08ec9	5d		 pop	 ebp
  08eca	c2 18 00	 ret	 24			; 00000018H
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCImageList@@H@Z ENDP	; BCMenu::InsertMenuW
_TEXT	ENDS
PUBLIC	?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCBitmap@@@Z	; BCMenu::InsertMenuA
PUBLIC	?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z	; BCMenu::InsertMenuW
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203069 = -20						; size = 4
$T203068 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_bmp$ = 24						; size = 4
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCBitmap@@@Z PROC NEAR	; BCMenu::InsertMenuA
; _this$ = ecx

; 2963 : {

  08ed0	55		 push	 ebp
  08ed1	8b ec		 mov	 ebp, esp
  08ed3	83 ec 18	 sub	 esp, 24			; 00000018H
  08ed6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2964 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpszNewItem, -1, NULL,0);

  08ed9	6a 00		 push	 0
  08edb	6a 00		 push	 0
  08edd	6a ff		 push	 -1
  08edf	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  08ee2	50		 push	 eax
  08ee3	6a 00		 push	 0
  08ee5	6a 00		 push	 0
  08ee7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  08eed	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 2965 : 	wchar_t* wszUtf8 = new wchar_t[len];

  08ef0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  08ef3	d1 e1		 shl	 ecx, 1
  08ef5	51		 push	 ecx
  08ef6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  08efb	83 c4 04	 add	 esp, 4
  08efe	89 45 f0	 mov	 DWORD PTR $T203068[ebp], eax
  08f01	8b 55 f0	 mov	 edx, DWORD PTR $T203068[ebp]
  08f04	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 2966 : 	memset(wszUtf8, 0, len * 2);

  08f07	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  08f0a	d1 e0		 shl	 eax, 1
  08f0c	50		 push	 eax
  08f0d	6a 00		 push	 0
  08f0f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08f12	51		 push	 ecx
  08f13	e8 00 00 00 00	 call	 _memset
  08f18	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2967 : 	MultiByteToWideChar(CP_ACP, 0, lpszNewItem, -1, (LPWSTR)wszUtf8, len);	

  08f1b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  08f1e	52		 push	 edx
  08f1f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08f22	50		 push	 eax
  08f23	6a ff		 push	 -1
  08f25	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  08f28	51		 push	 ecx
  08f29	6a 00		 push	 0
  08f2b	6a 00		 push	 0
  08f2d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 2968 : 
; 2969 : 	BOOL bRet = InsertMenuW(nPosition,nFlags,nIDNewItem,wszUtf8,bmp);

  08f33	8b 55 18	 mov	 edx, DWORD PTR _bmp$[ebp]
  08f36	52		 push	 edx
  08f37	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  08f3a	50		 push	 eax
  08f3b	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  08f3e	51		 push	 ecx
  08f3f	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  08f42	52		 push	 edx
  08f43	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  08f46	50		 push	 eax
  08f47	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  08f4a	e8 00 00 00 00	 call	 ?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z ; BCMenu::InsertMenuW
  08f4f	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 2970 : 	delete[] wszUtf8;

  08f52	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  08f55	89 4d ec	 mov	 DWORD PTR $T203069[ebp], ecx
  08f58	8b 55 ec	 mov	 edx, DWORD PTR $T203069[ebp]
  08f5b	52		 push	 edx
  08f5c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  08f61	83 c4 04	 add	 esp, 4

; 2971 : 
; 2972 : 	return bRet;

  08f64	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 2973 : }

  08f67	8b e5		 mov	 esp, ebp
  08f69	5d		 pop	 ebp
  08f6a	c2 14 00	 ret	 20			; 00000014H
?InsertMenuA@BCMenu@@QAEHIIIPBDPAVCBitmap@@@Z ENDP	; BCMenu::InsertMenuA
_TEXT	ENDS
xdata$x	SEGMENT
$T203076 DD	0ffffffffH
	DD	FLAT:$L203072
$T203074 DD	019930520H
	DD	01H
	DD	FLAT:$T203076
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T203071 = -24						; size = 4
_temp$200440 = -20					; size = 8
__$EHRec$ = -12						; size = 12
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
_bmp$ = 24						; size = 4
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z PROC NEAR ; BCMenu::InsertMenuW
; _this$ = ecx

; 2976 : {

  08f70	55		 push	 ebp
  08f71	8b ec		 mov	 ebp, esp
  08f73	6a ff		 push	 -1
  08f75	68 00 00 00 00	 push	 __ehhandler$?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z
  08f7a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  08f80	50		 push	 eax
  08f81	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  08f88	83 ec 10	 sub	 esp, 16			; 00000010H
  08f8b	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 2977 : 	if(bmp){

  08f8e	83 7d 18 00	 cmp	 DWORD PTR _bmp$[ebp], 0
  08f92	0f 84 95 00 00
	00		 je	 $L200439

; 2978 : 		CImageList temp;

  08f98	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  08f9b	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  08fa0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2979 : 		temp.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  08fa7	6a 01		 push	 1
  08fa9	6a 01		 push	 1
  08fab	68 ff 00 00 00	 push	 255			; 000000ffH
  08fb0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  08fb5	50		 push	 eax
  08fb6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  08fbc	51		 push	 ecx
  08fbd	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  08fc0	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 2980 : 		if(m_bitmapBackgroundFlag)temp.Add(bmp,m_bitmapBackground);

  08fc5	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  08fc8	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  08fcc	74 15		 je	 SHORT $L200441
  08fce	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  08fd1	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  08fd4	51		 push	 ecx
  08fd5	8b 55 18	 mov	 edx, DWORD PTR _bmp$[ebp]
  08fd8	52		 push	 edx
  08fd9	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  08fdc	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 2981 : 		else temp.Add(bmp,GetSysColor(COLOR_3DFACE));

  08fe1	eb 15		 jmp	 SHORT $L200442
$L200441:
  08fe3	6a 0f		 push	 15			; 0000000fH
  08fe5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  08feb	50		 push	 eax
  08fec	8b 45 18	 mov	 eax, DWORD PTR _bmp$[ebp]
  08fef	50		 push	 eax
  08ff0	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  08ff3	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L200442:

; 2982 : 		return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,&temp,0);

  08ff8	6a 00		 push	 0
  08ffa	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  08ffd	51		 push	 ecx
  08ffe	8b 55 10	 mov	 edx, DWORD PTR _nIDNewItem$[ebp]
  09001	52		 push	 edx
  09002	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  09005	50		 push	 eax
  09006	8b 4d 14	 mov	 ecx, DWORD PTR _lpszNewItem$[ebp]
  09009	51		 push	 ecx
  0900a	8b 55 08	 mov	 edx, DWORD PTR _nPosition$[ebp]
  0900d	52		 push	 edx
  0900e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  09011	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
  09016	89 45 e8	 mov	 DWORD PTR $T203071[ebp], eax
  09019	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09020	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  09023	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  09028	8b 45 e8	 mov	 eax, DWORD PTR $T203071[ebp]
  0902b	eb 1c		 jmp	 SHORT $L200438
$L200439:

; 2983 : 	}
; 2984 : 	return InsertODMenuW(nPosition,lpszNewItem,nFlags,nIDNewItem,NULL,0);

  0902d	6a 00		 push	 0
  0902f	6a 00		 push	 0
  09031	8b 45 10	 mov	 eax, DWORD PTR _nIDNewItem$[ebp]
  09034	50		 push	 eax
  09035	8b 4d 0c	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  09038	51		 push	 ecx
  09039	8b 55 14	 mov	 edx, DWORD PTR _lpszNewItem$[ebp]
  0903c	52		 push	 edx
  0903d	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  09040	50		 push	 eax
  09041	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  09044	e8 00 00 00 00	 call	 ?InsertODMenuW@BCMenu@@QAEHIPA_WIIPAVCImageList@@H@Z ; BCMenu::InsertODMenuW
$L200438:

; 2985 : }

  09049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0904c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09053	8b e5		 mov	 esp, ebp
  09055	5d		 pop	 ebp
  09056	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L203072:
  00603	8d 4d ec	 lea	 ecx, DWORD PTR _temp$200440[ebp]
  00606	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z:
  0060b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203074
  00610	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertMenuW@BCMenu@@QAEHIIIPA_WPAVCBitmap@@@Z ENDP	; BCMenu::InsertMenuW
PUBLIC	?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z	; BCMenu::AppendODPopupMenuW
xdata$x	SEGMENT
$T203086 DD	0ffffffffH
	DD	FLAT:$L203082
$T203084 DD	019930520H
	DD	01H
	DD	FLAT:$T203086
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -32						; size = 4
_this$ = -28						; size = 4
$T203079 = -24						; size = 4
$T203078 = -20						; size = 4
_pSubMenu$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpstrText$ = 8						; size = 4
?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z PROC NEAR	; BCMenu::AppendODPopupMenuW
; _this$ = ecx

; 2990 : {

  09060	55		 push	 ebp
  09061	8b ec		 mov	 ebp, esp
  09063	6a ff		 push	 -1
  09065	68 00 00 00 00	 push	 __ehhandler$?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z
  0906a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09070	50		 push	 eax
  09071	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09078	83 ec 14	 sub	 esp, 20			; 00000014H
  0907b	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 2991 : 	BCMenu* pSubMenu = new BCMenu;

  0907e	6a 64		 push	 100			; 00000064H
  09080	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  09085	89 45 e8	 mov	 DWORD PTR $T203079[ebp], eax
  09088	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0908f	83 7d e8 00	 cmp	 DWORD PTR $T203079[ebp], 0
  09093	74 0d		 je	 SHORT $L203080
  09095	8b 4d e8	 mov	 ecx, DWORD PTR $T203079[ebp]
  09098	e8 00 00 00 00	 call	 ??0BCMenu@@QAE@XZ	; BCMenu::BCMenu
  0909d	89 45 e0	 mov	 DWORD PTR tv71[ebp], eax
  090a0	eb 07		 jmp	 SHORT $L203081
$L203080:
  090a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L203081:
  090a9	8b 45 e0	 mov	 eax, DWORD PTR tv71[ebp]
  090ac	89 45 ec	 mov	 DWORD PTR $T203078[ebp], eax
  090af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  090b6	8b 4d ec	 mov	 ecx, DWORD PTR $T203078[ebp]
  090b9	89 4d f0	 mov	 DWORD PTR _pSubMenu$[ebp], ecx

; 2992 : //added by vito--
; 2993 : 	pSubMenu->SetMenuItemBkColor( m_menuItemBkColor );

  090bc	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  090bf	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  090c2	50		 push	 eax
  090c3	8b 4d f0	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  090c6	e8 00 00 00 00	 call	 ?SetMenuItemBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBkColor

; 2994 : 	pSubMenu->SetMenuItemBitmapBkColor( m_menuItemBitmapBkColor );

  090cb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  090ce	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  090d1	52		 push	 edx
  090d2	8b 4d f0	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  090d5	e8 00 00 00 00	 call	 ?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ; BCMenu::SetMenuItemBitmapBkColor

; 2995 : //--
; 2996 : 	pSubMenu->m_unselectcheck=m_unselectcheck;

  090da	8b 45 f0	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  090dd	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  090e0	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  090e3	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 2997 : 	pSubMenu->m_selectcheck=m_selectcheck;

  090e6	8b 45 f0	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  090e9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  090ec	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  090ef	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 2998 : 	pSubMenu->checkmaps=checkmaps;

  090f2	8b 45 f0	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  090f5	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  090f8	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  090fb	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 2999 : 	pSubMenu->checkmapsshare=TRUE;

  090fe	8b 45 f0	 mov	 eax, DWORD PTR _pSubMenu$[ebp]
  09101	c7 40 40 01 00
	00 00		 mov	 DWORD PTR [eax+64], 1

; 3000 : 	pSubMenu->CreatePopupMenu();

  09108	8b 4d f0	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  0910b	e8 00 00 00 00	 call	 ?CreatePopupMenu@CMenu@@QAEHXZ ; CMenu::CreatePopupMenu

; 3001 : 	AppendODMenuW(lpstrText,MF_POPUP,(UINT)pSubMenu->m_hMenu, -1);

  09110	6a ff		 push	 -1
  09112	8b 4d f0	 mov	 ecx, DWORD PTR _pSubMenu$[ebp]
  09115	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  09118	52		 push	 edx
  09119	6a 10		 push	 16			; 00000010H
  0911b	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  0911e	50		 push	 eax
  0911f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  09122	e8 00 00 00 00	 call	 ?AppendODMenuW@BCMenu@@QAEHPA_WIIH@Z ; BCMenu::AppendODMenuW

; 3002 : 	return pSubMenu;

  09127	8b 45 f0	 mov	 eax, DWORD PTR _pSubMenu$[ebp]

; 3003 : }

  0912a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0912d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09134	8b e5		 mov	 esp, ebp
  09136	5d		 pop	 ebp
  09137	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L203082:
  00615	8b 45 e8	 mov	 eax, DWORD PTR $T203079[ebp]
  00618	50		 push	 eax
  00619	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0061e	c3		 ret	 0
__ehhandler$?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z:
  0061f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203084
  00624	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z ENDP		; BCMenu::AppendODPopupMenuW
PUBLIC	?AppendODPopupMenuA@BCMenu@@QAEPAV1@PBD@Z	; BCMenu::AppendODPopupMenuA
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203089 = -20						; size = 4
$T203088 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_bRet$ = -8						; size = 4
_len$ = -4						; size = 4
_lpstrText$ = 8						; size = 4
?AppendODPopupMenuA@BCMenu@@QAEPAV1@PBD@Z PROC NEAR	; BCMenu::AppendODPopupMenuA
; _this$ = ecx

; 3008 : {

  09140	55		 push	 ebp
  09141	8b ec		 mov	 ebp, esp
  09143	83 ec 18	 sub	 esp, 24			; 00000018H
  09146	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3009 : 	int len=MultiByteToWideChar(CP_ACP, 0,lpstrText, -1, NULL,0);

  09149	6a 00		 push	 0
  0914b	6a 00		 push	 0
  0914d	6a ff		 push	 -1
  0914f	8b 45 08	 mov	 eax, DWORD PTR _lpstrText$[ebp]
  09152	50		 push	 eax
  09153	6a 00		 push	 0
  09155	6a 00		 push	 0
  09157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0915d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 3010 : 	wchar_t* wszUtf8 = new wchar_t[len];

  09160	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  09163	d1 e1		 shl	 ecx, 1
  09165	51		 push	 ecx
  09166	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0916b	83 c4 04	 add	 esp, 4
  0916e	89 45 f0	 mov	 DWORD PTR $T203088[ebp], eax
  09171	8b 55 f0	 mov	 edx, DWORD PTR $T203088[ebp]
  09174	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3011 : 	memset(wszUtf8, 0, len * 2);

  09177	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0917a	d1 e0		 shl	 eax, 1
  0917c	50		 push	 eax
  0917d	6a 00		 push	 0
  0917f	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  09182	51		 push	 ecx
  09183	e8 00 00 00 00	 call	 _memset
  09188	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3012 : 	MultiByteToWideChar(CP_ACP, 0, lpstrText, -1, (LPWSTR)wszUtf8, len);	

  0918b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0918e	52		 push	 edx
  0918f	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  09192	50		 push	 eax
  09193	6a ff		 push	 -1
  09195	8b 4d 08	 mov	 ecx, DWORD PTR _lpstrText$[ebp]
  09198	51		 push	 ecx
  09199	6a 00		 push	 0
  0919b	6a 00		 push	 0
  0919d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 3013 : 
; 3014 : 	BCMenu* bRet = AppendODPopupMenuW( wszUtf8 );

  091a3	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  091a6	52		 push	 edx
  091a7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  091aa	e8 00 00 00 00	 call	 ?AppendODPopupMenuW@BCMenu@@QAEPAV1@PA_W@Z ; BCMenu::AppendODPopupMenuW
  091af	89 45 f8	 mov	 DWORD PTR _bRet$[ebp], eax

; 3015 : 	delete[] wszUtf8;

  091b2	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  091b5	89 45 ec	 mov	 DWORD PTR $T203089[ebp], eax
  091b8	8b 4d ec	 mov	 ecx, DWORD PTR $T203089[ebp]
  091bb	51		 push	 ecx
  091bc	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  091c1	83 c4 04	 add	 esp, 4

; 3016 : 
; 3017 : 	return bRet;

  091c4	8b 45 f8	 mov	 eax, DWORD PTR _bRet$[ebp]

; 3018 : }

  091c7	8b e5		 mov	 esp, ebp
  091c9	5d		 pop	 ebp
  091ca	c2 04 00	 ret	 4
?AppendODPopupMenuA@BCMenu@@QAEPAV1@PBD@Z ENDP		; BCMenu::AppendODPopupMenuA
_TEXT	ENDS
EXTRN	__imp__ImageList_GetIconSize@12:NEAR
xdata$x	SEGMENT
$T203097 DD	0ffffffffH
	DD	FLAT:$L203091
	DD	00H
	DD	FLAT:$L203092
	DD	01H
	DD	FLAT:$L203093
$T203095 DD	019930520H
	DD	03H
	DD	FLAT:$T203097
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -60						; size = 4
_pWnd$200477 = -56					; size = 4
_bmp2$200481 = -52					; size = 8
_pDC$200479 = -44					; size = 4
_bmp$200480 = -40					; size = 8
_bmp3$200482 = -32					; size = 8
_cy$ = -24						; size = 4
_hIcon$ = -20						; size = 4
_cx$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_il$ = 8						; size = 4
_xoffset$ = 12						; size = 4
_newlist$ = 16						; size = 4
?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z PROC NEAR ; BCMenu::ImageListDuplicate
; _this$ = ecx

; 3021 : {

  091d0	55		 push	 ebp
  091d1	8b ec		 mov	 ebp, esp
  091d3	6a ff		 push	 -1
  091d5	68 00 00 00 00	 push	 __ehhandler$?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z
  091da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  091e0	50		 push	 eax
  091e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  091e8	83 ec 30	 sub	 esp, 48			; 00000030H
  091eb	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 3022 : 	if (il == NULL||newlist==NULL||xoffset<0) return FALSE;

  091ee	83 7d 08 00	 cmp	 DWORD PTR _il$[ebp], 0
  091f2	74 0c		 je	 SHORT $L200472
  091f4	83 7d 10 00	 cmp	 DWORD PTR _newlist$[ebp], 0
  091f8	74 06		 je	 SHORT $L200472
  091fa	83 7d 0c 00	 cmp	 DWORD PTR _xoffset$[ebp], 0
  091fe	7d 07		 jge	 SHORT $L200471
$L200472:
  09200	33 c0		 xor	 eax, eax
  09202	e9 94 01 00 00	 jmp	 $L200470
$L200471:

; 3023 : 	HICON hIcon = il->ExtractIcon(xoffset);

  09207	8b 45 0c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  0920a	50		 push	 eax
  0920b	8b 4d 08	 mov	 ecx, DWORD PTR _il$[ebp]
  0920e	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  09213	89 45 ec	 mov	 DWORD PTR _hIcon$[ebp], eax

; 3024 : 	int cx, cy;
; 3025 : 	ImageList_GetIconSize(il->m_hImageList, &cx, &cy);

  09216	8d 4d e8	 lea	 ecx, DWORD PTR _cy$[ebp]
  09219	51		 push	 ecx
  0921a	8d 55 f0	 lea	 edx, DWORD PTR _cx$[ebp]
  0921d	52		 push	 edx
  0921e	8b 45 08	 mov	 eax, DWORD PTR _il$[ebp]
  09221	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  09224	51		 push	 ecx
  09225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetIconSize@12

; 3026 : 	newlist->Create(cx,cy,ILC_COLORDDB|ILC_MASK,1,1);

  0922b	6a 01		 push	 1
  0922d	6a 01		 push	 1
  0922f	68 ff 00 00 00	 push	 255			; 000000ffH
  09234	8b 55 e8	 mov	 edx, DWORD PTR _cy$[ebp]
  09237	52		 push	 edx
  09238	8b 45 f0	 mov	 eax, DWORD PTR _cx$[ebp]
  0923b	50		 push	 eax
  0923c	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0923f	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 3027 : 	newlist->Add(hIcon);

  09244	8b 4d ec	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  09247	51		 push	 ecx
  09248	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0924b	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAUHICON__@@@Z ; CImageList::Add

; 3028 : 	::DestroyIcon(hIcon);

  09250	8b 55 ec	 mov	 edx, DWORD PTR _hIcon$[ebp]
  09253	52		 push	 edx
  09254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4

; 3029 : 	if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0925a	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0925f	85 c0		 test	 eax, eax
  09261	0f 84 2f 01 00
	00		 je	 $L200476
  09267	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0926e	0f 84 22 01 00
	00		 je	 $L200476

; 3030 : 		CWnd *pWnd = AfxGetMainWnd();            // Get main window

  09274	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  09279	89 45 c8	 mov	 DWORD PTR _pWnd$200477[ebp], eax

; 3031 : 		if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  0927c	83 7d c8 00	 cmp	 DWORD PTR _pWnd$200477[ebp], 0
  09280	75 08		 jne	 SHORT $L200478
  09282	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  09287	89 45 c8	 mov	 DWORD PTR _pWnd$200477[ebp], eax
$L200478:

; 3032 : 		CDC *pDC = pWnd->GetDC();              // Get device context

  0928a	8b 4d c8	 mov	 ecx, DWORD PTR _pWnd$200477[ebp]
  0928d	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  09292	89 45 d4	 mov	 DWORD PTR _pDC$200479[ebp], eax

; 3033 : 		CBitmap bmp,bmp2,bmp3;

  09295	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$200480[ebp]
  09298	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0929d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  092a4	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200481[ebp]
  092a7	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  092ac	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  092b0	8d 4d e0	 lea	 ecx, DWORD PTR _bmp3$200482[ebp]
  092b3	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  092b8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3034 : 		GetBitmapFromImageList(pDC,newlist,0,bmp);

  092bc	8d 45 d8	 lea	 eax, DWORD PTR _bmp$200480[ebp]
  092bf	50		 push	 eax
  092c0	6a 00		 push	 0
  092c2	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  092c5	51		 push	 ecx
  092c6	8b 55 d4	 mov	 edx, DWORD PTR _pDC$200479[ebp]
  092c9	52		 push	 edx
  092ca	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  092cd	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3035 : 		GetFadedBitmap(bmp);

  092d2	8d 45 d8	 lea	 eax, DWORD PTR _bmp$200480[ebp]
  092d5	50		 push	 eax
  092d6	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  092d9	e8 00 00 00 00	 call	 ?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetFadedBitmap

; 3036 : 		newlist->Add(&bmp,GetSysColor(COLOR_3DFACE));

  092de	6a 0f		 push	 15			; 0000000fH
  092e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  092e6	50		 push	 eax
  092e7	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$200480[ebp]
  092ea	51		 push	 ecx
  092eb	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  092ee	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3037 : 		GetBitmapFromImageList(pDC,newlist,0,bmp2);

  092f3	8d 55 cc	 lea	 edx, DWORD PTR _bmp2$200481[ebp]
  092f6	52		 push	 edx
  092f7	6a 00		 push	 0
  092f9	8b 45 10	 mov	 eax, DWORD PTR _newlist$[ebp]
  092fc	50		 push	 eax
  092fd	8b 4d d4	 mov	 ecx, DWORD PTR _pDC$200479[ebp]
  09300	51		 push	 ecx
  09301	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  09304	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3038 : 		GetShadowBitmap(bmp2);

  09309	8d 55 cc	 lea	 edx, DWORD PTR _bmp2$200481[ebp]
  0930c	52		 push	 edx
  0930d	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  09310	e8 00 00 00 00	 call	 ?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetShadowBitmap

; 3039 : 		newlist->Add(&bmp2,GetSysColor(COLOR_3DFACE));

  09315	6a 0f		 push	 15			; 0000000fH
  09317	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0931d	50		 push	 eax
  0931e	8d 45 cc	 lea	 eax, DWORD PTR _bmp2$200481[ebp]
  09321	50		 push	 eax
  09322	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  09325	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3040 : 		GetBitmapFromImageList(pDC,newlist,0,bmp3);

  0932a	8d 4d e0	 lea	 ecx, DWORD PTR _bmp3$200482[ebp]
  0932d	51		 push	 ecx
  0932e	6a 00		 push	 0
  09330	8b 55 10	 mov	 edx, DWORD PTR _newlist$[ebp]
  09333	52		 push	 edx
  09334	8b 45 d4	 mov	 eax, DWORD PTR _pDC$200479[ebp]
  09337	50		 push	 eax
  09338	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0933b	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3041 : 		GetDisabledBitmap(bmp3);

  09340	6a 00		 push	 0
  09342	8d 4d e0	 lea	 ecx, DWORD PTR _bmp3$200482[ebp]
  09345	51		 push	 ecx
  09346	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  09349	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 3042 : 		newlist->Add(&bmp3,GetSysColor(COLOR_3DFACE));

  0934e	6a 0f		 push	 15			; 0000000fH
  09350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09356	50		 push	 eax
  09357	8d 55 e0	 lea	 edx, DWORD PTR _bmp3$200482[ebp]
  0935a	52		 push	 edx
  0935b	8b 4d 10	 mov	 ecx, DWORD PTR _newlist$[ebp]
  0935e	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3043 : 		pWnd->ReleaseDC(pDC);  // Release the DC

  09363	8b 45 d4	 mov	 eax, DWORD PTR _pDC$200479[ebp]
  09366	50		 push	 eax
  09367	8b 4d c8	 mov	 ecx, DWORD PTR _pWnd$200477[ebp]
  0936a	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC

; 3044 : 	}

  0936f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  09373	8d 4d e0	 lea	 ecx, DWORD PTR _bmp3$200482[ebp]
  09376	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0937b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0937f	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200481[ebp]
  09382	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  09387	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0938e	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$200480[ebp]
  09391	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L200476:

; 3045 : 	return TRUE;

  09396	b8 01 00 00 00	 mov	 eax, 1
$L200470:

; 3046 : }

  0939b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0939e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  093a5	8b e5		 mov	 esp, ebp
  093a7	5d		 pop	 ebp
  093a8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L203091:
  00629	8d 4d d8	 lea	 ecx, DWORD PTR _bmp$200480[ebp]
  0062c	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L203092:
  00631	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200481[ebp]
  00634	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L203093:
  00639	8d 4d e0	 lea	 ecx, DWORD PTR _bmp3$200482[ebp]
  0063c	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z:
  00641	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203095
  00646	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ImageListDuplicate@BCMenu@@IAEHPAVCImageList@@H0@Z ENDP ; BCMenu::ImageListDuplicate
PUBLIC	?GetSubMenu@CMenu@@QBEPAV1@H@Z			; CMenu::GetSubMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPos$ = 8						; size = 4
?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z PROC NEAR		; BCMenu::GetSubMenu
; _this$ = ecx

; 3053 : {

  093b0	55		 push	 ebp
  093b1	8b ec		 mov	 ebp, esp
  093b3	51		 push	 ecx
  093b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3054 : 	return CMenu::GetSubMenu (nPos);

  093b7	8b 45 08	 mov	 eax, DWORD PTR _nPos$[ebp]
  093ba	50		 push	 eax
  093bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  093be	e8 00 00 00 00	 call	 ?GetSubMenu@CMenu@@QBEPAV1@H@Z ; CMenu::GetSubMenu

; 3055 : }

  093c3	8b e5		 mov	 esp, ebp
  093c5	5d		 pop	 ebp
  093c6	c2 04 00	 ret	 4
?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ENDP		; BCMenu::GetSubMenu
_TEXT	ENDS
PUBLIC	?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z		; BCMenu::GetSubMenu
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:NEAR
xdata$x	SEGMENT
$T203106 DD	0ffffffffH
	DD	FLAT:$L203102
$T203104 DD	019930520H
	DD	01H
	DD	FLAT:$T203106
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T203101 = -32						; size = 4
$T203100 = -28						; size = 4
_i$200493 = -24						; size = 4
_name$ = -20						; size = 4
_num$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpszSubMenuName$ = 8					; size = 4
?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z PROC NEAR	; BCMenu::GetSubMenu
; _this$ = ecx

; 3058 : {

  093d0	55		 push	 ebp
  093d1	8b ec		 mov	 ebp, esp
  093d3	6a ff		 push	 -1
  093d5	68 00 00 00 00	 push	 __ehhandler$?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z
  093da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  093e0	50		 push	 eax
  093e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  093e8	83 ec 18	 sub	 esp, 24			; 00000018H
  093eb	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 3059 : 	int num = GetMenuItemCount ();

  093ee	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  093f1	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  093f6	89 45 f0	 mov	 DWORD PTR _num$[ebp], eax

; 3060 : 	CString name;

  093f9	8d 4d ec	 lea	 ecx, DWORD PTR _name$[ebp]
  093fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  09402	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3061 : 	
; 3062 : 	for (int i=0; i<num; i++)

  09409	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$200493[ebp], 0
  09410	eb 09		 jmp	 SHORT $L200494
$L200495:
  09412	8b 45 e8	 mov	 eax, DWORD PTR _i$200493[ebp]
  09415	83 c0 01	 add	 eax, 1
  09418	89 45 e8	 mov	 DWORD PTR _i$200493[ebp], eax
$L200494:
  0941b	8b 4d e8	 mov	 ecx, DWORD PTR _i$200493[ebp]
  0941e	3b 4d f0	 cmp	 ecx, DWORD PTR _num$[ebp]
  09421	7d 4c		 jge	 SHORT $L200496

; 3063 : 	{
; 3064 : 		GetMenuString (i, name, MF_BYPOSITION);

  09423	68 00 04 00 00	 push	 1024			; 00000400H
  09428	8d 55 ec	 lea	 edx, DWORD PTR _name$[ebp]
  0942b	52		 push	 edx
  0942c	8b 45 e8	 mov	 eax, DWORD PTR _i$200493[ebp]
  0942f	50		 push	 eax
  09430	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  09433	e8 00 00 00 00	 call	 ?GetMenuStringA@CMenu@@QBEHIAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; CMenu::GetMenuStringA

; 3065 : 		if (name.Compare (lpszSubMenuName) == 0)

  09438	8b 4d 08	 mov	 ecx, DWORD PTR _lpszSubMenuName$[ebp]
  0943b	51		 push	 ecx
  0943c	8d 4d ec	 lea	 ecx, DWORD PTR _name$[ebp]
  0943f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  09445	85 c0		 test	 eax, eax
  09447	75 24		 jne	 SHORT $L200497

; 3066 : 		{
; 3067 : 			return CMenu::GetSubMenu (i);

  09449	8b 55 e8	 mov	 edx, DWORD PTR _i$200493[ebp]
  0944c	52		 push	 edx
  0944d	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  09450	e8 00 00 00 00	 call	 ?GetSubMenu@CMenu@@QBEPAV1@H@Z ; CMenu::GetSubMenu
  09455	89 45 e4	 mov	 DWORD PTR $T203100[ebp], eax
  09458	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0945f	8d 4d ec	 lea	 ecx, DWORD PTR _name$[ebp]
  09462	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  09468	8b 45 e4	 mov	 eax, DWORD PTR $T203100[ebp]
  0946b	eb 1c		 jmp	 SHORT $L200490
$L200497:

; 3068 : 		}
; 3069 : 	}

  0946d	eb a3		 jmp	 SHORT $L200495
$L200496:

; 3070 : 	
; 3071 : 	return NULL;

  0946f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T203101[ebp], 0
  09476	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0947d	8d 4d ec	 lea	 ecx, DWORD PTR _name$[ebp]
  09480	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  09486	8b 45 e0	 mov	 eax, DWORD PTR $T203101[ebp]
$L200490:

; 3072 : }

  09489	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0948c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09493	8b e5		 mov	 esp, ebp
  09495	5d		 pop	 ebp
  09496	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L203102:
  0064b	8d 4d ec	 lea	 ecx, DWORD PTR _name$[ebp]
  0064e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z:
  00654	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203104
  00659	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetSubMenu@BCMenu@@QAEPAVCMenu@@PBD@Z ENDP		; BCMenu::GetSubMenu
PUBLIC	?GetSubBCMenu@BCMenu@@QAEPAV1@PAD@Z		; BCMenu::GetSubBCMenu
PUBLIC	?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z		; BCMenu::GetSubBCMenu
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203109 = -20						; size = 4
$T203108 = -16						; size = 4
_wszUtf8$ = -12						; size = 4
_len$ = -8						; size = 4
_pMenu$ = -4						; size = 4
_pText$ = 8						; size = 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PAD@Z PROC NEAR		; BCMenu::GetSubBCMenu
; _this$ = ecx

; 3075 : {

  094a0	55		 push	 ebp
  094a1	8b ec		 mov	 ebp, esp
  094a3	83 ec 18	 sub	 esp, 24			; 00000018H
  094a6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3076 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  094a9	6a 00		 push	 0
  094ab	6a 00		 push	 0
  094ad	6a ff		 push	 -1
  094af	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  094b2	50		 push	 eax
  094b3	6a 00		 push	 0
  094b5	6a 00		 push	 0
  094b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  094bd	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 3077 : 	wchar_t* wszUtf8 = new wchar_t[len];

  094c0	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  094c3	d1 e1		 shl	 ecx, 1
  094c5	51		 push	 ecx
  094c6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  094cb	83 c4 04	 add	 esp, 4
  094ce	89 45 f0	 mov	 DWORD PTR $T203108[ebp], eax
  094d1	8b 55 f0	 mov	 edx, DWORD PTR $T203108[ebp]
  094d4	89 55 f4	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3078 : 	memset(wszUtf8, 0, len * 2);

  094d7	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  094da	d1 e0		 shl	 eax, 1
  094dc	50		 push	 eax
  094dd	6a 00		 push	 0
  094df	8b 4d f4	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  094e2	51		 push	 ecx
  094e3	e8 00 00 00 00	 call	 _memset
  094e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3079 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);	

  094eb	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  094ee	52		 push	 edx
  094ef	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  094f2	50		 push	 eax
  094f3	6a ff		 push	 -1
  094f5	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  094f8	51		 push	 ecx
  094f9	6a 00		 push	 0
  094fb	6a 00		 push	 0
  094fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 3080 : 	
; 3081 : 	BCMenu* pMenu = GetSubBCMenu( wszUtf8);

  09503	8b 55 f4	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  09506	52		 push	 edx
  09507	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0950a	e8 00 00 00 00	 call	 ?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z ; BCMenu::GetSubBCMenu
  0950f	89 45 fc	 mov	 DWORD PTR _pMenu$[ebp], eax

; 3082 : 	delete[] wszUtf8;

  09512	8b 45 f4	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  09515	89 45 ec	 mov	 DWORD PTR $T203109[ebp], eax
  09518	8b 4d ec	 mov	 ecx, DWORD PTR $T203109[ebp]
  0951b	51		 push	 ecx
  0951c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  09521	83 c4 04	 add	 esp, 4

; 3083 : 
; 3084 : 	return pMenu;

  09524	8b 45 fc	 mov	 eax, DWORD PTR _pMenu$[ebp]

; 3085 : }

  09527	8b e5		 mov	 esp, ebp
  09529	5d		 pop	 ebp
  0952a	c2 04 00	 ret	 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PAD@Z ENDP		; BCMenu::GetSubBCMenu
; Function compile flags: /Odt
_this$ = -20						; size = 4
_flag$200521 = -16					; size = 4
_bchmenu$200517 = -12					; size = 4
_ptr$200519 = -8					; size = 4
_mdata$ = -4						; size = 4
_lpszSubMenuName$ = 8					; size = 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z PROC NEAR		; BCMenu::GetSubBCMenu
; _this$ = ecx

; 3088 : {

  09530	55		 push	 ebp
  09531	8b ec		 mov	 ebp, esp
  09533	83 ec 14	 sub	 esp, 20			; 00000014H
  09536	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3089 : 	BCMenuData *mdata;
; 3090 : 	mdata=FindMenuOption(lpszSubMenuName);

  09539	8b 45 08	 mov	 eax, DWORD PTR _lpszSubMenuName$[ebp]
  0953c	50		 push	 eax
  0953d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  09540	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAVBCMenuData@@PA_W@Z ; BCMenu::FindMenuOption
  09545	89 45 fc	 mov	 DWORD PTR _mdata$[ebp], eax

; 3091 : 	if(mdata){

  09548	83 7d fc 00	 cmp	 DWORD PTR _mdata$[ebp], 0
  0954c	74 37		 je	 SHORT $L200516

; 3092 : 		HMENU bchmenu=(HMENU)mdata->nID;

  0954e	8b 4d fc	 mov	 ecx, DWORD PTR _mdata$[ebp]
  09551	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  09554	89 55 f4	 mov	 DWORD PTR _bchmenu$200517[ebp], edx

; 3093 : 		CMenu *ptr=FromHandle(bchmenu);

  09557	8b 45 f4	 mov	 eax, DWORD PTR _bchmenu$200517[ebp]
  0955a	50		 push	 eax
  0955b	e8 00 00 00 00	 call	 ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z ; CMenu::FromHandle
  09560	89 45 f8	 mov	 DWORD PTR _ptr$200519[ebp], eax

; 3094 : 		if(ptr){

  09563	83 7d f8 00	 cmp	 DWORD PTR _ptr$200519[ebp], 0
  09567	74 1c		 je	 SHORT $L200516

; 3095 : 			BOOL flag=ptr->IsKindOf(RUNTIME_CLASS( BCMenu ));

  09569	e8 00 00 00 00	 call	 ?GetThisClass@BCMenu@@SGPAUCRuntimeClass@@XZ ; BCMenu::GetThisClass
  0956e	50		 push	 eax
  0956f	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$200519[ebp]
  09572	e8 00 00 00 00	 call	 ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ; CObject::IsKindOf
  09577	89 45 f0	 mov	 DWORD PTR _flag$200521[ebp], eax

; 3096 : 			if(flag)return((BCMenu *)ptr);

  0957a	83 7d f0 00	 cmp	 DWORD PTR _flag$200521[ebp], 0
  0957e	74 05		 je	 SHORT $L200516
  09580	8b 45 f8	 mov	 eax, DWORD PTR _ptr$200519[ebp]
  09583	eb 02		 jmp	 SHORT $L200514
$L200516:

; 3097 : 		}
; 3098 : 	}
; 3099 : 	return NULL;

  09585	33 c0		 xor	 eax, eax
$L200514:

; 3100 : }

  09587	8b e5		 mov	 esp, ebp
  09589	5d		 pop	 ebp
  0958a	c2 04 00	 ret	 4
?GetSubBCMenu@BCMenu@@QAEPAV1@PA_W@Z ENDP		; BCMenu::GetSubBCMenu
_TEXT	ENDS
PUBLIC	?GetMenuPosition@BCMenu@@QAEHPAD@Z		; BCMenu::GetMenuPosition
PUBLIC	?GetMenuPosition@BCMenu@@QAEHPA_W@Z		; BCMenu::GetMenuPosition
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203113 = -20						; size = 4
$T203112 = -16						; size = 4
_iRet$ = -12						; size = 4
_wszUtf8$ = -8						; size = 4
_len$ = -4						; size = 4
_pText$ = 8						; size = 4
?GetMenuPosition@BCMenu@@QAEHPAD@Z PROC NEAR		; BCMenu::GetMenuPosition
; _this$ = ecx

; 3106 : {

  09590	55		 push	 ebp
  09591	8b ec		 mov	 ebp, esp
  09593	83 ec 18	 sub	 esp, 24			; 00000018H
  09596	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3107 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  09599	6a 00		 push	 0
  0959b	6a 00		 push	 0
  0959d	6a ff		 push	 -1
  0959f	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  095a2	50		 push	 eax
  095a3	6a 00		 push	 0
  095a5	6a 00		 push	 0
  095a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  095ad	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 3108 : 	wchar_t* wszUtf8 = new wchar_t[len];

  095b0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  095b3	d1 e1		 shl	 ecx, 1
  095b5	51		 push	 ecx
  095b6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  095bb	83 c4 04	 add	 esp, 4
  095be	89 45 f0	 mov	 DWORD PTR $T203112[ebp], eax
  095c1	8b 55 f0	 mov	 edx, DWORD PTR $T203112[ebp]
  095c4	89 55 f8	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3109 : 	memset(wszUtf8, 0, len * 2);

  095c7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  095ca	d1 e0		 shl	 eax, 1
  095cc	50		 push	 eax
  095cd	6a 00		 push	 0
  095cf	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  095d2	51		 push	 ecx
  095d3	e8 00 00 00 00	 call	 _memset
  095d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3110 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);

  095db	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  095de	52		 push	 edx
  095df	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  095e2	50		 push	 eax
  095e3	6a ff		 push	 -1
  095e5	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  095e8	51		 push	 ecx
  095e9	6a 00		 push	 0
  095eb	6a 00		 push	 0
  095ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 3111 : 	
; 3112 : 	int iRet = GetMenuPosition( wszUtf8);

  095f3	8b 55 f8	 mov	 edx, DWORD PTR _wszUtf8$[ebp]
  095f6	52		 push	 edx
  095f7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  095fa	e8 00 00 00 00	 call	 ?GetMenuPosition@BCMenu@@QAEHPA_W@Z ; BCMenu::GetMenuPosition
  095ff	89 45 f4	 mov	 DWORD PTR _iRet$[ebp], eax

; 3113 : 	delete[] wszUtf8;

  09602	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  09605	89 45 ec	 mov	 DWORD PTR $T203113[ebp], eax
  09608	8b 4d ec	 mov	 ecx, DWORD PTR $T203113[ebp]
  0960b	51		 push	 ecx
  0960c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  09611	83 c4 04	 add	 esp, 4

; 3114 : 
; 3115 : 	return iRet;

  09614	8b 45 f4	 mov	 eax, DWORD PTR _iRet$[ebp]

; 3116 : }

  09617	8b e5		 mov	 esp, ebp
  09619	5d		 pop	 ebp
  0961a	c2 04 00	 ret	 4
?GetMenuPosition@BCMenu@@QAEHPAD@Z ENDP			; BCMenu::GetMenuPosition
; Function compile flags: /Odt
_this$ = -20						; size = 4
_szWide$200548 = -16					; size = 4
_j$ = -12						; size = 4
_psubmenu$ = -8						; size = 4
_i$ = -4						; size = 4
_pText$ = 8						; size = 4
?GetMenuPosition@BCMenu@@QAEHPA_W@Z PROC NEAR		; BCMenu::GetMenuPosition
; _this$ = ecx

; 3119 : {

  09620	55		 push	 ebp
  09621	8b ec		 mov	 ebp, esp
  09623	83 ec 14	 sub	 esp, 20			; 00000014H
  09626	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3120 : 	int i,j;
; 3121 : 	BCMenu* psubmenu;
; 3122 : 	for(i=0;i<(int)(GetMenuItemCount());++i)

  09629	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  09630	eb 09		 jmp	 SHORT $L200543
$L200544:
  09632	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  09635	83 c0 01	 add	 eax, 1
  09638	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L200543:
  0963b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0963e	e8 00 00 00 00	 call	 ?GetMenuItemCount@CMenu@@QBEIXZ ; CMenu::GetMenuItemCount
  09643	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  09646	7d 77		 jge	 SHORT $L200545

; 3123 : 	{
; 3124 : 		psubmenu=(BCMenu *)GetSubMenu(i);

  09648	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0964b	51		 push	 ecx
  0964c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0964f	e8 00 00 00 00	 call	 ?GetSubMenu@BCMenu@@QAEPAVCMenu@@H@Z ; BCMenu::GetSubMenu
  09654	89 45 f8	 mov	 DWORD PTR _psubmenu$[ebp], eax

; 3125 : 		if(!psubmenu)

  09657	83 7d f8 00	 cmp	 DWORD PTR _psubmenu$[ebp], 0
  0965b	75 5d		 jne	 SHORT $L200547

; 3126 : 		{
; 3127 : 			const wchar_t *szWide;//SK: we use const to prevent misuse of this Ptr
; 3128 : 			for(j=0;j<=m_MenuList.GetUpperBound();++j)

  0965d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  09664	eb 09		 jmp	 SHORT $L200549
$L200550:
  09666	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  09669	83 c2 01	 add	 edx, 1
  0966c	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx
$L200549:
  0966f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  09672	83 c1 08	 add	 ecx, 8
  09675	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  0967a	39 45 f4	 cmp	 DWORD PTR _j$[ebp], eax
  0967d	7f 3b		 jg	 SHORT $L200547

; 3129 : 			{     
; 3130 : 				szWide = m_MenuList[j]->GetWideString ();

  0967f	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  09682	50		 push	 eax
  09683	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  09686	83 c1 08	 add	 ecx, 8
  09689	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  0968e	8b 08		 mov	 ecx, DWORD PTR [eax]
  09690	e8 00 00 00 00	 call	 ?GetWideString@BCMenuData@@QAEPB_WXZ ; BCMenuData::GetWideString
  09695	89 45 f0	 mov	 DWORD PTR _szWide$200548[ebp], eax

; 3131 : 				if(szWide && !wcscmp(pText,szWide))//SK: modified for dynamic allocation

  09698	83 7d f0 00	 cmp	 DWORD PTR _szWide$200548[ebp], 0
  0969c	74 1a		 je	 SHORT $L200552
  0969e	8b 4d f0	 mov	 ecx, DWORD PTR _szWide$200548[ebp]
  096a1	51		 push	 ecx
  096a2	8b 55 08	 mov	 edx, DWORD PTR _pText$[ebp]
  096a5	52		 push	 edx
  096a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscmp
  096ac	83 c4 08	 add	 esp, 8
  096af	85 c0		 test	 eax, eax
  096b1	75 05		 jne	 SHORT $L200552

; 3132 : 					return j;

  096b3	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  096b6	eb 0a		 jmp	 SHORT $L200538
$L200552:

; 3133 : 			}

  096b8	eb ac		 jmp	 SHORT $L200550
$L200547:

; 3134 : 		}
; 3135 : 	}

  096ba	e9 73 ff ff ff	 jmp	 $L200544
$L200545:

; 3136 : 	// means no found;
; 3137 : 	return -1;

  096bf	83 c8 ff	 or	 eax, -1
$L200538:

; 3138 : }

  096c2	8b e5		 mov	 esp, ebp
  096c4	5d		 pop	 ebp
  096c5	c2 04 00	 ret	 4
?GetMenuPosition@BCMenu@@QAEHPA_W@Z ENDP		; BCMenu::GetMenuPosition
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
PUBLIC	?RemoveMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z	; BCMenu::RemoveMenu
PUBLIC	?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z	; BCMenu::RemoveMenu
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203119 = -20						; size = 4
$T203118 = -16						; size = 4
_iRet$ = -12						; size = 4
_wszUtf8$ = -8						; size = 4
_len$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?RemoveMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z PROC NEAR	; BCMenu::RemoveMenu
; _this$ = ecx

; 3141 : {

  096d0	55		 push	 ebp
  096d1	8b ec		 mov	 ebp, esp
  096d3	83 ec 18	 sub	 esp, 24			; 00000018H
  096d6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3142 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  096d9	6a 00		 push	 0
  096db	6a 00		 push	 0
  096dd	6a ff		 push	 -1
  096df	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  096e2	50		 push	 eax
  096e3	6a 00		 push	 0
  096e5	6a 00		 push	 0
  096e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  096ed	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 3143 : 	wchar_t* wszUtf8 = new wchar_t[len];

  096f0	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  096f3	d1 e1		 shl	 ecx, 1
  096f5	51		 push	 ecx
  096f6	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  096fb	83 c4 04	 add	 esp, 4
  096fe	89 45 f0	 mov	 DWORD PTR $T203118[ebp], eax
  09701	8b 55 f0	 mov	 edx, DWORD PTR $T203118[ebp]
  09704	89 55 f8	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3144 : 	memset(wszUtf8, 0, len * 2);

  09707	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0970a	d1 e0		 shl	 eax, 1
  0970c	50		 push	 eax
  0970d	6a 00		 push	 0
  0970f	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  09712	51		 push	 ecx
  09713	e8 00 00 00 00	 call	 _memset
  09718	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3145 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);

  0971b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0971e	52		 push	 edx
  0971f	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  09722	50		 push	 eax
  09723	6a ff		 push	 -1
  09725	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  09728	51		 push	 ecx
  09729	6a 00		 push	 0
  0972b	6a 00		 push	 0
  0972d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 3146 : 
; 3147 : 	int iRet = RemoveMenu( wszUtf8, sPos);

  09733	8b 55 0c	 mov	 edx, DWORD PTR _sPos$[ebp]
  09736	52		 push	 edx
  09737	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0973a	50		 push	 eax
  0973b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0973e	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ; BCMenu::RemoveMenu
  09743	89 45 f4	 mov	 DWORD PTR _iRet$[ebp], eax

; 3148 : 	delete[] wszUtf8;

  09746	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  09749	89 4d ec	 mov	 DWORD PTR $T203119[ebp], ecx
  0974c	8b 55 ec	 mov	 edx, DWORD PTR $T203119[ebp]
  0974f	52		 push	 edx
  09750	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  09755	83 c4 04	 add	 esp, 4

; 3149 : 
; 3150 : 	return iRet;

  09758	8b 45 f4	 mov	 eax, DWORD PTR _iRet$[ebp]

; 3151 : }

  0975b	8b e5		 mov	 esp, ebp
  0975d	5d		 pop	 ebp
  0975e	c2 08 00	 ret	 8
?RemoveMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ENDP	; BCMenu::RemoveMenu
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 37   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 41   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nPos$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z PROC NEAR ; BCMenu::RemoveMenu
; _this$ = ecx

; 3154 : {

  09770	55		 push	 ebp
  09771	8b ec		 mov	 ebp, esp
  09773	83 ec 08	 sub	 esp, 8
  09776	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3155 : 	int nPos = GetMenuPosition(pText);

  09779	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  0977c	50		 push	 eax
  0977d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  09780	e8 00 00 00 00	 call	 ?GetMenuPosition@BCMenu@@QAEHPA_W@Z ; BCMenu::GetMenuPosition
  09785	89 45 fc	 mov	 DWORD PTR _nPos$[ebp], eax

; 3156 : 	if(nPos != -1)

  09788	83 7d fc ff	 cmp	 DWORD PTR _nPos$[ebp], -1
  0978c	74 11		 je	 SHORT $L200571

; 3157 : 	{
; 3158 : 		RemoveMenu(nPos, MF_BYPOSITION);

  0978e	68 00 04 00 00	 push	 1024			; 00000400H
  09793	8b 4d fc	 mov	 ecx, DWORD PTR _nPos$[ebp]
  09796	51		 push	 ecx
  09797	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0979a	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
$L200571:

; 3159 : 	}
; 3160 : 	if(sPos == BCMENU_HEAD)

  0979f	83 7d 0c 01	 cmp	 DWORD PTR _sPos$[ebp], 1
  097a3	75 16		 jne	 SHORT $L200572

; 3161 : 	{
; 3162 : 		ASSERT(nPos - 1 >= 0);
; 3163 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  097a5	68 00 04 00 00	 push	 1024			; 00000400H
  097aa	8b 55 fc	 mov	 edx, DWORD PTR _nPos$[ebp]
  097ad	83 ea 01	 sub	 edx, 1
  097b0	52		 push	 edx
  097b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  097b4	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu

; 3164 : 	}
; 3165 : 	else if(sPos == BCMENU_TAIL)

  097b9	eb 4a		 jmp	 SHORT $L200574
$L200572:
  097bb	83 7d 0c 02	 cmp	 DWORD PTR _sPos$[ebp], 2
  097bf	75 16		 jne	 SHORT $L200575

; 3166 : 	{
; 3167 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  097c1	68 00 04 00 00	 push	 1024			; 00000400H
  097c6	8b 45 fc	 mov	 eax, DWORD PTR _nPos$[ebp]
  097c9	83 e8 01	 sub	 eax, 1
  097cc	50		 push	 eax
  097cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  097d0	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu

; 3168 : 	}
; 3169 : 	else if(sPos == BCMENU_BOTH)

  097d5	eb 2e		 jmp	 SHORT $L200574
$L200575:
  097d7	83 7d 0c 03	 cmp	 DWORD PTR _sPos$[ebp], 3
  097db	75 28		 jne	 SHORT $L200574

; 3170 : 	{
; 3171 : 		// remove the end first;
; 3172 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  097dd	68 00 04 00 00	 push	 1024			; 00000400H
  097e2	8b 4d fc	 mov	 ecx, DWORD PTR _nPos$[ebp]
  097e5	83 e9 01	 sub	 ecx, 1
  097e8	51		 push	 ecx
  097e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  097ec	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu

; 3173 : 		// remove the head;
; 3174 : 		ASSERT(nPos - 1 >= 0);
; 3175 : 		RemoveMenu(nPos-1, MF_BYPOSITION);

  097f1	68 00 04 00 00	 push	 1024			; 00000400H
  097f6	8b 55 fc	 mov	 edx, DWORD PTR _nPos$[ebp]
  097f9	83 ea 01	 sub	 edx, 1
  097fc	52		 push	 edx
  097fd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  09800	e8 00 00 00 00	 call	 ?RemoveMenu@BCMenu@@QAEHII@Z ; BCMenu::RemoveMenu
$L200574:

; 3176 : 	}
; 3177 : 	return nPos;

  09805	8b 45 fc	 mov	 eax, DWORD PTR _nPos$[ebp]

; 3178 : }

  09808	8b e5		 mov	 esp, ebp
  0980a	5d		 pop	 ebp
  0980b	c2 08 00	 ret	 8
?RemoveMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ENDP	; BCMenu::RemoveMenu
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT
; _this$ = ecx

; 43   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
PUBLIC	?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z	; BCMenu::DeleteMenu
PUBLIC	?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z	; BCMenu::DeleteMenu
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T203131 = -20						; size = 4
$T203130 = -16						; size = 4
_iRet$ = -12						; size = 4
_wszUtf8$ = -8						; size = 4
_len$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z PROC NEAR	; BCMenu::DeleteMenu
; _this$ = ecx

; 3181 : {	

  09810	55		 push	 ebp
  09811	8b ec		 mov	 ebp, esp
  09813	83 ec 18	 sub	 esp, 24			; 00000018H
  09816	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3182 : 	int len=MultiByteToWideChar(CP_ACP, 0,pText, -1, NULL,0);

  09819	6a 00		 push	 0
  0981b	6a 00		 push	 0
  0981d	6a ff		 push	 -1
  0981f	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  09822	50		 push	 eax
  09823	6a 00		 push	 0
  09825	6a 00		 push	 0
  09827	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0982d	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 3183 : 	wchar_t* wszUtf8 = new wchar_t[len];

  09830	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  09833	d1 e1		 shl	 ecx, 1
  09835	51		 push	 ecx
  09836	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0983b	83 c4 04	 add	 esp, 4
  0983e	89 45 f0	 mov	 DWORD PTR $T203130[ebp], eax
  09841	8b 55 f0	 mov	 edx, DWORD PTR $T203130[ebp]
  09844	89 55 f8	 mov	 DWORD PTR _wszUtf8$[ebp], edx

; 3184 : 	memset(wszUtf8, 0, len * 2);

  09847	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0984a	d1 e0		 shl	 eax, 1
  0984c	50		 push	 eax
  0984d	6a 00		 push	 0
  0984f	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  09852	51		 push	 ecx
  09853	e8 00 00 00 00	 call	 _memset
  09858	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3185 : 	MultiByteToWideChar(CP_ACP, 0, pText, -1, (LPWSTR)wszUtf8, len);

  0985b	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  0985e	52		 push	 edx
  0985f	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  09862	50		 push	 eax
  09863	6a ff		 push	 -1
  09865	8b 4d 08	 mov	 ecx, DWORD PTR _pText$[ebp]
  09868	51		 push	 ecx
  09869	6a 00		 push	 0
  0986b	6a 00		 push	 0
  0986d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 3186 : 
; 3187 : 	int iRet = DeleteMenu( wszUtf8, sPos);

  09873	8b 55 0c	 mov	 edx, DWORD PTR _sPos$[ebp]
  09876	52		 push	 edx
  09877	8b 45 f8	 mov	 eax, DWORD PTR _wszUtf8$[ebp]
  0987a	50		 push	 eax
  0987b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0987e	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ; BCMenu::DeleteMenu
  09883	89 45 f4	 mov	 DWORD PTR _iRet$[ebp], eax

; 3188 : 	delete[] wszUtf8;

  09886	8b 4d f8	 mov	 ecx, DWORD PTR _wszUtf8$[ebp]
  09889	89 4d ec	 mov	 DWORD PTR $T203131[ebp], ecx
  0988c	8b 55 ec	 mov	 edx, DWORD PTR $T203131[ebp]
  0988f	52		 push	 edx
  09890	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  09895	83 c4 04	 add	 esp, 4

; 3189 : 
; 3190 : 	return iRet;

  09898	8b 45 f4	 mov	 eax, DWORD PTR _iRet$[ebp]

; 3191 : }

  0989b	8b e5		 mov	 esp, ebp
  0989d	5d		 pop	 ebp
  0989e	c2 08 00	 ret	 8
?DeleteMenu@BCMenu@@QAEHPADW4BC_Seperator@@@Z ENDP	; BCMenu::DeleteMenu
; Function compile flags: /Odt
_this$ = -8						; size = 4
_nPos$ = -4						; size = 4
_pText$ = 8						; size = 4
_sPos$ = 12						; size = 4
?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z PROC NEAR ; BCMenu::DeleteMenu
; _this$ = ecx

; 3194 : {

  098b0	55		 push	 ebp
  098b1	8b ec		 mov	 ebp, esp
  098b3	83 ec 08	 sub	 esp, 8
  098b6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3195 : 	int nPos = GetMenuPosition(pText);

  098b9	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  098bc	50		 push	 eax
  098bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  098c0	e8 00 00 00 00	 call	 ?GetMenuPosition@BCMenu@@QAEHPA_W@Z ; BCMenu::GetMenuPosition
  098c5	89 45 fc	 mov	 DWORD PTR _nPos$[ebp], eax

; 3196 : 	if(nPos != -1)

  098c8	83 7d fc ff	 cmp	 DWORD PTR _nPos$[ebp], -1
  098cc	74 11		 je	 SHORT $L200597

; 3197 : 	{
; 3198 : 		DeleteMenu(nPos, MF_BYPOSITION);

  098ce	68 00 04 00 00	 push	 1024			; 00000400H
  098d3	8b 4d fc	 mov	 ecx, DWORD PTR _nPos$[ebp]
  098d6	51		 push	 ecx
  098d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  098da	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
$L200597:

; 3199 : 	}
; 3200 : 	if(sPos == BCMENU_HEAD)

  098df	83 7d 0c 01	 cmp	 DWORD PTR _sPos$[ebp], 1
  098e3	75 16		 jne	 SHORT $L200598

; 3201 : 	{
; 3202 : 		ASSERT(nPos - 1 >= 0);
; 3203 : 		DeleteMenu(nPos-1, MF_BYPOSITION);

  098e5	68 00 04 00 00	 push	 1024			; 00000400H
  098ea	8b 55 fc	 mov	 edx, DWORD PTR _nPos$[ebp]
  098ed	83 ea 01	 sub	 edx, 1
  098f0	52		 push	 edx
  098f1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  098f4	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 3204 : 	}
; 3205 : 	else if(sPos == BCMENU_TAIL)

  098f9	eb 44		 jmp	 SHORT $L200600
$L200598:
  098fb	83 7d 0c 02	 cmp	 DWORD PTR _sPos$[ebp], 2
  098ff	75 13		 jne	 SHORT $L200601

; 3206 : 	{
; 3207 : 		DeleteMenu(nPos, MF_BYPOSITION);

  09901	68 00 04 00 00	 push	 1024			; 00000400H
  09906	8b 45 fc	 mov	 eax, DWORD PTR _nPos$[ebp]
  09909	50		 push	 eax
  0990a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0990d	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 3208 : 	}
; 3209 : 	else if(sPos == BCMENU_BOTH)

  09912	eb 2b		 jmp	 SHORT $L200600
$L200601:
  09914	83 7d 0c 03	 cmp	 DWORD PTR _sPos$[ebp], 3
  09918	75 25		 jne	 SHORT $L200600

; 3210 : 	{
; 3211 : 		// remove the end first;
; 3212 : 		DeleteMenu(nPos, MF_BYPOSITION);

  0991a	68 00 04 00 00	 push	 1024			; 00000400H
  0991f	8b 4d fc	 mov	 ecx, DWORD PTR _nPos$[ebp]
  09922	51		 push	 ecx
  09923	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  09926	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu

; 3213 : 		// remove the head;
; 3214 : 		ASSERT(nPos - 1 >= 0);
; 3215 : 		DeleteMenu(nPos-1, MF_BYPOSITION);

  0992b	68 00 04 00 00	 push	 1024			; 00000400H
  09930	8b 55 fc	 mov	 edx, DWORD PTR _nPos$[ebp]
  09933	83 ea 01	 sub	 edx, 1
  09936	52		 push	 edx
  09937	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0993a	e8 00 00 00 00	 call	 ?DeleteMenu@BCMenu@@QAEHII@Z ; BCMenu::DeleteMenu
$L200600:

; 3216 : 	}
; 3217 : 	return nPos;

  0993f	8b 45 fc	 mov	 eax, DWORD PTR _nPos$[ebp]

; 3218 : }

  09942	8b e5		 mov	 esp, ebp
  09944	5d		 pop	 ebp
  09945	c2 08 00	 ret	 8
?DeleteMenu@BCMenu@@QAEHPA_WW4BC_Seperator@@@Z ENDP	; BCMenu::DeleteMenu
_TEXT	ENDS
PUBLIC	?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::SetMenuText
xdata$x	SEGMENT
$T203141 DD	0ffffffffH
	DD	FLAT:$L203136
$T203139 DD	019930520H
	DD	01H
	DD	FLAT:$T203141
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -48						; size = 4
tv139 = -44						; size = 4
_this$ = -40						; size = 4
$T203135 = -36						; size = 4
$T203134 = -32						; size = 4
_uiLoc$200616 = -28					; size = 4
_pMenu$200617 = -24					; size = 4
_numMenuItems$200613 = -20				; size = 4
_returnflag$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_string$ = 12						; size = 4
_nFlags$ = 16						; size = 4
?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z PROC NEAR ; BCMenu::SetMenuText
; _this$ = ecx

; 3222 : {

  09950	55		 push	 ebp
  09951	8b ec		 mov	 ebp, esp
  09953	6a ff		 push	 -1
  09955	68 00 00 00 00	 push	 __ehhandler$?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z
  0995a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09960	50		 push	 eax
  09961	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09968	83 ec 24	 sub	 esp, 36			; 00000024H
  0996b	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  0996e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3223 : 	BOOL returnflag=FALSE;

  09975	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 0

; 3224 : 	
; 3225 : 	if(MF_BYPOSITION&nFlags)

  0997c	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0997f	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  09984	74 3f		 je	 SHORT $L200612

; 3226 : 	{
; 3227 : 		UINT numMenuItems = m_MenuList.GetUpperBound();

  09986	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  09989	83 c1 08	 add	 ecx, 8
  0998c	e8 00 00 00 00	 call	 ?GetUpperBound@CPtrArray@@QBEHXZ ; CPtrArray::GetUpperBound
  09991	89 45 ec	 mov	 DWORD PTR _numMenuItems$200613[ebp], eax

; 3228 : 		if(id<=numMenuItems){

  09994	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  09997	3b 4d ec	 cmp	 ecx, DWORD PTR _numMenuItems$200613[ebp]
  0999a	77 27		 ja	 SHORT $L200614

; 3229 : #ifdef UNICODE
; 3230 : 			m_MenuList[id]->SetWideString((LPCTSTR)string);
; 3231 : #else
; 3232 : 			m_MenuList[id]->SetAnsiString(string);

  0999c	8d 4d 0c	 lea	 ecx, DWORD PTR _string$[ebp]
  0999f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  099a5	50		 push	 eax
  099a6	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  099a9	52		 push	 edx
  099aa	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  099ad	83 c1 08	 add	 ecx, 8
  099b0	e8 00 00 00 00	 call	 ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
  099b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  099b7	e8 00 00 00 00	 call	 ?SetAnsiString@BCMenuData@@QAEXPBD@Z ; BCMenuData::SetAnsiString

; 3233 : #endif
; 3234 : 			returnflag=TRUE;

  099bc	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _returnflag$[ebp], 1
$L200614:

; 3235 : 		}
; 3236 : 	}
; 3237 : 	else{

  099c3	eb 46		 jmp	 SHORT $L200615
$L200612:

; 3238 : 		int uiLoc;
; 3239 : 		BCMenu* pMenu = FindMenuOption(id,uiLoc);

  099c5	8d 45 e4	 lea	 eax, DWORD PTR _uiLoc$200616[ebp]
  099c8	50		 push	 eax
  099c9	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  099cc	51		 push	 ecx
  099cd	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  099d0	e8 00 00 00 00	 call	 ?FindMenuOption@BCMenu@@IAEPAV1@HAAH@Z ; BCMenu::FindMenuOption
  099d5	89 45 e8	 mov	 DWORD PTR _pMenu$200617[ebp], eax

; 3240 : 		if(NULL!=pMenu) returnflag = pMenu->SetMenuText(uiLoc,string);

  099d8	83 7d e8 00	 cmp	 DWORD PTR _pMenu$200617[ebp], 0
  099dc	74 2d		 je	 SHORT $L200615
  099de	68 00 04 00 00	 push	 1024			; 00000400H
  099e3	51		 push	 ecx
  099e4	8b cc		 mov	 ecx, esp
  099e6	89 65 e0	 mov	 DWORD PTR $T203134[ebp], esp
  099e9	8d 55 0c	 lea	 edx, DWORD PTR _string$[ebp]
  099ec	52		 push	 edx
  099ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  099f3	89 45 d4	 mov	 DWORD PTR tv139[ebp], eax
  099f6	8b 45 e4	 mov	 eax, DWORD PTR _uiLoc$200616[ebp]
  099f9	50		 push	 eax
  099fa	8b 4d e8	 mov	 ecx, DWORD PTR _pMenu$200617[ebp]
  099fd	e8 00 00 00 00	 call	 ?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ; BCMenu::SetMenuText
  09a02	89 45 d0	 mov	 DWORD PTR tv140[ebp], eax
  09a05	8b 4d d0	 mov	 ecx, DWORD PTR tv140[ebp]
  09a08	89 4d f0	 mov	 DWORD PTR _returnflag$[ebp], ecx
$L200615:

; 3241 : 	}
; 3242 : 	return(returnflag);

  09a0b	8b 55 f0	 mov	 edx, DWORD PTR _returnflag$[ebp]
  09a0e	89 55 dc	 mov	 DWORD PTR $T203135[ebp], edx
  09a11	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09a18	8d 4d 0c	 lea	 ecx, DWORD PTR _string$[ebp]
  09a1b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  09a21	8b 45 dc	 mov	 eax, DWORD PTR $T203135[ebp]

; 3243 : }

  09a24	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  09a27	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09a2e	8b e5		 mov	 esp, ebp
  09a30	5d		 pop	 ebp
  09a31	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L203136:
  0065e	8d 4d 0c	 lea	 ecx, DWORD PTR _string$[ebp]
  00661	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z:
  00667	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203139
  0066c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetMenuText@BCMenu@@QAEHIV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@I@Z ENDP ; BCMenu::SetMenuText
PUBLIC	??9CSize@@QBEHUtagSIZE@@@Z			; CSize::operator!=
PUBLIC	?Rectangle@CDC@@QAEHHHHH@Z			; CDC::Rectangle
PUBLIC	?CreateHatchBrush@CBrush@@QAEHHK@Z		; CBrush::CreateHatchBrush
EXTRN	??0CPen@@QAE@HHK@Z:NEAR				; CPen::CPen
xdata$x	SEGMENT
$T203151 DD	0ffffffffH
	DD	FLAT:$L203144
	DD	00H
	DD	FLAT:$L203145
	DD	00H
	DD	FLAT:$L203146
	DD	02H
	DD	FLAT:$L203147
$T203149 DD	019930520H
	DD	04H
	DD	FLAT:$T203151
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -112						; size = 4
$T203143 = -108						; size = 8
_background_brush$200642 = -100				; size = 8
_rect$200643 = -92					; size = 16
_fill_brush$ = -76					; size = 8
_pOldPen$ = -68						; size = 4
_pOldBrush$ = -64					; size = 4
_x1$ = -60						; size = 4
_m_newclrBack$ = -56					; size = 4
_border_pen$ = -52					; size = 8
_y1$ = -44						; size = 4
_x2$ = -40						; size = 4
_y2$ = -36						; size = 4
_pOldBitmap$ = -32					; size = 4
_bmpdc$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_bmp$ = 12						; size = 4
_bitmap_size$ = 16					; size = 8
_icon_size$ = 24					; size = 8
_fill$ = 32						; size = 4
_border$ = 36						; size = 4
_hatchstyle$ = 40					; size = 4
?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z PROC NEAR ; BCMenu::ColorBitmap
; _this$ = ecx

; 3247 : {

  09a40	55		 push	 ebp
  09a41	8b ec		 mov	 ebp, esp
  09a43	6a ff		 push	 -1
  09a45	68 00 00 00 00	 push	 __ehhandler$?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z
  09a4a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09a50	50		 push	 eax
  09a51	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09a58	83 ec 64	 sub	 esp, 100		; 00000064H
  09a5b	89 4d 90	 mov	 DWORD PTR _this$[ebp], ecx

; 3248 : 	CDC bmpdc;

  09a5e	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09a61	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  09a66	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3249 : 	COLORREF m_newclrBack;
; 3250 : 	int x1=0,y1=0,x2=bitmap_size.cx,y2=bitmap_size.cy;

  09a6d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _x1$[ebp], 0
  09a74	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _y1$[ebp], 0
  09a7b	8b 45 10	 mov	 eax, DWORD PTR _bitmap_size$[ebp]
  09a7e	89 45 d8	 mov	 DWORD PTR _x2$[ebp], eax
  09a81	8b 4d 14	 mov	 ecx, DWORD PTR _bitmap_size$[ebp+4]
  09a84	89 4d dc	 mov	 DWORD PTR _y2$[ebp], ecx

; 3251 : 
; 3252 : 	if(IsWinXPLuna())m_newclrBack=GetSysColor(COLOR_3DFACE);

  09a87	e8 00 00 00 00	 call	 ?IsWinXPLuna@BCMenu@@KAHXZ ; BCMenu::IsWinXPLuna
  09a8c	85 c0		 test	 eax, eax
  09a8e	74 0d		 je	 SHORT $L200637
  09a90	6a 0f		 push	 15			; 0000000fH
  09a92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09a98	89 45 c8	 mov	 DWORD PTR _m_newclrBack$[ebp], eax

; 3253 : 	else m_newclrBack=GetSysColor(COLOR_MENU);

  09a9b	eb 0b		 jmp	 SHORT $L200638
$L200637:
  09a9d	6a 04		 push	 4
  09a9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  09aa5	89 45 c8	 mov	 DWORD PTR _m_newclrBack$[ebp], eax
$L200638:

; 3254 : 
; 3255 : 	bmpdc.CreateCompatibleDC(pDC);

  09aa8	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  09aab	52		 push	 edx
  09aac	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09aaf	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 3256 : 
; 3257 : 	bmp.CreateCompatibleBitmap(pDC, icon_size.cx, icon_size.cy);	

  09ab4	8b 45 1c	 mov	 eax, DWORD PTR _icon_size$[ebp+4]
  09ab7	50		 push	 eax
  09ab8	8b 4d 18	 mov	 ecx, DWORD PTR _icon_size$[ebp]
  09abb	51		 push	 ecx
  09abc	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  09abf	52		 push	 edx
  09ac0	8b 4d 0c	 mov	 ecx, DWORD PTR _bmp$[ebp]
  09ac3	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 3258 : 	CBitmap* pOldBitmap = bmpdc.SelectObject(&bmp);

  09ac8	8b 45 0c	 mov	 eax, DWORD PTR _bmp$[ebp]
  09acb	50		 push	 eax
  09acc	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09acf	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  09ad4	89 45 e0	 mov	 DWORD PTR _pOldBitmap$[ebp], eax

; 3259 : 
; 3260 : 	if(bitmap_size!=icon_size){

  09ad7	8b 4d 18	 mov	 ecx, DWORD PTR _icon_size$[ebp]
  09ada	89 4d 94	 mov	 DWORD PTR $T203143[ebp], ecx
  09add	8b 55 1c	 mov	 edx, DWORD PTR _icon_size$[ebp+4]
  09ae0	89 55 98	 mov	 DWORD PTR $T203143[ebp+4], edx
  09ae3	8b 45 98	 mov	 eax, DWORD PTR $T203143[ebp+4]
  09ae6	50		 push	 eax
  09ae7	8b 4d 94	 mov	 ecx, DWORD PTR $T203143[ebp]
  09aea	51		 push	 ecx
  09aeb	8d 4d 10	 lea	 ecx, DWORD PTR _bitmap_size$[ebp]
  09aee	e8 00 00 00 00	 call	 ??9CSize@@QBEHUtagSIZE@@@Z ; CSize::operator!=
  09af3	85 c0		 test	 eax, eax
  09af5	0f 84 83 00 00
	00		 je	 $L200641

; 3261 : 		CBrush background_brush;

  09afb	8d 4d 9c	 lea	 ecx, DWORD PTR _background_brush$200642[ebp]
  09afe	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  09b03	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 3262 : 		background_brush.CreateSolidBrush(m_newclrBack);

  09b07	8b 55 c8	 mov	 edx, DWORD PTR _m_newclrBack$[ebp]
  09b0a	52		 push	 edx
  09b0b	8d 4d 9c	 lea	 ecx, DWORD PTR _background_brush$200642[ebp]
  09b0e	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 3263 : 		CRect rect(0,0, icon_size.cx, icon_size.cy);

  09b13	8b 45 1c	 mov	 eax, DWORD PTR _icon_size$[ebp+4]
  09b16	50		 push	 eax
  09b17	8b 4d 18	 mov	 ecx, DWORD PTR _icon_size$[ebp]
  09b1a	51		 push	 ecx
  09b1b	6a 00		 push	 0
  09b1d	6a 00		 push	 0
  09b1f	8d 4d a4	 lea	 ecx, DWORD PTR _rect$200643[ebp]
  09b22	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 3264 : 		bmpdc.FillRect(rect,&background_brush);

  09b27	8d 55 9c	 lea	 edx, DWORD PTR _background_brush$200642[ebp]
  09b2a	52		 push	 edx
  09b2b	8d 4d a4	 lea	 ecx, DWORD PTR _rect$200643[ebp]
  09b2e	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  09b33	50		 push	 eax
  09b34	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09b37	e8 00 00 00 00	 call	 ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ; CDC::FillRect

; 3265 : 		x1 = (icon_size.cx-bitmap_size.cx)/2;

  09b3c	8b 45 18	 mov	 eax, DWORD PTR _icon_size$[ebp]
  09b3f	2b 45 10	 sub	 eax, DWORD PTR _bitmap_size$[ebp]
  09b42	99		 cdq
  09b43	2b c2		 sub	 eax, edx
  09b45	d1 f8		 sar	 eax, 1
  09b47	89 45 c4	 mov	 DWORD PTR _x1$[ebp], eax

; 3266 : 		y1 = (icon_size.cy-bitmap_size.cy)/2;

  09b4a	8b 45 1c	 mov	 eax, DWORD PTR _icon_size$[ebp+4]
  09b4d	2b 45 14	 sub	 eax, DWORD PTR _bitmap_size$[ebp+4]
  09b50	99		 cdq
  09b51	2b c2		 sub	 eax, edx
  09b53	d1 f8		 sar	 eax, 1
  09b55	89 45 d4	 mov	 DWORD PTR _y1$[ebp], eax

; 3267 : 		x2 = x1+bitmap_size.cx;

  09b58	8b 45 c4	 mov	 eax, DWORD PTR _x1$[ebp]
  09b5b	03 45 10	 add	 eax, DWORD PTR _bitmap_size$[ebp]
  09b5e	89 45 d8	 mov	 DWORD PTR _x2$[ebp], eax

; 3268 : 		y2 = y1+bitmap_size.cy;

  09b61	8b 4d d4	 mov	 ecx, DWORD PTR _y1$[ebp]
  09b64	03 4d 14	 add	 ecx, DWORD PTR _bitmap_size$[ebp+4]
  09b67	89 4d dc	 mov	 DWORD PTR _y2$[ebp], ecx

; 3269 : 		background_brush.DeleteObject();

  09b6a	8d 4d 9c	 lea	 ecx, DWORD PTR _background_brush$200642[ebp]
  09b6d	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 3270 : 	}

  09b72	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  09b76	8d 4d 9c	 lea	 ecx, DWORD PTR _background_brush$200642[ebp]
  09b79	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L200641:

; 3271 : 	
; 3272 : 	CPen border_pen(PS_SOLID, 1, border);

  09b7e	8b 55 24	 mov	 edx, DWORD PTR _border$[ebp]
  09b81	52		 push	 edx
  09b82	6a 01		 push	 1
  09b84	6a 00		 push	 0
  09b86	8d 4d cc	 lea	 ecx, DWORD PTR _border_pen$[ebp]
  09b89	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen
  09b8e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3273 : 	CBrush fill_brush;

  09b92	8d 4d b4	 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  09b95	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  09b9a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 3274 : 	if(hatchstyle!=-1) { fill_brush.CreateHatchBrush(hatchstyle, fill); }

  09b9e	83 7d 28 ff	 cmp	 DWORD PTR _hatchstyle$[ebp], -1
  09ba2	74 12		 je	 SHORT $L200646
  09ba4	8b 45 20	 mov	 eax, DWORD PTR _fill$[ebp]
  09ba7	50		 push	 eax
  09ba8	8b 4d 28	 mov	 ecx, DWORD PTR _hatchstyle$[ebp]
  09bab	51		 push	 ecx
  09bac	8d 4d b4	 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  09baf	e8 00 00 00 00	 call	 ?CreateHatchBrush@CBrush@@QAEHHK@Z ; CBrush::CreateHatchBrush

; 3275 : 	else      { fill_brush.CreateSolidBrush(fill);             }

  09bb4	eb 0c		 jmp	 SHORT $L200647
$L200646:
  09bb6	8b 55 20	 mov	 edx, DWORD PTR _fill$[ebp]
  09bb9	52		 push	 edx
  09bba	8d 4d b4	 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  09bbd	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush
$L200647:

; 3276 : 	
; 3277 : 	CPen*    pOldPen    = bmpdc.SelectObject(&border_pen);

  09bc2	8d 45 cc	 lea	 eax, DWORD PTR _border_pen$[ebp]
  09bc5	50		 push	 eax
  09bc6	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09bc9	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  09bce	89 45 bc	 mov	 DWORD PTR _pOldPen$[ebp], eax

; 3278 : 	CBrush*  pOldBrush  = bmpdc.SelectObject(&fill_brush);

  09bd1	8d 4d b4	 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  09bd4	51		 push	 ecx
  09bd5	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09bd8	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
  09bdd	89 45 c0	 mov	 DWORD PTR _pOldBrush$[ebp], eax

; 3279 : 
; 3280 : 	bmpdc.Rectangle(x1,y1,x2,y2);

  09be0	8b 55 dc	 mov	 edx, DWORD PTR _y2$[ebp]
  09be3	52		 push	 edx
  09be4	8b 45 d8	 mov	 eax, DWORD PTR _x2$[ebp]
  09be7	50		 push	 eax
  09be8	8b 4d d4	 mov	 ecx, DWORD PTR _y1$[ebp]
  09beb	51		 push	 ecx
  09bec	8b 55 c4	 mov	 edx, DWORD PTR _x1$[ebp]
  09bef	52		 push	 edx
  09bf0	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09bf3	e8 00 00 00 00	 call	 ?Rectangle@CDC@@QAEHHHHH@Z ; CDC::Rectangle

; 3281 : 
; 3282 : 	if(NULL!=pOldBrush)  { bmpdc.SelectObject(pOldBrush);  }

  09bf8	83 7d c0 00	 cmp	 DWORD PTR _pOldBrush$[ebp], 0
  09bfc	74 0c		 je	 SHORT $L200650
  09bfe	8b 45 c0	 mov	 eax, DWORD PTR _pOldBrush$[ebp]
  09c01	50		 push	 eax
  09c02	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09c05	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
$L200650:

; 3283 : 	if(NULL!=pOldPen)    { bmpdc.SelectObject(pOldPen);    }

  09c0a	83 7d bc 00	 cmp	 DWORD PTR _pOldPen$[ebp], 0
  09c0e	74 0c		 je	 SHORT $L200651
  09c10	8b 4d bc	 mov	 ecx, DWORD PTR _pOldPen$[ebp]
  09c13	51		 push	 ecx
  09c14	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09c17	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
$L200651:

; 3284 : 	if(NULL!=pOldBitmap) { bmpdc.SelectObject(pOldBitmap); }

  09c1c	83 7d e0 00	 cmp	 DWORD PTR _pOldBitmap$[ebp], 0
  09c20	74 0c		 je	 SHORT $L200652
  09c22	8b 55 e0	 mov	 edx, DWORD PTR _pOldBitmap$[ebp]
  09c25	52		 push	 edx
  09c26	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09c29	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
$L200652:

; 3285 : }

  09c2e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  09c32	8d 4d b4	 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  09c35	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  09c3a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  09c3e	8d 4d cc	 lea	 ecx, DWORD PTR _border_pen$[ebp]
  09c41	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  09c46	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  09c4d	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  09c50	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  09c55	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  09c58	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  09c5f	8b e5		 mov	 esp, ebp
  09c61	5d		 pop	 ebp
  09c62	c2 24 00	 ret	 36			; 00000024H
_TEXT	ENDS
text$x	SEGMENT
$L203144:
  00671	8d 4d e4	 lea	 ecx, DWORD PTR _bmpdc$[ebp]
  00674	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L203145:
  00679	8d 4d 9c	 lea	 ecx, DWORD PTR _background_brush$200642[ebp]
  0067c	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L203146:
  00681	8d 4d cc	 lea	 ecx, DWORD PTR _border_pen$[ebp]
  00684	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
$L203147:
  00689	8d 4d b4	 lea	 ecx, DWORD PTR _fill_brush$[ebp]
  0068c	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z:
  00691	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203149
  00696	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ColorBitmap@BCMenu@@IAEXPAVCDC@@AAVCBitmap@@VCSize@@2KKH@Z ENDP ; BCMenu::ColorBitmap
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
;	COMDAT ??9CSize@@QBEHUtagSIZE@@@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 8
??9CSize@@QBEHUtagSIZE@@@Z PROC NEAR			; CSize::operator!=, COMDAT
; _this$ = ecx

; 37   : 	{ return (cx != size.cx || cy != size.cy); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00011	75 14		 jne	 SHORT $L203153
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR _size$[ebp+4]
  0001c	75 09		 jne	 SHORT $L203153
  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00025	eb 07		 jmp	 SHORT $L203154
$L203153:
  00027	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
$L203154:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??9CSize@@QBEHUtagSIZE@@@Z ENDP				; CSize::operator!=
_TEXT	ENDS
EXTRN	__imp__lstrcmpiA@8:NEAR
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	__imp__RegCloseKey@4:NEAR
EXTRN	__imp__RegOpenKeyExA@20:NEAR
EXTRN	__imp__RegQueryValueExA@24:NEAR
;	COMDAT ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
_BSS	SEGMENT
?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA DD 01H DUP (?) ; `BCMenu::IsWindowsClassicTheme'::`2'::XPTheme_returnflag
_BSS	ENDS
;	COMDAT ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
_BSS	SEGMENT
?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA DD 01H DUP (?) ; `BCMenu::IsWindowsClassicTheme'::`2'::XPTheme_checkflag
; Function compile flags: /Odt
_BSS	ENDS
_TEXT	SEGMENT
_len$200675 = -324					; size = 4
_szClassicTheme$200673 = -320				; size = 22
_size$ = -296						; size = 4
_lRetCode$ = -292					; size = 4
_type$ = -288						; size = 4
_hKey$ = -284						; size = 4
_Buf$ = -280						; size = 270
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?IsWindowsClassicTheme@BCMenu@@KAHXZ PROC NEAR		; BCMenu::IsWindowsClassicTheme

; 3288 : {

  09c70	55		 push	 ebp
  09c71	8b ec		 mov	 ebp, esp
  09c73	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  09c79	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  09c7e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3289 : 	TCHAR Buf[_MAX_PATH+10];
; 3290 : 	HKEY hKey;
; 3291 : 	DWORD size,type; 
; 3292 : 	long lRetCode; 
; 3293 : 	static BOOL XPTheme_returnflag=FALSE;
; 3294 : 	static BOOL XPTheme_checkflag=FALSE;
; 3295 : 	
; 3296 : 	if(XPTheme_checkflag)return(XPTheme_returnflag);

  09c81	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA, 0
  09c88	74 0a		 je	 SHORT $L200665
  09c8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
  09c8f	e9 42 01 00 00	 jmp	 $L200655
$L200665:

; 3297 : 
; 3298 : 	XPTheme_checkflag=TRUE;

  09c94	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?XPTheme_checkflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA, 1

; 3299 : 	lRetCode = RegOpenKeyEx ( HKEY_CURRENT_USER, 
; 3300 : 		_T("Software\\Microsoft\\Plus!\\Themes\\Current"), 
; 3301 : 		0,KEY_READ,&hKey);  

  09c9e	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _hKey$[ebp]
  09ca4	50		 push	 eax
  09ca5	68 19 00 02 00	 push	 131097			; 00020019H
  09caa	6a 00		 push	 0
  09cac	68 00 00 00 00	 push	 OFFSET FLAT:$SG200669
  09cb1	68 01 00 00 80	 push	 -2147483647		; 80000001H
  09cb6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  09cbc	89 85 dc fe ff
	ff		 mov	 DWORD PTR _lRetCode$[ebp], eax

; 3302 : 	if (lRetCode == ERROR_SUCCESS){ 

  09cc2	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _lRetCode$[ebp], 0
  09cc9	0f 85 02 01 00
	00		 jne	 $L200670

; 3303 : 		size = _MAX_PATH;type=REG_SZ;

  09ccf	c7 85 d8 fe ff
	ff 04 01 00 00	 mov	 DWORD PTR _size$[ebp], 260 ; 00000104H
  09cd9	c7 85 e0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _type$[ebp], 1

; 3304 : 		lRetCode=::RegQueryValueEx(hKey,NULL,NULL,&type,
; 3305 : 			(unsigned char *)Buf,&size);

  09ce3	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _size$[ebp]
  09ce9	51		 push	 ecx
  09cea	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _Buf$[ebp]
  09cf0	52		 push	 edx
  09cf1	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _type$[ebp]
  09cf7	50		 push	 eax
  09cf8	6a 00		 push	 0
  09cfa	6a 00		 push	 0
  09cfc	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _hKey$[ebp]
  09d02	51		 push	 ecx
  09d03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  09d09	89 85 dc fe ff
	ff		 mov	 DWORD PTR _lRetCode$[ebp], eax

; 3306 : 		if(lRetCode == ERROR_SUCCESS){

  09d0f	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _lRetCode$[ebp], 0
  09d16	0f 85 a8 00 00
	00		 jne	 $L200672

; 3307 : 			TCHAR szClassicTheme[]=_T("Windows Classic.theme");

  09d1c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR $SG200674
  09d22	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$200673[ebp], edx
  09d28	a1 04 00 00 00	 mov	 eax, DWORD PTR $SG200674+4
  09d2d	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$200673[ebp+4], eax
  09d33	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR $SG200674+8
  09d39	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$200673[ebp+8], ecx
  09d3f	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR $SG200674+12
  09d45	89 95 cc fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$200673[ebp+12], edx
  09d4b	a1 10 00 00 00	 mov	 eax, DWORD PTR $SG200674+16
  09d50	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _szClassicTheme$200673[ebp+16], eax
  09d56	66 8b 0d 14 00
	00 00		 mov	 cx, WORD PTR $SG200674+20
  09d5d	66 89 8d d4 fe
	ff ff		 mov	 WORD PTR _szClassicTheme$200673[ebp+20], cx

; 3308 : 			int len=lstrlen(Buf);

  09d64	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _Buf$[ebp]
  09d6a	52		 push	 edx
  09d6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  09d71	89 85 bc fe ff
	ff		 mov	 DWORD PTR _len$200675[ebp], eax

; 3309 : 			if(len>=lstrlen(szClassicTheme)){

  09d77	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _szClassicTheme$200673[ebp]
  09d7d	50		 push	 eax
  09d7e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  09d84	39 85 bc fe ff
	ff		 cmp	 DWORD PTR _len$200675[ebp], eax
  09d8a	7c 38		 jl	 SHORT $L200672

; 3310 : 				if(!lstrcmpi(&Buf[len-lstrlen(szClassicTheme)],szClassicTheme)){

  09d8c	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szClassicTheme$200673[ebp]
  09d92	51		 push	 ecx
  09d93	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR _szClassicTheme$200673[ebp]
  09d99	52		 push	 edx
  09d9a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  09da0	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _len$200675[ebp]
  09da6	2b c8		 sub	 ecx, eax
  09da8	8d 94 0d e8 fe
	ff ff		 lea	 edx, DWORD PTR _Buf$[ebp+ecx]
  09daf	52		 push	 edx
  09db0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpiA@8
  09db6	85 c0		 test	 eax, eax
  09db8	75 0a		 jne	 SHORT $L200672

; 3311 : 					XPTheme_returnflag=TRUE;

  09dba	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA, 1
$L200672:

; 3312 : 				}
; 3313 : 			}
; 3314 : 		}
; 3315 : 		RegCloseKey(hKey);  

  09dc4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _hKey$[ebp]
  09dca	50		 push	 eax
  09dcb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$L200670:

; 3316 : 	}
; 3317 : 	return(XPTheme_returnflag);

  09dd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?XPTheme_returnflag@?1??IsWindowsClassicTheme@BCMenu@@KAHXZ@4HA
$L200655:

; 3318 : }

  09dd6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  09dd9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  09dde	8b e5		 mov	 esp, ebp
  09de0	5d		 pop	 ebp
  09de1	c3		 ret	 0
?IsWindowsClassicTheme@BCMenu@@KAHXZ ENDP		; BCMenu::IsWindowsClassicTheme
_TEXT	ENDS
PUBLIC	?GetSize@?$CArray@HAAH@@QBEHXZ			; CArray<int,int &>::GetSize
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -16						; size = 4
_i$200684 = -12						; size = 4
_existsloc$ = -8					; size = 4
_numcurrent$ = -4					; size = 4
_nID$ = 8						; size = 4
?GlobalImageListOffset@BCMenu@@IAEHH@Z PROC NEAR	; BCMenu::GlobalImageListOffset
; _this$ = ecx

; 3321 : {

  09df0	55		 push	 ebp
  09df1	8b ec		 mov	 ebp, esp
  09df3	83 ec 10	 sub	 esp, 16			; 00000010H
  09df6	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3322 : 	int numcurrent=m_AllImagesID.GetSize();

  09df9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  09dfe	e8 00 00 00 00	 call	 ?GetSize@?$CArray@HAAH@@QBEHXZ ; CArray<int,int &>::GetSize
  09e03	89 45 fc	 mov	 DWORD PTR _numcurrent$[ebp], eax

; 3323 : 	int existsloc = -1;

  09e06	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _existsloc$[ebp], -1

; 3324 : 	for(int i=0;i<numcurrent;++i){

  09e0d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$200684[ebp], 0
  09e14	eb 09		 jmp	 SHORT $L200685
$L200686:
  09e16	8b 45 f4	 mov	 eax, DWORD PTR _i$200684[ebp]
  09e19	83 c0 01	 add	 eax, 1
  09e1c	89 45 f4	 mov	 DWORD PTR _i$200684[ebp], eax
$L200685:
  09e1f	8b 4d f4	 mov	 ecx, DWORD PTR _i$200684[ebp]
  09e22	3b 4d fc	 cmp	 ecx, DWORD PTR _numcurrent$[ebp]
  09e25	7d 1f		 jge	 SHORT $L200687

; 3325 : 		if(m_AllImagesID[i]==nID){

  09e27	8b 55 f4	 mov	 edx, DWORD PTR _i$200684[ebp]
  09e2a	52		 push	 edx
  09e2b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  09e30	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  09e35	8b 00		 mov	 eax, DWORD PTR [eax]
  09e37	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  09e3a	75 08		 jne	 SHORT $L200688

; 3326 : 			existsloc=i;

  09e3c	8b 4d f4	 mov	 ecx, DWORD PTR _i$200684[ebp]
  09e3f	89 4d f8	 mov	 DWORD PTR _existsloc$[ebp], ecx

; 3327 : 			break;

  09e42	eb 02		 jmp	 SHORT $L200687
$L200688:

; 3328 : 		}
; 3329 : 	}

  09e44	eb d0		 jmp	 SHORT $L200686
$L200687:

; 3330 : 	return existsloc;

  09e46	8b 45 f8	 mov	 eax, DWORD PTR _existsloc$[ebp]

; 3331 : }

  09e49	8b e5		 mov	 esp, ebp
  09e4b	5d		 pop	 ebp
  09e4c	c2 04 00	 ret	 4
?GlobalImageListOffset@BCMenu@@IAEHH@Z ENDP		; BCMenu::GlobalImageListOffset
; Function compile flags: /Odt
_this$ = -16						; size = 4
_nID$200696 = -12					; size = 4
_numcurrent$ = -8					; size = 4
_retflag$ = -4						; size = 4
_offset$ = 8						; size = 4
?CanDraw3DImageList@BCMenu@@IAEHH@Z PROC NEAR		; BCMenu::CanDraw3DImageList
; _this$ = ecx

; 3334 : {

  09e50	55		 push	 ebp
  09e51	8b ec		 mov	 ebp, esp
  09e53	83 ec 10	 sub	 esp, 16			; 00000010H
  09e56	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3335 : 	BOOL retflag=FALSE;

  09e59	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retflag$[ebp], 0

; 3336 : 	int numcurrent=m_AllImagesID.GetSize();

  09e60	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  09e65	e8 00 00 00 00	 call	 ?GetSize@?$CArray@HAAH@@QBEHXZ ; CArray<int,int &>::GetSize
  09e6a	89 45 f8	 mov	 DWORD PTR _numcurrent$[ebp], eax

; 3337 : 	if(offset+1<numcurrent&&offset+2<numcurrent){

  09e6d	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  09e70	83 c0 01	 add	 eax, 1
  09e73	3b 45 f8	 cmp	 eax, DWORD PTR _numcurrent$[ebp]
  09e76	7d 55		 jge	 SHORT $L200695
  09e78	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  09e7b	83 c1 02	 add	 ecx, 2
  09e7e	3b 4d f8	 cmp	 ecx, DWORD PTR _numcurrent$[ebp]
  09e81	7d 4a		 jge	 SHORT $L200695

; 3338 : 		int nID=m_AllImagesID[offset];

  09e83	8b 55 08	 mov	 edx, DWORD PTR _offset$[ebp]
  09e86	52		 push	 edx
  09e87	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  09e8c	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  09e91	8b 00		 mov	 eax, DWORD PTR [eax]
  09e93	89 45 f4	 mov	 DWORD PTR _nID$200696[ebp], eax

; 3339 : 		if(m_AllImagesID[offset+1]==nID&&m_AllImagesID[offset+2]==nID)retflag=TRUE;

  09e96	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  09e99	83 c1 01	 add	 ecx, 1
  09e9c	51		 push	 ecx
  09e9d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  09ea2	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  09ea7	8b 10		 mov	 edx, DWORD PTR [eax]
  09ea9	3b 55 f4	 cmp	 edx, DWORD PTR _nID$200696[ebp]
  09eac	75 1f		 jne	 SHORT $L200695
  09eae	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  09eb1	83 c0 02	 add	 eax, 2
  09eb4	50		 push	 eax
  09eb5	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  09eba	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  09ebf	8b 08		 mov	 ecx, DWORD PTR [eax]
  09ec1	3b 4d f4	 cmp	 ecx, DWORD PTR _nID$200696[ebp]
  09ec4	75 07		 jne	 SHORT $L200695
  09ec6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _retflag$[ebp], 1
$L200695:

; 3340 : 	}
; 3341 : 	return(retflag);

  09ecd	8b 45 fc	 mov	 eax, DWORD PTR _retflag$[ebp]

; 3342 : }

  09ed0	8b e5		 mov	 esp, ebp
  09ed2	5d		 pop	 ebp
  09ed3	c2 04 00	 ret	 4
?CanDraw3DImageList@BCMenu@@IAEHH@Z ENDP		; BCMenu::CanDraw3DImageList
_TEXT	ENDS
PUBLIC	?Replace@CImageList@@QAEHHPAUHICON__@@@Z	; CImageList::Replace
xdata$x	SEGMENT
$T203171 DD	0ffffffffH
	DD	FLAT:$L203164
	DD	00H
	DD	FLAT:$L203165
	DD	01H
	DD	FLAT:$L203166
	DD	02H
	DD	FLAT:$L203167
$T203169 DD	019930520H
	DD	04H
	DD	FLAT:$T203171
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -92						; size = 4
_hIcon3$200729 = -88					; size = 4
_hIcon4$200730 = -84					; size = 4
_hIcon2$200728 = -80					; size = 4
_il2$200727 = -76					; size = 8
_i$200718 = -68						; size = 4
_pWnd$200713 = -64					; size = 4
_pDC$200715 = -60					; size = 4
_existsloc$200717 = -56					; size = 4
_bmp2$200710 = -52					; size = 8
_bmp$200709 = -44					; size = 8
_bmp3$200711 = -36					; size = 8
_numcurrent$200716 = -28				; size = 4
_loc$ = -24						; size = 4
_hImageList$ = -20					; size = 4
_hIcon$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_il$ = 8						; size = 4
_xoffset$ = 12						; size = 4
_nID$ = 16						; size = 4
?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z PROC NEAR ; BCMenu::AddToGlobalImageList
; _this$ = ecx

; 3345 : {

  09ee0	55		 push	 ebp
  09ee1	8b ec		 mov	 ebp, esp
  09ee3	6a ff		 push	 -1
  09ee5	68 00 00 00 00	 push	 __ehhandler$?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z
  09eea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  09ef0	50		 push	 eax
  09ef1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  09ef8	83 ec 50	 sub	 esp, 80			; 00000050H
  09efb	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx

; 3346 : 	int loc = -1;

  09efe	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _loc$[ebp], -1

; 3347 : 	HIMAGELIST hImageList = m_AllImages.m_hImageList;

  09f05	a1 04 00 00 00	 mov	 eax, DWORD PTR ?m_AllImages@BCMenu@@1VCImageList@@A+4
  09f0a	89 45 ec	 mov	 DWORD PTR _hImageList$[ebp], eax

; 3348 : 	if(!hImageList){

  09f0d	83 7d ec 00	 cmp	 DWORD PTR _hImageList$[ebp], 0
  09f11	75 21		 jne	 SHORT $L200706

; 3349 : 		m_AllImages.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  09f13	6a 01		 push	 1
  09f15	6a 01		 push	 1
  09f17	68 ff 00 00 00	 push	 255			; 000000ffH
  09f1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  09f22	51		 push	 ecx
  09f23	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  09f29	52		 push	 edx
  09f2a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  09f2f	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create
$L200706:

; 3350 : 	}
; 3351 : 	HICON hIcon = il->ExtractIcon(xoffset);

  09f34	8b 45 0c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  09f37	50		 push	 eax
  09f38	8b 4d 08	 mov	 ecx, DWORD PTR _il$[ebp]
  09f3b	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  09f40	89 45 f0	 mov	 DWORD PTR _hIcon$[ebp], eax

; 3352 : 	if(hIcon){

  09f43	83 7d f0 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  09f47	0f 84 8e 03 00
	00		 je	 $L200708

; 3353 : 		CBitmap bmp,bmp2,bmp3;

  09f4d	8d 4d d4	 lea	 ecx, DWORD PTR _bmp$200709[ebp]
  09f50	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09f55	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  09f5c	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200710[ebp]
  09f5f	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09f64	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  09f68	8d 4d dc	 lea	 ecx, DWORD PTR _bmp3$200711[ebp]
  09f6b	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  09f70	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3354 : 		if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  09f74	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  09f79	85 c0		 test	 eax, eax
  09f7b	0f 84 a8 00 00
	00		 je	 $L200712
  09f81	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  09f88	0f 84 9b 00 00
	00		 je	 $L200712

; 3355 : 			CWnd *pWnd = AfxGetMainWnd();            // Get main window

  09f8e	e8 00 00 00 00	 call	 ?AfxGetMainWnd@@YGPAVCWnd@@XZ ; AfxGetMainWnd
  09f93	89 45 c0	 mov	 DWORD PTR _pWnd$200713[ebp], eax

; 3356 : 			if (pWnd == NULL) pWnd = CWnd::GetDesktopWindow();

  09f96	83 7d c0 00	 cmp	 DWORD PTR _pWnd$200713[ebp], 0
  09f9a	75 08		 jne	 SHORT $L200714
  09f9c	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  09fa1	89 45 c0	 mov	 DWORD PTR _pWnd$200713[ebp], eax
$L200714:

; 3357 : 			CDC *pDC = pWnd->GetDC();              // Get device context

  09fa4	8b 4d c0	 mov	 ecx, DWORD PTR _pWnd$200713[ebp]
  09fa7	e8 00 00 00 00	 call	 ?GetDC@CWnd@@QAEPAVCDC@@XZ ; CWnd::GetDC
  09fac	89 45 c4	 mov	 DWORD PTR _pDC$200715[ebp], eax

; 3358 : 			GetBitmapFromImageList(pDC,il,xoffset,bmp);

  09faf	8d 4d d4	 lea	 ecx, DWORD PTR _bmp$200709[ebp]
  09fb2	51		 push	 ecx
  09fb3	8b 55 0c	 mov	 edx, DWORD PTR _xoffset$[ebp]
  09fb6	52		 push	 edx
  09fb7	8b 45 08	 mov	 eax, DWORD PTR _il$[ebp]
  09fba	50		 push	 eax
  09fbb	8b 4d c4	 mov	 ecx, DWORD PTR _pDC$200715[ebp]
  09fbe	51		 push	 ecx
  09fbf	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  09fc2	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3359 : 			GetFadedBitmap(bmp);

  09fc7	8d 55 d4	 lea	 edx, DWORD PTR _bmp$200709[ebp]
  09fca	52		 push	 edx
  09fcb	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  09fce	e8 00 00 00 00	 call	 ?GetFadedBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetFadedBitmap

; 3360 : 			GetBitmapFromImageList(pDC,il,xoffset,bmp2);

  09fd3	8d 45 cc	 lea	 eax, DWORD PTR _bmp2$200710[ebp]
  09fd6	50		 push	 eax
  09fd7	8b 4d 0c	 mov	 ecx, DWORD PTR _xoffset$[ebp]
  09fda	51		 push	 ecx
  09fdb	8b 55 08	 mov	 edx, DWORD PTR _il$[ebp]
  09fde	52		 push	 edx
  09fdf	8b 45 c4	 mov	 eax, DWORD PTR _pDC$200715[ebp]
  09fe2	50		 push	 eax
  09fe3	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  09fe6	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3361 : 			GetShadowBitmap(bmp2);

  09feb	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200710[ebp]
  09fee	51		 push	 ecx
  09fef	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  09ff2	e8 00 00 00 00	 call	 ?GetShadowBitmap@BCMenu@@IAEXAAVCBitmap@@@Z ; BCMenu::GetShadowBitmap

; 3362 : 			GetBitmapFromImageList(pDC,il,xoffset,bmp3);

  09ff7	8d 55 dc	 lea	 edx, DWORD PTR _bmp3$200711[ebp]
  09ffa	52		 push	 edx
  09ffb	8b 45 0c	 mov	 eax, DWORD PTR _xoffset$[ebp]
  09ffe	50		 push	 eax
  09fff	8b 4d 08	 mov	 ecx, DWORD PTR _il$[ebp]
  0a002	51		 push	 ecx
  0a003	8b 55 c4	 mov	 edx, DWORD PTR _pDC$200715[ebp]
  0a006	52		 push	 edx
  0a007	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0a00a	e8 00 00 00 00	 call	 ?GetBitmapFromImageList@BCMenu@@IAEHPAVCDC@@PAVCImageList@@HAAVCBitmap@@@Z ; BCMenu::GetBitmapFromImageList

; 3363 : 			GetDisabledBitmap(bmp3);

  0a00f	6a 00		 push	 0
  0a011	8d 45 dc	 lea	 eax, DWORD PTR _bmp3$200711[ebp]
  0a014	50		 push	 eax
  0a015	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0a018	e8 00 00 00 00	 call	 ?GetDisabledBitmap@BCMenu@@IAEXAAVCBitmap@@K@Z ; BCMenu::GetDisabledBitmap

; 3364 : 			pWnd->ReleaseDC(pDC);  // Release the DC

  0a01d	8b 4d c4	 mov	 ecx, DWORD PTR _pDC$200715[ebp]
  0a020	51		 push	 ecx
  0a021	8b 4d c0	 mov	 ecx, DWORD PTR _pWnd$200713[ebp]
  0a024	e8 00 00 00 00	 call	 ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ; CWnd::ReleaseDC
$L200712:

; 3365 : 		}
; 3366 : 		int numcurrent=m_AllImagesID.GetSize();

  0a029	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a02e	e8 00 00 00 00	 call	 ?GetSize@?$CArray@HAAH@@QBEHXZ ; CArray<int,int &>::GetSize
  0a033	89 45 e4	 mov	 DWORD PTR _numcurrent$200716[ebp], eax

; 3367 : 		int existsloc = -1;

  0a036	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _existsloc$200717[ebp], -1

; 3368 : 		for(int i=0;i<numcurrent;++i){

  0a03d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _i$200718[ebp], 0
  0a044	eb 09		 jmp	 SHORT $L200719
$L200720:
  0a046	8b 55 bc	 mov	 edx, DWORD PTR _i$200718[ebp]
  0a049	83 c2 01	 add	 edx, 1
  0a04c	89 55 bc	 mov	 DWORD PTR _i$200718[ebp], edx
$L200719:
  0a04f	8b 45 bc	 mov	 eax, DWORD PTR _i$200718[ebp]
  0a052	3b 45 e4	 cmp	 eax, DWORD PTR _numcurrent$200716[ebp]
  0a055	7d 1f		 jge	 SHORT $L200721

; 3369 : 			if(m_AllImagesID[i]==nID){

  0a057	8b 4d bc	 mov	 ecx, DWORD PTR _i$200718[ebp]
  0a05a	51		 push	 ecx
  0a05b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a060	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0a065	8b 10		 mov	 edx, DWORD PTR [eax]
  0a067	3b 55 10	 cmp	 edx, DWORD PTR _nID$[ebp]
  0a06a	75 08		 jne	 SHORT $L200722

; 3370 : 				existsloc=i;

  0a06c	8b 45 bc	 mov	 eax, DWORD PTR _i$200718[ebp]
  0a06f	89 45 c8	 mov	 DWORD PTR _existsloc$200717[ebp], eax

; 3371 : 				break;

  0a072	eb 02		 jmp	 SHORT $L200721
$L200722:

; 3372 : 			}
; 3373 : 		}

  0a074	eb d0		 jmp	 SHORT $L200720
$L200721:

; 3374 : 		if(existsloc>=0){

  0a076	83 7d c8 00	 cmp	 DWORD PTR _existsloc$200717[ebp], 0
  0a07a	0f 8c 87 01 00
	00		 jl	 $L200723

; 3375 : 			m_AllImages.Replace(existsloc,hIcon);

  0a080	8b 4d f0	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  0a083	51		 push	 ecx
  0a084	8b 55 c8	 mov	 edx, DWORD PTR _existsloc$200717[ebp]
  0a087	52		 push	 edx
  0a088	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a08d	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3376 : 			loc = existsloc;

  0a092	8b 45 c8	 mov	 eax, DWORD PTR _existsloc$200717[ebp]
  0a095	89 45 e8	 mov	 DWORD PTR _loc$[ebp], eax

; 3377 : 			if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0a098	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0a09d	85 c0		 test	 eax, eax
  0a09f	0f 84 5d 01 00
	00		 je	 $L200724
  0a0a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0a0ac	0f 84 50 01 00
	00		 je	 $L200724

; 3378 : 				if(existsloc+1<numcurrent&&m_AllImagesID[existsloc+1]==nID){

  0a0b2	8b 4d c8	 mov	 ecx, DWORD PTR _existsloc$200717[ebp]
  0a0b5	83 c1 01	 add	 ecx, 1
  0a0b8	3b 4d e4	 cmp	 ecx, DWORD PTR _numcurrent$200716[ebp]
  0a0bb	0f 8d 41 01 00
	00		 jge	 $L200724
  0a0c1	8b 55 c8	 mov	 edx, DWORD PTR _existsloc$200717[ebp]
  0a0c4	83 c2 01	 add	 edx, 1
  0a0c7	52		 push	 edx
  0a0c8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a0cd	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0a0d2	8b 00		 mov	 eax, DWORD PTR [eax]
  0a0d4	3b 45 10	 cmp	 eax, DWORD PTR _nID$[ebp]
  0a0d7	0f 85 25 01 00
	00		 jne	 $L200724

; 3379 : 					if(existsloc+2<numcurrent&&m_AllImagesID[existsloc+2]==nID){

  0a0dd	8b 4d c8	 mov	 ecx, DWORD PTR _existsloc$200717[ebp]
  0a0e0	83 c1 02	 add	 ecx, 2
  0a0e3	3b 4d e4	 cmp	 ecx, DWORD PTR _numcurrent$200716[ebp]
  0a0e6	0f 8d 16 01 00
	00		 jge	 $L200724
  0a0ec	8b 55 c8	 mov	 edx, DWORD PTR _existsloc$200717[ebp]
  0a0ef	83 c2 02	 add	 edx, 2
  0a0f2	52		 push	 edx
  0a0f3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a0f8	e8 00 00 00 00	 call	 ??A?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::operator[]
  0a0fd	8b 00		 mov	 eax, DWORD PTR [eax]
  0a0ff	3b 45 10	 cmp	 eax, DWORD PTR _nID$[ebp]
  0a102	0f 85 fa 00 00
	00		 jne	 $L200724

; 3380 : 						CImageList il2;

  0a108	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a10b	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0a110	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 3381 : 						il2.Create(m_iconX,m_iconY,ILC_COLORDDB|ILC_MASK,1,1);

  0a114	6a 01		 push	 1
  0a116	6a 01		 push	 1
  0a118	68 ff 00 00 00	 push	 255			; 000000ffH
  0a11d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iconY@BCMenu@@1HA ; BCMenu::m_iconY
  0a123	51		 push	 ecx
  0a124	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_iconX@BCMenu@@1HA ; BCMenu::m_iconX
  0a12a	52		 push	 edx
  0a12b	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a12e	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 3382 : 						il2.Add(&bmp,GetSysColor(COLOR_3DFACE));

  0a133	6a 0f		 push	 15			; 0000000fH
  0a135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a13b	50		 push	 eax
  0a13c	8d 45 d4	 lea	 eax, DWORD PTR _bmp$200709[ebp]
  0a13f	50		 push	 eax
  0a140	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a143	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3383 : 						HICON hIcon2 = il2.ExtractIcon(0);

  0a148	6a 00		 push	 0
  0a14a	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a14d	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0a152	89 45 b0	 mov	 DWORD PTR _hIcon2$200728[ebp], eax

; 3384 : 						m_AllImages.Replace(existsloc+1,hIcon2);

  0a155	8b 4d b0	 mov	 ecx, DWORD PTR _hIcon2$200728[ebp]
  0a158	51		 push	 ecx
  0a159	8b 55 c8	 mov	 edx, DWORD PTR _existsloc$200717[ebp]
  0a15c	83 c2 01	 add	 edx, 1
  0a15f	52		 push	 edx
  0a160	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a165	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3385 : 						il2.Add(&bmp2,GetSysColor(COLOR_3DFACE));

  0a16a	6a 0f		 push	 15			; 0000000fH
  0a16c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a172	50		 push	 eax
  0a173	8d 45 cc	 lea	 eax, DWORD PTR _bmp2$200710[ebp]
  0a176	50		 push	 eax
  0a177	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a17a	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3386 : 						HICON hIcon3 = il2.ExtractIcon(1);

  0a17f	6a 01		 push	 1
  0a181	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a184	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0a189	89 45 a8	 mov	 DWORD PTR _hIcon3$200729[ebp], eax

; 3387 : 						m_AllImages.Replace(existsloc+2,hIcon3);

  0a18c	8b 4d a8	 mov	 ecx, DWORD PTR _hIcon3$200729[ebp]
  0a18f	51		 push	 ecx
  0a190	8b 55 c8	 mov	 edx, DWORD PTR _existsloc$200717[ebp]
  0a193	83 c2 02	 add	 edx, 2
  0a196	52		 push	 edx
  0a197	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a19c	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3388 : 						il2.Add(&bmp3,GetSysColor(COLOR_3DFACE));

  0a1a1	6a 0f		 push	 15			; 0000000fH
  0a1a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a1a9	50		 push	 eax
  0a1aa	8d 45 dc	 lea	 eax, DWORD PTR _bmp3$200711[ebp]
  0a1ad	50		 push	 eax
  0a1ae	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a1b1	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3389 : 						HICON hIcon4 = il2.ExtractIcon(2);

  0a1b6	6a 02		 push	 2
  0a1b8	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a1bb	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  0a1c0	89 45 ac	 mov	 DWORD PTR _hIcon4$200730[ebp], eax

; 3390 : 						m_AllImages.Replace(existsloc+3,hIcon4);

  0a1c3	8b 4d ac	 mov	 ecx, DWORD PTR _hIcon4$200730[ebp]
  0a1c6	51		 push	 ecx
  0a1c7	8b 55 c8	 mov	 edx, DWORD PTR _existsloc$200717[ebp]
  0a1ca	83 c2 03	 add	 edx, 3
  0a1cd	52		 push	 edx
  0a1ce	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a1d3	e8 00 00 00 00	 call	 ?Replace@CImageList@@QAEHHPAUHICON__@@@Z ; CImageList::Replace

; 3391 : 						::DestroyIcon(hIcon2);

  0a1d8	8b 45 b0	 mov	 eax, DWORD PTR _hIcon2$200728[ebp]
  0a1db	50		 push	 eax
  0a1dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4

; 3392 : 						::DestroyIcon(hIcon3);

  0a1e2	8b 4d a8	 mov	 ecx, DWORD PTR _hIcon3$200729[ebp]
  0a1e5	51		 push	 ecx
  0a1e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4

; 3393 : 						::DestroyIcon(hIcon4);

  0a1ec	8b 55 ac	 mov	 edx, DWORD PTR _hIcon4$200730[ebp]
  0a1ef	52		 push	 edx
  0a1f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4

; 3394 : 					}

  0a1f6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0a1fa	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  0a1fd	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L200724:

; 3395 : 				}
; 3396 : 			}
; 3397 : 		}
; 3398 : 		else{

  0a202	e9 a3 00 00 00	 jmp	 $L200731
$L200723:

; 3399 : 			m_AllImages.Add(hIcon);

  0a207	8b 45 f0	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0a20a	50		 push	 eax
  0a20b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a210	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAUHICON__@@@Z ; CImageList::Add

; 3400 : 			m_AllImagesID.Add(nID);

  0a215	8d 4d 10	 lea	 ecx, DWORD PTR _nID$[ebp]
  0a218	51		 push	 ecx
  0a219	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a21e	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 3401 : 			loc=numcurrent;

  0a223	8b 55 e4	 mov	 edx, DWORD PTR _numcurrent$200716[ebp]
  0a226	89 55 e8	 mov	 DWORD PTR _loc$[ebp], edx

; 3402 : 			if(IsLunaMenuStyle()&&xp_draw_3D_bitmaps){

  0a229	e8 00 00 00 00	 call	 ?IsLunaMenuStyle@BCMenu@@KAHXZ ; BCMenu::IsLunaMenuStyle
  0a22e	85 c0		 test	 eax, eax
  0a230	74 78		 je	 SHORT $L200731
  0a232	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?xp_draw_3D_bitmaps@BCMenu@@1HA, 0 ; BCMenu::xp_draw_3D_bitmaps
  0a239	74 6f		 je	 SHORT $L200731

; 3403 : 				m_AllImages.Add(&bmp,GetSysColor(COLOR_3DFACE));

  0a23b	6a 0f		 push	 15			; 0000000fH
  0a23d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a243	50		 push	 eax
  0a244	8d 45 d4	 lea	 eax, DWORD PTR _bmp$200709[ebp]
  0a247	50		 push	 eax
  0a248	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a24d	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3404 : 				m_AllImages.Add(&bmp2,GetSysColor(COLOR_3DFACE));

  0a252	6a 0f		 push	 15			; 0000000fH
  0a254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a25a	50		 push	 eax
  0a25b	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200710[ebp]
  0a25e	51		 push	 ecx
  0a25f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a264	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3405 : 				m_AllImages.Add(&bmp3,GetSysColor(COLOR_3DFACE));

  0a269	6a 0f		 push	 15			; 0000000fH
  0a26b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0a271	50		 push	 eax
  0a272	8d 55 dc	 lea	 edx, DWORD PTR _bmp3$200711[ebp]
  0a275	52		 push	 edx
  0a276	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  0a27b	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add

; 3406 : 				m_AllImagesID.Add(nID);

  0a280	8d 45 10	 lea	 eax, DWORD PTR _nID$[ebp]
  0a283	50		 push	 eax
  0a284	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a289	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 3407 : 				m_AllImagesID.Add(nID);

  0a28e	8d 4d 10	 lea	 ecx, DWORD PTR _nID$[ebp]
  0a291	51		 push	 ecx
  0a292	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a297	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add

; 3408 : 				m_AllImagesID.Add(nID);

  0a29c	8d 55 10	 lea	 edx, DWORD PTR _nID$[ebp]
  0a29f	52		 push	 edx
  0a2a0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  0a2a5	e8 00 00 00 00	 call	 ?Add@?$CArray@HAAH@@QAEHAAH@Z ; CArray<int,int &>::Add
$L200731:

; 3409 : 			}
; 3410 : 		}
; 3411 : 		::DestroyIcon(hIcon);

  0a2aa	8b 45 f0	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0a2ad	50		 push	 eax
  0a2ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4

; 3412 : 	}

  0a2b4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0a2b8	8d 4d dc	 lea	 ecx, DWORD PTR _bmp3$200711[ebp]
  0a2bb	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0a2c0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0a2c4	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200710[ebp]
  0a2c7	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0a2cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a2d3	8d 4d d4	 lea	 ecx, DWORD PTR _bmp$200709[ebp]
  0a2d6	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L200708:

; 3413 : 	return(loc);

  0a2db	8b 45 e8	 mov	 eax, DWORD PTR _loc$[ebp]

; 3414 : }

  0a2de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a2e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a2e8	8b e5		 mov	 esp, ebp
  0a2ea	5d		 pop	 ebp
  0a2eb	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L203164:
  0069b	8d 4d d4	 lea	 ecx, DWORD PTR _bmp$200709[ebp]
  0069e	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L203165:
  006a3	8d 4d cc	 lea	 ecx, DWORD PTR _bmp2$200710[ebp]
  006a6	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L203166:
  006ab	8d 4d dc	 lea	 ecx, DWORD PTR _bmp3$200711[ebp]
  006ae	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L203167:
  006b3	8d 4d b4	 lea	 ecx, DWORD PTR _il2$200727[ebp]
  006b6	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
__ehhandler$?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z:
  006bb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203169
  006c0	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddToGlobalImageList@BCMenu@@IAEHPAVCImageList@@HH@Z ENDP ; BCMenu::AddToGlobalImageList
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
?SetMenuItemBkColor@BCMenu@@QAEXK@Z PROC NEAR		; BCMenu::SetMenuItemBkColor
; _this$ = ecx

; 3418 : { 

  0a2f0	55		 push	 ebp
  0a2f1	8b ec		 mov	 ebp, esp
  0a2f3	51		 push	 ecx
  0a2f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3419 : 	m_menuItemBkColor = col;	

  0a2f7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0a2fa	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  0a2fd	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 3420 : }

  0a300	8b e5		 mov	 esp, ebp
  0a302	5d		 pop	 ebp
  0a303	c2 04 00	 ret	 4
?SetMenuItemBkColor@BCMenu@@QAEXK@Z ENDP		; BCMenu::SetMenuItemBkColor
; Function compile flags: /Odt
_this$ = -4						; size = 4
_col$ = 8						; size = 4
?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z PROC NEAR	; BCMenu::SetMenuItemBitmapBkColor
; _this$ = ecx

; 3423 : { 

  0a310	55		 push	 ebp
  0a311	8b ec		 mov	 ebp, esp
  0a313	51		 push	 ecx
  0a314	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3424 : 	m_menuItemBitmapBkColor = col; 	

  0a317	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0a31a	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  0a31d	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 3425 : 	m_bitmapBackground      = col;

  0a320	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0a323	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]
  0a326	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 3426 : }

  0a329	8b e5		 mov	 esp, ebp
  0a32b	5d		 pop	 ebp
  0a32c	c2 04 00	 ret	 4
?SetMenuItemBitmapBkColor@BCMenu@@QAEXK@Z ENDP		; BCMenu::SetMenuItemBitmapBkColor
_TEXT	ENDS
PUBLIC	?SetTextColor@BCMenu@@QAEXK@Z			; BCMenu::SetTextColor
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
?SetTextColor@BCMenu@@QAEXK@Z PROC NEAR			; BCMenu::SetTextColor
; _this$ = ecx

; 3429 : {

  0a330	55		 push	 ebp
  0a331	8b ec		 mov	 ebp, esp
  0a333	51		 push	 ecx
  0a334	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3430 : 	m_menuItemTextColor = col;

  0a337	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0a33a	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  0a33d	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 3431 : }

  0a340	8b e5		 mov	 esp, ebp
  0a342	5d		 pop	 ebp
  0a343	c2 04 00	 ret	 4
?SetTextColor@BCMenu@@QAEXK@Z ENDP			; BCMenu::SetTextColor
_TEXT	ENDS
PUBLIC	?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z ; BCMenu::SetMenuItemBitmap
xdata$x	SEGMENT
$T203180 DD	0ffffffffH
	DD	FLAT:$L203176
$T203178 DD	019930520H
	DD	01H
	DD	FLAT:$T203180
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bmp$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_text$ = 12						; size = 4
_hBitmap$ = 16						; size = 4
?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z PROC NEAR ; BCMenu::SetMenuItemBitmap
; _this$ = ecx

; 3434 : {

  0a350	55		 push	 ebp
  0a351	8b ec		 mov	 ebp, esp
  0a353	6a ff		 push	 -1
  0a355	68 00 00 00 00	 push	 __ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z
  0a35a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0a360	50		 push	 eax
  0a361	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0a368	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0a36b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3435 : 	CBitmap bmp;

  0a36e	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a371	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0a376	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3436 : 	ASSERT(hBitmap);
; 3437 : 	if (bmp.m_hObject)

  0a37d	83 7d f0 00	 cmp	 DWORD PTR _bmp$[ebp+4], 0
  0a381	74 08		 je	 SHORT $L200753

; 3438 : 		bmp.Detach();

  0a383	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a386	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
$L200753:

; 3439 : 
; 3440 : 	bmp.Attach(hBitmap);

  0a38b	8b 45 10	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  0a38e	50		 push	 eax
  0a38f	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a392	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 3441 : 	ModifyODMenuA( text, nID, &bmp );

  0a397	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a39a	51		 push	 ecx
  0a39b	8b 55 08	 mov	 edx, DWORD PTR _nID$[ebp]
  0a39e	52		 push	 edx
  0a39f	8b 45 0c	 mov	 eax, DWORD PTR _text$[ebp]
  0a3a2	50		 push	 eax
  0a3a3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0a3a6	e8 00 00 00 00	 call	 ?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuA

; 3442 : }

  0a3ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a3b2	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a3b5	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0a3ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a3bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a3c4	8b e5		 mov	 esp, ebp
  0a3c6	5d		 pop	 ebp
  0a3c7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L203176:
  006c5	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  006c8	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z:
  006cd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203178
  006d2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetMenuItemBitmap@BCMenu@@QAEXIPBDPAUHBITMAP__@@@Z ENDP ; BCMenu::SetMenuItemBitmap
PUBLIC	?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z		; BCMenu::SetMenuItemBitmap
EXTRN	__imp__LoadImageA@24:NEAR
xdata$x	SEGMENT
$T203186 DD	0ffffffffH
	DD	FLAT:$L203182
$T203184 DD	019930520H
	DD	01H
	DD	FLAT:$T203186
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
_hBitmap$ = -24						; size = 4
_bmp$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_text$ = 12						; size = 4
_bitmap$ = 16						; size = 4
?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z PROC NEAR	; BCMenu::SetMenuItemBitmap
; _this$ = ecx

; 3445 : {

  0a3d0	55		 push	 ebp
  0a3d1	8b ec		 mov	 ebp, esp
  0a3d3	6a ff		 push	 -1
  0a3d5	68 00 00 00 00	 push	 __ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z
  0a3da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0a3e0	50		 push	 eax
  0a3e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0a3e8	83 ec 10	 sub	 esp, 16			; 00000010H
  0a3eb	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 3446 : 	CBitmap bmp;

  0a3ee	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a3f1	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  0a3f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3447 : 	HBITMAP hBitmap = NULL;

  0a3fd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hBitmap$[ebp], 0

; 3448 : 	hBitmap = (HBITMAP)::LoadImage(NULL, bitmap, IMAGE_BITMAP, 
; 3449 : 		0, 0, LR_DEFAULTSIZE|LR_LOADFROMFILE);

  0a404	6a 50		 push	 80			; 00000050H
  0a406	6a 00		 push	 0
  0a408	6a 00		 push	 0
  0a40a	6a 00		 push	 0
  0a40c	8b 45 10	 mov	 eax, DWORD PTR _bitmap$[ebp]
  0a40f	50		 push	 eax
  0a410	6a 00		 push	 0
  0a412	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadImageA@24
  0a418	89 45 e8	 mov	 DWORD PTR _hBitmap$[ebp], eax

; 3450 : 	ASSERT(hBitmap);
; 3451 : 
; 3452 : 	if (bmp.m_hObject)

  0a41b	83 7d f0 00	 cmp	 DWORD PTR _bmp$[ebp+4], 0
  0a41f	74 08		 je	 SHORT $L200764

; 3453 : 		bmp.Detach();

  0a421	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a424	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
$L200764:

; 3454 : 
; 3455 : 	bmp.Attach(hBitmap);

  0a429	8b 4d e8	 mov	 ecx, DWORD PTR _hBitmap$[ebp]
  0a42c	51		 push	 ecx
  0a42d	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a430	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 3456 : 	ModifyODMenuA( text, nID, &bmp );

  0a435	8d 55 ec	 lea	 edx, DWORD PTR _bmp$[ebp]
  0a438	52		 push	 edx
  0a439	8b 45 08	 mov	 eax, DWORD PTR _nID$[ebp]
  0a43c	50		 push	 eax
  0a43d	8b 4d 0c	 mov	 ecx, DWORD PTR _text$[ebp]
  0a440	51		 push	 ecx
  0a441	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0a444	e8 00 00 00 00	 call	 ?ModifyODMenuA@BCMenu@@QAEHPBDIPAVCBitmap@@@Z ; BCMenu::ModifyODMenuA

; 3457 : }

  0a449	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0a450	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  0a453	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0a458	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0a45b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0a462	8b e5		 mov	 esp, ebp
  0a464	5d		 pop	 ebp
  0a465	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L203182:
  006d7	8d 4d ec	 lea	 ecx, DWORD PTR _bmp$[ebp]
  006da	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z:
  006df	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203184
  006e4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetMenuItemBitmap@BCMenu@@QAEXIPBD0@Z ENDP		; BCMenu::SetMenuItemBitmap
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z PROC NEAR ; ATL::operator==, COMDAT

; 2081 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2082 : 		return( str1.Compare( str2 ) == 0 );

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _str2$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _str1$[ebp]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 2083 : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@0@Z ENDP ; ATL::operator==
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_psz2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z PROC NEAR ; ATL::operator==, COMDAT

; 2087 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2088 : 		return( str1.Compare( psz2 ) == 0 );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _psz2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _str1$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00010	f7 d8		 neg	 eax
  00012	1b c0		 sbb	 eax, eax
  00014	40		 inc	 eax

; 2089 : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ENDP ; ATL::operator==
_TEXT	ENDS
PUBLIC	?GetAt@CPtrArray@@QBEPAXH@Z			; CPtrArray::GetAt
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt, COMDAT
; _this$ = ecx

; 1832 : 		{ return (TYPE)BASE_CLASS::GetAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetAt@CPtrArray@@QBEPAXH@Z ; CPtrArray::GetAt
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?GetAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QBEPAVBCMenuData@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::GetAt
_TEXT	ENDS
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:NEAR	; AfxThrowInvalidArgException
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcoll.inl
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@CPtrArray@@QBEPAXH@Z PROC NEAR			; CPtrArray::GetAt, COMDAT
; _this$ = ecx

; 204  : 	{ ASSERT(nIndex >= 0 && nIndex < m_nSize);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 205  : 		if( nIndex < 0 || nIndex >= m_nSize )

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7c 0b		 jl	 SHORT $L32332
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00013	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00016	7c 05		 jl	 SHORT $L32331
$L32332:

; 206  : 			AfxThrowInvalidArgException();

  00018	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L32331:

; 207  : 		return m_pData[nIndex]; }

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00026	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
$L203193:
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?GetAt@CPtrArray@@QBEPAXH@Z ENDP			; CPtrArray::GetAt
_TEXT	ENDS
PUBLIC	?Add@CPtrArray@@QAEHPAX@Z			; CPtrArray::Add
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add, COMDAT
; _this$ = ecx

; 1842 : 	   { return BASE_CLASS::Add(newElement); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Add@CPtrArray@@QAEHPAX@Z ; CPtrArray::Add
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHPAVBCMenuData@@@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::Add
_TEXT	ENDS
EXTRN	?SetAtGrow@CPtrArray@@QAEXHPAX@Z:NEAR		; CPtrArray::SetAtGrow
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcoll.inl
;	COMDAT ?Add@CPtrArray@@QAEHPAX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@CPtrArray@@QAEHPAX@Z PROC NEAR			; CPtrArray::Add, COMDAT
; _this$ = ecx

; 224  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 4d fc	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 225  : 		SetAtGrow(nIndex, newElement);

  00012	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00015	52		 push	 edx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetAtGrow@CPtrArray@@QAEXHPAX@Z ; CPtrArray::SetAtGrow

; 226  : 		return nIndex; }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Add@CPtrArray@@QAEHPAX@Z ENDP				; CPtrArray::Add
_TEXT	ENDS
EXTRN	?Append@CPtrArray@@QAEHABV1@@Z:NEAR		; CPtrArray::Append
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append, COMDAT
; _this$ = ecx

; 1844 : 	   { return BASE_CLASS::Append(src); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Append@CPtrArray@@QAEHABV1@@Z ; CPtrArray::Append
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?Append@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEHABV1@@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::Append
_TEXT	ENDS
EXTRN	?InsertAt@CPtrArray@@QAEXHPAXH@Z:NEAR		; CPtrArray::InsertAt
; Function compile flags: /Odt
;	COMDAT ?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
_nCount$ = 16						; size = 4
?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt, COMDAT
; _this$ = ecx

; 1850 : 		{ BASE_CLASS::InsertAt(nIndex, newElement, nCount); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _newElement$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?InsertAt@CPtrArray@@QAEXHPAXH@Z ; CPtrArray::InsertAt
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?InsertAt@?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEXHPAVBCMenuData@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::InsertAt
_TEXT	ENDS
PUBLIC	??ACPtrArray@@QAEAAPAXH@Z			; CPtrArray::operator[]
; Function compile flags: /Odt
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[], COMDAT
; _this$ = ecx

; 1858 : 		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??ACPtrArray@@QAEAAPAXH@Z ; CPtrArray::operator[]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenuData@@@@QAEAAPAVBCMenuData@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenuData *>::operator[]
_TEXT	ENDS
PUBLIC	?ElementAt@CPtrArray@@QAEAAPAXH@Z		; CPtrArray::ElementAt
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcoll.inl
;	COMDAT ??ACPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??ACPtrArray@@QAEAAPAXH@Z PROC NEAR			; CPtrArray::operator[], COMDAT
; _this$ = ecx

; 231  : 	{ return ElementAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?ElementAt@CPtrArray@@QAEAAPAXH@Z ; CPtrArray::ElementAt
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??ACPtrArray@@QAEAAPAXH@Z ENDP				; CPtrArray::operator[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@CPtrArray@@QAEAAPAXH@Z PROC NEAR		; CPtrArray::ElementAt, COMDAT
; _this$ = ecx

; 215  : 	{ ASSERT(nIndex >= 0 && nIndex < m_nSize);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 216  : 		if( nIndex < 0 || nIndex >= m_nSize )

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7c 0b		 jl	 SHORT $L32347
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00013	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00016	7c 05		 jl	 SHORT $L32346
$L32347:

; 217  : 			AfxThrowInvalidArgException();

  00018	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L32346:

; 218  : 		return m_pData[nIndex]; }

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00026	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
$L203207:
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?ElementAt@CPtrArray@@QAEAAPAXH@Z ENDP			; CPtrArray::ElementAt
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add, COMDAT
; _this$ = ecx

; 1842 : 	   { return BASE_CLASS::Add(newElement); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Add@CPtrArray@@QAEHPAX@Z ; CPtrArray::Add
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEHPAUHMENU__@@@Z ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::Add
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[], COMDAT
; _this$ = ecx

; 1858 : 		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??ACPtrArray@@QAEAAPAXH@Z ; CPtrArray::operator[]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??A?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAEAAPAUHMENU__@@H@Z ENDP ; CTypedPtrArray<CPtrArray,HMENU__ *>::operator[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::Add, COMDAT
; _this$ = ecx

; 1842 : 	   { return BASE_CLASS::Add(newElement); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Add@CPtrArray@@QAEHPAX@Z ; CPtrArray::Add
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?Add@?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEHPAVBCMenu@@@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::Add
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z PROC NEAR ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[], COMDAT
; _this$ = ecx

; 1858 : 		{ return (TYPE&)BASE_CLASS::operator[](nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??ACPtrArray@@QAEAAPAXH@Z ; CPtrArray::operator[]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??A?$CTypedPtrArray@VCPtrArray@@PAVBCMenu@@@@QAEAAPAVBCMenu@@H@Z ENDP ; CTypedPtrArray<CPtrArray,BCMenu *>::operator[]
_TEXT	ENDS
EXTRN	?AfxGetThread@@YGPAVCWinThread@@XZ:NEAR		; AfxGetThread
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?AfxGetMainWnd@@YGPAVCWnd@@XZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_pThread$ = -4						; size = 4
?AfxGetMainWnd@@YGPAVCWnd@@XZ PROC NEAR			; AfxGetMainWnd, COMDAT

; 35   : 	{ CWinThread* pThread = AfxGetThread();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	e8 00 00 00 00	 call	 ?AfxGetThread@@YGPAVCWinThread@@XZ ; AfxGetThread
  0000b	89 45 fc	 mov	 DWORD PTR _pThread$[ebp], eax

; 36   : 		return pThread != NULL ? pThread->GetMainWnd() : NULL; }

  0000e	83 7d fc 00	 cmp	 DWORD PTR _pThread$[ebp], 0
  00012	74 10		 je	 SHORT $L203218
  00014	8b 45 fc	 mov	 eax, DWORD PTR _pThread$[ebp]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _pThread$[ebp]
  0001c	ff 52 7c	 call	 DWORD PTR [edx+124]
  0001f	89 45 f8	 mov	 DWORD PTR tv70[ebp], eax
  00022	eb 07		 jmp	 SHORT $L203219
$L203218:
  00024	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L203219:
  0002b	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?AfxGetMainWnd@@YGPAVCWnd@@XZ ENDP			; AfxGetMainWnd
_TEXT	ENDS
PUBLIC	??_R0?AVCGdiObject@@@8				; CGdiObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CGdiObject@@8			; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R4CPen@@6B@					; CPen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPen@@@8				; CPen `RTTI Type Descriptor'
PUBLIC	??_R3CPen@@8					; CPen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPen@@8					; CPen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CPen@@8				; CPen::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??_7CPen@@6B@					; CPen::`vftable'
PUBLIC	??_GCPen@@UAEPAXI@Z				; CPen::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ:NEAR ; CPen::GetRuntimeClass
EXTRN	??_ECPen@@UAEPAXI@Z:NEAR			; CPen::`vector deleting destructor'
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT
??_7CPen@@6B@ DD FLAT:??_R4CPen@@6B@			; CPen::`vftable'
	DD	FLAT:?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECPen@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CPen@@6B@
rdata$r	SEGMENT
??_R4CPen@@6B@ DD 00H					; CPen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPen@@@8
	DD	FLAT:??_R3CPen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPen@@@8
_DATA	SEGMENT
??_R0?AVCPen@@@8 DD FLAT:??_7type_info@@6B@		; CPen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPen@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CPen@@8
rdata$r	SEGMENT
??_R3CPen@@8 DD	00H					; CPen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CPen@@8
rdata$r	ENDS
;	COMDAT ??_R2CPen@@8
rdata$r	SEGMENT
??_R2CPen@@8 DD	FLAT:??_R1A@?0A@A@CPen@@8		; CPen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CPen@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CPen@@8 DD FLAT:??_R0?AVCPen@@@8		; CPen::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CGdiObject@@8 DD FLAT:??_R0?AVCGdiObject@@@8 ; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT
??_R0?AVCGdiObject@@@8 DD FLAT:??_7type_info@@6B@	; CGdiObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGdiObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0CPen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPen@@QAE@XZ PROC NEAR				; CPen::CPen, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPen@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CPen@@QAE@XZ ENDP					; CPen::CPen
_TEXT	ENDS
PUBLIC	??_R4CGdiObject@@6B@				; CGdiObject::`RTTI Complete Object Locator'
PUBLIC	??_R3CGdiObject@@8				; CGdiObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGdiObject@@8				; CGdiObject::`RTTI Base Class Array'
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CGdiObject::GetRuntimeClass
EXTRN	??_ECGdiObject@@UAEPAXI@Z:NEAR			; CGdiObject::`vector deleting destructor'
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:??_R4CGdiObject@@6B@	; CGdiObject::`vftable'
	DD	FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT
??_R4CGdiObject@@6B@ DD 00H				; CGdiObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGdiObject@@@8
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT
??_R3CGdiObject@@8 DD 00H				; CGdiObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT
??_R2CGdiObject@@8 DD FLAT:??_R1A@?0A@A@CGdiObject@@8	; CGdiObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGdiObject@@QAE@XZ PROC NEAR				; CGdiObject::CGdiObject, COMDAT
; _this$ = ecx

; 82   : 	{ m_hObject = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObject@@IAE@XZ PROC NEAR				; CObject::CObject, COMDAT
; _this$ = ecx

; 21   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGdiObject@@UAEPAXI@Z PROC NEAR			; CGdiObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41495
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41495:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
xdata$x	SEGMENT
$T203236 DD	0ffffffffH
	DD	FLAT:$L203232
$T203234 DD	019930520H
	DD	01H
	DD	FLAT:$T203236
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGdiObject@@UAE@XZ PROC NEAR				; CGdiObject::~CGdiObject, COMDAT
; _this$ = ecx

; 84   : 	{ DeleteObject(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGdiObject@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L203232:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CGdiObject@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203234
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CObject@@UAE@XZ PROC NEAR				; CObject::~CObject, COMDAT
; _this$ = ecx

; 23   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPen@@UAEPAXI@Z PROC NEAR				; CPen::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPen@@UAE@XZ		; CPen::~CPen
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41541
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41541:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCPen@@UAEPAXI@Z ENDP				; CPen::`scalar deleting destructor'
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPen@@UAE@XZ PROC NEAR				; CPen::~CPen, COMDAT
; _this$ = ecx

; 106  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPen@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CPen@@UAE@XZ ENDP					; CPen::~CPen
_TEXT	ENDS
EXTRN	__imp__CreatePen@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreatePen@CPen@@QAEHHHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPenStyle$ = 8						; size = 4
_nWidth$ = 12						; size = 4
_crColor$ = 16						; size = 4
?CreatePen@CPen@@QAEHHHK@Z PROC NEAR			; CPen::CreatePen, COMDAT
; _this$ = ecx

; 108  : 	{ return Attach(::CreatePen(nPenStyle, nWidth, crColor)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _crColor$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nPenStyle$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePen@12
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
?CreatePen@CPen@@QAEHHHK@Z ENDP				; CPen::CreatePen
_TEXT	ENDS
PUBLIC	?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z	; CArray<int,int &>::Serialize
PUBLIC	??_7?$CArray@HAAH@@6B@				; CArray<int,int &>::`vftable'
PUBLIC	??_G?$CArray@HAAH@@UAEPAXI@Z			; CArray<int,int &>::`scalar deleting destructor'
PUBLIC	??_R4?$CArray@HAAH@@6B@				; CArray<int,int &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@HAAH@@@8			; CArray<int,int &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@HAAH@@8				; CArray<int,int &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@HAAH@@8				; CArray<int,int &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CArray@HAAH@@8			; CArray<int,int &>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CArray@HAAH@@UAEPAXI@Z:NEAR		; CArray<int,int &>::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CObject::GetRuntimeClass
;	COMDAT ??_7?$CArray@HAAH@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
CONST	SEGMENT
??_7?$CArray@HAAH@@6B@ DD FLAT:??_R4?$CArray@HAAH@@6B@	; CArray<int,int &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@HAAH@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CArray@HAAH@@6B@
rdata$r	SEGMENT
??_R4?$CArray@HAAH@@6B@ DD 00H				; CArray<int,int &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@HAAH@@@8
	DD	FLAT:??_R3?$CArray@HAAH@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@HAAH@@@8
_DATA	SEGMENT
??_R0?AV?$CArray@HAAH@@@8 DD FLAT:??_7type_info@@6B@	; CArray<int,int &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@HAAH@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CArray@HAAH@@8
rdata$r	SEGMENT
??_R3?$CArray@HAAH@@8 DD 00H				; CArray<int,int &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@HAAH@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HAAH@@8
rdata$r	SEGMENT
??_R2?$CArray@HAAH@@8 DD FLAT:??_R1A@?0A@A@?$CArray@HAAH@@8 ; CArray<int,int &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HAAH@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CArray@HAAH@@8 DD FLAT:??_R0?AV?$CArray@HAAH@@@8 ; CArray<int,int &>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0?$CArray@HAAH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CArray@HAAH@@QAE@XZ PROC NEAR			; CArray<int,int &>::CArray<int,int &>, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HAAH@@6B@

; 350  : 	m_pData = NULL;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 351  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 352  : }

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CArray@HAAH@@QAE@XZ ENDP				; CArray<int,int &>::CArray<int,int &>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??BCBrush@@QBEPAUHBRUSH__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
??BCBrush@@QBEPAUHBRUSH__@@XZ PROC NEAR			; CBrush::operator HBRUSH__ *, COMDAT
; _this$ = ecx

; 124  : 	{ return (HBRUSH)(this == NULL ? NULL : m_hObject); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L203253
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L203254
$L203253:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L203254:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??BCBrush@@QBEPAUHBRUSH__@@XZ ENDP			; CBrush::operator HBRUSH__ *
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@HAAH@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CArray@HAAH@@QBEHXZ PROC NEAR		; CArray<int,int &>::GetSize, COMDAT
; _this$ = ecx

; 272  : 	{ return m_nSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetSize@?$CArray@HAAH@@QBEHXZ ENDP			; CArray<int,int &>::GetSize
_TEXT	ENDS
PUBLIC	?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z		; CArray<int,int &>::SetAtGrow
; Function compile flags: /Odt
;	COMDAT ?Add@?$CArray@HAAH@@QAEHAAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CArray@HAAH@@QAEHAAH@Z PROC NEAR			; CArray<int,int &>::Add, COMDAT
; _this$ = ecx

; 334  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 4d fc	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 335  : 		SetAtGrow(nIndex, newElement);

  00012	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00015	52		 push	 edx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z ; CArray<int,int &>::SetAtGrow

; 336  : 		return nIndex; }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Add@?$CArray@HAAH@@QAEHAAH@Z ENDP			; CArray<int,int &>::Add
_TEXT	ENDS
PUBLIC	??_R4CBrush@@6B@				; CBrush::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBrush@@@8				; CBrush `RTTI Type Descriptor'
PUBLIC	??_R3CBrush@@8					; CBrush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBrush@@8					; CBrush::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBrush@@8				; CBrush::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_7CBrush@@6B@					; CBrush::`vftable'
PUBLIC	??_GCBrush@@UAEPAXI@Z				; CBrush::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ:NEAR ; CBrush::GetRuntimeClass
EXTRN	??_ECBrush@@UAEPAXI@Z:NEAR			; CBrush::`vector deleting destructor'
;	COMDAT ??_7CBrush@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
CONST	SEGMENT
??_7CBrush@@6B@ DD FLAT:??_R4CBrush@@6B@		; CBrush::`vftable'
	DD	FLAT:?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBrush@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CBrush@@6B@
rdata$r	SEGMENT
??_R4CBrush@@6B@ DD 00H					; CBrush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBrush@@@8
	DD	FLAT:??_R3CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBrush@@@8
_DATA	SEGMENT
??_R0?AVCBrush@@@8 DD FLAT:??_7type_info@@6B@		; CBrush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBrush@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBrush@@8
rdata$r	SEGMENT
??_R3CBrush@@8 DD 00H					; CBrush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R2CBrush@@8
rdata$r	SEGMENT
??_R2CBrush@@8 DD FLAT:??_R1A@?0A@A@CBrush@@8		; CBrush::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBrush@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBrush@@8 DD FLAT:??_R0?AVCBrush@@@8	; CBrush::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CBrush@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBrush@@QAE@XZ PROC NEAR				; CBrush::CBrush, COMDAT
; _this$ = ecx

; 128  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBrush@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CBrush@@QAE@XZ ENDP					; CBrush::CBrush
_TEXT	ENDS
PUBLIC	?ElementAt@?$CArray@HAAH@@QAEAAHH@Z		; CArray<int,int &>::ElementAt
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ??A?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CArray@HAAH@@QAEAAHH@Z PROC NEAR			; CArray<int,int &>::operator[], COMDAT
; _this$ = ecx

; 342  : 	{ return ElementAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?ElementAt@?$CArray@HAAH@@QAEAAHH@Z ; CArray<int,int &>::ElementAt
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??A?$CArray@HAAH@@QAEAAHH@Z ENDP			; CArray<int,int &>::operator[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBrush@@UAEPAXI@Z PROC NEAR				; CBrush::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41589
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41589:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBrush@@UAEPAXI@Z ENDP				; CBrush::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$CArray@HAAH@@UAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T203268 = -8						; size = 4
_i$201033 = -4						; size = 4
??1?$CArray@HAAH@@UAE@XZ PROC NEAR			; CArray<int,int &>::~CArray<int,int &>, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HAAH@@6B@

; 357  : 	ASSERT_VALID(this);
; 358  : 
; 359  : 	if (m_pData != NULL)

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00019	74 34		 je	 SHORT $L201030

; 360  : 	{
; 361  : 		for( int i = 0; i < m_nSize; i++ )

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$201033[ebp], 0
  00022	eb 09		 jmp	 SHORT $L201034
$L201035:
  00024	8b 55 fc	 mov	 edx, DWORD PTR _i$201033[ebp]
  00027	83 c2 01	 add	 edx, 1
  0002a	89 55 fc	 mov	 DWORD PTR _i$201033[ebp], edx
$L201034:
  0002d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _i$201033[ebp]
  00033	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00036	7d 02		 jge	 SHORT $L201036

; 362  : 			(m_pData + i)->~TYPE();

  00038	eb ea		 jmp	 SHORT $L201035
$L201036:

; 363  : 		delete[] (BYTE*)m_pData;

  0003a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	89 45 f8	 mov	 DWORD PTR $T203268[ebp], eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR $T203268[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004c	83 c4 04	 add	 esp, 4
$L201030:

; 364  : 	}
; 365  : }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$CArray@HAAH@@UAE@XZ ENDP				; CArray<int,int &>::~CArray<int,int &>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBrush@@UAE@XZ PROC NEAR				; CBrush::~CBrush, COMDAT
; _this$ = ecx

; 130  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBrush@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CBrush@@UAE@XZ ENDP					; CBrush::~CBrush
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CreateSolidBrush@CBrush@@QAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crColor$ = 8						; size = 4
?CreateSolidBrush@CBrush@@QAEHK@Z PROC NEAR		; CBrush::CreateSolidBrush, COMDAT
; _this$ = ecx

; 132  : 	{ return Attach(::CreateSolidBrush(crColor)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _crColor$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?CreateSolidBrush@CBrush@@QAEHK@Z ENDP			; CBrush::CreateSolidBrush
_TEXT	ENDS
PUBLIC	?SetSize@?$CArray@HAAH@@QAEXHH@Z		; CArray<int,int &>::SetSize
PUBLIC	??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z	; SerializeElements<int>
PUBLIC	?IsStoring@CArchive@@QBEHXZ			; CArchive::IsStoring
EXTRN	?ReadCount@CArchive@@QAEKXZ:NEAR		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:NEAR		; CArchive::WriteCount
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nOldSize$201048 = -4					; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z PROC NEAR	; CArray<int,int &>::Serialize, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	ASSERT_VALID(this);
; 631  : 
; 632  : 	CObject::Serialize(ar);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 633  : 	if (ar.IsStoring())

  00015	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00018	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0001d	85 c0		 test	 eax, eax
  0001f	74 11		 je	 SHORT $L201046

; 634  : 	{
; 635  : 		ar.WriteCount(m_nSize);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00027	52		 push	 edx
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002b	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 636  : 	}
; 637  : 	else

  00030	eb 19		 jmp	 SHORT $L201047
$L201046:

; 638  : 	{
; 639  : 		DWORD_PTR nOldSize = ar.ReadCount();

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00035	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  0003a	89 45 fc	 mov	 DWORD PTR _nOldSize$201048[ebp], eax

; 640  : 		SetSize(nOldSize, -1);

  0003d	6a ff		 push	 -1
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _nOldSize$201048[ebp]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HAAH@@QAEXHH@Z ; CArray<int,int &>::SetSize
$L201047:

; 641  : 	}
; 642  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00051	52		 push	 edx
  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00058	51		 push	 ecx
  00059	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ; SerializeElements<int>

; 643  : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?Serialize@?$CArray@HAAH@@UAEXAAVCArchive@@@Z ENDP	; CArray<int,int &>::Serialize
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?IsStoring@CArchive@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStoring@CArchive@@QBEHXZ PROC NEAR			; CArchive::IsStoring, COMDAT
; _this$ = ecx

; 133  : 	{ return (m_nMode & CArchive::load) == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0000d	83 e0 01	 and	 eax, 1
  00010	f7 d8		 neg	 eax
  00012	1b c0		 sbb	 eax, eax
  00014	40		 inc	 eax
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?IsStoring@CArchive@@QBEHXZ ENDP			; CArchive::IsStoring
_TEXT	ENDS
EXTRN	__imp__CreateHatchBrush@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?CreateHatchBrush@CBrush@@QAEHHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_crColor$ = 12						; size = 4
?CreateHatchBrush@CBrush@@QAEHHK@Z PROC NEAR		; CBrush::CreateHatchBrush, COMDAT
; _this$ = ecx

; 134  : 	{ return Attach(::CreateHatchBrush(nIndex, crColor)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _crColor$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateHatchBrush@8
  00015	50		 push	 eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?CreateHatchBrush@CBrush@@QAEHHK@Z ENDP			; CBrush::CreateHatchBrush
_TEXT	ENDS
PUBLIC	?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z ; CArray<BCMenu *,BCMenu *>::Serialize
PUBLIC	??_7?$CArray@PAVBCMenu@@PAV1@@@6B@		; CArray<BCMenu *,BCMenu *>::`vftable'
PUBLIC	??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z	; CArray<BCMenu *,BCMenu *>::`scalar deleting destructor'
PUBLIC	??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@		; CArray<BCMenu *,BCMenu *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8		; CArray<BCMenu *,BCMenu *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@PAVBCMenu@@PAV1@@@8		; CArray<BCMenu *,BCMenu *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@PAVBCMenu@@PAV1@@@8		; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8	; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z:NEAR	; CArray<BCMenu *,BCMenu *>::`vector deleting destructor'
;	COMDAT ??_7?$CArray@PAVBCMenu@@PAV1@@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
CONST	SEGMENT
??_7?$CArray@PAVBCMenu@@PAV1@@@6B@ DD FLAT:??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@ ; CArray<BCMenu *,BCMenu *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CArray@PAVBCMenu@@PAV1@@@6B@ DD 00H		; CArray<BCMenu *,BCMenu *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8
	DD	FLAT:??_R3?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8
_DATA	SEGMENT
??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CArray<BCMenu *,BCMenu *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@PAVBCMenu@@PAV1@@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CArray@PAVBCMenu@@PAV1@@@8 DD 00H		; CArray<BCMenu *,BCMenu *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CArray@PAVBCMenu@@PAV1@@@8 DD FLAT:??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8 ; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CArray@PAVBCMenu@@PAV1@@@8 DD FLAT:??_R0?AV?$CArray@PAVBCMenu@@PAV1@@@@8 ; CArray<BCMenu *,BCMenu *>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ PROC NEAR		; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@PAVBCMenu@@PAV1@@@6B@

; 350  : 	m_pData = NULL;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 351  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 352  : }

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CArray@PAVBCMenu@@PAV1@@@QAE@XZ ENDP		; CArray<BCMenu *,BCMenu *>::CArray<BCMenu *,BCMenu *>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ PROC NEAR	; CArray<BCMenu *,BCMenu *>::GetSize, COMDAT
; _this$ = ecx

; 272  : 	{ return m_nSize; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetSize@?$CArray@PAVBCMenu@@PAV1@@@QBEHXZ ENDP		; CArray<BCMenu *,BCMenu *>::GetSize
_TEXT	ENDS
PUBLIC	?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::SetAtGrow
; Function compile flags: /Odt
;	COMDAT ?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::Add, COMDAT
; _this$ = ecx

; 334  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 4d fc	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 335  : 		SetAtGrow(nIndex, newElement);

  00012	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00015	52		 push	 edx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z ; CArray<BCMenu *,BCMenu *>::SetAtGrow

; 336  : 		return nIndex; }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Add@?$CArray@PAVBCMenu@@PAV1@@@QAEHPAVBCMenu@@@Z ENDP	; CArray<BCMenu *,BCMenu *>::Add
_TEXT	ENDS
PUBLIC	?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::ElementAt
; Function compile flags: /Odt
;	COMDAT ??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::operator[], COMDAT
; _this$ = ecx

; 342  : 	{ return ElementAt(nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ; CArray<BCMenu *,BCMenu *>::ElementAt
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??A?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ENDP	; CArray<BCMenu *,BCMenu *>::operator[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T203292 = -8						; size = 4
_i$201085 = -4						; size = 4
??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ PROC NEAR		; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@PAVBCMenu@@PAV1@@@6B@

; 357  : 	ASSERT_VALID(this);
; 358  : 
; 359  : 	if (m_pData != NULL)

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00019	74 34		 je	 SHORT $L201082

; 360  : 	{
; 361  : 		for( int i = 0; i < m_nSize; i++ )

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$201085[ebp], 0
  00022	eb 09		 jmp	 SHORT $L201086
$L201087:
  00024	8b 55 fc	 mov	 edx, DWORD PTR _i$201085[ebp]
  00027	83 c2 01	 add	 edx, 1
  0002a	89 55 fc	 mov	 DWORD PTR _i$201085[ebp], edx
$L201086:
  0002d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _i$201085[ebp]
  00033	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00036	7d 02		 jge	 SHORT $L201088

; 362  : 			(m_pData + i)->~TYPE();

  00038	eb ea		 jmp	 SHORT $L201087
$L201088:

; 363  : 		delete[] (BYTE*)m_pData;

  0003a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	89 45 f8	 mov	 DWORD PTR $T203292[ebp], eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR $T203292[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004c	83 c4 04	 add	 esp, 4
$L201082:

; 364  : 	}
; 365  : }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ENDP		; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
_TEXT	ENDS
PUBLIC	??_R4CFont@@6B@					; CFont::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFont@@@8				; CFont `RTTI Type Descriptor'
PUBLIC	??_R3CFont@@8					; CFont::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFont@@8					; CFont::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CFont@@8				; CFont::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:NEAR ; CFont::GetRuntimeClass
EXTRN	??_ECFont@@UAEPAXI@Z:NEAR			; CFont::`vector deleting destructor'
;	COMDAT ??_7CFont@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:??_R4CFont@@6B@			; CFont::`vftable'
	DD	FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT
??_R4CFont@@6B@ DD 00H					; CFont::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFont@@@8
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT
??_R0?AVCFont@@@8 DD FLAT:??_7type_info@@6B@		; CFont `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFont@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT
??_R3CFont@@8 DD 00H					; CFont::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CFont@@8
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT
??_R2CFont@@8 DD FLAT:??_R1A@?0A@A@CFont@@8		; CFont::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFont@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CFont@@8 DD FLAT:??_R0?AVCFont@@@8		; CFont::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFont@@QAE@XZ PROC NEAR				; CFont::CFont, COMDAT
; _this$ = ecx

; 153  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CFont@@QAE@XZ ENDP					; CFont::CFont
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFont@@UAEPAXI@Z PROC NEAR				; CFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41640
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41640:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z	; CArray<BCMenu *,BCMenu *>::SetSize
PUBLIC	??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z ; SerializeElements<BCMenu *>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nOldSize$201100 = -4					; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::Serialize, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	ASSERT_VALID(this);
; 631  : 
; 632  : 	CObject::Serialize(ar);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 633  : 	if (ar.IsStoring())

  00015	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00018	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0001d	85 c0		 test	 eax, eax
  0001f	74 11		 je	 SHORT $L201098

; 634  : 	{
; 635  : 		ar.WriteCount(m_nSize);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00027	52		 push	 edx
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002b	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 636  : 	}
; 637  : 	else

  00030	eb 19		 jmp	 SHORT $L201099
$L201098:

; 638  : 	{
; 639  : 		DWORD_PTR nOldSize = ar.ReadCount();

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00035	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  0003a	89 45 fc	 mov	 DWORD PTR _nOldSize$201100[ebp], eax

; 640  : 		SetSize(nOldSize, -1);

  0003d	6a ff		 push	 -1
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _nOldSize$201100[ebp]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z ; CArray<BCMenu *,BCMenu *>::SetSize
$L201099:

; 641  : 	}
; 642  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00051	52		 push	 edx
  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00058	51		 push	 ecx
  00059	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z ; SerializeElements<BCMenu *>

; 643  : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?Serialize@?$CArray@PAVBCMenu@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CArray<BCMenu *,BCMenu *>::Serialize
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFont@@UAE@XZ PROC NEAR				; CFont::~CFont, COMDAT
; _this$ = ecx

; 155  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
EXTRN	__imp__CreateFontIndirectA@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpLogFont$ = 8						; size = 4
?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z PROC NEAR ; CFont::CreateFontIndirectA, COMDAT
; _this$ = ecx

; 157  : 	{ return Attach(::CreateFontIndirect(lpLogFont)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpLogFont$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ENDP	; CFont::CreateFontIndirectA
_TEXT	ENDS
PUBLIC	?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z	; CArray<int,int>::Serialize
PUBLIC	??_7?$CArray@HH@@6B@				; CArray<int,int>::`vftable'
PUBLIC	??_G?$CArray@HH@@UAEPAXI@Z			; CArray<int,int>::`scalar deleting destructor'
PUBLIC	??_R4?$CArray@HH@@6B@				; CArray<int,int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@HH@@@8				; CArray<int,int> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@HH@@8				; CArray<int,int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@HH@@8				; CArray<int,int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@?$CArray@HH@@8			; CArray<int,int>::`RTTI Base Class Descriptor at (0,-1,0,0)'
EXTRN	??_E?$CArray@HH@@UAEPAXI@Z:NEAR			; CArray<int,int>::`vector deleting destructor'
;	COMDAT ??_7?$CArray@HH@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
CONST	SEGMENT
??_7?$CArray@HH@@6B@ DD FLAT:??_R4?$CArray@HH@@6B@	; CArray<int,int>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@HH@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4?$CArray@HH@@6B@
rdata$r	SEGMENT
??_R4?$CArray@HH@@6B@ DD 00H				; CArray<int,int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@HH@@@8
	DD	FLAT:??_R3?$CArray@HH@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@HH@@@8
_DATA	SEGMENT
??_R0?AV?$CArray@HH@@@8 DD FLAT:??_7type_info@@6B@	; CArray<int,int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@HH@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$CArray@HH@@8
rdata$r	SEGMENT
??_R3?$CArray@HH@@8 DD 00H				; CArray<int,int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@HH@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@HH@@8
rdata$r	SEGMENT
??_R2?$CArray@HH@@8 DD FLAT:??_R1A@?0A@A@?$CArray@HH@@8	; CArray<int,int>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$CArray@HH@@8
rdata$r	SEGMENT
??_R1A@?0A@A@?$CArray@HH@@8 DD FLAT:??_R0?AV?$CArray@HH@@@8 ; CArray<int,int>::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0?$CArray@HH@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CArray@HH@@QAE@XZ PROC NEAR			; CArray<int,int>::CArray<int,int>, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HH@@6B@

; 350  : 	m_pData = NULL;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 351  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 352  : }

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CArray@HH@@QAE@XZ ENDP				; CArray<int,int>::CArray<int,int>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetAt@?$CArray@HH@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CArray@HH@@QAEAAHH@Z PROC NEAR			; CArray<int,int>::GetAt, COMDAT
; _this$ = ecx

; 287  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);
; 289  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7c 19		 jl	 SHORT $L201119
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00013	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00016	7d 0e		 jge	 SHORT $L201119

; 290  : 		return m_pData[nIndex]; 

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00021	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00024	eb 05		 jmp	 SHORT $L203310
$L201119:

; 291  : 	AfxThrowInvalidArgException();		

  00026	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L203310:

; 292  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?GetAt@?$CArray@HH@@QAEAAHH@Z ENDP			; CArray<int,int>::GetAt
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAt@?$CArray@HH@@QAEXHH@Z PROC NEAR			; CArray<int,int>::SetAt, COMDAT
; _this$ = ecx

; 303  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);
; 305  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7c 1c		 jl	 SHORT $L201128
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00013	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00016	7d 11		 jge	 SHORT $L201128

; 306  : 		m_pData[nIndex] = newElement; 

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00021	8b 55 0c	 mov	 edx, DWORD PTR _newElement$[ebp]
  00024	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 307  : 	else

  00027	eb 05		 jmp	 SHORT $L203312
$L201128:

; 308  : 		AfxThrowInvalidArgException();		

  00029	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L203312:

; 309  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetAt@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::SetAt
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??BCBitmap@@QBEPAUHBITMAP__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
??BCBitmap@@QBEPAUHBITMAP__@@XZ PROC NEAR		; CBitmap::operator HBITMAP__ *, COMDAT
; _this$ = ecx

; 173  : 	{ return (HBITMAP)(this == NULL ? NULL : m_hObject); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L203315
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L203316
$L203315:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L203316:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??BCBitmap@@QBEPAUHBITMAP__@@XZ ENDP			; CBitmap::operator HBITMAP__ *
_TEXT	ENDS
PUBLIC	?SetAtGrow@?$CArray@HH@@QAEXHH@Z		; CArray<int,int>::SetAtGrow
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?Add@?$CArray@HH@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CArray@HH@@QAEHH@Z PROC NEAR			; CArray<int,int>::Add, COMDAT
; _this$ = ecx

; 334  : 	{ INT_PTR nIndex = m_nSize;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	89 4d fc	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 335  : 		SetAtGrow(nIndex, newElement);

  00012	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00015	52		 push	 edx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetAtGrow@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetAtGrow

; 336  : 		return nIndex; }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Add@?$CArray@HH@@QAEHH@Z ENDP				; CArray<int,int>::Add
_TEXT	ENDS
PUBLIC	??_R4CBitmap@@6B@				; CBitmap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBitmap@@@8				; CBitmap `RTTI Type Descriptor'
PUBLIC	??_R3CBitmap@@8					; CBitmap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBitmap@@8					; CBitmap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBitmap@@8				; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_7CBitmap@@6B@				; CBitmap::`vftable'
PUBLIC	??_GCBitmap@@UAEPAXI@Z				; CBitmap::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ:NEAR ; CBitmap::GetRuntimeClass
EXTRN	??_ECBitmap@@UAEPAXI@Z:NEAR			; CBitmap::`vector deleting destructor'
;	COMDAT ??_7CBitmap@@6B@
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
CONST	SEGMENT
??_7CBitmap@@6B@ DD FLAT:??_R4CBitmap@@6B@		; CBitmap::`vftable'
	DD	FLAT:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBitmap@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT
??_R4CBitmap@@6B@ DD 00H				; CBitmap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBitmap@@@8
	DD	FLAT:??_R3CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT
??_R0?AVCBitmap@@@8 DD FLAT:??_7type_info@@6B@		; CBitmap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBitmap@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT
??_R3CBitmap@@8 DD 00H					; CBitmap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT
??_R2CBitmap@@8 DD FLAT:??_R1A@?0A@A@CBitmap@@8		; CBitmap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBitmap@@8 DD FLAT:??_R0?AVCBitmap@@@8	; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBitmap@@QAE@XZ PROC NEAR				; CBitmap::CBitmap, COMDAT
; _this$ = ecx

; 177  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBitmap@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CBitmap@@QAE@XZ ENDP					; CBitmap::CBitmap
_TEXT	ENDS
EXTRN	__imp__memmove:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$201151 = -8						; size = 4
_nMoveCount$ = -4					; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CArray@HH@@QAEXHH@Z PROC NEAR		; CArray<int,int>::RemoveAt, COMDAT
; _this$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 	ASSERT_VALID(this);
; 591  : 	ASSERT(nIndex >= 0);
; 592  : 	ASSERT(nCount >= 0);
; 593  : 	ASSERT(nIndex + nCount <= m_nSize);
; 594  : 
; 595  : 	if(nIndex < 0 || nCount < 0 || (nIndex + nCount > m_nSize))

  00009	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000d	7c 14		 jl	 SHORT $L201149
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00013	7c 0e		 jl	 SHORT $L201149
  00015	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00018	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00021	7e 05		 jle	 SHORT $L201148
$L201149:

; 596  : 		AfxThrowInvalidArgException();

  00023	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201148:

; 597  : 
; 598  : 	// just remove a range
; 599  : 	INT_PTR nMoveCount = m_nSize - (nIndex + nCount);

  00028	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  0002b	03 55 0c	 add	 edx, DWORD PTR _nCount$[ebp]
  0002e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00034	2b ca		 sub	 ecx, edx
  00036	89 4d fc	 mov	 DWORD PTR _nMoveCount$[ebp], ecx

; 600  : 	for( int i = 0; i < nCount; i++ )

  00039	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$201151[ebp], 0
  00040	eb 09		 jmp	 SHORT $L201152
$L201153:
  00042	8b 55 f8	 mov	 edx, DWORD PTR _i$201151[ebp]
  00045	83 c2 01	 add	 edx, 1
  00048	89 55 f8	 mov	 DWORD PTR _i$201151[ebp], edx
$L201152:
  0004b	8b 45 f8	 mov	 eax, DWORD PTR _i$201151[ebp]
  0004e	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  00051	7d 02		 jge	 SHORT $L201154

; 601  : 		(m_pData + nIndex + i)->~TYPE();

  00053	eb ed		 jmp	 SHORT $L201153
$L201154:

; 602  : 	if (nMoveCount)

  00055	83 7d fc 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  00059	74 30		 je	 SHORT $L201155

; 603  : 		memmove( m_pData + nIndex, m_pData + nIndex + nCount,
; 604  : 			(size_t)nMoveCount * sizeof(TYPE));

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _nMoveCount$[ebp]
  0005e	c1 e1 02	 shl	 ecx, 2
  00061	51		 push	 ecx
  00062	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0006b	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00071	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00074	51		 push	 ecx
  00075	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00078	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0007e	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00081	52		 push	 edx
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
$L201155:

; 605  : 	m_nSize -= nCount;

  0008b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00091	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  00094	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00097	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L203323:

; 606  : }

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
?RemoveAt@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::RemoveAt
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBitmap@@UAEPAXI@Z PROC NEAR			; CBitmap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41685
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41685:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBitmap@@UAEPAXI@Z ENDP				; CBitmap::`scalar deleting destructor'
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBitmap@@UAE@XZ PROC NEAR				; CBitmap::~CBitmap, COMDAT
; _this$ = ecx

; 179  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBitmap@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CBitmap@@UAE@XZ ENDP					; CBitmap::~CBitmap
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ??1?$CArray@HH@@UAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T203331 = -8						; size = 4
_i$201165 = -4						; size = 4
??1?$CArray@HH@@UAE@XZ PROC NEAR			; CArray<int,int>::~CArray<int,int>, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CArray@HH@@6B@

; 357  : 	ASSERT_VALID(this);
; 358  : 
; 359  : 	if (m_pData != NULL)

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00019	74 34		 je	 SHORT $L201162

; 360  : 	{
; 361  : 		for( int i = 0; i < m_nSize; i++ )

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$201165[ebp], 0
  00022	eb 09		 jmp	 SHORT $L201166
$L201167:
  00024	8b 55 fc	 mov	 edx, DWORD PTR _i$201165[ebp]
  00027	83 c2 01	 add	 edx, 1
  0002a	89 55 fc	 mov	 DWORD PTR _i$201165[ebp], edx
$L201166:
  0002d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _i$201165[ebp]
  00033	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00036	7d 02		 jge	 SHORT $L201168

; 362  : 			(m_pData + i)->~TYPE();

  00038	eb ea		 jmp	 SHORT $L201167
$L201168:

; 363  : 		delete[] (BYTE*)m_pData;

  0003a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	89 45 f8	 mov	 DWORD PTR $T203331[ebp], eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR $T203331[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004c	83 c4 04	 add	 esp, 4
$L201162:

; 364  : 	}
; 365  : }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$CArray@HH@@UAE@XZ ENDP				; CArray<int,int>::~CArray<int,int>
_TEXT	ENDS
PUBLIC	?SetSize@?$CArray@HH@@QAEXHH@Z			; CArray<int,int>::SetSize
; Function compile flags: /Odt
;	COMDAT ?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nOldSize$201180 = -4					; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z PROC NEAR	; CArray<int,int>::Serialize, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	ASSERT_VALID(this);
; 631  : 
; 632  : 	CObject::Serialize(ar);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 633  : 	if (ar.IsStoring())

  00015	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00018	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0001d	85 c0		 test	 eax, eax
  0001f	74 11		 je	 SHORT $L201178

; 634  : 	{
; 635  : 		ar.WriteCount(m_nSize);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00027	52		 push	 edx
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002b	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 636  : 	}
; 637  : 	else

  00030	eb 19		 jmp	 SHORT $L201179
$L201178:

; 638  : 	{
; 639  : 		DWORD_PTR nOldSize = ar.ReadCount();

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00035	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  0003a	89 45 fc	 mov	 DWORD PTR _nOldSize$201180[ebp], eax

; 640  : 		SetSize(nOldSize, -1);

  0003d	6a ff		 push	 -1
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _nOldSize$201180[ebp]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetSize
$L201179:

; 641  : 	}
; 642  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00051	52		 push	 edx
  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00058	51		 push	 ecx
  00059	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ; SerializeElements<int>

; 643  : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?Serialize@?$CArray@HH@@UAEXAAVCArchive@@@Z ENDP	; CArray<int,int>::Serialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HAAH@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CArray@HAAH@@UAEPAXI@Z PROC NEAR			; CArray<int,int &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L201197
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L201197:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CArray@HAAH@@UAEPAXI@Z ENDP			; CArray<int,int &>::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z PROC NEAR	; CArray<BCMenu *,BCMenu *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CArray@PAVBCMenu@@PAV1@@@UAE@XZ ; CArray<BCMenu *,BCMenu *>::~CArray<BCMenu *,BCMenu *>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L201200
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L201200:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CArray@PAVBCMenu@@PAV1@@@UAEPAXI@Z ENDP		; CArray<BCMenu *,BCMenu *>::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp__LoadBitmapA@8:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?LoadBitmapA@CBitmap@@QAEHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDResource$ = 8					; size = 4
?LoadBitmapA@CBitmap@@QAEHI@Z PROC NEAR			; CBitmap::LoadBitmapA, COMDAT
; _this$ = ecx

; 212  : 	{ return Attach(::LoadBitmap(AfxFindResourceHandle(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		MAKEINTRESOURCE(nIDResource), RT_BITMAP), MAKEINTRESOURCE(nIDResource))); }

  00007	0f b7 45 08	 movzx	 eax, WORD PTR _nIDResource$[ebp]
  0000b	50		 push	 eax
  0000c	6a 02		 push	 2
  0000e	0f b7 4d 08	 movzx	 ecx, WORD PTR _nIDResource$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z ; AfxFindResourceHandle
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?LoadBitmapA@CBitmap@@QAEHI@Z ENDP			; CBitmap::LoadBitmapA
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_G?$CArray@HH@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CArray@HH@@UAEPAXI@Z PROC NEAR			; CArray<int,int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CArray@HH@@UAE@XZ	; CArray<int,int>::~CArray<int,int>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L201203
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L201203:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CArray@HH@@UAEPAXI@Z ENDP				; CArray<int,int>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
;	COMDAT ?SetSize@?$CArray@HAAH@@QAEXHH@Z
_TEXT	SEGMENT
tv175 = -76						; size = 4
tv176 = -72						; size = 4
tv83 = -68						; size = 4
_this$ = -64						; size = 4
$T203357 = -60						; size = 4
$T203356 = -56						; size = 4
$T203355 = -52						; size = 4
$T203350 = -48						; size = 4
$T203349 = -44						; size = 4
$T203348 = -40						; size = 4
$T203345 = -36						; size = 4
_i$201281 = -32						; size = 4
_pNewData$201269 = -28					; size = 4
_nNewMax$201263 = -24					; size = 4
_i$201257 = -20						; size = 4
_i$201248 = -16						; size = 4
_i$201235 = -12						; size = 4
_nAllocSize$201226 = -8					; size = 4
_i$201217 = -4						; size = 4
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@HAAH@@QAEXHH@Z PROC NEAR		; CArray<int,int &>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);
; 371  : 	ASSERT(nNewSize >= 0);
; 372  : 
; 373  : 	if(nNewSize < 0 )

  00009	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0000d	7d 05		 jge	 SHORT $L201213

; 374  : 		AfxThrowInvalidArgException();

  0000f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201213:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00018	7c 09		 jl	 SHORT $L201214

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  0001a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _nGrowBy$[ebp]
  00020	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L201214:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00023	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00027	75 60		 jne	 SHORT $L201215

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  00029	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00030	74 3e		 je	 SHORT $L201216

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$201217[ebp], 0
  00039	eb 09		 jmp	 SHORT $L201218
$L201219:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$201217[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _i$201217[ebp], eax
$L201218:
  00044	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 55 fc	 mov	 edx, DWORD PTR _i$201217[ebp]
  0004a	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004d	7d 02		 jge	 SHORT $L201220

; 385  : 				(m_pData + i)->~TYPE();

  0004f	eb ea		 jmp	 SHORT $L201219
$L201220:

; 386  : 			delete[] (BYTE*)m_pData;

  00051	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4d dc	 mov	 DWORD PTR $T203345[ebp], ecx
  0005a	8b 55 dc	 mov	 edx, DWORD PTR $T203345[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00063	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  00066	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L201216:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  00070	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0007a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  00084	e9 c3 02 00 00	 jmp	 $L203344
$L201215:
  00089	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00090	0f 85 a2 00 00
	00		 jne	 $L201224

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow
; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  00096	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0009c	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0009f	7e 08		 jle	 SHORT $L203346
  000a1	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  000a4	89 45 bc	 mov	 DWORD PTR tv83[ebp], eax
  000a7	eb 09		 jmp	 SHORT $L203347
$L203346:
  000a9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000af	89 55 bc	 mov	 DWORD PTR tv83[ebp], edx
$L203347:
  000b2	8b 45 bc	 mov	 eax, DWORD PTR tv83[ebp]
  000b5	89 45 f8	 mov	 DWORD PTR _nAllocSize$201226[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201226[ebp]
  000bb	c1 e1 02	 shl	 ecx, 2
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000c4	83 c4 04	 add	 esp, 4
  000c7	89 45 d8	 mov	 DWORD PTR $T203348[ebp], eax
  000ca	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	8b 45 d8	 mov	 eax, DWORD PTR $T203348[ebp]
  000d0	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201226[ebp]
  000d6	c1 e1 02	 shl	 ecx, 2
  000d9	51		 push	 ecx
  000da	6a 00		 push	 0
  000dc	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000df	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  000eb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$201235[ebp], 0
  000f2	eb 09		 jmp	 SHORT $L201236
$L201237:
  000f4	8b 4d f4	 mov	 ecx, DWORD PTR _i$201235[ebp]
  000f7	83 c1 01	 add	 ecx, 1
  000fa	89 4d f4	 mov	 DWORD PTR _i$201235[ebp], ecx
$L201236:
  000fd	8b 55 f4	 mov	 edx, DWORD PTR _i$201235[ebp]
  00100	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  00103	7d 1c		 jge	 SHORT $L201238

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  00105	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00108	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010b	8b 55 f4	 mov	 edx, DWORD PTR _i$201235[ebp]
  0010e	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00111	50		 push	 eax
  00112	6a 04		 push	 4
  00114	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00119	83 c4 08	 add	 esp, 8
  0011c	89 45 d4	 mov	 DWORD PTR $T203349[ebp], eax
  0011f	eb d3		 jmp	 SHORT $L201237
$L201238:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  00121	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00127	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 407  : 		m_nMaxSize = nAllocSize;

  0012a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201226[ebp]
  00130	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  00133	e9 14 02 00 00	 jmp	 $L203344
$L201224:
  00138	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0013b	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0013e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00141	0f 8f b4 00 00
	00		 jg	 $L201243

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  00147	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0014d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00150	7e 6e		 jle	 SHORT $L201244

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00152	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00158	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  0015b	c1 e1 02	 shl	 ecx, 2
  0015e	51		 push	 ecx
  0015f	6a 00		 push	 0
  00161	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00164	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00167	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0016d	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _memset
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  00179	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$201248[ebp], 0
  00180	eb 09		 jmp	 SHORT $L201249
$L201250:
  00182	8b 4d f0	 mov	 ecx, DWORD PTR _i$201248[ebp]
  00185	83 c1 01	 add	 ecx, 1
  00188	89 4d f0	 mov	 DWORD PTR _i$201248[ebp], ecx
$L201249:
  0018b	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00191	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00194	39 45 f0	 cmp	 DWORD PTR _i$201248[ebp], eax
  00197	7d 25		 jge	 SHORT $L201251

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  00199	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0019f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a5	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  001a8	8b 45 f0	 mov	 eax, DWORD PTR _i$201248[ebp]
  001ab	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  001ae	51		 push	 ecx
  001af	6a 04		 push	 4
  001b1	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  001b6	83 c4 08	 add	 esp, 8
  001b9	89 45 d0	 mov	 DWORD PTR $T203350[ebp], eax
  001bc	eb c4		 jmp	 SHORT $L201250
$L201251:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  001be	eb 2d		 jmp	 SHORT $L201255
$L201244:
  001c0	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  001c9	7e 22		 jle	 SHORT $L201255

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  001cb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$201257[ebp], 0
  001d2	eb 09		 jmp	 SHORT $L201258
$L201259:
  001d4	8b 4d ec	 mov	 ecx, DWORD PTR _i$201257[ebp]
  001d7	83 c1 01	 add	 ecx, 1
  001da	89 4d ec	 mov	 DWORD PTR _i$201257[ebp], ecx
$L201258:
  001dd	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  001e0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e3	2b 45 08	 sub	 eax, DWORD PTR _nNewSize$[ebp]
  001e6	39 45 ec	 cmp	 DWORD PTR _i$201257[ebp], eax
  001e9	7d 02		 jge	 SHORT $L201255

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  001eb	eb e7		 jmp	 SHORT $L201259
$L201255:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  001ed	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001f3	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 429  : 	}
; 430  : 	else

  001f6	e9 51 01 00 00	 jmp	 $L203344
$L201243:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  001fb	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  001fe	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00201	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx

; 434  : 		if (nGrowBy == 0)

  00204	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00208	75 45		 jne	 SHORT $L201262

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  0020a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0020d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00210	99		 cdq
  00211	83 e2 07	 and	 edx, 7
  00214	03 c2		 add	 eax, edx
  00216	c1 f8 03	 sar	 eax, 3
  00219	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  0021c	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  00220	7d 09		 jge	 SHORT $L203353
  00222	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv176[ebp], 4
  00229	eb 1e		 jmp	 SHORT $L203354
$L203353:
  0022b	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00232	7e 09		 jle	 SHORT $L203351
  00234	c7 45 b4 00 04
	00 00		 mov	 DWORD PTR tv175[ebp], 1024 ; 00000400H
  0023b	eb 06		 jmp	 SHORT $L203352
$L203351:
  0023d	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  00240	89 45 b4	 mov	 DWORD PTR tv175[ebp], eax
$L203352:
  00243	8b 4d b4	 mov	 ecx, DWORD PTR tv175[ebp]
  00246	89 4d b8	 mov	 DWORD PTR tv176[ebp], ecx
$L203354:
  00249	8b 55 b8	 mov	 edx, DWORD PTR tv176[ebp]
  0024c	89 55 0c	 mov	 DWORD PTR _nGrowBy$[ebp], edx
$L201262:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  0024f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00252	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00255	03 4d 0c	 add	 ecx, DWORD PTR _nGrowBy$[ebp]
  00258	39 4d 08	 cmp	 DWORD PTR _nNewSize$[ebp], ecx
  0025b	7d 0e		 jge	 SHORT $L201264

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  0025d	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00260	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00263	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  00266	89 45 e8	 mov	 DWORD PTR _nNewMax$201263[ebp], eax

; 444  : 		else

  00269	eb 06		 jmp	 SHORT $L201265
$L201264:

; 445  : 			nNewMax = nNewSize;  // no slush

  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0026e	89 4d e8	 mov	 DWORD PTR _nNewMax$201263[ebp], ecx
$L201265:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around
; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  00271	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00274	8b 45 e8	 mov	 eax, DWORD PTR _nNewMax$201263[ebp]
  00277	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0027a	7d 05		 jge	 SHORT $L201267

; 450  : 			AfxThrowInvalidArgException();

  0027c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201267:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow
; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  00281	8b 4d e8	 mov	 ecx, DWORD PTR _nNewMax$201263[ebp]
  00284	c1 e1 02	 shl	 ecx, 2
  00287	51		 push	 ecx
  00288	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0028d	83 c4 04	 add	 esp, 4
  00290	89 45 cc	 mov	 DWORD PTR $T203355[ebp], eax
  00293	8b 55 cc	 mov	 edx, DWORD PTR $T203355[ebp]
  00296	89 55 e4	 mov	 DWORD PTR _pNewData$201269[ebp], edx

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  00299	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0029c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0029f	c1 e1 02	 shl	 ecx, 2
  002a2	51		 push	 ecx
  002a3	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002a6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002a9	50		 push	 eax
  002aa	8b 4d e4	 mov	 ecx, DWORD PTR _pNewData$201269[ebp]
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 _memcpy
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);
; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  002b6	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002b9	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  002bc	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  002bf	c1 e0 02	 shl	 eax, 2
  002c2	50		 push	 eax
  002c3	6a 00		 push	 0
  002c5	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002cb	8b 45 e4	 mov	 eax, DWORD PTR _pNewData$201269[ebp]
  002ce	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 _memset
  002d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  002da	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$201281[ebp], 0
  002e1	eb 09		 jmp	 SHORT $L201282
$L201283:
  002e3	8b 55 e0	 mov	 edx, DWORD PTR _i$201281[ebp]
  002e6	83 c2 01	 add	 edx, 1
  002e9	89 55 e0	 mov	 DWORD PTR _i$201281[ebp], edx
$L201282:
  002ec	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002f2	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  002f5	39 4d e0	 cmp	 DWORD PTR _i$201281[ebp], ecx
  002f8	7d 22		 jge	 SHORT $L201284

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  002fa	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002fd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00300	8b 4d e4	 mov	 ecx, DWORD PTR _pNewData$201269[ebp]
  00303	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00306	8b 45 e0	 mov	 eax, DWORD PTR _i$201281[ebp]
  00309	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  0030c	51		 push	 ecx
  0030d	6a 04		 push	 4
  0030f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00314	83 c4 08	 add	 esp, 8
  00317	89 45 c8	 mov	 DWORD PTR $T203356[ebp], eax
  0031a	eb c7		 jmp	 SHORT $L201283
$L201284:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  0031c	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0031f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00322	89 45 c4	 mov	 DWORD PTR $T203357[ebp], eax
  00325	8b 4d c4	 mov	 ecx, DWORD PTR $T203357[ebp]
  00328	51		 push	 ecx
  00329	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0032e	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  00331	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00334	8b 45 e4	 mov	 eax, DWORD PTR _pNewData$201269[ebp]
  00337	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 472  : 		m_nSize = nNewSize;

  0033a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0033d	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00340	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 473  : 		m_nMaxSize = nNewMax;

  00343	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00346	8b 4d e8	 mov	 ecx, DWORD PTR _nNewMax$201263[ebp]
  00349	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L203344:

; 474  : 	}
; 475  : }

  0034c	8b e5		 mov	 esp, ebp
  0034e	5d		 pop	 ebp
  0034f	c2 08 00	 ret	 8
?SetSize@?$CArray@HAAH@@QAEXHH@Z ENDP			; CArray<int,int &>::SetSize
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	__imp__CreateCompatibleBitmap@12:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
_nWidth$ = 12						; size = 4
_nHeight$ = 16						; size = 4
?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z PROC NEAR ; CBitmap::CreateCompatibleBitmap, COMDAT
; _this$ = ecx

; 217  : 	{ return Attach(::CreateCompatibleBitmap(pDC->m_hDC, nWidth, nHeight)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ENDP	; CBitmap::CreateCompatibleBitmap
_TEXT	ENDS
EXTRN	__imp__GetObjectA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBitMap$ = 8						; size = 4
?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z PROC NEAR	; CBitmap::GetBitmap, COMDAT
; _this$ = ecx

; 221  : 	{ ASSERT(m_hObject != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 222  : 		return ::GetObject(m_hObject, sizeof(BITMAP), pBitMap); }

  00007	8b 45 08	 mov	 eax, DWORD PTR _pBitMap$[ebp]
  0000a	50		 push	 eax
  0000b	6a 18		 push	 24			; 00000018H
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetBitmap@CBitmap@@QAEHPAUtagBITMAP@@@Z ENDP		; CBitmap::GetBitmap
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@HAAH@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CArray@HAAH@@QAEAAHH@Z PROC NEAR		; CArray<int,int &>::ElementAt, COMDAT
; _this$ = ecx

; 320  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 321  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);
; 322  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7c 19		 jl	 SHORT $L201297
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00013	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00016	7d 0e		 jge	 SHORT $L201297

; 323  : 		return m_pData[nIndex]; 

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00021	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00024	eb 05		 jmp	 SHORT $L203365
$L201297:

; 324  : 	AfxThrowInvalidArgException();		

  00026	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L203365:

; 325  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?ElementAt@?$CArray@HAAH@@QAEAAHH@Z ENDP		; CArray<int,int &>::ElementAt
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z PROC NEAR		; CArray<int,int &>::SetAtGrow, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 	ASSERT_VALID(this);
; 535  : 	ASSERT(nIndex >= 0);
; 536  : 	
; 537  : 	if(nIndex < 0)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7d 05		 jge	 SHORT $L201307

; 538  : 		AfxThrowInvalidArgException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201307:

; 539  : 
; 540  : 	if (nIndex >= m_nSize)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001b	7c 11		 jl	 SHORT $L201308

; 541  : 		SetSize(nIndex+1, -1);

  0001d	6a ff		 push	 -1
  0001f	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00022	83 c2 01	 add	 edx, 1
  00025	52		 push	 edx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HAAH@@QAEXHH@Z ; CArray<int,int &>::SetSize
$L201308:

; 542  : 	m_pData[nIndex] = newElement;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$L203367:

; 543  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?SetAtGrow@?$CArray@HAAH@@QAEXHAAH@Z ENDP		; CArray<int,int &>::SetAtGrow
_TEXT	ENDS
EXTRN	?Read@CArchive@@QAEIPAXI@Z:NEAR			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:NEAR		; CArchive::Write
; Function compile flags: /Odt
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT
tv79 = -32						; size = 4
tv69 = -28						; size = 4
_nElementsToRead$201327 = -24				; size = 4
_nElementsLeft$201323 = -20				; size = 4
_pData$201322 = -16					; size = 4
_nElementsToWrite$201317 = -12				; size = 4
_nElementsLeft$201313 = -8				; size = 4
_pData$201312 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z PROC NEAR ; SerializeElements<int>, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 70   : 	ASSERT(nCount == 0 ||
; 71   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 72   : 
; 73   : 	// default is bit-wise read/write
; 74   : 	if (ar.IsStoring())

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00009	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0000e	85 c0		 test	 eax, eax
  00010	74 5c		 je	 SHORT $L201311

; 75   :    {
; 76   : 	  TYPE* pData;
; 77   : 	  UINT_PTR nElementsLeft;
; 78   : 
; 79   : 	  nElementsLeft = nCount;

  00012	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR _nElementsLeft$201313[ebp], eax

; 80   : 	  pData = pElements;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0001b	89 4d fc	 mov	 DWORD PTR _pData$201312[ebp], ecx
$L201315:

; 81   : 	  while( nElementsLeft > 0 )

  0001e	83 7d f8 00	 cmp	 DWORD PTR _nElementsLeft$201313[ebp], 0
  00022	76 48		 jbe	 SHORT $L201316

; 82   : 	  {
; 83   : 		 UINT nElementsToWrite;
; 84   : 
; 85   : 		 nElementsToWrite = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00024	81 7d f8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$201313[ebp], 536870911 ; 1fffffffH
  0002b	73 08		 jae	 SHORT $L203370
  0002d	8b 55 f8	 mov	 edx, DWORD PTR _nElementsLeft$201313[ebp]
  00030	89 55 e4	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $L203371
$L203370:
  00035	c7 45 e4 ff ff
	ff 1f		 mov	 DWORD PTR tv69[ebp], 536870911 ; 1fffffffH
$L203371:
  0003c	8b 45 e4	 mov	 eax, DWORD PTR tv69[ebp]
  0003f	89 45 f4	 mov	 DWORD PTR _nElementsToWrite$201317[ebp], eax

; 86   : 		 ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  00042	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$201317[ebp]
  00045	c1 e1 02	 shl	 ecx, 2
  00048	51		 push	 ecx
  00049	8b 55 fc	 mov	 edx, DWORD PTR _pData$201312[ebp]
  0004c	52		 push	 edx
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00050	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 		 nElementsLeft -= nElementsToWrite;

  00055	8b 45 f8	 mov	 eax, DWORD PTR _nElementsLeft$201313[ebp]
  00058	2b 45 f4	 sub	 eax, DWORD PTR _nElementsToWrite$201317[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR _nElementsLeft$201313[ebp], eax

; 88   : 		 pData += nElementsToWrite;

  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$201317[ebp]
  00061	8b 55 fc	 mov	 edx, DWORD PTR _pData$201312[ebp]
  00064	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00067	89 45 fc	 mov	 DWORD PTR _pData$201312[ebp], eax

; 89   : 	  }

  0006a	eb b2		 jmp	 SHORT $L201315
$L201316:

; 90   :    }
; 91   : 	else

  0006c	eb 5a		 jmp	 SHORT $L201309
$L201311:

; 92   :    {
; 93   : 	  TYPE* pData;
; 94   : 	  UINT_PTR nElementsLeft;
; 95   : 
; 96   : 	  nElementsLeft = nCount;

  0006e	8b 4d 10	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00071	89 4d ec	 mov	 DWORD PTR _nElementsLeft$201323[ebp], ecx

; 97   : 	  pData = pElements;

  00074	8b 55 0c	 mov	 edx, DWORD PTR _pElements$[ebp]
  00077	89 55 f0	 mov	 DWORD PTR _pData$201322[ebp], edx
$L201325:

; 98   : 	  while( nElementsLeft > 0 )

  0007a	83 7d ec 00	 cmp	 DWORD PTR _nElementsLeft$201323[ebp], 0
  0007e	76 48		 jbe	 SHORT $L201309

; 99   : 	  {
; 100  : 		 UINT nElementsToRead;
; 101  : 
; 102  : 		 nElementsToRead = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00080	81 7d ec ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$201323[ebp], 536870911 ; 1fffffffH
  00087	73 08		 jae	 SHORT $L203372
  00089	8b 45 ec	 mov	 eax, DWORD PTR _nElementsLeft$201323[ebp]
  0008c	89 45 e0	 mov	 DWORD PTR tv79[ebp], eax
  0008f	eb 07		 jmp	 SHORT $L203373
$L203372:
  00091	c7 45 e0 ff ff
	ff 1f		 mov	 DWORD PTR tv79[ebp], 536870911 ; 1fffffffH
$L203373:
  00098	8b 4d e0	 mov	 ecx, DWORD PTR tv79[ebp]
  0009b	89 4d e8	 mov	 DWORD PTR _nElementsToRead$201327[ebp], ecx

; 103  : 		 ar.Read(pData, nElementsToRead*sizeof(TYPE));

  0009e	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$201327[ebp]
  000a1	c1 e2 02	 shl	 edx, 2
  000a4	52		 push	 edx
  000a5	8b 45 f0	 mov	 eax, DWORD PTR _pData$201322[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000ac	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 104  : 		 nElementsLeft -= nElementsToRead;

  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _nElementsLeft$201323[ebp]
  000b4	2b 4d e8	 sub	 ecx, DWORD PTR _nElementsToRead$201327[ebp]
  000b7	89 4d ec	 mov	 DWORD PTR _nElementsLeft$201323[ebp], ecx

; 105  : 		 pData += nElementsToRead;

  000ba	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$201327[ebp]
  000bd	8b 45 f0	 mov	 eax, DWORD PTR _pData$201322[ebp]
  000c0	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000c3	89 4d f0	 mov	 DWORD PTR _pData$201322[ebp], ecx

; 106  : 	  }

  000c6	eb b2		 jmp	 SHORT $L201325
$L201309:

; 107  :    }
; 108  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ENDP	; SerializeElements<int>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z
_TEXT	SEGMENT
tv175 = -76						; size = 4
tv176 = -72						; size = 4
tv83 = -68						; size = 4
_this$ = -64						; size = 4
$T203388 = -60						; size = 4
$T203387 = -56						; size = 4
$T203386 = -52						; size = 4
$T203381 = -48						; size = 4
$T203380 = -44						; size = 4
$T203379 = -40						; size = 4
$T203376 = -36						; size = 4
_i$201408 = -32						; size = 4
_pNewData$201396 = -28					; size = 4
_nNewMax$201390 = -24					; size = 4
_i$201384 = -20						; size = 4
_i$201375 = -16						; size = 4
_i$201362 = -12						; size = 4
_nAllocSize$201353 = -8					; size = 4
_i$201344 = -4						; size = 4
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z PROC NEAR	; CArray<BCMenu *,BCMenu *>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);
; 371  : 	ASSERT(nNewSize >= 0);
; 372  : 
; 373  : 	if(nNewSize < 0 )

  00009	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0000d	7d 05		 jge	 SHORT $L201340

; 374  : 		AfxThrowInvalidArgException();

  0000f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201340:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00018	7c 09		 jl	 SHORT $L201341

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  0001a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _nGrowBy$[ebp]
  00020	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L201341:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00023	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00027	75 60		 jne	 SHORT $L201342

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  00029	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00030	74 3e		 je	 SHORT $L201343

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$201344[ebp], 0
  00039	eb 09		 jmp	 SHORT $L201345
$L201346:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$201344[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _i$201344[ebp], eax
$L201345:
  00044	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 55 fc	 mov	 edx, DWORD PTR _i$201344[ebp]
  0004a	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004d	7d 02		 jge	 SHORT $L201347

; 385  : 				(m_pData + i)->~TYPE();

  0004f	eb ea		 jmp	 SHORT $L201346
$L201347:

; 386  : 			delete[] (BYTE*)m_pData;

  00051	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4d dc	 mov	 DWORD PTR $T203376[ebp], ecx
  0005a	8b 55 dc	 mov	 edx, DWORD PTR $T203376[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00063	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  00066	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L201343:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  00070	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0007a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  00084	e9 c3 02 00 00	 jmp	 $L203375
$L201342:
  00089	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00090	0f 85 a2 00 00
	00		 jne	 $L201351

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow
; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  00096	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0009c	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0009f	7e 08		 jle	 SHORT $L203377
  000a1	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  000a4	89 45 bc	 mov	 DWORD PTR tv83[ebp], eax
  000a7	eb 09		 jmp	 SHORT $L203378
$L203377:
  000a9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000af	89 55 bc	 mov	 DWORD PTR tv83[ebp], edx
$L203378:
  000b2	8b 45 bc	 mov	 eax, DWORD PTR tv83[ebp]
  000b5	89 45 f8	 mov	 DWORD PTR _nAllocSize$201353[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201353[ebp]
  000bb	c1 e1 02	 shl	 ecx, 2
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000c4	83 c4 04	 add	 esp, 4
  000c7	89 45 d8	 mov	 DWORD PTR $T203379[ebp], eax
  000ca	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	8b 45 d8	 mov	 eax, DWORD PTR $T203379[ebp]
  000d0	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201353[ebp]
  000d6	c1 e1 02	 shl	 ecx, 2
  000d9	51		 push	 ecx
  000da	6a 00		 push	 0
  000dc	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000df	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  000eb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$201362[ebp], 0
  000f2	eb 09		 jmp	 SHORT $L201363
$L201364:
  000f4	8b 4d f4	 mov	 ecx, DWORD PTR _i$201362[ebp]
  000f7	83 c1 01	 add	 ecx, 1
  000fa	89 4d f4	 mov	 DWORD PTR _i$201362[ebp], ecx
$L201363:
  000fd	8b 55 f4	 mov	 edx, DWORD PTR _i$201362[ebp]
  00100	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  00103	7d 1c		 jge	 SHORT $L201365

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  00105	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00108	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010b	8b 55 f4	 mov	 edx, DWORD PTR _i$201362[ebp]
  0010e	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00111	50		 push	 eax
  00112	6a 04		 push	 4
  00114	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00119	83 c4 08	 add	 esp, 8
  0011c	89 45 d4	 mov	 DWORD PTR $T203380[ebp], eax
  0011f	eb d3		 jmp	 SHORT $L201364
$L201365:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  00121	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00127	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 407  : 		m_nMaxSize = nAllocSize;

  0012a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201353[ebp]
  00130	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  00133	e9 14 02 00 00	 jmp	 $L203375
$L201351:
  00138	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0013b	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0013e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00141	0f 8f b4 00 00
	00		 jg	 $L201370

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  00147	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0014d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00150	7e 6e		 jle	 SHORT $L201371

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00152	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00158	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  0015b	c1 e1 02	 shl	 ecx, 2
  0015e	51		 push	 ecx
  0015f	6a 00		 push	 0
  00161	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00164	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00167	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0016d	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _memset
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  00179	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$201375[ebp], 0
  00180	eb 09		 jmp	 SHORT $L201376
$L201377:
  00182	8b 4d f0	 mov	 ecx, DWORD PTR _i$201375[ebp]
  00185	83 c1 01	 add	 ecx, 1
  00188	89 4d f0	 mov	 DWORD PTR _i$201375[ebp], ecx
$L201376:
  0018b	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00191	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00194	39 45 f0	 cmp	 DWORD PTR _i$201375[ebp], eax
  00197	7d 25		 jge	 SHORT $L201378

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  00199	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0019f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a5	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  001a8	8b 45 f0	 mov	 eax, DWORD PTR _i$201375[ebp]
  001ab	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  001ae	51		 push	 ecx
  001af	6a 04		 push	 4
  001b1	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  001b6	83 c4 08	 add	 esp, 8
  001b9	89 45 d0	 mov	 DWORD PTR $T203381[ebp], eax
  001bc	eb c4		 jmp	 SHORT $L201377
$L201378:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  001be	eb 2d		 jmp	 SHORT $L201382
$L201371:
  001c0	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  001c9	7e 22		 jle	 SHORT $L201382

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  001cb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$201384[ebp], 0
  001d2	eb 09		 jmp	 SHORT $L201385
$L201386:
  001d4	8b 4d ec	 mov	 ecx, DWORD PTR _i$201384[ebp]
  001d7	83 c1 01	 add	 ecx, 1
  001da	89 4d ec	 mov	 DWORD PTR _i$201384[ebp], ecx
$L201385:
  001dd	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  001e0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e3	2b 45 08	 sub	 eax, DWORD PTR _nNewSize$[ebp]
  001e6	39 45 ec	 cmp	 DWORD PTR _i$201384[ebp], eax
  001e9	7d 02		 jge	 SHORT $L201382

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  001eb	eb e7		 jmp	 SHORT $L201386
$L201382:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  001ed	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001f3	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 429  : 	}
; 430  : 	else

  001f6	e9 51 01 00 00	 jmp	 $L203375
$L201370:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  001fb	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  001fe	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00201	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx

; 434  : 		if (nGrowBy == 0)

  00204	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00208	75 45		 jne	 SHORT $L201389

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  0020a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0020d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00210	99		 cdq
  00211	83 e2 07	 and	 edx, 7
  00214	03 c2		 add	 eax, edx
  00216	c1 f8 03	 sar	 eax, 3
  00219	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  0021c	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  00220	7d 09		 jge	 SHORT $L203384
  00222	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv176[ebp], 4
  00229	eb 1e		 jmp	 SHORT $L203385
$L203384:
  0022b	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00232	7e 09		 jle	 SHORT $L203382
  00234	c7 45 b4 00 04
	00 00		 mov	 DWORD PTR tv175[ebp], 1024 ; 00000400H
  0023b	eb 06		 jmp	 SHORT $L203383
$L203382:
  0023d	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  00240	89 45 b4	 mov	 DWORD PTR tv175[ebp], eax
$L203383:
  00243	8b 4d b4	 mov	 ecx, DWORD PTR tv175[ebp]
  00246	89 4d b8	 mov	 DWORD PTR tv176[ebp], ecx
$L203385:
  00249	8b 55 b8	 mov	 edx, DWORD PTR tv176[ebp]
  0024c	89 55 0c	 mov	 DWORD PTR _nGrowBy$[ebp], edx
$L201389:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  0024f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00252	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00255	03 4d 0c	 add	 ecx, DWORD PTR _nGrowBy$[ebp]
  00258	39 4d 08	 cmp	 DWORD PTR _nNewSize$[ebp], ecx
  0025b	7d 0e		 jge	 SHORT $L201391

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  0025d	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00260	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00263	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  00266	89 45 e8	 mov	 DWORD PTR _nNewMax$201390[ebp], eax

; 444  : 		else

  00269	eb 06		 jmp	 SHORT $L201392
$L201391:

; 445  : 			nNewMax = nNewSize;  // no slush

  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0026e	89 4d e8	 mov	 DWORD PTR _nNewMax$201390[ebp], ecx
$L201392:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around
; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  00271	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00274	8b 45 e8	 mov	 eax, DWORD PTR _nNewMax$201390[ebp]
  00277	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0027a	7d 05		 jge	 SHORT $L201394

; 450  : 			AfxThrowInvalidArgException();

  0027c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201394:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow
; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  00281	8b 4d e8	 mov	 ecx, DWORD PTR _nNewMax$201390[ebp]
  00284	c1 e1 02	 shl	 ecx, 2
  00287	51		 push	 ecx
  00288	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0028d	83 c4 04	 add	 esp, 4
  00290	89 45 cc	 mov	 DWORD PTR $T203386[ebp], eax
  00293	8b 55 cc	 mov	 edx, DWORD PTR $T203386[ebp]
  00296	89 55 e4	 mov	 DWORD PTR _pNewData$201396[ebp], edx

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  00299	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0029c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0029f	c1 e1 02	 shl	 ecx, 2
  002a2	51		 push	 ecx
  002a3	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002a6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002a9	50		 push	 eax
  002aa	8b 4d e4	 mov	 ecx, DWORD PTR _pNewData$201396[ebp]
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 _memcpy
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);
; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  002b6	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002b9	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  002bc	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  002bf	c1 e0 02	 shl	 eax, 2
  002c2	50		 push	 eax
  002c3	6a 00		 push	 0
  002c5	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002cb	8b 45 e4	 mov	 eax, DWORD PTR _pNewData$201396[ebp]
  002ce	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 _memset
  002d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  002da	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$201408[ebp], 0
  002e1	eb 09		 jmp	 SHORT $L201409
$L201410:
  002e3	8b 55 e0	 mov	 edx, DWORD PTR _i$201408[ebp]
  002e6	83 c2 01	 add	 edx, 1
  002e9	89 55 e0	 mov	 DWORD PTR _i$201408[ebp], edx
$L201409:
  002ec	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002f2	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  002f5	39 4d e0	 cmp	 DWORD PTR _i$201408[ebp], ecx
  002f8	7d 22		 jge	 SHORT $L201411

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  002fa	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002fd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00300	8b 4d e4	 mov	 ecx, DWORD PTR _pNewData$201396[ebp]
  00303	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00306	8b 45 e0	 mov	 eax, DWORD PTR _i$201408[ebp]
  00309	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  0030c	51		 push	 ecx
  0030d	6a 04		 push	 4
  0030f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00314	83 c4 08	 add	 esp, 8
  00317	89 45 c8	 mov	 DWORD PTR $T203387[ebp], eax
  0031a	eb c7		 jmp	 SHORT $L201410
$L201411:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  0031c	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0031f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00322	89 45 c4	 mov	 DWORD PTR $T203388[ebp], eax
  00325	8b 4d c4	 mov	 ecx, DWORD PTR $T203388[ebp]
  00328	51		 push	 ecx
  00329	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0032e	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  00331	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00334	8b 45 e4	 mov	 eax, DWORD PTR _pNewData$201396[ebp]
  00337	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 472  : 		m_nSize = nNewSize;

  0033a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0033d	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00340	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 473  : 		m_nMaxSize = nNewMax;

  00343	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00346	8b 4d e8	 mov	 ecx, DWORD PTR _nNewMax$201390[ebp]
  00349	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L203375:

; 474  : 	}
; 475  : }

  0034c	8b e5		 mov	 esp, ebp
  0034e	5d		 pop	 ebp
  0034f	c2 08 00	 ret	 8
?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z ENDP	; CArray<BCMenu *,BCMenu *>::SetSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::ElementAt, COMDAT
; _this$ = ecx

; 320  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 321  : 	ASSERT(nIndex >= 0 && nIndex < m_nSize);
; 322  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7c 19		 jl	 SHORT $L201424
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00013	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00016	7d 0e		 jge	 SHORT $L201424

; 323  : 		return m_pData[nIndex]; 

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00021	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00024	eb 05		 jmp	 SHORT $L203390
$L201424:

; 324  : 	AfxThrowInvalidArgException();		

  00026	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L203390:

; 325  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?ElementAt@?$CArray@PAVBCMenu@@PAV1@@@QAEAAPAVBCMenu@@H@Z ENDP ; CArray<BCMenu *,BCMenu *>::ElementAt
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z PROC NEAR ; CArray<BCMenu *,BCMenu *>::SetAtGrow, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 	ASSERT_VALID(this);
; 535  : 	ASSERT(nIndex >= 0);
; 536  : 	
; 537  : 	if(nIndex < 0)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7d 05		 jge	 SHORT $L201434

; 538  : 		AfxThrowInvalidArgException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201434:

; 539  : 
; 540  : 	if (nIndex >= m_nSize)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001b	7c 11		 jl	 SHORT $L201435

; 541  : 		SetSize(nIndex+1, -1);

  0001d	6a ff		 push	 -1
  0001f	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00022	83 c2 01	 add	 edx, 1
  00025	52		 push	 edx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?SetSize@?$CArray@PAVBCMenu@@PAV1@@@QAEXHH@Z ; CArray<BCMenu *,BCMenu *>::SetSize
$L201435:

; 542  : 	m_pData[nIndex] = newElement;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0003a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$L203392:

; 543  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?SetAtGrow@?$CArray@PAVBCMenu@@PAV1@@@QAEXHPAVBCMenu@@@Z ENDP ; CArray<BCMenu *,BCMenu *>::SetAtGrow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z
_TEXT	SEGMENT
tv79 = -32						; size = 4
tv69 = -28						; size = 4
_nElementsToRead$201454 = -24				; size = 4
_nElementsLeft$201450 = -20				; size = 4
_pData$201449 = -16					; size = 4
_nElementsToWrite$201444 = -12				; size = 4
_nElementsLeft$201440 = -8				; size = 4
_pData$201439 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z PROC NEAR ; SerializeElements<BCMenu *>, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 70   : 	ASSERT(nCount == 0 ||
; 71   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 72   : 
; 73   : 	// default is bit-wise read/write
; 74   : 	if (ar.IsStoring())

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00009	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0000e	85 c0		 test	 eax, eax
  00010	74 5c		 je	 SHORT $L201438

; 75   :    {
; 76   : 	  TYPE* pData;
; 77   : 	  UINT_PTR nElementsLeft;
; 78   : 
; 79   : 	  nElementsLeft = nCount;

  00012	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR _nElementsLeft$201440[ebp], eax

; 80   : 	  pData = pElements;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0001b	89 4d fc	 mov	 DWORD PTR _pData$201439[ebp], ecx
$L201442:

; 81   : 	  while( nElementsLeft > 0 )

  0001e	83 7d f8 00	 cmp	 DWORD PTR _nElementsLeft$201440[ebp], 0
  00022	76 48		 jbe	 SHORT $L201443

; 82   : 	  {
; 83   : 		 UINT nElementsToWrite;
; 84   : 
; 85   : 		 nElementsToWrite = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00024	81 7d f8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$201440[ebp], 536870911 ; 1fffffffH
  0002b	73 08		 jae	 SHORT $L203395
  0002d	8b 55 f8	 mov	 edx, DWORD PTR _nElementsLeft$201440[ebp]
  00030	89 55 e4	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $L203396
$L203395:
  00035	c7 45 e4 ff ff
	ff 1f		 mov	 DWORD PTR tv69[ebp], 536870911 ; 1fffffffH
$L203396:
  0003c	8b 45 e4	 mov	 eax, DWORD PTR tv69[ebp]
  0003f	89 45 f4	 mov	 DWORD PTR _nElementsToWrite$201444[ebp], eax

; 86   : 		 ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  00042	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$201444[ebp]
  00045	c1 e1 02	 shl	 ecx, 2
  00048	51		 push	 ecx
  00049	8b 55 fc	 mov	 edx, DWORD PTR _pData$201439[ebp]
  0004c	52		 push	 edx
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00050	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 		 nElementsLeft -= nElementsToWrite;

  00055	8b 45 f8	 mov	 eax, DWORD PTR _nElementsLeft$201440[ebp]
  00058	2b 45 f4	 sub	 eax, DWORD PTR _nElementsToWrite$201444[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR _nElementsLeft$201440[ebp], eax

; 88   : 		 pData += nElementsToWrite;

  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _nElementsToWrite$201444[ebp]
  00061	8b 55 fc	 mov	 edx, DWORD PTR _pData$201439[ebp]
  00064	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00067	89 45 fc	 mov	 DWORD PTR _pData$201439[ebp], eax

; 89   : 	  }

  0006a	eb b2		 jmp	 SHORT $L201442
$L201443:

; 90   :    }
; 91   : 	else

  0006c	eb 5a		 jmp	 SHORT $L201436
$L201438:

; 92   :    {
; 93   : 	  TYPE* pData;
; 94   : 	  UINT_PTR nElementsLeft;
; 95   : 
; 96   : 	  nElementsLeft = nCount;

  0006e	8b 4d 10	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00071	89 4d ec	 mov	 DWORD PTR _nElementsLeft$201450[ebp], ecx

; 97   : 	  pData = pElements;

  00074	8b 55 0c	 mov	 edx, DWORD PTR _pElements$[ebp]
  00077	89 55 f0	 mov	 DWORD PTR _pData$201449[ebp], edx
$L201452:

; 98   : 	  while( nElementsLeft > 0 )

  0007a	83 7d ec 00	 cmp	 DWORD PTR _nElementsLeft$201450[ebp], 0
  0007e	76 48		 jbe	 SHORT $L201436

; 99   : 	  {
; 100  : 		 UINT nElementsToRead;
; 101  : 
; 102  : 		 nElementsToRead = UINT(min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00080	81 7d ec ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$201450[ebp], 536870911 ; 1fffffffH
  00087	73 08		 jae	 SHORT $L203397
  00089	8b 45 ec	 mov	 eax, DWORD PTR _nElementsLeft$201450[ebp]
  0008c	89 45 e0	 mov	 DWORD PTR tv79[ebp], eax
  0008f	eb 07		 jmp	 SHORT $L203398
$L203397:
  00091	c7 45 e0 ff ff
	ff 1f		 mov	 DWORD PTR tv79[ebp], 536870911 ; 1fffffffH
$L203398:
  00098	8b 4d e0	 mov	 ecx, DWORD PTR tv79[ebp]
  0009b	89 4d e8	 mov	 DWORD PTR _nElementsToRead$201454[ebp], ecx

; 103  : 		 ar.Read(pData, nElementsToRead*sizeof(TYPE));

  0009e	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$201454[ebp]
  000a1	c1 e2 02	 shl	 edx, 2
  000a4	52		 push	 edx
  000a5	8b 45 f0	 mov	 eax, DWORD PTR _pData$201449[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000ac	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 104  : 		 nElementsLeft -= nElementsToRead;

  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _nElementsLeft$201450[ebp]
  000b4	2b 4d e8	 sub	 ecx, DWORD PTR _nElementsToRead$201454[ebp]
  000b7	89 4d ec	 mov	 DWORD PTR _nElementsLeft$201450[ebp], ecx

; 105  : 		 pData += nElementsToRead;

  000ba	8b 55 e8	 mov	 edx, DWORD PTR _nElementsToRead$201454[ebp]
  000bd	8b 45 f0	 mov	 eax, DWORD PTR _pData$201449[ebp]
  000c0	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000c3	89 4d f0	 mov	 DWORD PTR _pData$201449[ebp], ecx

; 106  : 	  }

  000c6	eb b2		 jmp	 SHORT $L201452
$L201436:

; 107  :    }
; 108  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAVBCMenu@@@@YGXAAVCArchive@@PAPAVBCMenu@@H@Z ENDP ; SerializeElements<BCMenu *>
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ PROC NEAR		; CDC::GetSafeHdc, COMDAT
; _this$ = ecx

; 316  : 	{ return this == NULL ? NULL : m_hDC; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L203401
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L203402
$L203401:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L203402:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ENDP			; CDC::GetSafeHdc
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?SetSize@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
tv175 = -76						; size = 4
tv176 = -72						; size = 4
tv83 = -68						; size = 4
_this$ = -64						; size = 4
$T203417 = -60						; size = 4
$T203416 = -56						; size = 4
$T203415 = -52						; size = 4
$T203410 = -48						; size = 4
$T203409 = -44						; size = 4
$T203408 = -40						; size = 4
$T203405 = -36						; size = 4
_i$201535 = -32						; size = 4
_pNewData$201523 = -28					; size = 4
_nNewMax$201517 = -24					; size = 4
_i$201511 = -20						; size = 4
_i$201502 = -16						; size = 4
_i$201489 = -12						; size = 4
_nAllocSize$201480 = -8					; size = 4
_i$201471 = -4						; size = 4
_nNewSize$ = 8						; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@HH@@QAEXHH@Z PROC NEAR		; CArray<int,int>::SetSize, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 	ASSERT_VALID(this);
; 371  : 	ASSERT(nNewSize >= 0);
; 372  : 
; 373  : 	if(nNewSize < 0 )

  00009	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0000d	7d 05		 jge	 SHORT $L201467

; 374  : 		AfxThrowInvalidArgException();

  0000f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201467:

; 375  : 
; 376  : 	if (nGrowBy >= 0)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00018	7c 09		 jl	 SHORT $L201468

; 377  : 		m_nGrowBy = nGrowBy;  // set new size

  0001a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _nGrowBy$[ebp]
  00020	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L201468:

; 378  : 
; 379  : 	if (nNewSize == 0)

  00023	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00027	75 60		 jne	 SHORT $L201469

; 380  : 	{
; 381  : 		// shrink to nothing
; 382  : 		if (m_pData != NULL)

  00029	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00030	74 3e		 je	 SHORT $L201470

; 383  : 		{
; 384  : 			for( int i = 0; i < m_nSize; i++ )

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$201471[ebp], 0
  00039	eb 09		 jmp	 SHORT $L201472
$L201473:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$201471[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _i$201471[ebp], eax
$L201472:
  00044	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 55 fc	 mov	 edx, DWORD PTR _i$201471[ebp]
  0004a	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0004d	7d 02		 jge	 SHORT $L201474

; 385  : 				(m_pData + i)->~TYPE();

  0004f	eb ea		 jmp	 SHORT $L201473
$L201474:

; 386  : 			delete[] (BYTE*)m_pData;

  00051	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4d dc	 mov	 DWORD PTR $T203405[ebp], ecx
  0005a	8b 55 dc	 mov	 edx, DWORD PTR $T203405[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00063	83 c4 04	 add	 esp, 4

; 387  : 			m_pData = NULL;

  00066	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L201470:

; 388  : 		}
; 389  : 		m_nSize = m_nMaxSize = 0;

  00070	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0007a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 390  : 	}
; 391  : 	else if (m_pData == NULL)

  00084	e9 c3 02 00 00	 jmp	 $L203404
$L201469:
  00089	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00090	0f 85 a2 00 00
	00		 jne	 $L201478

; 392  : 	{
; 393  : 		// create buffer big enough to hold number of requested elements or
; 394  : 		// m_nGrowBy elements, whichever is larger.
; 395  : #ifdef SIZE_T_MAX
; 396  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow
; 397  : #endif
; 398  : 		size_t nAllocSize = max(nNewSize, m_nGrowBy);

  00096	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0009c	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0009f	7e 08		 jle	 SHORT $L203406
  000a1	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  000a4	89 45 bc	 mov	 DWORD PTR tv83[ebp], eax
  000a7	eb 09		 jmp	 SHORT $L203407
$L203406:
  000a9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000af	89 55 bc	 mov	 DWORD PTR tv83[ebp], edx
$L203407:
  000b2	8b 45 bc	 mov	 eax, DWORD PTR tv83[ebp]
  000b5	89 45 f8	 mov	 DWORD PTR _nAllocSize$201480[ebp], eax

; 399  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201480[ebp]
  000bb	c1 e1 02	 shl	 ecx, 2
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000c4	83 c4 04	 add	 esp, 4
  000c7	89 45 d8	 mov	 DWORD PTR $T203408[ebp], eax
  000ca	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	8b 45 d8	 mov	 eax, DWORD PTR $T203408[ebp]
  000d0	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 400  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201480[ebp]
  000d6	c1 e1 02	 shl	 ecx, 2
  000d9	51		 push	 ecx
  000da	6a 00		 push	 0
  000dc	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000df	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 		for( int i = 0; i < nNewSize; i++ )

  000eb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$201489[ebp], 0
  000f2	eb 09		 jmp	 SHORT $L201490
$L201491:
  000f4	8b 4d f4	 mov	 ecx, DWORD PTR _i$201489[ebp]
  000f7	83 c1 01	 add	 ecx, 1
  000fa	89 4d f4	 mov	 DWORD PTR _i$201489[ebp], ecx
$L201490:
  000fd	8b 55 f4	 mov	 edx, DWORD PTR _i$201489[ebp]
  00100	3b 55 08	 cmp	 edx, DWORD PTR _nNewSize$[ebp]
  00103	7d 1c		 jge	 SHORT $L201492

; 402  : #pragma push_macro("new")
; 403  : #undef new
; 404  : 			::new( (void*)( m_pData + i ) ) TYPE;

  00105	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00108	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010b	8b 55 f4	 mov	 edx, DWORD PTR _i$201489[ebp]
  0010e	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00111	50		 push	 eax
  00112	6a 04		 push	 4
  00114	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00119	83 c4 08	 add	 esp, 8
  0011c	89 45 d4	 mov	 DWORD PTR $T203409[ebp], eax
  0011f	eb d3		 jmp	 SHORT $L201491
$L201492:

; 405  : #pragma pop_macro("new")
; 406  : 		m_nSize = nNewSize;

  00121	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00127	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 407  : 		m_nMaxSize = nAllocSize;

  0012a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _nAllocSize$201480[ebp]
  00130	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 408  : 	}
; 409  : 	else if (nNewSize <= m_nMaxSize)

  00133	e9 14 02 00 00	 jmp	 $L203404
$L201478:
  00138	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0013b	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0013e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00141	0f 8f b4 00 00
	00		 jg	 $L201497

; 410  : 	{
; 411  : 		// it fits
; 412  : 		if (nNewSize > m_nSize)

  00147	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  0014d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00150	7e 6e		 jle	 SHORT $L201498

; 413  : 		{
; 414  : 			// initialize the new elements
; 415  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00152	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00158	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  0015b	c1 e1 02	 shl	 ecx, 2
  0015e	51		 push	 ecx
  0015f	6a 00		 push	 0
  00161	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00164	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00167	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0016d	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _memset
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )

  00179	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$201502[ebp], 0
  00180	eb 09		 jmp	 SHORT $L201503
$L201504:
  00182	8b 4d f0	 mov	 ecx, DWORD PTR _i$201502[ebp]
  00185	83 c1 01	 add	 ecx, 1
  00188	89 4d f0	 mov	 DWORD PTR _i$201502[ebp], ecx
$L201503:
  0018b	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00191	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  00194	39 45 f0	 cmp	 DWORD PTR _i$201502[ebp], eax
  00197	7d 25		 jge	 SHORT $L201505

; 417  : #pragma push_macro("new")
; 418  : #undef new
; 419  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;

  00199	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0019f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a5	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  001a8	8b 45 f0	 mov	 eax, DWORD PTR _i$201502[ebp]
  001ab	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  001ae	51		 push	 ecx
  001af	6a 04		 push	 4
  001b1	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  001b6	83 c4 08	 add	 esp, 8
  001b9	89 45 d0	 mov	 DWORD PTR $T203410[ebp], eax
  001bc	eb c4		 jmp	 SHORT $L201504
$L201505:

; 420  : #pragma pop_macro("new")
; 421  : 		}
; 422  : 		else if (m_nSize > nNewSize)

  001be	eb 2d		 jmp	 SHORT $L201509
$L201498:
  001c0	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  001c9	7e 22		 jle	 SHORT $L201509

; 423  : 		{
; 424  : 			// destroy the old elements
; 425  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )

  001cb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$201511[ebp], 0
  001d2	eb 09		 jmp	 SHORT $L201512
$L201513:
  001d4	8b 4d ec	 mov	 ecx, DWORD PTR _i$201511[ebp]
  001d7	83 c1 01	 add	 ecx, 1
  001da	89 4d ec	 mov	 DWORD PTR _i$201511[ebp], ecx
$L201512:
  001dd	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  001e0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e3	2b 45 08	 sub	 eax, DWORD PTR _nNewSize$[ebp]
  001e6	39 45 ec	 cmp	 DWORD PTR _i$201511[ebp], eax
  001e9	7d 02		 jge	 SHORT $L201509

; 426  : 				(m_pData + nNewSize + i)->~TYPE();

  001eb	eb e7		 jmp	 SHORT $L201513
$L201509:

; 427  : 		}
; 428  : 		m_nSize = nNewSize;

  001ed	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  001f3	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 429  : 	}
; 430  : 	else

  001f6	e9 51 01 00 00	 jmp	 $L203404
$L201497:

; 431  : 	{
; 432  : 		// otherwise, grow array
; 433  : 		nGrowBy = m_nGrowBy;

  001fb	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  001fe	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00201	89 4d 0c	 mov	 DWORD PTR _nGrowBy$[ebp], ecx

; 434  : 		if (nGrowBy == 0)

  00204	83 7d 0c 00	 cmp	 DWORD PTR _nGrowBy$[ebp], 0
  00208	75 45		 jne	 SHORT $L201516

; 435  : 		{
; 436  : 			// heuristically determine growth when nGrowBy == 0
; 437  : 			//  (this avoids heap fragmentation in many situations)
; 438  : 			nGrowBy = m_nSize / 8;

  0020a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0020d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00210	99		 cdq
  00211	83 e2 07	 and	 edx, 7
  00214	03 c2		 add	 eax, edx
  00216	c1 f8 03	 sar	 eax, 3
  00219	89 45 0c	 mov	 DWORD PTR _nGrowBy$[ebp], eax

; 439  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  0021c	83 7d 0c 04	 cmp	 DWORD PTR _nGrowBy$[ebp], 4
  00220	7d 09		 jge	 SHORT $L203413
  00222	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR tv176[ebp], 4
  00229	eb 1e		 jmp	 SHORT $L203414
$L203413:
  0022b	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nGrowBy$[ebp], 1024 ; 00000400H
  00232	7e 09		 jle	 SHORT $L203411
  00234	c7 45 b4 00 04
	00 00		 mov	 DWORD PTR tv175[ebp], 1024 ; 00000400H
  0023b	eb 06		 jmp	 SHORT $L203412
$L203411:
  0023d	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  00240	89 45 b4	 mov	 DWORD PTR tv175[ebp], eax
$L203412:
  00243	8b 4d b4	 mov	 ecx, DWORD PTR tv175[ebp]
  00246	89 4d b8	 mov	 DWORD PTR tv176[ebp], ecx
$L203414:
  00249	8b 55 b8	 mov	 edx, DWORD PTR tv176[ebp]
  0024c	89 55 0c	 mov	 DWORD PTR _nGrowBy$[ebp], edx
$L201516:

; 440  : 		}
; 441  : 		INT_PTR nNewMax;
; 442  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  0024f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00252	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00255	03 4d 0c	 add	 ecx, DWORD PTR _nGrowBy$[ebp]
  00258	39 4d 08	 cmp	 DWORD PTR _nNewSize$[ebp], ecx
  0025b	7d 0e		 jge	 SHORT $L201518

; 443  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity

  0025d	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00260	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00263	03 45 0c	 add	 eax, DWORD PTR _nGrowBy$[ebp]
  00266	89 45 e8	 mov	 DWORD PTR _nNewMax$201517[ebp], eax

; 444  : 		else

  00269	eb 06		 jmp	 SHORT $L201519
$L201518:

; 445  : 			nNewMax = nNewSize;  // no slush

  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0026e	89 4d e8	 mov	 DWORD PTR _nNewMax$201517[ebp], ecx
$L201519:

; 446  : 
; 447  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around
; 448  : 		
; 449  : 		if(nNewMax  < m_nMaxSize)

  00271	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00274	8b 45 e8	 mov	 eax, DWORD PTR _nNewMax$201517[ebp]
  00277	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0027a	7d 05		 jge	 SHORT $L201521

; 450  : 			AfxThrowInvalidArgException();

  0027c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201521:

; 451  : 
; 452  : #ifdef SIZE_T_MAX
; 453  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow
; 454  : #endif
; 455  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  00281	8b 4d e8	 mov	 ecx, DWORD PTR _nNewMax$201517[ebp]
  00284	c1 e1 02	 shl	 ecx, 2
  00287	51		 push	 ecx
  00288	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0028d	83 c4 04	 add	 esp, 4
  00290	89 45 cc	 mov	 DWORD PTR $T203415[ebp], eax
  00293	8b 55 cc	 mov	 edx, DWORD PTR $T203415[ebp]
  00296	89 55 e4	 mov	 DWORD PTR _pNewData$201523[ebp], edx

; 456  : 
; 457  : 		// copy new data from old
; 458  : 		memcpy(pNewData, m_pData, (size_t)m_nSize * sizeof(TYPE));

  00299	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0029c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0029f	c1 e1 02	 shl	 ecx, 2
  002a2	51		 push	 ecx
  002a3	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002a6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002a9	50		 push	 eax
  002aa	8b 4d e4	 mov	 ecx, DWORD PTR _pNewData$201523[ebp]
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 _memcpy
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 
; 460  : 		// construct remaining elements
; 461  : 		ASSERT(nNewSize > m_nSize);
; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  002b6	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002b9	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  002bc	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  002bf	c1 e0 02	 shl	 eax, 2
  002c2	50		 push	 eax
  002c3	6a 00		 push	 0
  002c5	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002cb	8b 45 e4	 mov	 eax, DWORD PTR _pNewData$201523[ebp]
  002ce	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 _memset
  002d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )

  002da	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$201535[ebp], 0
  002e1	eb 09		 jmp	 SHORT $L201536
$L201537:
  002e3	8b 55 e0	 mov	 edx, DWORD PTR _i$201535[ebp]
  002e6	83 c2 01	 add	 edx, 1
  002e9	89 55 e0	 mov	 DWORD PTR _i$201535[ebp], edx
$L201536:
  002ec	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  002f2	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  002f5	39 4d e0	 cmp	 DWORD PTR _i$201535[ebp], ecx
  002f8	7d 22		 jge	 SHORT $L201538

; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;

  002fa	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  002fd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00300	8b 4d e4	 mov	 ecx, DWORD PTR _pNewData$201523[ebp]
  00303	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00306	8b 45 e0	 mov	 eax, DWORD PTR _i$201535[ebp]
  00309	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  0030c	51		 push	 ecx
  0030d	6a 04		 push	 4
  0030f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00314	83 c4 08	 add	 esp, 8
  00317	89 45 c8	 mov	 DWORD PTR $T203416[ebp], eax
  0031a	eb c7		 jmp	 SHORT $L201537
$L201538:

; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  0031c	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0031f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00322	89 45 c4	 mov	 DWORD PTR $T203417[ebp], eax
  00325	8b 4d c4	 mov	 ecx, DWORD PTR $T203417[ebp]
  00328	51		 push	 ecx
  00329	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0032e	83 c4 04	 add	 esp, 4

; 471  : 		m_pData = pNewData;

  00331	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00334	8b 45 e4	 mov	 eax, DWORD PTR _pNewData$201523[ebp]
  00337	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 472  : 		m_nSize = nNewSize;

  0033a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0033d	8b 55 08	 mov	 edx, DWORD PTR _nNewSize$[ebp]
  00340	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 473  : 		m_nMaxSize = nNewMax;

  00343	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00346	8b 4d e8	 mov	 ecx, DWORD PTR _nNewMax$201517[ebp]
  00349	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L203404:

; 474  : 	}
; 475  : }

  0034c	8b e5		 mov	 esp, ebp
  0034e	5d		 pop	 ebp
  0034f	c2 08 00	 ret	 8
?SetSize@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::SetSize
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ?IsPrinting@CDC@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPrinting@CDC@@QBEHXZ PROC NEAR			; CDC::IsPrinting, COMDAT
; _this$ = ecx

; 320  : 	{ return m_bPrinting; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?IsPrinting@CDC@@QBEHXZ ENDP				; CDC::IsPrinting
_TEXT	ENDS
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:NEAR		; CDC::Attach
; Function compile flags: /Odt
;	COMDAT ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?CreateCompatibleDC@CDC@@QAEHPAV1@@Z PROC NEAR		; CDC::CreateCompatibleDC, COMDAT
; _this$ = ecx

; 330  : 	{ return Attach(::CreateCompatibleDC(pDC->GetSafeHdc())); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ENDP		; CDC::CreateCompatibleDC
_TEXT	ENDS
EXTRN	__imp__GetDeviceCaps@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDeviceCaps@CDC@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetDeviceCaps@CDC@@QBEHH@Z PROC NEAR			; CDC::GetDeviceCaps, COMDAT
; _this$ = ecx

; 334  : 	{ ASSERT(m_hAttribDC != NULL); return ::GetDeviceCaps(m_hAttribDC, nIndex); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDeviceCaps@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetDeviceCaps@CDC@@QBEHH@Z ENDP			; CDC::GetDeviceCaps
_TEXT	ENDS
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
EXTRN	?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z:NEAR ; CDC::SelectGdiObject
; Function compile flags: /Odt
;	COMDAT ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBitmap$ = 8						; size = 4
?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z PROC NEAR	; CDC::SelectObject, COMDAT
; _this$ = ecx

; 361  : 	{ ASSERT(m_hDC != NULL); return (CBitmap*) SelectGdiObject(m_hDC, pBitmap->GetSafeHandle()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pBitmap$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0000f	50		 push	 eax
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z ; CDC::SelectGdiObject
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ENDP		; CDC::SelectObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC NEAR		; CGdiObject::GetSafeHandle, COMDAT
; _this$ = ecx

; 80   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L203428
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L203429
$L203428:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L203429:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxtempl.h
_TEXT	ENDS
;	COMDAT ?SetAtGrow@?$CArray@HH@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CArray@HH@@QAEXHH@Z PROC NEAR		; CArray<int,int>::SetAtGrow, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 	ASSERT_VALID(this);
; 535  : 	ASSERT(nIndex >= 0);
; 536  : 	
; 537  : 	if(nIndex < 0)

  00007	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0000b	7d 05		 jge	 SHORT $L201553

; 538  : 		AfxThrowInvalidArgException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$L201553:

; 539  : 
; 540  : 	if (nIndex >= m_nSize)

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0001b	7c 11		 jl	 SHORT $L201554

; 541  : 		SetSize(nIndex+1, -1);

  0001d	6a ff		 push	 -1
  0001f	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00022	83 c2 01	 add	 edx, 1
  00025	52		 push	 edx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?SetSize@?$CArray@HH@@QAEXHH@Z ; CArray<int,int>::SetSize
$L201554:

; 542  : 	m_pData[nIndex] = newElement;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0003a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$L203431:

; 543  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?SetAtGrow@?$CArray@HH@@QAEXHH@Z ENDP			; CArray<int,int>::SetAtGrow
_TEXT	ENDS
EXTRN	__imp__GetBkMode@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?GetBkMode@CDC@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBkMode@CDC@@QBEHXZ PROC NEAR			; CDC::GetBkMode, COMDAT
; _this$ = ecx

; 376  : 	{ ASSERT(m_hAttribDC != NULL); return ::GetBkMode(m_hAttribDC); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetBkMode@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetBkMode@CDC@@QBEHXZ ENDP				; CDC::GetBkMode
_TEXT	ENDS
EXTRN	__imp__PtVisible@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?PtVisible@CDC@@UBEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?PtVisible@CDC@@UBEHHH@Z PROC NEAR			; CDC::PtVisible, COMDAT
; _this$ = ecx

; 446  : 	{ ASSERT(m_hDC != NULL); return ::PtVisible(m_hDC, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtVisible@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?PtVisible@CDC@@UBEHHH@Z ENDP				; CDC::PtVisible
_TEXT	ENDS
EXTRN	__imp__RectVisible@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?RectVisible@CDC@@UBEHPBUtagRECT@@@Z PROC NEAR		; CDC::RectVisible, COMDAT
; _this$ = ecx

; 450  : 	{ ASSERT(m_hDC != NULL); return ::RectVisible(m_hDC, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RectVisible@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?RectVisible@CDC@@UBEHPBUtagRECT@@@Z ENDP		; CDC::RectVisible
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
_pBrush$ = 12						; size = 4
?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z PROC NEAR	; CDC::FillRect, COMDAT
; _this$ = ecx

; 472  : 	{ ASSERT(m_hDC != NULL); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pBrush$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0000f	50		 push	 eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?FillRect@CDC@@QAEXPBUtagRECT@@PAVCBrush@@@Z ENDP	; CDC::FillRect
_TEXT	ENDS
EXTRN	__imp__DrawEdge@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
_nEdge$ = 12						; size = 4
_nFlags$ = 16						; size = 4
?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z PROC NEAR		; CDC::DrawEdge, COMDAT
; _this$ = ecx

; 506  : 	{ ASSERT(m_hDC != NULL); return ::DrawEdge(m_hDC, lpRect, nEdge, nFlags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nEdge$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawEdge@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?DrawEdge@CDC@@QAEHPAUtagRECT@@II@Z ENDP		; CDC::DrawEdge
_TEXT	ENDS
EXTRN	__imp__Ellipse@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Ellipse@CDC@@QAEHPBUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?Ellipse@CDC@@QAEHPBUtagRECT@@@Z PROC NEAR		; CDC::Ellipse, COMDAT
; _this$ = ecx

; 522  : 	{ ASSERT(m_hDC != NULL); return ::Ellipse(m_hDC, lpRect->left, lpRect->top,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 523  : 		lpRect->right, lpRect->bottom); }

  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00011	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  00018	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001b	52		 push	 edx
  0001c	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	51		 push	 ecx
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Ellipse@20
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?Ellipse@CDC@@QAEHPBUtagRECT@@@Z ENDP			; CDC::Ellipse
_TEXT	ENDS
EXTRN	__imp__Rectangle@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Rectangle@CDC@@QAEHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?Rectangle@CDC@@QAEHHHHH@Z PROC NEAR			; CDC::Rectangle, COMDAT
; _this$ = ecx

; 535  : 	{ ASSERT(m_hDC != NULL); return ::Rectangle(m_hDC, x1, y1, x2, y2); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Rectangle@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?Rectangle@CDC@@QAEHHHHH@Z ENDP				; CDC::Rectangle
_TEXT	ENDS
EXTRN	__imp__PatBlt@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?PatBlt@CDC@@QAEHHHHHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nWidth$ = 16						; size = 4
_nHeight$ = 20						; size = 4
_dwRop$ = 24						; size = 4
?PatBlt@CDC@@QAEHHHHHK@Z PROC NEAR			; CDC::PatBlt, COMDAT
; _this$ = ecx

; 545  : 	{ ASSERT(m_hDC != NULL); return ::PatBlt(m_hDC, x, y, nWidth, nHeight, dwRop); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 18	 mov	 eax, DWORD PTR _dwRop$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PatBlt@24
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?PatBlt@CDC@@QAEHHHHHK@Z ENDP				; CDC::PatBlt
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nWidth$ = 16						; size = 4
_nHeight$ = 20						; size = 4
_pSrcDC$ = 24						; size = 4
_xSrc$ = 28						; size = 4
_ySrc$ = 32						; size = 4
_dwRop$ = 36						; size = 4
?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z PROC NEAR		; CDC::BitBlt, COMDAT
; _this$ = ecx

; 548  : 	{ ASSERT(m_hDC != NULL); return ::BitBlt(m_hDC, x, y, nWidth, nHeight,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 549  : 		pSrcDC->GetSafeHdc(), xSrc, ySrc, dwRop); }

  00007	8b 45 24	 mov	 eax, DWORD PTR _dwRop$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR _ySrc$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 1c	 mov	 edx, DWORD PTR _xSrc$[ebp]
  00012	52		 push	 edx
  00013	8b 4d 18	 mov	 ecx, DWORD PTR _pSrcDC$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  0001b	50		 push	 eax
  0001c	8b 45 14	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00023	51		 push	 ecx
  00024	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00027	52		 push	 edx
  00028	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	52		 push	 edx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 20 00	 ret	 32			; 00000020H
?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z ENDP			; CDC::BitBlt
_TEXT	ENDS
EXTRN	__imp__GetPixel@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetPixel@CDC@@QBEKHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetPixel@CDC@@QBEKHH@Z PROC NEAR			; CDC::GetPixel, COMDAT
; _this$ = ecx

; 556  : 	{ ASSERT(m_hDC != NULL); return ::GetPixel(m_hDC, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPixel@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?GetPixel@CDC@@QBEKHH@Z ENDP				; CDC::GetPixel
_TEXT	ENDS
EXTRN	__imp__SetPixel@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPixel@CDC@@QAEKHHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_crColor$ = 16						; size = 4
?SetPixel@CDC@@QAEKHHK@Z PROC NEAR			; CDC::SetPixel, COMDAT
; _this$ = ecx

; 560  : 	{ ASSERT(m_hDC != NULL); return ::SetPixel(m_hDC, x, y, crColor); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _crColor$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetPixel@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetPixel@CDC@@QAEKHHK@Z ENDP				; CDC::SetPixel
_TEXT	ENDS
EXTRN	__imp__TextOutA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?TextOutA@CDC@@UAEHHHPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_lpszString$ = 16					; size = 4
_nCount$ = 20						; size = 4
?TextOutA@CDC@@UAEHHHPBDH@Z PROC NEAR			; CDC::TextOutA, COMDAT
; _this$ = ecx

; 568  : 	{ ASSERT(m_hDC != NULL); return ::TextOut(m_hDC, x, y, lpszString, nCount); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _nCount$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _lpszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?TextOutA@CDC@@UAEHHHPBDH@Z ENDP			; CDC::TextOutA
_TEXT	ENDS
EXTRN	__imp__ExtTextOutA@32:NEAR
; Function compile flags: /Odt
;	COMDAT ?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nOptions$ = 16						; size = 4
_lpRect$ = 20						; size = 4
_lpszString$ = 24					; size = 4
_nCount$ = 28						; size = 4
_lpDxWidths$ = 32					; size = 4
?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z PROC NEAR ; CDC::ExtTextOutA, COMDAT
; _this$ = ecx

; 573  : 	{ ASSERT(m_hDC != NULL); return ::ExtTextOut(m_hDC, x, y, nOptions, lpRect,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 574  : 		lpszString, nCount, lpDxWidths); }

  00007	8b 45 20	 mov	 eax, DWORD PTR _lpDxWidths$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 1c	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _lpszString$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _lpRect$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 10	 mov	 ecx, DWORD PTR _nOptions$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExtTextOutA@32
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 1c 00	 ret	 28			; 0000001cH
?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z ENDP	; CDC::ExtTextOutA
_TEXT	ENDS
PUBLIC	??0CSize@@QAE@K@Z				; CSize::CSize
EXTRN	__imp__TabbedTextOutA@32:NEAR
; Function compile flags: /Odt
;	COMDAT ?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lpszString$ = 20					; size = 4
_nCount$ = 24						; size = 4
_nTabPositions$ = 28					; size = 4
_lpnTabStopPositions$ = 32				; size = 4
_nTabOrigin$ = 36					; size = 4
?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z PROC NEAR ; CDC::TabbedTextOutA, COMDAT
; _this$ = ecx

; 581  : 	{ ASSERT(m_hDC != NULL); return ::TabbedTextOut(m_hDC, x, y, lpszString, nCount,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 582  : 		nTabPositions, lpnTabStopPositions, nTabOrigin); }

  00007	8b 45 24	 mov	 eax, DWORD PTR _nTabOrigin$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR _lpnTabStopPositions$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 1c	 mov	 edx, DWORD PTR _nTabPositions$[ebp]
  00012	52		 push	 edx
  00013	8b 45 18	 mov	 eax, DWORD PTR _nCount$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _lpszString$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TabbedTextOutA@32
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	e8 00 00 00 00	 call	 ??0CSize@@QAE@K@Z	; CSize::CSize
  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 20 00	 ret	 32			; 00000020H
?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z ENDP	; CDC::TabbedTextOutA
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwSize$ = 8						; size = 4
??0CSize@@QAE@K@Z PROC NEAR				; CSize::CSize, COMDAT
; _this$ = ecx

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 		cx = (short)LOWORD(dwSize);

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	0f bf c8	 movsx	 ecx, ax
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	89 0a		 mov	 DWORD PTR [edx], ecx

; 32   : 		cy = (short)HIWORD(dwSize);

  00017	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0001a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0001d	0f bf c8	 movsx	 ecx, ax
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 33   : 	}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0CSize@@QAE@K@Z ENDP					; CSize::CSize
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszString$ = 8					; size = 4
_nCount$ = 12						; size = 4
_lpRect$ = 16						; size = 4
_nFormat$ = 20						; size = 4
?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z PROC NEAR	; CDC::DrawTextA, COMDAT
; _this$ = ecx

; 589  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 		return ::DrawText(m_hDC, lpszString, nCount, lpRect, nFormat); }

  00007	8b 45 14	 mov	 eax, DWORD PTR _nFormat$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpszString$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z ENDP		; CDC::DrawTextA
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_lpRect$ = 12						; size = 4
_nFormat$ = 16						; size = 4
?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z PROC NEAR ; CDC::DrawTextA, COMDAT
; _this$ = ecx

; 592  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 593  : 		// these flags would modify the string
; 594  : 		ASSERT((nFormat & (DT_END_ELLIPSIS | DT_MODIFYSTRING)) != (DT_END_ELLIPSIS | DT_MODIFYSTRING));
; 595  : 		ASSERT((nFormat & (DT_PATH_ELLIPSIS | DT_MODIFYSTRING)) != (DT_PATH_ELLIPSIS | DT_MODIFYSTRING));
; 596  : 		return DrawText((LPCTSTR)str, (int)str.GetLength(), lpRect, nFormat); }

  00007	8b 45 10	 mov	 eax, DWORD PTR _nFormat$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00022	50		 push	 eax
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	ff 50 70	 call	 DWORD PTR [eax+112]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ENDP ; CDC::DrawTextA
_TEXT	ENDS
EXTRN	__imp__DrawTextExA@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpszString$ = 8					; size = 4
_nCount$ = 12						; size = 4
_lpRect$ = 16						; size = 4
_nFormat$ = 20						; size = 4
_lpDTParams$ = 24					; size = 4
?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z PROC NEAR ; CDC::DrawTextExA, COMDAT
; _this$ = ecx

; 600  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		return ::DrawTextEx(m_hDC, lpszString, nCount, lpRect, nFormat, lpDTParams); }

  00007	8b 45 18	 mov	 eax, DWORD PTR _lpDTParams$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nFormat$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _lpszString$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextExA@24
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ENDP ; CDC::DrawTextExA
_TEXT	ENDS
EXTRN	__imp__GetTextExtentPoint32A@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_size$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_lpszString$ = 12					; size = 4
_nCount$ = 16						; size = 4
?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z PROC NEAR	; CDC::GetTextExtent, COMDAT
; _this$ = ecx

; 610  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 611  : 		ASSERT(m_hAttribDC != NULL);
; 612  : 		SIZE size;
; 613  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, lpszString, nCount, &size));

  00009	8d 45 f8	 lea	 eax, DWORD PTR _size$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _lpszString$[ebp]
  00014	52		 push	 edx
  00015	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16

; 614  : 		return size;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _size$[ebp+4]
  00025	52		 push	 edx
  00026	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0CSize@@QAE@UtagSIZE@@@Z ; CSize::CSize
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 615  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?GetTextExtent@CDC@@QBE?AVCSize@@PBDH@Z ENDP		; CDC::GetTextExtent
_TEXT	ENDS
EXTRN	__imp__GrayStringA@36:NEAR
; Function compile flags: /Odt
;	COMDAT ?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBrush$ = 8						; size = 4
_lpfnOutput$ = 12					; size = 4
_lpData$ = 16						; size = 4
_nCount$ = 20						; size = 4
_x$ = 24						; size = 4
_y$ = 28						; size = 4
_nWidth$ = 32						; size = 4
_nHeight$ = 36						; size = 4
?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z PROC NEAR ; CDC::GrayStringA, COMDAT
; _this$ = ecx

; 659  : 	{ ASSERT(m_hDC != NULL); return ::GrayString(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 660  : 		(GRAYSTRINGPROC)lpfnOutput, lpData, nCount, x, y, nWidth, nHeight); }

  00007	8b 45 24	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 1c	 mov	 edx, DWORD PTR _y$[ebp]
  00012	52		 push	 edx
  00013	8b 45 18	 mov	 eax, DWORD PTR _x$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _lpData$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _lpfnOutput$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _pBrush$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	52		 push	 edx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrayStringA@36
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 20 00	 ret	 32			; 00000020H
?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z ENDP ; CDC::GrayStringA
_TEXT	ENDS
EXTRN	__imp__Escape@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Escape@CDC@@UAEHHHPBDPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nEscape$ = 8						; size = 4
_nCount$ = 12						; size = 4
_lpszInData$ = 16					; size = 4
_lpOutData$ = 20					; size = 4
?Escape@CDC@@UAEHHHPBDPAX@Z PROC NEAR			; CDC::Escape, COMDAT
; _this$ = ecx

; 703  : 	{ ASSERT(m_hDC != NULL); return ::Escape(m_hDC, nEscape, nCount, lpszInData, lpOutData);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _lpOutData$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _lpszInData$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nEscape$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Escape@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?Escape@CDC@@UAEHHHPBDPAX@Z ENDP			; CDC::Escape
_TEXT	ENDS
PUBLIC	??_R4CMenu@@6B@					; CMenu::`RTTI Complete Object Locator'
PUBLIC	??_R3CMenu@@8					; CMenu::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMenu@@8					; CMenu::`RTTI Base Class Array'
PUBLIC	??_7CMenu@@6B@					; CMenu::`vftable'
PUBLIC	??_GCMenu@@UAEPAXI@Z				; CMenu::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CMenu@@UBEPAUCRuntimeClass@@XZ:NEAR ; CMenu::GetRuntimeClass
EXTRN	?DrawItem@CMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:NEAR ; CMenu::DrawItem
EXTRN	?MeasureItem@CMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z:NEAR ; CMenu::MeasureItem
EXTRN	??_ECMenu@@UAEPAXI@Z:NEAR			; CMenu::`vector deleting destructor'
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT
??_7CMenu@@6B@ DD FLAT:??_R4CMenu@@6B@			; CMenu::`vftable'
	DD	FLAT:?GetRuntimeClass@CMenu@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECMenu@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?DrawItem@CMenu@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?MeasureItem@CMenu@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??_R4CMenu@@6B@
rdata$r	SEGMENT
??_R4CMenu@@6B@ DD 00H					; CMenu::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMenu@@@8
	DD	FLAT:??_R3CMenu@@8
rdata$r	ENDS
;	COMDAT ??_R3CMenu@@8
rdata$r	SEGMENT
??_R3CMenu@@8 DD 00H					; CMenu::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CMenu@@8
rdata$r	ENDS
;	COMDAT ??_R2CMenu@@8
rdata$r	SEGMENT
??_R2CMenu@@8 DD FLAT:??_R1A@?0A@A@CMenu@@8		; CMenu::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CMenu@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMenu@@QAE@XZ PROC NEAR				; CMenu::CMenu, COMDAT
; _this$ = ecx

; 827  : 	{ m_hMenu = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMenu@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CMenu@@QAE@XZ ENDP					; CMenu::CMenu
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMenu@@UAEPAXI@Z PROC NEAR				; CMenu::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMenu@@UAE@XZ	; CMenu::~CMenu
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L43207
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L43207:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCMenu@@UAEPAXI@Z ENDP				; CMenu::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T203485 DD	0ffffffffH
	DD	FLAT:$L203481
$T203483 DD	019930520H
	DD	01H
	DD	FLAT:$T203485
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMenu@@UAE@XZ PROC NEAR				; CMenu::~CMenu, COMDAT
; _this$ = ecx

; 829  : 	{ DestroyMenu(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CMenu@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMenu@@6B@
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?DestroyMenu@CMenu@@QAEHXZ ; CMenu::DestroyMenu
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L203481:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CMenu@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T203483
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CMenu@@UAE@XZ ENDP					; CMenu::~CMenu
EXTRN	?Attach@CMenu@@QAEHPAUHMENU__@@@Z:NEAR		; CMenu::Attach
EXTRN	__imp__CreateMenu@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateMenu@CMenu@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateMenu@CMenu@@QAEHXZ PROC NEAR			; CMenu::CreateMenu, COMDAT
; _this$ = ecx

; 831  : 	{ return Attach(::CreateMenu()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMenu@0
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Attach@CMenu@@QAEHPAUHMENU__@@@Z ; CMenu::Attach
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?CreateMenu@CMenu@@QAEHXZ ENDP				; CMenu::CreateMenu
_TEXT	ENDS
EXTRN	__imp__CreatePopupMenu@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreatePopupMenu@CMenu@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreatePopupMenu@CMenu@@QAEHXZ PROC NEAR		; CMenu::CreatePopupMenu, COMDAT
; _this$ = ecx

; 833  : 	{ return Attach(::CreatePopupMenu()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Attach@CMenu@@QAEHPAUHMENU__@@@Z ; CMenu::Attach
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?CreatePopupMenu@CMenu@@QAEHXZ ENDP			; CMenu::CreatePopupMenu
_TEXT	ENDS
EXTRN	__imp__DeleteMenu@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?DeleteMenu@CMenu@@QAEHII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?DeleteMenu@CMenu@@QAEHII@Z PROC NEAR			; CMenu::DeleteMenu, COMDAT
; _this$ = ecx

; 845  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::DeleteMenu(m_hMenu, nPosition, nFlags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteMenu@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?DeleteMenu@CMenu@@QAEHII@Z ENDP			; CMenu::DeleteMenu
_TEXT	ENDS
EXTRN	__imp__AppendMenuA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?AppendMenuA@CMenu@@QAEHIIPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
?AppendMenuA@CMenu@@QAEHIIPBD@Z PROC NEAR		; CMenu::AppendMenuA, COMDAT
; _this$ = ecx

; 848  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::AppendMenu(m_hMenu, nFlags, nIDNewItem, lpszNewItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?AppendMenuA@CMenu@@QAEHIIPBD@Z ENDP			; CMenu::AppendMenuA
_TEXT	ENDS
EXTRN	__imp__GetMenuItemCount@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetMenuItemCount@CMenu@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenuItemCount@CMenu@@QBEIXZ PROC NEAR		; CMenu::GetMenuItemCount, COMDAT
; _this$ = ecx

; 861  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::GetMenuItemCount(m_hMenu); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuItemCount@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMenuItemCount@CMenu@@QBEIXZ ENDP			; CMenu::GetMenuItemCount
_TEXT	ENDS
EXTRN	__imp__GetMenuItemID@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetMenuItemID@CMenu@@QBEIH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPos$ = 8						; size = 4
?GetMenuItemID@CMenu@@QBEIH@Z PROC NEAR			; CMenu::GetMenuItemID, COMDAT
; _this$ = ecx

; 863  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::GetMenuItemID(m_hMenu, nPos); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nPos$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuItemID@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetMenuItemID@CMenu@@QBEIH@Z ENDP			; CMenu::GetMenuItemID
_TEXT	ENDS
EXTRN	__imp__GetMenuState@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetMenuState@CMenu@@QBEIII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nID$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?GetMenuState@CMenu@@QBEIII@Z PROC NEAR			; CMenu::GetMenuState, COMDAT
; _this$ = ecx

; 865  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::GetMenuState(m_hMenu, nID, nFlags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nID$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMenuState@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?GetMenuState@CMenu@@QBEIII@Z ENDP			; CMenu::GetMenuState
_TEXT	ENDS
EXTRN	__imp__GetSubMenu@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetSubMenu@CMenu@@QBEPAV1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPos$ = 8						; size = 4
?GetSubMenu@CMenu@@QBEPAV1@H@Z PROC NEAR		; CMenu::GetSubMenu, COMDAT
; _this$ = ecx

; 875  : 	{ ASSERT(::IsMenu(m_hMenu)); return CMenu::FromHandle(::GetSubMenu(m_hMenu, nPos)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nPos$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSubMenu@8
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z ; CMenu::FromHandle
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?GetSubMenu@CMenu@@QBEPAV1@H@Z ENDP			; CMenu::GetSubMenu
_TEXT	ENDS
EXTRN	__imp__InsertMenuA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?InsertMenuA@CMenu@@QAEHIIIPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
?InsertMenuA@CMenu@@QAEHIIIPBD@Z PROC NEAR		; CMenu::InsertMenuA, COMDAT
; _this$ = ecx

; 878  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::InsertMenu(m_hMenu, nPosition, nFlags, nIDNewItem, lpszNewItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InsertMenuA@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?InsertMenuA@CMenu@@QAEHIIIPBD@Z ENDP			; CMenu::InsertMenuA
_TEXT	ENDS
EXTRN	__imp__ModifyMenuA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?ModifyMenuA@CMenu@@QAEHIIIPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
_nIDNewItem$ = 16					; size = 4
_lpszNewItem$ = 20					; size = 4
?ModifyMenuA@CMenu@@QAEHIIIPBD@Z PROC NEAR		; CMenu::ModifyMenuA, COMDAT
; _this$ = ecx

; 886  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::ModifyMenu(m_hMenu, nPosition, nFlags, nIDNewItem, lpszNewItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nPosition$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ModifyMenuA@20
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?ModifyMenuA@CMenu@@QAEHIIIPBD@Z ENDP			; CMenu::ModifyMenuA
_TEXT	ENDS
EXTRN	__imp__RemoveMenu@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?RemoveMenu@CMenu@@QAEHII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nPosition$ = 8						; size = 4
_nFlags$ = 12						; size = 4
?RemoveMenu@CMenu@@QAEHII@Z PROC NEAR			; CMenu::RemoveMenu, COMDAT
; _this$ = ecx

; 891  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::RemoveMenu(m_hMenu, nPosition, nFlags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _nFlags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RemoveMenu@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RemoveMenu@CMenu@@QAEHII@Z ENDP			; CMenu::RemoveMenu
_TEXT	ENDS
EXTRN	__imp__GetDC@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
;	COMDAT ?GetDC@CWnd@@QAEPAVCDC@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDC@CWnd@@QAEPAVCDC@@XZ PROC NEAR			; CWnd::GetDC, COMDAT
; _this$ = ecx

; 121  : 	{ ASSERT(::IsWindow(m_hWnd)); return CDC::FromHandle(::GetDC(m_hWnd)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetDC@CWnd@@QAEPAVCDC@@XZ ENDP				; CWnd::GetDC
_TEXT	ENDS
EXTRN	__imp__ReleaseDC@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z PROC NEAR		; CWnd::ReleaseDC, COMDAT
; _this$ = ecx

; 125  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::ReleaseDC(m_hWnd, pDC->m_hDC); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?ReleaseDC@CWnd@@QAEHPAVCDC@@@Z ENDP			; CWnd::ReleaseDC
_TEXT	ENDS
EXTRN	__imp__GetDesktopWindow@0:NEAR
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:NEAR	; CWnd::FromHandle
; Function compile flags: /Odt
;	COMDAT ?GetDesktopWindow@CWnd@@SGPAV1@XZ
_TEXT	SEGMENT
?GetDesktopWindow@CWnd@@SGPAV1@XZ PROC NEAR		; CWnd::GetDesktopWindow, COMDAT

; 207  : 	{ return CWnd::FromHandle(::GetDesktopWindow()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDesktopWindow@0
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDesktopWindow@CWnd@@SGPAV1@XZ ENDP			; CWnd::GetDesktopWindow
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxext.inl
_TEXT	ENDS
;	COMDAT ?GetCount@CControlBar@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@CControlBar@@QBEHXZ PROC NEAR			; CControlBar::GetCount, COMDAT
; _this$ = ecx

; 75   : 	{ return m_nCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetCount@CControlBar@@QBEHXZ ENDP			; CControlBar::GetCount
_TEXT	ENDS
EXTRN	?LoadToolBar@CToolBar@@QAEHPBD@Z:NEAR		; CToolBar::LoadToolBar
; Function compile flags: /Odt
;	COMDAT ?LoadToolBar@CToolBar@@QAEHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDResource$ = 8					; size = 4
?LoadToolBar@CToolBar@@QAEHI@Z PROC NEAR		; CToolBar::LoadToolBar, COMDAT
; _this$ = ecx

; 85   : 	{ return LoadToolBar(MAKEINTRESOURCE(nIDResource)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	0f b7 45 08	 movzx	 eax, WORD PTR _nIDResource$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?LoadToolBar@CToolBar@@QAEHPBD@Z ; CToolBar::LoadToolBar
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?LoadToolBar@CToolBar@@QAEHI@Z ENDP			; CToolBar::LoadToolBar
_TEXT	ENDS
EXTRN	__imp__ImageList_GetImageCount@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcmn.inl
;	COMDAT ?GetImageCount@CImageList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetImageCount@CImageList@@QBEHXZ PROC NEAR		; CImageList::GetImageCount, COMDAT
; _this$ = ecx

; 497  : 	{ ASSERT(m_hImageList != NULL); return ImageList_GetImageCount(m_hImageList); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetImageCount@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetImageCount@CImageList@@QBEHXZ ENDP			; CImageList::GetImageCount
_TEXT	ENDS
EXTRN	__imp__ImageList_AddMasked@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Add@CImageList@@QAEHPAVCBitmap@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbmImage$ = 8						; size = 4
_crMask$ = 12						; size = 4
?Add@CImageList@@QAEHPAVCBitmap@@K@Z PROC NEAR		; CImageList::Add, COMDAT
; _this$ = ecx

; 501  : 	{ ASSERT(m_hImageList != NULL); return ImageList_AddMasked(m_hImageList, (HBITMAP)pbmImage->GetSafeHandle(), crMask); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _crMask$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pbmImage$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_AddMasked@12
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?Add@CImageList@@QAEHPAVCBitmap@@K@Z ENDP		; CImageList::Add
_TEXT	ENDS
EXTRN	__imp__ImageList_ReplaceIcon@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Add@CImageList@@QAEHPAUHICON__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hIcon$ = 8						; size = 4
?Add@CImageList@@QAEHPAUHICON__@@@Z PROC NEAR		; CImageList::Add, COMDAT
; _this$ = ecx

; 507  : 	{ ASSERT(m_hImageList != NULL); return ImageList_AddIcon(m_hImageList, hIcon); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0000a	50		 push	 eax
  0000b	6a ff		 push	 -1
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_ReplaceIcon@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?Add@CImageList@@QAEHPAUHICON__@@@Z ENDP		; CImageList::Add
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Replace@CImageList@@QAEHHPAUHICON__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nImage$ = 8						; size = 4
_hIcon$ = 12						; size = 4
?Replace@CImageList@@QAEHHPAUHICON__@@@Z PROC NEAR	; CImageList::Replace, COMDAT
; _this$ = ecx

; 509  : 	{ ASSERT(m_hImageList != NULL); return ImageList_ReplaceIcon(m_hImageList, nImage, hIcon); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nImage$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_ReplaceIcon@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?Replace@CImageList@@QAEHHPAUHICON__@@@Z ENDP		; CImageList::Replace
_TEXT	ENDS
EXTRN	__imp__ImageList_GetIcon@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nImage$ = 8						; size = 4
?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z PROC NEAR	; CImageList::ExtractIconA, COMDAT
; _this$ = ecx

; 511  : 	{ ASSERT(m_hImageList != NULL); return ImageList_ExtractIcon(NULL, m_hImageList, nImage); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _nImage$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetIcon@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ENDP	; CImageList::ExtractIconA
_TEXT	ENDS
EXTRN	__imp__ImageList_Draw@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
_nImage$ = 12						; size = 4
_pt$ = 16						; size = 8
_nStyle$ = 24						; size = 4
?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z PROC NEAR	; CImageList::Draw, COMDAT
; _this$ = ecx

; 513  : 	{ ASSERT(m_hImageList != NULL); ASSERT(pDC != NULL); return ImageList_Draw(m_hImageList, nImage, pDC->GetSafeHdc(), pt.x, pt.y, nStyle); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 18	 mov	 eax, DWORD PTR _nStyle$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _pt$[ebp+4]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _pt$[ebp]
  00012	52		 push	 edx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  0001b	50		 push	 eax
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _nImage$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Draw@24
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 14 00	 ret	 20			; 00000014H
?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ENDP	; CImageList::Draw
_TEXT	ENDS
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S7	DD	FLAT:_$E5
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\bcmenu.cpp
CRT$XCU	ENDS
;	COMDAT _$E5
text$yc	SEGMENT
_$E5	PROC NEAR					; COMDAT

; 67   : CImageList BCMenu::m_AllImages;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  00008	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_$E5	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S10	DD	FLAT:_$E8
; Function compile flags: /Odt
CRT$XCU	ENDS
;	COMDAT _$E8
text$yc	SEGMENT
_$E8	PROC NEAR					; COMDAT

; 68   : CArray<int,int&> BCMenu::m_AllImagesID;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  00008	e8 00 00 00 00	 call	 ??0?$CArray@HAAH@@QAE@XZ ; CArray<int,int &>::CArray<int,int &>
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E9
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_$E8	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S12	DD	FLAT:_$E11
; Function compile flags: /Odt
CRT$XCU	ENDS
;	COMDAT _$E11
text$yc	SEGMENT
_$E11	PROC NEAR					; COMDAT

; 121  : static Win32Type g_Shell=IsShellType();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 ?IsShellType@@YA?AW4Win32Type@@XZ ; IsShellType
  00008	a3 00 00 00 00	 mov	 DWORD PTR _g_Shell, eax
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E11	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S15	DD	FLAT:_$E13
; Function compile flags: /Odt
CRT$XCU	ENDS
;	COMDAT _$E13
text$yc	SEGMENT
_$E13	PROC NEAR					; COMDAT

; 157  : CTypedPtrArray<CPtrArray, HMENU> BCMenu::m_AllSubMenus;  // Stores list of all sub-menus

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00008	e8 00 00 00 00	 call	 ??0?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@QAE@XZ
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:_$E14
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_$E13	ENDP
; Function compile flags: /Odt
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImages@BCMenu@@1VCImageList@@A
  00008	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E6	ENDP
; Function compile flags: /Odt
text$yd	ENDS
;	COMDAT _$E9
text$yd	SEGMENT
_$E9	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A
  00008	e8 00 00 00 00	 call	 ??1?$CArray@HAAH@@UAE@XZ ; CArray<int,int &>::~CArray<int,int &>
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E9	ENDP
; Function compile flags: /Odt
text$yd	ENDS
;	COMDAT _$E14
text$yd	SEGMENT
_$E14	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A
  00008	e8 00 00 00 00	 call	 ??1?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@UAE@XZ
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E14	ENDP
text$yd	ENDS
PUBLIC	?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A ; BCMenu::m_AllSubMenus
PUBLIC	?m_AllImages@BCMenu@@1VCImageList@@A		; BCMenu::m_AllImages
PUBLIC	?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A	; BCMenu::m_AllImagesID
_BSS	SEGMENT
?m_AllSubMenus@BCMenu@@1V?$CTypedPtrArray@VCPtrArray@@PAUHMENU__@@@@A DB 014H DUP (?) ; BCMenu::m_AllSubMenus
?m_AllImages@BCMenu@@1VCImageList@@A DQ 01H DUP (?)	; BCMenu::m_AllImages
?m_AllImagesID@BCMenu@@1V?$CArray@HAAH@@A DB 014H DUP (?) ; BCMenu::m_AllImagesID
_g_Shell DD	01H DUP (?)
_BSS	ENDS
END
