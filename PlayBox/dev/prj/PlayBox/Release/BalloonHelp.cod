; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\src\Gui\util\BalloonHelp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
;	COMDAT ?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBalloonHelp@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R3CBalloonHelp@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBalloonHelp@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CBalloonHelp@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@facet@locale@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@?$numpunct@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVCBalloonHelp@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4CBalloonHelp@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@AAE_WXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@_W@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@ctype_base@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@@@8??0bad_cast@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@?$ctype@D@std@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_S?$numpunct@_W@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?abs@@YAJJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWnd@@QAEHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtInRect@CRect@@QBEHUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendMessageA@CWnd@@QAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyRgn@CRgn@@QAEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EqualRgn@CRgn@@QBEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CombineRgn@CRgn@@QAEHPAV1@0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateRectRgn@CRgn@@QAEHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Size@CRect@@QBE?AVCSize@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRectEmpty@CRect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBkColor@CImageList@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OffsetRgn@CRgn@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateSolidBrush@CBrush@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CBrush@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBrush@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBrush@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBrush@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBrush@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBrush@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OffsetRect@CRect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CRect@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRectEmpty@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCapture@CWnd@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCapture@CWnd@@SGPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateStockObject@CGdiObject@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFont@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Invalidate@CWnd@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillTimer@CWnd@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetImageCount@CImageList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CImageList@@QAEHPAVCBitmap@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CImageList@@QAEHPAVCBitmap@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCBitmap@@QBEPAUHBITMAP__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R4CRgn@@6B@
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R0?AVCRgn@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R3CRgn@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R2CRgn@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CRgn@@8
rdata$r	SEGMENT DWORD USE32 PUBLIC 'CONST'
rdata$r	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRgn@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPB_WH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBalloonHelp@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?s_ClassAtom@CBalloonHelp@@0GA			; CBalloonHelp::s_ClassAtom
PUBLIC	?s_ClassAtomShadowed@CBalloonHelp@@0GA		; CBalloonHelp::s_ClassAtomShadowed
PUBLIC	_g_pfnGetSystemMetrics
PUBLIC	_g_pfnMonitorFromWindow
PUBLIC	_g_pfnMonitorFromRect
PUBLIC	_g_pfnMonitorFromPoint
PUBLIC	_g_pfnGetMonitorInfo
PUBLIC	_g_pfnEnumDisplayMonitors
PUBLIC	_g_pfnEnumDisplayDevices
PUBLIC	_g_fMultiMonInitDone
PUBLIC	_g_fMultimonPlatformNT
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?unCLOSE_ON_LBUTTON_UP@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_LBUTTON_UP
PUBLIC	?unCLOSE_ON_MBUTTON_UP@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_MBUTTON_UP
PUBLIC	?unCLOSE_ON_RBUTTON_UP@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_RBUTTON_UP
PUBLIC	?unCLOSE_ON_LBUTTON_DOWN@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_LBUTTON_DOWN
PUBLIC	?unCLOSE_ON_MBUTTON_DOWN@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_MBUTTON_DOWN
PUBLIC	?unCLOSE_ON_RBUTTON_DOWN@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_RBUTTON_DOWN
PUBLIC	?unCLOSE_ON_MOUSE_MOVE@CBalloonHelp@@2IB	; CBalloonHelp::unCLOSE_ON_MOUSE_MOVE
PUBLIC	?unCLOSE_ON_KEYPRESS@CBalloonHelp@@2IB		; CBalloonHelp::unCLOSE_ON_KEYPRESS
PUBLIC	?unCLOSE_ON_ANYTHING@CBalloonHelp@@2IB		; CBalloonHelp::unCLOSE_ON_ANYTHING
PUBLIC	?unDELAY_CLOSE@CBalloonHelp@@2IB		; CBalloonHelp::unDELAY_CLOSE
PUBLIC	?unDELETE_THIS_ON_CLOSE@CBalloonHelp@@2IB	; CBalloonHelp::unDELETE_THIS_ON_CLOSE
PUBLIC	?unSHOW_CLOSE_BUTTON@CBalloonHelp@@2IB		; CBalloonHelp::unSHOW_CLOSE_BUTTON
PUBLIC	?unSHOW_INNER_SHADOW@CBalloonHelp@@2IB		; CBalloonHelp::unSHOW_INNER_SHADOW
PUBLIC	?unSHOW_TOPMOST@CBalloonHelp@@2IB		; CBalloonHelp::unSHOW_TOPMOST
PUBLIC	?unDISABLE_XP_SHADOW@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_XP_SHADOW
PUBLIC	?unDISABLE_FADEIN@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_FADEIN
PUBLIC	?unDISABLE_FADEOUT@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_FADEOUT
PUBLIC	?unDISABLE_FADE@CBalloonHelp@@2IB		; CBalloonHelp::unDISABLE_FADE
PUBLIC	?nTIP_TAIL@CBalloonHelp@@1HB			; CBalloonHelp::nTIP_TAIL
PUBLIC	?nTIP_MARGIN@CBalloonHelp@@1HB			; CBalloonHelp::nTIP_MARGIN
PUBLIC	?OnShowWindow@CBalloonHelp@@IAEXHI@Z		; CBalloonHelp::OnShowWindow
PUBLIC	?OnPrint@CBalloonHelp@@IAEJIJ@Z			; CBalloonHelp::OnPrint
PUBLIC	?OnPrintClient@CBalloonHelp@@IAEJIJ@Z		; CBalloonHelp::OnPrintClient
PUBLIC	?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z	; CBalloonHelp::OnEraseBkgnd
PUBLIC	?OnPaint@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnPaint
PUBLIC	?OnNcPaint@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnNcPaint
PUBLIC	?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z	; CBalloonHelp::OnLButtonDown
PUBLIC	?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z	; CBalloonHelp::OnLButtonUp
PUBLIC	?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z ; CBalloonHelp::OnNcCalcSize
PUBLIC	?OnTimer@CBalloonHelp@@IAEXI@Z			; CBalloonHelp::OnTimer
PUBLIC	?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z	; CBalloonHelp::OnMouseMove
PUBLIC	?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z	; CBalloonHelp::OnNcHitTest
PUBLIC	?OnClose@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnClose
PUBLIC	?OnDestroy@CBalloonHelp@@IAEXXZ			; CBalloonHelp::OnDestroy
PUBLIC	?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B ; CBalloonHelp::_messageEntries
PUBLIC	?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B	; CBalloonHelp::messageMap
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:NEAR ; CWnd::GetThisMessageMap
_BSS	SEGMENT
?s_ClassAtom@CBalloonHelp@@0GA DW 01H DUP (?)		; CBalloonHelp::s_ClassAtom
	ALIGN	4

?s_ClassAtomShadowed@CBalloonHelp@@0GA DW 01H DUP (?)	; CBalloonHelp::s_ClassAtomShadowed
	ALIGN	4

_g_pfnGetSystemMetrics DD 01H DUP (?)
_g_pfnMonitorFromWindow DD 01H DUP (?)
_g_pfnMonitorFromRect DD 01H DUP (?)
_g_pfnMonitorFromPoint DD 01H DUP (?)
_g_pfnGetMonitorInfo DD 01H DUP (?)
_g_pfnEnumDisplayMonitors DD 01H DUP (?)
_g_pfnEnumDisplayDevices DD 01H DUP (?)
_g_fMultiMonInitDone DD 01H DUP (?)
_g_fMultimonPlatformNT DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG197695 DB	'USER32', 00H
	ORG $+1
$SG197704 DB	'GetSystemMetrics', 00H
	ORG $+3
$SG197705 DB	'MonitorFromWindow', 00H
	ORG $+2
$SG197706 DB	'MonitorFromRect', 00H
$SG197707 DB	'MonitorFromPoint', 00H
	ORG $+3
$SG197708 DB	'EnumDisplayMonitors', 00H
$SG197709 DB	'GetMonitorInfoA', 00H
$SG197710 DB	'EnumDisplayDevicesA', 00H
$SG197764 DB	'DISPLAY', 00H
$SG197804 DB	'DISPLAY', 00H
$SG197807 DB	'DISPLAY', 00H
?unCLOSE_ON_LBUTTON_UP@CBalloonHelp@@2IB DD 01H		; CBalloonHelp::unCLOSE_ON_LBUTTON_UP
?unCLOSE_ON_MBUTTON_UP@CBalloonHelp@@2IB DD 02H		; CBalloonHelp::unCLOSE_ON_MBUTTON_UP
?unCLOSE_ON_RBUTTON_UP@CBalloonHelp@@2IB DD 04H		; CBalloonHelp::unCLOSE_ON_RBUTTON_UP
?unCLOSE_ON_LBUTTON_DOWN@CBalloonHelp@@2IB DD 08H	; CBalloonHelp::unCLOSE_ON_LBUTTON_DOWN
?unCLOSE_ON_MBUTTON_DOWN@CBalloonHelp@@2IB DD 010H	; CBalloonHelp::unCLOSE_ON_MBUTTON_DOWN
?unCLOSE_ON_RBUTTON_DOWN@CBalloonHelp@@2IB DD 020H	; CBalloonHelp::unCLOSE_ON_RBUTTON_DOWN
?unCLOSE_ON_MOUSE_MOVE@CBalloonHelp@@2IB DD 040H	; CBalloonHelp::unCLOSE_ON_MOUSE_MOVE
?unCLOSE_ON_KEYPRESS@CBalloonHelp@@2IB DD 080H		; CBalloonHelp::unCLOSE_ON_KEYPRESS
?unCLOSE_ON_ANYTHING@CBalloonHelp@@2IB DD 07fH		; CBalloonHelp::unCLOSE_ON_ANYTHING
?unDELAY_CLOSE@CBalloonHelp@@2IB DD 0100H		; CBalloonHelp::unDELAY_CLOSE
?unDELETE_THIS_ON_CLOSE@CBalloonHelp@@2IB DD 0200H	; CBalloonHelp::unDELETE_THIS_ON_CLOSE
?unSHOW_CLOSE_BUTTON@CBalloonHelp@@2IB DD 0400H		; CBalloonHelp::unSHOW_CLOSE_BUTTON
?unSHOW_INNER_SHADOW@CBalloonHelp@@2IB DD 0800H		; CBalloonHelp::unSHOW_INNER_SHADOW
?unSHOW_TOPMOST@CBalloonHelp@@2IB DD 01000H		; CBalloonHelp::unSHOW_TOPMOST
?unDISABLE_XP_SHADOW@CBalloonHelp@@2IB DD 02000H	; CBalloonHelp::unDISABLE_XP_SHADOW
?unDISABLE_FADEIN@CBalloonHelp@@2IB DD 04000H		; CBalloonHelp::unDISABLE_FADEIN
?unDISABLE_FADEOUT@CBalloonHelp@@2IB DD 08000H		; CBalloonHelp::unDISABLE_FADEOUT
?unDISABLE_FADE@CBalloonHelp@@2IB DD 0c000H		; CBalloonHelp::unDISABLE_FADE
?nTIP_TAIL@CBalloonHelp@@1HB DD 014H			; CBalloonHelp::nTIP_TAIL
?nTIP_MARGIN@CBalloonHelp@@1HB DD 08H			; CBalloonHelp::nTIP_MARGIN
$SG197827 DB	00H
$SG197828 DB	00H
	ORG $+2
$SG197830 DB	'USER32.DLL', 00H
	ORG $+1
$SG197833 DB	'AnimateWindow', 00H
	ORG $+2
$SG198202 DB	'BalloonHelpClassDS', 00H
	ORG $+1
$SG198203 DB	'BalloonHelpClass', 00H
CONST	ENDS
;	COMDAT ?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B DD 014H ; CBalloonHelp::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnPaint@CBalloonHelp@@IAEXXZ
	DD	085H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnNcPaint@CBalloonHelp@@IAEXXZ
	DD	0201H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z
	DD	0202H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z
	DD	083H
	DD	00H
	DD	00H
	DD	00H
	DD	02fH
	DD	FLAT:?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z
	DD	0113H
	DD	00H
	DD	00H
	DD	00H
	DD	011H
	DD	FLAT:?OnTimer@CBalloonHelp@@IAEXI@Z
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DD	02dH
	DD	FLAT:?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z
	DD	0200H
	DD	00H
	DD	00H
	DD	00H
	DD	032H
	DD	FLAT:?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnDestroy@CBalloonHelp@@IAEXXZ
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnClose@CBalloonHelp@@IAEXXZ
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DD	012H
	DD	FLAT:?OnShowWindow@CBalloonHelp@@IAEXHI@Z
	DD	0317H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnPrint@CBalloonHelp@@IAEJIJ@Z
	DD	0318H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnPrintClient@CBalloonHelp@@IAEJIJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B
CONST	SEGMENT
?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; CBalloonHelp::messageMap
	DD	FLAT:?_messageEntries@CBalloonHelp@@0QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	_IsPlatformNT
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\platformsdk\include\multimon.h
_TEXT	SEGMENT
_osvi$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_IsPlatformNT PROC NEAR

; 169  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00011	57		 push	 edi

; 170  :     OSVERSIONINFOA osvi = {0};

  00012	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _osvi$[ebp], 0
  0001c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00021	33 c0		 xor	 eax, eax
  00023	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR _osvi$[ebp+4]
  00029	f3 ab		 rep stosd

; 171  :     osvi.dwOSVersionInfoSize = sizeof(osvi);

  0002b	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _osvi$[ebp], 148 ; 00000094H

; 172  :     GetVersionExA((OSVERSIONINFOA*)&osvi);

  00035	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _osvi$[ebp]
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 173  :     return (VER_PLATFORM_WIN32_NT == osvi.dwPlatformId);    

  00042	33 c0		 xor	 eax, eax
  00044	83 bd 70 ff ff
	ff 02		 cmp	 DWORD PTR _osvi$[ebp+16], 2
  0004b	0f 94 c0	 sete	 al

; 174  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	5f		 pop	 edi
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_IsPlatformNT ENDP
_TEXT	ENDS
PUBLIC	_InitMultipleMonitorStubs
EXTRN	__imp__GetProcAddress@8:NEAR
EXTRN	__imp__GetModuleHandleA@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_hUser32$ = -4						; size = 4
_InitMultipleMonitorStubs PROC NEAR

; 177  : {

  00060	55		 push	 ebp
  00061	8b ec		 mov	 ebp, esp
  00063	51		 push	 ecx

; 178  :     HMODULE hUser32;
; 179  :     if (g_fMultiMonInitDone)

  00064	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fMultiMonInitDone, 0
  0006b	74 11		 je	 SHORT $L197694

; 180  :     {
; 181  :         return g_pfnGetMonitorInfo != NULL;

  0006d	33 c0		 xor	 eax, eax
  0006f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnGetMonitorInfo, 0
  00076	0f 95 c0	 setne	 al
  00079	e9 5c 01 00 00	 jmp	 $L197692
$L197694:

; 182  :     }
; 183  : 
; 184  :     g_fMultimonPlatformNT = IsPlatformNT();

  0007e	e8 00 00 00 00	 call	 _IsPlatformNT
  00083	a3 00 00 00 00	 mov	 DWORD PTR _g_fMultimonPlatformNT, eax

; 185  :     hUser32 = GetModuleHandle(TEXT("USER32"));

  00088	68 00 00 00 00	 push	 OFFSET FLAT:$SG197695
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00093	89 45 fc	 mov	 DWORD PTR _hUser32$[ebp], eax

; 186  :     if (hUser32 &&
; 187  :         (*(FARPROC*)&g_pfnGetSystemMetrics    = GetProcAddress(hUser32,"GetSystemMetrics")) != NULL &&
; 188  :         (*(FARPROC*)&g_pfnMonitorFromWindow   = GetProcAddress(hUser32,"MonitorFromWindow")) != NULL &&
; 189  :         (*(FARPROC*)&g_pfnMonitorFromRect     = GetProcAddress(hUser32,"MonitorFromRect")) != NULL &&
; 190  :         (*(FARPROC*)&g_pfnMonitorFromPoint    = GetProcAddress(hUser32,"MonitorFromPoint")) != NULL &&
; 191  :         (*(FARPROC*)&g_pfnEnumDisplayMonitors = GetProcAddress(hUser32,"EnumDisplayMonitors")) != NULL &&
; 192  : #ifdef UNICODE
; 193  :         (*(FARPROC*)&g_pfnEnumDisplayDevices  = GetProcAddress(hUser32,"EnumDisplayDevicesW")) != NULL &&
; 194  :         (*(FARPROC*)&g_pfnGetMonitorInfo      = g_fMultimonPlatformNT ? GetProcAddress(hUser32,"GetMonitorInfoW") : 
; 195  :                                                 GetProcAddress(hUser32,"GetMonitorInfoA")) != NULL
; 196  : #else
; 197  :         (*(FARPROC*)&g_pfnGetMonitorInfo      = GetProcAddress(hUser32,"GetMonitorInfoA")) != NULL &&
; 198  :         (*(FARPROC*)&g_pfnEnumDisplayDevices  = GetProcAddress(hUser32,"EnumDisplayDevicesA")) != NULL
; 199  : #endif
; 200  :     ) {

  00096	83 7d fc 00	 cmp	 DWORD PTR _hUser32$[ebp], 0
  0009a	0f 84 e8 00 00
	00		 je	 $L197703
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:$SG197704
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _hUser32$[ebp]
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000af	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnGetSystemMetrics, eax
  000b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnGetSystemMetrics, 0
  000bb	0f 84 c7 00 00
	00		 je	 $L197703
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:$SG197705
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _hUser32$[ebp]
  000c9	51		 push	 ecx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000d0	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromWindow, eax
  000d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnMonitorFromWindow, 0
  000dc	0f 84 a6 00 00
	00		 je	 $L197703
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:$SG197706
  000e7	8b 55 fc	 mov	 edx, DWORD PTR _hUser32$[ebp]
  000ea	52		 push	 edx
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000f1	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromRect, eax
  000f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnMonitorFromRect, 0
  000fd	0f 84 85 00 00
	00		 je	 $L197703
  00103	68 00 00 00 00	 push	 OFFSET FLAT:$SG197707
  00108	8b 45 fc	 mov	 eax, DWORD PTR _hUser32$[ebp]
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00112	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromPoint, eax
  00117	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnMonitorFromPoint, 0
  0011e	74 68		 je	 SHORT $L197703
  00120	68 00 00 00 00	 push	 OFFSET FLAT:$SG197708
  00125	8b 4d fc	 mov	 ecx, DWORD PTR _hUser32$[ebp]
  00128	51		 push	 ecx
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0012f	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayMonitors, eax
  00134	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnEnumDisplayMonitors, 0
  0013b	74 4b		 je	 SHORT $L197703
  0013d	68 00 00 00 00	 push	 OFFSET FLAT:$SG197709
  00142	8b 55 fc	 mov	 edx, DWORD PTR _hUser32$[ebp]
  00145	52		 push	 edx
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0014c	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnGetMonitorInfo, eax
  00151	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnGetMonitorInfo, 0
  00158	74 2e		 je	 SHORT $L197703
  0015a	68 00 00 00 00	 push	 OFFSET FLAT:$SG197710
  0015f	8b 45 fc	 mov	 eax, DWORD PTR _hUser32$[ebp]
  00162	50		 push	 eax
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00169	a3 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayDevices, eax
  0016e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pfnEnumDisplayDevices, 0
  00175	74 11		 je	 SHORT $L197703

; 201  :         g_fMultiMonInitDone = TRUE;

  00177	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fMultiMonInitDone, 1

; 202  :         return TRUE;

  00181	b8 01 00 00 00	 mov	 eax, 1
  00186	eb 52		 jmp	 SHORT $L197692
$L197703:

; 203  :     }
; 204  :     else
; 205  :     {
; 206  :         g_pfnGetSystemMetrics    = NULL;

  00188	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnGetSystemMetrics, 0

; 207  :         g_pfnMonitorFromWindow   = NULL;

  00192	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromWindow, 0

; 208  :         g_pfnMonitorFromRect     = NULL;

  0019c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromRect, 0

; 209  :         g_pfnMonitorFromPoint    = NULL;

  001a6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnMonitorFromPoint, 0

; 210  :         g_pfnGetMonitorInfo      = NULL;

  001b0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnGetMonitorInfo, 0

; 211  :         g_pfnEnumDisplayMonitors = NULL;

  001ba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayMonitors, 0

; 212  :         g_pfnEnumDisplayDevices  = NULL;

  001c4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pfnEnumDisplayDevices, 0

; 213  : 
; 214  :         g_fMultiMonInitDone = TRUE;

  001ce	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fMultiMonInitDone, 1

; 215  :         return FALSE;

  001d8	33 c0		 xor	 eax, eax
$L197692:

; 216  :     }
; 217  : }

  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c3		 ret	 0
_InitMultipleMonitorStubs ENDP
_TEXT	ENDS
PUBLIC	_xGetSystemMetrics@4
EXTRN	__imp__GetSystemMetrics@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv68 = -4						; size = 4
_nIndex$ = 8						; size = 4
_xGetSystemMetrics@4 PROC NEAR

; 228  : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	51		 push	 ecx

; 229  :     if (InitMultipleMonitorStubs())

  001e4	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  001e9	85 c0		 test	 eax, eax
  001eb	74 0c		 je	 SHORT $L197715

; 230  :         return g_pfnGetSystemMetrics(nIndex);

  001ed	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  001f0	50		 push	 eax
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnGetSystemMetrics
  001f7	eb 44		 jmp	 SHORT $L197714
$L197715:

; 231  : 
; 232  :     switch (nIndex)

  001f9	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  001fc	89 4d fc	 mov	 DWORD PTR tv68[ebp], ecx
  001ff	8b 55 fc	 mov	 edx, DWORD PTR tv68[ebp]
  00202	83 ea 4c	 sub	 edx, 76			; 0000004cH
  00205	89 55 fc	 mov	 DWORD PTR tv68[ebp], edx
  00208	83 7d fc 05	 cmp	 DWORD PTR tv68[ebp], 5
  0020c	77 25		 ja	 SHORT $L197717
  0020e	8b 45 fc	 mov	 eax, DWORD PTR tv68[ebp]
  00211	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L199187[eax*4]
$L197720:

; 233  :     {
; 234  :     case SM_CMONITORS:
; 235  :     case SM_SAMEDISPLAYFORMAT:
; 236  :         return 1;

  00218	b8 01 00 00 00	 mov	 eax, 1
  0021d	eb 1e		 jmp	 SHORT $L197714
$L197721:

; 237  : 
; 238  :     case SM_XVIRTUALSCREEN:
; 239  :     case SM_YVIRTUALSCREEN:
; 240  :         return 0;

  0021f	33 c0		 xor	 eax, eax
  00221	eb 1a		 jmp	 SHORT $L197714
$L197722:

; 241  : 
; 242  :     case SM_CXVIRTUALSCREEN:
; 243  :         nIndex = SM_CXSCREEN;

  00223	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _nIndex$[ebp], 0

; 244  :         break;

  0022a	eb 07		 jmp	 SHORT $L197717
$L197723:

; 245  : 
; 246  :     case SM_CYVIRTUALSCREEN:
; 247  :         nIndex = SM_CYSCREEN;

  0022c	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _nIndex$[ebp], 1
$L197717:

; 248  :         break;
; 249  :     }
; 250  : 
; 251  :     return GetSystemMetrics(nIndex);

  00233	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00236	51		 push	 ecx
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
$L197714:

; 252  : }

  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c2 04 00	 ret	 4
$L199187:
  00243	00 00 00 00	 DD	 $L197721
  00247	00 00 00 00	 DD	 $L197721
  0024b	00 00 00 00	 DD	 $L197722
  0024f	00 00 00 00	 DD	 $L197723
  00253	00 00 00 00	 DD	 $L197720
  00257	00 00 00 00	 DD	 $L197720
_xGetSystemMetrics@4 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromPoint@12
; Function compile flags: /Odt
_TEXT	SEGMENT
_ptScreenCoords$ = 8					; size = 8
_dwFlags$ = 16						; size = 4
_xMonitorFromPoint@12 PROC NEAR

; 258  : {

  00260	55		 push	 ebp
  00261	8b ec		 mov	 ebp, esp

; 259  :     if (InitMultipleMonitorStubs())

  00263	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  00268	85 c0		 test	 eax, eax
  0026a	74 14		 je	 SHORT $L197728

; 260  :         return g_pfnMonitorFromPoint(ptScreenCoords, dwFlags);

  0026c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0026f	50		 push	 eax
  00270	8b 4d 0c	 mov	 ecx, DWORD PTR _ptScreenCoords$[ebp+4]
  00273	51		 push	 ecx
  00274	8b 55 08	 mov	 edx, DWORD PTR _ptScreenCoords$[ebp]
  00277	52		 push	 edx
  00278	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnMonitorFromPoint
  0027e	eb 37		 jmp	 SHORT $L197727
$L197728:

; 261  : 
; 262  :     if ((dwFlags & (MONITOR_DEFAULTTOPRIMARY | MONITOR_DEFAULTTONEAREST)) ||
; 263  :         ((ptScreenCoords.x >= 0) &&
; 264  :         (ptScreenCoords.x < GetSystemMetrics(SM_CXSCREEN)) &&
; 265  :         (ptScreenCoords.y >= 0) &&
; 266  :         (ptScreenCoords.y < GetSystemMetrics(SM_CYSCREEN))))

  00280	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00283	83 e0 03	 and	 eax, 3
  00286	75 26		 jne	 SHORT $L197730
  00288	83 7d 08 00	 cmp	 DWORD PTR _ptScreenCoords$[ebp], 0
  0028c	7c 27		 jl	 SHORT $L197729
  0028e	6a 00		 push	 0
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00296	39 45 08	 cmp	 DWORD PTR _ptScreenCoords$[ebp], eax
  00299	7d 1a		 jge	 SHORT $L197729
  0029b	83 7d 0c 00	 cmp	 DWORD PTR _ptScreenCoords$[ebp+4], 0
  0029f	7c 14		 jl	 SHORT $L197729
  002a1	6a 01		 push	 1
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  002a9	39 45 0c	 cmp	 DWORD PTR _ptScreenCoords$[ebp+4], eax
  002ac	7d 07		 jge	 SHORT $L197729
$L197730:

; 267  :     {
; 268  :         return xPRIMARY_MONITOR;

  002ae	b8 42 00 34 12	 mov	 eax, 305397826		; 12340042H
  002b3	eb 02		 jmp	 SHORT $L197727
$L197729:

; 269  :     }
; 270  : 
; 271  :     return NULL;

  002b5	33 c0		 xor	 eax, eax
$L197727:

; 272  : }

  002b7	5d		 pop	 ebp
  002b8	c2 0c 00	 ret	 12			; 0000000cH
_xMonitorFromPoint@12 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromRect@8
; Function compile flags: /Odt
_TEXT	SEGMENT
_lprcScreenCoords$ = 8					; size = 4
_dwFlags$ = 12						; size = 4
_xMonitorFromRect@8 PROC NEAR

; 276  : {

  002c0	55		 push	 ebp
  002c1	8b ec		 mov	 ebp, esp

; 277  :     if (InitMultipleMonitorStubs())

  002c3	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  002c8	85 c0		 test	 eax, eax
  002ca	74 10		 je	 SHORT $L197736

; 278  :         return g_pfnMonitorFromRect(lprcScreenCoords, dwFlags);

  002cc	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  002cf	50		 push	 eax
  002d0	8b 4d 08	 mov	 ecx, DWORD PTR _lprcScreenCoords$[ebp]
  002d3	51		 push	 ecx
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnMonitorFromRect
  002da	eb 42		 jmp	 SHORT $L197735
$L197736:

; 279  : 
; 280  :     if ((dwFlags & (MONITOR_DEFAULTTOPRIMARY | MONITOR_DEFAULTTONEAREST)) ||
; 281  :         ((lprcScreenCoords->right > 0) &&
; 282  :         (lprcScreenCoords->bottom > 0) &&
; 283  :         (lprcScreenCoords->left < GetSystemMetrics(SM_CXSCREEN)) &&
; 284  :         (lprcScreenCoords->top < GetSystemMetrics(SM_CYSCREEN))))

  002dc	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  002df	83 e2 03	 and	 edx, 3
  002e2	75 31		 jne	 SHORT $L197738
  002e4	8b 45 08	 mov	 eax, DWORD PTR _lprcScreenCoords$[ebp]
  002e7	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  002eb	7e 2f		 jle	 SHORT $L197737
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _lprcScreenCoords$[ebp]
  002f0	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  002f4	7e 26		 jle	 SHORT $L197737
  002f6	6a 00		 push	 0
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  002fe	8b 55 08	 mov	 edx, DWORD PTR _lprcScreenCoords$[ebp]
  00301	39 02		 cmp	 DWORD PTR [edx], eax
  00303	7d 17		 jge	 SHORT $L197737
  00305	6a 01		 push	 1
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0030d	8b 4d 08	 mov	 ecx, DWORD PTR _lprcScreenCoords$[ebp]
  00310	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00313	7d 07		 jge	 SHORT $L197737
$L197738:

; 285  :     {
; 286  :         return xPRIMARY_MONITOR;

  00315	b8 42 00 34 12	 mov	 eax, 305397826		; 12340042H
  0031a	eb 02		 jmp	 SHORT $L197735
$L197737:

; 287  :     }
; 288  : 
; 289  :     return NULL;

  0031c	33 c0		 xor	 eax, eax
$L197735:

; 290  : }

  0031e	5d		 pop	 ebp
  0031f	c2 08 00	 ret	 8
_xMonitorFromRect@8 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromWindow@8
EXTRN	__imp__GetWindowPlacement@8:NEAR
EXTRN	__imp__IsIconic@4:NEAR
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv80 = -48						; size = 4
_wp$ = -44						; size = 44
_hWnd$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_xMonitorFromWindow@8 PROC NEAR

; 294  : {

  00330	55		 push	 ebp
  00331	8b ec		 mov	 ebp, esp
  00333	83 ec 30	 sub	 esp, 48			; 00000030H

; 295  :     WINDOWPLACEMENT wp;
; 296  : 
; 297  :     if (InitMultipleMonitorStubs())

  00336	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  0033b	85 c0		 test	 eax, eax
  0033d	74 10		 je	 SHORT $L197745

; 298  :         return g_pfnMonitorFromWindow(hWnd, dwFlags);

  0033f	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00342	50		 push	 eax
  00343	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00346	51		 push	 ecx
  00347	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnMonitorFromWindow
  0034d	eb 58		 jmp	 SHORT $L197743
$L197745:

; 299  : 
; 300  :     if (dwFlags & (MONITOR_DEFAULTTOPRIMARY | MONITOR_DEFAULTTONEAREST))

  0034f	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00352	83 e2 03	 and	 edx, 3
  00355	74 07		 je	 SHORT $L197746

; 301  :         return xPRIMARY_MONITOR;

  00357	b8 42 00 34 12	 mov	 eax, 305397826		; 12340042H
  0035c	eb 49		 jmp	 SHORT $L197743
$L197746:

; 302  : 
; 303  :     if (IsIconic(hWnd) ?
; 304  :             GetWindowPlacement(hWnd, &wp) :
; 305  :             GetWindowRect(hWnd, &wp.rcNormalPosition)) {

  0035e	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00361	50		 push	 eax
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsIconic@4
  00368	85 c0		 test	 eax, eax
  0036a	74 13		 je	 SHORT $L199191
  0036c	8d 4d d4	 lea	 ecx, DWORD PTR _wp$[ebp]
  0036f	51		 push	 ecx
  00370	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  00373	52		 push	 edx
  00374	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowPlacement@8
  0037a	89 45 d0	 mov	 DWORD PTR tv80[ebp], eax
  0037d	eb 11		 jmp	 SHORT $L199192
$L199191:
  0037f	8d 45 f0	 lea	 eax, DWORD PTR _wp$[ebp+28]
  00382	50		 push	 eax
  00383	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00386	51		 push	 ecx
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0038d	89 45 d0	 mov	 DWORD PTR tv80[ebp], eax
$L199192:
  00390	83 7d d0 00	 cmp	 DWORD PTR tv80[ebp], 0
  00394	74 0f		 je	 SHORT $L197748

; 306  : 
; 307  :         return xMonitorFromRect(&wp.rcNormalPosition, dwFlags);

  00396	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00399	52		 push	 edx
  0039a	8d 45 f0	 lea	 eax, DWORD PTR _wp$[ebp+28]
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 _xMonitorFromRect@8
  003a3	eb 02		 jmp	 SHORT $L197743
$L197748:

; 308  :     }
; 309  : 
; 310  :     return NULL;

  003a5	33 c0		 xor	 eax, eax
$L197743:

; 311  : }

  003a7	8b e5		 mov	 esp, ebp
  003a9	5d		 pop	 ebp
  003aa	c2 08 00	 ret	 8
_xMonitorFromWindow@8 ENDP
_TEXT	ENDS
PUBLIC	_xGetMonitorInfo@8
EXTRN	__imp__lstrcpynA@12:NEAR
EXTRN	__imp__SystemParametersInfoA@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_f$197755 = -20						; size = 4
_rcWork$ = -16						; size = 16
_hMonitor$ = 8						; size = 4
_lpMonitorInfo$ = 12					; size = 4
_xGetMonitorInfo@8 PROC NEAR

; 315  : {

  003b0	55		 push	 ebp
  003b1	8b ec		 mov	 ebp, esp
  003b3	83 ec 14	 sub	 esp, 20			; 00000014H

; 316  :     RECT rcWork;
; 317  : 
; 318  :     if (InitMultipleMonitorStubs())

  003b6	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  003bb	85 c0		 test	 eax, eax
  003bd	74 19		 je	 SHORT $L197754

; 319  :     {
; 320  :         BOOL f = g_pfnGetMonitorInfo(hMonitor, lpMonitorInfo);

  003bf	8b 45 0c	 mov	 eax, DWORD PTR _lpMonitorInfo$[ebp]
  003c2	50		 push	 eax
  003c3	8b 4d 08	 mov	 ecx, DWORD PTR _hMonitor$[ebp]
  003c6	51		 push	 ecx
  003c7	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnGetMonitorInfo
  003cd	89 45 ec	 mov	 DWORD PTR _f$197755[ebp], eax

; 321  : #ifdef UNICODE
; 322  :         if (f && !g_fMultimonPlatformNT && (lpMonitorInfo->cbSize >= sizeof(MONITORINFOEX)))
; 323  :         { 
; 324  :             MultiByteToWideChar(CP_ACP, 0,
; 325  :                 (LPSTR)((MONITORINFOEX*)lpMonitorInfo)->szDevice, -1,
; 326  :                 ((MONITORINFOEX*)lpMonitorInfo)->szDevice, (sizeof(((MONITORINFOEX*)lpMonitorInfo)->szDevice)/sizeof(TCHAR)));
; 327  :         }
; 328  : #endif
; 329  :         return f;

  003d0	8b 45 ec	 mov	 eax, DWORD PTR _f$197755[ebp]
  003d3	e9 b3 00 00 00	 jmp	 $L197752
$L197754:

; 330  :     }
; 331  : 
; 332  :     if ((hMonitor == xPRIMARY_MONITOR) &&
; 333  :         lpMonitorInfo &&
; 334  :         (lpMonitorInfo->cbSize >= sizeof(MONITORINFO)) &&
; 335  :         SystemParametersInfoA(SPI_GETWORKAREA, 0, &rcWork, 0))

  003d8	81 7d 08 42 00
	34 12		 cmp	 DWORD PTR _hMonitor$[ebp], 305397826 ; 12340042H
  003df	0f 85 a4 00 00
	00		 jne	 $L197758
  003e5	83 7d 0c 00	 cmp	 DWORD PTR _lpMonitorInfo$[ebp], 0
  003e9	0f 84 9a 00 00
	00		 je	 $L197758
  003ef	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  003f2	83 3a 28	 cmp	 DWORD PTR [edx], 40	; 00000028H
  003f5	0f 82 8e 00 00
	00		 jb	 $L197758
  003fb	6a 00		 push	 0
  003fd	8d 45 f0	 lea	 eax, DWORD PTR _rcWork$[ebp]
  00400	50		 push	 eax
  00401	6a 00		 push	 0
  00403	6a 30		 push	 48			; 00000030H
  00405	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  0040b	85 c0		 test	 eax, eax
  0040d	74 7a		 je	 SHORT $L197758

; 336  :     {
; 337  :         lpMonitorInfo->rcMonitor.left = 0;

  0040f	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMonitorInfo$[ebp]
  00412	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 338  :         lpMonitorInfo->rcMonitor.top  = 0;

  00419	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  0041c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 339  :         lpMonitorInfo->rcMonitor.right  = GetSystemMetrics(SM_CXSCREEN);

  00423	6a 00		 push	 0
  00425	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0042b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMonitorInfo$[ebp]
  0042e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 340  :         lpMonitorInfo->rcMonitor.bottom = GetSystemMetrics(SM_CYSCREEN);

  00431	6a 01		 push	 1
  00433	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00439	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  0043c	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 341  :         lpMonitorInfo->rcWork = rcWork;

  0043f	8b 45 0c	 mov	 eax, DWORD PTR _lpMonitorInfo$[ebp]
  00442	83 c0 14	 add	 eax, 20			; 00000014H
  00445	8b 4d f0	 mov	 ecx, DWORD PTR _rcWork$[ebp]
  00448	89 08		 mov	 DWORD PTR [eax], ecx
  0044a	8b 55 f4	 mov	 edx, DWORD PTR _rcWork$[ebp+4]
  0044d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00450	8b 4d f8	 mov	 ecx, DWORD PTR _rcWork$[ebp+8]
  00453	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00456	8b 55 fc	 mov	 edx, DWORD PTR _rcWork$[ebp+12]
  00459	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 342  :         lpMonitorInfo->dwFlags = MONITORINFOF_PRIMARY;

  0045c	8b 45 0c	 mov	 eax, DWORD PTR _lpMonitorInfo$[ebp]
  0045f	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [eax+36], 1

; 343  : 
; 344  :         if (lpMonitorInfo->cbSize >= sizeof(MONITORINFOEX))

  00466	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMonitorInfo$[ebp]
  00469	83 39 48	 cmp	 DWORD PTR [ecx], 72	; 00000048H
  0046c	72 14		 jb	 SHORT $L197760

; 345  :         {
; 346  : #ifdef UNICODE
; 347  :             MultiByteToWideChar(CP_ACP, 0, "DISPLAY", -1, ((MONITORINFOEX*)lpMonitorInfo)->szDevice, (sizeof(((MONITORINFOEX*)lpMonitorInfo)->szDevice)/sizeof(TCHAR)));
; 348  : #else // UNICODE
; 349  :             lstrcpyn(((MONITORINFOEX*)lpMonitorInfo)->szDevice, TEXT("DISPLAY"), (sizeof(((MONITORINFOEX*)lpMonitorInfo)->szDevice)/sizeof(TCHAR)));

  0046e	6a 20		 push	 32			; 00000020H
  00470	68 00 00 00 00	 push	 OFFSET FLAT:$SG197764
  00475	8b 55 0c	 mov	 edx, DWORD PTR _lpMonitorInfo$[ebp]
  00478	83 c2 28	 add	 edx, 40			; 00000028H
  0047b	52		 push	 edx
  0047c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
$L197760:

; 350  : #endif // UNICODE
; 351  :         }
; 352  : 
; 353  :         return TRUE;

  00482	b8 01 00 00 00	 mov	 eax, 1
  00487	eb 02		 jmp	 SHORT $L197752
$L197758:

; 354  :     }
; 355  : 
; 356  :     return FALSE;

  00489	33 c0		 xor	 eax, eax
$L197752:

; 357  : }

  0048b	8b e5		 mov	 esp, ebp
  0048d	5d		 pop	 ebp
  0048e	c2 08 00	 ret	 8
_xGetMonitorInfo@8 ENDP
_TEXT	ENDS
PUBLIC	_xEnumDisplayMonitors@16
EXTRN	__imp__GetClipBox@8:NEAR
EXTRN	__imp__IntersectRect@12:NEAR
EXTRN	__imp__OffsetRect@12:NEAR
EXTRN	__imp__GetDCOrgEx@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv80 = -44						; size = 4
_ptOrg$197776 = -40					; size = 8
_rcClip$197775 = -32					; size = 16
_rcLimit$ = -16						; size = 16
_hdcOptionalForPainting$ = 8				; size = 4
_lprcEnumMonitorsThatIntersect$ = 12			; size = 4
_lpfnEnumProc$ = 16					; size = 4
_dwData$ = 20						; size = 4
_xEnumDisplayMonitors@16 PROC NEAR

; 365  : {

  004a0	55		 push	 ebp
  004a1	8b ec		 mov	 ebp, esp
  004a3	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 366  :     RECT rcLimit;
; 367  : 
; 368  :     if (InitMultipleMonitorStubs()) {

  004a6	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  004ab	85 c0		 test	 eax, eax
  004ad	74 1b		 je	 SHORT $L197772

; 369  :         return g_pfnEnumDisplayMonitors(
; 370  :                 hdcOptionalForPainting,
; 371  :                 lprcEnumMonitorsThatIntersect,
; 372  :                 lpfnEnumProc,
; 373  :                 dwData);

  004af	8b 45 14	 mov	 eax, DWORD PTR _dwData$[ebp]
  004b2	50		 push	 eax
  004b3	8b 4d 10	 mov	 ecx, DWORD PTR _lpfnEnumProc$[ebp]
  004b6	51		 push	 ecx
  004b7	8b 55 0c	 mov	 edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
  004ba	52		 push	 edx
  004bb	8b 45 08	 mov	 eax, DWORD PTR _hdcOptionalForPainting$[ebp]
  004be	50		 push	 eax
  004bf	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnEnumDisplayMonitors
  004c5	e9 ff 00 00 00	 jmp	 $L197770
$L197772:

; 374  :     }
; 375  : 
; 376  :     if (!lpfnEnumProc)

  004ca	83 7d 10 00	 cmp	 DWORD PTR _lpfnEnumProc$[ebp], 0
  004ce	75 07		 jne	 SHORT $L197773

; 377  :         return FALSE;

  004d0	33 c0		 xor	 eax, eax
  004d2	e9 f2 00 00 00	 jmp	 $L197770
$L197773:

; 378  : 
; 379  :     rcLimit.left   = 0;

  004d7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rcLimit$[ebp], 0

; 380  :     rcLimit.top    = 0;

  004de	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _rcLimit$[ebp+4], 0

; 381  :     rcLimit.right  = GetSystemMetrics(SM_CXSCREEN);

  004e5	6a 00		 push	 0
  004e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  004ed	89 45 f8	 mov	 DWORD PTR _rcLimit$[ebp+8], eax

; 382  :     rcLimit.bottom = GetSystemMetrics(SM_CYSCREEN);

  004f0	6a 01		 push	 1
  004f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  004f8	89 45 fc	 mov	 DWORD PTR _rcLimit$[ebp+12], eax

; 383  : 
; 384  :     if (hdcOptionalForPainting)

  004fb	83 7d 08 00	 cmp	 DWORD PTR _hdcOptionalForPainting$[ebp], 0
  004ff	0f 84 8d 00 00
	00		 je	 $L197774

; 385  :     {
; 386  :         RECT    rcClip;
; 387  :         POINT   ptOrg;
; 388  : 
; 389  :         switch (GetClipBox(hdcOptionalForPainting, &rcClip))

  00505	8d 4d e0	 lea	 ecx, DWORD PTR _rcClip$197775[ebp]
  00508	51		 push	 ecx
  00509	8b 55 08	 mov	 edx, DWORD PTR _hdcOptionalForPainting$[ebp]
  0050c	52		 push	 edx
  0050d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClipBox@8
  00513	89 45 d4	 mov	 DWORD PTR tv80[ebp], eax
  00516	83 7d d4 00	 cmp	 DWORD PTR tv80[ebp], 0
  0051a	74 70		 je	 SHORT $L197786
  0051c	83 7d d4 01	 cmp	 DWORD PTR tv80[ebp], 1
  00520	74 63		 je	 SHORT $L197785

; 390  :         {
; 391  :         default:
; 392  :             if (!GetDCOrgEx(hdcOptionalForPainting, &ptOrg))

  00522	8d 45 d8	 lea	 eax, DWORD PTR _ptOrg$197776[ebp]
  00525	50		 push	 eax
  00526	8b 4d 08	 mov	 ecx, DWORD PTR _hdcOptionalForPainting$[ebp]
  00529	51		 push	 ecx
  0052a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDCOrgEx@8
  00530	85 c0		 test	 eax, eax
  00532	75 07		 jne	 SHORT $L197782

; 393  :                 return FALSE;

  00534	33 c0		 xor	 eax, eax
  00536	e9 8e 00 00 00	 jmp	 $L197770
$L197782:

; 394  : 
; 395  :             OffsetRect(&rcLimit, -ptOrg.x, -ptOrg.y);

  0053b	8b 55 dc	 mov	 edx, DWORD PTR _ptOrg$197776[ebp+4]
  0053e	f7 da		 neg	 edx
  00540	52		 push	 edx
  00541	8b 45 d8	 mov	 eax, DWORD PTR _ptOrg$197776[ebp]
  00544	f7 d8		 neg	 eax
  00546	50		 push	 eax
  00547	8d 4d f0	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  0054a	51		 push	 ecx
  0054b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRect@12

; 396  :             if (IntersectRect(&rcLimit, &rcLimit, &rcClip) &&
; 397  :                 (!lprcEnumMonitorsThatIntersect ||
; 398  :                      IntersectRect(&rcLimit, &rcLimit, lprcEnumMonitorsThatIntersect))) {

  00551	8d 55 e0	 lea	 edx, DWORD PTR _rcClip$197775[ebp]
  00554	52		 push	 edx
  00555	8d 45 f0	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  00558	50		 push	 eax
  00559	8d 4d f0	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  0055c	51		 push	 ecx
  0055d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IntersectRect@12
  00563	85 c0		 test	 eax, eax
  00565	74 1e		 je	 SHORT $L197785
  00567	83 7d 0c 00	 cmp	 DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp], 0
  0056b	74 16		 je	 SHORT $L197784
  0056d	8b 55 0c	 mov	 edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
  00570	52		 push	 edx
  00571	8d 45 f0	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  00574	50		 push	 eax
  00575	8d 4d f0	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  00578	51		 push	 ecx
  00579	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IntersectRect@12
  0057f	85 c0		 test	 eax, eax
  00581	74 02		 je	 SHORT $L197785
$L197784:

; 399  : 
; 400  :                 break;

  00583	eb 0b		 jmp	 SHORT $L197778
$L197785:

; 401  :             }
; 402  :             //fall thru
; 403  :         case NULLREGION:
; 404  :              return TRUE;

  00585	b8 01 00 00 00	 mov	 eax, 1
  0058a	eb 3d		 jmp	 SHORT $L197770
$L197786:

; 405  :         case ERROR:
; 406  :              return FALSE;

  0058c	33 c0		 xor	 eax, eax
  0058e	eb 39		 jmp	 SHORT $L197770
$L197778:

; 407  :         }
; 408  :     } else {

  00590	eb 23		 jmp	 SHORT $L197787
$L197774:

; 409  :         if (    lprcEnumMonitorsThatIntersect &&
; 410  :                 !IntersectRect(&rcLimit, &rcLimit, lprcEnumMonitorsThatIntersect)) {

  00592	83 7d 0c 00	 cmp	 DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp], 0
  00596	74 1d		 je	 SHORT $L197787
  00598	8b 55 0c	 mov	 edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
  0059b	52		 push	 edx
  0059c	8d 45 f0	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  0059f	50		 push	 eax
  005a0	8d 4d f0	 lea	 ecx, DWORD PTR _rcLimit$[ebp]
  005a3	51		 push	 ecx
  005a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IntersectRect@12
  005aa	85 c0		 test	 eax, eax
  005ac	75 07		 jne	 SHORT $L197787

; 411  : 
; 412  :             return TRUE;

  005ae	b8 01 00 00 00	 mov	 eax, 1
  005b3	eb 14		 jmp	 SHORT $L197770
$L197787:

; 413  :         }
; 414  :     }
; 415  : 
; 416  :     return lpfnEnumProc(
; 417  :             xPRIMARY_MONITOR,
; 418  :             hdcOptionalForPainting,
; 419  :             &rcLimit,
; 420  :             dwData);

  005b5	8b 55 14	 mov	 edx, DWORD PTR _dwData$[ebp]
  005b8	52		 push	 edx
  005b9	8d 45 f0	 lea	 eax, DWORD PTR _rcLimit$[ebp]
  005bc	50		 push	 eax
  005bd	8b 4d 08	 mov	 ecx, DWORD PTR _hdcOptionalForPainting$[ebp]
  005c0	51		 push	 ecx
  005c1	68 42 00 34 12	 push	 305397826		; 12340042H
  005c6	ff 55 10	 call	 DWORD PTR _lpfnEnumProc$[ebp]
$L197770:

; 421  : }

  005c9	8b e5		 mov	 esp, ebp
  005cb	5d		 pop	 ebp
  005cc	c2 10 00	 ret	 16			; 00000010H
_xEnumDisplayMonitors@16 ENDP
_TEXT	ENDS
PUBLIC	_xEnumDisplayDevices@16
; Function compile flags: /Odt
_TEXT	SEGMENT
_Unused$ = 8						; size = 4
_iDevNum$ = 12						; size = 4
_lpDisplayDevice$ = 16					; size = 4
_dwFlags$ = 20						; size = 4
_xEnumDisplayDevices@16 PROC NEAR

; 429  : {

  005d0	55		 push	 ebp
  005d1	8b ec		 mov	 ebp, esp

; 430  :     if (InitMultipleMonitorStubs())

  005d3	e8 00 00 00 00	 call	 _InitMultipleMonitorStubs
  005d8	85 c0		 test	 eax, eax
  005da	74 18		 je	 SHORT $L197796

; 431  :         return g_pfnEnumDisplayDevices(Unused, iDevNum, lpDisplayDevice, dwFlags);

  005dc	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  005df	50		 push	 eax
  005e0	8b 4d 10	 mov	 ecx, DWORD PTR _lpDisplayDevice$[ebp]
  005e3	51		 push	 ecx
  005e4	8b 55 0c	 mov	 edx, DWORD PTR _iDevNum$[ebp]
  005e7	52		 push	 edx
  005e8	8b 45 08	 mov	 eax, DWORD PTR _Unused$[ebp]
  005eb	50		 push	 eax
  005ec	ff 15 00 00 00
	00		 call	 DWORD PTR _g_pfnEnumDisplayDevices
  005f2	eb 66		 jmp	 SHORT $L197795
$L197796:

; 432  : 
; 433  :     if (Unused != NULL)

  005f4	83 7d 08 00	 cmp	 DWORD PTR _Unused$[ebp], 0
  005f8	74 04		 je	 SHORT $L197797

; 434  :         return FALSE;

  005fa	33 c0		 xor	 eax, eax
  005fc	eb 5c		 jmp	 SHORT $L197795
$L197797:

; 435  : 
; 436  :     if (iDevNum != 0)

  005fe	83 7d 0c 00	 cmp	 DWORD PTR _iDevNum$[ebp], 0
  00602	74 04		 je	 SHORT $L197798

; 437  :         return FALSE;

  00604	33 c0		 xor	 eax, eax
  00606	eb 52		 jmp	 SHORT $L197795
$L197798:

; 438  : 
; 439  :     if (lpDisplayDevice == NULL || lpDisplayDevice->cb < sizeof(DISPLAY_DEVICE))

  00608	83 7d 10 00	 cmp	 DWORD PTR _lpDisplayDevice$[ebp], 0
  0060c	74 0b		 je	 SHORT $L197801
  0060e	8b 4d 10	 mov	 ecx, DWORD PTR _lpDisplayDevice$[ebp]
  00611	81 39 a8 01 00
	00		 cmp	 DWORD PTR [ecx], 424	; 000001a8H
  00617	73 04		 jae	 SHORT $L197800
$L197801:

; 440  :         return FALSE;

  00619	33 c0		 xor	 eax, eax
  0061b	eb 3d		 jmp	 SHORT $L197795
$L197800:

; 441  : 
; 442  : #ifdef UNICODE
; 443  :     MultiByteToWideChar(CP_ACP, 0, "DISPLAY", -1, lpDisplayDevice->DeviceName, (sizeof(lpDisplayDevice->DeviceName)/sizeof(TCHAR)));
; 444  :     MultiByteToWideChar(CP_ACP, 0, "DISPLAY", -1, lpDisplayDevice->DeviceString, (sizeof(lpDisplayDevice->DeviceString)/sizeof(TCHAR)));
; 445  : #else // UNICODE
; 446  :     lstrcpyn((LPTSTR)lpDisplayDevice->DeviceName,   TEXT("DISPLAY"), (sizeof(lpDisplayDevice->DeviceName)/sizeof(TCHAR)));

  0061d	6a 20		 push	 32			; 00000020H
  0061f	68 00 00 00 00	 push	 OFFSET FLAT:$SG197804
  00624	8b 55 10	 mov	 edx, DWORD PTR _lpDisplayDevice$[ebp]
  00627	83 c2 04	 add	 edx, 4
  0062a	52		 push	 edx
  0062b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 447  :     lstrcpyn((LPTSTR)lpDisplayDevice->DeviceString, TEXT("DISPLAY"), (sizeof(lpDisplayDevice->DeviceString)/sizeof(TCHAR)));

  00631	68 80 00 00 00	 push	 128			; 00000080H
  00636	68 00 00 00 00	 push	 OFFSET FLAT:$SG197807
  0063b	8b 45 10	 mov	 eax, DWORD PTR _lpDisplayDevice$[ebp]
  0063e	83 c0 24	 add	 eax, 36			; 00000024H
  00641	50		 push	 eax
  00642	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 448  : #endif // UNICODE
; 449  : 
; 450  :     lpDisplayDevice->StateFlags = DISPLAY_DEVICE_ATTACHED_TO_DESKTOP | DISPLAY_DEVICE_PRIMARY_DEVICE;

  00648	8b 4d 10	 mov	 ecx, DWORD PTR _lpDisplayDevice$[ebp]
  0064b	c7 81 a4 00 00
	00 05 00 00 00	 mov	 DWORD PTR [ecx+164], 5

; 451  : 
; 452  :     return TRUE;

  00655	b8 01 00 00 00	 mov	 eax, 1
$L197795:

; 453  : }

  0065a	5d		 pop	 ebp
  0065b	c2 10 00	 ret	 16			; 00000010H
_xEnumDisplayDevices@16 ENDP
_TEXT	ENDS
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	??0CBalloonHelp@@QAE@XZ				; CBalloonHelp::CBalloonHelp
PUBLIC	?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z ; CBalloonHelp::Create
PUBLIC	?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z ; CBalloonHelp::LaunchBalloon
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:NEAR
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T199211 DD	0ffffffffH
	DD	FLAT:$L199202
	DD	00H
	DD	FLAT:$L199203
$T199208 DD	019930520H
	DD	02H
	DD	FLAT:$T199211
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv132 = -36						; size = 4
tv72 = -32						; size = 4
$T199201 = -28						; size = 4
$T199198 = -24						; size = 4
$T199197 = -20						; size = 4
_pbh$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strTitle$ = 8						; size = 4
_strContent$ = 12					; size = 4
_ptAnchor$ = 16						; size = 4
_szIcon$ = 20						; size = 4
_unOptions$ = 24					; size = 4
_pParentWnd$ = 28					; size = 4
_strURL$ = 32						; size = 4
_unTimeout$ = 36					; size = 4
?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z PROC NEAR ; CBalloonHelp::LaunchBalloon

; 152  : {

  00660	55		 push	 ebp
  00661	8b ec		 mov	 ebp, esp
  00663	6a ff		 push	 -1
  00665	68 00 00 00 00	 push	 __ehhandler$?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z
  0066a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00670	50		 push	 eax
  00671	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00678	83 ec 18	 sub	 esp, 24			; 00000018H
  0067b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  :    CBalloonHelp* pbh = new CBalloonHelp;

  00682	68 e4 00 00 00	 push	 228			; 000000e4H
  00687	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0068c	89 45 e8	 mov	 DWORD PTR $T199198[ebp], eax
  0068f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00693	83 7d e8 00	 cmp	 DWORD PTR $T199198[ebp], 0
  00697	74 0d		 je	 SHORT $L199199
  00699	8b 4d e8	 mov	 ecx, DWORD PTR $T199198[ebp]
  0069c	e8 00 00 00 00	 call	 ??0CBalloonHelp@@QAE@XZ	; CBalloonHelp::CBalloonHelp
  006a1	89 45 e0	 mov	 DWORD PTR tv72[ebp], eax
  006a4	eb 07		 jmp	 SHORT $L199200
$L199199:
  006a6	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L199200:
  006ad	8b 45 e0	 mov	 eax, DWORD PTR tv72[ebp]
  006b0	89 45 ec	 mov	 DWORD PTR $T199197[ebp], eax
  006b3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  006b7	8b 4d ec	 mov	 ecx, DWORD PTR $T199197[ebp]
  006ba	89 4d f0	 mov	 DWORD PTR _pbh$[ebp], ecx

; 154  :    //if ( NULL != szIcon )
; 155  :    //{
; 156  :    //   CSize sizeIcon(max(::GetSystemMetrics(SM_CXSIZE), ::GetSystemMetrics(SM_CXSMICON)), max(::GetSystemMetrics(SM_CYSIZE), ::GetSystemMetrics(SM_CYSMICON)));
; 157  : 
; 158  : 	  //HBITMAP hIcon = LoadBitmap(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDB_BMPDrag));
; 159  :    //   if (NULL != hIcon)
; 160  : 		 // pbh->SetIcon(hIcon, RGB(255,255,255)); // bitmap, transparent color
; 161  : 	  //DeleteObject( hIcon );
; 162  :    //}
; 163  : 
; 164  :    pbh->Create(strTitle, strContent, ptAnchor, unOptions|unDELETE_THIS_ON_CLOSE, 
; 165  :                pParentWnd, strURL, unTimeout, NULL);

  006bd	6a 00		 push	 0
  006bf	8b 55 24	 mov	 edx, DWORD PTR _unTimeout$[ebp]
  006c2	52		 push	 edx
  006c3	51		 push	 ecx
  006c4	8b cc		 mov	 ecx, esp
  006c6	89 65 e4	 mov	 DWORD PTR $T199201[ebp], esp
  006c9	8d 45 20	 lea	 eax, DWORD PTR _strURL$[ebp]
  006cc	50		 push	 eax
  006cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  006d3	89 45 dc	 mov	 DWORD PTR tv132[ebp], eax
  006d6	8b 4d 1c	 mov	 ecx, DWORD PTR _pParentWnd$[ebp]
  006d9	51		 push	 ecx
  006da	8b 55 18	 mov	 edx, DWORD PTR _unOptions$[ebp]
  006dd	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  006e3	52		 push	 edx
  006e4	8b 45 10	 mov	 eax, DWORD PTR _ptAnchor$[ebp]
  006e7	50		 push	 eax
  006e8	8b 4d 0c	 mov	 ecx, DWORD PTR _strContent$[ebp]
  006eb	51		 push	 ecx
  006ec	8b 55 08	 mov	 edx, DWORD PTR _strTitle$[ebp]
  006ef	52		 push	 edx
  006f0	8b 4d f0	 mov	 ecx, DWORD PTR _pbh$[ebp]
  006f3	e8 00 00 00 00	 call	 ?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z ; CBalloonHelp::Create

; 166  : }

  006f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006ff	8d 4d 20	 lea	 ecx, DWORD PTR _strURL$[ebp]
  00702	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00708	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0070b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00712	8b e5		 mov	 esp, ebp
  00714	5d		 pop	 ebp
  00715	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L199202:
  00000	8d 4d 20	 lea	 ecx, DWORD PTR _strURL$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199203:
  00009	8b 45 e8	 mov	 eax, DWORD PTR $T199198[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00012	c3		 ret	 0
__ehhandler$?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199208
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?LaunchBalloon@CBalloonHelp@@SAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@PBDIPAVCWnd@@V23@I@Z ENDP ; CBalloonHelp::LaunchBalloon
PUBLIC	??_7CBalloonHelp@@6B@				; CBalloonHelp::`vftable'
PUBLIC	??_GCBalloonHelp@@UAEPAXI@Z			; CBalloonHelp::`scalar deleting destructor'
PUBLIC	??0CPoint@@QAE@HH@Z				; CPoint::CPoint
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	??_R1A@?0A@A@CObject@@8				; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk
PUBLIC	?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z	; CBalloonHelp::DrawNonClientArea
PUBLIC	?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z	; CBalloonHelp::DrawClientArea
PUBLIC	?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z ; CBalloonHelp::DrawHeader
PUBLIC	?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z ; CBalloonHelp::DrawContent
PUBLIC	??0CRgn@@QAE@XZ					; CRgn::CRgn
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	?PostNcDestroy@CBalloonHelp@@MAEXXZ		; CBalloonHelp::PostNcDestroy
PUBLIC	?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ ; CBalloonHelp::GetMessageMap
PUBLIC	?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z	; CBalloonHelp::KeyboardHookProc
PUBLIC	?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z		; CBalloonHelp::MouseHookProc
PUBLIC	?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z		; CBalloonHelp::CallWndRetProc
PUBLIC	??_R4CBalloonHelp@@6B@				; CBalloonHelp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBalloonHelp@@@8			; CBalloonHelp `RTTI Type Descriptor'
PUBLIC	??_R3CBalloonHelp@@8				; CBalloonHelp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBalloonHelp@@8				; CBalloonHelp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBalloonHelp@@8			; CBalloonHelp::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8 ; BHKeybHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,0)'
PUBLIC	??1CRgn@@UAE@XZ					; CRgn::~CRgn
PUBLIC	??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8	; BHKeybHookThunk<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8	; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,2)'
PUBLIC	??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8	; _ThunkImpl<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8 ; BHMouseHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,0)'
PUBLIC	??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8	; BHMouseHookThunk<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8	; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,2)'
PUBLIC	??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8 ; BHCallWndRetHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,0)'
PUBLIC	??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8 ; BHCallWndRetHookThunk<CBalloonHelp> `RTTI Type Descriptor'
PUBLIC	??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8	; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,2)'
EXTRN	??_ECBalloonHelp@@UAEPAXI@Z:NEAR		; CBalloonHelp::`vector deleting destructor'
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:NEAR ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:NEAR ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	??0CImageList@@QAE@XZ:NEAR			; CImageList::CImageList
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:NEAR
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	??1CImageList@@UAE@XZ:NEAR			; CImageList::~CImageList
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:NEAR		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:NEAR			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:NEAR ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:NEAR		; CWnd::get_accChildCount
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:NEAR ; CWnd::get_accChild
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDescription
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accRole
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:NEAR ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:NEAR ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:NEAR ; CWnd::get_accDefaultAction
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:NEAR	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:NEAR ; CWnd::accLocation
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:NEAR ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:NEAR	; CWnd::accHitTest
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:NEAR ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:NEAR ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:NEAR ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:NEAR	; CWnd::CreateAccessibleProxy
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	__imp__GetSysColor@4:NEAR
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:NEAR ; CWnd::GetRuntimeClass
EXTRN	??0CWnd@@QAE@XZ:NEAR				; CWnd::CWnd
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:NEAR ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	??1CWnd@@UAE@XZ:NEAR				; CWnd::~CWnd
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
xdata$x	SEGMENT
$T199225 DD	0ffffffffH
	DD	FLAT:$L199217
	DD	00H
	DD	FLAT:$L199218
	DD	01H
	DD	FLAT:$L199219
	DD	02H
	DD	FLAT:$L199220
	DD	03H
	DD	FLAT:$L199221
$T199223 DD	019930520H
	DD	05H
	DD	FLAT:$T199225
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CBalloonHelp@@6B@
CONST	SEGMENT
??_7CBalloonHelp@@6B@ DD FLAT:??_R4CBalloonHelp@@6B@	; CBalloonHelp::`vftable'
	DD	FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBalloonHelp@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CBalloonHelp@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z
	DD	FLAT:?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z
	DD	FLAT:?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z
	DD	FLAT:?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z
CONST	ENDS
;	COMDAT ??_R4CBalloonHelp@@6B@
rdata$r	SEGMENT
??_R4CBalloonHelp@@6B@ DD 00H				; CBalloonHelp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBalloonHelp@@@8
	DD	FLAT:??_R3CBalloonHelp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBalloonHelp@@@8
_DATA	SEGMENT
??_R0?AVCBalloonHelp@@@8 DD FLAT:??_7type_info@@6B@	; CBalloonHelp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBalloonHelp@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBalloonHelp@@8
rdata$r	SEGMENT
??_R3CBalloonHelp@@8 DD 00H				; CBalloonHelp::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CBalloonHelp@@8
rdata$r	ENDS
;	COMDAT ??_R2CBalloonHelp@@8
rdata$r	SEGMENT
??_R2CBalloonHelp@@8 DD FLAT:??_R1A@?0A@A@CBalloonHelp@@8 ; CBalloonHelp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CWnd@@8
	DD	FLAT:??_R1A@?0A@A@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
	DD	FLAT:??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8
	DD	FLAT:??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
	DD	FLAT:??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8
	DD	FLAT:??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
	DD	FLAT:??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8
	DD	FLAT:??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBalloonHelp@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBalloonHelp@@8 DD FLAT:??_R0?AVCBalloonHelp@@@8 ; CBalloonHelp::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@A@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FE@?0A@A@?$BHKeybHookThunk@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8 ; BHKeybHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,0)'
	DD	01H
	DD	054H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$BHKeybHookThunk@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; BHKeybHookThunk<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BHKeybHookThunk@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FE@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 ; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (84,-1,0,2)'
	DD	00H
	DD	054H
	DD	0ffffffffH
	DD	00H
	DD	02H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; _ThunkImpl<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_ThunkImpl@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FO@?0A@A@?$BHMouseHookThunk@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8 ; BHMouseHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,0)'
	DD	01H
	DD	05eH
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$BHMouseHookThunk@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; BHMouseHookThunk<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BHMouseHookThunk@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1FO@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 ; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (94,-1,0,2)'
	DD	00H
	DD	05eH
	DD	0ffffffffH
	DD	00H
	DD	02H
rdata$r	ENDS
;	COMDAT ??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1GI@?0A@A@?$BHCallWndRetHookThunk@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8 ; BHCallWndRetHookThunk<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,0)'
	DD	01H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8
_DATA	SEGMENT
??_R0?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@@8 DD FLAT:??_7type_info@@6B@ ; BHCallWndRetHookThunk<CBalloonHelp> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BHCallWndRetHookThunk@VCBalloonHelp@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8
rdata$r	SEGMENT
??_R1GI@?0A@1?$_ThunkImpl@VCBalloonHelp@@@@8 DD FLAT:??_R0?AV?$_ThunkImpl@VCBalloonHelp@@@@@8 ; _ThunkImpl<CBalloonHelp>::`RTTI Base Class Descriptor at (104,-1,0,2)'
	DD	00H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	02H
; Function compile flags: /Odt
rdata$r	ENDS
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T199216 = -44						; size = 8
$T199215 = -36						; size = 8
$T199214 = -28						; size = 8
_nTol$ = -20						; size = 4
_hUser32$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBalloonHelp@@QAE@XZ PROC NEAR			; CBalloonHelp::CBalloonHelp
; _this$ = ecx

; 193  : {

  00720	55		 push	 ebp
  00721	8b ec		 mov	 ebp, esp
  00723	6a ff		 push	 -1
  00725	68 00 00 00 00	 push	 __ehhandler$??0CBalloonHelp@@QAE@XZ
  0072a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00730	50		 push	 eax
  00731	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00738	83 ec 24	 sub	 esp, 36			; 00000024H
  0073b	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  0073e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00741	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  00746	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0074d	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00750	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBalloonHelp@@6B@
  00756	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00759	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0
  00760	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  00763	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0
  0076a	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0076d	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0
  00774	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00777	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0
  00781	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  00784	c7 82 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+132], 0
  0078e	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00791	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0
  0079b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0079e	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0
  007a8	68 00 00 00 00	 push	 OFFSET FLAT:$SG197827
  007ad	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  007b0	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  007b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  007bc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  007c0	68 00 00 00 00	 push	 OFFSET FLAT:$SG197828
  007c5	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  007c8	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  007ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  007d4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  007d8	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  007db	c7 82 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+152], 0
  007e5	6a 00		 push	 0
  007e7	6a 00		 push	 0
  007e9	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  007ec	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  007f2	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  007f7	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  007fa	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00800	e8 00 00 00 00	 call	 ??0CImageList@@QAE@XZ	; CImageList::CImageList
  00805	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00809	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0080c	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0
  00816	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00819	c7 81 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+176], 0
  00823	6a 18		 push	 24			; 00000018H
  00825	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0082b	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0082e	89 82 b4 00 00
	00		 mov	 DWORD PTR [edx+180], eax
  00834	6a 17		 push	 23			; 00000017H
  00836	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0083c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0083f	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax
  00845	6a 00		 push	 0
  00847	6a 00		 push	 0
  00849	6a 00		 push	 0
  0084b	6a 00		 push	 0
  0084d	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00850	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00856	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  0085b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0085e	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  00864	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  00869	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0086d	6a 00		 push	 0
  0086f	6a 00		 push	 0
  00871	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00874	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  0087a	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  0087f	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  00882	c7 82 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+220], 0
  0088c	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0088f	c7 80 e0 00 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+224], 3

; 194  :    // retrieve window animation API if available
; 195  :    HMODULE hUser32 = GetModuleHandle(_T("USER32.DLL"));

  00899	68 00 00 00 00	 push	 OFFSET FLAT:$SG197830
  0089e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  008a4	89 45 f0	 mov	 DWORD PTR _hUser32$[ebp], eax

; 196  :    // can't imagine why that would fail, but might as well *look* safe...  ;~)
; 197  :    if ( NULL != hUser32 )

  008a7	83 7d f0 00	 cmp	 DWORD PTR _hUser32$[ebp], 0
  008ab	74 17		 je	 SHORT $L197831

; 198  :       m_fnAnimateWindow = (FN_ANIMATE_WINDOW)GetProcAddress(hUser32, _T("AnimateWindow"));

  008ad	68 00 00 00 00	 push	 OFFSET FLAT:$SG197833
  008b2	8b 4d f0	 mov	 ecx, DWORD PTR _hUser32$[ebp]
  008b5	51		 push	 ecx
  008b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  008bc	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  008bf	89 42 74	 mov	 DWORD PTR [edx+116], eax

; 199  :    else

  008c2	eb 0a		 jmp	 SHORT $L197834
$L197831:

; 200  :       m_fnAnimateWindow = NULL;

  008c4	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  008c7	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0
$L197834:

; 201  : 
; 202  :    // get system tolerance values
; 203  :    int nTol = 0;

  008ce	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nTol$[ebp], 0

; 204  :    if ( ::SystemParametersInfo(SPI_GETMOUSEHOVERWIDTH, 0, &nTol, 0) && nTol > 0 )

  008d5	6a 00		 push	 0
  008d7	8d 4d ec	 lea	 ecx, DWORD PTR _nTol$[ebp]
  008da	51		 push	 ecx
  008db	6a 00		 push	 0
  008dd	6a 62		 push	 98			; 00000062H
  008df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
  008e5	85 c0		 test	 eax, eax
  008e7	74 12		 je	 SHORT $L197836
  008e9	83 7d ec 00	 cmp	 DWORD PTR _nTol$[ebp], 0
  008ed	7e 0c		 jle	 SHORT $L197836

; 205  :       m_nMouseMoveTolerance = nTol;

  008ef	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  008f2	8b 45 ec	 mov	 eax, DWORD PTR _nTol$[ebp]
  008f5	89 82 e0 00 00
	00		 mov	 DWORD PTR [edx+224], eax
$L197836:

; 206  : 
; 207  :    // setup hook procedures
; 208  :    BHKeybHookThunk<CBalloonHelp>::InitThunk((TMFP)KeyboardHookProc, this);

  008fb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T199214[ebp], OFFSET FLAT:?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z ; CBalloonHelp::KeyboardHookProc
  00902	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T199214[ebp+4], 0
  00909	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0090c	51		 push	 ecx
  0090d	8b 55 e8	 mov	 edx, DWORD PTR $T199214[ebp+4]
  00910	52		 push	 edx
  00911	8b 45 e4	 mov	 eax, DWORD PTR $T199214[ebp]
  00914	50		 push	 eax
  00915	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00918	83 c1 54	 add	 ecx, 84			; 00000054H
  0091b	e8 00 00 00 00	 call	 ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk

; 209  :    BHMouseHookThunk<CBalloonHelp>::InitThunk((TMFP)MouseHookProc, this);

  00920	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T199215[ebp], OFFSET FLAT:?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z ; CBalloonHelp::MouseHookProc
  00927	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T199215[ebp+4], 0
  0092e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00931	51		 push	 ecx
  00932	8b 55 e0	 mov	 edx, DWORD PTR $T199215[ebp+4]
  00935	52		 push	 edx
  00936	8b 45 dc	 mov	 eax, DWORD PTR $T199215[ebp]
  00939	50		 push	 eax
  0093a	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0093d	83 c1 5e	 add	 ecx, 94			; 0000005eH
  00940	e8 00 00 00 00	 call	 ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk

; 210  :    BHCallWndRetHookThunk<CBalloonHelp>::InitThunk((TMFP)CallWndRetProc, this);

  00945	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T199216[ebp], OFFSET FLAT:?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z ; CBalloonHelp::CallWndRetProc
  0094c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T199216[ebp+4], 0
  00953	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00956	51		 push	 ecx
  00957	8b 55 d8	 mov	 edx, DWORD PTR $T199216[ebp+4]
  0095a	52		 push	 edx
  0095b	8b 45 d4	 mov	 eax, DWORD PTR $T199216[ebp]
  0095e	50		 push	 eax
  0095f	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00962	83 c1 68	 add	 ecx, 104		; 00000068H
  00965	e8 00 00 00 00	 call	 ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ; _ThunkImpl<CBalloonHelp>::InitThunk

; 211  : }

  0096a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00971	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00974	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00977	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0097e	8b e5		 mov	 esp, ebp
  00980	5d		 pop	 ebp
  00981	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L199217:
  0001d	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e9 00 00 00 00	 jmp	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
$L199218:
  00025	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199219:
  00034	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0003d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199220:
  00043	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0004c	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L199221:
  00051	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  0005a	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$??0CBalloonHelp@@QAE@XZ:
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199223
  00064	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CBalloonHelp@@QAE@XZ ENDP				; CBalloonHelp::CBalloonHelp
PUBLIC	??1CBalloonHelp@@UAE@XZ				; CBalloonHelp::~CBalloonHelp
; Function compile flags: /Odt
;	COMDAT ??_GCBalloonHelp@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBalloonHelp@@UAEPAXI@Z PROC NEAR			; CBalloonHelp::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBalloonHelp@@UAE@XZ	; CBalloonHelp::~CBalloonHelp
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L197846
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L197846:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBalloonHelp@@UAEPAXI@Z ENDP			; CBalloonHelp::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
$T199245 DD	0ffffffffH
	DD	FLAT:$L199237
	DD	00H
	DD	FLAT:$L199238
	DD	01H
	DD	FLAT:$L199239
	DD	02H
	DD	FLAT:$L199240
	DD	03H
	DD	FLAT:$L199241
$T199243 DD	019930520H
	DD	05H
	DD	FLAT:$T199245
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv133 = -40						; size = 4
tv90 = -36						; size = 4
_this$ = -32						; size = 4
$T199234 = -28						; size = 4
$T199233 = -24						; size = 4
$T199230 = -20						; size = 4
$T199229 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBalloonHelp@@UAE@XZ PROC NEAR			; CBalloonHelp::~CBalloonHelp
; _this$ = ecx

; 214  : {

  00990	55		 push	 ebp
  00991	8b ec		 mov	 ebp, esp
  00993	6a ff		 push	 -1
  00995	68 00 00 00 00	 push	 __ehhandler$??1CBalloonHelp@@UAE@XZ
  0099a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  009a0	50		 push	 eax
  009a1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  009a8	83 ec 1c	 sub	 esp, 28			; 0000001cH
  009ab	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  009ae	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  009b1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBalloonHelp@@6B@
  009b7	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 215  :    if ( NULL != m_pTitleFont )

  009be	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  009c1	83 b9 ac 00 00
	00 00		 cmp	 DWORD PTR [ecx+172], 0
  009c8	74 31		 je	 SHORT $L197850

; 216  :       delete m_pTitleFont;

  009ca	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  009cd	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  009d3	89 45 ec	 mov	 DWORD PTR $T199230[ebp], eax
  009d6	8b 4d ec	 mov	 ecx, DWORD PTR $T199230[ebp]
  009d9	89 4d f0	 mov	 DWORD PTR $T199229[ebp], ecx
  009dc	83 7d f0 00	 cmp	 DWORD PTR $T199229[ebp], 0
  009e0	74 12		 je	 SHORT $L199231
  009e2	6a 01		 push	 1
  009e4	8b 55 f0	 mov	 edx, DWORD PTR $T199229[ebp]
  009e7	8b 02		 mov	 eax, DWORD PTR [edx]
  009e9	8b 4d f0	 mov	 ecx, DWORD PTR $T199229[ebp]
  009ec	ff 50 04	 call	 DWORD PTR [eax+4]
  009ef	89 45 dc	 mov	 DWORD PTR tv90[ebp], eax
  009f2	eb 07		 jmp	 SHORT $L197850
$L199231:
  009f4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$L197850:

; 217  :    m_pTitleFont = NULL;

  009fb	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  009fe	c7 81 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+172], 0

; 218  :    if ( NULL != m_pContentFont )

  00a08	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00a0b	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00a12	74 31		 je	 SHORT $L197853

; 219  :       delete m_pContentFont;

  00a14	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00a17	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00a1d	89 4d e4	 mov	 DWORD PTR $T199234[ebp], ecx
  00a20	8b 55 e4	 mov	 edx, DWORD PTR $T199234[ebp]
  00a23	89 55 e8	 mov	 DWORD PTR $T199233[ebp], edx
  00a26	83 7d e8 00	 cmp	 DWORD PTR $T199233[ebp], 0
  00a2a	74 12		 je	 SHORT $L199235
  00a2c	6a 01		 push	 1
  00a2e	8b 45 e8	 mov	 eax, DWORD PTR $T199233[ebp]
  00a31	8b 10		 mov	 edx, DWORD PTR [eax]
  00a33	8b 4d e8	 mov	 ecx, DWORD PTR $T199233[ebp]
  00a36	ff 52 04	 call	 DWORD PTR [edx+4]
  00a39	89 45 d8	 mov	 DWORD PTR tv133[ebp], eax
  00a3c	eb 07		 jmp	 SHORT $L197853
$L199235:
  00a3e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L197853:

; 220  :    m_pContentFont = NULL;

  00a45	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00a48	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 221  : }

  00a52	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00a56	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a59	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  00a5f	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  00a64	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00a68	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a6b	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00a71	e8 00 00 00 00	 call	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
  00a76	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00a7a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a7d	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00a83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00a89	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00a8d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a90	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00a96	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00a9c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00aa3	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00aa6	e8 00 00 00 00	 call	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
  00aab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00aae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00ab5	8b e5		 mov	 esp, ebp
  00ab7	5d		 pop	 ebp
  00ab8	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L199237:
  00069	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e9 00 00 00 00	 jmp	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
$L199238:
  00071	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0007a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199239:
  00080	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00089	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199240:
  0008f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00098	e9 00 00 00 00	 jmp	 ??1CImageList@@UAE@XZ	; CImageList::~CImageList
$L199241:
  0009d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  000a6	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$??1CBalloonHelp@@UAE@XZ:
  000ab	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199243
  000b0	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CBalloonHelp@@UAE@XZ ENDP				; CBalloonHelp::~CBalloonHelp
PUBLIC	?SetTitleFont@CBalloonHelp@@QAEXPAVCFont@@@Z	; CBalloonHelp::SetTitleFont
PUBLIC	?PositionWindow@CBalloonHelp@@IAEXXZ		; CBalloonHelp::PositionWindow
; Function compile flags: /Odt
_TEXT	SEGMENT
tv73 = -16						; size = 4
_this$ = -12						; size = 4
$T199248 = -8						; size = 4
$T199247 = -4						; size = 4
_pFont$ = 8						; size = 4
?SetTitleFont@CBalloonHelp@@QAEXPAVCFont@@@Z PROC NEAR	; CBalloonHelp::SetTitleFont
; _this$ = ecx

; 226  : {

  00ac0	55		 push	 ebp
  00ac1	8b ec		 mov	 ebp, esp
  00ac3	83 ec 10	 sub	 esp, 16			; 00000010H
  00ac6	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 227  :    if ( NULL != m_pTitleFont )

  00ac9	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00acc	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  00ad3	74 31		 je	 SHORT $L197860

; 228  :       delete m_pTitleFont;

  00ad5	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad8	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00ade	89 55 f8	 mov	 DWORD PTR $T199248[ebp], edx
  00ae1	8b 45 f8	 mov	 eax, DWORD PTR $T199248[ebp]
  00ae4	89 45 fc	 mov	 DWORD PTR $T199247[ebp], eax
  00ae7	83 7d fc 00	 cmp	 DWORD PTR $T199247[ebp], 0
  00aeb	74 12		 je	 SHORT $L199249
  00aed	6a 01		 push	 1
  00aef	8b 4d fc	 mov	 ecx, DWORD PTR $T199247[ebp]
  00af2	8b 11		 mov	 edx, DWORD PTR [ecx]
  00af4	8b 4d fc	 mov	 ecx, DWORD PTR $T199247[ebp]
  00af7	ff 52 04	 call	 DWORD PTR [edx+4]
  00afa	89 45 f0	 mov	 DWORD PTR tv73[ebp], eax
  00afd	eb 07		 jmp	 SHORT $L197860
$L199249:
  00aff	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L197860:

; 229  :    m_pTitleFont = pFont;

  00b06	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00b09	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  00b0c	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 230  :    // if already visible, resize & move
; 231  :    if ( NULL != m_hWnd )

  00b12	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00b15	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00b19	74 08		 je	 SHORT $L197859

; 232  :       PositionWindow();

  00b1b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1e	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197859:

; 233  : }

  00b23	8b e5		 mov	 esp, ebp
  00b25	5d		 pop	 ebp
  00b26	c2 04 00	 ret	 4
?SetTitleFont@CBalloonHelp@@QAEXPAVCFont@@@Z ENDP	; CBalloonHelp::SetTitleFont
_TEXT	ENDS
PUBLIC	?SetContentFont@CBalloonHelp@@QAEXPAVCFont@@@Z	; CBalloonHelp::SetContentFont
; Function compile flags: /Odt
_TEXT	SEGMENT
tv73 = -16						; size = 4
_this$ = -12						; size = 4
$T199253 = -8						; size = 4
$T199252 = -4						; size = 4
_pFont$ = 8						; size = 4
?SetContentFont@CBalloonHelp@@QAEXPAVCFont@@@Z PROC NEAR ; CBalloonHelp::SetContentFont
; _this$ = ecx

; 237  : {

  00b30	55		 push	 ebp
  00b31	8b ec		 mov	 ebp, esp
  00b33	83 ec 10	 sub	 esp, 16			; 00000010H
  00b36	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 238  :    if ( NULL != m_pContentFont )

  00b39	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00b3c	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00b43	74 31		 je	 SHORT $L197868

; 239  :       delete m_pContentFont;

  00b45	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b48	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00b4e	89 55 f8	 mov	 DWORD PTR $T199253[ebp], edx
  00b51	8b 45 f8	 mov	 eax, DWORD PTR $T199253[ebp]
  00b54	89 45 fc	 mov	 DWORD PTR $T199252[ebp], eax
  00b57	83 7d fc 00	 cmp	 DWORD PTR $T199252[ebp], 0
  00b5b	74 12		 je	 SHORT $L199254
  00b5d	6a 01		 push	 1
  00b5f	8b 4d fc	 mov	 ecx, DWORD PTR $T199252[ebp]
  00b62	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b64	8b 4d fc	 mov	 ecx, DWORD PTR $T199252[ebp]
  00b67	ff 52 04	 call	 DWORD PTR [edx+4]
  00b6a	89 45 f0	 mov	 DWORD PTR tv73[ebp], eax
  00b6d	eb 07		 jmp	 SHORT $L197868
$L199254:
  00b6f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L197868:

; 240  :    m_pContentFont = pFont;

  00b76	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00b79	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  00b7c	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx

; 241  :    // if already visible, resize & move
; 242  :    if ( NULL != m_hWnd )

  00b82	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00b85	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00b89	74 08		 je	 SHORT $L197867

; 243  :       PositionWindow();

  00b8b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b8e	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197867:

; 244  : }

  00b93	8b e5		 mov	 esp, ebp
  00b95	5d		 pop	 ebp
  00b96	c2 04 00	 ret	 4
?SetContentFont@CBalloonHelp@@QAEXPAVCFont@@@Z ENDP	; CBalloonHelp::SetContentFont
_TEXT	ENDS
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z	; CBalloonHelp::SetIcon
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z	; CBalloonHelp::SetIcon
EXTRN	__imp__GetIconInfo@8:NEAR
EXTRN	?DeleteImageList@CImageList@@QAEHXZ:NEAR	; CImageList::DeleteImageList
EXTRN	__imp__DeleteObject@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
_iconinfo$ = -20					; size = 20
_hIcon$ = 8						; size = 4
?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 248  : {

  00ba0	55		 push	 ebp
  00ba1	8b ec		 mov	 ebp, esp
  00ba3	83 ec 18	 sub	 esp, 24			; 00000018H
  00ba6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 249  :    if ( NULL != m_ilIcon.m_hImageList )

  00ba9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00bac	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00bb3	74 0e		 je	 SHORT $L197876

; 250  :       m_ilIcon.DeleteImageList();

  00bb5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb8	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00bbe	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList
$L197876:

; 251  :    ICONINFO iconinfo;
; 252  :    if ( NULL != hIcon && ::GetIconInfo(hIcon, &iconinfo) )

  00bc3	83 7d 08 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  00bc7	74 36		 je	 SHORT $L197878
  00bc9	8d 4d ec	 lea	 ecx, DWORD PTR _iconinfo$[ebp]
  00bcc	51		 push	 ecx
  00bcd	8b 55 08	 mov	 edx, DWORD PTR _hIcon$[ebp]
  00bd0	52		 push	 edx
  00bd1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetIconInfo@8
  00bd7	85 c0		 test	 eax, eax
  00bd9	74 24		 je	 SHORT $L197878

; 253  :    {
; 254  :       SetIcon(iconinfo.hbmColor, iconinfo.hbmMask);

  00bdb	8b 45 f8	 mov	 eax, DWORD PTR _iconinfo$[ebp+12]
  00bde	50		 push	 eax
  00bdf	8b 4d fc	 mov	 ecx, DWORD PTR _iconinfo$[ebp+16]
  00be2	51		 push	 ecx
  00be3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00be6	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z ; CBalloonHelp::SetIcon

; 255  :       ::DeleteObject(iconinfo.hbmColor);

  00beb	8b 55 fc	 mov	 edx, DWORD PTR _iconinfo$[ebp+16]
  00bee	52		 push	 edx
  00bef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 256  :       ::DeleteObject(iconinfo.hbmMask);

  00bf5	8b 45 f8	 mov	 eax, DWORD PTR _iconinfo$[ebp+12]
  00bf8	50		 push	 eax
  00bf9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L197878:

; 257  :    }
; 258  :    // if already visible, resize & move (icon size may have changed)
; 259  :    if ( NULL != m_hWnd )

  00bff	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c02	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00c06	74 08		 je	 SHORT $L197875

; 260  :       PositionWindow();

  00c08	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c0b	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197875:

; 261  : }

  00c10	8b e5		 mov	 esp, ebp
  00c12	5d		 pop	 ebp
  00c13	c2 04 00	 ret	 4
?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z ENDP		; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	??BCDC@@QBEPAUHDC__@@XZ				; CDC::operator HDC__ *
PUBLIC	?CreateCompatibleDC@CDC@@QAEHPAV1@@Z		; CDC::CreateCompatibleDC
PUBLIC	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z	; CDC::SelectObject
PUBLIC	?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z		; CDC::StretchBlt
PUBLIC	??0CBitmap@@QAE@XZ				; CBitmap::CBitmap
PUBLIC	?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap
PUBLIC	??BCBitmap@@QBEPAUHBITMAP__@@XZ			; CBitmap::operator HBITMAP__ *
PUBLIC	?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z ; CBalloonHelp::SetIconScaled
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z	; CBalloonHelp::SetIcon
PUBLIC	??1CBitmap@@UAE@XZ				; CBitmap::~CBitmap
EXTRN	__imp__DrawIconEx@36:NEAR
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:NEAR		; CDC::Attach
EXTRN	?Detach@CDC@@QAEPAUHDC__@@XZ:NEAR		; CDC::Detach
EXTRN	??0CDC@@QAE@XZ:NEAR				; CDC::CDC
EXTRN	?SetStretchBltMode@CDC@@QAEHH@Z:NEAR		; CDC::SetStretchBltMode
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__ReleaseDC@8:NEAR
EXTRN	__imp__GetObjectA@12:NEAR
EXTRN	?FillSolidRect@CDC@@QAEXHHHHK@Z:NEAR		; CDC::FillSolidRect
EXTRN	??1CDC@@UAE@XZ:NEAR				; CDC::~CDC
xdata$x	SEGMENT
$T199266 DD	0ffffffffH
	DD	FLAT:$L199258
	DD	00H
	DD	FLAT:$L199259
	DD	01H
	DD	FLAT:$L199260
	DD	02H
	DD	FLAT:$L199261
	DD	03H
	DD	FLAT:$L199262
$T199264 DD	019930520H
	DD	05H
	DD	FLAT:$T199266
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -132						; size = 4
_bmpIcon$197894 = -128					; size = 8
_pbmpOld1$197896 = -120					; size = 4
_bmpIconScaled$197895 = -116				; size = 8
_pbmpOld2$197897 = -108					; size = 4
_dcTmp2$197893 = -104					; size = 16
_dc$197891 = -88					; size = 16
_dcTmp1$197892 = -72					; size = 16
_bm$197888 = -56					; size = 24
_iconinfo$ = -32					; size = 20
__$EHRec$ = -12						; size = 12
_hIcon$ = 8						; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z PROC NEAR ; CBalloonHelp::SetIconScaled
; _this$ = ecx

; 265  : {

  00c20	55		 push	 ebp
  00c21	8b ec		 mov	 ebp, esp
  00c23	6a ff		 push	 -1
  00c25	68 00 00 00 00	 push	 __ehhandler$?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z
  00c2a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00c30	50		 push	 eax
  00c31	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00c38	83 ec 78	 sub	 esp, 120		; 00000078H
  00c3b	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 266  :    // i now have two device contexts and two bitmaps.
; 267  :    // i will select a bitmap in each device context,
; 268  :    // draw the icon into the first one,
; 269  :    // scale it into the second one,
; 270  :    // and set the second one as the balloon icon.
; 271  :    // This is a rather long process to get a scaled icon,
; 272  :    // but ensures maximum compatibility between different
; 273  :    // versions of Windows, while producing the best possible
; 274  :    // results on each version (quite good in WinNT and better, sorta ok in Win9x).
; 275  :    ICONINFO iconinfo;
; 276  :    if ( NULL != hIcon && ::GetIconInfo(hIcon, &iconinfo) )

  00c41	83 7d 08 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  00c45	0f 84 f2 01 00
	00		 je	 $L197885
  00c4b	8d 45 e0	 lea	 eax, DWORD PTR _iconinfo$[ebp]
  00c4e	50		 push	 eax
  00c4f	8b 4d 08	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  00c52	51		 push	 ecx
  00c53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetIconInfo@8
  00c59	85 c0		 test	 eax, eax
  00c5b	0f 84 dc 01 00
	00		 je	 $L197885

; 277  :    {
; 278  :       BITMAP bm;
; 279  :       if (::GetObject(iconinfo.hbmColor, sizeof(bm),(LPVOID)&bm))

  00c61	8d 55 c8	 lea	 edx, DWORD PTR _bm$197888[ebp]
  00c64	52		 push	 edx
  00c65	6a 18		 push	 24			; 00000018H
  00c67	8b 45 f0	 mov	 eax, DWORD PTR _iconinfo$[ebp+16]
  00c6a	50		 push	 eax
  00c6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  00c71	85 c0		 test	 eax, eax
  00c73	0f 84 b0 01 00
	00		 je	 $L197890

; 280  :       {
; 281  :          CDC dc;

  00c79	8d 4d a8	 lea	 ecx, DWORD PTR _dc$197891[ebp]
  00c7c	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  00c81	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 282  :          CDC dcTmp1;

  00c88	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00c8b	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  00c90	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 283  :          CDC dcTmp2;

  00c94	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00c97	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC
  00c9c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 284  :          CBitmap bmpIcon;

  00ca0	8d 4d 80	 lea	 ecx, DWORD PTR _bmpIcon$197894[ebp]
  00ca3	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00ca8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 285  :          CBitmap bmpIconScaled;

  00cac	8d 4d 8c	 lea	 ecx, DWORD PTR _bmpIconScaled$197895[ebp]
  00caf	e8 00 00 00 00	 call	 ??0CBitmap@@QAE@XZ	; CBitmap::CBitmap
  00cb4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 286  :          dc.Attach(::GetDC(NULL));

  00cb8	6a 00		 push	 0
  00cba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00cc0	50		 push	 eax
  00cc1	8d 4d a8	 lea	 ecx, DWORD PTR _dc$197891[ebp]
  00cc4	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach

; 287  :          dcTmp1.CreateCompatibleDC(&dc);

  00cc9	8d 4d a8	 lea	 ecx, DWORD PTR _dc$197891[ebp]
  00ccc	51		 push	 ecx
  00ccd	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00cd0	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 288  :          dcTmp2.CreateCompatibleDC(&dc);

  00cd5	8d 55 a8	 lea	 edx, DWORD PTR _dc$197891[ebp]
  00cd8	52		 push	 edx
  00cd9	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00cdc	e8 00 00 00 00	 call	 ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ; CDC::CreateCompatibleDC

; 289  :          bmpIcon.CreateCompatibleBitmap(&dc, bm.bmWidth, bm.bmHeight);

  00ce1	8b 45 d0	 mov	 eax, DWORD PTR _bm$197888[ebp+8]
  00ce4	50		 push	 eax
  00ce5	8b 4d cc	 mov	 ecx, DWORD PTR _bm$197888[ebp+4]
  00ce8	51		 push	 ecx
  00ce9	8d 55 a8	 lea	 edx, DWORD PTR _dc$197891[ebp]
  00cec	52		 push	 edx
  00ced	8d 4d 80	 lea	 ecx, DWORD PTR _bmpIcon$197894[ebp]
  00cf0	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 290  :          bmpIconScaled.CreateCompatibleBitmap(&dc, cx, cy);

  00cf5	8b 45 10	 mov	 eax, DWORD PTR _cy$[ebp]
  00cf8	50		 push	 eax
  00cf9	8b 4d 0c	 mov	 ecx, DWORD PTR _cx$[ebp]
  00cfc	51		 push	 ecx
  00cfd	8d 55 a8	 lea	 edx, DWORD PTR _dc$197891[ebp]
  00d00	52		 push	 edx
  00d01	8d 4d 8c	 lea	 ecx, DWORD PTR _bmpIconScaled$197895[ebp]
  00d04	e8 00 00 00 00	 call	 ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 291  :          ::ReleaseDC(NULL, dc.Detach());

  00d09	8d 4d a8	 lea	 ecx, DWORD PTR _dc$197891[ebp]
  00d0c	e8 00 00 00 00	 call	 ?Detach@CDC@@QAEPAUHDC__@@XZ ; CDC::Detach
  00d11	50		 push	 eax
  00d12	6a 00		 push	 0
  00d14	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 292  : 
; 293  :          CBitmap* pbmpOld1 = dcTmp1.SelectObject(&bmpIcon);

  00d1a	8d 45 80	 lea	 eax, DWORD PTR _bmpIcon$197894[ebp]
  00d1d	50		 push	 eax
  00d1e	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00d21	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  00d26	89 45 88	 mov	 DWORD PTR _pbmpOld1$197896[ebp], eax

; 294  :          CBitmap* pbmpOld2 = dcTmp2.SelectObject(&bmpIconScaled);

  00d29	8d 4d 8c	 lea	 ecx, DWORD PTR _bmpIconScaled$197895[ebp]
  00d2c	51		 push	 ecx
  00d2d	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00d30	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
  00d35	89 45 94	 mov	 DWORD PTR _pbmpOld2$197897[ebp], eax

; 295  :          dcTmp1.FillSolidRect(0,0,bm.bmWidth,bm.bmHeight, m_crBackground);

  00d38	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00d3e	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00d44	50		 push	 eax
  00d45	8b 4d d0	 mov	 ecx, DWORD PTR _bm$197888[ebp+8]
  00d48	51		 push	 ecx
  00d49	8b 55 cc	 mov	 edx, DWORD PTR _bm$197888[ebp+4]
  00d4c	52		 push	 edx
  00d4d	6a 00		 push	 0
  00d4f	6a 00		 push	 0
  00d51	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00d54	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXHHHHK@Z ; CDC::FillSolidRect

; 296  :          ::DrawIconEx(dcTmp1, 0,0,hIcon,bm.bmWidth,bm.bmHeight,0,NULL,DI_NORMAL);

  00d59	6a 03		 push	 3
  00d5b	6a 00		 push	 0
  00d5d	6a 00		 push	 0
  00d5f	8b 45 d0	 mov	 eax, DWORD PTR _bm$197888[ebp+8]
  00d62	50		 push	 eax
  00d63	8b 4d cc	 mov	 ecx, DWORD PTR _bm$197888[ebp+4]
  00d66	51		 push	 ecx
  00d67	8b 55 08	 mov	 edx, DWORD PTR _hIcon$[ebp]
  00d6a	52		 push	 edx
  00d6b	6a 00		 push	 0
  00d6d	6a 00		 push	 0
  00d6f	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00d72	e8 00 00 00 00	 call	 ??BCDC@@QBEPAUHDC__@@XZ	; CDC::operator HDC__ *
  00d77	50		 push	 eax
  00d78	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawIconEx@36

; 297  :          dcTmp2.SetStretchBltMode(HALFTONE);

  00d7e	6a 04		 push	 4
  00d80	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00d83	e8 00 00 00 00	 call	 ?SetStretchBltMode@CDC@@QAEHH@Z ; CDC::SetStretchBltMode

; 298  :          dcTmp2.StretchBlt(0,0,cx,cy,&dcTmp1, 0,0,bm.bmWidth,bm.bmHeight,SRCCOPY);

  00d88	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00d8d	8b 45 d0	 mov	 eax, DWORD PTR _bm$197888[ebp+8]
  00d90	50		 push	 eax
  00d91	8b 4d cc	 mov	 ecx, DWORD PTR _bm$197888[ebp+4]
  00d94	51		 push	 ecx
  00d95	6a 00		 push	 0
  00d97	6a 00		 push	 0
  00d99	8d 55 b8	 lea	 edx, DWORD PTR _dcTmp1$197892[ebp]
  00d9c	52		 push	 edx
  00d9d	8b 45 10	 mov	 eax, DWORD PTR _cy$[ebp]
  00da0	50		 push	 eax
  00da1	8b 4d 0c	 mov	 ecx, DWORD PTR _cx$[ebp]
  00da4	51		 push	 ecx
  00da5	6a 00		 push	 0
  00da7	6a 00		 push	 0
  00da9	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00dac	e8 00 00 00 00	 call	 ?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z ; CDC::StretchBlt

; 299  :          dcTmp1.SelectObject(pbmpOld1);

  00db1	8b 55 88	 mov	 edx, DWORD PTR _pbmpOld1$197896[ebp]
  00db4	52		 push	 edx
  00db5	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00db8	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 300  :          dcTmp2.SelectObject(pbmpOld2);

  00dbd	8b 45 94	 mov	 eax, DWORD PTR _pbmpOld2$197897[ebp]
  00dc0	50		 push	 eax
  00dc1	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00dc4	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 301  : 
; 302  :          SetIcon(bmpIconScaled, m_crBackground);

  00dc9	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00dcf	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00dd5	52		 push	 edx
  00dd6	8d 4d 8c	 lea	 ecx, DWORD PTR _bmpIconScaled$197895[ebp]
  00dd9	e8 00 00 00 00	 call	 ??BCBitmap@@QBEPAUHBITMAP__@@XZ ; CBitmap::operator HBITMAP__ *
  00dde	50		 push	 eax
  00ddf	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00de5	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z ; CBalloonHelp::SetIcon

; 303  :       }

  00dea	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00dee	8d 4d 8c	 lea	 ecx, DWORD PTR _bmpIconScaled$197895[ebp]
  00df1	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  00df6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00dfa	8d 4d 80	 lea	 ecx, DWORD PTR _bmpIcon$197894[ebp]
  00dfd	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  00e02	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00e06	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  00e09	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  00e0e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00e12	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  00e15	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  00e1a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00e21	8d 4d a8	 lea	 ecx, DWORD PTR _dc$197891[ebp]
  00e24	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L197890:

; 304  :       ::DeleteObject(iconinfo.hbmColor);

  00e29	8b 45 f0	 mov	 eax, DWORD PTR _iconinfo$[ebp+16]
  00e2c	50		 push	 eax
  00e2d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 305  :       ::DeleteObject(iconinfo.hbmMask);

  00e33	8b 4d ec	 mov	 ecx, DWORD PTR _iconinfo$[ebp+12]
  00e36	51		 push	 ecx
  00e37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L197885:

; 306  :    }
; 307  : }

  00e3d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00e40	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00e47	8b e5		 mov	 esp, ebp
  00e49	5d		 pop	 ebp
  00e4a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L199258:
  000b5	8d 4d a8	 lea	 ecx, DWORD PTR _dc$197891[ebp]
  000b8	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L199259:
  000bd	8d 4d b8	 lea	 ecx, DWORD PTR _dcTmp1$197892[ebp]
  000c0	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L199260:
  000c5	8d 4d 98	 lea	 ecx, DWORD PTR _dcTmp2$197893[ebp]
  000c8	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
$L199261:
  000cd	8d 4d 80	 lea	 ecx, DWORD PTR _bmpIcon$197894[ebp]
  000d0	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
$L199262:
  000d5	8d 4d 8c	 lea	 ecx, DWORD PTR _bmpIconScaled$197895[ebp]
  000d8	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__ehhandler$?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z:
  000dd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199264
  000e2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetIconScaled@CBalloonHelp@@QAEXPAUHICON__@@HH@Z ENDP	; CBalloonHelp::SetIconScaled
PUBLIC	?Add@CImageList@@QAEHPAVCBitmap@@K@Z		; CImageList::Add
PUBLIC	?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z	; CBitmap::FromHandle
EXTRN	?Create@CImageList@@QAEHHHIHH@Z:NEAR		; CImageList::Create
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -28						; size = 4
_bm$197906 = -24					; size = 24
_hBitmap$ = 8						; size = 4
_crMask$ = 12						; size = 4
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 311  : {

  00e50	55		 push	 ebp
  00e51	8b ec		 mov	 ebp, esp
  00e53	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00e56	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 312  :    if ( NULL != m_ilIcon.m_hImageList )

  00e59	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00e5c	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00e63	74 0e		 je	 SHORT $L197904

; 313  :       m_ilIcon.DeleteImageList();

  00e65	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e68	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00e6e	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList
$L197904:

; 314  : 
; 315  :    if ( NULL != hBitmap )

  00e73	83 7d 08 00	 cmp	 DWORD PTR _hBitmap$[ebp], 0
  00e77	74 4c		 je	 SHORT $L197905

; 316  :    {
; 317  :       BITMAP bm;
; 318  :       if (::GetObject(hBitmap, sizeof(bm),(LPVOID)&bm))

  00e79	8d 4d e8	 lea	 ecx, DWORD PTR _bm$197906[ebp]
  00e7c	51		 push	 ecx
  00e7d	6a 18		 push	 24			; 00000018H
  00e7f	8b 55 08	 mov	 edx, DWORD PTR _hBitmap$[ebp]
  00e82	52		 push	 edx
  00e83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  00e89	85 c0		 test	 eax, eax
  00e8b	74 38		 je	 SHORT $L197905

; 319  :       {
; 320  :          m_ilIcon.Create(bm.bmWidth, bm.bmHeight, ILC_COLOR24|ILC_MASK,1,0);

  00e8d	6a 00		 push	 0
  00e8f	6a 01		 push	 1
  00e91	6a 19		 push	 25			; 00000019H
  00e93	8b 45 f0	 mov	 eax, DWORD PTR _bm$197906[ebp+8]
  00e96	50		 push	 eax
  00e97	8b 4d ec	 mov	 ecx, DWORD PTR _bm$197906[ebp+4]
  00e9a	51		 push	 ecx
  00e9b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e9e	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00ea4	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 321  :          m_ilIcon.Add(CBitmap::FromHandle(hBitmap), crMask);

  00ea9	8b 55 0c	 mov	 edx, DWORD PTR _crMask$[ebp]
  00eac	52		 push	 edx
  00ead	8b 45 08	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  00eb0	50		 push	 eax
  00eb1	e8 00 00 00 00	 call	 ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ; CBitmap::FromHandle
  00eb6	50		 push	 eax
  00eb7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00eba	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00ec0	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@K@Z ; CImageList::Add
$L197905:

; 322  :       }
; 323  :    }
; 324  :    // if already visible, resize & move (icon size may have changed)
; 325  :    if ( NULL != m_hWnd )

  00ec5	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec8	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00ecc	74 08		 je	 SHORT $L197903

; 326  :       PositionWindow();

  00ece	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ed1	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197903:

; 327  : }

  00ed6	8b e5		 mov	 esp, ebp
  00ed8	5d		 pop	 ebp
  00ed9	c2 08 00	 ret	 8
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@K@Z ENDP	; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	?Add@CImageList@@QAEHPAVCBitmap@@0@Z		; CImageList::Add
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -28						; size = 4
_bm$ = -24						; size = 24
_hBitmap$ = 8						; size = 4
_hMask$ = 12						; size = 4
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 331  : {

  00ee0	55		 push	 ebp
  00ee1	8b ec		 mov	 ebp, esp
  00ee3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00ee6	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 332  :    if ( NULL != m_ilIcon.m_hImageList )

  00ee9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00eec	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00ef3	74 0e		 je	 SHORT $L197915

; 333  :       m_ilIcon.DeleteImageList();

  00ef5	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef8	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00efe	e8 00 00 00 00	 call	 ?DeleteImageList@CImageList@@QAEHXZ ; CImageList::DeleteImageList
$L197915:

; 334  : 
; 335  :    ASSERT(NULL != hBitmap);
; 336  :    ASSERT(NULL != hMask);
; 337  : 
; 338  :    BITMAP bm;
; 339  :    if (::GetObject(hBitmap, sizeof(bm),(LPVOID)&bm))

  00f03	8d 4d e8	 lea	 ecx, DWORD PTR _bm$[ebp]
  00f06	51		 push	 ecx
  00f07	6a 18		 push	 24			; 00000018H
  00f09	8b 55 08	 mov	 edx, DWORD PTR _hBitmap$[ebp]
  00f0c	52		 push	 edx
  00f0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  00f13	85 c0		 test	 eax, eax
  00f15	74 3e		 je	 SHORT $L197920

; 340  :    {
; 341  :       m_ilIcon.Create(bm.bmWidth, bm.bmHeight, ILC_COLOR24|ILC_MASK,1,0);

  00f17	6a 00		 push	 0
  00f19	6a 01		 push	 1
  00f1b	6a 19		 push	 25			; 00000019H
  00f1d	8b 45 f0	 mov	 eax, DWORD PTR _bm$[ebp+8]
  00f20	50		 push	 eax
  00f21	8b 4d ec	 mov	 ecx, DWORD PTR _bm$[ebp+4]
  00f24	51		 push	 ecx
  00f25	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f28	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00f2e	e8 00 00 00 00	 call	 ?Create@CImageList@@QAEHHHIHH@Z ; CImageList::Create

; 342  :       m_ilIcon.Add(CBitmap::FromHandle(hBitmap), CBitmap::FromHandle(hMask));

  00f33	8b 55 0c	 mov	 edx, DWORD PTR _hMask$[ebp]
  00f36	52		 push	 edx
  00f37	e8 00 00 00 00	 call	 ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ; CBitmap::FromHandle
  00f3c	50		 push	 eax
  00f3d	8b 45 08	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  00f40	50		 push	 eax
  00f41	e8 00 00 00 00	 call	 ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ; CBitmap::FromHandle
  00f46	50		 push	 eax
  00f47	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f4a	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00f50	e8 00 00 00 00	 call	 ?Add@CImageList@@QAEHPAVCBitmap@@0@Z ; CImageList::Add
$L197920:

; 343  :    }
; 344  :    // if already visible, resize & move (icon size may have changed)
; 345  :    if ( NULL != m_hWnd )

  00f55	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f58	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00f5c	74 08		 je	 SHORT $L197914

; 346  :       PositionWindow();

  00f5e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f61	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197914:

; 347  : }

  00f66	8b e5		 mov	 esp, ebp
  00f68	5d		 pop	 ebp
  00f69	c2 08 00	 ret	 8
?SetIcon@CBalloonHelp@@QAEXPAUHBITMAP__@@0@Z ENDP	; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	?GetImageCount@CImageList@@QBEHXZ		; CImageList::GetImageCount
PUBLIC	?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z	; CImageList::ExtractIconA
PUBLIC	?SetIcon@CBalloonHelp@@QAEXPAVCImageList@@H@Z	; CBalloonHelp::SetIcon
EXTRN	__imp__DestroyIcon@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hIcon$ = -4						; size = 4
_pImageList$ = 8					; size = 4
_nIconIndex$ = 12					; size = 4
?SetIcon@CBalloonHelp@@QAEXPAVCImageList@@H@Z PROC NEAR	; CBalloonHelp::SetIcon
; _this$ = ecx

; 351  : {

  00f70	55		 push	 ebp
  00f71	8b ec		 mov	 ebp, esp
  00f73	83 ec 08	 sub	 esp, 8
  00f76	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  :    // sanity checks
; 353  :    ASSERT_VALID(pImageList);
; 354  :    ASSERT(nIconIndex >= 0 && nIconIndex < pImageList->GetImageCount() );
; 355  : 
; 356  :    HICON hIcon = NULL;

  00f79	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hIcon$[ebp], 0

; 357  :    if ( NULL != pImageList && nIconIndex >= 0 && nIconIndex < pImageList->GetImageCount() )

  00f80	83 7d 08 00	 cmp	 DWORD PTR _pImageList$[ebp], 0
  00f84	74 22		 je	 SHORT $L197930
  00f86	83 7d 0c 00	 cmp	 DWORD PTR _nIconIndex$[ebp], 0
  00f8a	7c 1c		 jl	 SHORT $L197930
  00f8c	8b 4d 08	 mov	 ecx, DWORD PTR _pImageList$[ebp]
  00f8f	e8 00 00 00 00	 call	 ?GetImageCount@CImageList@@QBEHXZ ; CImageList::GetImageCount
  00f94	39 45 0c	 cmp	 DWORD PTR _nIconIndex$[ebp], eax
  00f97	7d 0f		 jge	 SHORT $L197930

; 358  :       hIcon = pImageList->ExtractIcon(nIconIndex);

  00f99	8b 45 0c	 mov	 eax, DWORD PTR _nIconIndex$[ebp]
  00f9c	50		 push	 eax
  00f9d	8b 4d 08	 mov	 ecx, DWORD PTR _pImageList$[ebp]
  00fa0	e8 00 00 00 00	 call	 ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ; CImageList::ExtractIconA
  00fa5	89 45 fc	 mov	 DWORD PTR _hIcon$[ebp], eax
$L197930:

; 359  :    SetIcon(hIcon);

  00fa8	8b 4d fc	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  00fab	51		 push	 ecx
  00fac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00faf	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z ; CBalloonHelp::SetIcon

; 360  :    if ( NULL != hIcon )

  00fb4	83 7d fc 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  00fb8	74 0a		 je	 SHORT $L197931

; 361  :       ::DestroyIcon(hIcon);

  00fba	8b 55 fc	 mov	 edx, DWORD PTR _hIcon$[ebp]
  00fbd	52		 push	 edx
  00fbe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyIcon@4
$L197931:

; 362  :    // if already visible, resize & move (icon size may have changed)
; 363  :    if ( NULL != m_hWnd )

  00fc4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00fc7	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00fcb	74 08		 je	 SHORT $L197926

; 364  :       PositionWindow();

  00fcd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd0	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197926:

; 365  : }

  00fd5	8b e5		 mov	 esp, ebp
  00fd7	5d		 pop	 ebp
  00fd8	c2 08 00	 ret	 8
?SetIcon@CBalloonHelp@@QAEXPAVCImageList@@H@Z ENDP	; CBalloonHelp::SetIcon
_TEXT	ENDS
PUBLIC	?SetURL@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CBalloonHelp::SetURL
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strURL$ = 8						; size = 4
?SetURL@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CBalloonHelp::SetURL
; _this$ = ecx

; 369  : {

  00fe0	55		 push	 ebp
  00fe1	8b ec		 mov	 ebp, esp
  00fe3	51		 push	 ecx
  00fe4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  :    m_strURL = strURL;

  00fe7	8b 45 08	 mov	 eax, DWORD PTR _strURL$[ebp]
  00fea	50		 push	 eax
  00feb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fee	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00ff4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 371  : }

  00ffa	8b e5		 mov	 esp, ebp
  00ffc	5d		 pop	 ebp
  00ffd	c2 04 00	 ret	 4
?SetURL@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CBalloonHelp::SetURL
_TEXT	ENDS
PUBLIC	?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z	; CWnd::SetTimer
PUBLIC	?KillTimer@CWnd@@QAEHI@Z			; CWnd::KillTimer
PUBLIC	?SetTimeout@CBalloonHelp@@QAEXI@Z		; CBalloonHelp::SetTimeout
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unTimeout$ = 8						; size = 4
?SetTimeout@CBalloonHelp@@QAEXI@Z PROC NEAR		; CBalloonHelp::SetTimeout
; _this$ = ecx

; 375  : {

  01000	55		 push	 ebp
  01001	8b ec		 mov	 ebp, esp
  01003	51		 push	 ecx
  01004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 376  :    m_unTimeout = unTimeout;

  01007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0100a	8b 4d 08	 mov	 ecx, DWORD PTR _unTimeout$[ebp]
  0100d	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 377  :    // if timer is already set, reset.
; 378  :    if ( NULL != m_hWnd )

  01013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01016	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0101a	74 3f		 je	 SHORT $L197940

; 379  :    {
; 380  :       if ( m_unTimeout > 0 )

  0101c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0101f	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  01026	76 21		 jbe	 SHORT $L197942

; 381  :       {
; 382  :          m_unTimerClose = (unsigned int) SetTimer(ID_TIMER_CLOSE, m_unTimeout, NULL);

  01028	6a 00		 push	 0
  0102a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0102d	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  01033	52		 push	 edx
  01034	6a 01		 push	 1
  01036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01039	e8 00 00 00 00	 call	 ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ; CWnd::SetTimer
  0103e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01041	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 383  :       }
; 384  :       else

  01047	eb 12		 jmp	 SHORT $L197940
$L197942:

; 385  :       {
; 386  :          KillTimer(m_unTimerClose);

  01049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0104c	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  01052	50		 push	 eax
  01053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01056	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer
$L197940:

; 387  :       }
; 388  :    }
; 389  : }

  0105b	8b e5		 mov	 esp, ebp
  0105d	5d		 pop	 ebp
  0105e	c2 04 00	 ret	 4
?SetTimeout@CBalloonHelp@@QAEXI@Z ENDP			; CBalloonHelp::SetTimeout
_TEXT	ENDS
PUBLIC	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ		; CWnd::GetSafeHwnd
PUBLIC	?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z ; CBalloonHelp::SetAnchorPoint
PUBLIC	?SetCallWndRetHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::SetCallWndRetHook
PUBLIC	?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ	; CBalloonHelp::RemoveCallWndRetHook
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptAnchor$ = 8						; size = 8
_pWndAnchor$ = 16					; size = 4
?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z PROC NEAR ; CBalloonHelp::SetAnchorPoint
; _this$ = ecx

; 393  : {

  01070	55		 push	 ebp
  01071	8b ec		 mov	 ebp, esp
  01073	51		 push	 ecx
  01074	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :    m_ptAnchor = ptAnchor;

  01077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0107a	8b 4d 08	 mov	 ecx, DWORD PTR _ptAnchor$[ebp]
  0107d	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx
  01083	8b 55 0c	 mov	 edx, DWORD PTR _ptAnchor$[ebp+4]
  01086	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 395  :    m_hwndAnchor = pWndAnchor->GetSafeHwnd();

  0108c	8b 4d 10	 mov	 ecx, DWORD PTR _pWndAnchor$[ebp]
  0108f	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  01094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01097	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 396  : 
; 397  :    // if we're anchored to a window, set hook
; 398  :    if ( NULL != m_hwndAnchor )

  0109d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  010a0	83 ba 98 00 00
	00 00		 cmp	 DWORD PTR [edx+152], 0
  010a7	74 0a		 je	 SHORT $L197950

; 399  :       SetCallWndRetHook();

  010a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010ac	e8 00 00 00 00	 call	 ?SetCallWndRetHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::SetCallWndRetHook

; 400  :    else

  010b1	eb 08		 jmp	 SHORT $L197951
$L197950:

; 401  :       RemoveCallWndRetHook();

  010b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010b6	e8 00 00 00 00	 call	 ?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveCallWndRetHook
$L197951:

; 402  : 
; 403  :    // if already visible, move
; 404  :    if ( NULL != m_hWnd )

  010bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010be	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  010c2	74 08		 je	 SHORT $L197949

; 405  :    {
; 406  :       // reposition
; 407  :       PositionWindow();

  010c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010c7	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197949:

; 408  :    }
; 409  : }

  010cc	8b e5		 mov	 esp, ebp
  010ce	5d		 pop	 ebp
  010cf	c2 0c 00	 ret	 12			; 0000000cH
?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z ENDP ; CBalloonHelp::SetAnchorPoint
_TEXT	ENDS
PUBLIC	?SetTitle@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CBalloonHelp::SetTitle
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:NEAR
EXTRN	?SetWindowTextA@CWnd@@QAEXPBD@Z:NEAR		; CWnd::SetWindowTextA
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strTitle$ = 8						; size = 4
?SetTitle@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CBalloonHelp::SetTitle
; _this$ = ecx

; 413  : {

  010e0	55		 push	 ebp
  010e1	8b ec		 mov	 ebp, esp
  010e3	51		 push	 ecx
  010e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  :    SetWindowText(strTitle);

  010e7	8b 4d 08	 mov	 ecx, DWORD PTR _strTitle$[ebp]
  010ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  010f0	50		 push	 eax
  010f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010f4	e8 00 00 00 00	 call	 ?SetWindowTextA@CWnd@@QAEXPBD@Z ; CWnd::SetWindowTextA

; 415  :    // if already visible, resize & move
; 416  :    if ( NULL != m_hWnd )

  010f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010fc	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  01100	74 08		 je	 SHORT $L197956

; 417  :       PositionWindow();

  01102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01105	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197956:

; 418  : }

  0110a	8b e5		 mov	 esp, ebp
  0110c	5d		 pop	 ebp
  0110d	c2 04 00	 ret	 4
?SetTitle@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CBalloonHelp::SetTitle
_TEXT	ENDS
PUBLIC	?SetContent@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CBalloonHelp::SetContent
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strContent$ = 8					; size = 4
?SetContent@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC NEAR ; CBalloonHelp::SetContent
; _this$ = ecx

; 422  : {

  01110	55		 push	 ebp
  01111	8b ec		 mov	 ebp, esp
  01113	51		 push	 ecx
  01114	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 423  :    m_strContent = strContent;

  01117	8b 45 08	 mov	 eax, DWORD PTR _strContent$[ebp]
  0111a	50		 push	 eax
  0111b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0111e	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  01124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 424  :    // if already visible, resize & move
; 425  :    if ( NULL != m_hWnd )

  0112a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0112d	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  01131	74 08		 je	 SHORT $L197961

; 426  :       PositionWindow();

  01133	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01136	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L197961:

; 427  : }

  0113b	8b e5		 mov	 esp, ebp
  0113d	5d		 pop	 ebp
  0113e	c2 04 00	 ret	 4
?SetContent@CBalloonHelp@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CBalloonHelp::SetContent
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -160						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

  00011	c7 85 60 ff ff
	ff 94 00 00 00	 mov	 DWORD PTR _ver$[ebp], 148 ; 00000094H

; 139  : 	::GetVersionEx( &ver );

  0001b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ver$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00028	83 bd 70 ff ff
	ff 02		 cmp	 DWORD PTR _ver$[ebp+16], 2
  0002f	75 15		 jne	 SHORT $L24173
  00031	83 bd 64 ff ff
	ff 05		 cmp	 DWORD PTR _ver$[ebp+4], 5
  00038	72 0c		 jb	 SHORT $L24173

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  0003a	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

  00044	eb 0a		 jmp	 SHORT $L24174
$L24173:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00046	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24174:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  00050	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pfnGetThreadACP$[ebp]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0005c	e8 00 00 00 00	 call	 ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pNew$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 93   : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24161 = -24					; size = 4
_lcidThread$ = -20					; size = 4
_szACP$ = -16						; size = 7
__$ArrayPad$ = -8					; size = 4
_nACP$ = -4						; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0
  0001b	89 45 ec	 mov	 DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  0001e	6a 07		 push	 7
  00020	8d 45 f0	 lea	 eax, DWORD PTR _szACP$[ebp]
  00023	50		 push	 eax
  00024	68 04 10 00 00	 push	 4100			; 00001004H
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _lcidThread$[ebp]
  0002c	51		 push	 ecx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00033	85 c0		 test	 eax, eax
  00035	74 34		 je	 SHORT $L24160

; 111  : 	{
; 112  : 		char* pch = szACP;

  00037	8d 55 f0	 lea	 edx, DWORD PTR _szACP$[ebp]
  0003a	89 55 e8	 mov	 DWORD PTR _pch$24161[ebp], edx
$L24163:

; 113  : 		while (*pch != '\0')

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00040	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00043	85 c9		 test	 ecx, ecx
  00045	74 24		 je	 SHORT $L24160

; 114  : 		{
; 115  : 			nACP *= 10;

  00047	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  0004a	6b d2 0a	 imul	 edx, 10			; 0000000aH
  0004d	89 55 fc	 mov	 DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

  00050	8b 45 e8	 mov	 eax, DWORD PTR _pch$24161[ebp]
  00053	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _nACP$[ebp]
  00059	8d 44 0a d0	 lea	 eax, DWORD PTR [edx+ecx-48]
  0005d	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
  00060	8b 4d e8	 mov	 ecx, DWORD PTR _pch$24161[ebp]
  00063	83 c1 01	 add	 ecx, 1
  00066	89 4d e8	 mov	 DWORD PTR _pch$24161[ebp], ecx

; 117  : 		}

  00069	eb d2		 jmp	 SHORT $L24163
$L24160:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _nACP$[ebp], 0
  0006f	75 09		 jne	 SHORT $L24165

; 121  : 		nACP = ::GetACP();

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00077	89 45 fc	 mov	 DWORD PTR _nACP$[ebp], eax
$L24165:

; 122  : 
; 123  : 	return nACP;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _nACP$[ebp]

; 124  : }

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return( CP_THREAD_ACP );

  00003	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?Invalidate@CWnd@@QAEXH@Z			; CWnd::Invalidate
PUBLIC	?SetForegroundColor@CBalloonHelp@@QAEXK@Z	; CBalloonHelp::SetForegroundColor
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crForeground$ = 8					; size = 4
?SetForegroundColor@CBalloonHelp@@QAEXK@Z PROC NEAR	; CBalloonHelp::SetForegroundColor
; _this$ = ecx

; 431  : {

  01150	55		 push	 ebp
  01151	8b ec		 mov	 ebp, esp
  01153	51		 push	 ecx
  01154	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 432  :    m_crForeground = crForeground;

  01157	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0115a	8b 4d 08	 mov	 ecx, DWORD PTR _crForeground$[ebp]
  0115d	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx

; 433  :    // repaint if visible
; 434  :    if ( NULL != m_hWnd )

  01163	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01166	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0116a	74 0a		 je	 SHORT $L197966

; 435  :       Invalidate(FALSE);

  0116c	6a 00		 push	 0
  0116e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01171	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L197966:

; 436  : }

  01176	8b e5		 mov	 esp, ebp
  01178	5d		 pop	 ebp
  01179	c2 04 00	 ret	 4
?SetForegroundColor@CBalloonHelp@@QAEXK@Z ENDP		; CBalloonHelp::SetForegroundColor
_TEXT	ENDS
PUBLIC	?SetBackgroundColor@CBalloonHelp@@QAEXK@Z	; CBalloonHelp::SetBackgroundColor
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crBackground$ = 8					; size = 4
?SetBackgroundColor@CBalloonHelp@@QAEXK@Z PROC NEAR	; CBalloonHelp::SetBackgroundColor
; _this$ = ecx

; 440  : {

  01180	55		 push	 ebp
  01181	8b ec		 mov	 ebp, esp
  01183	51		 push	 ecx
  01184	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 441  :    m_crBackground = crBackground;

  01187	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0118a	8b 4d 08	 mov	 ecx, DWORD PTR _crBackground$[ebp]
  0118d	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 442  :    // repaint if visible
; 443  :    if ( NULL != m_hWnd )

  01193	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01196	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0119a	74 0a		 je	 SHORT $L197971

; 444  :       Invalidate(FALSE);

  0119c	6a 00		 push	 0
  0119e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011a1	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate
$L197971:

; 445  : }

  011a6	8b e5		 mov	 esp, ebp
  011a8	5d		 pop	 ebp
  011a9	c2 04 00	 ret	 4
?SetBackgroundColor@CBalloonHelp@@QAEXK@Z ENDP		; CBalloonHelp::SetBackgroundColor
_TEXT	ENDS
PUBLIC	?SetMouseMoveTolerance@CBalloonHelp@@QAEXH@Z	; CBalloonHelp::SetMouseMoveTolerance
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nTolerance$ = 8					; size = 4
?SetMouseMoveTolerance@CBalloonHelp@@QAEXH@Z PROC NEAR	; CBalloonHelp::SetMouseMoveTolerance
; _this$ = ecx

; 449  : {

  011b0	55		 push	 ebp
  011b1	8b ec		 mov	 ebp, esp
  011b3	51		 push	 ecx
  011b4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 450  :    m_nMouseMoveTolerance = nTolerance;

  011b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011ba	8b 4d 08	 mov	 ecx, DWORD PTR _nTolerance$[ebp]
  011bd	89 88 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ecx

; 451  : }

  011c3	8b e5		 mov	 esp, ebp
  011c5	5d		 pop	 ebp
  011c6	c2 04 00	 ret	 4
?SetMouseMoveTolerance@CBalloonHelp@@QAEXH@Z ENDP	; CBalloonHelp::SetMouseMoveTolerance
_TEXT	ENDS
PUBLIC	?GetCapture@CWnd@@SGPAV1@XZ			; CWnd::GetCapture
PUBLIC	?SetCapture@CWnd@@QAEPAV1@XZ			; CWnd::SetCapture
PUBLIC	?CreateStockObject@CGdiObject@@QAEHH@Z		; CGdiObject::CreateStockObject
PUBLIC	??0CFont@@QAE@XZ				; CFont::CFont
PUBLIC	?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
PUBLIC	?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z	; CFont::GetLogFont
PUBLIC	?ShowBalloon@CBalloonHelp@@IAEXXZ		; CBalloonHelp::ShowBalloon
PUBLIC	?GetClassAtom@CBalloonHelp@@KAGH@Z		; CBalloonHelp::GetClassAtom
PUBLIC	?SetKeyboardHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::SetKeyboardHook
PUBLIC	?SetMouseHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::SetMouseHook
EXTRN	__imp__GetCursorPos@4:NEAR
EXTRN	?GetSafeOwner@CWnd@@SGPAV1@PAV1@PAPAUHWND__@@@Z:NEAR ; CWnd::GetSafeOwner
xdata$x	SEGMENT
$T199314 DD	0ffffffffH
	DD	FLAT:$L199307
	DD	00H
	DD	FLAT:$L199308
	DD	00H
	DD	FLAT:$L199309
$T199311 DD	019930520H
	DD	03H
	DD	FLAT:$T199314
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv141 = -156						; size = 4
tv93 = -152						; size = 4
_this$ = -148						; size = 4
$T199306 = -144						; size = 4
$T199305 = -140						; size = 4
$T199304 = -136						; size = 16
$T199303 = -120						; size = 4
$T199302 = -116						; size = 4
$T199299 = -112						; size = 4
$T199298 = -108						; size = 4
$T199297 = -104						; size = 4
$T199294 = -100						; size = 4
$T199293 = -96						; size = 4
$T199292 = -92						; size = 4
_LogFont$198004 = -88					; size = 60
__$ArrayPad$ = -28					; size = 4
_wndClass$ = -24					; size = 2
_dwExStyle$ = -20					; size = 4
_bFade$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_strTitle$ = 8						; size = 4
_strContent$ = 12					; size = 4
_ptAnchor$ = 16						; size = 4
_unOptions$ = 20					; size = 4
_pParentWnd$ = 24					; size = 4
_strURL$ = 28						; size = 4
_unTimeout$ = 32					; size = 4
_hIcon$ = 36						; size = 4
?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z PROC NEAR ; CBalloonHelp::Create
; _this$ = ecx

; 493  : {

  011d0	55		 push	 ebp
  011d1	8b ec		 mov	 ebp, esp
  011d3	6a ff		 push	 -1
  011d5	68 00 00 00 00	 push	 __ehhandler$?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z
  011da	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  011e0	50		 push	 eax
  011e1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  011e8	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  011ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  011f3	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  011f6	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  011fc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 494  :    m_strContent   = strContent;

  01203	8b 45 0c	 mov	 eax, DWORD PTR _strContent$[ebp]
  01206	50		 push	 eax
  01207	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0120d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  01213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 495  :    SetAnchorPoint(ptAnchor, pParentWnd);

  01219	8b 4d 18	 mov	 ecx, DWORD PTR _pParentWnd$[ebp]
  0121c	51		 push	 ecx
  0121d	8b 55 10	 mov	 edx, DWORD PTR _ptAnchor$[ebp]
  01220	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01223	50		 push	 eax
  01224	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01226	51		 push	 ecx
  01227	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0122d	e8 00 00 00 00	 call	 ?SetAnchorPoint@CBalloonHelp@@QAEXVCPoint@@PAVCWnd@@@Z ; CBalloonHelp::SetAnchorPoint

; 496  :    m_unOptions    = unOptions;

  01232	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01238	8b 45 14	 mov	 eax, DWORD PTR _unOptions$[ebp]
  0123b	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax

; 497  :    m_strURL       = strURL;

  01241	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01244	51		 push	 ecx
  01245	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0124b	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  01251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 498  :    m_unTimeout    = unTimeout;

  01257	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0125d	8b 45 20	 mov	 eax, DWORD PTR _unTimeout$[ebp]
  01260	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 499  : 
; 500  :    if ( NULL != hIcon )

  01266	83 7d 24 00	 cmp	 DWORD PTR _hIcon$[ebp], 0
  0126a	74 0f		 je	 SHORT $L197988

; 501  :       SetIcon(hIcon);

  0126c	8b 4d 24	 mov	 ecx, DWORD PTR _hIcon$[ebp]
  0126f	51		 push	 ecx
  01270	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01276	e8 00 00 00 00	 call	 ?SetIcon@CBalloonHelp@@QAEXPAUHICON__@@@Z ; CBalloonHelp::SetIcon
$L197988:

; 502  :    
; 503  :    pParentWnd = GetSafeOwner(pParentWnd);

  0127b	6a 00		 push	 0
  0127d	8b 55 18	 mov	 edx, DWORD PTR _pParentWnd$[ebp]
  01280	52		 push	 edx
  01281	e8 00 00 00 00	 call	 ?GetSafeOwner@CWnd@@SGPAV1@PAV1@PAPAUHWND__@@@Z ; CWnd::GetSafeOwner
  01286	89 45 18	 mov	 DWORD PTR _pParentWnd$[ebp], eax

; 504  :    if ( NULL == pParentWnd )

  01289	83 7d 18 00	 cmp	 DWORD PTR _pParentWnd$[ebp], 0
  0128d	75 1f		 jne	 SHORT $L197989

; 505  :    {
; 506  :       // something is wrong; MFC should be able to find a main window.
; 507  :       ASSERT(FALSE);
; 508  :       return FALSE;

  0128f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T199292[ebp], 0
  01296	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0129d	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  012a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  012a6	8b 45 a4	 mov	 eax, DWORD PTR $T199292[ebp]
  012a9	e9 b5 03 00 00	 jmp	 $L197987
$L197989:

; 509  :    }
; 510  : 
; 511  :    // if no fonts set, use defaults
; 512  :    if ( NULL == m_pContentFont )

  012ae	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  012b4	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  012bb	0f 85 80 00 00
	00		 jne	 $L197992

; 513  :    {
; 514  :       m_pContentFont = new CFont;

  012c1	6a 08		 push	 8
  012c3	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  012c8	89 45 9c	 mov	 DWORD PTR $T199294[ebp], eax
  012cb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  012cf	83 7d 9c 00	 cmp	 DWORD PTR $T199294[ebp], 0
  012d3	74 10		 je	 SHORT $L199295
  012d5	8b 4d 9c	 mov	 ecx, DWORD PTR $T199294[ebp]
  012d8	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  012dd	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  012e3	eb 0a		 jmp	 SHORT $L199296
$L199295:
  012e5	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv93[ebp], 0
$L199296:
  012ef	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  012f5	89 4d a0	 mov	 DWORD PTR $T199293[ebp], ecx
  012f8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  012fc	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01302	8b 45 a0	 mov	 eax, DWORD PTR $T199293[ebp]
  01305	89 82 b0 00 00
	00		 mov	 DWORD PTR [edx+176], eax

; 515  :       if ( !m_pContentFont->CreateStockObject(DEFAULT_GUI_FONT) )

  0130b	6a 11		 push	 17			; 00000011H
  0130d	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01313	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  01319	e8 00 00 00 00	 call	 ?CreateStockObject@CGdiObject@@QAEHH@Z ; CGdiObject::CreateStockObject
  0131e	85 c0		 test	 eax, eax
  01320	75 1f		 jne	 SHORT $L197992

; 516  :          return FALSE;

  01322	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T199297[ebp], 0
  01329	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01330	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01333	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01339	8b 45 98	 mov	 eax, DWORD PTR $T199297[ebp]
  0133c	e9 22 03 00 00	 jmp	 $L197987
$L197992:

; 517  :    }
; 518  : 
; 519  :    // title font defaults to bold version of content font
; 520  :    if ( NULL == m_pTitleFont )

  01341	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01347	83 ba ac 00 00
	00 00		 cmp	 DWORD PTR [edx+172], 0
  0134e	0f 85 9e 00 00
	00		 jne	 $L197999

; 521  :    {
; 522  :       m_pTitleFont = new CFont;

  01354	6a 08		 push	 8
  01356	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0135b	89 45 90	 mov	 DWORD PTR $T199299[ebp], eax
  0135e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01362	83 7d 90 00	 cmp	 DWORD PTR $T199299[ebp], 0
  01366	74 10		 je	 SHORT $L199300
  01368	8b 4d 90	 mov	 ecx, DWORD PTR $T199299[ebp]
  0136b	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  01370	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  01376	eb 0a		 jmp	 SHORT $L199301
$L199300:
  01378	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$L199301:
  01382	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  01388	89 45 94	 mov	 DWORD PTR $T199298[ebp], eax
  0138b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0138f	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01395	8b 55 94	 mov	 edx, DWORD PTR $T199298[ebp]
  01398	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 523  :       LOGFONT LogFont;
; 524  :       m_pContentFont->GetLogFont(&LogFont);

  0139e	8d 45 a8	 lea	 eax, DWORD PTR _LogFont$198004[ebp]
  013a1	50		 push	 eax
  013a2	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  013a8	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  013ae	e8 00 00 00 00	 call	 ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z ; CFont::GetLogFont

; 525  :       LogFont.lfWeight = FW_BOLD;

  013b3	c7 45 b8 bc 02
	00 00		 mov	 DWORD PTR _LogFont$198004[ebp+16], 700 ; 000002bcH

; 526  :       if ( !m_pTitleFont->CreateFontIndirect(&LogFont) )

  013ba	8d 55 a8	 lea	 edx, DWORD PTR _LogFont$198004[ebp]
  013bd	52		 push	 edx
  013be	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  013c4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  013ca	e8 00 00 00 00	 call	 ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ; CFont::CreateFontIndirectA
  013cf	85 c0		 test	 eax, eax
  013d1	75 1f		 jne	 SHORT $L197999

; 527  :          return FALSE;

  013d3	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T199302[ebp], 0
  013da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  013e1	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  013e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  013ea	8b 45 8c	 mov	 eax, DWORD PTR $T199302[ebp]
  013ed	e9 71 02 00 00	 jmp	 $L197987
$L197999:

; 528  :    }
; 529  : 
; 530  :    ATOM wndClass = GetClassAtom(!(m_unOptions&unDISABLE_XP_SHADOW));

  013f2	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  013f8	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  013fe	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  01404	f7 da		 neg	 edx
  01406	1b d2		 sbb	 edx, edx
  01408	42		 inc	 edx
  01409	52		 push	 edx
  0140a	e8 00 00 00 00	 call	 ?GetClassAtom@CBalloonHelp@@KAGH@Z ; CBalloonHelp::GetClassAtom
  0140f	83 c4 04	 add	 esp, 4
  01412	66 89 45 e8	 mov	 WORD PTR _wndClass$[ebp], ax

; 531  :    if ( NULL == wndClass )  // couldn't register class

  01416	0f b7 45 e8	 movzx	 eax, WORD PTR _wndClass$[ebp]
  0141a	85 c0		 test	 eax, eax
  0141c	75 1f		 jne	 SHORT $L198008

; 532  :       return FALSE;

  0141e	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T199303[ebp], 0
  01425	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0142c	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  0142f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01435	8b 45 88	 mov	 eax, DWORD PTR $T199303[ebp]
  01438	e9 26 02 00 00	 jmp	 $L197987
$L198008:

; 533  : 
; 534  :    // check system settings: if fade effects are disabled or unavailable, disable here too
; 535  :    BOOL bFade = FALSE;

  0143d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bFade$[ebp], 0

; 536  :    ::SystemParametersInfo(SPI_GETTOOLTIPANIMATION, 0, &bFade, 0);

  01444	6a 00		 push	 0
  01446	8d 4d f0	 lea	 ecx, DWORD PTR _bFade$[ebp]
  01449	51		 push	 ecx
  0144a	6a 00		 push	 0
  0144c	68 16 10 00 00	 push	 4118			; 00001016H
  01451	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16

; 537  :    if (bFade)

  01457	83 7d f0 00	 cmp	 DWORD PTR _bFade$[ebp], 0
  0145b	74 13		 je	 SHORT $L198011

; 538  :       ::SystemParametersInfo(SPI_GETTOOLTIPFADE, 0, &bFade, 0);

  0145d	6a 00		 push	 0
  0145f	8d 55 f0	 lea	 edx, DWORD PTR _bFade$[ebp]
  01462	52		 push	 edx
  01463	6a 00		 push	 0
  01465	68 18 10 00 00	 push	 4120			; 00001018H
  0146a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoA@16
$L198011:

; 539  :    if (!bFade || NULL == m_fnAnimateWindow)

  01470	83 7d f0 00	 cmp	 DWORD PTR _bFade$[ebp], 0
  01474	74 0c		 je	 SHORT $L198013
  01476	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0147c	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  01480	75 1e		 jne	 SHORT $L198012
$L198013:

; 540  :       m_unOptions |= unDISABLE_FADE;

  01482	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01488	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0148e	81 ca 00 c0 00
	00		 or	 edx, 49152		; 0000c000H
  01494	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0149a	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
$L198012:

; 541  : 
; 542  :    // create invisible at arbitrary position; then position, set region, and finally show
; 543  : 
; 544  :    // the idea with WS_EX_TOOLWINDOW is, you can't switch to this using alt+tab
; 545  :    DWORD dwExStyle = WS_EX_TOOLWINDOW;

  014a0	c7 45 ec 80 00
	00 00		 mov	 DWORD PTR _dwExStyle$[ebp], 128 ; 00000080H

; 546  :    if ( m_unOptions&unSHOW_TOPMOST )      // make topmost, if requested

  014a7	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  014ad	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  014b3	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  014b9	74 09		 je	 SHORT $L198015

; 547  :       dwExStyle |= WS_EX_TOPMOST;

  014bb	8b 45 ec	 mov	 eax, DWORD PTR _dwExStyle$[ebp]
  014be	83 c8 08	 or	 eax, 8
  014c1	89 45 ec	 mov	 DWORD PTR _dwExStyle$[ebp], eax
$L198015:

; 548  :    if ( !CreateEx(dwExStyle, (LPCTSTR)wndClass, strTitle, WS_POPUP, CRect(0,0,10,10), pParentWnd, 0, NULL) )

  014c4	6a 00		 push	 0
  014c6	6a 00		 push	 0
  014c8	8b 4d 18	 mov	 ecx, DWORD PTR _pParentWnd$[ebp]
  014cb	51		 push	 ecx
  014cc	6a 0a		 push	 10			; 0000000aH
  014ce	6a 0a		 push	 10			; 0000000aH
  014d0	6a 00		 push	 0
  014d2	6a 00		 push	 0
  014d4	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T199304[ebp]
  014da	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  014df	50		 push	 eax
  014e0	68 00 00 00 80	 push	 -2147483648		; 80000000H
  014e5	8b 4d 08	 mov	 ecx, DWORD PTR _strTitle$[ebp]
  014e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  014ee	50		 push	 eax
  014ef	0f b7 55 e8	 movzx	 edx, WORD PTR _wndClass$[ebp]
  014f3	52		 push	 edx
  014f4	8b 45 ec	 mov	 eax, DWORD PTR _dwExStyle$[ebp]
  014f7	50		 push	 eax
  014f8	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  014fe	8b 11		 mov	 edx, DWORD PTR [ecx]
  01500	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01506	ff 52 60	 call	 DWORD PTR [edx+96]
  01509	85 c0		 test	 eax, eax
  0150b	75 25		 jne	 SHORT $L198018

; 549  :       return FALSE;

  0150d	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T199305[ebp], 0
  01517	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0151e	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01521	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01527	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T199305[ebp]
  0152d	e9 31 01 00 00	 jmp	 $L197987
$L198018:

; 550  :    PositionWindow();

  01532	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01538	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow

; 551  : 
; 552  :    if ( (m_unOptions&unCLOSE_ON_MOUSE_MOVE)
; 553  :       ||(m_unOptions&unCLOSE_ON_LBUTTON_UP)
; 554  :       ||(m_unOptions&unCLOSE_ON_LBUTTON_DOWN)
; 555  :       ||(m_unOptions&unCLOSE_ON_MBUTTON_UP)
; 556  :       ||(m_unOptions&unCLOSE_ON_MBUTTON_DOWN)
; 557  :       ||(m_unOptions&unCLOSE_ON_RBUTTON_UP)
; 558  :       ||(m_unOptions&unCLOSE_ON_RBUTTON_DOWN) )

  0153d	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01543	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01549	83 e1 40	 and	 ecx, 64			; 00000040H
  0154c	75 66		 jne	 SHORT $L198021
  0154e	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01554	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0155a	83 e0 01	 and	 eax, 1
  0155d	75 55		 jne	 SHORT $L198021
  0155f	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01565	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0156b	83 e2 08	 and	 edx, 8
  0156e	75 44		 jne	 SHORT $L198021
  01570	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01576	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0157c	83 e1 02	 and	 ecx, 2
  0157f	75 33		 jne	 SHORT $L198021
  01581	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01587	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0158d	83 e0 10	 and	 eax, 16			; 00000010H
  01590	75 22		 jne	 SHORT $L198021
  01592	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01598	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0159e	83 e2 04	 and	 edx, 4
  015a1	75 11		 jne	 SHORT $L198021
  015a3	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  015a9	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  015af	83 e1 20	 and	 ecx, 32			; 00000020H
  015b2	74 1e		 je	 SHORT $L198020
$L198021:

; 559  :    {
; 560  :       ::GetCursorPos(&m_ptMouseOrig);

  015b4	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  015ba	81 c2 d4 00 00
	00		 add	 edx, 212		; 000000d4H
  015c0	52		 push	 edx
  015c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4

; 561  :       SetMouseHook();

  015c7	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  015cd	e8 00 00 00 00	 call	 ?SetMouseHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::SetMouseHook
$L198020:

; 562  :    }
; 563  : 
; 564  :    // these need to take effect even if the window receiving them
; 565  :    // is not owned by this process.  So, if this process does not
; 566  :    // already have the mouse captured, capture it!
; 567  :    if ( (m_unOptions&unCLOSE_ON_LBUTTON_UP)
; 568  :       ||(m_unOptions&unCLOSE_ON_MBUTTON_UP)
; 569  :       ||(m_unOptions&unCLOSE_ON_RBUTTON_UP) )

  015d2	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  015d8	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  015de	83 e1 01	 and	 ecx, 1
  015e1	75 22		 jne	 SHORT $L198023
  015e3	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  015e9	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  015ef	83 e0 02	 and	 eax, 2
  015f2	75 11		 jne	 SHORT $L198023
  015f4	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  015fa	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01600	83 e2 04	 and	 edx, 4
  01603	74 14		 je	 SHORT $L198022
$L198023:

; 570  :    {
; 571  :       // no, i don't particularly need or want to deal with a situation
; 572  :       // where a balloon is being created and another program has captured
; 573  :       // the mouse.  If you need it, it shouldn't be too hard, just do it here.
; 574  :       if ( NULL == GetCapture() )

  01605	e8 00 00 00 00	 call	 ?GetCapture@CWnd@@SGPAV1@XZ ; CWnd::GetCapture
  0160a	85 c0		 test	 eax, eax
  0160c	75 0b		 jne	 SHORT $L198022

; 575  :          SetCapture();

  0160e	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01614	e8 00 00 00 00	 call	 ?SetCapture@CWnd@@QAEPAV1@XZ ; CWnd::SetCapture
$L198022:

; 576  :    }
; 577  : 
; 578  :    if ( m_unOptions&unCLOSE_ON_KEYPRESS )

  01619	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0161f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01625	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0162b	74 0b		 je	 SHORT $L198025

; 579  :       SetKeyboardHook();

  0162d	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01633	e8 00 00 00 00	 call	 ?SetKeyboardHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::SetKeyboardHook
$L198025:

; 580  : 
; 581  :    ShowBalloon();

  01638	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0163e	e8 00 00 00 00	 call	 ?ShowBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::ShowBalloon

; 582  :    return TRUE;

  01643	c7 85 70 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T199306[ebp], 1
  0164d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01654	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  01657	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0165d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T199306[ebp]
$L197987:

; 583  : }

  01663	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01666	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0166d	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01670	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01675	8b e5		 mov	 esp, ebp
  01677	5d		 pop	 ebp
  01678	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
text$x	SEGMENT
$L199307:
  000e7	8d 4d 1c	 lea	 ecx, DWORD PTR _strURL$[ebp]
  000ea	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$L199308:
  000f0	8b 45 9c	 mov	 eax, DWORD PTR $T199294[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000f9	c3		 ret	 0
$L199309:
  000fa	8b 45 90	 mov	 eax, DWORD PTR $T199299[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00103	c3		 ret	 0
__ehhandler$?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z:
  00104	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199311
  00109	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CBalloonHelp@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0ABVCPoint@@IPAVCWnd@@V23@IPAUHICON__@@@Z ENDP ; CBalloonHelp::Create
PUBLIC	?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ	; CBalloonHelp::GetAnchorPoint
EXTRN	__imp__ClientToScreen@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ptAnchor$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ PROC NEAR ; CBalloonHelp::GetAnchorPoint
; _this$ = ecx

; 587  : {

  01680	55		 push	 ebp
  01681	8b ec		 mov	 ebp, esp
  01683	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01686	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 588  :    CPoint ptAnchor = m_ptAnchor;

  01689	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0168c	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01692	8b 90 a0 00 00
	00		 mov	 edx, DWORD PTR [eax+160]
  01698	89 4d f8	 mov	 DWORD PTR _ptAnchor$[ebp], ecx
  0169b	89 55 fc	 mov	 DWORD PTR _ptAnchor$[ebp+4], edx

; 589  :    // assume if window was given, point is in client coords
; 590  :    if ( NULL != m_hwndAnchor )

  0169e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  016a1	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  016a8	74 14		 je	 SHORT $L198032

; 591  :       ::ClientToScreen(m_hwndAnchor, &ptAnchor);

  016aa	8d 4d f8	 lea	 ecx, DWORD PTR _ptAnchor$[ebp]
  016ad	51		 push	 ecx
  016ae	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  016b1	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  016b7	50		 push	 eax
  016b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
$L198032:

; 592  :    return ptAnchor;

  016be	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  016c1	8b 55 f8	 mov	 edx, DWORD PTR _ptAnchor$[ebp]
  016c4	89 11		 mov	 DWORD PTR [ecx], edx
  016c6	8b 45 fc	 mov	 eax, DWORD PTR _ptAnchor$[ebp+4]
  016c9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  016cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : }

  016cf	8b e5		 mov	 esp, ebp
  016d1	5d		 pop	 ebp
  016d2	c2 04 00	 ret	 4
?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ENDP	; CBalloonHelp::GetAnchorPoint
_TEXT	ENDS
PUBLIC	?IsRectEmpty@CRect@@QBEHXZ			; CRect::IsRectEmpty
PUBLIC	??4CRect@@QAEXABUtagRECT@@@Z			; CRect::operator=
PUBLIC	?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T199318 = -60						; size = 8
$T199317 = -52						; size = 8
_mi$198041 = -44					; size = 40
_hMonitor$198038 = -4					; size = 4
_rect$ = 8						; size = 4
?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z PROC NEAR ; CBalloonHelp::GetAnchorScreenBounds
; _this$ = ecx

; 597  : {

  016e0	55		 push	 ebp
  016e1	8b ec		 mov	 ebp, esp
  016e3	83 ec 40	 sub	 esp, 64			; 00000040H
  016e6	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 598  :    if ( m_screenRect.IsRectEmpty() )

  016e9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  016ec	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  016f2	e8 00 00 00 00	 call	 ?IsRectEmpty@CRect@@QBEHXZ ; CRect::IsRectEmpty
  016f7	85 c0		 test	 eax, eax
  016f9	74 4f		 je	 SHORT $L198037

; 599  :    {     
; 600  :       // get the nearest monitor to the anchor
; 601  :       HMONITOR hMonitor = MonitorFromPoint(GetAnchorPoint(), MONITOR_DEFAULTTONEAREST);

  016fb	8d 45 c4	 lea	 eax, DWORD PTR $T199318[ebp]
  016fe	50		 push	 eax
  016ff	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01702	e8 00 00 00 00	 call	 ?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ; CBalloonHelp::GetAnchorPoint
  01707	8b 08		 mov	 ecx, DWORD PTR [eax]
  01709	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0170c	89 4d cc	 mov	 DWORD PTR $T199317[ebp], ecx
  0170f	89 55 d0	 mov	 DWORD PTR $T199317[ebp+4], edx
  01712	6a 02		 push	 2
  01714	8b 45 d0	 mov	 eax, DWORD PTR $T199317[ebp+4]
  01717	50		 push	 eax
  01718	8b 4d cc	 mov	 ecx, DWORD PTR $T199317[ebp]
  0171b	51		 push	 ecx
  0171c	e8 00 00 00 00	 call	 _xMonitorFromPoint@12
  01721	89 45 fc	 mov	 DWORD PTR _hMonitor$198038[ebp], eax

; 602  : 
; 603  :       // get the monitor bounds
; 604  :       MONITORINFO mi;
; 605  :       mi.cbSize = sizeof(mi);

  01724	c7 45 d4 28 00
	00 00		 mov	 DWORD PTR _mi$198041[ebp], 40 ; 00000028H

; 606  :       GetMonitorInfo(hMonitor, &mi);

  0172b	8d 55 d4	 lea	 edx, DWORD PTR _mi$198041[ebp]
  0172e	52		 push	 edx
  0172f	8b 45 fc	 mov	 eax, DWORD PTR _hMonitor$198038[ebp]
  01732	50		 push	 eax
  01733	e8 00 00 00 00	 call	 _xGetMonitorInfo@8

; 607  : 
; 608  :       // work area (area not obscured by task bar, etc.)
; 609  :       m_screenRect = mi.rcWork;

  01738	8d 4d e8	 lea	 ecx, DWORD PTR _mi$198041[ebp+20]
  0173b	51		 push	 ecx
  0173c	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0173f	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  01745	e8 00 00 00 00	 call	 ??4CRect@@QAEXABUtagRECT@@@Z ; CRect::operator=
$L198037:

; 610  :    }
; 611  :    rect = m_screenRect;

  0174a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0174d	81 c2 bc 00 00
	00		 add	 edx, 188		; 000000bcH
  01753	8b 45 08	 mov	 eax, DWORD PTR _rect$[ebp]
  01756	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01758	89 08		 mov	 DWORD PTR [eax], ecx
  0175a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0175d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  01760	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01763	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  01766	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  01769	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 612  : }

  0176c	8b e5		 mov	 esp, ebp
  0176e	5d		 pop	 ebp
  0176f	c2 04 00	 ret	 4
?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ENDP ; CBalloonHelp::GetAnchorScreenBounds
_TEXT	ENDS
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ; CBalloonHelp::GetBalloonQuadrant
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -28						; size = 4
_ptAnchor$ = -24					; size = 8
_rectDesktop$ = -16					; size = 16
?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ PROC NEAR ; CBalloonHelp::GetBalloonQuadrant
; _this$ = ecx

; 617  : {

  01780	55		 push	 ebp
  01781	8b ec		 mov	 ebp, esp
  01783	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01786	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 618  :    CRect rectDesktop;

  01789	8d 4d f0	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  0178c	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 619  :    GetAnchorScreenBounds(rectDesktop);

  01791	8d 45 f0	 lea	 eax, DWORD PTR _rectDesktop$[ebp]
  01794	50		 push	 eax
  01795	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01798	e8 00 00 00 00	 call	 ?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds

; 620  :    CPoint ptAnchor = GetAnchorPoint();

  0179d	8d 4d e8	 lea	 ecx, DWORD PTR _ptAnchor$[ebp]
  017a0	51		 push	 ecx
  017a1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  017a4	e8 00 00 00 00	 call	 ?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ; CBalloonHelp::GetAnchorPoint

; 621  :    
; 622  :    if ( ptAnchor.y < rectDesktop.top + rectDesktop.Height()/2 )

  017a9	8d 4d f0	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  017ac	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  017b1	99		 cdq
  017b2	2b c2		 sub	 eax, edx
  017b4	d1 f8		 sar	 eax, 1
  017b6	03 45 f4	 add	 eax, DWORD PTR _rectDesktop$[ebp+4]
  017b9	39 45 ec	 cmp	 DWORD PTR _ptAnchor$[ebp+4], eax
  017bc	7d 20		 jge	 SHORT $L198048

; 623  :    {
; 624  :       if ( ptAnchor.x < rectDesktop.left + rectDesktop.Width()/2 )

  017be	8d 4d f0	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  017c1	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  017c6	99		 cdq
  017c7	2b c2		 sub	 eax, edx
  017c9	d1 f8		 sar	 eax, 1
  017cb	03 45 f0	 add	 eax, DWORD PTR _rectDesktop$[ebp]
  017ce	39 45 e8	 cmp	 DWORD PTR _ptAnchor$[ebp], eax
  017d1	7d 07		 jge	 SHORT $L198049

; 625  :       {
; 626  :          return BQ_TOPLEFT;

  017d3	b8 01 00 00 00	 mov	 eax, 1
  017d8	eb 25		 jmp	 SHORT $L198044
$L198049:

; 627  :       }
; 628  :       else
; 629  :       {
; 630  :          return BQ_TOPRIGHT;

  017da	33 c0		 xor	 eax, eax
  017dc	eb 21		 jmp	 SHORT $L198044
$L198048:

; 631  :       }
; 632  :    }
; 633  :    else
; 634  :    {
; 635  :       if ( ptAnchor.x < rectDesktop.left + rectDesktop.Width()/2 )

  017de	8d 4d f0	 lea	 ecx, DWORD PTR _rectDesktop$[ebp]
  017e1	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  017e6	99		 cdq
  017e7	2b c2		 sub	 eax, edx
  017e9	d1 f8		 sar	 eax, 1
  017eb	03 45 f0	 add	 eax, DWORD PTR _rectDesktop$[ebp]
  017ee	39 45 e8	 cmp	 DWORD PTR _ptAnchor$[ebp], eax
  017f1	7d 07		 jge	 SHORT $L198052

; 636  :       {
; 637  :          return BQ_BOTTOMLEFT;

  017f3	b8 03 00 00 00	 mov	 eax, 3
  017f8	eb 05		 jmp	 SHORT $L198044
$L198052:

; 638  :       }
; 639  :       else
; 640  :       {
; 641  :          return BQ_BOTTOMRIGHT;

  017fa	b8 02 00 00 00	 mov	 eax, 2
$L198044:

; 642  :       }
; 643  :    }
; 644  : 
; 645  :    // unreachable
; 646  : }

  017ff	8b e5		 mov	 esp, ebp
  01801	5d		 pop	 ebp
  01802	c3		 ret	 0
?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ENDP ; CBalloonHelp::GetBalloonQuadrant
_TEXT	ENDS
PUBLIC	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetWindowRect
PUBLIC	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetClientRect
PUBLIC	?OffsetRect@CRect@@QAEXHH@Z			; CRect::OffsetRect
PUBLIC	?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z	; CDC::FrameRgn
PUBLIC	??0CBrush@@QAE@XZ				; CBrush::CBrush
PUBLIC	?CreateSolidBrush@CBrush@@QAEHK@Z		; CBrush::CreateSolidBrush
PUBLIC	??1CBrush@@UAE@XZ				; CBrush::~CBrush
PUBLIC	?OffsetRgn@CRgn@@QAEHHH@Z			; CRgn::OffsetRgn
EXTRN	?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::ScreenToClient
EXTRN	?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z:NEAR	; CDC::SelectClipRgn
EXTRN	?ExcludeClipRect@CDC@@QAEHPBUtagRECT@@@Z:NEAR	; CDC::ExcludeClipRect
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:NEAR	; CDC::FillSolidRect
xdata$x	SEGMENT
$T199326 DD	0ffffffffH
	DD	FLAT:$L199321
	DD	00H
	DD	FLAT:$L199322
$T199324 DD	019930520H
	DD	02H
	DD	FLAT:$T199326
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -76						; size = 4
_green$198066 = -72					; size = 4
_blue$198069 = -68					; size = 4
_red$198064 = -64					; size = 4
_brushHL$198063 = -60					; size = 8
_brushFg$ = -52						; size = 8
_rectClient$ = -44					; size = 16
_rect$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z PROC NEAR ; CBalloonHelp::DrawNonClientArea
; _this$ = ecx

; 650  : {

  01810	55		 push	 ebp
  01811	8b ec		 mov	 ebp, esp
  01813	6a ff		 push	 -1
  01815	68 00 00 00 00	 push	 __ehhandler$?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z
  0181a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01820	50		 push	 eax
  01821	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01828	83 ec 40	 sub	 esp, 64			; 00000040H
  0182b	56		 push	 esi
  0182c	89 4d b4	 mov	 DWORD PTR _this$[ebp], ecx

; 651  :    CRect rect;

  0182f	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  01832	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 652  :    GetWindowRect(&rect);

  01837	8d 45 e4	 lea	 eax, DWORD PTR _rect$[ebp]
  0183a	50		 push	 eax
  0183b	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  0183e	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 653  :    ScreenToClient(&rect);

  01843	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  01846	51		 push	 ecx
  01847	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  0184a	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 654  :    CRect rectClient;

  0184f	8d 4d d4	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  01852	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 655  :    GetClientRect(&rectClient);

  01857	8d 55 d4	 lea	 edx, DWORD PTR _rectClient$[ebp]
  0185a	52		 push	 edx
  0185b	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  0185e	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 656  :    rectClient.OffsetRect(-rect.left, -rect.top);

  01863	8b 45 e8	 mov	 eax, DWORD PTR _rect$[ebp+4]
  01866	f7 d8		 neg	 eax
  01868	50		 push	 eax
  01869	8b 4d e4	 mov	 ecx, DWORD PTR _rect$[ebp]
  0186c	f7 d9		 neg	 ecx
  0186e	51		 push	 ecx
  0186f	8d 4d d4	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  01872	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 657  :    rect.OffsetRect(-rect.left, -rect.top);

  01877	8b 55 e8	 mov	 edx, DWORD PTR _rect$[ebp+4]
  0187a	f7 da		 neg	 edx
  0187c	52		 push	 edx
  0187d	8b 45 e4	 mov	 eax, DWORD PTR _rect$[ebp]
  01880	f7 d8		 neg	 eax
  01882	50		 push	 eax
  01883	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  01886	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 658  :    pDC->ExcludeClipRect(&rectClient);

  0188b	8d 4d d4	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  0188e	51		 push	 ecx
  0188f	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01892	e8 00 00 00 00	 call	 ?ExcludeClipRect@CDC@@QAEHPBUtagRECT@@@Z ; CDC::ExcludeClipRect

; 659  :    pDC->FillSolidRect(&rect, m_crBackground);

  01897	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  0189a	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  018a0	50		 push	 eax
  018a1	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  018a4	51		 push	 ecx
  018a5	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  018a8	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 660  :    pDC->SelectClipRgn(NULL);

  018ad	6a 00		 push	 0
  018af	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  018b2	e8 00 00 00 00	 call	 ?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z ; CDC::SelectClipRgn

; 661  : 
; 662  :    ASSERT(NULL != m_rgnComplete.m_hObject);
; 663  :    CBrush   brushFg;

  018b7	8d 4d cc	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  018ba	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  018bf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 664  :    brushFg.CreateSolidBrush(m_crForeground);

  018c6	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  018c9	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  018cf	50		 push	 eax
  018d0	8d 4d cc	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  018d3	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 665  :    if ( m_unOptions & unSHOW_INNER_SHADOW )

  018d8	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  018db	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  018e1	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  018e7	0f 84 b9 01 00
	00		 je	 $L198062

; 666  :    {
; 667  :       CBrush   brushHL;

  018ed	8d 4d c4	 lea	 ecx, DWORD PTR _brushHL$198063[ebp]
  018f0	e8 00 00 00 00	 call	 ??0CBrush@@QAE@XZ	; CBrush::CBrush
  018f5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 668  :       // slightly lighter color
; 669  :       int red = 170 + GetRValue(m_crBackground)/3;

  018f9	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  018fc	0f b6 80 b4 00
	00 00		 movzx	 eax, BYTE PTR [eax+180]
  01903	99		 cdq
  01904	b9 03 00 00 00	 mov	 ecx, 3
  01909	f7 f9		 idiv	 ecx
  0190b	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  01910	89 45 c0	 mov	 DWORD PTR _red$198064[ebp], eax

; 670  :       int green = 170 + GetGValue(m_crBackground)/3;

  01913	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01916	0f b7 82 b4 00
	00 00		 movzx	 eax, WORD PTR [edx+180]
  0191d	c1 f8 08	 sar	 eax, 8
  01920	0f b6 c0	 movzx	 eax, al
  01923	99		 cdq
  01924	b9 03 00 00 00	 mov	 ecx, 3
  01929	f7 f9		 idiv	 ecx
  0192b	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  01930	89 45 b8	 mov	 DWORD PTR _green$198066[ebp], eax

; 671  :       int blue = 170 + GetBValue(m_crBackground)/3;

  01933	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01936	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0193c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0193f	0f b6 c0	 movzx	 eax, al
  01942	99		 cdq
  01943	b9 03 00 00 00	 mov	 ecx, 3
  01948	f7 f9		 idiv	 ecx
  0194a	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  0194f	89 45 bc	 mov	 DWORD PTR _blue$198069[ebp], eax

; 672  :       brushHL.CreateSolidBrush(RGB(red,green,blue));

  01952	0f b6 55 c0	 movzx	 edx, BYTE PTR _red$198064[ebp]
  01956	0f b6 45 b8	 movzx	 eax, BYTE PTR _green$198066[ebp]
  0195a	c1 e0 08	 shl	 eax, 8
  0195d	0b d0		 or	 edx, eax
  0195f	0f b6 4d bc	 movzx	 ecx, BYTE PTR _blue$198069[ebp]
  01963	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01966	0b d1		 or	 edx, ecx
  01968	52		 push	 edx
  01969	8d 4d c4	 lea	 ecx, DWORD PTR _brushHL$198063[ebp]
  0196c	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 673  :       m_rgnComplete.OffsetRgn(1,1);

  01971	6a 01		 push	 1
  01973	6a 01		 push	 1
  01975	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01978	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  0197e	e8 00 00 00 00	 call	 ?OffsetRgn@CRgn@@QAEHHH@Z ; CRgn::OffsetRgn

; 674  :       pDC->FrameRgn(&m_rgnComplete, &brushHL, 2, 2);

  01983	6a 02		 push	 2
  01985	6a 02		 push	 2
  01987	8d 55 c4	 lea	 edx, DWORD PTR _brushHL$198063[ebp]
  0198a	52		 push	 edx
  0198b	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  0198e	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  01993	50		 push	 eax
  01994	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01997	e8 00 00 00 00	 call	 ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ; CDC::FrameRgn

; 675  :       // slightly darker color
; 676  :       red = GetRValue(m_crForeground)/3 + GetRValue(m_crBackground)/3*2;

  0199c	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  0199f	0f b6 81 b8 00
	00 00		 movzx	 eax, BYTE PTR [ecx+184]
  019a6	99		 cdq
  019a7	b9 03 00 00 00	 mov	 ecx, 3
  019ac	f7 f9		 idiv	 ecx
  019ae	8b c8		 mov	 ecx, eax
  019b0	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  019b3	0f b6 82 b4 00
	00 00		 movzx	 eax, BYTE PTR [edx+180]
  019ba	99		 cdq
  019bb	be 03 00 00 00	 mov	 esi, 3
  019c0	f7 fe		 idiv	 esi
  019c2	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  019c5	89 45 c0	 mov	 DWORD PTR _red$198064[ebp], eax

; 677  :       green = GetGValue(m_crForeground)/3 + GetGValue(m_crBackground)/3*2;

  019c8	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  019cb	0f b7 91 b8 00
	00 00		 movzx	 edx, WORD PTR [ecx+184]
  019d2	c1 fa 08	 sar	 edx, 8
  019d5	0f b6 c2	 movzx	 eax, dl
  019d8	99		 cdq
  019d9	b9 03 00 00 00	 mov	 ecx, 3
  019de	f7 f9		 idiv	 ecx
  019e0	8b c8		 mov	 ecx, eax
  019e2	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  019e5	0f b7 82 b4 00
	00 00		 movzx	 eax, WORD PTR [edx+180]
  019ec	c1 f8 08	 sar	 eax, 8
  019ef	0f b6 c0	 movzx	 eax, al
  019f2	99		 cdq
  019f3	be 03 00 00 00	 mov	 esi, 3
  019f8	f7 fe		 idiv	 esi
  019fa	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  019fd	89 4d b8	 mov	 DWORD PTR _green$198066[ebp], ecx

; 678  :       blue = GetBValue(m_crForeground)/3 + GetBValue(m_crBackground)/3*2;

  01a00	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01a03	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  01a09	c1 e8 10	 shr	 eax, 16			; 00000010H
  01a0c	0f b6 c0	 movzx	 eax, al
  01a0f	99		 cdq
  01a10	b9 03 00 00 00	 mov	 ecx, 3
  01a15	f7 f9		 idiv	 ecx
  01a17	8b c8		 mov	 ecx, eax
  01a19	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01a1c	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  01a22	c1 e8 10	 shr	 eax, 16			; 00000010H
  01a25	0f b6 c0	 movzx	 eax, al
  01a28	99		 cdq
  01a29	be 03 00 00 00	 mov	 esi, 3
  01a2e	f7 fe		 idiv	 esi
  01a30	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  01a33	89 4d bc	 mov	 DWORD PTR _blue$198069[ebp], ecx

; 679  :       brushHL.DeleteObject();

  01a36	8d 4d c4	 lea	 ecx, DWORD PTR _brushHL$198063[ebp]
  01a39	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject

; 680  :       m_rgnComplete.OffsetRgn(-2,-2);

  01a3e	6a fe		 push	 -2			; fffffffeH
  01a40	6a fe		 push	 -2			; fffffffeH
  01a42	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01a45	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  01a4b	e8 00 00 00 00	 call	 ?OffsetRgn@CRgn@@QAEHHH@Z ; CRgn::OffsetRgn

; 681  :       brushHL.CreateSolidBrush(RGB(red,green,blue));

  01a50	0f b6 55 c0	 movzx	 edx, BYTE PTR _red$198064[ebp]
  01a54	0f b6 45 b8	 movzx	 eax, BYTE PTR _green$198066[ebp]
  01a58	c1 e0 08	 shl	 eax, 8
  01a5b	0b d0		 or	 edx, eax
  01a5d	0f b6 4d bc	 movzx	 ecx, BYTE PTR _blue$198069[ebp]
  01a61	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01a64	0b d1		 or	 edx, ecx
  01a66	52		 push	 edx
  01a67	8d 4d c4	 lea	 ecx, DWORD PTR _brushHL$198063[ebp]
  01a6a	e8 00 00 00 00	 call	 ?CreateSolidBrush@CBrush@@QAEHK@Z ; CBrush::CreateSolidBrush

; 682  :       pDC->FrameRgn(&m_rgnComplete, &brushHL, 2, 2);

  01a6f	6a 02		 push	 2
  01a71	6a 02		 push	 2
  01a73	8d 55 c4	 lea	 edx, DWORD PTR _brushHL$198063[ebp]
  01a76	52		 push	 edx
  01a77	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  01a7a	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  01a7f	50		 push	 eax
  01a80	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01a83	e8 00 00 00 00	 call	 ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ; CDC::FrameRgn

; 683  :       m_rgnComplete.OffsetRgn(1,1);

  01a88	6a 01		 push	 1
  01a8a	6a 01		 push	 1
  01a8c	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01a8f	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  01a95	e8 00 00 00 00	 call	 ?OffsetRgn@CRgn@@QAEHHH@Z ; CRgn::OffsetRgn

; 684  :    }

  01a9a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01a9e	8d 4d c4	 lea	 ecx, DWORD PTR _brushHL$198063[ebp]
  01aa1	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L198062:

; 685  :    // outline
; 686  :    pDC->FrameRgn(&m_rgnComplete, &brushFg, 1, 1);

  01aa6	6a 01		 push	 1
  01aa8	6a 01		 push	 1
  01aaa	8d 4d cc	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  01aad	51		 push	 ecx
  01aae	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01ab1	81 c2 cc 00 00
	00		 add	 edx, 204		; 000000ccH
  01ab7	52		 push	 edx
  01ab8	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01abb	e8 00 00 00 00	 call	 ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ; CDC::FrameRgn

; 687  : }

  01ac0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01ac7	8d 4d cc	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  01aca	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  01acf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01ad2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01ad9	5e		 pop	 esi
  01ada	8b e5		 mov	 esp, ebp
  01adc	5d		 pop	 ebp
  01add	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L199321:
  0010e	8d 4d cc	 lea	 ecx, DWORD PTR _brushFg$[ebp]
  00111	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
$L199322:
  00116	8d 4d c4	 lea	 ecx, DWORD PTR _brushHL$198063[ebp]
  00119	e9 00 00 00 00	 jmp	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
__ehhandler$?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z:
  0011e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199324
  00123	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawNonClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z ENDP	; CBalloonHelp::DrawNonClientArea
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T199328 = -16						; size = 8
_sizeHeader$ = -8					; size = 8
_pDC$ = 8						; size = 4
?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z PROC NEAR	; CBalloonHelp::DrawClientArea
; _this$ = ecx

; 691  : {

  01ae0	55		 push	 ebp
  01ae1	8b ec		 mov	 ebp, esp
  01ae3	83 ec 14	 sub	 esp, 20			; 00000014H
  01ae6	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 692  :    CSize sizeHeader = DrawHeader(pDC);

  01ae9	6a 01		 push	 1
  01aeb	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  01aee	50		 push	 eax
  01aef	8d 4d f8	 lea	 ecx, DWORD PTR _sizeHeader$[ebp]
  01af2	51		 push	 ecx
  01af3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01af6	8b 02		 mov	 eax, DWORD PTR [edx]
  01af8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01afb	ff 90 40 01 00
	00		 call	 DWORD PTR [eax+320]

; 693  :    DrawContent(pDC, sizeHeader.cy+nTIP_MARGIN);

  01b01	6a 01		 push	 1
  01b03	8b 4d fc	 mov	 ecx, DWORD PTR _sizeHeader$[ebp+4]
  01b06	83 c1 08	 add	 ecx, 8
  01b09	51		 push	 ecx
  01b0a	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  01b0d	52		 push	 edx
  01b0e	8d 45 f0	 lea	 eax, DWORD PTR $T199328[ebp]
  01b11	50		 push	 eax
  01b12	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01b15	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b17	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01b1a	ff 92 44 01 00
	00		 call	 DWORD PTR [edx+324]

; 694  : }

  01b20	8b e5		 mov	 esp, ebp
  01b22	5d		 pop	 ebp
  01b23	c2 04 00	 ret	 4
?DrawClientArea@CBalloonHelp@@MAEXPAVCDC@@@Z ENDP	; CBalloonHelp::DrawClientArea
_TEXT	ENDS
PUBLIC	??0CSize@@QAE@HH@Z				; CSize::CSize
PUBLIC	??BCImageList@@QBEPAU_IMAGELIST@@XZ		; CImageList::operator _IMAGELIST *
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?SetBkColor@CImageList@@QAEKK@Z			; CImageList::SetBkColor
PUBLIC	?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z	; CImageList::Draw
PUBLIC	?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
PUBLIC	?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z	; CDC::DrawFrameControl
EXTRN	?SetBkMode@CDC@@QAEHH@Z:NEAR			; CDC::SetBkMode
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:NEAR
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:NEAR
EXTRN	__imp__ImageList_GetIconSize@12:NEAR
EXTRN	?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:NEAR ; CWnd::GetWindowTextA
xdata$x	SEGMENT
$T199343 DD	0ffffffffH
	DD	FLAT:$L199339
$T199341 DD	019930520H
	DD	01H
	DD	FLAT:$T199343
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv194 = -120						; size = 4
tv143 = -116						; size = 4
tv81 = -112						; size = 4
_this$ = -108						; size = 4
$T199336 = -104						; size = 16
$T199333 = -88						; size = 8
$T199332 = -80						; size = 8
_rectTitle$198121 = -72					; size = 16
_pOldFont$198119 = -56					; size = 4
_nBtnWidth$198113 = -52					; size = 4
_x$198107 = -48						; size = 4
_y$198108 = -44						; size = 4
_strTitle$ = -40					; size = 4
_rectClient$ = -36					; size = 16
_sizeHdr$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
_bDraw$ = 16						; size = 1
?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z PROC NEAR ; CBalloonHelp::DrawHeader
; _this$ = ecx

; 698  : {

  01b30	55		 push	 ebp
  01b31	8b ec		 mov	 ebp, esp
  01b33	6a ff		 push	 -1
  01b35	68 00 00 00 00	 push	 __ehhandler$?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z
  01b3a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01b40	50		 push	 eax
  01b41	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01b48	83 ec 6c	 sub	 esp, 108		; 0000006cH
  01b4b	89 4d 94	 mov	 DWORD PTR _this$[ebp], ecx

; 699  :    CSize sizeHdr(0,0);

  01b4e	6a 00		 push	 0
  01b50	6a 00		 push	 0
  01b52	8d 4d ec	 lea	 ecx, DWORD PTR _sizeHdr$[ebp]
  01b55	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize

; 700  :    CRect rectClient;

  01b5a	8d 4d dc	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  01b5d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 701  :    GetClientRect(&rectClient);   // use this for positioning when drawing

  01b62	8d 45 dc	 lea	 eax, DWORD PTR _rectClient$[ebp]
  01b65	50		 push	 eax
  01b66	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01b69	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 702  :                                  // else if content is wider than title, centering wouldn't work
; 703  : 
; 704  :    // calc & draw icon
; 705  :    if ( NULL != m_ilIcon.m_hImageList )

  01b6e	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01b71	83 b9 a8 00 00
	00 00		 cmp	 DWORD PTR [ecx+168], 0
  01b78	0f 84 ae 00 00
	00		 je	 $L198106

; 706  :    {
; 707  :       int x = 0;

  01b7e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _x$198107[ebp], 0

; 708  :       int y = 0;

  01b85	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _y$198108[ebp], 0

; 709  :       ImageList_GetIconSize(m_ilIcon, &x, &y);

  01b8c	8d 55 d4	 lea	 edx, DWORD PTR _y$198108[ebp]
  01b8f	52		 push	 edx
  01b90	8d 45 d0	 lea	 eax, DWORD PTR _x$198107[ebp]
  01b93	50		 push	 eax
  01b94	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01b97	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  01b9d	e8 00 00 00 00	 call	 ??BCImageList@@QBEPAU_IMAGELIST@@XZ ; CImageList::operator _IMAGELIST *
  01ba2	50		 push	 eax
  01ba3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetIconSize@12

; 710  :       sizeHdr.cx += x;

  01ba9	8b 4d ec	 mov	 ecx, DWORD PTR _sizeHdr$[ebp]
  01bac	03 4d d0	 add	 ecx, DWORD PTR _x$198107[ebp]
  01baf	89 4d ec	 mov	 DWORD PTR _sizeHdr$[ebp], ecx

; 711  :       sizeHdr.cy = max(sizeHdr.cy, y);

  01bb2	8b 55 f0	 mov	 edx, DWORD PTR _sizeHdr$[ebp+4]
  01bb5	3b 55 d4	 cmp	 edx, DWORD PTR _y$198108[ebp]
  01bb8	7e 08		 jle	 SHORT $L199330
  01bba	8b 45 f0	 mov	 eax, DWORD PTR _sizeHdr$[ebp+4]
  01bbd	89 45 90	 mov	 DWORD PTR tv81[ebp], eax
  01bc0	eb 06		 jmp	 SHORT $L199331
$L199330:
  01bc2	8b 4d d4	 mov	 ecx, DWORD PTR _y$198108[ebp]
  01bc5	89 4d 90	 mov	 DWORD PTR tv81[ebp], ecx
$L199331:
  01bc8	8b 55 90	 mov	 edx, DWORD PTR tv81[ebp]
  01bcb	89 55 f0	 mov	 DWORD PTR _sizeHdr$[ebp+4], edx

; 712  :       m_ilIcon.SetBkColor(m_crBackground);

  01bce	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  01bd1	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  01bd7	51		 push	 ecx
  01bd8	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01bdb	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  01be1	e8 00 00 00 00	 call	 ?SetBkColor@CImageList@@QAEKK@Z ; CImageList::SetBkColor

; 713  :       if (bDraw)

  01be6	0f b6 55 10	 movzx	 edx, BYTE PTR _bDraw$[ebp]
  01bea	85 d2		 test	 edx, edx
  01bec	74 35		 je	 SHORT $L198109

; 714  :          m_ilIcon.Draw(pDC, 0, CPoint(0,0), ILD_NORMAL);//ILD_TRANSPARENT);

  01bee	6a 00		 push	 0
  01bf0	6a 00		 push	 0
  01bf2	8d 4d a8	 lea	 ecx, DWORD PTR $T199333[ebp]
  01bf5	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  01bfa	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bfc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01bff	89 4d b0	 mov	 DWORD PTR $T199332[ebp], ecx
  01c02	89 55 b4	 mov	 DWORD PTR $T199332[ebp+4], edx
  01c05	6a 00		 push	 0
  01c07	8b 45 b4	 mov	 eax, DWORD PTR $T199332[ebp+4]
  01c0a	50		 push	 eax
  01c0b	8b 4d b0	 mov	 ecx, DWORD PTR $T199332[ebp]
  01c0e	51		 push	 ecx
  01c0f	6a 00		 push	 0
  01c11	8b 55 0c	 mov	 edx, DWORD PTR _pDC$[ebp]
  01c14	52		 push	 edx
  01c15	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01c18	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  01c1e	e8 00 00 00 00	 call	 ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ; CImageList::Draw
$L198109:

; 715  :       rectClient.left += x;

  01c23	8b 45 dc	 mov	 eax, DWORD PTR _rectClient$[ebp]
  01c26	03 45 d0	 add	 eax, DWORD PTR _x$198107[ebp]
  01c29	89 45 dc	 mov	 DWORD PTR _rectClient$[ebp], eax
$L198106:

; 716  :    }
; 717  : 
; 718  :    // calc & draw close button
; 719  :    if ( m_unOptions & unSHOW_CLOSE_BUTTON )

  01c2c	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01c2f	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01c35	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  01c3b	0f 84 82 00 00
	00		 je	 $L198112

; 720  :    {
; 721  :       int nBtnWidth = nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  01c41	c7 45 cc 0e 00
	00 00		 mov	 DWORD PTR _nBtnWidth$198113[ebp], 14 ; 0000000eH

; 722  :       // if something is already in the header (icon) leave space
; 723  :       if ( sizeHdr.cx > 0 )

  01c48	83 7d ec 00	 cmp	 DWORD PTR _sizeHdr$[ebp], 0
  01c4c	7e 09		 jle	 SHORT $L198114

; 724  :          sizeHdr.cx += nTIP_MARGIN;

  01c4e	8b 45 ec	 mov	 eax, DWORD PTR _sizeHdr$[ebp]
  01c51	83 c0 08	 add	 eax, 8
  01c54	89 45 ec	 mov	 DWORD PTR _sizeHdr$[ebp], eax
$L198114:

; 725  :       sizeHdr.cx += nBtnWidth;

  01c57	8b 4d ec	 mov	 ecx, DWORD PTR _sizeHdr$[ebp]
  01c5a	03 4d cc	 add	 ecx, DWORD PTR _nBtnWidth$198113[ebp]
  01c5d	89 4d ec	 mov	 DWORD PTR _sizeHdr$[ebp], ecx

; 726  :       sizeHdr.cy = max(sizeHdr.cy, ::GetSystemMetrics(SM_CYSIZE));

  01c60	6a 1f		 push	 31			; 0000001fH
  01c62	e8 00 00 00 00	 call	 _xGetSystemMetrics@4
  01c67	39 45 f0	 cmp	 DWORD PTR _sizeHdr$[ebp+4], eax
  01c6a	7e 08		 jle	 SHORT $L199334
  01c6c	8b 55 f0	 mov	 edx, DWORD PTR _sizeHdr$[ebp+4]
  01c6f	89 55 8c	 mov	 DWORD PTR tv143[ebp], edx
  01c72	eb 0a		 jmp	 SHORT $L199335
$L199334:
  01c74	6a 1f		 push	 31			; 0000001fH
  01c76	e8 00 00 00 00	 call	 _xGetSystemMetrics@4
  01c7b	89 45 8c	 mov	 DWORD PTR tv143[ebp], eax
$L199335:
  01c7e	8b 45 8c	 mov	 eax, DWORD PTR tv143[ebp]
  01c81	89 45 f0	 mov	 DWORD PTR _sizeHdr$[ebp+4], eax

; 727  :       if (bDraw)

  01c84	0f b6 4d 10	 movzx	 ecx, BYTE PTR _bDraw$[ebp]
  01c88	85 c9		 test	 ecx, ecx
  01c8a	74 2e		 je	 SHORT $L198115

; 728  :          pDC->DrawFrameControl(CRect(rectClient.right-nBtnWidth,0,rectClient.right,nCYCloseBtn/*::GetSystemMetrics(SM_CYSIZE)*/), DFC_CAPTION, DFCS_CAPTIONCLOSE|DFCS_FLAT);

  01c8c	68 00 40 00 00	 push	 16384			; 00004000H
  01c91	6a 01		 push	 1
  01c93	6a 0e		 push	 14			; 0000000eH
  01c95	8b 55 e4	 mov	 edx, DWORD PTR _rectClient$[ebp+8]
  01c98	52		 push	 edx
  01c99	6a 00		 push	 0
  01c9b	8b 45 e4	 mov	 eax, DWORD PTR _rectClient$[ebp+8]
  01c9e	2b 45 cc	 sub	 eax, DWORD PTR _nBtnWidth$198113[ebp]
  01ca1	50		 push	 eax
  01ca2	8d 4d 98	 lea	 ecx, DWORD PTR $T199336[ebp]
  01ca5	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  01caa	8b c8		 mov	 ecx, eax
  01cac	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  01cb1	50		 push	 eax
  01cb2	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01cb5	e8 00 00 00 00	 call	 ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawFrameControl
$L198115:

; 729  :       rectClient.right -= nBtnWidth;

  01cba	8b 4d e4	 mov	 ecx, DWORD PTR _rectClient$[ebp+8]
  01cbd	2b 4d cc	 sub	 ecx, DWORD PTR _nBtnWidth$198113[ebp]
  01cc0	89 4d e4	 mov	 DWORD PTR _rectClient$[ebp+8], ecx
$L198112:

; 730  :    }
; 731  : 
; 732  :    // calc title size
; 733  :    CString strTitle;

  01cc3	8d 4d d8	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  01cc6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01ccc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 734  :    GetWindowText(strTitle);

  01cd3	8d 55 d8	 lea	 edx, DWORD PTR _strTitle$[ebp]
  01cd6	52		 push	 edx
  01cd7	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01cda	e8 00 00 00 00	 call	 ?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CWnd::GetWindowTextA

; 735  :    if ( !strTitle.IsEmpty() )

  01cdf	8d 4d d8	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  01ce2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  01ce8	0f b6 c0	 movzx	 eax, al
  01ceb	85 c0		 test	 eax, eax
  01ced	0f 85 cb 00 00
	00		 jne	 $L198118

; 736  :    {
; 737  :       CFont* pOldFont = pDC->SelectObject(m_pTitleFont);

  01cf3	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01cf6	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  01cfc	52		 push	 edx
  01cfd	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  01d00	8b 10		 mov	 edx, DWORD PTR [eax]
  01d02	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01d05	ff 52 30	 call	 DWORD PTR [edx+48]
  01d08	89 45 c8	 mov	 DWORD PTR _pOldFont$198119[ebp], eax

; 738  : 
; 739  :       // if something is already in the header (icon or close button) leave space
; 740  :       if ( sizeHdr.cx > 0 ) 

  01d0b	83 7d ec 00	 cmp	 DWORD PTR _sizeHdr$[ebp], 0
  01d0f	7e 09		 jle	 SHORT $L198120

; 741  :          sizeHdr.cx += nTIP_MARGIN;

  01d11	8b 45 ec	 mov	 eax, DWORD PTR _sizeHdr$[ebp]
  01d14	83 c0 08	 add	 eax, 8
  01d17	89 45 ec	 mov	 DWORD PTR _sizeHdr$[ebp], eax
$L198120:

; 742  :       CRect rectTitle(0,0,0,0);

  01d1a	6a 00		 push	 0
  01d1c	6a 00		 push	 0
  01d1e	6a 00		 push	 0
  01d20	6a 00		 push	 0
  01d22	8d 4d b8	 lea	 ecx, DWORD PTR _rectTitle$198121[ebp]
  01d25	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 743  :       pDC->DrawText(strTitle, &rectTitle, DT_CALCRECT | DT_NOPREFIX | DT_EXPANDTABS | DT_SINGLELINE);

  01d2a	68 60 0c 00 00	 push	 3168			; 00000c60H
  01d2f	8d 4d b8	 lea	 ecx, DWORD PTR _rectTitle$198121[ebp]
  01d32	51		 push	 ecx
  01d33	8d 55 d8	 lea	 edx, DWORD PTR _strTitle$[ebp]
  01d36	52		 push	 edx
  01d37	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01d3a	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 744  :       sizeHdr.cx += rectTitle.Width();

  01d3f	8d 4d b8	 lea	 ecx, DWORD PTR _rectTitle$198121[ebp]
  01d42	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  01d47	03 45 ec	 add	 eax, DWORD PTR _sizeHdr$[ebp]
  01d4a	89 45 ec	 mov	 DWORD PTR _sizeHdr$[ebp], eax

; 745  :       sizeHdr.cy = max(sizeHdr.cy, rectTitle.Height());

  01d4d	8d 4d b8	 lea	 ecx, DWORD PTR _rectTitle$198121[ebp]
  01d50	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  01d55	39 45 f0	 cmp	 DWORD PTR _sizeHdr$[ebp+4], eax
  01d58	7e 08		 jle	 SHORT $L199337
  01d5a	8b 45 f0	 mov	 eax, DWORD PTR _sizeHdr$[ebp+4]
  01d5d	89 45 88	 mov	 DWORD PTR tv194[ebp], eax
  01d60	eb 0b		 jmp	 SHORT $L199338
$L199337:
  01d62	8d 4d b8	 lea	 ecx, DWORD PTR _rectTitle$198121[ebp]
  01d65	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  01d6a	89 45 88	 mov	 DWORD PTR tv194[ebp], eax
$L199338:
  01d6d	8b 4d 88	 mov	 ecx, DWORD PTR tv194[ebp]
  01d70	89 4d f0	 mov	 DWORD PTR _sizeHdr$[ebp+4], ecx

; 746  : 
; 747  :       // draw title
; 748  :       if ( bDraw )

  01d73	0f b6 55 10	 movzx	 edx, BYTE PTR _bDraw$[ebp]
  01d77	85 d2		 test	 edx, edx
  01d79	74 34		 je	 SHORT $L198122

; 749  :       {
; 750  :          pDC->SetBkMode(TRANSPARENT);

  01d7b	6a 01		 push	 1
  01d7d	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01d80	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 751  :          pDC->SetTextColor(m_crForeground);

  01d85	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  01d88	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  01d8e	51		 push	 ecx
  01d8f	8b 55 0c	 mov	 edx, DWORD PTR _pDC$[ebp]
  01d92	8b 02		 mov	 eax, DWORD PTR [edx]
  01d94	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01d97	ff 50 38	 call	 DWORD PTR [eax+56]

; 752  :          pDC->DrawText(strTitle, &rectClient, DT_CENTER | DT_NOPREFIX  | DT_EXPANDTABS | DT_SINGLELINE);

  01d9a	68 61 08 00 00	 push	 2145			; 00000861H
  01d9f	8d 4d dc	 lea	 ecx, DWORD PTR _rectClient$[ebp]
  01da2	51		 push	 ecx
  01da3	8d 55 d8	 lea	 edx, DWORD PTR _strTitle$[ebp]
  01da6	52		 push	 edx
  01da7	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01daa	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198122:

; 753  :       }
; 754  : 
; 755  :       // cleanup
; 756  :       pDC->SelectObject(pOldFont);

  01daf	8b 45 c8	 mov	 eax, DWORD PTR _pOldFont$198119[ebp]
  01db2	50		 push	 eax
  01db3	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01db6	8b 11		 mov	 edx, DWORD PTR [ecx]
  01db8	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01dbb	ff 52 30	 call	 DWORD PTR [edx+48]
$L198118:

; 757  :    }
; 758  : 
; 759  :    return sizeHdr;

  01dbe	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01dc1	8b 4d ec	 mov	 ecx, DWORD PTR _sizeHdr$[ebp]
  01dc4	89 08		 mov	 DWORD PTR [eax], ecx
  01dc6	8b 55 f0	 mov	 edx, DWORD PTR _sizeHdr$[ebp+4]
  01dc9	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01dcc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01dd3	8d 4d d8	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  01dd6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  01ddc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 760  : }

  01ddf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01de2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01de9	8b e5		 mov	 esp, ebp
  01deb	5d		 pop	 ebp
  01dec	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L199339:
  00128	8d 4d d8	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  0012b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z:
  00131	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199341
  00136	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawHeader@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@_N@Z ENDP ; CBalloonHelp::DrawHeader
PUBLIC	?Size@CRect@@QBE?AVCSize@@XZ			; CRect::Size
PUBLIC	?SetRectEmpty@CRect@@QAEXXZ			; CRect::SetRectEmpty
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rectContent$ = -20					; size = 16
_pOldFont$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
_nTop$ = 16						; size = 4
_bDraw$ = 20						; size = 1
?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z PROC NEAR ; CBalloonHelp::DrawContent
; _this$ = ecx

; 764  : {

  01df0	55		 push	 ebp
  01df1	8b ec		 mov	 ebp, esp
  01df3	83 ec 18	 sub	 esp, 24			; 00000018H
  01df6	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 765  :    CRect rectContent;

  01df9	8d 4d ec	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  01dfc	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 766  :    GetAnchorScreenBounds(rectContent);

  01e01	8d 45 ec	 lea	 eax, DWORD PTR _rectContent$[ebp]
  01e04	50		 push	 eax
  01e05	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e08	e8 00 00 00 00	 call	 ?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds

; 767  :    rectContent.OffsetRect(-rectContent.left, -rectContent.top);

  01e0d	8b 4d f0	 mov	 ecx, DWORD PTR _rectContent$[ebp+4]
  01e10	f7 d9		 neg	 ecx
  01e12	51		 push	 ecx
  01e13	8b 55 ec	 mov	 edx, DWORD PTR _rectContent$[ebp]
  01e16	f7 da		 neg	 edx
  01e18	52		 push	 edx
  01e19	8d 4d ec	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  01e1c	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 768  :    rectContent.top = nTop;

  01e21	8b 45 10	 mov	 eax, DWORD PTR _nTop$[ebp]
  01e24	89 45 f0	 mov	 DWORD PTR _rectContent$[ebp+4], eax

; 769  : 
; 770  :    // limit to half screen width
; 771  :    rectContent.right -= rectContent.Width()/2;

  01e27	8d 4d ec	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  01e2a	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  01e2f	99		 cdq
  01e30	2b c2		 sub	 eax, edx
  01e32	d1 f8		 sar	 eax, 1
  01e34	8b 4d f4	 mov	 ecx, DWORD PTR _rectContent$[ebp+8]
  01e37	2b c8		 sub	 ecx, eax
  01e39	89 4d f4	 mov	 DWORD PTR _rectContent$[ebp+8], ecx

; 772  : 
; 773  :    // calc size
; 774  :    CFont* pOldFont = pDC->SelectObject(m_pContentFont);

  01e3c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01e3f	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  01e45	50		 push	 eax
  01e46	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01e49	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e4b	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01e4e	ff 52 30	 call	 DWORD PTR [edx+48]
  01e51	89 45 fc	 mov	 DWORD PTR _pOldFont$[ebp], eax

; 775  :    if ( !m_strContent.IsEmpty() )

  01e54	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e57	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  01e5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  01e63	0f b6 c0	 movzx	 eax, al
  01e66	85 c0		 test	 eax, eax
  01e68	75 1d		 jne	 SHORT $L198132

; 776  :       pDC->DrawText(m_strContent, &rectContent, DT_CALCRECT | DT_LEFT | DT_NOPREFIX | DT_EXPANDTABS | DT_WORDBREAK);

  01e6a	68 50 0c 00 00	 push	 3152			; 00000c50H
  01e6f	8d 4d ec	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  01e72	51		 push	 ecx
  01e73	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01e76	81 c2 90 00 00
	00		 add	 edx, 144		; 00000090H
  01e7c	52		 push	 edx
  01e7d	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01e80	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA

; 777  :    else

  01e85	eb 08		 jmp	 SHORT $L198133
$L198132:

; 778  :       rectContent.SetRectEmpty();   // don't want to leave half the screen for empty strings ;)

  01e87	8d 4d ec	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  01e8a	e8 00 00 00 00	 call	 ?SetRectEmpty@CRect@@QAEXXZ ; CRect::SetRectEmpty
$L198133:

; 779  :    
; 780  :    // draw
; 781  :    if (bDraw)

  01e8f	0f b6 45 14	 movzx	 eax, BYTE PTR _bDraw$[ebp]
  01e93	85 c0		 test	 eax, eax
  01e95	74 3a		 je	 SHORT $L198134

; 782  :    {
; 783  :       pDC->SetBkMode(TRANSPARENT);

  01e97	6a 01		 push	 1
  01e99	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01e9c	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 784  :       pDC->SetTextColor(m_crForeground);

  01ea1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ea4	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  01eaa	52		 push	 edx
  01eab	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  01eae	8b 10		 mov	 edx, DWORD PTR [eax]
  01eb0	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01eb3	ff 52 38	 call	 DWORD PTR [edx+56]

; 785  :       pDC->DrawText(m_strContent, &rectContent, DT_LEFT | DT_NOPREFIX | DT_WORDBREAK | DT_EXPANDTABS);

  01eb6	68 50 08 00 00	 push	 2128			; 00000850H
  01ebb	8d 45 ec	 lea	 eax, DWORD PTR _rectContent$[ebp]
  01ebe	50		 push	 eax
  01ebf	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ec2	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  01ec8	51		 push	 ecx
  01ec9	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01ecc	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextA
$L198134:

; 786  :    }
; 787  : 
; 788  :    // cleanup
; 789  :    pDC->SelectObject(pOldFont);

  01ed1	8b 55 fc	 mov	 edx, DWORD PTR _pOldFont$[ebp]
  01ed4	52		 push	 edx
  01ed5	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  01ed8	8b 10		 mov	 edx, DWORD PTR [eax]
  01eda	8b 4d 0c	 mov	 ecx, DWORD PTR _pDC$[ebp]
  01edd	ff 52 30	 call	 DWORD PTR [edx+48]

; 790  : 
; 791  :    return rectContent.Size();

  01ee0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01ee3	50		 push	 eax
  01ee4	8d 4d ec	 lea	 ecx, DWORD PTR _rectContent$[ebp]
  01ee7	e8 00 00 00 00	 call	 ?Size@CRect@@QBE?AVCSize@@XZ ; CRect::Size
  01eec	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 792  : }

  01eef	8b e5		 mov	 esp, ebp
  01ef1	5d		 pop	 ebp
  01ef2	c2 10 00	 ret	 16			; 00000010H
?DrawContent@CBalloonHelp@@MAE?AVCSize@@PAVCDC@@H_N@Z ENDP ; CBalloonHelp::DrawContent
_TEXT	ENDS
PUBLIC	?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcHeaderSize
PUBLIC	?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcContentSize
PUBLIC	?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ	; CBalloonHelp::CalcClientSize
EXTRN	??0CWindowDC@@QAE@PAVCWnd@@@Z:NEAR		; CWindowDC::CWindowDC
EXTRN	??1CWindowDC@@UAE@XZ:NEAR			; CWindowDC::~CWindowDC
xdata$x	SEGMENT
$T199352 DD	0ffffffffH
	DD	FLAT:$L199348
$T199350 DD	019930520H
	DD	01H
	DD	FLAT:$T199352
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv80 = -56						; size = 4
_this$ = -52						; size = 4
_sizeHeader$ = -48					; size = 8
_dc$ = -40						; size = 20
_sizeContent$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ PROC NEAR	; CBalloonHelp::CalcClientSize
; _this$ = ecx

; 796  : {

  01f00	55		 push	 ebp
  01f01	8b ec		 mov	 ebp, esp
  01f03	6a ff		 push	 -1
  01f05	68 00 00 00 00	 push	 __ehhandler$?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ
  01f0a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01f10	50		 push	 eax
  01f11	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01f18	83 ec 2c	 sub	 esp, 44			; 0000002cH
  01f1b	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 797  :    ASSERT(NULL != m_hWnd);
; 798  :    CWindowDC dc(this);

  01f1e	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  01f21	50		 push	 eax
  01f22	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  01f25	e8 00 00 00 00	 call	 ??0CWindowDC@@QAE@PAVCWnd@@@Z ; CWindowDC::CWindowDC
  01f2a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 799  : 
; 800  :    CSize sizeHeader = CalcHeaderSize(&dc);

  01f31	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  01f34	51		 push	 ecx
  01f35	8d 55 d0	 lea	 edx, DWORD PTR _sizeHeader$[ebp]
  01f38	52		 push	 edx
  01f39	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f3c	e8 00 00 00 00	 call	 ?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcHeaderSize

; 801  :    CSize sizeContent = CalcContentSize(&dc);

  01f41	8d 45 d8	 lea	 eax, DWORD PTR _dc$[ebp]
  01f44	50		 push	 eax
  01f45	8d 4d ec	 lea	 ecx, DWORD PTR _sizeContent$[ebp]
  01f48	51		 push	 ecx
  01f49	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f4c	e8 00 00 00 00	 call	 ?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ; CBalloonHelp::CalcContentSize

; 802  : 
; 803  :    return CSize(max(sizeHeader.cx,sizeContent.cx), sizeHeader.cy + nTIP_MARGIN + sizeContent.cy);

  01f51	8b 55 d0	 mov	 edx, DWORD PTR _sizeHeader$[ebp]
  01f54	3b 55 ec	 cmp	 edx, DWORD PTR _sizeContent$[ebp]
  01f57	7e 08		 jle	 SHORT $L199346
  01f59	8b 45 d0	 mov	 eax, DWORD PTR _sizeHeader$[ebp]
  01f5c	89 45 c8	 mov	 DWORD PTR tv80[ebp], eax
  01f5f	eb 06		 jmp	 SHORT $L199347
$L199346:
  01f61	8b 4d ec	 mov	 ecx, DWORD PTR _sizeContent$[ebp]
  01f64	89 4d c8	 mov	 DWORD PTR tv80[ebp], ecx
$L199347:
  01f67	8b 55 f0	 mov	 edx, DWORD PTR _sizeContent$[ebp+4]
  01f6a	8b 45 d4	 mov	 eax, DWORD PTR _sizeHeader$[ebp+4]
  01f6d	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  01f71	51		 push	 ecx
  01f72	8b 55 c8	 mov	 edx, DWORD PTR tv80[ebp]
  01f75	52		 push	 edx
  01f76	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01f79	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize
  01f7e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01f85	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  01f88	e8 00 00 00 00	 call	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
  01f8d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 804  : }

  01f90	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01f93	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01f9a	8b e5		 mov	 esp, ebp
  01f9c	5d		 pop	 ebp
  01f9d	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L199348:
  0013b	8d 4d d8	 lea	 ecx, DWORD PTR _dc$[ebp]
  0013e	e9 00 00 00 00	 jmp	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
__ehhandler$?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ:
  00143	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199350
  00148	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ ENDP	; CBalloonHelp::CalcClientSize
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.h
;	COMDAT ?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z PROC NEAR ; CBalloonHelp::CalcHeaderSize, COMDAT
; _this$ = ecx

; 221  :    CSize CalcHeaderSize(CDC* pDC) { return DrawHeader(pDC, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	ff 90 40 01 00
	00		 call	 DWORD PTR [eax+320]
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?CalcHeaderSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ENDP ; CBalloonHelp::CalcHeaderSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z PROC NEAR ; CBalloonHelp::CalcContentSize, COMDAT
; _this$ = ecx

; 223  :    CSize CalcContentSize(CDC* pDC) { return DrawContent(pDC, 0, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	8b 02		 mov	 eax, DWORD PTR [edx]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	ff 90 44 01 00
	00		 call	 DWORD PTR [eax+324]
  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?CalcContentSize@CBalloonHelp@@IAE?AVCSize@@PAVCDC@@@Z ENDP ; CBalloonHelp::CalcContentSize
_TEXT	ENDS
PUBLIC	?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ	; CBalloonHelp::CalcWindowSize
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_size$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ PROC NEAR	; CBalloonHelp::CalcWindowSize
; _this$ = ecx

; 808  : {

  01fa0	55		 push	 ebp
  01fa1	8b ec		 mov	 ebp, esp
  01fa3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01fa6	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :    CSize size = CalcClientSize();

  01fa9	8d 45 f8	 lea	 eax, DWORD PTR _size$[ebp]
  01fac	50		 push	 eax
  01fad	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01fb0	e8 00 00 00 00	 call	 ?CalcClientSize@CBalloonHelp@@IAE?AVCSize@@XZ ; CBalloonHelp::CalcClientSize

; 810  :    size.cx += nTIP_MARGIN*2;

  01fb5	8b 4d f8	 mov	 ecx, DWORD PTR _size$[ebp]
  01fb8	83 c1 10	 add	 ecx, 16			; 00000010H
  01fbb	89 4d f8	 mov	 DWORD PTR _size$[ebp], ecx

; 811  :    size.cy += nTIP_TAIL+nTIP_MARGIN*2;

  01fbe	8b 55 fc	 mov	 edx, DWORD PTR _size$[ebp+4]
  01fc1	83 c2 24	 add	 edx, 36			; 00000024H
  01fc4	89 55 fc	 mov	 DWORD PTR _size$[ebp+4], edx

; 812  :    //size.cx = max(size.cx, nTIP_MARGIN*2+nTIP_TAIL*4);
; 813  :    return size;

  01fc7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01fca	8b 4d f8	 mov	 ecx, DWORD PTR _size$[ebp]
  01fcd	89 08		 mov	 DWORD PTR [eax], ecx
  01fcf	8b 55 fc	 mov	 edx, DWORD PTR _size$[ebp+4]
  01fd2	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01fd5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 814  : }

  01fd8	8b e5		 mov	 esp, ebp
  01fda	5d		 pop	 ebp
  01fdb	c2 04 00	 ret	 4
?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ ENDP	; CBalloonHelp::CalcWindowSize
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CPoint@@QAE@XZ				; CPoint::CPoint
PUBLIC	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
PUBLIC	?CreateRectRgn@CRgn@@QAEHHHHH@Z			; CRgn::CreateRectRgn
PUBLIC	?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z	; CRgn::CreatePolygonRgn
PUBLIC	?CombineRgn@CRgn@@QAEHPAV1@0H@Z			; CRgn::CombineRgn
PUBLIC	?CopyRgn@CRgn@@QAEHPAV1@@Z			; CRgn::CopyRgn
PUBLIC	?EqualRgn@CRgn@@QBEHPAV1@@Z			; CRgn::EqualRgn
PUBLIC	?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z		; CWnd::SetWindowRgn
EXTRN	?Detach@CGdiObject@@QAEPAXXZ:NEAR		; CGdiObject::Detach
EXTRN	?MoveWindow@CWnd@@QAEXHHHHH@Z:NEAR		; CWnd::MoveWindow
xdata$x	SEGMENT
$T199366 DD	0ffffffffH
	DD	FLAT:$L199359
	DD	00H
	DD	FLAT:$L199360
	DD	01H
	DD	FLAT:$L199361
$T199363 DD	019930520H
	DD	03H
	DD	FLAT:$T199366
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
tv80 = -132						; size = 4
_this$ = -128						; size = 4
_ptTail$ = -124						; size = 24
_ptTopLeft$ = -100					; size = 8
_nAdjustY$ = -92					; size = 4
_ptBottomRight$ = -88					; size = 8
_rectScreen$ = -80					; size = 16
_regionRound$ = -64					; size = 8
_ptAnchor$ = -56					; size = 8
_sizeWnd$ = -48						; size = 8
_region$ = -40						; size = 8
_nAdjustX$ = -32					; size = 4
_regionComplete$ = -28					; size = 8
_ptOffs$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
?PositionWindow@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::PositionWindow
; _this$ = ecx

; 821  : {

  01fe0	55		 push	 ebp
  01fe1	8b ec		 mov	 ebp, esp
  01fe3	6a ff		 push	 -1
  01fe5	68 00 00 00 00	 push	 __ehhandler$?PositionWindow@CBalloonHelp@@IAEXXZ
  01fea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01ff0	50		 push	 eax
  01ff1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01ff8	83 ec 78	 sub	 esp, 120		; 00000078H
  01ffb	89 4d 80	 mov	 DWORD PTR _this$[ebp], ecx

; 822  :    CSize sizeWnd = CalcWindowSize();

  01ffe	8d 45 d0	 lea	 eax, DWORD PTR _sizeWnd$[ebp]
  02001	50		 push	 eax
  02002	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  02005	e8 00 00 00 00	 call	 ?CalcWindowSize@CBalloonHelp@@IAE?AVCSize@@XZ ; CBalloonHelp::CalcWindowSize

; 823  : 
; 824  :    CPoint ptTail[3];

  0200a	68 00 00 00 00	 push	 OFFSET FLAT:??0CPoint@@QAE@XZ ; CPoint::CPoint
  0200f	6a 03		 push	 3
  02011	6a 08		 push	 8
  02013	8d 4d 84	 lea	 ecx, DWORD PTR _ptTail$[ebp]
  02016	51		 push	 ecx
  02017	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z

; 825  :    CPoint ptTopLeft(0,0);

  0201c	6a 00		 push	 0
  0201e	6a 00		 push	 0
  02020	8d 4d 9c	 lea	 ecx, DWORD PTR _ptTopLeft$[ebp]
  02023	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 826  :    CPoint ptBottomRight(sizeWnd.cx, sizeWnd.cy);

  02028	8b 55 d4	 mov	 edx, DWORD PTR _sizeWnd$[ebp+4]
  0202b	52		 push	 edx
  0202c	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  0202f	50		 push	 eax
  02030	8d 4d a8	 lea	 ecx, DWORD PTR _ptBottomRight$[ebp]
  02033	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 827  : 
; 828  :    // force recalculation of desktop
; 829  :    m_screenRect.SetRectEmpty();

  02038	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0203b	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  02041	e8 00 00 00 00	 call	 ?SetRectEmpty@CRect@@QAEXXZ ; CRect::SetRectEmpty

; 830  : 
; 831  :    switch (GetBalloonQuadrant())

  02046	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  02049	e8 00 00 00 00	 call	 ?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ; CBalloonHelp::GetBalloonQuadrant
  0204e	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  02054	83 bd 7c ff ff
	ff 03		 cmp	 DWORD PTR tv80[ebp], 3
  0205b	0f 87 51 01 00
	00		 ja	 $L198163
  02061	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv80[ebp]
  02067	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L199365[ecx*4]
$L198166:

; 832  :    {
; 833  :    case BQ_TOPLEFT:
; 834  :       ptTopLeft.y = nTIP_TAIL;

  0206e	c7 45 a0 14 00
	00 00		 mov	 DWORD PTR _ptTopLeft$[ebp+4], 20 ; 00000014H

; 835  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4 + nTIP_TAIL;

  02075	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02078	83 e8 14	 sub	 eax, 20			; 00000014H
  0207b	99		 cdq
  0207c	83 e2 03	 and	 edx, 3
  0207f	03 c2		 add	 eax, edx
  02081	c1 f8 02	 sar	 eax, 2
  02084	83 c0 14	 add	 eax, 20			; 00000014H
  02087	89 45 84	 mov	 DWORD PTR _ptTail$[ebp], eax

; 836  :       ptTail[0].y = nTIP_TAIL+1;

  0208a	c7 45 88 15 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+4], 21 ; 00000015H

; 837  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4;

  02091	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02094	83 e8 14	 sub	 eax, 20			; 00000014H
  02097	99		 cdq
  02098	83 e2 03	 and	 edx, 3
  0209b	03 c2		 add	 eax, edx
  0209d	c1 f8 02	 sar	 eax, 2
  020a0	89 45 94	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 838  :       ptTail[2].y = ptTail[0].y;

  020a3	8b 55 88	 mov	 edx, DWORD PTR _ptTail$[ebp+4]
  020a6	89 55 98	 mov	 DWORD PTR _ptTail$[ebp+20], edx

; 839  :       ptTail[1].x = ptTail[2].x;

  020a9	8b 45 94	 mov	 eax, DWORD PTR _ptTail$[ebp+16]
  020ac	89 45 8c	 mov	 DWORD PTR _ptTail$[ebp+8], eax

; 840  :       ptTail[1].y = 1;

  020af	c7 45 90 01 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+12], 1

; 841  :       break;

  020b6	e9 f7 00 00 00	 jmp	 $L198163
$L198167:

; 842  :    case BQ_TOPRIGHT:
; 843  :       ptTopLeft.y = nTIP_TAIL;

  020bb	c7 45 a0 14 00
	00 00		 mov	 DWORD PTR _ptTopLeft$[ebp+4], 20 ; 00000014H

; 844  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4*3;

  020c2	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  020c5	83 e8 14	 sub	 eax, 20			; 00000014H
  020c8	99		 cdq
  020c9	83 e2 03	 and	 edx, 3
  020cc	03 c2		 add	 eax, edx
  020ce	c1 f8 02	 sar	 eax, 2
  020d1	6b c0 03	 imul	 eax, 3
  020d4	89 45 84	 mov	 DWORD PTR _ptTail$[ebp], eax

; 845  :       ptTail[0].y = nTIP_TAIL+1;

  020d7	c7 45 88 15 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+4], 21 ; 00000015H

; 846  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4*3 + nTIP_TAIL;

  020de	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  020e1	83 e8 14	 sub	 eax, 20			; 00000014H
  020e4	99		 cdq
  020e5	83 e2 03	 and	 edx, 3
  020e8	03 c2		 add	 eax, edx
  020ea	c1 f8 02	 sar	 eax, 2
  020ed	6b c0 03	 imul	 eax, 3
  020f0	83 c0 14	 add	 eax, 20			; 00000014H
  020f3	89 45 94	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 847  :       ptTail[2].y = ptTail[0].y;

  020f6	8b 4d 88	 mov	 ecx, DWORD PTR _ptTail$[ebp+4]
  020f9	89 4d 98	 mov	 DWORD PTR _ptTail$[ebp+20], ecx

; 848  :       ptTail[1].x = ptTail[2].x;

  020fc	8b 55 94	 mov	 edx, DWORD PTR _ptTail$[ebp+16]
  020ff	89 55 8c	 mov	 DWORD PTR _ptTail$[ebp+8], edx

; 849  :       ptTail[1].y = 1;

  02102	c7 45 90 01 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+12], 1

; 850  :       break;

  02109	e9 a4 00 00 00	 jmp	 $L198163
$L198168:

; 851  :    case BQ_BOTTOMLEFT:
; 852  :       ptBottomRight.y = sizeWnd.cy-nTIP_TAIL;

  0210e	8b 45 d4	 mov	 eax, DWORD PTR _sizeWnd$[ebp+4]
  02111	83 e8 14	 sub	 eax, 20			; 00000014H
  02114	89 45 ac	 mov	 DWORD PTR _ptBottomRight$[ebp+4], eax

; 853  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4 + nTIP_TAIL;

  02117	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  0211a	83 e8 14	 sub	 eax, 20			; 00000014H
  0211d	99		 cdq
  0211e	83 e2 03	 and	 edx, 3
  02121	03 c2		 add	 eax, edx
  02123	c1 f8 02	 sar	 eax, 2
  02126	83 c0 14	 add	 eax, 20			; 00000014H
  02129	89 45 84	 mov	 DWORD PTR _ptTail$[ebp], eax

; 854  :       ptTail[0].y = sizeWnd.cy-nTIP_TAIL-2;

  0212c	8b 4d d4	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  0212f	83 e9 16	 sub	 ecx, 22			; 00000016H
  02132	89 4d 88	 mov	 DWORD PTR _ptTail$[ebp+4], ecx

; 855  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4;

  02135	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02138	83 e8 14	 sub	 eax, 20			; 00000014H
  0213b	99		 cdq
  0213c	83 e2 03	 and	 edx, 3
  0213f	03 c2		 add	 eax, edx
  02141	c1 f8 02	 sar	 eax, 2
  02144	89 45 94	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 856  :       ptTail[2].y = ptTail[0].y;

  02147	8b 55 88	 mov	 edx, DWORD PTR _ptTail$[ebp+4]
  0214a	89 55 98	 mov	 DWORD PTR _ptTail$[ebp+20], edx

; 857  :       ptTail[1].x = ptTail[2].x;

  0214d	8b 45 94	 mov	 eax, DWORD PTR _ptTail$[ebp+16]
  02150	89 45 8c	 mov	 DWORD PTR _ptTail$[ebp+8], eax

; 858  :       ptTail[1].y = sizeWnd.cy-2;

  02153	8b 4d d4	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  02156	83 e9 02	 sub	 ecx, 2
  02159	89 4d 90	 mov	 DWORD PTR _ptTail$[ebp+12], ecx

; 859  :       break;

  0215c	eb 54		 jmp	 SHORT $L198163
$L198169:

; 860  :    case BQ_BOTTOMRIGHT:
; 861  :       ptBottomRight.y = sizeWnd.cy-nTIP_TAIL;

  0215e	8b 55 d4	 mov	 edx, DWORD PTR _sizeWnd$[ebp+4]
  02161	83 ea 14	 sub	 edx, 20			; 00000014H
  02164	89 55 ac	 mov	 DWORD PTR _ptBottomRight$[ebp+4], edx

; 862  :       ptTail[0].x = (sizeWnd.cx-nTIP_TAIL)/4*3;

  02167	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  0216a	83 e8 14	 sub	 eax, 20			; 00000014H
  0216d	99		 cdq
  0216e	83 e2 03	 and	 edx, 3
  02171	03 c2		 add	 eax, edx
  02173	c1 f8 02	 sar	 eax, 2
  02176	6b c0 03	 imul	 eax, 3
  02179	89 45 84	 mov	 DWORD PTR _ptTail$[ebp], eax

; 863  :       ptTail[0].y = sizeWnd.cy-nTIP_TAIL-2;

  0217c	8b 45 d4	 mov	 eax, DWORD PTR _sizeWnd$[ebp+4]
  0217f	83 e8 16	 sub	 eax, 22			; 00000016H
  02182	89 45 88	 mov	 DWORD PTR _ptTail$[ebp+4], eax

; 864  :       ptTail[2].x = (sizeWnd.cx-nTIP_TAIL)/4*3 + nTIP_TAIL;

  02185	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  02188	83 e8 14	 sub	 eax, 20			; 00000014H
  0218b	99		 cdq
  0218c	83 e2 03	 and	 edx, 3
  0218f	03 c2		 add	 eax, edx
  02191	c1 f8 02	 sar	 eax, 2
  02194	6b c0 03	 imul	 eax, 3
  02197	83 c0 14	 add	 eax, 20			; 00000014H
  0219a	89 45 94	 mov	 DWORD PTR _ptTail$[ebp+16], eax

; 865  :       ptTail[2].y = ptTail[0].y;

  0219d	8b 4d 88	 mov	 ecx, DWORD PTR _ptTail$[ebp+4]
  021a0	89 4d 98	 mov	 DWORD PTR _ptTail$[ebp+20], ecx

; 866  :       ptTail[1].x = ptTail[2].x;

  021a3	8b 55 94	 mov	 edx, DWORD PTR _ptTail$[ebp+16]
  021a6	89 55 8c	 mov	 DWORD PTR _ptTail$[ebp+8], edx

; 867  :       ptTail[1].y = sizeWnd.cy-2;

  021a9	8b 45 d4	 mov	 eax, DWORD PTR _sizeWnd$[ebp+4]
  021ac	83 e8 02	 sub	 eax, 2
  021af	89 45 90	 mov	 DWORD PTR _ptTail$[ebp+12], eax
$L198163:

; 868  :       break;
; 869  :    }
; 870  : 
; 871  :    // adjust for very narrow balloons
; 872  :    if ( ptTail[0].x < nTIP_MARGIN )

  021b2	83 7d 84 08	 cmp	 DWORD PTR _ptTail$[ebp], 8
  021b6	7d 07		 jge	 SHORT $L198170

; 873  :       ptTail[0].x = nTIP_MARGIN;

  021b8	c7 45 84 08 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp], 8
$L198170:

; 874  :    if ( ptTail[0].x > sizeWnd.cx - nTIP_MARGIN )

  021bf	8b 4d d0	 mov	 ecx, DWORD PTR _sizeWnd$[ebp]
  021c2	83 e9 08	 sub	 ecx, 8
  021c5	39 4d 84	 cmp	 DWORD PTR _ptTail$[ebp], ecx
  021c8	7e 09		 jle	 SHORT $L198171

; 875  :       ptTail[0].x = sizeWnd.cx - nTIP_MARGIN;

  021ca	8b 55 d0	 mov	 edx, DWORD PTR _sizeWnd$[ebp]
  021cd	83 ea 08	 sub	 edx, 8
  021d0	89 55 84	 mov	 DWORD PTR _ptTail$[ebp], edx
$L198171:

; 876  :    if ( ptTail[1].x < nTIP_MARGIN )

  021d3	83 7d 8c 08	 cmp	 DWORD PTR _ptTail$[ebp+8], 8
  021d7	7d 07		 jge	 SHORT $L198172

; 877  :       ptTail[1].x = nTIP_MARGIN;

  021d9	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+8], 8
$L198172:

; 878  :    if ( ptTail[1].x > sizeWnd.cx - nTIP_MARGIN )

  021e0	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  021e3	83 e8 08	 sub	 eax, 8
  021e6	39 45 8c	 cmp	 DWORD PTR _ptTail$[ebp+8], eax
  021e9	7e 09		 jle	 SHORT $L198173

; 879  :       ptTail[1].x = sizeWnd.cx - nTIP_MARGIN;

  021eb	8b 4d d0	 mov	 ecx, DWORD PTR _sizeWnd$[ebp]
  021ee	83 e9 08	 sub	 ecx, 8
  021f1	89 4d 8c	 mov	 DWORD PTR _ptTail$[ebp+8], ecx
$L198173:

; 880  :    if ( ptTail[2].x < nTIP_MARGIN )

  021f4	83 7d 94 08	 cmp	 DWORD PTR _ptTail$[ebp+16], 8
  021f8	7d 07		 jge	 SHORT $L198174

; 881  :       ptTail[2].x = nTIP_MARGIN;

  021fa	c7 45 94 08 00
	00 00		 mov	 DWORD PTR _ptTail$[ebp+16], 8
$L198174:

; 882  :    if ( ptTail[2].x > sizeWnd.cx - nTIP_MARGIN )

  02201	8b 55 d0	 mov	 edx, DWORD PTR _sizeWnd$[ebp]
  02204	83 ea 08	 sub	 edx, 8
  02207	39 55 94	 cmp	 DWORD PTR _ptTail$[ebp+16], edx
  0220a	7e 09		 jle	 SHORT $L198175

; 883  :       ptTail[2].x = sizeWnd.cx - nTIP_MARGIN;

  0220c	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  0220f	83 e8 08	 sub	 eax, 8
  02212	89 45 94	 mov	 DWORD PTR _ptTail$[ebp+16], eax
$L198175:

; 884  : 
; 885  :    // get window position
; 886  :    CPoint ptAnchor = GetAnchorPoint();

  02215	8d 4d c8	 lea	 ecx, DWORD PTR _ptAnchor$[ebp]
  02218	51		 push	 ecx
  02219	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0221c	e8 00 00 00 00	 call	 ?GetAnchorPoint@CBalloonHelp@@IAE?AVCPoint@@XZ ; CBalloonHelp::GetAnchorPoint

; 887  :    CPoint ptOffs(ptAnchor.x - ptTail[1].x, ptAnchor.y - ptTail[1].y);

  02221	8b 55 cc	 mov	 edx, DWORD PTR _ptAnchor$[ebp+4]
  02224	2b 55 90	 sub	 edx, DWORD PTR _ptTail$[ebp+12]
  02227	52		 push	 edx
  02228	8b 45 c8	 mov	 eax, DWORD PTR _ptAnchor$[ebp]
  0222b	2b 45 8c	 sub	 eax, DWORD PTR _ptTail$[ebp+8]
  0222e	50		 push	 eax
  0222f	8d 4d ec	 lea	 ecx, DWORD PTR _ptOffs$[ebp]
  02232	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint

; 888  : 
; 889  :    // adjust position so all is visible
; 890  :    CRect rectScreen;

  02237	8d 4d b0	 lea	 ecx, DWORD PTR _rectScreen$[ebp]
  0223a	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 891  :    GetAnchorScreenBounds(rectScreen);

  0223f	8d 4d b0	 lea	 ecx, DWORD PTR _rectScreen$[ebp]
  02242	51		 push	 ecx
  02243	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  02246	e8 00 00 00 00	 call	 ?GetAnchorScreenBounds@CBalloonHelp@@IAEXAAVCRect@@@Z ; CBalloonHelp::GetAnchorScreenBounds

; 892  :    int nAdjustX = 0;

  0224b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nAdjustX$[ebp], 0

; 893  :    int nAdjustY = 0;

  02252	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _nAdjustY$[ebp], 0

; 894  :    if ( ptOffs.x < rectScreen.left )

  02259	8b 55 ec	 mov	 edx, DWORD PTR _ptOffs$[ebp]
  0225c	3b 55 b0	 cmp	 edx, DWORD PTR _rectScreen$[ebp]
  0225f	7d 0b		 jge	 SHORT $L198182

; 895  :       nAdjustX = rectScreen.left-ptOffs.x;

  02261	8b 45 b0	 mov	 eax, DWORD PTR _rectScreen$[ebp]
  02264	2b 45 ec	 sub	 eax, DWORD PTR _ptOffs$[ebp]
  02267	89 45 e0	 mov	 DWORD PTR _nAdjustX$[ebp], eax

; 896  :    else if ( ptOffs.x + sizeWnd.cx >= rectScreen.right )

  0226a	eb 19		 jmp	 SHORT $L198183
$L198182:
  0226c	8b 4d ec	 mov	 ecx, DWORD PTR _ptOffs$[ebp]
  0226f	03 4d d0	 add	 ecx, DWORD PTR _sizeWnd$[ebp]
  02272	3b 4d b8	 cmp	 ecx, DWORD PTR _rectScreen$[ebp+8]
  02275	7c 0e		 jl	 SHORT $L198183

; 897  :       nAdjustX = rectScreen.right - (ptOffs.x + sizeWnd.cx);

  02277	8b 55 ec	 mov	 edx, DWORD PTR _ptOffs$[ebp]
  0227a	03 55 d0	 add	 edx, DWORD PTR _sizeWnd$[ebp]
  0227d	8b 45 b8	 mov	 eax, DWORD PTR _rectScreen$[ebp+8]
  02280	2b c2		 sub	 eax, edx
  02282	89 45 e0	 mov	 DWORD PTR _nAdjustX$[ebp], eax
$L198183:

; 898  :    if ( ptOffs.y + nTIP_TAIL < rectScreen.top )

  02285	8b 4d f0	 mov	 ecx, DWORD PTR _ptOffs$[ebp+4]
  02288	83 c1 14	 add	 ecx, 20			; 00000014H
  0228b	3b 4d b4	 cmp	 ecx, DWORD PTR _rectScreen$[ebp+4]
  0228e	7d 10		 jge	 SHORT $L198185

; 899  :       nAdjustY = rectScreen.top - (ptOffs.y + nTIP_TAIL);

  02290	8b 55 f0	 mov	 edx, DWORD PTR _ptOffs$[ebp+4]
  02293	83 c2 14	 add	 edx, 20			; 00000014H
  02296	8b 45 b4	 mov	 eax, DWORD PTR _rectScreen$[ebp+4]
  02299	2b c2		 sub	 eax, edx
  0229b	89 45 a4	 mov	 DWORD PTR _nAdjustY$[ebp], eax

; 900  :    else if ( ptOffs.y + sizeWnd.cy - nTIP_TAIL >= rectScreen.bottom )

  0229e	eb 21		 jmp	 SHORT $L198186
$L198185:
  022a0	8b 4d d4	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  022a3	8b 55 f0	 mov	 edx, DWORD PTR _ptOffs$[ebp+4]
  022a6	8d 44 0a ec	 lea	 eax, DWORD PTR [edx+ecx-20]
  022aa	3b 45 bc	 cmp	 eax, DWORD PTR _rectScreen$[ebp+12]
  022ad	7c 12		 jl	 SHORT $L198186

; 901  :       nAdjustY = rectScreen.bottom - (ptOffs.y + sizeWnd.cy - nTIP_TAIL);

  022af	8b 4d d4	 mov	 ecx, DWORD PTR _sizeWnd$[ebp+4]
  022b2	8b 55 f0	 mov	 edx, DWORD PTR _ptOffs$[ebp+4]
  022b5	8d 44 0a ec	 lea	 eax, DWORD PTR [edx+ecx-20]
  022b9	8b 4d bc	 mov	 ecx, DWORD PTR _rectScreen$[ebp+12]
  022bc	2b c8		 sub	 ecx, eax
  022be	89 4d a4	 mov	 DWORD PTR _nAdjustY$[ebp], ecx
$L198186:

; 902  : 
; 903  :    // reposition tail
; 904  :    // uncomment two commented lines below to move entire tail 
; 905  :    // instead of just anchor point
; 906  : 
; 907  :    //ptTail[0].x -= nAdjustX;
; 908  :    ptTail[1].x -= nAdjustX;

  022c1	8b 55 8c	 mov	 edx, DWORD PTR _ptTail$[ebp+8]
  022c4	2b 55 e0	 sub	 edx, DWORD PTR _nAdjustX$[ebp]
  022c7	89 55 8c	 mov	 DWORD PTR _ptTail$[ebp+8], edx

; 909  :    //ptTail[2].x -= nAdjustX;
; 910  :    ptOffs.x    += nAdjustX;

  022ca	8b 45 ec	 mov	 eax, DWORD PTR _ptOffs$[ebp]
  022cd	03 45 e0	 add	 eax, DWORD PTR _nAdjustX$[ebp]
  022d0	89 45 ec	 mov	 DWORD PTR _ptOffs$[ebp], eax

; 911  :    ptOffs.y    += nAdjustY;

  022d3	8b 4d f0	 mov	 ecx, DWORD PTR _ptOffs$[ebp+4]
  022d6	03 4d a4	 add	 ecx, DWORD PTR _nAdjustY$[ebp]
  022d9	89 4d f0	 mov	 DWORD PTR _ptOffs$[ebp+4], ecx

; 912  : 
; 913  :    // place window
; 914  :    MoveWindow(ptOffs.x, ptOffs.y, sizeWnd.cx, sizeWnd.cy, TRUE);

  022dc	6a 01		 push	 1
  022de	8b 55 d4	 mov	 edx, DWORD PTR _sizeWnd$[ebp+4]
  022e1	52		 push	 edx
  022e2	8b 45 d0	 mov	 eax, DWORD PTR _sizeWnd$[ebp]
  022e5	50		 push	 eax
  022e6	8b 4d f0	 mov	 ecx, DWORD PTR _ptOffs$[ebp+4]
  022e9	51		 push	 ecx
  022ea	8b 55 ec	 mov	 edx, DWORD PTR _ptOffs$[ebp]
  022ed	52		 push	 edx
  022ee	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  022f1	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXHHHHH@Z ; CWnd::MoveWindow

; 915  : 
; 916  :    // apply region
; 917  :    CRgn region;

  022f6	8d 4d d8	 lea	 ecx, DWORD PTR _region$[ebp]
  022f9	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  022fe	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 918  :    CRgn regionRound;

  02305	8d 4d c0	 lea	 ecx, DWORD PTR _regionRound$[ebp]
  02308	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  0230d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 919  :    CRgn regionComplete;

  02311	8d 4d e4	 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  02314	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  02319	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 920  :    region.CreatePolygonRgn(&ptTail[0], 3, ALTERNATE);

  0231d	6a 01		 push	 1
  0231f	6a 03		 push	 3
  02321	8d 45 84	 lea	 eax, DWORD PTR _ptTail$[ebp]
  02324	50		 push	 eax
  02325	8d 4d d8	 lea	 ecx, DWORD PTR _region$[ebp]
  02328	e8 00 00 00 00	 call	 ?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z ; CRgn::CreatePolygonRgn

; 921  :    //regionRound.CreateRoundRectRgn(ptTopLeft.x,ptTopLeft.y,ptBottomRight.x,ptBottomRight.y,nTIP_MARGIN*3,nTIP_MARGIN*3);
; 922  :    regionRound.CreateRectRgn(ptTopLeft.x,ptTopLeft.y,ptBottomRight.x,ptBottomRight.y);

  0232d	8b 4d ac	 mov	 ecx, DWORD PTR _ptBottomRight$[ebp+4]
  02330	51		 push	 ecx
  02331	8b 55 a8	 mov	 edx, DWORD PTR _ptBottomRight$[ebp]
  02334	52		 push	 edx
  02335	8b 45 a0	 mov	 eax, DWORD PTR _ptTopLeft$[ebp+4]
  02338	50		 push	 eax
  02339	8b 4d 9c	 mov	 ecx, DWORD PTR _ptTopLeft$[ebp]
  0233c	51		 push	 ecx
  0233d	8d 4d c0	 lea	 ecx, DWORD PTR _regionRound$[ebp]
  02340	e8 00 00 00 00	 call	 ?CreateRectRgn@CRgn@@QAEHHHHH@Z ; CRgn::CreateRectRgn

; 923  :    regionComplete.CreateRectRgn(0,0,1,1);

  02345	6a 01		 push	 1
  02347	6a 01		 push	 1
  02349	6a 00		 push	 0
  0234b	6a 00		 push	 0
  0234d	8d 4d e4	 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  02350	e8 00 00 00 00	 call	 ?CreateRectRgn@CRgn@@QAEHHHHH@Z ; CRgn::CreateRectRgn

; 924  :    regionComplete.CombineRgn(&region, &regionRound, RGN_OR);

  02355	6a 02		 push	 2
  02357	8d 55 c0	 lea	 edx, DWORD PTR _regionRound$[ebp]
  0235a	52		 push	 edx
  0235b	8d 45 d8	 lea	 eax, DWORD PTR _region$[ebp]
  0235e	50		 push	 eax
  0235f	8d 4d e4	 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  02362	e8 00 00 00 00	 call	 ?CombineRgn@CRgn@@QAEHPAV1@0H@Z ; CRgn::CombineRgn

; 925  : 
; 926  :    if ( NULL == m_rgnComplete.m_hObject )

  02367	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0236a	83 b9 d0 00 00
	00 00		 cmp	 DWORD PTR [ecx+208], 0
  02371	75 16		 jne	 SHORT $L198191

; 927  :       m_rgnComplete.CreateRectRgn(0,0,1,1);

  02373	6a 01		 push	 1
  02375	6a 01		 push	 1
  02377	6a 00		 push	 0
  02379	6a 00		 push	 0
  0237b	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0237e	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  02384	e8 00 00 00 00	 call	 ?CreateRectRgn@CRgn@@QAEHHHHH@Z ; CRgn::CreateRectRgn
$L198191:

; 928  : 
; 929  :    if ( !m_rgnComplete.EqualRgn(&regionComplete) )

  02389	8d 55 e4	 lea	 edx, DWORD PTR _regionComplete$[ebp]
  0238c	52		 push	 edx
  0238d	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  02390	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  02396	e8 00 00 00 00	 call	 ?EqualRgn@CRgn@@QBEHPAV1@@Z ; CRgn::EqualRgn
  0239b	85 c0		 test	 eax, eax
  0239d	75 36		 jne	 SHORT $L198192

; 930  :    {
; 931  :       m_rgnComplete.CopyRgn(&regionComplete);

  0239f	8d 45 e4	 lea	 eax, DWORD PTR _regionComplete$[ebp]
  023a2	50		 push	 eax
  023a3	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  023a6	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  023ac	e8 00 00 00 00	 call	 ?CopyRgn@CRgn@@QAEHPAV1@@Z ; CRgn::CopyRgn

; 932  :       SetWindowRgn((HRGN)regionComplete.Detach(), TRUE);

  023b1	6a 01		 push	 1
  023b3	8d 4d e4	 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  023b6	e8 00 00 00 00	 call	 ?Detach@CGdiObject@@QAEPAXXZ ; CGdiObject::Detach
  023bb	50		 push	 eax
  023bc	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  023bf	e8 00 00 00 00	 call	 ?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z ; CWnd::SetWindowRgn

; 933  : 
; 934  :       // There is a bug with layered windows and NC changes in Win2k
; 935  :       // As a workaround, redraw the entire window if the NC area changed.
; 936  :       // Changing the anchor point is the ONLY thing that will change the
; 937  :       // position of the client area relative to the window during normal
; 938  :       // operation.
; 939  :       RedrawWindow(NULL, NULL, RDW_UPDATENOW| RDW_ERASE | RDW_INVALIDATE | RDW_FRAME | RDW_ALLCHILDREN);

  023c4	68 85 05 00 00	 push	 1413			; 00000585H
  023c9	6a 00		 push	 0
  023cb	6a 00		 push	 0
  023cd	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  023d0	e8 00 00 00 00	 call	 ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$L198192:

; 940  :    }
; 941  : }

  023d5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  023d9	8d 4d e4	 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  023dc	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  023e1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  023e5	8d 4d c0	 lea	 ecx, DWORD PTR _regionRound$[ebp]
  023e8	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  023ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  023f4	8d 4d d8	 lea	 ecx, DWORD PTR _region$[ebp]
  023f7	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  023fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  023ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02406	8b e5		 mov	 esp, ebp
  02408	5d		 pop	 ebp
  02409	c3		 ret	 0
$L199365:
  0240a	00 00 00 00	 DD	 $L198167
  0240e	00 00 00 00	 DD	 $L198166
  02412	00 00 00 00	 DD	 $L198169
  02416	00 00 00 00	 DD	 $L198168
_TEXT	ENDS
text$x	SEGMENT
$L199359:
  0014d	8d 4d d8	 lea	 ecx, DWORD PTR _region$[ebp]
  00150	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
$L199360:
  00155	8d 4d c0	 lea	 ecx, DWORD PTR _regionRound$[ebp]
  00158	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
$L199361:
  0015d	8d 4d e4	 lea	 ecx, DWORD PTR _regionComplete$[ebp]
  00160	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$?PositionWindow@CBalloonHelp@@IAEXXZ:
  00165	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199363
  0016a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?PositionWindow@CBalloonHelp@@IAEXXZ ENDP		; CBalloonHelp::PositionWindow
PUBLIC	?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ	; AfxGetInstanceHandle
EXTRN	?AfxGetAfxWndProc@@YGP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; AfxGetAfxWndProc
EXTRN	__imp__RegisterClassExA@4:NEAR
EXTRN	__imp__GetSysColorBrush@4:NEAR
EXTRN	__imp__LoadCursorA@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_wcx$198198 = -48					; size = 48
_bShadowed$ = 8						; size = 4
?GetClassAtom@CBalloonHelp@@KAGH@Z PROC NEAR		; CBalloonHelp::GetClassAtom

; 947  : {

  02420	55		 push	 ebp
  02421	8b ec		 mov	 ebp, esp
  02423	83 ec 30	 sub	 esp, 48			; 00000030H

; 948  :    if ( NULL == s_ClassAtom )

  02426	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?s_ClassAtom@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtom
  0242d	85 c0		 test	 eax, eax
  0242f	0f 85 96 00 00
	00		 jne	 $L198197

; 949  :    {
; 950  :       WNDCLASSEX wcx; 
; 951  : 
; 952  :       // Fill in the window class structure with parameters 
; 953  :       // that describe the main window. 
; 954  : 
; 955  :       wcx.cbSize = sizeof(wcx);                 // size of structure 

  02435	c7 45 d0 30 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp], 48 ; 00000030H

; 956  :       wcx.style = CS_DBLCLKS|CS_SAVEBITS
; 957  :          |CS_DROPSHADOW;                        // notify of double clicks, save screen under, show dropshadow

  0243c	c7 45 d4 08 08
	02 00		 mov	 DWORD PTR _wcx$198198[ebp+4], 133128 ; 00020808H

; 958  :       wcx.lpfnWndProc = AfxWndProc;             // points to window procedure 

  02443	e8 00 00 00 00	 call	 ?AfxGetAfxWndProc@@YGP6GJPAUHWND__@@IIJ@ZXZ ; AfxGetAfxWndProc
  02448	89 45 d8	 mov	 DWORD PTR _wcx$198198[ebp+8], eax

; 959  :       wcx.cbClsExtra = 0;                       // no extra class memory 

  0244b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+12], 0

; 960  :       wcx.cbWndExtra = 0;                       // no extra window memory 

  02452	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+16], 0

; 961  :       wcx.hInstance = AfxGetInstanceHandle();   // handle to instance 

  02459	e8 00 00 00 00	 call	 ?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ ; AfxGetInstanceHandle
  0245e	89 45 e4	 mov	 DWORD PTR _wcx$198198[ebp+20], eax

; 962  :       wcx.hIcon = NULL;                         // no app. icon 

  02461	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+24], 0

; 963  :       wcx.hCursor = LoadCursor(NULL,IDC_ARROW); // predefined arrow 

  02468	68 00 7f 00 00	 push	 32512			; 00007f00H
  0246d	6a 00		 push	 0
  0246f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  02475	89 45 ec	 mov	 DWORD PTR _wcx$198198[ebp+28], eax

; 964  :       wcx.hbrBackground = ::GetSysColorBrush(COLOR_WINDOW);                 // no background brush 

  02478	6a 05		 push	 5
  0247a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColorBrush@4
  02480	89 45 f0	 mov	 DWORD PTR _wcx$198198[ebp+32], eax

; 965  :       wcx.lpszMenuName =  NULL;                 // no menu resource 

  02483	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+36], 0

; 966  :       wcx.lpszClassName = "BalloonHelpClassDS"; // name of window class 

  0248a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+40], OFFSET FLAT:$SG198202

; 967  :       wcx.hIconSm = NULL;                       // no small class icon

  02491	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+44], 0

; 968  : 
; 969  :       // Register the window class (this may not work if dropshadows are not supported)
; 970  :       s_ClassAtomShadowed = RegisterClassEx(&wcx);

  02498	8d 4d d0	 lea	 ecx, DWORD PTR _wcx$198198[ebp]
  0249b	51		 push	 ecx
  0249c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4
  024a2	66 a3 00 00 00
	00		 mov	 WORD PTR ?s_ClassAtomShadowed@CBalloonHelp@@0GA, ax ; CBalloonHelp::s_ClassAtomShadowed

; 971  : 
; 972  :       // Register shadow-less class
; 973  :       wcx.style &= ~CS_DROPSHADOW;

  024a8	8b 55 d4	 mov	 edx, DWORD PTR _wcx$198198[ebp+4]
  024ab	81 e2 ff ff fd
	ff		 and	 edx, -131073		; fffdffffH
  024b1	89 55 d4	 mov	 DWORD PTR _wcx$198198[ebp+4], edx

; 974  :       wcx.lpszClassName = "BalloonHelpClass";

  024b4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _wcx$198198[ebp+40], OFFSET FLAT:$SG198203

; 975  :       s_ClassAtom = RegisterClassEx(&wcx);

  024bb	8d 45 d0	 lea	 eax, DWORD PTR _wcx$198198[ebp]
  024be	50		 push	 eax
  024bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4
  024c5	66 a3 00 00 00
	00		 mov	 WORD PTR ?s_ClassAtom@CBalloonHelp@@0GA, ax ; CBalloonHelp::s_ClassAtom
$L198197:

; 976  :    }
; 977  : 
; 978  :    if ( bShadowed && NULL != s_ClassAtomShadowed )

  024cb	83 7d 08 00	 cmp	 DWORD PTR _bShadowed$[ebp], 0
  024cf	74 13		 je	 SHORT $L198204
  024d1	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?s_ClassAtomShadowed@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtomShadowed
  024d8	85 c9		 test	 ecx, ecx
  024da	74 08		 je	 SHORT $L198204

; 979  :       return s_ClassAtomShadowed;

  024dc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?s_ClassAtomShadowed@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtomShadowed
  024e2	eb 06		 jmp	 SHORT $L198196
$L198204:

; 980  :    return s_ClassAtom;

  024e4	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?s_ClassAtom@CBalloonHelp@@0GA ; CBalloonHelp::s_ClassAtom
$L198196:

; 981  : }

  024ea	8b e5		 mov	 esp, ebp
  024ec	5d		 pop	 ebp
  024ed	c3		 ret	 0
?GetClassAtom@CBalloonHelp@@KAGH@Z ENDP			; CBalloonHelp::GetClassAtom
_TEXT	ENDS
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowBalloon@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::ShowBalloon
; _this$ = ecx

; 986  : {

  024f0	55		 push	 ebp
  024f1	8b ec		 mov	 ebp, esp
  024f3	51		 push	 ecx
  024f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 987  :    ShowWindow(SW_SHOWNOACTIVATE);

  024f7	6a 04		 push	 4
  024f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  024fc	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 988  :    if ( !(m_unOptions&unDELAY_CLOSE) )

  02501	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02504	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0250a	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  02510	75 12		 jne	 SHORT $L198208

; 989  :       SetTimeout(m_unTimeout);     // start close timer

  02512	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02515	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  0251b	50		 push	 eax
  0251c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0251f	e8 00 00 00 00	 call	 ?SetTimeout@CBalloonHelp@@QAEXI@Z ; CBalloonHelp::SetTimeout
$L198208:

; 990  : }

  02524	8b e5		 mov	 esp, ebp
  02526	5d		 pop	 ebp
  02527	c3		 ret	 0
?ShowBalloon@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::ShowBalloon
_TEXT	ENDS
PUBLIC	?HideBalloon@CBalloonHelp@@IAEXXZ		; CBalloonHelp::HideBalloon
EXTRN	__imp__ReleaseCapture@0:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HideBalloon@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::HideBalloon
; _this$ = ecx

; 994  : {

  02530	55		 push	 ebp
  02531	8b ec		 mov	 ebp, esp
  02533	51		 push	 ecx
  02534	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 995  :    if ( m_unOptions&unDELAY_CLOSE )

  02537	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0253a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02540	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  02546	74 2b		 je	 SHORT $L198214

; 996  :    {
; 997  :       m_unOptions &= ~(unDELAY_CLOSE|unCLOSE_ON_ANYTHING);  // close only via timer or button

  02548	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0254b	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  02551	25 80 fe ff ff	 and	 eax, -384		; fffffe80H
  02556	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02559	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 998  :       SetTimeout(m_unTimeout);     // start close timer

  0255f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02562	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  02568	50		 push	 eax
  02569	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0256c	e8 00 00 00 00	 call	 ?SetTimeout@CBalloonHelp@@QAEXI@Z ; CBalloonHelp::SetTimeout

; 999  :       return;

  02571	eb 25		 jmp	 SHORT $L198213
$L198214:

; 1000 :    }
; 1001 :    ShowWindow( SW_HIDE );

  02573	6a 00		 push	 0
  02575	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02578	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 1002 :    if ( GetCapture() == this ) 

  0257d	e8 00 00 00 00	 call	 ?GetCapture@CWnd@@SGPAV1@XZ ; CWnd::GetCapture
  02582	3b 45 fc	 cmp	 eax, DWORD PTR _this$[ebp]
  02585	75 06		 jne	 SHORT $L198215

; 1003 :       ReleaseCapture();

  02587	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
$L198215:

; 1004 :    DestroyWindow();

  0258d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02590	8b 11		 mov	 edx, DWORD PTR [ecx]
  02592	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02595	ff 52 68	 call	 DWORD PTR [edx+104]
$L198213:

; 1005 : }

  02598	8b e5		 mov	 esp, ebp
  0259a	5d		 pop	 ebp
  0259b	c3		 ret	 0
?HideBalloon@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::HideBalloon
_TEXT	ENDS
PUBLIC	?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
EXTRN	__imp__GetCurrentThreadId@0:NEAR
EXTRN	__imp__SetWindowsHookExA@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetKeyboardHook@CBalloonHelp@@AAEXXZ PROC NEAR		; CBalloonHelp::SetKeyboardHook
; _this$ = ecx

; 1012 : {

  025a0	55		 push	 ebp
  025a1	8b ec		 mov	 ebp, esp
  025a3	51		 push	 ecx
  025a4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1013 :    if ( NULL==m_hKeyboardHook )

  025a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  025aa	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  025ae	75 23		 jne	 SHORT $L198218

; 1014 :    {
; 1015 :       m_hKeyboardHook = ::SetWindowsHookEx(WH_KEYBOARD,
; 1016 :          (HOOKPROC)BHKeybHookThunk<CBalloonHelp>::GetThunk(),
; 1017 :          NULL, ::GetCurrentThreadId());

  025b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  025b6	50		 push	 eax
  025b7	6a 00		 push	 0
  025b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025bc	83 c1 54	 add	 ecx, 84			; 00000054H
  025bf	e8 00 00 00 00	 call	 ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
  025c4	50		 push	 eax
  025c5	6a 02		 push	 2
  025c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowsHookExA@16
  025cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025d0	89 41 78	 mov	 DWORD PTR [ecx+120], eax
$L198218:

; 1018 :    }
; 1019 : }

  025d3	8b e5		 mov	 esp, ebp
  025d5	5d		 pop	 ebp
  025d6	c3		 ret	 0
?SetKeyboardHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::SetKeyboardHook
_TEXT	ENDS
PUBLIC	?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ	; CBalloonHelp::RemoveKeyboardHook
EXTRN	__imp__UnhookWindowsHookEx@4:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ PROC NEAR	; CBalloonHelp::RemoveKeyboardHook
; _this$ = ecx

; 1022 : {

  025e0	55		 push	 ebp
  025e1	8b ec		 mov	 ebp, esp
  025e3	51		 push	 ecx
  025e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1023 :    if ( NULL!=m_hKeyboardHook )

  025e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  025ea	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  025ee	74 17		 je	 SHORT $L198223

; 1024 :    {
; 1025 :       ::UnhookWindowsHookEx(m_hKeyboardHook);

  025f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  025f3	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  025f6	52		 push	 edx
  025f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4

; 1026 :       m_hKeyboardHook=NULL;

  025fd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02600	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0
$L198223:

; 1027 :    }
; 1028 : }

  02607	8b e5		 mov	 esp, ebp
  02609	5d		 pop	 ebp
  0260a	c3		 ret	 0
?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::RemoveKeyboardHook
; Function compile flags: /Odt
_this$ = -4						; size = 4
?SetMouseHook@CBalloonHelp@@AAEXXZ PROC NEAR		; CBalloonHelp::SetMouseHook
; _this$ = ecx

; 1036 : {

  02610	55		 push	 ebp
  02611	8b ec		 mov	 ebp, esp
  02613	51		 push	 ecx
  02614	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1037 :    if ( NULL==m_hMouseHook )

  02617	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0261a	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  0261e	75 23		 jne	 SHORT $L198227

; 1038 :    {
; 1039 :       m_hMouseHook = ::SetWindowsHookEx(WH_MOUSE,
; 1040 :          (HOOKPROC)BHMouseHookThunk<CBalloonHelp>::GetThunk(),
; 1041 :          NULL, ::GetCurrentThreadId());

  02620	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  02626	50		 push	 eax
  02627	6a 00		 push	 0
  02629	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0262c	83 c1 5e	 add	 ecx, 94			; 0000005eH
  0262f	e8 00 00 00 00	 call	 ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
  02634	50		 push	 eax
  02635	6a 07		 push	 7
  02637	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowsHookExA@16
  0263d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02640	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
$L198227:

; 1042 :    }
; 1043 : }

  02643	8b e5		 mov	 esp, ebp
  02645	5d		 pop	 ebp
  02646	c3		 ret	 0
?SetMouseHook@CBalloonHelp@@AAEXXZ ENDP			; CBalloonHelp::SetMouseHook
_TEXT	ENDS
PUBLIC	?RemoveMouseHook@CBalloonHelp@@AAEXXZ		; CBalloonHelp::RemoveMouseHook
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveMouseHook@CBalloonHelp@@AAEXXZ PROC NEAR		; CBalloonHelp::RemoveMouseHook
; _this$ = ecx

; 1046 : {

  02650	55		 push	 ebp
  02651	8b ec		 mov	 ebp, esp
  02653	51		 push	 ecx
  02654	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1047 :    if ( NULL!=m_hMouseHook )

  02657	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0265a	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  0265e	74 17		 je	 SHORT $L198232

; 1048 :    {
; 1049 :       ::UnhookWindowsHookEx(m_hMouseHook);

  02660	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02663	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  02666	52		 push	 edx
  02667	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4

; 1050 :       m_hMouseHook=NULL;

  0266d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02670	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0
$L198232:

; 1051 :    }
; 1052 : }

  02677	8b e5		 mov	 esp, ebp
  02679	5d		 pop	 ebp
  0267a	c3		 ret	 0
?RemoveMouseHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::RemoveMouseHook
; Function compile flags: /Odt
_this$ = -4						; size = 4
?SetCallWndRetHook@CBalloonHelp@@AAEXXZ PROC NEAR	; CBalloonHelp::SetCallWndRetHook
; _this$ = ecx

; 1059 : {

  02680	55		 push	 ebp
  02681	8b ec		 mov	 ebp, esp
  02683	51		 push	 ecx
  02684	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1060 :    if ( NULL==m_hCallWndRetHook )

  02687	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0268a	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  02691	75 26		 jne	 SHORT $L198236

; 1061 :    {
; 1062 :       m_hCallWndRetHook = ::SetWindowsHookEx(WH_CALLWNDPROCRET,
; 1063 :          (HOOKPROC)BHCallWndRetHookThunk<CBalloonHelp>::GetThunk(),
; 1064 :          NULL, ::GetCurrentThreadId());

  02693	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  02699	50		 push	 eax
  0269a	6a 00		 push	 0
  0269c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0269f	83 c1 68	 add	 ecx, 104		; 00000068H
  026a2	e8 00 00 00 00	 call	 ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ; _ThunkImpl<CBalloonHelp>::GetThunk
  026a7	50		 push	 eax
  026a8	6a 0c		 push	 12			; 0000000cH
  026aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowsHookExA@16
  026b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026b3	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
$L198236:

; 1065 :    }
; 1066 : }

  026b9	8b e5		 mov	 esp, ebp
  026bb	5d		 pop	 ebp
  026bc	c3		 ret	 0
?SetCallWndRetHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::SetCallWndRetHook
; Function compile flags: /Odt
_this$ = -4						; size = 4
?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ PROC NEAR	; CBalloonHelp::RemoveCallWndRetHook
; _this$ = ecx

; 1069 : {

  026c0	55		 push	 ebp
  026c1	8b ec		 mov	 ebp, esp
  026c3	51		 push	 ecx
  026c4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1070 :    if ( NULL!=m_hCallWndRetHook )

  026c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  026ca	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  026d1	74 1d		 je	 SHORT $L198241

; 1071 :    {
; 1072 :       ::UnhookWindowsHookEx(m_hCallWndRetHook);

  026d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  026d6	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  026dc	52		 push	 edx
  026dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4

; 1073 :       m_hCallWndRetHook=NULL;

  026e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  026e6	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
$L198241:

; 1074 :    }
; 1075 : }

  026f0	8b e5		 mov	 esp, ebp
  026f2	5d		 pop	 ebp
  026f3	c3		 ret	 0
?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ ENDP		; CBalloonHelp::RemoveCallWndRetHook
_TEXT	ENDS
PUBLIC	?GetThisMessageMap@CBalloonHelp@@KGPBUAFX_MSGMAP@@XZ ; CBalloonHelp::GetThisMessageMap
; Function compile flags: /Odt
_TEXT	SEGMENT
?GetThisMessageMap@CBalloonHelp@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CBalloonHelp::GetThisMessageMap

; 1081 : BEGIN_MESSAGE_MAP(CBalloonHelp, CWnd)

  02700	55		 push	 ebp
  02701	8b ec		 mov	 ebp, esp
  02703	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B ; CBalloonHelp::messageMap
  02708	5d		 pop	 ebp
  02709	c3		 ret	 0
?GetThisMessageMap@CBalloonHelp@@KGPBUAFX_MSGMAP@@XZ ENDP ; CBalloonHelp::GetThisMessageMap
; Function compile flags: /Odt
_this$ = -4						; size = 4
?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CBalloonHelp::GetMessageMap
; _this$ = ecx

; 1081 : BEGIN_MESSAGE_MAP(CBalloonHelp, CWnd)

  02710	55		 push	 ebp
  02711	8b ec		 mov	 ebp, esp
  02713	51		 push	 ecx
  02714	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  02717	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CBalloonHelp@@1UAFX_MSGMAP@@B ; CBalloonHelp::messageMap
  0271c	8b e5		 mov	 esp, ebp
  0271e	5d		 pop	 ebp
  0271f	c3		 ret	 0
?GetMessageMap@CBalloonHelp@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CBalloonHelp::GetMessageMap
; Function compile flags: /Odt
_this$ = -4						; size = 4
_bShow$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnShowWindow@CBalloonHelp@@IAEXHI@Z PROC NEAR		; CBalloonHelp::OnShowWindow
; _this$ = ecx

; 1099 : {

  02720	55		 push	 ebp
  02721	8b ec		 mov	 ebp, esp
  02723	51		 push	 ecx
  02724	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1100 :    if ( NULL != m_fnAnimateWindow )

  02727	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0272a	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0272e	74 5e		 je	 SHORT $L198330

; 1101 :    {
; 1102 :       if ( bShow && !(m_unOptions&unDISABLE_FADEIN) )

  02730	83 7d 08 00	 cmp	 DWORD PTR _bShow$[ebp], 0
  02734	74 2a		 je	 SHORT $L198332
  02736	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02739	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0273f	81 e2 00 40 00
	00		 and	 edx, 16384		; 00004000H
  02745	75 19		 jne	 SHORT $L198332

; 1103 :          m_fnAnimateWindow( m_hWnd, 200, AW_BLEND);

  02747	68 00 00 08 00	 push	 524288			; 00080000H
  0274c	68 c8 00 00 00	 push	 200			; 000000c8H
  02751	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02754	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  02757	51		 push	 ecx
  02758	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0275b	ff 52 74	 call	 DWORD PTR [edx+116]

; 1104 :       else if ( !bShow && !(m_unOptions&unDISABLE_FADEOUT) )

  0275e	eb 2e		 jmp	 SHORT $L198330
$L198332:
  02760	83 7d 08 00	 cmp	 DWORD PTR _bShow$[ebp], 0
  02764	75 28		 jne	 SHORT $L198330
  02766	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02769	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0276f	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  02775	75 17		 jne	 SHORT $L198330

; 1105 :          m_fnAnimateWindow( m_hWnd, 200, AW_HIDE | AW_BLEND );

  02777	68 00 00 09 00	 push	 589824			; 00090000H
  0277c	68 c8 00 00 00	 push	 200			; 000000c8H
  02781	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02784	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  02787	50		 push	 eax
  02788	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0278b	ff 51 74	 call	 DWORD PTR [ecx+116]
$L198330:

; 1106 :    }
; 1107 : }

  0278e	8b e5		 mov	 esp, ebp
  02790	5d		 pop	 ebp
  02791	c2 08 00	 ret	 8
?OnShowWindow@CBalloonHelp@@IAEXHI@Z ENDP		; CBalloonHelp::OnShowWindow
; Function compile flags: /Odt
_this$ = -20						; size = 4
_rect$ = -16						; size = 16
_pDC$ = 8						; size = 4
?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z PROC NEAR	; CBalloonHelp::OnEraseBkgnd
; _this$ = ecx

; 1111 : {

  027a0	55		 push	 ebp
  027a1	8b ec		 mov	 ebp, esp
  027a3	83 ec 14	 sub	 esp, 20			; 00000014H
  027a6	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1112 :    CRect rect;

  027a9	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  027ac	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1113 :    GetClientRect(&rect);

  027b1	8d 45 f0	 lea	 eax, DWORD PTR _rect$[ebp]
  027b4	50		 push	 eax
  027b5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  027b8	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1114 :    pDC->FillSolidRect(&rect, m_crBackground);

  027bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  027c0	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  027c6	52		 push	 edx
  027c7	8d 45 f0	 lea	 eax, DWORD PTR _rect$[ebp]
  027ca	50		 push	 eax
  027cb	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  027ce	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 1115 :    return TRUE;

  027d3	b8 01 00 00 00	 mov	 eax, 1

; 1116 : }

  027d8	8b e5		 mov	 esp, ebp
  027da	5d		 pop	 ebp
  027db	c2 04 00	 ret	 4
?OnEraseBkgnd@CBalloonHelp@@IAEHPAVCDC@@@Z ENDP		; CBalloonHelp::OnEraseBkgnd
_TEXT	ENDS
EXTRN	??0CPaintDC@@QAE@PAVCWnd@@@Z:NEAR		; CPaintDC::CPaintDC
EXTRN	??1CPaintDC@@UAE@XZ:NEAR			; CPaintDC::~CPaintDC
xdata$x	SEGMENT
$T199387 DD	0ffffffffH
	DD	FLAT:$L199382
$T199384 DD	019930520H
	DD	01H
	DD	FLAT:$T199387
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -112						; size = 4
_dc$ = -108						; size = 84
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
?OnPaint@CBalloonHelp@@IAEXXZ PROC NEAR			; CBalloonHelp::OnPaint
; _this$ = ecx

; 1120 : {

  027e0	55		 push	 ebp
  027e1	8b ec		 mov	 ebp, esp
  027e3	6a ff		 push	 -1
  027e5	68 00 00 00 00	 push	 __ehhandler$?OnPaint@CBalloonHelp@@IAEXXZ
  027ea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  027f0	50		 push	 eax
  027f1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  027f8	83 ec 64	 sub	 esp, 100		; 00000064H
  027fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  02800	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  02803	89 4d 90	 mov	 DWORD PTR _this$[ebp], ecx

; 1121 :    CPaintDC dc(this); // device context for painting

  02806	8b 45 90	 mov	 eax, DWORD PTR _this$[ebp]
  02809	50		 push	 eax
  0280a	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  0280d	e8 00 00 00 00	 call	 ??0CPaintDC@@QAE@PAVCWnd@@@Z ; CPaintDC::CPaintDC
  02812	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1122 :    DrawClientArea(&dc);

  02819	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  0281c	51		 push	 ecx
  0281d	8b 55 90	 mov	 edx, DWORD PTR _this$[ebp]
  02820	8b 02		 mov	 eax, DWORD PTR [edx]
  02822	8b 4d 90	 mov	 ecx, DWORD PTR _this$[ebp]
  02825	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]

; 1123 : }

  0282b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02832	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  02835	e8 00 00 00 00	 call	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
  0283a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0283d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02844	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02847	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0284c	8b e5		 mov	 esp, ebp
  0284e	5d		 pop	 ebp
  0284f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L199382:
  0016f	8d 4d 94	 lea	 ecx, DWORD PTR _dc$[ebp]
  00172	e9 00 00 00 00	 jmp	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
__ehhandler$?OnPaint@CBalloonHelp@@IAEXXZ:
  00177	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199384
  0017c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnPaint@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnPaint
xdata$x	SEGMENT
$T199393 DD	0ffffffffH
	DD	FLAT:$L199389
$T199391 DD	019930520H
	DD	01H
	DD	FLAT:$T199393
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -36						; size = 4
_dc$ = -32						; size = 20
__$EHRec$ = -12						; size = 12
?OnNcPaint@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::OnNcPaint
; _this$ = ecx

; 1127 : {

  02850	55		 push	 ebp
  02851	8b ec		 mov	 ebp, esp
  02853	6a ff		 push	 -1
  02855	68 00 00 00 00	 push	 __ehhandler$?OnNcPaint@CBalloonHelp@@IAEXXZ
  0285a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02860	50		 push	 eax
  02861	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02868	83 ec 18	 sub	 esp, 24			; 00000018H
  0286b	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1128 :    CWindowDC dc(this);

  0286e	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  02871	50		 push	 eax
  02872	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02875	e8 00 00 00 00	 call	 ??0CWindowDC@@QAE@PAVCWnd@@@Z ; CWindowDC::CWindowDC
  0287a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1129 :    DrawNonClientArea(&dc);

  02881	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  02884	51		 push	 ecx
  02885	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  02888	8b 02		 mov	 eax, DWORD PTR [edx]
  0288a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0288d	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 1130 : }

  02893	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0289a	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  0289d	e8 00 00 00 00	 call	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
  028a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  028a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  028ac	8b e5		 mov	 esp, ebp
  028ae	5d		 pop	 ebp
  028af	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L199389:
  00181	8d 4d e0	 lea	 ecx, DWORD PTR _dc$[ebp]
  00184	e9 00 00 00 00	 jmp	 ??1CWindowDC@@UAE@XZ	; CWindowDC::~CWindowDC
__ehhandler$?OnNcPaint@CBalloonHelp@@IAEXXZ:
  00189	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199391
  0018e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnNcPaint@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnNcPaint
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:NEAR	; CDC::FromHandle
EXTRN	?Default@CWnd@@IAEJXZ:NEAR			; CWnd::Default
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDC$ = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnPrint@CBalloonHelp@@IAEJIJ@Z PROC NEAR		; CBalloonHelp::OnPrint
; _this$ = ecx

; 1134 : {

  028b0	55		 push	 ebp
  028b1	8b ec		 mov	 ebp, esp
  028b3	83 ec 08	 sub	 esp, 8
  028b6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1135 :    CDC* pDC = CDC::FromHandle((HDC)wParam);

  028b9	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  028bc	50		 push	 eax
  028bd	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  028c2	89 45 fc	 mov	 DWORD PTR _pDC$[ebp], eax

; 1136 :    if ( lParam & PRF_NONCLIENT  ) 

  028c5	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam$[ebp]
  028c8	83 e1 02	 and	 ecx, 2
  028cb	74 12		 je	 SHORT $L198355

; 1137 :       DrawNonClientArea(pDC);

  028cd	8b 55 fc	 mov	 edx, DWORD PTR _pDC$[ebp]
  028d0	52		 push	 edx
  028d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  028d4	8b 10		 mov	 edx, DWORD PTR [eax]
  028d6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  028d9	ff 92 38 01 00
	00		 call	 DWORD PTR [edx+312]
$L198355:

; 1138 :    return Default();

  028df	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  028e2	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default

; 1139 : }

  028e7	8b e5		 mov	 esp, ebp
  028e9	5d		 pop	 ebp
  028ea	c2 08 00	 ret	 8
?OnPrint@CBalloonHelp@@IAEJIJ@Z ENDP			; CBalloonHelp::OnPrint
_TEXT	ENDS
PUBLIC	?SendMessageA@CWnd@@QAEJIIJ@Z			; CWnd::SendMessageA
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDC$ = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnPrintClient@CBalloonHelp@@IAEJIJ@Z PROC NEAR		; CBalloonHelp::OnPrintClient
; _this$ = ecx

; 1143 : {

  028f0	55		 push	 ebp
  028f1	8b ec		 mov	 ebp, esp
  028f3	83 ec 08	 sub	 esp, 8
  028f6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1144 :    CDC* pDC = CDC::FromHandle((HDC)wParam);

  028f9	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  028fc	50		 push	 eax
  028fd	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  02902	89 45 fc	 mov	 DWORD PTR _pDC$[ebp], eax

; 1145 :    if ( lParam & PRF_ERASEBKGND ) 

  02905	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam$[ebp]
  02908	83 e1 08	 and	 ecx, 8
  0290b	74 10		 je	 SHORT $L198363

; 1146 :       SendMessage( WM_ERASEBKGND, wParam );

  0290d	6a 00		 push	 0
  0290f	8b 55 08	 mov	 edx, DWORD PTR _wParam$[ebp]
  02912	52		 push	 edx
  02913	6a 14		 push	 20			; 00000014H
  02915	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02918	e8 00 00 00 00	 call	 ?SendMessageA@CWnd@@QAEJIIJ@Z ; CWnd::SendMessageA
$L198363:

; 1147 :    if ( lParam & PRF_CLIENT ) 

  0291d	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  02920	83 e0 04	 and	 eax, 4
  02923	74 12		 je	 SHORT $L198364

; 1148 :       DrawClientArea(pDC);

  02925	8b 4d fc	 mov	 ecx, DWORD PTR _pDC$[ebp]
  02928	51		 push	 ecx
  02929	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0292c	8b 02		 mov	 eax, DWORD PTR [edx]
  0292e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02931	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
$L198364:

; 1149 :    return 0;

  02937	33 c0		 xor	 eax, eax

; 1150 : }

  02939	8b e5		 mov	 esp, ebp
  0293b	5d		 pop	 ebp
  0293c	c2 08 00	 ret	 8
?OnPrintClient@CBalloonHelp@@IAEJIJ@Z ENDP		; CBalloonHelp::OnPrintClient
_TEXT	ENDS
PUBLIC	?PtInRect@CRect@@QBEHUtagPOINT@@@Z		; CRect::PtInRect
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T199397 = -24						; size = 8
_rect$198371 = -16					; size = 16
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnLButtonDown
; _this$ = ecx

; 1154 : {

  02940	55		 push	 ebp
  02941	8b ec		 mov	 ebp, esp
  02943	83 ec 1c	 sub	 esp, 28			; 0000001cH
  02946	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1155 :    if (m_unOptions & unSHOW_CLOSE_BUTTON)

  02949	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0294c	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02952	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  02958	74 78		 je	 SHORT $L198369

; 1156 :    {
; 1157 :       CRect rect;

  0295a	8d 4d f0	 lea	 ecx, DWORD PTR _rect$198371[ebp]
  0295d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1158 :       GetClientRect(&rect);

  02962	8d 55 f0	 lea	 edx, DWORD PTR _rect$198371[ebp]
  02965	52		 push	 edx
  02966	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  02969	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1159 :       rect.left = rect.right - nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  0296e	8b 45 f8	 mov	 eax, DWORD PTR _rect$198371[ebp+8]
  02971	83 e8 0e	 sub	 eax, 14			; 0000000eH
  02974	89 45 f0	 mov	 DWORD PTR _rect$198371[ebp], eax

; 1160 :       rect.bottom = rect.top + nCYCloseBtn;//::GetSystemMetrics(SM_CYSIZE);

  02977	8b 4d f4	 mov	 ecx, DWORD PTR _rect$198371[ebp+4]
  0297a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0297d	89 4d fc	 mov	 DWORD PTR _rect$198371[ebp+12], ecx

; 1161 :       if ( rect.PtInRect(point) )

  02980	8b 55 0c	 mov	 edx, DWORD PTR _point$[ebp]
  02983	89 55 e8	 mov	 DWORD PTR $T199397[ebp], edx
  02986	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  02989	89 45 ec	 mov	 DWORD PTR $T199397[ebp+4], eax
  0298c	8b 4d ec	 mov	 ecx, DWORD PTR $T199397[ebp+4]
  0298f	51		 push	 ecx
  02990	8b 55 e8	 mov	 edx, DWORD PTR $T199397[ebp]
  02993	52		 push	 edx
  02994	8d 4d f0	 lea	 ecx, DWORD PTR _rect$198371[ebp]
  02997	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  0299c	85 c0		 test	 eax, eax
  0299e	74 32		 je	 SHORT $L198369

; 1162 :       {
; 1163 :          m_uCloseState |= DFCS_PUSHED;

  029a0	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  029a3	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  029a9	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  029af	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  029b2	89 8a dc 00 00
	00		 mov	 DWORD PTR [edx+220], ecx

; 1164 :          SetCapture();

  029b8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  029bb	e8 00 00 00 00	 call	 ?SetCapture@CWnd@@QAEPAV1@XZ ; CWnd::SetCapture

; 1165 :          OnMouseMove(0, point);

  029c0	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  029c3	50		 push	 eax
  029c4	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  029c7	51		 push	 ecx
  029c8	6a 00		 push	 0
  029ca	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  029cd	e8 00 00 00 00	 call	 ?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z ; CBalloonHelp::OnMouseMove
$L198369:

; 1166 :       }
; 1167 :    }
; 1168 : }

  029d2	8b e5		 mov	 esp, ebp
  029d4	5d		 pop	 ebp
  029d5	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonDown@CBalloonHelp@@IAEXIVCPoint@@@Z ENDP	; CBalloonHelp::OnLButtonDown
_TEXT	ENDS
EXTRN	__imp__ShellExecuteA@24:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T199400 = -48						; size = 8
$T199399 = -40						; size = 8
_rect$198385 = -32					; size = 16
_rect$198380 = -16					; size = 16
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnLButtonUp
; _this$ = ecx

; 1173 : {

  029e0	55		 push	 ebp
  029e1	8b ec		 mov	 ebp, esp
  029e3	83 ec 34	 sub	 esp, 52			; 00000034H
  029e6	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 1174 :    if ( (m_unOptions & unSHOW_CLOSE_BUTTON) && (m_uCloseState & DFCS_PUSHED) )

  029e9	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  029ec	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  029f2	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  029f8	74 7e		 je	 SHORT $L198379
  029fa	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  029fd	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  02a03	25 00 02 00 00	 and	 eax, 512		; 00000200H
  02a08	74 6e		 je	 SHORT $L198379

; 1175 :    {
; 1176 :       ReleaseCapture();

  02a0a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0

; 1177 :       m_uCloseState &= ~DFCS_PUSHED;

  02a10	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a13	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  02a19	81 e2 ff fd ff
	ff		 and	 edx, -513		; fffffdffH
  02a1f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  02a22	89 90 dc 00 00
	00		 mov	 DWORD PTR [eax+220], edx

; 1178 :       CRect rect;

  02a28	8d 4d f0	 lea	 ecx, DWORD PTR _rect$198380[ebp]
  02a2b	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1179 :       GetClientRect(&rect);

  02a30	8d 4d f0	 lea	 ecx, DWORD PTR _rect$198380[ebp]
  02a33	51		 push	 ecx
  02a34	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a37	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1180 :       rect.left = rect.right - nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  02a3c	8b 55 f8	 mov	 edx, DWORD PTR _rect$198380[ebp+8]
  02a3f	83 ea 0e	 sub	 edx, 14			; 0000000eH
  02a42	89 55 f0	 mov	 DWORD PTR _rect$198380[ebp], edx

; 1181 :       rect.bottom = rect.top + nCYCloseBtn;//::GetSystemMetrics(SM_CYSIZE);

  02a45	8b 45 f4	 mov	 eax, DWORD PTR _rect$198380[ebp+4]
  02a48	83 c0 0e	 add	 eax, 14			; 0000000eH
  02a4b	89 45 fc	 mov	 DWORD PTR _rect$198380[ebp+12], eax

; 1182 :       if ( rect.PtInRect(point) )

  02a4e	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  02a51	89 4d d8	 mov	 DWORD PTR $T199399[ebp], ecx
  02a54	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  02a57	89 55 dc	 mov	 DWORD PTR $T199399[ebp+4], edx
  02a5a	8b 45 dc	 mov	 eax, DWORD PTR $T199399[ebp+4]
  02a5d	50		 push	 eax
  02a5e	8b 4d d8	 mov	 ecx, DWORD PTR $T199399[ebp]
  02a61	51		 push	 ecx
  02a62	8d 4d f0	 lea	 ecx, DWORD PTR _rect$198380[ebp]
  02a65	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  02a6a	85 c0		 test	 eax, eax
  02a6c	74 08		 je	 SHORT $L198382

; 1183 :          HideBalloon();

  02a6e	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a71	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon
$L198382:

; 1184 :    }
; 1185 :    else if ( !m_strURL.IsEmpty() )

  02a76	eb 72		 jmp	 SHORT $L198378
$L198379:
  02a78	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a7b	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  02a81	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  02a87	0f b6 d0	 movzx	 edx, al
  02a8a	85 d2		 test	 edx, edx
  02a8c	75 5c		 jne	 SHORT $L198378

; 1186 :    {
; 1187 :       CRect rect;

  02a8e	8d 4d e0	 lea	 ecx, DWORD PTR _rect$198385[ebp]
  02a91	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1188 :       GetClientRect(&rect);

  02a96	8d 45 e0	 lea	 eax, DWORD PTR _rect$198385[ebp]
  02a99	50		 push	 eax
  02a9a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02a9d	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1189 :       if ( rect.PtInRect(point) )

  02aa2	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  02aa5	89 4d d0	 mov	 DWORD PTR $T199400[ebp], ecx
  02aa8	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  02aab	89 55 d4	 mov	 DWORD PTR $T199400[ebp+4], edx
  02aae	8b 45 d4	 mov	 eax, DWORD PTR $T199400[ebp+4]
  02ab1	50		 push	 eax
  02ab2	8b 4d d0	 mov	 ecx, DWORD PTR $T199400[ebp]
  02ab5	51		 push	 ecx
  02ab6	8d 4d e0	 lea	 ecx, DWORD PTR _rect$198385[ebp]
  02ab9	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  02abe	85 c0		 test	 eax, eax
  02ac0	74 28		 je	 SHORT $L198378

; 1190 :       {
; 1191 :          ::ShellExecute(NULL, NULL, m_strURL, NULL, NULL, SW_SHOWNORMAL);

  02ac2	6a 01		 push	 1
  02ac4	6a 00		 push	 0
  02ac6	6a 00		 push	 0
  02ac8	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02acb	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  02ad1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  02ad7	50		 push	 eax
  02ad8	6a 00		 push	 0
  02ada	6a 00		 push	 0
  02adc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 1192 :          HideBalloon();

  02ae2	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ae5	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon
$L198378:

; 1193 :       }
; 1194 :    }
; 1195 : }

  02aea	8b e5		 mov	 esp, ebp
  02aec	5d		 pop	 ebp
  02aed	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonUp@CBalloonHelp@@IAEXIVCPoint@@@Z ENDP	; CBalloonHelp::OnLButtonUp
; Function compile flags: /Odt
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnNcHitTest
; _this$ = ecx

; 1201 : {

  02af0	55		 push	 ebp
  02af1	8b ec		 mov	 ebp, esp
  02af3	51		 push	 ecx
  02af4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1202 :    return HTCLIENT;

  02af7	b8 01 00 00 00	 mov	 eax, 1

; 1203 : }

  02afc	8b e5		 mov	 esp, ebp
  02afe	5d		 pop	 ebp
  02aff	c2 08 00	 ret	 8
?OnNcHitTest@CBalloonHelp@@IAEIVCPoint@@@Z ENDP		; CBalloonHelp::OnNcHitTest
_TEXT	ENDS
EXTRN	??0CClientDC@@QAE@PAVCWnd@@@Z:NEAR		; CClientDC::CClientDC
EXTRN	??1CClientDC@@UAE@XZ:NEAR			; CClientDC::~CClientDC
xdata$x	SEGMENT
$T199408 DD	0ffffffffH
	DD	FLAT:$L199404
$T199406 DD	019930520H
	DD	01H
	DD	FLAT:$T199408
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T199403 = -64						; size = 8
_bPushed$198401 = -56					; size = 4
_uState$198400 = -52					; size = 4
_rect$198398 = -48					; size = 16
_dc$198399 = -32					; size = 20
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z PROC NEAR	; CBalloonHelp::OnMouseMove
; _this$ = ecx

; 1210 : {

  02b10	55		 push	 ebp
  02b11	8b ec		 mov	 ebp, esp
  02b13	6a ff		 push	 -1
  02b15	68 00 00 00 00	 push	 __ehhandler$?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z
  02b1a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02b20	50		 push	 eax
  02b21	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02b28	83 ec 38	 sub	 esp, 56			; 00000038H
  02b2b	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 1211 :    if (m_unOptions & unSHOW_CLOSE_BUTTON)

  02b2e	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  02b31	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02b37	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  02b3d	0f 84 0d 01 00
	00		 je	 $L198396

; 1212 :    {
; 1213 :       CRect rect;

  02b43	8d 4d d0	 lea	 ecx, DWORD PTR _rect$198398[ebp]
  02b46	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1214 :       GetClientRect(&rect);

  02b4b	8d 55 d0	 lea	 edx, DWORD PTR _rect$198398[ebp]
  02b4e	52		 push	 edx
  02b4f	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  02b52	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 1215 :       rect.left = rect.right - nCXCloseBtn;//::GetSystemMetrics(SM_CXSIZE);

  02b57	8b 45 d8	 mov	 eax, DWORD PTR _rect$198398[ebp+8]
  02b5a	83 e8 0e	 sub	 eax, 14			; 0000000eH
  02b5d	89 45 d0	 mov	 DWORD PTR _rect$198398[ebp], eax

; 1216 :       rect.bottom = rect.top + nCYCloseBtn;//::GetSystemMetrics(SM_CYSIZE);

  02b60	8b 4d d4	 mov	 ecx, DWORD PTR _rect$198398[ebp+4]
  02b63	83 c1 0e	 add	 ecx, 14			; 0000000eH
  02b66	89 4d dc	 mov	 DWORD PTR _rect$198398[ebp+12], ecx

; 1217 :       CClientDC dc(this);

  02b69	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  02b6c	52		 push	 edx
  02b6d	8d 4d e0	 lea	 ecx, DWORD PTR _dc$198399[ebp]
  02b70	e8 00 00 00 00	 call	 ??0CClientDC@@QAE@PAVCWnd@@@Z ; CClientDC::CClientDC
  02b75	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1218 :       UINT uState = DFCS_CAPTIONCLOSE;

  02b7c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _uState$198400[ebp], 0

; 1219 :       BOOL bPushed = m_uCloseState&DFCS_PUSHED;

  02b83	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  02b86	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  02b8c	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  02b92	89 4d c8	 mov	 DWORD PTR _bPushed$198401[ebp], ecx

; 1220 :       m_uCloseState &= ~DFCS_PUSHED;

  02b95	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  02b98	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  02b9e	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  02ba3	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  02ba6	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax

; 1221 :       if ( rect.PtInRect(point) )

  02bac	8b 55 0c	 mov	 edx, DWORD PTR _point$[ebp]
  02baf	89 55 c0	 mov	 DWORD PTR $T199403[ebp], edx
  02bb2	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  02bb5	89 45 c4	 mov	 DWORD PTR $T199403[ebp+4], eax
  02bb8	8b 4d c4	 mov	 ecx, DWORD PTR $T199403[ebp+4]
  02bbb	51		 push	 ecx
  02bbc	8b 55 c0	 mov	 edx, DWORD PTR $T199403[ebp]
  02bbf	52		 push	 edx
  02bc0	8d 4d d0	 lea	 ecx, DWORD PTR _rect$198398[ebp]
  02bc3	e8 00 00 00 00	 call	 ?PtInRect@CRect@@QBEHUtagPOINT@@@Z ; CRect::PtInRect
  02bc8	85 c0		 test	 eax, eax
  02bca	74 1f		 je	 SHORT $L198403

; 1222 :       {
; 1223 :          uState |= DFCS_HOT;

  02bcc	8b 45 cc	 mov	 eax, DWORD PTR _uState$198400[ebp]
  02bcf	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  02bd4	89 45 cc	 mov	 DWORD PTR _uState$198400[ebp], eax

; 1224 :          if ( bPushed )

  02bd7	83 7d c8 00	 cmp	 DWORD PTR _bPushed$198401[ebp], 0
  02bdb	74 0c		 je	 SHORT $L198404

; 1225 :             uState |= DFCS_PUSHED;

  02bdd	8b 4d cc	 mov	 ecx, DWORD PTR _uState$198400[ebp]
  02be0	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  02be6	89 4d cc	 mov	 DWORD PTR _uState$198400[ebp], ecx
$L198404:

; 1226 :       }
; 1227 :       else

  02be9	eb 0c		 jmp	 SHORT $L198405
$L198403:

; 1228 :       {
; 1229 :          uState |= DFCS_FLAT;

  02beb	8b 55 cc	 mov	 edx, DWORD PTR _uState$198400[ebp]
  02bee	81 ca 00 40 00
	00		 or	 edx, 16384		; 00004000H
  02bf4	89 55 cc	 mov	 DWORD PTR _uState$198400[ebp], edx
$L198405:

; 1230 :       }
; 1231 :       if ( uState != m_uCloseState )

  02bf7	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  02bfa	8b 4d cc	 mov	 ecx, DWORD PTR _uState$198400[ebp]
  02bfd	3b 88 dc 00 00
	00		 cmp	 ecx, DWORD PTR [eax+220]
  02c03	74 1e		 je	 SHORT $L198406

; 1232 :       {
; 1233 :          dc.DrawFrameControl(&rect, DFC_CAPTION, uState);

  02c05	8b 55 cc	 mov	 edx, DWORD PTR _uState$198400[ebp]
  02c08	52		 push	 edx
  02c09	6a 01		 push	 1
  02c0b	8d 45 d0	 lea	 eax, DWORD PTR _rect$198398[ebp]
  02c0e	50		 push	 eax
  02c0f	8d 4d e0	 lea	 ecx, DWORD PTR _dc$198399[ebp]
  02c12	e8 00 00 00 00	 call	 ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawFrameControl

; 1234 :          m_uCloseState = uState;

  02c17	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c1a	8b 55 cc	 mov	 edx, DWORD PTR _uState$198400[ebp]
  02c1d	89 91 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], edx
$L198406:

; 1235 :       }
; 1236 :       if ( bPushed )

  02c23	83 7d c8 00	 cmp	 DWORD PTR _bPushed$198401[ebp], 0
  02c27	74 18		 je	 SHORT $L198407

; 1237 :          m_uCloseState |= DFCS_PUSHED;

  02c29	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  02c2c	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  02c32	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  02c38	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  02c3b	89 8a dc 00 00
	00		 mov	 DWORD PTR [edx+220], ecx
$L198407:

; 1238 :    }

  02c41	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02c48	8d 4d e0	 lea	 ecx, DWORD PTR _dc$198399[ebp]
  02c4b	e8 00 00 00 00	 call	 ??1CClientDC@@UAE@XZ	; CClientDC::~CClientDC
$L198396:

; 1239 : }

  02c50	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02c53	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02c5a	8b e5		 mov	 esp, ebp
  02c5c	5d		 pop	 ebp
  02c5d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L199404:
  00193	8d 4d e0	 lea	 ecx, DWORD PTR _dc$198399[ebp]
  00196	e9 00 00 00 00	 jmp	 ??1CClientDC@@UAE@XZ	; CClientDC::~CClientDC
__ehhandler$?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z:
  0019b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199406
  001a0	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnMouseMove@CBalloonHelp@@IAEXIVCPoint@@@Z ENDP	; CBalloonHelp::OnMouseMove
EXTRN	__imp__SetRectEmpty@4:NEAR
EXTRN	__imp__InflateRect@12:NEAR
EXTRN	__imp__EqualRect@8:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_bCalcValidRects$ = 8					; size = 4
_lpncsp$ = 12						; size = 4
?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z PROC NEAR ; CBalloonHelp::OnNcCalcSize
; _this$ = ecx

; 1244 : {

  02c60	55		 push	 ebp
  02c61	8b ec		 mov	 ebp, esp
  02c63	83 ec 08	 sub	 esp, 8
  02c66	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1245 :    // nTIP_MARGIN pixel margin on all sides
; 1246 :    ::InflateRect(&lpncsp->rgrc[0], -nTIP_MARGIN,-nTIP_MARGIN);

  02c69	6a f8		 push	 -8			; fffffff8H
  02c6b	6a f8		 push	 -8			; fffffff8H
  02c6d	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  02c70	50		 push	 eax
  02c71	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12

; 1247 : 
; 1248 :    // nTIP_TAIL pixel "tail" on side closest to anchor
; 1249 :    switch ( GetBalloonQuadrant() )

  02c77	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02c7a	e8 00 00 00 00	 call	 ?GetBalloonQuadrant@CBalloonHelp@@IAE?AW4BALLOON_QUADRANT@1@XZ ; CBalloonHelp::GetBalloonQuadrant
  02c7f	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  02c82	83 7d f8 03	 cmp	 DWORD PTR tv69[ebp], 3
  02c86	77 2a		 ja	 SHORT $L198414
  02c88	8b 4d f8	 mov	 ecx, DWORD PTR tv69[ebp]
  02c8b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L199410[ecx*4]
$L198417:

; 1250 :    {
; 1251 :    case BQ_TOPRIGHT:
; 1252 :    case BQ_TOPLEFT:
; 1253 :       lpncsp->rgrc[0].top += nTIP_TAIL;

  02c92	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02c95	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02c98	83 c0 14	 add	 eax, 20			; 00000014H
  02c9b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpncsp$[ebp]
  02c9e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1254 :       break;

  02ca1	eb 0f		 jmp	 SHORT $L198414
$L198418:

; 1255 :    case BQ_BOTTOMRIGHT:
; 1256 :    case BQ_BOTTOMLEFT:
; 1257 :       lpncsp->rgrc[0].bottom -= nTIP_TAIL;

  02ca3	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02ca6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  02ca9	83 e8 14	 sub	 eax, 20			; 00000014H
  02cac	8b 4d 0c	 mov	 ecx, DWORD PTR _lpncsp$[ebp]
  02caf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L198414:

; 1258 :       break;
; 1259 :    }
; 1260 : 
; 1261 :    // sanity: ensure rect does not have negative size
; 1262 :    if ( lpncsp->rgrc[0].right < lpncsp->rgrc[0].left )

  02cb2	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02cb5	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  02cb8	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  02cbb	3b 08		 cmp	 ecx, DWORD PTR [eax]
  02cbd	7d 0b		 jge	 SHORT $L198419

; 1263 :       lpncsp->rgrc[0].right = lpncsp->rgrc[0].left;

  02cbf	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02cc2	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  02cc5	8b 08		 mov	 ecx, DWORD PTR [eax]
  02cc7	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L198419:

; 1264 :    if ( lpncsp->rgrc[0].bottom < lpncsp->rgrc[0].top )

  02cca	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02ccd	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  02cd0	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  02cd3	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  02cd6	7d 0c		 jge	 SHORT $L198420

; 1265 :       lpncsp->rgrc[0].bottom = lpncsp->rgrc[0].top;

  02cd8	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02cdb	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  02cde	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02ce1	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L198420:

; 1266 : 
; 1267 :    if ( bCalcValidRects )

  02ce4	83 7d 08 00	 cmp	 DWORD PTR _bCalcValidRects$[ebp], 0
  02ce8	74 22		 je	 SHORT $L198412

; 1268 :    {
; 1269 :       // determine if client position has changed relative to the window position
; 1270 :       // if so, don't bother presearving anything.
; 1271 :       if ( !::EqualRect(&lpncsp->rgrc[0], &lpncsp->rgrc[2]) )

  02cea	8b 55 0c	 mov	 edx, DWORD PTR _lpncsp$[ebp]
  02ced	83 c2 20	 add	 edx, 32			; 00000020H
  02cf0	52		 push	 edx
  02cf1	8b 45 0c	 mov	 eax, DWORD PTR _lpncsp$[ebp]
  02cf4	50		 push	 eax
  02cf5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EqualRect@8
  02cfb	85 c0		 test	 eax, eax
  02cfd	75 0d		 jne	 SHORT $L198412

; 1272 :       {
; 1273 :          ::SetRectEmpty(&lpncsp->rgrc[2]);

  02cff	8b 4d 0c	 mov	 ecx, DWORD PTR _lpncsp$[ebp]
  02d02	83 c1 20	 add	 ecx, 32			; 00000020H
  02d05	51		 push	 ecx
  02d06	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRectEmpty@4
$L198412:

; 1274 :       }
; 1275 :    }
; 1276 : }

  02d0c	8b e5		 mov	 esp, ebp
  02d0e	5d		 pop	 ebp
  02d0f	c2 08 00	 ret	 8
$L199410:
  02d12	00 00 00 00	 DD	 $L198417
  02d16	00 00 00 00	 DD	 $L198417
  02d1a	00 00 00 00	 DD	 $L198418
  02d1e	00 00 00 00	 DD	 $L198418
?OnNcCalcSize@CBalloonHelp@@IAEXHPAUtagNCCALCSIZE_PARAMS@@@Z ENDP ; CBalloonHelp::OnNcCalcSize
; Function compile flags: /Odt
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
?OnTimer@CBalloonHelp@@IAEXI@Z PROC NEAR		; CBalloonHelp::OnTimer
; _this$ = ecx

; 1280 : {

  02d30	55		 push	 ebp
  02d31	8b ec		 mov	 ebp, esp
  02d33	51		 push	 ecx
  02d34	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1281 :    // really shouldn't be any other timers firing, but might as well make sure
; 1282 :    if ( nIDEvent == ID_TIMER_CLOSE )

  02d37	83 7d 08 01	 cmp	 DWORD PTR _nIDEvent$[ebp], 1
  02d3b	75 1a		 jne	 SHORT $L198426

; 1283 :    {
; 1284 :       KillTimer(m_unTimerClose);

  02d3d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02d40	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  02d46	51		 push	 ecx
  02d47	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d4a	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer

; 1285 :       HideBalloon();

  02d4f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d52	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon
$L198426:

; 1286 :    }
; 1287 : }

  02d57	8b e5		 mov	 esp, ebp
  02d59	5d		 pop	 ebp
  02d5a	c2 04 00	 ret	 4
?OnTimer@CBalloonHelp@@IAEXI@Z ENDP			; CBalloonHelp::OnTimer
_TEXT	ENDS
EXTRN	?OnDestroy@CWnd@@IAEXXZ:NEAR			; CWnd::OnDestroy
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnDestroy@CBalloonHelp@@IAEXXZ PROC NEAR		; CBalloonHelp::OnDestroy
; _this$ = ecx

; 1291 : {

  02d60	55		 push	 ebp
  02d61	8b ec		 mov	 ebp, esp
  02d63	51		 push	 ecx
  02d64	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1292 :    // remove hooks
; 1293 :    RemoveMouseHook();

  02d67	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d6a	e8 00 00 00 00	 call	 ?RemoveMouseHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveMouseHook

; 1294 :    RemoveKeyboardHook();

  02d6f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d72	e8 00 00 00 00	 call	 ?RemoveKeyboardHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveKeyboardHook

; 1295 :    RemoveCallWndRetHook();

  02d77	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d7a	e8 00 00 00 00	 call	 ?RemoveCallWndRetHook@CBalloonHelp@@AAEXXZ ; CBalloonHelp::RemoveCallWndRetHook

; 1296 : 
; 1297 :    // destroy
; 1298 :    CWnd::OnDestroy();

  02d7f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d82	e8 00 00 00 00	 call	 ?OnDestroy@CWnd@@IAEXXZ	; CWnd::OnDestroy

; 1299 : }

  02d87	8b e5		 mov	 esp, ebp
  02d89	5d		 pop	 ebp
  02d8a	c3		 ret	 0
?OnDestroy@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnDestroy
; Function compile flags: /Odt
_this$ = -4						; size = 4
?OnClose@CBalloonHelp@@IAEXXZ PROC NEAR			; CBalloonHelp::OnClose
; _this$ = ecx

; 1303 : {

  02d90	55		 push	 ebp
  02d91	8b ec		 mov	 ebp, esp
  02d93	51		 push	 ecx
  02d94	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1304 :    HideBalloon();

  02d97	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02d9a	e8 00 00 00 00	 call	 ?HideBalloon@CBalloonHelp@@IAEXXZ ; CBalloonHelp::HideBalloon

; 1305 : }

  02d9f	8b e5		 mov	 esp, ebp
  02da1	5d		 pop	 ebp
  02da2	c3		 ret	 0
?OnClose@CBalloonHelp@@IAEXXZ ENDP			; CBalloonHelp::OnClose
_TEXT	ENDS
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
; Function compile flags: /Odt
_TEXT	SEGMENT
tv74 = -16						; size = 4
_this$ = -12						; size = 4
$T199416 = -8						; size = 4
$T199415 = -4						; size = 4
?PostNcDestroy@CBalloonHelp@@MAEXXZ PROC NEAR		; CBalloonHelp::PostNcDestroy
; _this$ = ecx

; 1309 : {

  02db0	55		 push	 ebp
  02db1	8b ec		 mov	 ebp, esp
  02db3	83 ec 10	 sub	 esp, 16			; 00000010H
  02db6	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1310 :    CWnd::PostNcDestroy();

  02db9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02dbc	e8 00 00 00 00	 call	 ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy

; 1311 :   
; 1312 :    // free object if requested
; 1313 :    // be careful with this one :D
; 1314 :    if ( m_unOptions & unDELETE_THIS_ON_CLOSE )

  02dc1	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02dc4	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02dca	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  02dd0	74 2b		 je	 SHORT $L198436

; 1315 :       delete this;

  02dd2	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  02dd5	89 55 f8	 mov	 DWORD PTR $T199416[ebp], edx
  02dd8	8b 45 f8	 mov	 eax, DWORD PTR $T199416[ebp]
  02ddb	89 45 fc	 mov	 DWORD PTR $T199415[ebp], eax
  02dde	83 7d fc 00	 cmp	 DWORD PTR $T199415[ebp], 0
  02de2	74 12		 je	 SHORT $L199417
  02de4	6a 01		 push	 1
  02de6	8b 4d fc	 mov	 ecx, DWORD PTR $T199415[ebp]
  02de9	8b 11		 mov	 edx, DWORD PTR [ecx]
  02deb	8b 4d fc	 mov	 ecx, DWORD PTR $T199415[ebp]
  02dee	ff 52 04	 call	 DWORD PTR [edx+4]
  02df1	89 45 f0	 mov	 DWORD PTR tv74[ebp], eax
  02df4	eb 07		 jmp	 SHORT $L198436
$L199417:
  02df6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$L198436:

; 1316 : }

  02dfd	8b e5		 mov	 esp, ebp
  02dff	5d		 pop	 ebp
  02e00	c3		 ret	 0
?PostNcDestroy@CBalloonHelp@@MAEXXZ ENDP		; CBalloonHelp::PostNcDestroy
_TEXT	ENDS
PUBLIC	?PostMessageA@CWnd@@QAEHIIJ@Z			; CWnd::PostMessageA
EXTRN	__imp__CallNextHookEx@16:NEAR
; Function compile flags: /Odt
_TEXT	SEGMENT
_this$ = -4						; size = 4
_code$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z PROC NEAR	; CBalloonHelp::KeyboardHookProc
; _this$ = ecx

; 1320 : {

  02e10	55		 push	 ebp
  02e11	8b ec		 mov	 ebp, esp
  02e13	51		 push	 ecx
  02e14	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1321 :    // Skip if the key was released or if it's a repeat
; 1322 :    // Bit 31:  Specifies the transition state. The value is 0 if the key  
; 1323 :    //       is being pressed and 1 if it is being released (see MSDN).
; 1324 :    if ( code>=0 && !(lParam&0x80000000) && NULL != m_hWnd )

  02e17	83 7d 08 00	 cmp	 DWORD PTR _code$[ebp], 0
  02e1b	7c 21		 jl	 SHORT $L198446
  02e1d	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  02e20	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  02e25	75 17		 jne	 SHORT $L198446
  02e27	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e2a	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  02e2e	74 0e		 je	 SHORT $L198446

; 1325 :    {
; 1326 :       PostMessage(WM_CLOSE);

  02e30	6a 00		 push	 0
  02e32	6a 00		 push	 0
  02e34	6a 10		 push	 16			; 00000010H
  02e36	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02e39	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198446:

; 1327 :    }
; 1328 :    return ::CallNextHookEx(m_hKeyboardHook, code, wParam, lParam);

  02e3e	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  02e41	52		 push	 edx
  02e42	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  02e45	50		 push	 eax
  02e46	8b 4d 08	 mov	 ecx, DWORD PTR _code$[ebp]
  02e49	51		 push	 ecx
  02e4a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02e4d	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  02e50	50		 push	 eax
  02e51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallNextHookEx@16

; 1329 : }

  02e57	8b e5		 mov	 esp, ebp
  02e59	5d		 pop	 ebp
  02e5a	c2 0c 00	 ret	 12			; 0000000cH
?KeyboardHookProc@CBalloonHelp@@AAEJHIJ@Z ENDP		; CBalloonHelp::KeyboardHookProc
_TEXT	ENDS
PUBLIC	?abs@@YAJJ@Z					; abs
; Function compile flags: /Odt
_TEXT	SEGMENT
tv67 = -16						; size = 4
_this$ = -12						; size = 4
_pt$198461 = -8						; size = 8
_code$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z PROC NEAR	; CBalloonHelp::MouseHookProc
; _this$ = ecx

; 1333 : {

  02e60	55		 push	 ebp
  02e61	8b ec		 mov	 ebp, esp
  02e63	83 ec 10	 sub	 esp, 16			; 00000010H
  02e66	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1334 :    if (code>=0 && NULL != m_hWnd )

  02e69	83 7d 08 00	 cmp	 DWORD PTR _code$[ebp], 0
  02e6d	0f 8c 8d 01 00
	00		 jl	 $L198453
  02e73	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02e76	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  02e7a	0f 84 80 01 00
	00		 je	 $L198453

; 1335 :    {
; 1336 :       switch ( (UINT)wParam )

  02e80	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  02e83	89 4d f0	 mov	 DWORD PTR tv67[ebp], ecx
  02e86	81 7d f0 00 02
	00 00		 cmp	 DWORD PTR tv67[ebp], 512 ; 00000200H
  02e8d	77 29		 ja	 SHORT $L199421
  02e8f	81 7d f0 00 02
	00 00		 cmp	 DWORD PTR tv67[ebp], 512 ; 00000200H
  02e96	74 40		 je	 SHORT $L198459
  02e98	8b 55 f0	 mov	 edx, DWORD PTR tv67[ebp]
  02e9b	81 ea a0 00 00
	00		 sub	 edx, 160		; 000000a0H
  02ea1	89 55 f0	 mov	 DWORD PTR tv67[ebp], edx
  02ea4	83 7d f0 08	 cmp	 DWORD PTR tv67[ebp], 8
  02ea8	0f 87 52 01 00
	00		 ja	 $L198453
  02eae	8b 45 f0	 mov	 eax, DWORD PTR tv67[ebp]
  02eb1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L199422[eax*4]
$L199421:
  02eb8	8b 4d f0	 mov	 ecx, DWORD PTR tv67[ebp]
  02ebb	81 e9 01 02 00
	00		 sub	 ecx, 513		; 00000201H
  02ec1	89 4d f0	 mov	 DWORD PTR tv67[ebp], ecx
  02ec4	83 7d f0 07	 cmp	 DWORD PTR tv67[ebp], 7
  02ec8	0f 87 32 01 00
	00		 ja	 $L198453
  02ece	8b 55 f0	 mov	 edx, DWORD PTR tv67[ebp]
  02ed1	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L199423[edx*4]
$L198459:

; 1337 :       {
; 1338 :       case WM_NCMOUSEMOVE:
; 1339 :       case WM_MOUSEMOVE:
; 1340 :          if ((m_unOptions & unCLOSE_ON_MOUSE_MOVE))

  02ed8	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02edb	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02ee1	83 e1 40	 and	 ecx, 64			; 00000040H
  02ee4	74 60		 je	 SHORT $L198460

; 1341 :          {
; 1342 :             CPoint pt;

  02ee6	8d 4d f8	 lea	 ecx, DWORD PTR _pt$198461[ebp]
  02ee9	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint

; 1343 :             ::GetCursorPos(&pt);

  02eee	8d 55 f8	 lea	 edx, DWORD PTR _pt$198461[ebp]
  02ef1	52		 push	 edx
  02ef2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4

; 1344 :             if ((abs(pt.x-m_ptMouseOrig.x) > m_nMouseMoveTolerance || abs(pt.y-m_ptMouseOrig.y) > m_nMouseMoveTolerance) )

  02ef8	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02efb	8b 4d f8	 mov	 ecx, DWORD PTR _pt$198461[ebp]
  02efe	2b 88 d4 00 00
	00		 sub	 ecx, DWORD PTR [eax+212]
  02f04	51		 push	 ecx
  02f05	e8 00 00 00 00	 call	 ?abs@@YAJJ@Z		; abs
  02f0a	83 c4 04	 add	 esp, 4
  02f0d	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  02f10	3b 82 e0 00 00
	00		 cmp	 eax, DWORD PTR [edx+224]
  02f16	7f 20		 jg	 SHORT $L198463
  02f18	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02f1b	8b 4d fc	 mov	 ecx, DWORD PTR _pt$198461[ebp+4]
  02f1e	2b 88 d8 00 00
	00		 sub	 ecx, DWORD PTR [eax+216]
  02f24	51		 push	 ecx
  02f25	e8 00 00 00 00	 call	 ?abs@@YAJJ@Z		; abs
  02f2a	83 c4 04	 add	 esp, 4
  02f2d	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  02f30	3b 82 e0 00 00
	00		 cmp	 eax, DWORD PTR [edx+224]
  02f36	7e 0e		 jle	 SHORT $L198460
$L198463:

; 1345 :                PostMessage(WM_CLOSE);

  02f38	6a 00		 push	 0
  02f3a	6a 00		 push	 0
  02f3c	6a 10		 push	 16			; 00000010H
  02f3e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02f41	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198460:

; 1346 :          }
; 1347 :          break;

  02f46	e9 b5 00 00 00	 jmp	 $L198453
$L198464:

; 1348 :       case WM_NCLBUTTONDOWN:
; 1349 :       case WM_LBUTTONDOWN:
; 1350 :          if ((m_unOptions & unCLOSE_ON_LBUTTON_DOWN))

  02f4b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02f4e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02f54	83 e1 08	 and	 ecx, 8
  02f57	74 0e		 je	 SHORT $L198465

; 1351 :             PostMessage(WM_CLOSE);

  02f59	6a 00		 push	 0
  02f5b	6a 00		 push	 0
  02f5d	6a 10		 push	 16			; 00000010H
  02f5f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02f62	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198465:

; 1352 :          break;

  02f67	e9 94 00 00 00	 jmp	 $L198453
$L198466:

; 1353 :       case WM_NCMBUTTONDOWN:
; 1354 :       case WM_MBUTTONDOWN:
; 1355 :          if ((m_unOptions & unCLOSE_ON_MBUTTON_DOWN))

  02f6c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  02f6f	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  02f75	83 e0 10	 and	 eax, 16			; 00000010H
  02f78	74 0e		 je	 SHORT $L198467

; 1356 :             PostMessage(WM_CLOSE);

  02f7a	6a 00		 push	 0
  02f7c	6a 00		 push	 0
  02f7e	6a 10		 push	 16			; 00000010H
  02f80	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02f83	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198467:

; 1357 :          break;

  02f88	eb 76		 jmp	 SHORT $L198453
$L198468:

; 1358 :       case WM_NCRBUTTONDOWN:
; 1359 :       case WM_RBUTTONDOWN:
; 1360 :          if ((m_unOptions& unCLOSE_ON_RBUTTON_DOWN))

  02f8a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02f8d	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02f93	83 e2 20	 and	 edx, 32			; 00000020H
  02f96	74 0e		 je	 SHORT $L198469

; 1361 :             PostMessage(WM_CLOSE);

  02f98	6a 00		 push	 0
  02f9a	6a 00		 push	 0
  02f9c	6a 10		 push	 16			; 00000010H
  02f9e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02fa1	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198469:

; 1362 :          break;

  02fa6	eb 58		 jmp	 SHORT $L198453
$L198470:

; 1363 :       case WM_NCLBUTTONUP:
; 1364 :       case WM_LBUTTONUP:
; 1365 :          if ((m_unOptions & unCLOSE_ON_LBUTTON_UP))

  02fa8	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02fab	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02fb1	83 e1 01	 and	 ecx, 1
  02fb4	74 0e		 je	 SHORT $L198471

; 1366 :             PostMessage(WM_CLOSE);

  02fb6	6a 00		 push	 0
  02fb8	6a 00		 push	 0
  02fba	6a 10		 push	 16			; 00000010H
  02fbc	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02fbf	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198471:

; 1367 :          break;

  02fc4	eb 3a		 jmp	 SHORT $L198453
$L198472:

; 1368 :       case WM_NCMBUTTONUP:
; 1369 :       case WM_MBUTTONUP:
; 1370 :          if ((m_unOptions & unCLOSE_ON_MBUTTON_UP))

  02fc6	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  02fc9	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  02fcf	83 e0 02	 and	 eax, 2
  02fd2	74 0e		 je	 SHORT $L198473

; 1371 :             PostMessage(WM_CLOSE);

  02fd4	6a 00		 push	 0
  02fd6	6a 00		 push	 0
  02fd8	6a 10		 push	 16			; 00000010H
  02fda	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02fdd	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198473:

; 1372 :          break;

  02fe2	eb 1c		 jmp	 SHORT $L198453
$L198474:

; 1373 :       case WM_NCRBUTTONUP:
; 1374 :       case WM_RBUTTONUP:
; 1375 :          if ((m_unOptions & unCLOSE_ON_RBUTTON_UP))

  02fe4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02fe7	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  02fed	83 e2 04	 and	 edx, 4
  02ff0	74 0e		 je	 SHORT $L198453

; 1376 :             PostMessage(WM_CLOSE);

  02ff2	6a 00		 push	 0
  02ff4	6a 00		 push	 0
  02ff6	6a 10		 push	 16			; 00000010H
  02ff8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02ffb	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L198453:

; 1377 :          break;
; 1378 :       }
; 1379 :    }
; 1380 :    return ::CallNextHookEx(m_hMouseHook, code, wParam, lParam);

  03000	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  03003	50		 push	 eax
  03004	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  03007	51		 push	 ecx
  03008	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  0300b	52		 push	 edx
  0300c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0300f	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  03012	51		 push	 ecx
  03013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallNextHookEx@16

; 1381 : }

  03019	8b e5		 mov	 esp, ebp
  0301b	5d		 pop	 ebp
  0301c	c2 0c 00	 ret	 12			; 0000000cH
$L199422:
  0301f	00 00 00 00	 DD	 $L198459
  03023	00 00 00 00	 DD	 $L198464
  03027	00 00 00 00	 DD	 $L198470
  0302b	00 00 00 00	 DD	 $L198453
  0302f	00 00 00 00	 DD	 $L198468
  03033	00 00 00 00	 DD	 $L198474
  03037	00 00 00 00	 DD	 $L198453
  0303b	00 00 00 00	 DD	 $L198466
  0303f	00 00 00 00	 DD	 $L198472
$L199423:
  03043	00 00 00 00	 DD	 $L198464
  03047	00 00 00 00	 DD	 $L198470
  0304b	00 00 00 00	 DD	 $L198453
  0304f	00 00 00 00	 DD	 $L198468
  03053	00 00 00 00	 DD	 $L198474
  03057	00 00 00 00	 DD	 $L198453
  0305b	00 00 00 00	 DD	 $L198466
  0305f	00 00 00 00	 DD	 $L198472
?MouseHookProc@CBalloonHelp@@AAEJHIJ@Z ENDP		; CBalloonHelp::MouseHookProc
; Function compile flags: /Odt
_this$ = -8						; size = 4
_pcwpr$198483 = -4					; size = 4
_code$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z PROC NEAR	; CBalloonHelp::CallWndRetProc
; _this$ = ecx

; 1385 : {

  03070	55		 push	 ebp
  03071	8b ec		 mov	 ebp, esp
  03073	83 ec 08	 sub	 esp, 8
  03076	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1386 :    if (code>=0 && NULL != m_hWnd )

  03079	83 7d 08 00	 cmp	 DWORD PTR _code$[ebp], 0
  0307d	7c 31		 jl	 SHORT $L198482
  0307f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  03082	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  03086	74 28		 je	 SHORT $L198482

; 1387 :    {
; 1388 :       CWPRETSTRUCT* pcwpr = (CWPRETSTRUCT*)lParam;

  03088	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0308b	89 4d fc	 mov	 DWORD PTR _pcwpr$198483[ebp], ecx

; 1389 :       if ( WM_MOVE == pcwpr->message && pcwpr->hwnd == m_hwndAnchor )

  0308e	8b 55 fc	 mov	 edx, DWORD PTR _pcwpr$198483[ebp]
  03091	83 7a 0c 03	 cmp	 DWORD PTR [edx+12], 3
  03095	75 19		 jne	 SHORT $L198482
  03097	8b 45 fc	 mov	 eax, DWORD PTR _pcwpr$198483[ebp]
  0309a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0309d	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  030a0	3b 91 98 00 00
	00		 cmp	 edx, DWORD PTR [ecx+152]
  030a6	75 08		 jne	 SHORT $L198482

; 1390 :          PositionWindow();

  030a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  030ab	e8 00 00 00 00	 call	 ?PositionWindow@CBalloonHelp@@IAEXXZ ; CBalloonHelp::PositionWindow
$L198482:

; 1391 :    }
; 1392 : 
; 1393 :    return ::CallNextHookEx(m_hCallWndRetHook, code, wParam, lParam);

  030b0	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  030b3	50		 push	 eax
  030b4	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  030b7	51		 push	 ecx
  030b8	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  030bb	52		 push	 edx
  030bc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  030bf	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  030c5	51		 push	 ecx
  030c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallNextHookEx@16

; 1394 : }

  030cc	8b e5		 mov	 esp, ebp
  030ce	5d		 pop	 ebp
  030cf	c2 0c 00	 ret	 12			; 0000000cH
?CallWndRetProc@CBalloonHelp@@AAEJHIJ@Z ENDP		; CBalloonHelp::CallWndRetProc
_TEXT	ENDS
EXTRN	__imp__FlushInstructionCache@12:NEAR
EXTRN	__imp__GetCurrentProcess@0:NEAR
; Function compile flags: /Odt
; File d:\boxgit\playbox\playbox\dev\prj\playbox\src\gui\util\balloonhelp.h
;	COMDAT ?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_addr$ = -8						; size = 8
_method$ = 8						; size = 8
_pThis$ = 16						; size = 4
?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z PROC NEAR ; _ThunkImpl<CBalloonHelp>::InitThunk, COMDAT
; _this$ = ecx

; 90   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 		union { DWORD func; TMFP method; } addr;
; 92   : 		addr.method = (TMFP)method;

  00009	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _addr$[ebp], eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _method$[ebp+4]
  00012	89 4d fc	 mov	 DWORD PTR _addr$[ebp+4], ecx

; 93   : 		m_mov  = 0xB9;

  00015	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00018	c6 02 b9	 mov	 BYTE PTR [edx], 185	; 000000b9H

; 94   : 		m_this = (DWORD)pThis;

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _pThis$[ebp]
  00021	89 48 01	 mov	 DWORD PTR [eax+1], ecx

; 95   : 		m_jmp  = 0xE9;

  00024	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00027	c6 42 05 e9	 mov	 BYTE PTR [edx+5], 233	; 000000e9H

; 96   : 		m_relproc = addr.func - (DWORD)(this+1);

  0002b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 0a	 add	 eax, 10			; 0000000aH
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _addr$[ebp]
  00034	2b c8		 sub	 ecx, eax
  00036	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00039	89 4a 06	 mov	 DWORD PTR [edx+6], ecx

; 97   : 
; 98   : 		::FlushInstructionCache(GetCurrentProcess(), this, sizeof(*this));

  0003c	6a 0a		 push	 10			; 0000000aH
  0003e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00048	50		 push	 eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushInstructionCache@12

; 99   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?InitThunk@?$_ThunkImpl@VCBalloonHelp@@@@IAEXP8CBalloonHelp@@AEXXZPBV2@@Z ENDP ; _ThunkImpl<CBalloonHelp>::InitThunk
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ PROC NEAR ; _ThunkImpl<CBalloonHelp>::GetThunk, COMDAT
; _this$ = ecx

; 101  :    {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 		_ASSERTE(m_mov == 0xB9);
; 103  : 		return (FARPROC)this; 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 104  :    }

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetThunk@?$_ThunkImpl@VCBalloonHelp@@@@IBEP6GHXZXZ ENDP ; _ThunkImpl<CBalloonHelp>::GetThunk
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initCX$ = 8						; size = 4
_initCY$ = 12						; size = 4
??0CSize@@QAE@HH@Z PROC NEAR				; CSize::CSize, COMDAT
; _this$ = ecx

; 24   : 	{ cx = initCX; cy = initCY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initCX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initCY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CSize@@QAE@HH@Z ENDP					; CSize::CSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPoint@@QAE@XZ PROC NEAR				; CPoint::CPoint, COMDAT
; _this$ = ecx

; 61   : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CPoint@@QAE@XZ ENDP					; CPoint::CPoint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initX$ = 8						; size = 4
_initY$ = 12						; size = 4
??0CPoint@@QAE@HH@Z PROC NEAR				; CPoint::CPoint, COMDAT
; _this$ = ecx

; 63   : 	{ x = initX; y = initY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CPoint@@QAE@HH@Z ENDP				; CPoint::CPoint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 110  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l$ = 8							; size = 4
_t$ = 12						; size = 4
_r$ = 16						; size = 4
_b$ = 20						; size = 4
??0CRect@@QAE@HHHH@Z PROC NEAR				; CRect::CRect, COMDAT
; _this$ = ecx

; 112  : 	{ left = l; top = t; right = r; bottom = b; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _r$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT
; _this$ = ecx

; 123  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT
; _this$ = ecx

; 125  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Size@CRect@@QBE?AVCSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Size@CRect@@QBE?AVCSize@@XZ PROC NEAR			; CRect::Size, COMDAT
; _this$ = ecx

; 127  : 	{ return CSize(right - left, bottom - top); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00010	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	2b 11		 sub	 edx, DWORD PTR [ecx]
  0001f	52		 push	 edx
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e8 00 00 00 00	 call	 ??0CSize@@QAE@HH@Z	; CSize::CSize
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Size@CRect@@QBE?AVCSize@@XZ ENDP			; CRect::Size
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT
; _this$ = ecx

; 143  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
EXTRN	__imp__IsRectEmpty@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?IsRectEmpty@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRectEmpty@CRect@@QBEHXZ PROC NEAR			; CRect::IsRectEmpty, COMDAT
; _this$ = ecx

; 147  : 	{ return ::IsRectEmpty(this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsRectEmpty@4
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?IsRectEmpty@CRect@@QBEHXZ ENDP				; CRect::IsRectEmpty
_TEXT	ENDS
EXTRN	__imp__PtInRect@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?PtInRect@CRect@@QBEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_point$ = 8						; size = 8
?PtInRect@CRect@@QBEHUtagPOINT@@@Z PROC NEAR		; CRect::PtInRect, COMDAT
; _this$ = ecx

; 151  : 	{ return ::PtInRect(this, point); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp+4]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?PtInRect@CRect@@QBEHUtagPOINT@@@Z ENDP			; CRect::PtInRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetRectEmpty@CRect@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetRectEmpty@CRect@@QAEXXZ PROC NEAR			; CRect::SetRectEmpty, COMDAT
; _this$ = ecx

; 157  : 	{ ::SetRectEmpty(this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRectEmpty@4
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?SetRectEmpty@CRect@@QAEXXZ ENDP			; CRect::SetRectEmpty
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OffsetRect@CRect@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?OffsetRect@CRect@@QAEXHH@Z PROC NEAR			; CRect::OffsetRect, COMDAT
; _this$ = ecx

; 171  : 	{ ::OffsetRect(this, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRect@12
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?OffsetRect@CRect@@QAEXHH@Z ENDP			; CRect::OffsetRect
_TEXT	ENDS
EXTRN	__imp__CopyRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ??4CRect@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_srcRect$ = 8						; size = 4
??4CRect@@QAEXABUtagRECT@@@Z PROC NEAR			; CRect::operator=, COMDAT
; _this$ = ecx

; 189  : 	{ ::CopyRect(this, &srcRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _srcRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyRect@8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??4CRect@@QAEXABUtagRECT@@@Z ENDP			; CRect::operator=
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT
; _this$ = ecx

; 25   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 31   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Odt
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 37   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 41   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT
; _this$ = ecx

; 43   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
EXTRN	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:NEAR ; AfxGetModuleState
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
;	COMDAT ?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ PROC NEAR	; AfxGetInstanceHandle, COMDAT

; 23   : 	{ ASSERT(afxCurrentInstanceHandle != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 		return afxCurrentInstanceHandle; }

  00003	e8 00 00 00 00	 call	 ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
  00008	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ ENDP	; AfxGetInstanceHandle
_TEXT	ENDS
EXTRN	__imp__GetStockObject@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateStockObject@CGdiObject@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?CreateStockObject@CGdiObject@@QAEHH@Z PROC NEAR	; CGdiObject::CreateStockObject, COMDAT
; _this$ = ecx

; 88   : 	{ return (m_hObject = ::GetStockObject(nIndex)) != NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	33 c0		 xor	 eax, eax
  0001c	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00020	0f 95 c0	 setne	 al
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?CreateStockObject@CGdiObject@@QAEHH@Z ENDP		; CGdiObject::CreateStockObject
_TEXT	ENDS
PUBLIC	??_R0?AVCGdiObject@@@8				; CGdiObject `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@A@CGdiObject@@8			; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_R4CBrush@@6B@				; CBrush::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBrush@@@8				; CBrush `RTTI Type Descriptor'
PUBLIC	??_R3CBrush@@8					; CBrush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBrush@@8					; CBrush::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBrush@@8				; CBrush::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??_7CBrush@@6B@					; CBrush::`vftable'
PUBLIC	??_GCBrush@@UAEPAXI@Z				; CBrush::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ:NEAR ; CBrush::GetRuntimeClass
EXTRN	??_ECBrush@@UAEPAXI@Z:NEAR			; CBrush::`vector deleting destructor'
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT
??_7CBrush@@6B@ DD FLAT:??_R4CBrush@@6B@		; CBrush::`vftable'
	DD	FLAT:?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBrush@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CBrush@@6B@
rdata$r	SEGMENT
??_R4CBrush@@6B@ DD 00H					; CBrush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBrush@@@8
	DD	FLAT:??_R3CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBrush@@@8
_DATA	SEGMENT
??_R0?AVCBrush@@@8 DD FLAT:??_7type_info@@6B@		; CBrush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBrush@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBrush@@8
rdata$r	SEGMENT
??_R3CBrush@@8 DD 00H					; CBrush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R2CBrush@@8
rdata$r	SEGMENT
??_R2CBrush@@8 DD FLAT:??_R1A@?0A@A@CBrush@@8		; CBrush::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBrush@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBrush@@8 DD FLAT:??_R0?AVCBrush@@@8	; CBrush::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CGdiObject@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CGdiObject@@8 DD FLAT:??_R0?AVCGdiObject@@@8 ; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
_DATA	SEGMENT
??_R0?AVCGdiObject@@@8 DD FLAT:??_7type_info@@6B@	; CGdiObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGdiObject@@', 00H
; Function compile flags: /Odt
_DATA	ENDS
;	COMDAT ??0CBrush@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBrush@@QAE@XZ PROC NEAR				; CBrush::CBrush, COMDAT
; _this$ = ecx

; 128  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBrush@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CBrush@@QAE@XZ ENDP					; CBrush::CBrush
_TEXT	ENDS
PUBLIC	??_R4CGdiObject@@6B@				; CGdiObject::`RTTI Complete Object Locator'
PUBLIC	??_R3CGdiObject@@8				; CGdiObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGdiObject@@8				; CGdiObject::`RTTI Base Class Array'
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CGdiObject::GetRuntimeClass
EXTRN	??_ECGdiObject@@UAEPAXI@Z:NEAR			; CGdiObject::`vector deleting destructor'
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:??_R4CGdiObject@@6B@	; CGdiObject::`vftable'
	DD	FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT
??_R4CGdiObject@@6B@ DD 00H				; CGdiObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGdiObject@@@8
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT
??_R3CGdiObject@@8 DD 00H				; CGdiObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT
??_R2CGdiObject@@8 DD FLAT:??_R1A@?0A@A@CGdiObject@@8	; CGdiObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CObject@@8
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGdiObject@@QAE@XZ PROC NEAR				; CGdiObject::CGdiObject, COMDAT
; _this$ = ecx

; 82   : 	{ m_hObject = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObject@@IAE@XZ PROC NEAR				; CObject::CObject, COMDAT
; _this$ = ecx

; 21   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGdiObject@@UAEPAXI@Z PROC NEAR			; CGdiObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41495
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41495:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
xdata$x	SEGMENT
$T199486 DD	0ffffffffH
	DD	FLAT:$L199482
$T199484 DD	019930520H
	DD	01H
	DD	FLAT:$T199486
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt
xdata$x	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGdiObject@@UAE@XZ PROC NEAR				; CGdiObject::~CGdiObject, COMDAT
; _this$ = ecx

; 84   : 	{ DeleteObject(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGdiObject@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L199482:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CGdiObject@@UAE@XZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T199484
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CObject@@UAE@XZ PROC NEAR				; CObject::~CObject, COMDAT
; _this$ = ecx

; 23   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBrush@@UAEPAXI@Z PROC NEAR				; CBrush::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBrush@@UAE@XZ	; CBrush::~CBrush
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41589
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41589:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBrush@@UAEPAXI@Z ENDP				; CBrush::`scalar deleting destructor'
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin1.inl
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBrush@@UAE@XZ PROC NEAR				; CBrush::~CBrush, COMDAT
; _this$ = ecx

; 130  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBrush@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CBrush@@UAE@XZ ENDP					; CBrush::~CBrush
_TEXT	ENDS
EXTRN	__imp__CreateSolidBrush@4:NEAR
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:NEAR		; CGdiObject::Attach
; Function compile flags: /Odt
;	COMDAT ?CreateSolidBrush@CBrush@@QAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_crColor$ = 8						; size = 4
?CreateSolidBrush@CBrush@@QAEHK@Z PROC NEAR		; CBrush::CreateSolidBrush, COMDAT
; _this$ = ecx

; 132  : 	{ return Attach(::CreateSolidBrush(crColor)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _crColor$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?CreateSolidBrush@CBrush@@QAEHK@Z ENDP			; CBrush::CreateSolidBrush
_TEXT	ENDS
PUBLIC	??_R4CFont@@6B@					; CFont::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFont@@@8				; CFont `RTTI Type Descriptor'
PUBLIC	??_R3CFont@@8					; CFont::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFont@@8					; CFont::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CFont@@8				; CFont::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:NEAR ; CFont::GetRuntimeClass
EXTRN	??_ECFont@@UAEPAXI@Z:NEAR			; CFont::`vector deleting destructor'
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:??_R4CFont@@6B@			; CFont::`vftable'
	DD	FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT
??_R4CFont@@6B@ DD 00H					; CFont::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFont@@@8
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT
??_R0?AVCFont@@@8 DD FLAT:??_7type_info@@6B@		; CFont `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFont@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT
??_R3CFont@@8 DD 00H					; CFont::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CFont@@8
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT
??_R2CFont@@8 DD FLAT:??_R1A@?0A@A@CFont@@8		; CFont::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CFont@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CFont@@8 DD FLAT:??_R0?AVCFont@@@8		; CFont::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFont@@QAE@XZ PROC NEAR				; CFont::CFont, COMDAT
; _this$ = ecx

; 153  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CFont@@QAE@XZ ENDP					; CFont::CFont
_TEXT	ENDS
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
; Function compile flags: /Odt
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFont@@UAEPAXI@Z PROC NEAR				; CFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41640
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41640:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFont@@UAE@XZ PROC NEAR				; CFont::~CFont, COMDAT
; _this$ = ecx

; 155  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
EXTRN	__imp__CreateFontIndirectA@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpLogFont$ = 8						; size = 4
?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z PROC NEAR ; CFont::CreateFontIndirectA, COMDAT
; _this$ = ecx

; 157  : 	{ return Attach(::CreateFontIndirect(lpLogFont)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpLogFont$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?CreateFontIndirectA@CFont@@QAEHPBUtagLOGFONTA@@@Z ENDP	; CFont::CreateFontIndirectA
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pLogFont$ = 8						; size = 4
?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z PROC NEAR	; CFont::GetLogFont, COMDAT
; _this$ = ecx

; 168  : 	{ ASSERT(m_hObject != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 		return ::GetObject(m_hObject, sizeof(LOGFONT), pLogFont); }

  00007	8b 45 08	 mov	 eax, DWORD PTR _pLogFont$[ebp]
  0000a	50		 push	 eax
  0000b	6a 3c		 push	 60			; 0000003cH
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetLogFont@CFont@@QAEHPAUtagLOGFONTA@@@Z ENDP		; CFont::GetLogFont
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??BCBitmap@@QBEPAUHBITMAP__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
??BCBitmap@@QBEPAUHBITMAP__@@XZ PROC NEAR		; CBitmap::operator HBITMAP__ *, COMDAT
; _this$ = ecx

; 173  : 	{ return (HBITMAP)(this == NULL ? NULL : m_hObject); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L199512
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L199513
$L199512:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L199513:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??BCBitmap@@QBEPAUHBITMAP__@@XZ ENDP			; CBitmap::operator HBITMAP__ *
_TEXT	ENDS
EXTRN	?FromHandle@CGdiObject@@SGPAV1@PAX@Z:NEAR	; CGdiObject::FromHandle
; Function compile flags: /Odt
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT
_hBitmap$ = 8						; size = 4
?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z PROC NEAR	; CBitmap::FromHandle, COMDAT

; 175  : 	{ return (CBitmap*) CGdiObject::FromHandle(hBitmap); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?FromHandle@CGdiObject@@SGPAV1@PAX@Z ; CGdiObject::FromHandle
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z ENDP	; CBitmap::FromHandle
_TEXT	ENDS
PUBLIC	??_R4CBitmap@@6B@				; CBitmap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBitmap@@@8				; CBitmap `RTTI Type Descriptor'
PUBLIC	??_R3CBitmap@@8					; CBitmap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBitmap@@8					; CBitmap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CBitmap@@8				; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_7CBitmap@@6B@				; CBitmap::`vftable'
PUBLIC	??_GCBitmap@@UAEPAXI@Z				; CBitmap::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ:NEAR ; CBitmap::GetRuntimeClass
EXTRN	??_ECBitmap@@UAEPAXI@Z:NEAR			; CBitmap::`vector deleting destructor'
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT
??_7CBitmap@@6B@ DD FLAT:??_R4CBitmap@@6B@		; CBitmap::`vftable'
	DD	FLAT:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBitmap@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT
??_R4CBitmap@@6B@ DD 00H				; CBitmap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBitmap@@@8
	DD	FLAT:??_R3CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
_DATA	SEGMENT
??_R0?AVCBitmap@@@8 DD FLAT:??_7type_info@@6B@		; CBitmap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBitmap@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT
??_R3CBitmap@@8 DD 00H					; CBitmap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT
??_R2CBitmap@@8 DD FLAT:??_R1A@?0A@A@CBitmap@@8		; CBitmap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CBitmap@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CBitmap@@8 DD FLAT:??_R0?AVCBitmap@@@8	; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBitmap@@QAE@XZ PROC NEAR				; CBitmap::CBitmap, COMDAT
; _this$ = ecx

; 177  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBitmap@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CBitmap@@QAE@XZ ENDP					; CBitmap::CBitmap
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBitmap@@UAEPAXI@Z PROC NEAR			; CBitmap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41685
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41685:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCBitmap@@UAEPAXI@Z ENDP				; CBitmap::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBitmap@@UAE@XZ PROC NEAR				; CBitmap::~CBitmap, COMDAT
; _this$ = ecx

; 179  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBitmap@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CBitmap@@UAE@XZ ENDP					; CBitmap::~CBitmap
_TEXT	ENDS
EXTRN	__imp__CreateCompatibleBitmap@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
_nWidth$ = 12						; size = 4
_nHeight$ = 16						; size = 4
?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z PROC NEAR ; CBitmap::CreateCompatibleBitmap, COMDAT
; _this$ = ecx

; 217  : 	{ return Attach(::CreateCompatibleBitmap(pDC->m_hDC, nWidth, nHeight)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ENDP	; CBitmap::CreateCompatibleBitmap
_TEXT	ENDS
PUBLIC	??_R4CRgn@@6B@					; CRgn::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRgn@@@8				; CRgn `RTTI Type Descriptor'
PUBLIC	??_R3CRgn@@8					; CRgn::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRgn@@8					; CRgn::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@A@CRgn@@8				; CRgn::`RTTI Base Class Descriptor at (0,-1,0,0)'
PUBLIC	??_7CRgn@@6B@					; CRgn::`vftable'
PUBLIC	??_GCRgn@@UAEPAXI@Z				; CRgn::`scalar deleting destructor'
EXTRN	?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ:NEAR ; CRgn::GetRuntimeClass
EXTRN	??_ECRgn@@UAEPAXI@Z:NEAR			; CRgn::`vector deleting destructor'
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT
??_7CRgn@@6B@ DD FLAT:??_R4CRgn@@6B@			; CRgn::`vftable'
	DD	FLAT:?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECRgn@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CRgn@@6B@
rdata$r	SEGMENT
??_R4CRgn@@6B@ DD 00H					; CRgn::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRgn@@@8
	DD	FLAT:??_R3CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRgn@@@8
_DATA	SEGMENT
??_R0?AVCRgn@@@8 DD FLAT:??_7type_info@@6B@		; CRgn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRgn@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CRgn@@8
rdata$r	SEGMENT
??_R3CRgn@@8 DD	00H					; CRgn::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R2CRgn@@8
rdata$r	SEGMENT
??_R2CRgn@@8 DD	FLAT:??_R1A@?0A@A@CRgn@@8		; CRgn::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@A@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@A@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@A@CRgn@@8
rdata$r	SEGMENT
??_R1A@?0A@A@CRgn@@8 DD FLAT:??_R0?AVCRgn@@@8		; CRgn::`RTTI Base Class Descriptor at (0,-1,0,0)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
; Function compile flags: /Odt
rdata$r	ENDS
;	COMDAT ??0CRgn@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRgn@@QAE@XZ PROC NEAR				; CRgn::CRgn, COMDAT
; _this$ = ecx

; 264  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRgn@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CRgn@@QAE@XZ ENDP					; CRgn::CRgn
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCRgn@@UAEPAXI@Z PROC NEAR				; CRgn::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $L41872
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L41872:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCRgn@@UAEPAXI@Z ENDP				; CRgn::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CRgn@@UAE@XZ PROC NEAR				; CRgn::~CRgn, COMDAT
; _this$ = ecx

; 266  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRgn@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CRgn@@UAE@XZ ENDP					; CRgn::~CRgn
_TEXT	ENDS
EXTRN	__imp__CreateRectRgn@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateRectRgn@CRgn@@QAEHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?CreateRectRgn@CRgn@@QAEHHHHH@Z PROC NEAR		; CRgn::CreateRectRgn, COMDAT
; _this$ = ecx

; 268  : 	{ return Attach(::CreateRectRgn(x1, y1, x2, y2)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateRectRgn@16
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 10 00	 ret	 16			; 00000010H
?CreateRectRgn@CRgn@@QAEHHHHH@Z ENDP			; CRgn::CreateRectRgn
_TEXT	ENDS
EXTRN	__imp__CreatePolygonRgn@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpPoints$ = 8						; size = 4
_nCount$ = 12						; size = 4
_nMode$ = 16						; size = 4
?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z PROC NEAR	; CRgn::CreatePolygonRgn, COMDAT
; _this$ = ecx

; 276  : 	{ return Attach(::CreatePolygonRgn(lpPoints, nCount, nMode)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nMode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _lpPoints$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePolygonRgn@12
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z ENDP	; CRgn::CreatePolygonRgn
_TEXT	ENDS
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
EXTRN	__imp__CombineRgn@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?CombineRgn@CRgn@@QAEHPAV1@0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pRgn1$ = 8						; size = 4
_pRgn2$ = 12						; size = 4
_nCombineMode$ = 16					; size = 4
?CombineRgn@CRgn@@QAEHPAV1@0H@Z PROC NEAR		; CRgn::CombineRgn, COMDAT
; _this$ = ecx

; 293  : 	{ ASSERT(m_hObject != NULL); return ::CombineRgn((HRGN)m_hObject, (HRGN)pRgn1->GetSafeHandle(),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 294  : 		(HRGN)pRgn2->GetSafeHandle(), nCombineMode); }

  00007	8b 45 10	 mov	 eax, DWORD PTR _nCombineMode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pRgn2$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pRgn1$[ebp]
  00017	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00023	52		 push	 edx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CombineRgn@16
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?CombineRgn@CRgn@@QAEHPAV1@0H@Z ENDP			; CRgn::CombineRgn
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC NEAR		; CGdiObject::GetSafeHandle, COMDAT
; _this$ = ecx

; 80   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L199542
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L199543
$L199542:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L199543:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CopyRgn@CRgn@@QAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pRgnSrc$ = 8						; size = 4
?CopyRgn@CRgn@@QAEHPAV1@@Z PROC NEAR			; CRgn::CopyRgn, COMDAT
; _this$ = ecx

; 296  : 	{ ASSERT(m_hObject != NULL); return ::CombineRgn((HRGN)m_hObject, (HRGN)pRgnSrc->GetSafeHandle(), NULL, RGN_COPY); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 05		 push	 5
  00009	6a 00		 push	 0
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pRgnSrc$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CombineRgn@16
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?CopyRgn@CRgn@@QAEHPAV1@@Z ENDP				; CRgn::CopyRgn
_TEXT	ENDS
EXTRN	__imp__EqualRgn@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?EqualRgn@CRgn@@QBEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pRgn$ = 8						; size = 4
?EqualRgn@CRgn@@QBEHPAV1@@Z PROC NEAR			; CRgn::EqualRgn, COMDAT
; _this$ = ecx

; 298  : 	{ ASSERT(m_hObject != NULL); return ::EqualRgn((HRGN)m_hObject, (HRGN)pRgn->GetSafeHandle()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pRgn$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0000f	50		 push	 eax
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EqualRgn@8
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EqualRgn@CRgn@@QBEHPAV1@@Z ENDP			; CRgn::EqualRgn
_TEXT	ENDS
EXTRN	__imp__OffsetRgn@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?OffsetRgn@CRgn@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?OffsetRgn@CRgn@@QAEHHH@Z PROC NEAR			; CRgn::OffsetRgn, COMDAT
; _this$ = ecx

; 300  : 	{ ASSERT(m_hObject != NULL); return ::OffsetRgn((HRGN)m_hObject, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRgn@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?OffsetRgn@CRgn@@QAEHHH@Z ENDP				; CRgn::OffsetRgn
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??BCDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
??BCDC@@QBEPAUHDC__@@XZ PROC NEAR			; CDC::operator HDC__ *, COMDAT
; _this$ = ecx

; 314  : 	{ return this == NULL ? NULL : m_hDC; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L199552
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L199553
$L199552:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L199553:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??BCDC@@QBEPAUHDC__@@XZ ENDP				; CDC::operator HDC__ *
_TEXT	ENDS
PUBLIC	?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ		; CDC::GetSafeHdc
EXTRN	__imp__CreateCompatibleDC@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateCompatibleDC@CDC@@QAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
?CreateCompatibleDC@CDC@@QAEHPAV1@@Z PROC NEAR		; CDC::CreateCompatibleDC, COMDAT
; _this$ = ecx

; 330  : 	{ return Attach(::CreateCompatibleDC(pDC->GetSafeHdc())); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?CreateCompatibleDC@CDC@@QAEHPAV1@@Z ENDP		; CDC::CreateCompatibleDC
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ PROC NEAR		; CDC::GetSafeHdc, COMDAT
; _this$ = ecx

; 316  : 	{ return this == NULL ? NULL : m_hDC; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L199558
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L199559
$L199558:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L199559:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ENDP			; CDC::GetSafeHdc
_TEXT	ENDS
EXTRN	?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z:NEAR ; CDC::SelectGdiObject
; Function compile flags: /Odt
;	COMDAT ?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBitmap$ = 8						; size = 4
?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z PROC NEAR	; CDC::SelectObject, COMDAT
; _this$ = ecx

; 361  : 	{ ASSERT(m_hDC != NULL); return (CBitmap*) SelectGdiObject(m_hDC, pBitmap->GetSafeHandle()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pBitmap$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0000f	50		 push	 eax
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z ; CDC::SelectGdiObject
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ENDP		; CDC::SelectObject
_TEXT	ENDS
EXTRN	__imp__FrameRgn@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pRgn$ = 8						; size = 4
_pBrush$ = 12						; size = 4
_nWidth$ = 16						; size = 4
_nHeight$ = 20						; size = 4
?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z PROC NEAR	; CDC::FrameRgn, COMDAT
; _this$ = ecx

; 439  : 	{ ASSERT(m_hDC != NULL); return ::FrameRgn(m_hDC, (HRGN)pRgn->GetSafeHandle(), (HBRUSH)pBrush->GetSafeHandle(),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 440  : 		nWidth, nHeight); }

  00007	8b 45 14	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _pBrush$[ebp]
  00012	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pRgn$[ebp]
  0001b	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00020	50		 push	 eax
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FrameRgn@20
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 10 00	 ret	 16			; 00000010H
?FrameRgn@CDC@@QAEHPAVCRgn@@PAVCBrush@@HH@Z ENDP	; CDC::FrameRgn
_TEXT	ENDS
EXTRN	__imp__DrawFrameControl@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
_nType$ = 12						; size = 4
_nState$ = 16						; size = 4
?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z PROC NEAR	; CDC::DrawFrameControl, COMDAT
; _this$ = ecx

; 508  : 	{ ASSERT(m_hDC != NULL); return ::DrawFrameControl(m_hDC, lpRect, nType, nState); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nState$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nType$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawFrameControl@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z ENDP	; CDC::DrawFrameControl
_TEXT	ENDS
EXTRN	__imp__StretchBlt@44:NEAR
; Function compile flags: /Odt
;	COMDAT ?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nWidth$ = 16						; size = 4
_nHeight$ = 20						; size = 4
_pSrcDC$ = 24						; size = 4
_xSrc$ = 28						; size = 4
_ySrc$ = 32						; size = 4
_nSrcWidth$ = 36					; size = 4
_nSrcHeight$ = 40					; size = 4
_dwRop$ = 44						; size = 4
?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z PROC NEAR		; CDC::StretchBlt, COMDAT
; _this$ = ecx

; 552  : 	{ ASSERT(m_hDC != NULL); return ::StretchBlt(m_hDC, x, y, nWidth, nHeight,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 553  : 		pSrcDC->GetSafeHdc(), xSrc, ySrc, nSrcWidth, nSrcHeight,
; 554  : 		dwRop); }

  00007	8b 45 2c	 mov	 eax, DWORD PTR _dwRop$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 28	 mov	 ecx, DWORD PTR _nSrcHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 24	 mov	 edx, DWORD PTR _nSrcWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 20	 mov	 eax, DWORD PTR _ySrc$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 1c	 mov	 ecx, DWORD PTR _xSrc$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d 18	 mov	 ecx, DWORD PTR _pSrcDC$[ebp]
  0001e	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  00023	50		 push	 eax
  00024	8b 55 14	 mov	 edx, DWORD PTR _nHeight$[ebp]
  00027	52		 push	 edx
  00028	8b 45 10	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00033	52		 push	 edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	51		 push	 ecx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StretchBlt@44
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 28 00	 ret	 40			; 00000028H
?StretchBlt@CDC@@QAEHHHHHPAV1@HHHHK@Z ENDP		; CDC::StretchBlt
_TEXT	ENDS
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_lpRect$ = 12						; size = 4
_nFormat$ = 16						; size = 4
?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z PROC NEAR ; CDC::DrawTextA, COMDAT
; _this$ = ecx

; 592  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 593  : 		// these flags would modify the string
; 594  : 		ASSERT((nFormat & (DT_END_ELLIPSIS | DT_MODIFYSTRING)) != (DT_END_ELLIPSIS | DT_MODIFYSTRING));
; 595  : 		ASSERT((nFormat & (DT_PATH_ELLIPSIS | DT_MODIFYSTRING)) != (DT_PATH_ELLIPSIS | DT_MODIFYSTRING));
; 596  : 		return DrawText((LPCTSTR)str, (int)str.GetLength(), lpRect, nFormat); }

  00007	8b 45 10	 mov	 eax, DWORD PTR _nFormat$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00022	50		 push	 eax
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	ff 50 70	 call	 DWORD PTR [eax+112]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?DrawTextA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@I@Z ENDP ; CDC::DrawTextA
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxwin2.inl
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ PROC NEAR		; CWnd::GetSafeHwnd, COMDAT
; _this$ = ecx

; 27   : 	{ return this == NULL ? NULL : m_hWnd; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L199572
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $L199573
$L199572:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$L199573:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ENDP		; CWnd::GetSafeHwnd
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendMessageA@CWnd@@QAEJIIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?SendMessageA@CWnd@@QAEJIIJ@Z PROC NEAR			; CWnd::SendMessageA, COMDAT
; _this$ = ecx

; 44   : 	{ ASSERT(::IsWindow(m_hWnd)); return ::SendMessage(m_hWnd, message, wParam, lParam); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _message$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWnd@@QAEJIIJ@Z ENDP			; CWnd::SendMessageA
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?PostMessageA@CWnd@@QAEHIIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?PostMessageA@CWnd@@QAEHIIJ@Z PROC NEAR			; CWnd::PostMessageA, COMDAT
; _this$ = ecx

; 46   : 	{ ASSERT(::IsWindow(m_hWnd)); return ::PostMessage(m_hWnd, message, wParam, lParam); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _message$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWnd@@QAEHIIJ@Z ENDP			; CWnd::PostMessageA
_TEXT	ENDS
EXTRN	__imp__SetWindowRgn@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hRgn$ = 8						; size = 4
_bRedraw$ = 12						; size = 4
?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z PROC NEAR	; CWnd::SetWindowRgn, COMDAT
; _this$ = ecx

; 99   : 	{ ASSERT(::IsWindow(m_hWnd)); return ::SetWindowRgn(m_hWnd, hRgn, bRedraw); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRedraw$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _hRgn$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowRgn@12
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetWindowRgn@CWnd@@QAEHPAUHRGN__@@H@Z ENDP		; CWnd::SetWindowRgn
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetWindowRect, COMDAT
; _this$ = ecx

; 105  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetWindowRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetClientRect, COMDAT
; _this$ = ecx

; 107  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetClientRect
_TEXT	ENDS
EXTRN	__imp__InvalidateRect@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Invalidate@CWnd@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bErase$ = 8						; size = 4
?Invalidate@CWnd@@QAEXH@Z PROC NEAR			; CWnd::Invalidate, COMDAT
; _this$ = ecx

; 135  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _bErase$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?Invalidate@CWnd@@QAEXH@Z ENDP				; CWnd::Invalidate
_TEXT	ENDS
EXTRN	__imp__RedrawWindow@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRectUpdate$ = 8					; size = 4
_prgnUpdate$ = 12					; size = 4
_flags$ = 16						; size = 4
?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z PROC NEAR ; CWnd::RedrawWindow, COMDAT
; _this$ = ecx

; 172  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::RedrawWindow(m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(), flags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _prgnUpdate$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _lpRectUpdate$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RedrawWindow@16
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ENDP	; CWnd::RedrawWindow
_TEXT	ENDS
EXTRN	__imp__SetTimer@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
_nElapse$ = 12						; size = 4
_lpfnTimer$ = 16					; size = 4
?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z PROC NEAR	; CWnd::SetTimer, COMDAT
; _this$ = ecx

; 182  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::SetTimer(m_hWnd, nIDEvent, nElapse,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  : 		lpfnTimer); }

  00007	8b 45 10	 mov	 eax, DWORD PTR _lpfnTimer$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nElapse$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nIDEvent$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ENDP	; CWnd::SetTimer
_TEXT	ENDS
EXTRN	__imp__KillTimer@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?KillTimer@CWnd@@QAEHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
?KillTimer@CWnd@@QAEHI@Z PROC NEAR			; CWnd::KillTimer, COMDAT
; _this$ = ecx

; 185  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::KillTimer(m_hWnd, nIDEvent); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIDEvent$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?KillTimer@CWnd@@QAEHI@Z ENDP				; CWnd::KillTimer
_TEXT	ENDS
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:NEAR	; CWnd::FromHandle
EXTRN	__imp__GetCapture@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetCapture@CWnd@@SGPAV1@XZ
_TEXT	SEGMENT
?GetCapture@CWnd@@SGPAV1@XZ PROC NEAR			; CWnd::GetCapture, COMDAT

; 197  : 	{ return CWnd::FromHandle(::GetCapture()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCapture@0
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetCapture@CWnd@@SGPAV1@XZ ENDP			; CWnd::GetCapture
_TEXT	ENDS
EXTRN	__imp__SetCapture@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetCapture@CWnd@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetCapture@CWnd@@QAEPAV1@XZ PROC NEAR			; CWnd::SetCapture, COMDAT
; _this$ = ecx

; 199  : 	{ ASSERT(::IsWindow(m_hWnd)); return CWnd::FromHandle(::SetCapture(m_hWnd)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCapture@4
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?SetCapture@CWnd@@QAEPAV1@XZ ENDP			; CWnd::SetCapture
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT
; _this$ = ecx

; 545  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT
; _this$ = ecx

; 549  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT
; _this$ = ecx

; 551  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
EXTRN	_labs:NEAR
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?abs@@YAJJ@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?abs@@YAJJ@Z PROC NEAR					; abs, COMDAT

; 529  :         {return (labs(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _labs
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?abs@@YAJJ@Z ENDP					; abs
; Function compile flags: /Odt
; File d:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\afxcmn.inl
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCImageList@@QBEPAU_IMAGELIST@@XZ PROC NEAR		; CImageList::operator _IMAGELIST *, COMDAT
; _this$ = ecx

; 493  : 	{ return m_hImageList;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BCImageList@@QBEPAU_IMAGELIST@@XZ ENDP		; CImageList::operator _IMAGELIST *
_TEXT	ENDS
EXTRN	__imp__ImageList_GetImageCount@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetImageCount@CImageList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetImageCount@CImageList@@QBEHXZ PROC NEAR		; CImageList::GetImageCount, COMDAT
; _this$ = ecx

; 497  : 	{ ASSERT(m_hImageList != NULL); return ImageList_GetImageCount(m_hImageList); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetImageCount@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetImageCount@CImageList@@QBEHXZ ENDP			; CImageList::GetImageCount
_TEXT	ENDS
EXTRN	__imp__ImageList_Add@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Add@CImageList@@QAEHPAVCBitmap@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbmImage$ = 8						; size = 4
_pbmMask$ = 12						; size = 4
?Add@CImageList@@QAEHPAVCBitmap@@0@Z PROC NEAR		; CImageList::Add, COMDAT
; _this$ = ecx

; 499  : 	{ ASSERT(m_hImageList != NULL); return ImageList_Add(m_hImageList, (HBITMAP)pbmImage->GetSafeHandle(), (HBITMAP)pbmMask->GetSafeHandle()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pbmMask$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _pbmImage$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00018	50		 push	 eax
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Add@12
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?Add@CImageList@@QAEHPAVCBitmap@@0@Z ENDP		; CImageList::Add
_TEXT	ENDS
EXTRN	__imp__ImageList_AddMasked@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Add@CImageList@@QAEHPAVCBitmap@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbmImage$ = 8						; size = 4
_crMask$ = 12						; size = 4
?Add@CImageList@@QAEHPAVCBitmap@@K@Z PROC NEAR		; CImageList::Add, COMDAT
; _this$ = ecx

; 501  : 	{ ASSERT(m_hImageList != NULL); return ImageList_AddMasked(m_hImageList, (HBITMAP)pbmImage->GetSafeHandle(), crMask); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _crMask$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pbmImage$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	52		 push	 edx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_AddMasked@12
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?Add@CImageList@@QAEHPAVCBitmap@@K@Z ENDP		; CImageList::Add
_TEXT	ENDS
EXTRN	__imp__ImageList_GetIcon@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nImage$ = 8						; size = 4
?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z PROC NEAR	; CImageList::ExtractIconA, COMDAT
; _this$ = ecx

; 511  : 	{ ASSERT(m_hImageList != NULL); return ImageList_ExtractIcon(NULL, m_hImageList, nImage); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _nImage$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetIcon@12
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?ExtractIconA@CImageList@@QAEPAUHICON__@@H@Z ENDP	; CImageList::ExtractIconA
_TEXT	ENDS
EXTRN	__imp__ImageList_Draw@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
_nImage$ = 12						; size = 4
_pt$ = 16						; size = 8
_nStyle$ = 24						; size = 4
?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z PROC NEAR	; CImageList::Draw, COMDAT
; _this$ = ecx

; 513  : 	{ ASSERT(m_hImageList != NULL); ASSERT(pDC != NULL); return ImageList_Draw(m_hImageList, nImage, pDC->GetSafeHdc(), pt.x, pt.y, nStyle); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 18	 mov	 eax, DWORD PTR _nStyle$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _pt$[ebp+4]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _pt$[ebp]
  00012	52		 push	 edx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  0001b	50		 push	 eax
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _nImage$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Draw@24
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 14 00	 ret	 20			; 00000014H
?Draw@CImageList@@QAEHPAVCDC@@HUtagPOINT@@I@Z ENDP	; CImageList::Draw
_TEXT	ENDS
EXTRN	__imp__ImageList_SetBkColor@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetBkColor@CImageList@@QAEKK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cr$ = 8						; size = 4
?SetBkColor@CImageList@@QAEKK@Z PROC NEAR		; CImageList::SetBkColor, COMDAT
; _this$ = ecx

; 517  : 	{ ASSERT(m_hImageList != NULL); return ImageList_SetBkColor(m_hImageList, cr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _cr$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_SetBkColor@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetBkColor@CImageList@@QAEKK@Z ENDP			; CImageList::SetBkColor
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L127276:
  00003	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000c	78 11		 js	 SHORT $L127274
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00011	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  0001a	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  0001d	eb e4		 jmp	 SHORT $L127276
$L127274:
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
